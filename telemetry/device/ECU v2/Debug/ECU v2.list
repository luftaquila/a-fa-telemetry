
ECU v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dea4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006c4  0800e034  0800e034  0001e034  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e6f8  0800e6f8  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  0800e6f8  0800e6f8  0001e6f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e700  0800e700  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e700  0800e700  0001e700  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e704  0800e704  0001e704  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800e708  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          000016d8  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20001748  20001748  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   00021def  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004cc4  00000000  00000000  00041e8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001c48  00000000  00000000  00046b58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001a18  00000000  00000000  000487a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00028de4  00000000  00000000  0004a1b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002834d  00000000  00000000  00072f9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000eb8f3  00000000  00000000  0009b2e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00186bdc  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007ecc  00000000  00000000  00186c2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800e01c 	.word	0x0800e01c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	0800e01c 	.word	0x0800e01c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b974 	b.w	8000570 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468e      	mov	lr, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14d      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4694      	mov	ip, r2
 80002b2:	d969      	bls.n	8000388 <__udivmoddi4+0xe8>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b152      	cbz	r2, 80002d0 <__udivmoddi4+0x30>
 80002ba:	fa01 f302 	lsl.w	r3, r1, r2
 80002be:	f1c2 0120 	rsb	r1, r2, #32
 80002c2:	fa20 f101 	lsr.w	r1, r0, r1
 80002c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ca:	ea41 0e03 	orr.w	lr, r1, r3
 80002ce:	4094      	lsls	r4, r2
 80002d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d4:	0c21      	lsrs	r1, r4, #16
 80002d6:	fbbe f6f8 	udiv	r6, lr, r8
 80002da:	fa1f f78c 	uxth.w	r7, ip
 80002de:	fb08 e316 	mls	r3, r8, r6, lr
 80002e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002e6:	fb06 f107 	mul.w	r1, r6, r7
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f6:	f080 811f 	bcs.w	8000538 <__udivmoddi4+0x298>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 811c 	bls.w	8000538 <__udivmoddi4+0x298>
 8000300:	3e02      	subs	r6, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 f707 	mul.w	r7, r0, r7
 8000318:	42a7      	cmp	r7, r4
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x92>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295
 8000324:	f080 810a 	bcs.w	800053c <__udivmoddi4+0x29c>
 8000328:	42a7      	cmp	r7, r4
 800032a:	f240 8107 	bls.w	800053c <__udivmoddi4+0x29c>
 800032e:	4464      	add	r4, ip
 8000330:	3802      	subs	r0, #2
 8000332:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000336:	1be4      	subs	r4, r4, r7
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa4>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0xc2>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80ef 	beq.w	8000532 <__udivmoddi4+0x292>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x160>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd4>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80f9 	bhi.w	8000566 <__udivmoddi4+0x2c6>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0303 	sbc.w	r3, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	469e      	mov	lr, r3
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0e0      	beq.n	8000344 <__udivmoddi4+0xa4>
 8000382:	e9c5 4e00 	strd	r4, lr, [r5]
 8000386:	e7dd      	b.n	8000344 <__udivmoddi4+0xa4>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xec>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 8092 	bne.w	80004ba <__udivmoddi4+0x21a>
 8000396:	eba1 010c 	sub.w	r1, r1, ip
 800039a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	2601      	movs	r6, #1
 80003a4:	0c20      	lsrs	r0, r4, #16
 80003a6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003aa:	fb07 1113 	mls	r1, r7, r3, r1
 80003ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b2:	fb0e f003 	mul.w	r0, lr, r3
 80003b6:	4288      	cmp	r0, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x12c>
 80003ba:	eb1c 0101 	adds.w	r1, ip, r1
 80003be:	f103 38ff 	add.w	r8, r3, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x12a>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f200 80cb 	bhi.w	8000560 <__udivmoddi4+0x2c0>
 80003ca:	4643      	mov	r3, r8
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d4:	fb07 1110 	mls	r1, r7, r0, r1
 80003d8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003dc:	fb0e fe00 	mul.w	lr, lr, r0
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x156>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x154>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f200 80bb 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003f4:	4608      	mov	r0, r1
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	e79c      	b.n	800033a <__udivmoddi4+0x9a>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	ea4c 0c03 	orr.w	ip, ip, r3
 800040e:	fa20 f407 	lsr.w	r4, r0, r7
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	431c      	orrs	r4, r3
 8000418:	40f9      	lsrs	r1, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	fa00 f306 	lsl.w	r3, r0, r6
 8000422:	fbb1 f8f9 	udiv	r8, r1, r9
 8000426:	0c20      	lsrs	r0, r4, #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fb09 1118 	mls	r1, r9, r8, r1
 8000430:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000434:	fb08 f00e 	mul.w	r0, r8, lr
 8000438:	4288      	cmp	r0, r1
 800043a:	fa02 f206 	lsl.w	r2, r2, r6
 800043e:	d90b      	bls.n	8000458 <__udivmoddi4+0x1b8>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f108 3aff 	add.w	sl, r8, #4294967295
 8000448:	f080 8088 	bcs.w	800055c <__udivmoddi4+0x2bc>
 800044c:	4288      	cmp	r0, r1
 800044e:	f240 8085 	bls.w	800055c <__udivmoddi4+0x2bc>
 8000452:	f1a8 0802 	sub.w	r8, r8, #2
 8000456:	4461      	add	r1, ip
 8000458:	1a09      	subs	r1, r1, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000460:	fb09 1110 	mls	r1, r9, r0, r1
 8000464:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000468:	fb00 fe0e 	mul.w	lr, r0, lr
 800046c:	458e      	cmp	lr, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x1e2>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f100 34ff 	add.w	r4, r0, #4294967295
 8000478:	d26c      	bcs.n	8000554 <__udivmoddi4+0x2b4>
 800047a:	458e      	cmp	lr, r1
 800047c:	d96a      	bls.n	8000554 <__udivmoddi4+0x2b4>
 800047e:	3802      	subs	r0, #2
 8000480:	4461      	add	r1, ip
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	fba0 9402 	umull	r9, r4, r0, r2
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	42a1      	cmp	r1, r4
 8000490:	46c8      	mov	r8, r9
 8000492:	46a6      	mov	lr, r4
 8000494:	d356      	bcc.n	8000544 <__udivmoddi4+0x2a4>
 8000496:	d053      	beq.n	8000540 <__udivmoddi4+0x2a0>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x212>
 800049a:	ebb3 0208 	subs.w	r2, r3, r8
 800049e:	eb61 010e 	sbc.w	r1, r1, lr
 80004a2:	fa01 f707 	lsl.w	r7, r1, r7
 80004a6:	fa22 f306 	lsr.w	r3, r2, r6
 80004aa:	40f1      	lsrs	r1, r6
 80004ac:	431f      	orrs	r7, r3
 80004ae:	e9c5 7100 	strd	r7, r1, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	40d8      	lsrs	r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa21 f303 	lsr.w	r3, r1, r3
 80004c8:	4091      	lsls	r1, r2
 80004ca:	4301      	orrs	r1, r0
 80004cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d0:	fa1f fe8c 	uxth.w	lr, ip
 80004d4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004d8:	fb07 3610 	mls	r6, r7, r0, r3
 80004dc:	0c0b      	lsrs	r3, r1, #16
 80004de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e2:	fb00 f60e 	mul.w	r6, r0, lr
 80004e6:	429e      	cmp	r6, r3
 80004e8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x260>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004f6:	d22f      	bcs.n	8000558 <__udivmoddi4+0x2b8>
 80004f8:	429e      	cmp	r6, r3
 80004fa:	d92d      	bls.n	8000558 <__udivmoddi4+0x2b8>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1b9b      	subs	r3, r3, r6
 8000502:	b289      	uxth	r1, r1
 8000504:	fbb3 f6f7 	udiv	r6, r3, r7
 8000508:	fb07 3316 	mls	r3, r7, r6, r3
 800050c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000510:	fb06 f30e 	mul.w	r3, r6, lr
 8000514:	428b      	cmp	r3, r1
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x28a>
 8000518:	eb1c 0101 	adds.w	r1, ip, r1
 800051c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000520:	d216      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 8000522:	428b      	cmp	r3, r1
 8000524:	d914      	bls.n	8000550 <__udivmoddi4+0x2b0>
 8000526:	3e02      	subs	r6, #2
 8000528:	4461      	add	r1, ip
 800052a:	1ac9      	subs	r1, r1, r3
 800052c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000530:	e738      	b.n	80003a4 <__udivmoddi4+0x104>
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e705      	b.n	8000344 <__udivmoddi4+0xa4>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e3      	b.n	8000304 <__udivmoddi4+0x64>
 800053c:	4618      	mov	r0, r3
 800053e:	e6f8      	b.n	8000332 <__udivmoddi4+0x92>
 8000540:	454b      	cmp	r3, r9
 8000542:	d2a9      	bcs.n	8000498 <__udivmoddi4+0x1f8>
 8000544:	ebb9 0802 	subs.w	r8, r9, r2
 8000548:	eb64 0e0c 	sbc.w	lr, r4, ip
 800054c:	3801      	subs	r0, #1
 800054e:	e7a3      	b.n	8000498 <__udivmoddi4+0x1f8>
 8000550:	4646      	mov	r6, r8
 8000552:	e7ea      	b.n	800052a <__udivmoddi4+0x28a>
 8000554:	4620      	mov	r0, r4
 8000556:	e794      	b.n	8000482 <__udivmoddi4+0x1e2>
 8000558:	4640      	mov	r0, r8
 800055a:	e7d1      	b.n	8000500 <__udivmoddi4+0x260>
 800055c:	46d0      	mov	r8, sl
 800055e:	e77b      	b.n	8000458 <__udivmoddi4+0x1b8>
 8000560:	3b02      	subs	r3, #2
 8000562:	4461      	add	r1, ip
 8000564:	e732      	b.n	80003cc <__udivmoddi4+0x12c>
 8000566:	4630      	mov	r0, r6
 8000568:	e709      	b.n	800037e <__udivmoddi4+0xde>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e742      	b.n	80003f6 <__udivmoddi4+0x156>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc2;
ADC_HandleTypeDef hadc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b084      	sub	sp, #16
 8000578:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800057a:	463b      	mov	r3, r7
 800057c:	2200      	movs	r2, #0
 800057e:	601a      	str	r2, [r3, #0]
 8000580:	605a      	str	r2, [r3, #4]
 8000582:	609a      	str	r2, [r3, #8]
 8000584:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000586:	4b21      	ldr	r3, [pc, #132]	; (800060c <MX_ADC1_Init+0x98>)
 8000588:	4a21      	ldr	r2, [pc, #132]	; (8000610 <MX_ADC1_Init+0x9c>)
 800058a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800058c:	4b1f      	ldr	r3, [pc, #124]	; (800060c <MX_ADC1_Init+0x98>)
 800058e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000592:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000594:	4b1d      	ldr	r3, [pc, #116]	; (800060c <MX_ADC1_Init+0x98>)
 8000596:	2200      	movs	r2, #0
 8000598:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800059a:	4b1c      	ldr	r3, [pc, #112]	; (800060c <MX_ADC1_Init+0x98>)
 800059c:	2200      	movs	r2, #0
 800059e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80005a0:	4b1a      	ldr	r3, [pc, #104]	; (800060c <MX_ADC1_Init+0x98>)
 80005a2:	2200      	movs	r2, #0
 80005a4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005a6:	4b19      	ldr	r3, [pc, #100]	; (800060c <MX_ADC1_Init+0x98>)
 80005a8:	2200      	movs	r2, #0
 80005aa:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005ae:	4b17      	ldr	r3, [pc, #92]	; (800060c <MX_ADC1_Init+0x98>)
 80005b0:	2200      	movs	r2, #0
 80005b2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005b4:	4b15      	ldr	r3, [pc, #84]	; (800060c <MX_ADC1_Init+0x98>)
 80005b6:	4a17      	ldr	r2, [pc, #92]	; (8000614 <MX_ADC1_Init+0xa0>)
 80005b8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005ba:	4b14      	ldr	r3, [pc, #80]	; (800060c <MX_ADC1_Init+0x98>)
 80005bc:	2200      	movs	r2, #0
 80005be:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80005c0:	4b12      	ldr	r3, [pc, #72]	; (800060c <MX_ADC1_Init+0x98>)
 80005c2:	2201      	movs	r2, #1
 80005c4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80005c6:	4b11      	ldr	r3, [pc, #68]	; (800060c <MX_ADC1_Init+0x98>)
 80005c8:	2200      	movs	r2, #0
 80005ca:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80005ce:	4b0f      	ldr	r3, [pc, #60]	; (800060c <MX_ADC1_Init+0x98>)
 80005d0:	2201      	movs	r2, #1
 80005d2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80005d4:	480d      	ldr	r0, [pc, #52]	; (800060c <MX_ADC1_Init+0x98>)
 80005d6:	f001 fbe1 	bl	8001d9c <HAL_ADC_Init>
 80005da:	4603      	mov	r3, r0
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d001      	beq.n	80005e4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80005e0:	f000 fc92 	bl	8000f08 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80005e4:	2310      	movs	r3, #16
 80005e6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80005e8:	2301      	movs	r3, #1
 80005ea:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80005ec:	2300      	movs	r3, #0
 80005ee:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005f0:	463b      	mov	r3, r7
 80005f2:	4619      	mov	r1, r3
 80005f4:	4805      	ldr	r0, [pc, #20]	; (800060c <MX_ADC1_Init+0x98>)
 80005f6:	f001 fd43 	bl	8002080 <HAL_ADC_ConfigChannel>
 80005fa:	4603      	mov	r3, r0
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d001      	beq.n	8000604 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000600:	f000 fc82 	bl	8000f08 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000604:	bf00      	nop
 8000606:	3710      	adds	r7, #16
 8000608:	46bd      	mov	sp, r7
 800060a:	bd80      	pop	{r7, pc}
 800060c:	2000008c 	.word	0x2000008c
 8000610:	40012000 	.word	0x40012000
 8000614:	0f000001 	.word	0x0f000001

08000618 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b084      	sub	sp, #16
 800061c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800061e:	463b      	mov	r3, r7
 8000620:	2200      	movs	r2, #0
 8000622:	601a      	str	r2, [r3, #0]
 8000624:	605a      	str	r2, [r3, #4]
 8000626:	609a      	str	r2, [r3, #8]
 8000628:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 800062a:	4b21      	ldr	r3, [pc, #132]	; (80006b0 <MX_ADC2_Init+0x98>)
 800062c:	4a21      	ldr	r2, [pc, #132]	; (80006b4 <MX_ADC2_Init+0x9c>)
 800062e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000630:	4b1f      	ldr	r3, [pc, #124]	; (80006b0 <MX_ADC2_Init+0x98>)
 8000632:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000636:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000638:	4b1d      	ldr	r3, [pc, #116]	; (80006b0 <MX_ADC2_Init+0x98>)
 800063a:	2200      	movs	r2, #0
 800063c:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 800063e:	4b1c      	ldr	r3, [pc, #112]	; (80006b0 <MX_ADC2_Init+0x98>)
 8000640:	2200      	movs	r2, #0
 8000642:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000644:	4b1a      	ldr	r3, [pc, #104]	; (80006b0 <MX_ADC2_Init+0x98>)
 8000646:	2200      	movs	r2, #0
 8000648:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800064a:	4b19      	ldr	r3, [pc, #100]	; (80006b0 <MX_ADC2_Init+0x98>)
 800064c:	2200      	movs	r2, #0
 800064e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000652:	4b17      	ldr	r3, [pc, #92]	; (80006b0 <MX_ADC2_Init+0x98>)
 8000654:	2200      	movs	r2, #0
 8000656:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000658:	4b15      	ldr	r3, [pc, #84]	; (80006b0 <MX_ADC2_Init+0x98>)
 800065a:	4a17      	ldr	r2, [pc, #92]	; (80006b8 <MX_ADC2_Init+0xa0>)
 800065c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800065e:	4b14      	ldr	r3, [pc, #80]	; (80006b0 <MX_ADC2_Init+0x98>)
 8000660:	2200      	movs	r2, #0
 8000662:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8000664:	4b12      	ldr	r3, [pc, #72]	; (80006b0 <MX_ADC2_Init+0x98>)
 8000666:	2201      	movs	r2, #1
 8000668:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 800066a:	4b11      	ldr	r3, [pc, #68]	; (80006b0 <MX_ADC2_Init+0x98>)
 800066c:	2200      	movs	r2, #0
 800066e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000672:	4b0f      	ldr	r3, [pc, #60]	; (80006b0 <MX_ADC2_Init+0x98>)
 8000674:	2201      	movs	r2, #1
 8000676:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000678:	480d      	ldr	r0, [pc, #52]	; (80006b0 <MX_ADC2_Init+0x98>)
 800067a:	f001 fb8f 	bl	8001d9c <HAL_ADC_Init>
 800067e:	4603      	mov	r3, r0
 8000680:	2b00      	cmp	r3, #0
 8000682:	d001      	beq.n	8000688 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8000684:	f000 fc40 	bl	8000f08 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000688:	2300      	movs	r3, #0
 800068a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800068c:	2301      	movs	r3, #1
 800068e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000690:	2300      	movs	r3, #0
 8000692:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000694:	463b      	mov	r3, r7
 8000696:	4619      	mov	r1, r3
 8000698:	4805      	ldr	r0, [pc, #20]	; (80006b0 <MX_ADC2_Init+0x98>)
 800069a:	f001 fcf1 	bl	8002080 <HAL_ADC_ConfigChannel>
 800069e:	4603      	mov	r3, r0
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d001      	beq.n	80006a8 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 80006a4:	f000 fc30 	bl	8000f08 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80006a8:	bf00      	nop
 80006aa:	3710      	adds	r7, #16
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bd80      	pop	{r7, pc}
 80006b0:	200000d4 	.word	0x200000d4
 80006b4:	40012100 	.word	0x40012100
 80006b8:	0f000001 	.word	0x0f000001

080006bc <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b084      	sub	sp, #16
 80006c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006c2:	463b      	mov	r3, r7
 80006c4:	2200      	movs	r2, #0
 80006c6:	601a      	str	r2, [r3, #0]
 80006c8:	605a      	str	r2, [r3, #4]
 80006ca:	609a      	str	r2, [r3, #8]
 80006cc:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 80006ce:	4b21      	ldr	r3, [pc, #132]	; (8000754 <MX_ADC3_Init+0x98>)
 80006d0:	4a21      	ldr	r2, [pc, #132]	; (8000758 <MX_ADC3_Init+0x9c>)
 80006d2:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80006d4:	4b1f      	ldr	r3, [pc, #124]	; (8000754 <MX_ADC3_Init+0x98>)
 80006d6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80006da:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80006dc:	4b1d      	ldr	r3, [pc, #116]	; (8000754 <MX_ADC3_Init+0x98>)
 80006de:	2200      	movs	r2, #0
 80006e0:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 80006e2:	4b1c      	ldr	r3, [pc, #112]	; (8000754 <MX_ADC3_Init+0x98>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80006e8:	4b1a      	ldr	r3, [pc, #104]	; (8000754 <MX_ADC3_Init+0x98>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80006ee:	4b19      	ldr	r3, [pc, #100]	; (8000754 <MX_ADC3_Init+0x98>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006f6:	4b17      	ldr	r3, [pc, #92]	; (8000754 <MX_ADC3_Init+0x98>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006fc:	4b15      	ldr	r3, [pc, #84]	; (8000754 <MX_ADC3_Init+0x98>)
 80006fe:	4a17      	ldr	r2, [pc, #92]	; (800075c <MX_ADC3_Init+0xa0>)
 8000700:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000702:	4b14      	ldr	r3, [pc, #80]	; (8000754 <MX_ADC3_Init+0x98>)
 8000704:	2200      	movs	r2, #0
 8000706:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8000708:	4b12      	ldr	r3, [pc, #72]	; (8000754 <MX_ADC3_Init+0x98>)
 800070a:	2201      	movs	r2, #1
 800070c:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 800070e:	4b11      	ldr	r3, [pc, #68]	; (8000754 <MX_ADC3_Init+0x98>)
 8000710:	2200      	movs	r2, #0
 8000712:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000716:	4b0f      	ldr	r3, [pc, #60]	; (8000754 <MX_ADC3_Init+0x98>)
 8000718:	2201      	movs	r2, #1
 800071a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800071c:	480d      	ldr	r0, [pc, #52]	; (8000754 <MX_ADC3_Init+0x98>)
 800071e:	f001 fb3d 	bl	8001d9c <HAL_ADC_Init>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	d001      	beq.n	800072c <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8000728:	f000 fbee 	bl	8000f08 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 800072c:	230a      	movs	r3, #10
 800072e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000730:	2301      	movs	r3, #1
 8000732:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000734:	2300      	movs	r3, #0
 8000736:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000738:	463b      	mov	r3, r7
 800073a:	4619      	mov	r1, r3
 800073c:	4805      	ldr	r0, [pc, #20]	; (8000754 <MX_ADC3_Init+0x98>)
 800073e:	f001 fc9f 	bl	8002080 <HAL_ADC_ConfigChannel>
 8000742:	4603      	mov	r3, r0
 8000744:	2b00      	cmp	r3, #0
 8000746:	d001      	beq.n	800074c <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8000748:	f000 fbde 	bl	8000f08 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 800074c:	bf00      	nop
 800074e:	3710      	adds	r7, #16
 8000750:	46bd      	mov	sp, r7
 8000752:	bd80      	pop	{r7, pc}
 8000754:	2000011c 	.word	0x2000011c
 8000758:	40012200 	.word	0x40012200
 800075c:	0f000001 	.word	0x0f000001

08000760 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b08c      	sub	sp, #48	; 0x30
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000768:	f107 031c 	add.w	r3, r7, #28
 800076c:	2200      	movs	r2, #0
 800076e:	601a      	str	r2, [r3, #0]
 8000770:	605a      	str	r2, [r3, #4]
 8000772:	609a      	str	r2, [r3, #8]
 8000774:	60da      	str	r2, [r3, #12]
 8000776:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	4a44      	ldr	r2, [pc, #272]	; (8000890 <HAL_ADC_MspInit+0x130>)
 800077e:	4293      	cmp	r3, r2
 8000780:	d116      	bne.n	80007b0 <HAL_ADC_MspInit+0x50>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000782:	2300      	movs	r3, #0
 8000784:	61bb      	str	r3, [r7, #24]
 8000786:	4b43      	ldr	r3, [pc, #268]	; (8000894 <HAL_ADC_MspInit+0x134>)
 8000788:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800078a:	4a42      	ldr	r2, [pc, #264]	; (8000894 <HAL_ADC_MspInit+0x134>)
 800078c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000790:	6453      	str	r3, [r2, #68]	; 0x44
 8000792:	4b40      	ldr	r3, [pc, #256]	; (8000894 <HAL_ADC_MspInit+0x134>)
 8000794:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000796:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800079a:	61bb      	str	r3, [r7, #24]
 800079c:	69bb      	ldr	r3, [r7, #24]

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800079e:	2200      	movs	r2, #0
 80007a0:	2100      	movs	r1, #0
 80007a2:	2012      	movs	r0, #18
 80007a4:	f002 faa3 	bl	8002cee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80007a8:	2012      	movs	r0, #18
 80007aa:	f002 fabc 	bl	8002d26 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 80007ae:	e06a      	b.n	8000886 <HAL_ADC_MspInit+0x126>
  else if(adcHandle->Instance==ADC2)
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	4a38      	ldr	r2, [pc, #224]	; (8000898 <HAL_ADC_MspInit+0x138>)
 80007b6:	4293      	cmp	r3, r2
 80007b8:	d130      	bne.n	800081c <HAL_ADC_MspInit+0xbc>
    __HAL_RCC_ADC2_CLK_ENABLE();
 80007ba:	2300      	movs	r3, #0
 80007bc:	617b      	str	r3, [r7, #20]
 80007be:	4b35      	ldr	r3, [pc, #212]	; (8000894 <HAL_ADC_MspInit+0x134>)
 80007c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007c2:	4a34      	ldr	r2, [pc, #208]	; (8000894 <HAL_ADC_MspInit+0x134>)
 80007c4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80007c8:	6453      	str	r3, [r2, #68]	; 0x44
 80007ca:	4b32      	ldr	r3, [pc, #200]	; (8000894 <HAL_ADC_MspInit+0x134>)
 80007cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007ce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80007d2:	617b      	str	r3, [r7, #20]
 80007d4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007d6:	2300      	movs	r3, #0
 80007d8:	613b      	str	r3, [r7, #16]
 80007da:	4b2e      	ldr	r3, [pc, #184]	; (8000894 <HAL_ADC_MspInit+0x134>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007de:	4a2d      	ldr	r2, [pc, #180]	; (8000894 <HAL_ADC_MspInit+0x134>)
 80007e0:	f043 0301 	orr.w	r3, r3, #1
 80007e4:	6313      	str	r3, [r2, #48]	; 0x30
 80007e6:	4b2b      	ldr	r3, [pc, #172]	; (8000894 <HAL_ADC_MspInit+0x134>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ea:	f003 0301 	and.w	r3, r3, #1
 80007ee:	613b      	str	r3, [r7, #16]
 80007f0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80007f2:	230f      	movs	r3, #15
 80007f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007f6:	2303      	movs	r3, #3
 80007f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fa:	2300      	movs	r3, #0
 80007fc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007fe:	f107 031c 	add.w	r3, r7, #28
 8000802:	4619      	mov	r1, r3
 8000804:	4825      	ldr	r0, [pc, #148]	; (800089c <HAL_ADC_MspInit+0x13c>)
 8000806:	f002 fec5 	bl	8003594 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800080a:	2200      	movs	r2, #0
 800080c:	2100      	movs	r1, #0
 800080e:	2012      	movs	r0, #18
 8000810:	f002 fa6d 	bl	8002cee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000814:	2012      	movs	r0, #18
 8000816:	f002 fa86 	bl	8002d26 <HAL_NVIC_EnableIRQ>
}
 800081a:	e034      	b.n	8000886 <HAL_ADC_MspInit+0x126>
  else if(adcHandle->Instance==ADC3)
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	4a1f      	ldr	r2, [pc, #124]	; (80008a0 <HAL_ADC_MspInit+0x140>)
 8000822:	4293      	cmp	r3, r2
 8000824:	d12f      	bne.n	8000886 <HAL_ADC_MspInit+0x126>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8000826:	2300      	movs	r3, #0
 8000828:	60fb      	str	r3, [r7, #12]
 800082a:	4b1a      	ldr	r3, [pc, #104]	; (8000894 <HAL_ADC_MspInit+0x134>)
 800082c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800082e:	4a19      	ldr	r2, [pc, #100]	; (8000894 <HAL_ADC_MspInit+0x134>)
 8000830:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000834:	6453      	str	r3, [r2, #68]	; 0x44
 8000836:	4b17      	ldr	r3, [pc, #92]	; (8000894 <HAL_ADC_MspInit+0x134>)
 8000838:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800083a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800083e:	60fb      	str	r3, [r7, #12]
 8000840:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000842:	2300      	movs	r3, #0
 8000844:	60bb      	str	r3, [r7, #8]
 8000846:	4b13      	ldr	r3, [pc, #76]	; (8000894 <HAL_ADC_MspInit+0x134>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084a:	4a12      	ldr	r2, [pc, #72]	; (8000894 <HAL_ADC_MspInit+0x134>)
 800084c:	f043 0304 	orr.w	r3, r3, #4
 8000850:	6313      	str	r3, [r2, #48]	; 0x30
 8000852:	4b10      	ldr	r3, [pc, #64]	; (8000894 <HAL_ADC_MspInit+0x134>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000856:	f003 0304 	and.w	r3, r3, #4
 800085a:	60bb      	str	r3, [r7, #8]
 800085c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 800085e:	230f      	movs	r3, #15
 8000860:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000862:	2303      	movs	r3, #3
 8000864:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000866:	2300      	movs	r3, #0
 8000868:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800086a:	f107 031c 	add.w	r3, r7, #28
 800086e:	4619      	mov	r1, r3
 8000870:	480c      	ldr	r0, [pc, #48]	; (80008a4 <HAL_ADC_MspInit+0x144>)
 8000872:	f002 fe8f 	bl	8003594 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8000876:	2200      	movs	r2, #0
 8000878:	2100      	movs	r1, #0
 800087a:	2012      	movs	r0, #18
 800087c:	f002 fa37 	bl	8002cee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000880:	2012      	movs	r0, #18
 8000882:	f002 fa50 	bl	8002d26 <HAL_NVIC_EnableIRQ>
}
 8000886:	bf00      	nop
 8000888:	3730      	adds	r7, #48	; 0x30
 800088a:	46bd      	mov	sp, r7
 800088c:	bd80      	pop	{r7, pc}
 800088e:	bf00      	nop
 8000890:	40012000 	.word	0x40012000
 8000894:	40023800 	.word	0x40023800
 8000898:	40012100 	.word	0x40012100
 800089c:	40020000 	.word	0x40020000
 80008a0:	40012200 	.word	0x40012200
 80008a4:	40020800 	.word	0x40020800

080008a8 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80008ac:	4b18      	ldr	r3, [pc, #96]	; (8000910 <MX_CAN1_Init+0x68>)
 80008ae:	4a19      	ldr	r2, [pc, #100]	; (8000914 <MX_CAN1_Init+0x6c>)
 80008b0:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 12;
 80008b2:	4b17      	ldr	r3, [pc, #92]	; (8000910 <MX_CAN1_Init+0x68>)
 80008b4:	220c      	movs	r2, #12
 80008b6:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_SILENT;
 80008b8:	4b15      	ldr	r3, [pc, #84]	; (8000910 <MX_CAN1_Init+0x68>)
 80008ba:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80008be:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80008c0:	4b13      	ldr	r3, [pc, #76]	; (8000910 <MX_CAN1_Init+0x68>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_11TQ;
 80008c6:	4b12      	ldr	r3, [pc, #72]	; (8000910 <MX_CAN1_Init+0x68>)
 80008c8:	f44f 2220 	mov.w	r2, #655360	; 0xa0000
 80008cc:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 80008ce:	4b10      	ldr	r3, [pc, #64]	; (8000910 <MX_CAN1_Init+0x68>)
 80008d0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80008d4:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80008d6:	4b0e      	ldr	r3, [pc, #56]	; (8000910 <MX_CAN1_Init+0x68>)
 80008d8:	2200      	movs	r2, #0
 80008da:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = ENABLE;
 80008dc:	4b0c      	ldr	r3, [pc, #48]	; (8000910 <MX_CAN1_Init+0x68>)
 80008de:	2201      	movs	r2, #1
 80008e0:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = ENABLE;
 80008e2:	4b0b      	ldr	r3, [pc, #44]	; (8000910 <MX_CAN1_Init+0x68>)
 80008e4:	2201      	movs	r2, #1
 80008e6:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80008e8:	4b09      	ldr	r3, [pc, #36]	; (8000910 <MX_CAN1_Init+0x68>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80008ee:	4b08      	ldr	r3, [pc, #32]	; (8000910 <MX_CAN1_Init+0x68>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80008f4:	4b06      	ldr	r3, [pc, #24]	; (8000910 <MX_CAN1_Init+0x68>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80008fa:	4805      	ldr	r0, [pc, #20]	; (8000910 <MX_CAN1_Init+0x68>)
 80008fc:	f001 fde8 	bl	80024d0 <HAL_CAN_Init>
 8000900:	4603      	mov	r3, r0
 8000902:	2b00      	cmp	r3, #0
 8000904:	d001      	beq.n	800090a <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 8000906:	f000 faff 	bl	8000f08 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 800090a:	bf00      	nop
 800090c:	bd80      	pop	{r7, pc}
 800090e:	bf00      	nop
 8000910:	20000164 	.word	0x20000164
 8000914:	40006400 	.word	0x40006400

08000918 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b08a      	sub	sp, #40	; 0x28
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000920:	f107 0314 	add.w	r3, r7, #20
 8000924:	2200      	movs	r2, #0
 8000926:	601a      	str	r2, [r3, #0]
 8000928:	605a      	str	r2, [r3, #4]
 800092a:	609a      	str	r2, [r3, #8]
 800092c:	60da      	str	r2, [r3, #12]
 800092e:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	4a21      	ldr	r2, [pc, #132]	; (80009bc <HAL_CAN_MspInit+0xa4>)
 8000936:	4293      	cmp	r3, r2
 8000938:	d13c      	bne.n	80009b4 <HAL_CAN_MspInit+0x9c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800093a:	2300      	movs	r3, #0
 800093c:	613b      	str	r3, [r7, #16]
 800093e:	4b20      	ldr	r3, [pc, #128]	; (80009c0 <HAL_CAN_MspInit+0xa8>)
 8000940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000942:	4a1f      	ldr	r2, [pc, #124]	; (80009c0 <HAL_CAN_MspInit+0xa8>)
 8000944:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000948:	6413      	str	r3, [r2, #64]	; 0x40
 800094a:	4b1d      	ldr	r3, [pc, #116]	; (80009c0 <HAL_CAN_MspInit+0xa8>)
 800094c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800094e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000952:	613b      	str	r3, [r7, #16]
 8000954:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000956:	2300      	movs	r3, #0
 8000958:	60fb      	str	r3, [r7, #12]
 800095a:	4b19      	ldr	r3, [pc, #100]	; (80009c0 <HAL_CAN_MspInit+0xa8>)
 800095c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095e:	4a18      	ldr	r2, [pc, #96]	; (80009c0 <HAL_CAN_MspInit+0xa8>)
 8000960:	f043 0301 	orr.w	r3, r3, #1
 8000964:	6313      	str	r3, [r2, #48]	; 0x30
 8000966:	4b16      	ldr	r3, [pc, #88]	; (80009c0 <HAL_CAN_MspInit+0xa8>)
 8000968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096a:	f003 0301 	and.w	r3, r3, #1
 800096e:	60fb      	str	r3, [r7, #12]
 8000970:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000972:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000976:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000978:	2302      	movs	r3, #2
 800097a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097c:	2300      	movs	r3, #0
 800097e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000980:	2303      	movs	r3, #3
 8000982:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000984:	2309      	movs	r3, #9
 8000986:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000988:	f107 0314 	add.w	r3, r7, #20
 800098c:	4619      	mov	r1, r3
 800098e:	480d      	ldr	r0, [pc, #52]	; (80009c4 <HAL_CAN_MspInit+0xac>)
 8000990:	f002 fe00 	bl	8003594 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);
 8000994:	2200      	movs	r2, #0
 8000996:	2100      	movs	r1, #0
 8000998:	2013      	movs	r0, #19
 800099a:	f002 f9a8 	bl	8002cee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 800099e:	2013      	movs	r0, #19
 80009a0:	f002 f9c1 	bl	8002d26 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 80009a4:	2200      	movs	r2, #0
 80009a6:	2100      	movs	r1, #0
 80009a8:	2014      	movs	r0, #20
 80009aa:	f002 f9a0 	bl	8002cee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80009ae:	2014      	movs	r0, #20
 80009b0:	f002 f9b9 	bl	8002d26 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 80009b4:	bf00      	nop
 80009b6:	3728      	adds	r7, #40	; 0x28
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bd80      	pop	{r7, pc}
 80009bc:	40006400 	.word	0x40006400
 80009c0:	40023800 	.word	0x40023800
 80009c4:	40020000 	.word	0x40020000

080009c8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b082      	sub	sp, #8
 80009cc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80009ce:	2300      	movs	r3, #0
 80009d0:	607b      	str	r3, [r7, #4]
 80009d2:	4b10      	ldr	r3, [pc, #64]	; (8000a14 <MX_DMA_Init+0x4c>)
 80009d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d6:	4a0f      	ldr	r2, [pc, #60]	; (8000a14 <MX_DMA_Init+0x4c>)
 80009d8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80009dc:	6313      	str	r3, [r2, #48]	; 0x30
 80009de:	4b0d      	ldr	r3, [pc, #52]	; (8000a14 <MX_DMA_Init+0x4c>)
 80009e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80009e6:	607b      	str	r3, [r7, #4]
 80009e8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 80009ea:	2200      	movs	r2, #0
 80009ec:	2100      	movs	r1, #0
 80009ee:	203b      	movs	r0, #59	; 0x3b
 80009f0:	f002 f97d 	bl	8002cee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80009f4:	203b      	movs	r0, #59	; 0x3b
 80009f6:	f002 f996 	bl	8002d26 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 80009fa:	2200      	movs	r2, #0
 80009fc:	2100      	movs	r1, #0
 80009fe:	2045      	movs	r0, #69	; 0x45
 8000a00:	f002 f975 	bl	8002cee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8000a04:	2045      	movs	r0, #69	; 0x45
 8000a06:	f002 f98e 	bl	8002d26 <HAL_NVIC_EnableIRQ>

}
 8000a0a:	bf00      	nop
 8000a0c:	3708      	adds	r7, #8
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	40023800 	.word	0x40023800

08000a18 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b08a      	sub	sp, #40	; 0x28
 8000a1c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a1e:	f107 0314 	add.w	r3, r7, #20
 8000a22:	2200      	movs	r2, #0
 8000a24:	601a      	str	r2, [r3, #0]
 8000a26:	605a      	str	r2, [r3, #4]
 8000a28:	609a      	str	r2, [r3, #8]
 8000a2a:	60da      	str	r2, [r3, #12]
 8000a2c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a2e:	2300      	movs	r3, #0
 8000a30:	613b      	str	r3, [r7, #16]
 8000a32:	4b3a      	ldr	r3, [pc, #232]	; (8000b1c <MX_GPIO_Init+0x104>)
 8000a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a36:	4a39      	ldr	r2, [pc, #228]	; (8000b1c <MX_GPIO_Init+0x104>)
 8000a38:	f043 0304 	orr.w	r3, r3, #4
 8000a3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a3e:	4b37      	ldr	r3, [pc, #220]	; (8000b1c <MX_GPIO_Init+0x104>)
 8000a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a42:	f003 0304 	and.w	r3, r3, #4
 8000a46:	613b      	str	r3, [r7, #16]
 8000a48:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	60fb      	str	r3, [r7, #12]
 8000a4e:	4b33      	ldr	r3, [pc, #204]	; (8000b1c <MX_GPIO_Init+0x104>)
 8000a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a52:	4a32      	ldr	r2, [pc, #200]	; (8000b1c <MX_GPIO_Init+0x104>)
 8000a54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a58:	6313      	str	r3, [r2, #48]	; 0x30
 8000a5a:	4b30      	ldr	r3, [pc, #192]	; (8000b1c <MX_GPIO_Init+0x104>)
 8000a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a62:	60fb      	str	r3, [r7, #12]
 8000a64:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a66:	2300      	movs	r3, #0
 8000a68:	60bb      	str	r3, [r7, #8]
 8000a6a:	4b2c      	ldr	r3, [pc, #176]	; (8000b1c <MX_GPIO_Init+0x104>)
 8000a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6e:	4a2b      	ldr	r2, [pc, #172]	; (8000b1c <MX_GPIO_Init+0x104>)
 8000a70:	f043 0301 	orr.w	r3, r3, #1
 8000a74:	6313      	str	r3, [r2, #48]	; 0x30
 8000a76:	4b29      	ldr	r3, [pc, #164]	; (8000b1c <MX_GPIO_Init+0x104>)
 8000a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7a:	f003 0301 	and.w	r3, r3, #1
 8000a7e:	60bb      	str	r3, [r7, #8]
 8000a80:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a82:	2300      	movs	r3, #0
 8000a84:	607b      	str	r3, [r7, #4]
 8000a86:	4b25      	ldr	r3, [pc, #148]	; (8000b1c <MX_GPIO_Init+0x104>)
 8000a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8a:	4a24      	ldr	r2, [pc, #144]	; (8000b1c <MX_GPIO_Init+0x104>)
 8000a8c:	f043 0302 	orr.w	r3, r3, #2
 8000a90:	6313      	str	r3, [r2, #48]	; 0x30
 8000a92:	4b22      	ldr	r3, [pc, #136]	; (8000b1c <MX_GPIO_Init+0x104>)
 8000a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a96:	f003 0302 	and.w	r3, r3, #2
 8000a9a:	607b      	str	r3, [r7, #4]
 8000a9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	603b      	str	r3, [r7, #0]
 8000aa2:	4b1e      	ldr	r3, [pc, #120]	; (8000b1c <MX_GPIO_Init+0x104>)
 8000aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa6:	4a1d      	ldr	r2, [pc, #116]	; (8000b1c <MX_GPIO_Init+0x104>)
 8000aa8:	f043 0308 	orr.w	r3, r3, #8
 8000aac:	6313      	str	r3, [r2, #48]	; 0x30
 8000aae:	4b1b      	ldr	r3, [pc, #108]	; (8000b1c <MX_GPIO_Init+0x104>)
 8000ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab2:	f003 0308 	and.w	r3, r3, #8
 8000ab6:	603b      	str	r3, [r7, #0]
 8000ab8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED1_Pin|LED2_Pin|LED3_Pin|LED4_Pin, GPIO_PIN_RESET);
 8000aba:	2200      	movs	r2, #0
 8000abc:	21f0      	movs	r1, #240	; 0xf0
 8000abe:	4818      	ldr	r0, [pc, #96]	; (8000b20 <MX_GPIO_Init+0x108>)
 8000ac0:	f002 ff1c 	bl	80038fc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin|LED4_Pin;
 8000ac4:	23f0      	movs	r3, #240	; 0xf0
 8000ac6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ac8:	2301      	movs	r3, #1
 8000aca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000acc:	2302      	movs	r3, #2
 8000ace:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ad4:	f107 0314 	add.w	r3, r7, #20
 8000ad8:	4619      	mov	r1, r3
 8000ada:	4811      	ldr	r0, [pc, #68]	; (8000b20 <MX_GPIO_Init+0x108>)
 8000adc:	f002 fd5a 	bl	8003594 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SDIO_DETECT_Pin;
 8000ae0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ae4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000aea:	2302      	movs	r3, #2
 8000aec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SDIO_DETECT_GPIO_Port, &GPIO_InitStruct);
 8000aee:	f107 0314 	add.w	r3, r7, #20
 8000af2:	4619      	mov	r1, r3
 8000af4:	480b      	ldr	r0, [pc, #44]	; (8000b24 <MX_GPIO_Init+0x10c>)
 8000af6:	f002 fd4d 	bl	8003594 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin */
  GPIO_InitStruct.Pin = RTD_ACTIVE_Pin|HV_ACTIVE_Pin|BMS_FAULT_Pin|IMD_FAULT_Pin
 8000afa:	f44f 43f8 	mov.w	r3, #31744	; 0x7c00
 8000afe:	617b      	str	r3, [r7, #20]
                          |BSPD_FAULT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b00:	2300      	movs	r3, #0
 8000b02:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b04:	2300      	movs	r3, #0
 8000b06:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b08:	f107 0314 	add.w	r3, r7, #20
 8000b0c:	4619      	mov	r1, r3
 8000b0e:	4806      	ldr	r0, [pc, #24]	; (8000b28 <MX_GPIO_Init+0x110>)
 8000b10:	f002 fd40 	bl	8003594 <HAL_GPIO_Init>

}
 8000b14:	bf00      	nop
 8000b16:	3728      	adds	r7, #40	; 0x28
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bd80      	pop	{r7, pc}
 8000b1c:	40023800 	.word	0x40023800
 8000b20:	40020000 	.word	0x40020000
 8000b24:	40020400 	.word	0x40020400
 8000b28:	40020c00 	.word	0x40020c00

08000b2c <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000b30:	4b12      	ldr	r3, [pc, #72]	; (8000b7c <MX_I2C1_Init+0x50>)
 8000b32:	4a13      	ldr	r2, [pc, #76]	; (8000b80 <MX_I2C1_Init+0x54>)
 8000b34:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000b36:	4b11      	ldr	r3, [pc, #68]	; (8000b7c <MX_I2C1_Init+0x50>)
 8000b38:	4a12      	ldr	r2, [pc, #72]	; (8000b84 <MX_I2C1_Init+0x58>)
 8000b3a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000b3c:	4b0f      	ldr	r3, [pc, #60]	; (8000b7c <MX_I2C1_Init+0x50>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000b42:	4b0e      	ldr	r3, [pc, #56]	; (8000b7c <MX_I2C1_Init+0x50>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b48:	4b0c      	ldr	r3, [pc, #48]	; (8000b7c <MX_I2C1_Init+0x50>)
 8000b4a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000b4e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b50:	4b0a      	ldr	r3, [pc, #40]	; (8000b7c <MX_I2C1_Init+0x50>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000b56:	4b09      	ldr	r3, [pc, #36]	; (8000b7c <MX_I2C1_Init+0x50>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b5c:	4b07      	ldr	r3, [pc, #28]	; (8000b7c <MX_I2C1_Init+0x50>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b62:	4b06      	ldr	r3, [pc, #24]	; (8000b7c <MX_I2C1_Init+0x50>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000b68:	4804      	ldr	r0, [pc, #16]	; (8000b7c <MX_I2C1_Init+0x50>)
 8000b6a:	f002 fee1 	bl	8003930 <HAL_I2C_Init>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d001      	beq.n	8000b78 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000b74:	f000 f9c8 	bl	8000f08 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000b78:	bf00      	nop
 8000b7a:	bd80      	pop	{r7, pc}
 8000b7c:	2000018c 	.word	0x2000018c
 8000b80:	40005400 	.word	0x40005400
 8000b84:	00061a80 	.word	0x00061a80

08000b88 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000b8c:	4b12      	ldr	r3, [pc, #72]	; (8000bd8 <MX_I2C2_Init+0x50>)
 8000b8e:	4a13      	ldr	r2, [pc, #76]	; (8000bdc <MX_I2C2_Init+0x54>)
 8000b90:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8000b92:	4b11      	ldr	r3, [pc, #68]	; (8000bd8 <MX_I2C2_Init+0x50>)
 8000b94:	4a12      	ldr	r2, [pc, #72]	; (8000be0 <MX_I2C2_Init+0x58>)
 8000b96:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000b98:	4b0f      	ldr	r3, [pc, #60]	; (8000bd8 <MX_I2C2_Init+0x50>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000b9e:	4b0e      	ldr	r3, [pc, #56]	; (8000bd8 <MX_I2C2_Init+0x50>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ba4:	4b0c      	ldr	r3, [pc, #48]	; (8000bd8 <MX_I2C2_Init+0x50>)
 8000ba6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000baa:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000bac:	4b0a      	ldr	r3, [pc, #40]	; (8000bd8 <MX_I2C2_Init+0x50>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000bb2:	4b09      	ldr	r3, [pc, #36]	; (8000bd8 <MX_I2C2_Init+0x50>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000bb8:	4b07      	ldr	r3, [pc, #28]	; (8000bd8 <MX_I2C2_Init+0x50>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000bbe:	4b06      	ldr	r3, [pc, #24]	; (8000bd8 <MX_I2C2_Init+0x50>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000bc4:	4804      	ldr	r0, [pc, #16]	; (8000bd8 <MX_I2C2_Init+0x50>)
 8000bc6:	f002 feb3 	bl	8003930 <HAL_I2C_Init>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d001      	beq.n	8000bd4 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000bd0:	f000 f99a 	bl	8000f08 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000bd4:	bf00      	nop
 8000bd6:	bd80      	pop	{r7, pc}
 8000bd8:	200001e0 	.word	0x200001e0
 8000bdc:	40005800 	.word	0x40005800
 8000be0:	00061a80 	.word	0x00061a80

08000be4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b08c      	sub	sp, #48	; 0x30
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bec:	f107 031c 	add.w	r3, r7, #28
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	601a      	str	r2, [r3, #0]
 8000bf4:	605a      	str	r2, [r3, #4]
 8000bf6:	609a      	str	r2, [r3, #8]
 8000bf8:	60da      	str	r2, [r3, #12]
 8000bfa:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	4a3a      	ldr	r2, [pc, #232]	; (8000cec <HAL_I2C_MspInit+0x108>)
 8000c02:	4293      	cmp	r3, r2
 8000c04:	d134      	bne.n	8000c70 <HAL_I2C_MspInit+0x8c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c06:	2300      	movs	r3, #0
 8000c08:	61bb      	str	r3, [r7, #24]
 8000c0a:	4b39      	ldr	r3, [pc, #228]	; (8000cf0 <HAL_I2C_MspInit+0x10c>)
 8000c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0e:	4a38      	ldr	r2, [pc, #224]	; (8000cf0 <HAL_I2C_MspInit+0x10c>)
 8000c10:	f043 0302 	orr.w	r3, r3, #2
 8000c14:	6313      	str	r3, [r2, #48]	; 0x30
 8000c16:	4b36      	ldr	r3, [pc, #216]	; (8000cf0 <HAL_I2C_MspInit+0x10c>)
 8000c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1a:	f003 0302 	and.w	r3, r3, #2
 8000c1e:	61bb      	str	r3, [r7, #24]
 8000c20:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000c22:	23c0      	movs	r3, #192	; 0xc0
 8000c24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c26:	2312      	movs	r3, #18
 8000c28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c2e:	2303      	movs	r3, #3
 8000c30:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c32:	2304      	movs	r3, #4
 8000c34:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c36:	f107 031c 	add.w	r3, r7, #28
 8000c3a:	4619      	mov	r1, r3
 8000c3c:	482d      	ldr	r0, [pc, #180]	; (8000cf4 <HAL_I2C_MspInit+0x110>)
 8000c3e:	f002 fca9 	bl	8003594 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c42:	2300      	movs	r3, #0
 8000c44:	617b      	str	r3, [r7, #20]
 8000c46:	4b2a      	ldr	r3, [pc, #168]	; (8000cf0 <HAL_I2C_MspInit+0x10c>)
 8000c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c4a:	4a29      	ldr	r2, [pc, #164]	; (8000cf0 <HAL_I2C_MspInit+0x10c>)
 8000c4c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c50:	6413      	str	r3, [r2, #64]	; 0x40
 8000c52:	4b27      	ldr	r3, [pc, #156]	; (8000cf0 <HAL_I2C_MspInit+0x10c>)
 8000c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c56:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c5a:	617b      	str	r3, [r7, #20]
 8000c5c:	697b      	ldr	r3, [r7, #20]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000c5e:	2200      	movs	r2, #0
 8000c60:	2100      	movs	r1, #0
 8000c62:	201f      	movs	r0, #31
 8000c64:	f002 f843 	bl	8002cee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000c68:	201f      	movs	r0, #31
 8000c6a:	f002 f85c 	bl	8002d26 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8000c6e:	e039      	b.n	8000ce4 <HAL_I2C_MspInit+0x100>
  else if(i2cHandle->Instance==I2C2)
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	4a20      	ldr	r2, [pc, #128]	; (8000cf8 <HAL_I2C_MspInit+0x114>)
 8000c76:	4293      	cmp	r3, r2
 8000c78:	d134      	bne.n	8000ce4 <HAL_I2C_MspInit+0x100>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	613b      	str	r3, [r7, #16]
 8000c7e:	4b1c      	ldr	r3, [pc, #112]	; (8000cf0 <HAL_I2C_MspInit+0x10c>)
 8000c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c82:	4a1b      	ldr	r2, [pc, #108]	; (8000cf0 <HAL_I2C_MspInit+0x10c>)
 8000c84:	f043 0302 	orr.w	r3, r3, #2
 8000c88:	6313      	str	r3, [r2, #48]	; 0x30
 8000c8a:	4b19      	ldr	r3, [pc, #100]	; (8000cf0 <HAL_I2C_MspInit+0x10c>)
 8000c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8e:	f003 0302 	and.w	r3, r3, #2
 8000c92:	613b      	str	r3, [r7, #16]
 8000c94:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000c96:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000c9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c9c:	2312      	movs	r3, #18
 8000c9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ca4:	2303      	movs	r3, #3
 8000ca6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000ca8:	2304      	movs	r3, #4
 8000caa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cac:	f107 031c 	add.w	r3, r7, #28
 8000cb0:	4619      	mov	r1, r3
 8000cb2:	4810      	ldr	r0, [pc, #64]	; (8000cf4 <HAL_I2C_MspInit+0x110>)
 8000cb4:	f002 fc6e 	bl	8003594 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000cb8:	2300      	movs	r3, #0
 8000cba:	60fb      	str	r3, [r7, #12]
 8000cbc:	4b0c      	ldr	r3, [pc, #48]	; (8000cf0 <HAL_I2C_MspInit+0x10c>)
 8000cbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cc0:	4a0b      	ldr	r2, [pc, #44]	; (8000cf0 <HAL_I2C_MspInit+0x10c>)
 8000cc2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000cc6:	6413      	str	r3, [r2, #64]	; 0x40
 8000cc8:	4b09      	ldr	r3, [pc, #36]	; (8000cf0 <HAL_I2C_MspInit+0x10c>)
 8000cca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ccc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000cd0:	60fb      	str	r3, [r7, #12]
 8000cd2:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	2100      	movs	r1, #0
 8000cd8:	2021      	movs	r0, #33	; 0x21
 8000cda:	f002 f808 	bl	8002cee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8000cde:	2021      	movs	r0, #33	; 0x21
 8000ce0:	f002 f821 	bl	8002d26 <HAL_NVIC_EnableIRQ>
}
 8000ce4:	bf00      	nop
 8000ce6:	3730      	adds	r7, #48	; 0x30
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bd80      	pop	{r7, pc}
 8000cec:	40005400 	.word	0x40005400
 8000cf0:	40023800 	.word	0x40023800
 8000cf4:	40020400 	.word	0x40020400
 8000cf8:	40005800 	.word	0x40005800

08000cfc <_write>:
int ECU_SETUP(void);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, uint8_t *ptr, int len) {
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b084      	sub	sp, #16
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	60f8      	str	r0, [r7, #12]
 8000d04:	60b9      	str	r1, [r7, #8]
 8000d06:	607a      	str	r2, [r7, #4]
   HAL_UART_Transmit(&huart1, (uint8_t *)ptr, (uint16_t)len, 100);
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	b29a      	uxth	r2, r3
 8000d0c:	2364      	movs	r3, #100	; 0x64
 8000d0e:	68b9      	ldr	r1, [r7, #8]
 8000d10:	4803      	ldr	r0, [pc, #12]	; (8000d20 <_write+0x24>)
 8000d12:	f007 f9b6 	bl	8008082 <HAL_UART_Transmit>
   return (len);
 8000d16:	687b      	ldr	r3, [r7, #4]
}
 8000d18:	4618      	mov	r0, r3
 8000d1a:	3710      	adds	r7, #16
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bd80      	pop	{r7, pc}
 8000d20:	20001468 	.word	0x20001468

08000d24 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b084      	sub	sp, #16
 8000d28:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d2a:	f000 ffa1 	bl	8001c70 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d2e:	f000 f86b 	bl	8000e08 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d32:	f7ff fe71 	bl	8000a18 <MX_GPIO_Init>
  MX_DMA_Init();
 8000d36:	f7ff fe47 	bl	80009c8 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000d3a:	f000 fe95 	bl	8001a68 <MX_USART1_UART_Init>
  MX_I2C2_Init();
 8000d3e:	f7ff ff23 	bl	8000b88 <MX_I2C2_Init>
  MX_SDIO_SD_Init();
 8000d42:	f000 fb7b 	bl	800143c <MX_SDIO_SD_Init>
  MX_RTC_Init();
 8000d46:	f000 f9d9 	bl	80010fc <MX_RTC_Init>
  MX_FATFS_Init();
 8000d4a:	f008 fe93 	bl	8009a74 <MX_FATFS_Init>
  MX_ADC1_Init();
 8000d4e:	f7ff fc11 	bl	8000574 <MX_ADC1_Init>
  MX_I2C1_Init();
 8000d52:	f7ff feeb 	bl	8000b2c <MX_I2C1_Init>
  MX_CAN1_Init();
 8000d56:	f7ff fda7 	bl	80008a8 <MX_CAN1_Init>
  MX_ADC2_Init();
 8000d5a:	f7ff fc5d 	bl	8000618 <MX_ADC2_Init>
  MX_ADC3_Init();
 8000d5e:	f7ff fcad 	bl	80006bc <MX_ADC3_Init>
  MX_USART2_UART_Init();
 8000d62:	f000 feab 	bl	8001abc <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8000d66:	f000 fe05 	bl	8001974 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  uint64_t boot = RTC_read();
 8000d6a:	f000 f8fb 	bl	8000f64 <RTC_read>
 8000d6e:	e9c7 0102 	strd	r0, r1, [r7, #8]

  int ret;
  ret = ECU_SETUP();
 8000d72:	f000 f8b7 	bl	8000ee4 <ECU_SETUP>
 8000d76:	6078      	str	r0, [r7, #4]
  if (ret != 0) {
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d00c      	beq.n	8000d98 <main+0x74>
    #ifdef DEBUG_MODE
      printf("[%8lu] [ERR] ECU setup failed: %d\n", HAL_GetTick(), ret);
 8000d7e:	f000 ffdd 	bl	8001d3c <HAL_GetTick>
 8000d82:	4603      	mov	r3, r0
 8000d84:	687a      	ldr	r2, [r7, #4]
 8000d86:	4619      	mov	r1, r3
 8000d88:	4818      	ldr	r0, [pc, #96]	; (8000dec <main+0xc8>)
 8000d8a:	f00b ffdd 	bl	800cd48 <iprintf>
    #endif
    err = ERR_ECU;
 8000d8e:	4b18      	ldr	r3, [pc, #96]	; (8000df0 <main+0xcc>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	701a      	strb	r2, [r3, #0]
    Error_Handler();
 8000d94:	f000 f8b8 	bl	8000f08 <Error_Handler>
  }

  ret = SD_SETUP(boot);
 8000d98:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000d9c:	f000 fa32 	bl	8001204 <SD_SETUP>
 8000da0:	6078      	str	r0, [r7, #4]
  if (ret != 0) {
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d007      	beq.n	8000db8 <main+0x94>
    #ifdef DEBUG_MODE
      printf("[%8lu] [ERR] SD setup failed: %d\n", HAL_GetTick(), ret);
 8000da8:	f000 ffc8 	bl	8001d3c <HAL_GetTick>
 8000dac:	4603      	mov	r3, r0
 8000dae:	687a      	ldr	r2, [r7, #4]
 8000db0:	4619      	mov	r1, r3
 8000db2:	4810      	ldr	r0, [pc, #64]	; (8000df4 <main+0xd0>)
 8000db4:	f00b ffc8 	bl	800cd48 <iprintf>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1) {

    int ret = SD_WRITE(&logfile, "test");
 8000db8:	490f      	ldr	r1, [pc, #60]	; (8000df8 <main+0xd4>)
 8000dba:	4810      	ldr	r0, [pc, #64]	; (8000dfc <main+0xd8>)
 8000dbc:	f000 fb00 	bl	80013c0 <SD_WRITE>
 8000dc0:	6038      	str	r0, [r7, #0]

    if (timer_flag[TIMER_SD]) {
 8000dc2:	4b0f      	ldr	r3, [pc, #60]	; (8000e00 <main+0xdc>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d0f6      	beq.n	8000db8 <main+0x94>
      timer_flag[TIMER_SD] = false;
 8000dca:	4b0d      	ldr	r3, [pc, #52]	; (8000e00 <main+0xdc>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	601a      	str	r2, [r3, #0]
      ret = SD_SYNC(&logfile);
 8000dd0:	480a      	ldr	r0, [pc, #40]	; (8000dfc <main+0xd8>)
 8000dd2:	f000 fb17 	bl	8001404 <SD_SYNC>
 8000dd6:	6038      	str	r0, [r7, #0]
      #ifdef DEBUG_MODE
        printf("[%8lu] [INF] SD SYNC: %d\n", HAL_GetTick(), ret);
 8000dd8:	f000 ffb0 	bl	8001d3c <HAL_GetTick>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	683a      	ldr	r2, [r7, #0]
 8000de0:	4619      	mov	r1, r3
 8000de2:	4808      	ldr	r0, [pc, #32]	; (8000e04 <main+0xe0>)
 8000de4:	f00b ffb0 	bl	800cd48 <iprintf>
  while (1) {
 8000de8:	e7e6      	b.n	8000db8 <main+0x94>
 8000dea:	bf00      	nop
 8000dec:	0800e034 	.word	0x0800e034
 8000df0:	20000234 	.word	0x20000234
 8000df4:	0800e058 	.word	0x0800e058
 8000df8:	0800e07c 	.word	0x0800e07c
 8000dfc:	20000238 	.word	0x20000238
 8000e00:	20001278 	.word	0x20001278
 8000e04:	0800e084 	.word	0x0800e084

08000e08 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b094      	sub	sp, #80	; 0x50
 8000e0c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e0e:	f107 0320 	add.w	r3, r7, #32
 8000e12:	2230      	movs	r2, #48	; 0x30
 8000e14:	2100      	movs	r1, #0
 8000e16:	4618      	mov	r0, r3
 8000e18:	f00b ff8e 	bl	800cd38 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e1c:	f107 030c 	add.w	r3, r7, #12
 8000e20:	2200      	movs	r2, #0
 8000e22:	601a      	str	r2, [r3, #0]
 8000e24:	605a      	str	r2, [r3, #4]
 8000e26:	609a      	str	r2, [r3, #8]
 8000e28:	60da      	str	r2, [r3, #12]
 8000e2a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	60bb      	str	r3, [r7, #8]
 8000e30:	4b2a      	ldr	r3, [pc, #168]	; (8000edc <SystemClock_Config+0xd4>)
 8000e32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e34:	4a29      	ldr	r2, [pc, #164]	; (8000edc <SystemClock_Config+0xd4>)
 8000e36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e3a:	6413      	str	r3, [r2, #64]	; 0x40
 8000e3c:	4b27      	ldr	r3, [pc, #156]	; (8000edc <SystemClock_Config+0xd4>)
 8000e3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e44:	60bb      	str	r3, [r7, #8]
 8000e46:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e48:	2300      	movs	r3, #0
 8000e4a:	607b      	str	r3, [r7, #4]
 8000e4c:	4b24      	ldr	r3, [pc, #144]	; (8000ee0 <SystemClock_Config+0xd8>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	4a23      	ldr	r2, [pc, #140]	; (8000ee0 <SystemClock_Config+0xd8>)
 8000e52:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e56:	6013      	str	r3, [r2, #0]
 8000e58:	4b21      	ldr	r3, [pc, #132]	; (8000ee0 <SystemClock_Config+0xd8>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e60:	607b      	str	r3, [r7, #4]
 8000e62:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8000e64:	2305      	movs	r3, #5
 8000e66:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e68:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e6c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000e6e:	2301      	movs	r3, #1
 8000e70:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e72:	2302      	movs	r3, #2
 8000e74:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e76:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000e7a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000e7c:	2304      	movs	r3, #4
 8000e7e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000e80:	23a8      	movs	r3, #168	; 0xa8
 8000e82:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e84:	2302      	movs	r3, #2
 8000e86:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000e88:	2307      	movs	r3, #7
 8000e8a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e8c:	f107 0320 	add.w	r3, r7, #32
 8000e90:	4618      	mov	r0, r3
 8000e92:	f004 fa57 	bl	8005344 <HAL_RCC_OscConfig>
 8000e96:	4603      	mov	r3, r0
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d001      	beq.n	8000ea0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000e9c:	f000 f834 	bl	8000f08 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ea0:	230f      	movs	r3, #15
 8000ea2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ea4:	2302      	movs	r3, #2
 8000ea6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000eac:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000eb0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000eb2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000eb6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000eb8:	f107 030c 	add.w	r3, r7, #12
 8000ebc:	2105      	movs	r1, #5
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	f004 fcb8 	bl	8005834 <HAL_RCC_ClockConfig>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d001      	beq.n	8000ece <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000eca:	f000 f81d 	bl	8000f08 <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8000ece:	f004 fd97 	bl	8005a00 <HAL_RCC_EnableCSS>
}
 8000ed2:	bf00      	nop
 8000ed4:	3750      	adds	r7, #80	; 0x50
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	40023800 	.word	0x40023800
 8000ee0:	40007000 	.word	0x40007000

08000ee4 <ECU_SETUP>:

/* USER CODE BEGIN 4 */
int ECU_SETUP(void) {
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	af00      	add	r7, sp, #0

  HAL_GPIO_WritePin(GPIOA, LED3_Pin, GPIO_PIN_RESET);
 8000ee8:	2200      	movs	r2, #0
 8000eea:	2140      	movs	r1, #64	; 0x40
 8000eec:	4805      	ldr	r0, [pc, #20]	; (8000f04 <ECU_SETUP+0x20>)
 8000eee:	f002 fd05 	bl	80038fc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, LED4_Pin, GPIO_PIN_SET);
 8000ef2:	2201      	movs	r2, #1
 8000ef4:	2180      	movs	r1, #128	; 0x80
 8000ef6:	4803      	ldr	r0, [pc, #12]	; (8000f04 <ECU_SETUP+0x20>)
 8000ef8:	f002 fd00 	bl	80038fc <HAL_GPIO_WritePin>

  return 0;
 8000efc:	2300      	movs	r3, #0
}
 8000efe:	4618      	mov	r0, r3
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	40020000 	.word	0x40020000

08000f08 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  // __disable_irq();

  printf("[%8lu] [ERR] Error Handler code: %d\n", HAL_GetTick(), err);
 8000f0c:	f000 ff16 	bl	8001d3c <HAL_GetTick>
 8000f10:	4603      	mov	r3, r0
 8000f12:	4a11      	ldr	r2, [pc, #68]	; (8000f58 <Error_Handler+0x50>)
 8000f14:	7812      	ldrb	r2, [r2, #0]
 8000f16:	4619      	mov	r1, r3
 8000f18:	4810      	ldr	r0, [pc, #64]	; (8000f5c <Error_Handler+0x54>)
 8000f1a:	f00b ff15 	bl	800cd48 <iprintf>

  while (1) {
    HAL_GPIO_WritePin(GPIOA, LED3_Pin, GPIO_PIN_SET);
 8000f1e:	2201      	movs	r2, #1
 8000f20:	2140      	movs	r1, #64	; 0x40
 8000f22:	480f      	ldr	r0, [pc, #60]	; (8000f60 <Error_Handler+0x58>)
 8000f24:	f002 fcea 	bl	80038fc <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, LED4_Pin, GPIO_PIN_RESET);
 8000f28:	2200      	movs	r2, #0
 8000f2a:	2180      	movs	r1, #128	; 0x80
 8000f2c:	480c      	ldr	r0, [pc, #48]	; (8000f60 <Error_Handler+0x58>)
 8000f2e:	f002 fce5 	bl	80038fc <HAL_GPIO_WritePin>
    HAL_Delay(500);
 8000f32:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000f36:	f000 ff0d 	bl	8001d54 <HAL_Delay>
    HAL_GPIO_WritePin(GPIOA, LED3_Pin, GPIO_PIN_RESET);
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	2140      	movs	r1, #64	; 0x40
 8000f3e:	4808      	ldr	r0, [pc, #32]	; (8000f60 <Error_Handler+0x58>)
 8000f40:	f002 fcdc 	bl	80038fc <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, LED4_Pin, GPIO_PIN_SET);
 8000f44:	2201      	movs	r2, #1
 8000f46:	2180      	movs	r1, #128	; 0x80
 8000f48:	4805      	ldr	r0, [pc, #20]	; (8000f60 <Error_Handler+0x58>)
 8000f4a:	f002 fcd7 	bl	80038fc <HAL_GPIO_WritePin>
    HAL_Delay(500);
 8000f4e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000f52:	f000 feff 	bl	8001d54 <HAL_Delay>
    HAL_GPIO_WritePin(GPIOA, LED3_Pin, GPIO_PIN_SET);
 8000f56:	e7e2      	b.n	8000f1e <Error_Handler+0x16>
 8000f58:	20000234 	.word	0x20000234
 8000f5c:	0800e0a0 	.word	0x0800e0a0
 8000f60:	40020000 	.word	0x40020000

08000f64 <RTC_read>:
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "rtc.h"

/* USER CODE BEGIN 0 */
uint64_t RTC_read() {
 8000f64:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000f68:	b0a0      	sub	sp, #128	; 0x80
 8000f6a:	af00      	add	r7, sp, #0
	uint64_t result = 0;
 8000f6c:	f04f 0200 	mov.w	r2, #0
 8000f70:	f04f 0300 	mov.w	r3, #0
 8000f74:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78

	RTC_DateTypeDef sDate;
	RTC_TimeTypeDef sTime;

	HAL_RTC_GetTime(&hrtc, &sTime, FORMAT_BIN);
 8000f78:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	4619      	mov	r1, r3
 8000f80:	485d      	ldr	r0, [pc, #372]	; (80010f8 <RTC_read+0x194>)
 8000f82:	f005 f891 	bl	80060a8 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &sDate, FORMAT_BIN);
 8000f86:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	4619      	mov	r1, r3
 8000f8e:	485a      	ldr	r0, [pc, #360]	; (80010f8 <RTC_read+0x194>)
 8000f90:	f005 f96c 	bl	800626c <HAL_RTC_GetDate>

	result |= (uint64_t)(sTime.SubSeconds);
 8000f94:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000f96:	2200      	movs	r2, #0
 8000f98:	461c      	mov	r4, r3
 8000f9a:	4615      	mov	r5, r2
 8000f9c:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8000fa0:	ea42 0a04 	orr.w	sl, r2, r4
 8000fa4:	ea43 0b05 	orr.w	fp, r3, r5
 8000fa8:	e9c7 ab1e 	strd	sl, fp, [r7, #120]	; 0x78
	result |= (uint64_t)(sTime.Seconds) << 8;
 8000fac:	f897 3062 	ldrb.w	r3, [r7, #98]	; 0x62
 8000fb0:	b2db      	uxtb	r3, r3
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	4698      	mov	r8, r3
 8000fb6:	4691      	mov	r9, r2
 8000fb8:	f04f 0000 	mov.w	r0, #0
 8000fbc:	f04f 0100 	mov.w	r1, #0
 8000fc0:	ea4f 2109 	mov.w	r1, r9, lsl #8
 8000fc4:	ea41 6118 	orr.w	r1, r1, r8, lsr #24
 8000fc8:	ea4f 2008 	mov.w	r0, r8, lsl #8
 8000fcc:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8000fd0:	ea42 0400 	orr.w	r4, r2, r0
 8000fd4:	62bc      	str	r4, [r7, #40]	; 0x28
 8000fd6:	430b      	orrs	r3, r1
 8000fd8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000fda:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8000fde:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
	result |= (uint64_t)(sTime.Minutes) << 16;
 8000fe2:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
 8000fe6:	b2db      	uxtb	r3, r3
 8000fe8:	2200      	movs	r2, #0
 8000fea:	65bb      	str	r3, [r7, #88]	; 0x58
 8000fec:	65fa      	str	r2, [r7, #92]	; 0x5c
 8000fee:	f04f 0000 	mov.w	r0, #0
 8000ff2:	f04f 0100 	mov.w	r1, #0
 8000ff6:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 8000ffa:	462b      	mov	r3, r5
 8000ffc:	0419      	lsls	r1, r3, #16
 8000ffe:	4623      	mov	r3, r4
 8001000:	ea41 4113 	orr.w	r1, r1, r3, lsr #16
 8001004:	4623      	mov	r3, r4
 8001006:	0418      	lsls	r0, r3, #16
 8001008:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 800100c:	ea42 0400 	orr.w	r4, r2, r0
 8001010:	623c      	str	r4, [r7, #32]
 8001012:	430b      	orrs	r3, r1
 8001014:	627b      	str	r3, [r7, #36]	; 0x24
 8001016:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800101a:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
	result |= (uint64_t)(sTime.Hours) << 24;
 800101e:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 8001022:	b2db      	uxtb	r3, r3
 8001024:	2200      	movs	r2, #0
 8001026:	653b      	str	r3, [r7, #80]	; 0x50
 8001028:	657a      	str	r2, [r7, #84]	; 0x54
 800102a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800102e:	460b      	mov	r3, r1
 8001030:	0a1b      	lsrs	r3, r3, #8
 8001032:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001034:	460b      	mov	r3, r1
 8001036:	061b      	lsls	r3, r3, #24
 8001038:	64bb      	str	r3, [r7, #72]	; 0x48
 800103a:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 800103e:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8001042:	4621      	mov	r1, r4
 8001044:	4311      	orrs	r1, r2
 8001046:	61b9      	str	r1, [r7, #24]
 8001048:	4629      	mov	r1, r5
 800104a:	4319      	orrs	r1, r3
 800104c:	61f9      	str	r1, [r7, #28]
 800104e:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8001052:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
	result |= (uint64_t)(sDate.Date) << 32;
 8001056:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 800105a:	b2db      	uxtb	r3, r3
 800105c:	2200      	movs	r2, #0
 800105e:	643b      	str	r3, [r7, #64]	; 0x40
 8001060:	647a      	str	r2, [r7, #68]	; 0x44
 8001062:	f04f 0200 	mov.w	r2, #0
 8001066:	f04f 0300 	mov.w	r3, #0
 800106a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800106c:	000b      	movs	r3, r1
 800106e:	2200      	movs	r2, #0
 8001070:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8001074:	ea40 0402 	orr.w	r4, r0, r2
 8001078:	613c      	str	r4, [r7, #16]
 800107a:	430b      	orrs	r3, r1
 800107c:	617b      	str	r3, [r7, #20]
 800107e:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8001082:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
	result |= (uint64_t)(sDate.Month) << 40;
 8001086:	f897 3075 	ldrb.w	r3, [r7, #117]	; 0x75
 800108a:	b2db      	uxtb	r3, r3
 800108c:	2200      	movs	r2, #0
 800108e:	63bb      	str	r3, [r7, #56]	; 0x38
 8001090:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001092:	f04f 0200 	mov.w	r2, #0
 8001096:	f04f 0300 	mov.w	r3, #0
 800109a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800109c:	020b      	lsls	r3, r1, #8
 800109e:	2200      	movs	r2, #0
 80010a0:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 80010a4:	ea40 0402 	orr.w	r4, r0, r2
 80010a8:	60bc      	str	r4, [r7, #8]
 80010aa:	430b      	orrs	r3, r1
 80010ac:	60fb      	str	r3, [r7, #12]
 80010ae:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80010b2:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
	result |= (uint64_t)(sDate.Year) << 48;
 80010b6:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80010ba:	b2db      	uxtb	r3, r3
 80010bc:	2200      	movs	r2, #0
 80010be:	633b      	str	r3, [r7, #48]	; 0x30
 80010c0:	637a      	str	r2, [r7, #52]	; 0x34
 80010c2:	f04f 0200 	mov.w	r2, #0
 80010c6:	f04f 0300 	mov.w	r3, #0
 80010ca:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80010cc:	040b      	lsls	r3, r1, #16
 80010ce:	2200      	movs	r2, #0
 80010d0:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 80010d4:	ea40 0402 	orr.w	r4, r0, r2
 80010d8:	603c      	str	r4, [r7, #0]
 80010da:	430b      	orrs	r3, r1
 80010dc:	607b      	str	r3, [r7, #4]
 80010de:	e9d7 3400 	ldrd	r3, r4, [r7]
 80010e2:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78

	return result;
 80010e6:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
}
 80010ea:	4610      	mov	r0, r2
 80010ec:	4619      	mov	r1, r3
 80010ee:	3780      	adds	r7, #128	; 0x80
 80010f0:	46bd      	mov	sp, r7
 80010f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80010f6:	bf00      	nop
 80010f8:	20001298 	.word	0x20001298

080010fc <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b086      	sub	sp, #24
 8001100:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001102:	1d3b      	adds	r3, r7, #4
 8001104:	2200      	movs	r2, #0
 8001106:	601a      	str	r2, [r3, #0]
 8001108:	605a      	str	r2, [r3, #4]
 800110a:	609a      	str	r2, [r3, #8]
 800110c:	60da      	str	r2, [r3, #12]
 800110e:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001110:	2300      	movs	r3, #0
 8001112:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001114:	4b24      	ldr	r3, [pc, #144]	; (80011a8 <MX_RTC_Init+0xac>)
 8001116:	4a25      	ldr	r2, [pc, #148]	; (80011ac <MX_RTC_Init+0xb0>)
 8001118:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800111a:	4b23      	ldr	r3, [pc, #140]	; (80011a8 <MX_RTC_Init+0xac>)
 800111c:	2200      	movs	r2, #0
 800111e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001120:	4b21      	ldr	r3, [pc, #132]	; (80011a8 <MX_RTC_Init+0xac>)
 8001122:	227f      	movs	r2, #127	; 0x7f
 8001124:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001126:	4b20      	ldr	r3, [pc, #128]	; (80011a8 <MX_RTC_Init+0xac>)
 8001128:	22ff      	movs	r2, #255	; 0xff
 800112a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800112c:	4b1e      	ldr	r3, [pc, #120]	; (80011a8 <MX_RTC_Init+0xac>)
 800112e:	2200      	movs	r2, #0
 8001130:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001132:	4b1d      	ldr	r3, [pc, #116]	; (80011a8 <MX_RTC_Init+0xac>)
 8001134:	2200      	movs	r2, #0
 8001136:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001138:	4b1b      	ldr	r3, [pc, #108]	; (80011a8 <MX_RTC_Init+0xac>)
 800113a:	2200      	movs	r2, #0
 800113c:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800113e:	481a      	ldr	r0, [pc, #104]	; (80011a8 <MX_RTC_Init+0xac>)
 8001140:	f004 fea2 	bl	8005e88 <HAL_RTC_Init>
 8001144:	4603      	mov	r3, r0
 8001146:	2b00      	cmp	r3, #0
 8001148:	d001      	beq.n	800114e <MX_RTC_Init+0x52>
  {
    Error_Handler();
 800114a:	f7ff fedd 	bl	8000f08 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 800114e:	2300      	movs	r3, #0
 8001150:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8001152:	2300      	movs	r3, #0
 8001154:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8001156:	2300      	movs	r3, #0
 8001158:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800115a:	2300      	movs	r3, #0
 800115c:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800115e:	2300      	movs	r3, #0
 8001160:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001162:	1d3b      	adds	r3, r7, #4
 8001164:	2201      	movs	r2, #1
 8001166:	4619      	mov	r1, r3
 8001168:	480f      	ldr	r0, [pc, #60]	; (80011a8 <MX_RTC_Init+0xac>)
 800116a:	f004 ff03 	bl	8005f74 <HAL_RTC_SetTime>
 800116e:	4603      	mov	r3, r0
 8001170:	2b00      	cmp	r3, #0
 8001172:	d001      	beq.n	8001178 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8001174:	f7ff fec8 	bl	8000f08 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_SUNDAY;
 8001178:	2307      	movs	r3, #7
 800117a:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 800117c:	2301      	movs	r3, #1
 800117e:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8001180:	2301      	movs	r3, #1
 8001182:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x23;
 8001184:	2323      	movs	r3, #35	; 0x23
 8001186:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001188:	463b      	mov	r3, r7
 800118a:	2201      	movs	r2, #1
 800118c:	4619      	mov	r1, r3
 800118e:	4806      	ldr	r0, [pc, #24]	; (80011a8 <MX_RTC_Init+0xac>)
 8001190:	f004 ffe8 	bl	8006164 <HAL_RTC_SetDate>
 8001194:	4603      	mov	r3, r0
 8001196:	2b00      	cmp	r3, #0
 8001198:	d001      	beq.n	800119e <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 800119a:	f7ff feb5 	bl	8000f08 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800119e:	bf00      	nop
 80011a0:	3718      	adds	r7, #24
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	20001298 	.word	0x20001298
 80011ac:	40002800 	.word	0x40002800

080011b0 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b086      	sub	sp, #24
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011b8:	f107 0308 	add.w	r3, r7, #8
 80011bc:	2200      	movs	r2, #0
 80011be:	601a      	str	r2, [r3, #0]
 80011c0:	605a      	str	r2, [r3, #4]
 80011c2:	609a      	str	r2, [r3, #8]
 80011c4:	60da      	str	r2, [r3, #12]
  if(rtcHandle->Instance==RTC)
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	4a0c      	ldr	r2, [pc, #48]	; (80011fc <HAL_RTC_MspInit+0x4c>)
 80011cc:	4293      	cmp	r3, r2
 80011ce:	d111      	bne.n	80011f4 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80011d0:	2302      	movs	r3, #2
 80011d2:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80011d4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011d8:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011da:	f107 0308 	add.w	r3, r7, #8
 80011de:	4618      	mov	r0, r3
 80011e0:	f004 fd70 	bl	8005cc4 <HAL_RCCEx_PeriphCLKConfig>
 80011e4:	4603      	mov	r3, r0
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d001      	beq.n	80011ee <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 80011ea:	f7ff fe8d 	bl	8000f08 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80011ee:	4b04      	ldr	r3, [pc, #16]	; (8001200 <HAL_RTC_MspInit+0x50>)
 80011f0:	2201      	movs	r2, #1
 80011f2:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80011f4:	bf00      	nop
 80011f6:	3718      	adds	r7, #24
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	40002800 	.word	0x40002800
 8001200:	42470e3c 	.word	0x42470e3c

08001204 <SD_SETUP>:
/* USER CODE BEGIN 0 */
extern FIL logfile;
extern LOG log_data;
char logname[30];

int SD_SETUP(uint64_t boot) {
 8001204:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001206:	f5ad 5d82 	sub.w	sp, sp, #4160	; 0x1040
 800120a:	b087      	sub	sp, #28
 800120c:	af04      	add	r7, sp, #16
 800120e:	f107 0308 	add.w	r3, r7, #8
 8001212:	e943 0102 	strd	r0, r1, [r3, #-8]
  FATFS SD_FATFS;

  disk_initialize((BYTE) 0);
 8001216:	2000      	movs	r0, #0
 8001218:	f008 fe9a 	bl	8009f50 <disk_initialize>
  int ret = f_mount(&SD_FATFS, "", 0);
 800121c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001220:	3b1c      	subs	r3, #28
 8001222:	2200      	movs	r2, #0
 8001224:	495f      	ldr	r1, [pc, #380]	; (80013a4 <SD_SETUP+0x1a0>)
 8001226:	4618      	mov	r0, r3
 8001228:	f00b f816 	bl	800c258 <f_mount>
 800122c:	4603      	mov	r3, r0
 800122e:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8001232:	f102 0204 	add.w	r2, r2, #4
 8001236:	6013      	str	r3, [r2, #0]
  if (ret != FR_OK) {
 8001238:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800123c:	f103 0304 	add.w	r3, r3, #4
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	2b00      	cmp	r3, #0
 8001244:	d00e      	beq.n	8001264 <SD_SETUP+0x60>
    #ifdef DEBUG_MODE
      printf("[%8lu] [ERR] SD mount failed: %d\n", HAL_GetTick(), ret);
 8001246:	f000 fd79 	bl	8001d3c <HAL_GetTick>
 800124a:	4603      	mov	r3, r0
 800124c:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8001250:	f102 0204 	add.w	r2, r2, #4
 8001254:	6812      	ldr	r2, [r2, #0]
 8001256:	4619      	mov	r1, r3
 8001258:	4853      	ldr	r0, [pc, #332]	; (80013a8 <SD_SETUP+0x1a4>)
 800125a:	f00b fd75 	bl	800cd48 <iprintf>
    #endif
    return -1;
 800125e:	f04f 33ff 	mov.w	r3, #4294967295
 8001262:	e099      	b.n	8001398 <SD_SETUP+0x194>
  }

  sprintf(logname, "A-FA 20%02lu-%02lu-%02lu %02lu-%02lu-%02lu.log",
         (uint32_t)(boot >> 48), (uint32_t)(boot << 16 >> 56), (uint32_t)(boot << 24 >> 56),
 8001264:	f107 0308 	add.w	r3, r7, #8
 8001268:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800126c:	f04f 0200 	mov.w	r2, #0
 8001270:	f04f 0300 	mov.w	r3, #0
 8001274:	0c0a      	lsrs	r2, r1, #16
 8001276:	2300      	movs	r3, #0
  sprintf(logname, "A-FA 20%02lu-%02lu-%02lu %02lu-%02lu-%02lu.log",
 8001278:	4694      	mov	ip, r2
         (uint32_t)(boot >> 48), (uint32_t)(boot << 16 >> 56), (uint32_t)(boot << 24 >> 56),
 800127a:	f107 0308 	add.w	r3, r7, #8
 800127e:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8001282:	f04f 0200 	mov.w	r2, #0
 8001286:	f04f 0300 	mov.w	r3, #0
 800128a:	040b      	lsls	r3, r1, #16
 800128c:	ea43 4310 	orr.w	r3, r3, r0, lsr #16
 8001290:	0402      	lsls	r2, r0, #16
 8001292:	f04f 0000 	mov.w	r0, #0
 8001296:	f04f 0100 	mov.w	r1, #0
 800129a:	0e18      	lsrs	r0, r3, #24
 800129c:	2100      	movs	r1, #0
  sprintf(logname, "A-FA 20%02lu-%02lu-%02lu %02lu-%02lu-%02lu.log",
 800129e:	4686      	mov	lr, r0
         (uint32_t)(boot >> 48), (uint32_t)(boot << 16 >> 56), (uint32_t)(boot << 24 >> 56),
 80012a0:	f107 0308 	add.w	r3, r7, #8
 80012a4:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 80012a8:	f04f 0200 	mov.w	r2, #0
 80012ac:	f04f 0300 	mov.w	r3, #0
 80012b0:	060b      	lsls	r3, r1, #24
 80012b2:	ea43 2310 	orr.w	r3, r3, r0, lsr #8
 80012b6:	0602      	lsls	r2, r0, #24
 80012b8:	f04f 0000 	mov.w	r0, #0
 80012bc:	f04f 0100 	mov.w	r1, #0
 80012c0:	0e18      	lsrs	r0, r3, #24
 80012c2:	2100      	movs	r1, #0
  sprintf(logname, "A-FA 20%02lu-%02lu-%02lu %02lu-%02lu-%02lu.log",
 80012c4:	4604      	mov	r4, r0
         (uint32_t)(boot << 32 >> 56), (uint32_t)(boot << 40 >> 56), (uint32_t)(boot << 48 >> 56));
 80012c6:	f107 0308 	add.w	r3, r7, #8
 80012ca:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 80012ce:	f04f 0200 	mov.w	r2, #0
 80012d2:	f04f 0300 	mov.w	r3, #0
 80012d6:	0003      	movs	r3, r0
 80012d8:	2200      	movs	r2, #0
 80012da:	f04f 0000 	mov.w	r0, #0
 80012de:	f04f 0100 	mov.w	r1, #0
 80012e2:	0e18      	lsrs	r0, r3, #24
 80012e4:	2100      	movs	r1, #0
  sprintf(logname, "A-FA 20%02lu-%02lu-%02lu %02lu-%02lu-%02lu.log",
 80012e6:	4605      	mov	r5, r0
         (uint32_t)(boot << 32 >> 56), (uint32_t)(boot << 40 >> 56), (uint32_t)(boot << 48 >> 56));
 80012e8:	f107 0308 	add.w	r3, r7, #8
 80012ec:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 80012f0:	f04f 0200 	mov.w	r2, #0
 80012f4:	f04f 0300 	mov.w	r3, #0
 80012f8:	0203      	lsls	r3, r0, #8
 80012fa:	2200      	movs	r2, #0
 80012fc:	f04f 0000 	mov.w	r0, #0
 8001300:	f04f 0100 	mov.w	r1, #0
 8001304:	0e18      	lsrs	r0, r3, #24
 8001306:	2100      	movs	r1, #0
  sprintf(logname, "A-FA 20%02lu-%02lu-%02lu %02lu-%02lu-%02lu.log",
 8001308:	4606      	mov	r6, r0
         (uint32_t)(boot << 32 >> 56), (uint32_t)(boot << 40 >> 56), (uint32_t)(boot << 48 >> 56));
 800130a:	f107 0308 	add.w	r3, r7, #8
 800130e:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8001312:	f04f 0200 	mov.w	r2, #0
 8001316:	f04f 0300 	mov.w	r3, #0
 800131a:	0403      	lsls	r3, r0, #16
 800131c:	2200      	movs	r2, #0
 800131e:	f04f 0000 	mov.w	r0, #0
 8001322:	f04f 0100 	mov.w	r1, #0
 8001326:	0e18      	lsrs	r0, r3, #24
 8001328:	2100      	movs	r1, #0
  sprintf(logname, "A-FA 20%02lu-%02lu-%02lu %02lu-%02lu-%02lu.log",
 800132a:	4603      	mov	r3, r0
 800132c:	9303      	str	r3, [sp, #12]
 800132e:	9602      	str	r6, [sp, #8]
 8001330:	9501      	str	r5, [sp, #4]
 8001332:	9400      	str	r4, [sp, #0]
 8001334:	4673      	mov	r3, lr
 8001336:	4662      	mov	r2, ip
 8001338:	491c      	ldr	r1, [pc, #112]	; (80013ac <SD_SETUP+0x1a8>)
 800133a:	481d      	ldr	r0, [pc, #116]	; (80013b0 <SD_SETUP+0x1ac>)
 800133c:	f00b fd1c 	bl	800cd78 <siprintf>

  ret = f_open(&logfile, logname, FA_OPEN_APPEND | FA_WRITE);
 8001340:	2232      	movs	r2, #50	; 0x32
 8001342:	491b      	ldr	r1, [pc, #108]	; (80013b0 <SD_SETUP+0x1ac>)
 8001344:	481b      	ldr	r0, [pc, #108]	; (80013b4 <SD_SETUP+0x1b0>)
 8001346:	f00a ffcd 	bl	800c2e4 <f_open>
 800134a:	4603      	mov	r3, r0
 800134c:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8001350:	f102 0204 	add.w	r2, r2, #4
 8001354:	6013      	str	r3, [r2, #0]
  if (ret != FR_OK) {
 8001356:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800135a:	f103 0304 	add.w	r3, r3, #4
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	2b00      	cmp	r3, #0
 8001362:	d011      	beq.n	8001388 <SD_SETUP+0x184>
    #ifdef DEBUG_MODE
      printf("[%8lu] [ERR] SD open failed: %d\n", HAL_GetTick(), ret);
 8001364:	f000 fcea 	bl	8001d3c <HAL_GetTick>
 8001368:	4603      	mov	r3, r0
 800136a:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800136e:	f102 0204 	add.w	r2, r2, #4
 8001372:	6812      	ldr	r2, [r2, #0]
 8001374:	4619      	mov	r1, r3
 8001376:	4810      	ldr	r0, [pc, #64]	; (80013b8 <SD_SETUP+0x1b4>)
 8001378:	f00b fce6 	bl	800cd48 <iprintf>
    #endif
    return ret;
 800137c:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8001380:	f103 0304 	add.w	r3, r3, #4
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	e007      	b.n	8001398 <SD_SETUP+0x194>
  }

  HAL_TIM_Base_Start_IT(&htim1);
 8001388:	480c      	ldr	r0, [pc, #48]	; (80013bc <SD_SETUP+0x1b8>)
 800138a:	f006 f9fb 	bl	8007784 <HAL_TIM_Base_Start_IT>

  return ret;
 800138e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8001392:	f103 0304 	add.w	r3, r3, #4
 8001396:	681b      	ldr	r3, [r3, #0]
}
 8001398:	4618      	mov	r0, r3
 800139a:	f507 5782 	add.w	r7, r7, #4160	; 0x1040
 800139e:	370c      	adds	r7, #12
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013a4:	0800e0c8 	.word	0x0800e0c8
 80013a8:	0800e0cc 	.word	0x0800e0cc
 80013ac:	0800e0f0 	.word	0x0800e0f0
 80013b0:	200012b8 	.word	0x200012b8
 80013b4:	20000238 	.word	0x20000238
 80013b8:	0800e120 	.word	0x0800e120
 80013bc:	20001420 	.word	0x20001420

080013c0 <SD_WRITE>:

int SD_WRITE() {
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b082      	sub	sp, #8
 80013c4:	af00      	add	r7, sp, #0
  uint32_t written_count;
  int ret = f_write(&logfile, &log_data, 16 /* sizeof(LOG) */, (void *)&written_count);
 80013c6:	463b      	mov	r3, r7
 80013c8:	2210      	movs	r2, #16
 80013ca:	490b      	ldr	r1, [pc, #44]	; (80013f8 <SD_WRITE+0x38>)
 80013cc:	480b      	ldr	r0, [pc, #44]	; (80013fc <SD_WRITE+0x3c>)
 80013ce:	f00b f955 	bl	800c67c <f_write>
 80013d2:	4603      	mov	r3, r0
 80013d4:	607b      	str	r3, [r7, #4]
  if (ret != FR_OK) {
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d007      	beq.n	80013ec <SD_WRITE+0x2c>
    #ifdef DEBUG_MODE
      printf("[%8lu] [ERR] SD write failed: %d\n", HAL_GetTick(), ret);
 80013dc:	f000 fcae 	bl	8001d3c <HAL_GetTick>
 80013e0:	4603      	mov	r3, r0
 80013e2:	687a      	ldr	r2, [r7, #4]
 80013e4:	4619      	mov	r1, r3
 80013e6:	4806      	ldr	r0, [pc, #24]	; (8001400 <SD_WRITE+0x40>)
 80013e8:	f00b fcae 	bl	800cd48 <iprintf>
    #endif
  }

  return ret;
 80013ec:	687b      	ldr	r3, [r7, #4]
}
 80013ee:	4618      	mov	r0, r3
 80013f0:	3708      	adds	r7, #8
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	20001268 	.word	0x20001268
 80013fc:	20000238 	.word	0x20000238
 8001400:	0800e144 	.word	0x0800e144

08001404 <SD_SYNC>:

int SD_SYNC() {
 8001404:	b580      	push	{r7, lr}
 8001406:	b082      	sub	sp, #8
 8001408:	af00      	add	r7, sp, #0
  int ret = f_sync(&logfile);
 800140a:	480a      	ldr	r0, [pc, #40]	; (8001434 <SD_SYNC+0x30>)
 800140c:	f00b faca 	bl	800c9a4 <f_sync>
 8001410:	4603      	mov	r3, r0
 8001412:	607b      	str	r3, [r7, #4]
  if (ret != FR_OK) {
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	2b00      	cmp	r3, #0
 8001418:	d007      	beq.n	800142a <SD_SYNC+0x26>
    #ifdef DEBUG_MODE
      printf("[%8lu] [ERR] SD sync failed: %d\n", HAL_GetTick(), ret);
 800141a:	f000 fc8f 	bl	8001d3c <HAL_GetTick>
 800141e:	4603      	mov	r3, r0
 8001420:	687a      	ldr	r2, [r7, #4]
 8001422:	4619      	mov	r1, r3
 8001424:	4804      	ldr	r0, [pc, #16]	; (8001438 <SD_SYNC+0x34>)
 8001426:	f00b fc8f 	bl	800cd48 <iprintf>
    #endif
  }

  return ret;
 800142a:	687b      	ldr	r3, [r7, #4]
}
 800142c:	4618      	mov	r0, r3
 800142e:	3708      	adds	r7, #8
 8001430:	46bd      	mov	sp, r7
 8001432:	bd80      	pop	{r7, pc}
 8001434:	20000238 	.word	0x20000238
 8001438:	0800e168 	.word	0x0800e168

0800143c <MX_SDIO_SD_Init>:
DMA_HandleTypeDef hdma_sdio_tx;

/* SDIO init function */

void MX_SDIO_SD_Init(void)
{
 800143c:	b480      	push	{r7}
 800143e:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8001440:	4b0d      	ldr	r3, [pc, #52]	; (8001478 <MX_SDIO_SD_Init+0x3c>)
 8001442:	4a0e      	ldr	r2, [pc, #56]	; (800147c <MX_SDIO_SD_Init+0x40>)
 8001444:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8001446:	4b0c      	ldr	r3, [pc, #48]	; (8001478 <MX_SDIO_SD_Init+0x3c>)
 8001448:	2200      	movs	r2, #0
 800144a:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 800144c:	4b0a      	ldr	r3, [pc, #40]	; (8001478 <MX_SDIO_SD_Init+0x3c>)
 800144e:	2200      	movs	r2, #0
 8001450:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8001452:	4b09      	ldr	r3, [pc, #36]	; (8001478 <MX_SDIO_SD_Init+0x3c>)
 8001454:	2200      	movs	r2, #0
 8001456:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8001458:	4b07      	ldr	r3, [pc, #28]	; (8001478 <MX_SDIO_SD_Init+0x3c>)
 800145a:	2200      	movs	r2, #0
 800145c:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_ENABLE;
 800145e:	4b06      	ldr	r3, [pc, #24]	; (8001478 <MX_SDIO_SD_Init+0x3c>)
 8001460:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001464:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 12;
 8001466:	4b04      	ldr	r3, [pc, #16]	; (8001478 <MX_SDIO_SD_Init+0x3c>)
 8001468:	220c      	movs	r2, #12
 800146a:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 800146c:	bf00      	nop
 800146e:	46bd      	mov	sp, r7
 8001470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001474:	4770      	bx	lr
 8001476:	bf00      	nop
 8001478:	200012d8 	.word	0x200012d8
 800147c:	40012c00 	.word	0x40012c00

08001480 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b08a      	sub	sp, #40	; 0x28
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001488:	f107 0314 	add.w	r3, r7, #20
 800148c:	2200      	movs	r2, #0
 800148e:	601a      	str	r2, [r3, #0]
 8001490:	605a      	str	r2, [r3, #4]
 8001492:	609a      	str	r2, [r3, #8]
 8001494:	60da      	str	r2, [r3, #12]
 8001496:	611a      	str	r2, [r3, #16]
  if(sdHandle->Instance==SDIO)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	4a70      	ldr	r2, [pc, #448]	; (8001660 <HAL_SD_MspInit+0x1e0>)
 800149e:	4293      	cmp	r3, r2
 80014a0:	f040 80da 	bne.w	8001658 <HAL_SD_MspInit+0x1d8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* SDIO clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 80014a4:	2300      	movs	r3, #0
 80014a6:	613b      	str	r3, [r7, #16]
 80014a8:	4b6e      	ldr	r3, [pc, #440]	; (8001664 <HAL_SD_MspInit+0x1e4>)
 80014aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014ac:	4a6d      	ldr	r2, [pc, #436]	; (8001664 <HAL_SD_MspInit+0x1e4>)
 80014ae:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80014b2:	6453      	str	r3, [r2, #68]	; 0x44
 80014b4:	4b6b      	ldr	r3, [pc, #428]	; (8001664 <HAL_SD_MspInit+0x1e4>)
 80014b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80014bc:	613b      	str	r3, [r7, #16]
 80014be:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80014c0:	2300      	movs	r3, #0
 80014c2:	60fb      	str	r3, [r7, #12]
 80014c4:	4b67      	ldr	r3, [pc, #412]	; (8001664 <HAL_SD_MspInit+0x1e4>)
 80014c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c8:	4a66      	ldr	r2, [pc, #408]	; (8001664 <HAL_SD_MspInit+0x1e4>)
 80014ca:	f043 0304 	orr.w	r3, r3, #4
 80014ce:	6313      	str	r3, [r2, #48]	; 0x30
 80014d0:	4b64      	ldr	r3, [pc, #400]	; (8001664 <HAL_SD_MspInit+0x1e4>)
 80014d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d4:	f003 0304 	and.w	r3, r3, #4
 80014d8:	60fb      	str	r3, [r7, #12]
 80014da:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80014dc:	2300      	movs	r3, #0
 80014de:	60bb      	str	r3, [r7, #8]
 80014e0:	4b60      	ldr	r3, [pc, #384]	; (8001664 <HAL_SD_MspInit+0x1e4>)
 80014e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e4:	4a5f      	ldr	r2, [pc, #380]	; (8001664 <HAL_SD_MspInit+0x1e4>)
 80014e6:	f043 0308 	orr.w	r3, r3, #8
 80014ea:	6313      	str	r3, [r2, #48]	; 0x30
 80014ec:	4b5d      	ldr	r3, [pc, #372]	; (8001664 <HAL_SD_MspInit+0x1e4>)
 80014ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f0:	f003 0308 	and.w	r3, r3, #8
 80014f4:	60bb      	str	r3, [r7, #8]
 80014f6:	68bb      	ldr	r3, [r7, #8]
    /**SDIO GPIO Configuration
    PC8     ------> SDIO_D0
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80014f8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80014fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014fe:	2302      	movs	r3, #2
 8001500:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001502:	2301      	movs	r3, #1
 8001504:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001506:	2303      	movs	r3, #3
 8001508:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800150a:	230c      	movs	r3, #12
 800150c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800150e:	f107 0314 	add.w	r3, r7, #20
 8001512:	4619      	mov	r1, r3
 8001514:	4854      	ldr	r0, [pc, #336]	; (8001668 <HAL_SD_MspInit+0x1e8>)
 8001516:	f002 f83d 	bl	8003594 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800151a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800151e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001520:	2302      	movs	r3, #2
 8001522:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001524:	2300      	movs	r3, #0
 8001526:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001528:	2303      	movs	r3, #3
 800152a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800152c:	230c      	movs	r3, #12
 800152e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001530:	f107 0314 	add.w	r3, r7, #20
 8001534:	4619      	mov	r1, r3
 8001536:	484c      	ldr	r0, [pc, #304]	; (8001668 <HAL_SD_MspInit+0x1e8>)
 8001538:	f002 f82c 	bl	8003594 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800153c:	2304      	movs	r3, #4
 800153e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001540:	2302      	movs	r3, #2
 8001542:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001544:	2301      	movs	r3, #1
 8001546:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001548:	2303      	movs	r3, #3
 800154a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800154c:	230c      	movs	r3, #12
 800154e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001550:	f107 0314 	add.w	r3, r7, #20
 8001554:	4619      	mov	r1, r3
 8001556:	4845      	ldr	r0, [pc, #276]	; (800166c <HAL_SD_MspInit+0x1ec>)
 8001558:	f002 f81c 	bl	8003594 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 800155c:	4b44      	ldr	r3, [pc, #272]	; (8001670 <HAL_SD_MspInit+0x1f0>)
 800155e:	4a45      	ldr	r2, [pc, #276]	; (8001674 <HAL_SD_MspInit+0x1f4>)
 8001560:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 8001562:	4b43      	ldr	r3, [pc, #268]	; (8001670 <HAL_SD_MspInit+0x1f0>)
 8001564:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001568:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800156a:	4b41      	ldr	r3, [pc, #260]	; (8001670 <HAL_SD_MspInit+0x1f0>)
 800156c:	2200      	movs	r2, #0
 800156e:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001570:	4b3f      	ldr	r3, [pc, #252]	; (8001670 <HAL_SD_MspInit+0x1f0>)
 8001572:	2200      	movs	r2, #0
 8001574:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001576:	4b3e      	ldr	r3, [pc, #248]	; (8001670 <HAL_SD_MspInit+0x1f0>)
 8001578:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800157c:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800157e:	4b3c      	ldr	r3, [pc, #240]	; (8001670 <HAL_SD_MspInit+0x1f0>)
 8001580:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001584:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001586:	4b3a      	ldr	r3, [pc, #232]	; (8001670 <HAL_SD_MspInit+0x1f0>)
 8001588:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800158c:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 800158e:	4b38      	ldr	r3, [pc, #224]	; (8001670 <HAL_SD_MspInit+0x1f0>)
 8001590:	2220      	movs	r2, #32
 8001592:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001594:	4b36      	ldr	r3, [pc, #216]	; (8001670 <HAL_SD_MspInit+0x1f0>)
 8001596:	2200      	movs	r2, #0
 8001598:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800159a:	4b35      	ldr	r3, [pc, #212]	; (8001670 <HAL_SD_MspInit+0x1f0>)
 800159c:	2204      	movs	r2, #4
 800159e:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80015a0:	4b33      	ldr	r3, [pc, #204]	; (8001670 <HAL_SD_MspInit+0x1f0>)
 80015a2:	2203      	movs	r2, #3
 80015a4:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 80015a6:	4b32      	ldr	r3, [pc, #200]	; (8001670 <HAL_SD_MspInit+0x1f0>)
 80015a8:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80015ac:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 80015ae:	4b30      	ldr	r3, [pc, #192]	; (8001670 <HAL_SD_MspInit+0x1f0>)
 80015b0:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80015b4:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 80015b6:	482e      	ldr	r0, [pc, #184]	; (8001670 <HAL_SD_MspInit+0x1f0>)
 80015b8:	f001 fbd0 	bl	8002d5c <HAL_DMA_Init>
 80015bc:	4603      	mov	r3, r0
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d001      	beq.n	80015c6 <HAL_SD_MspInit+0x146>
    {
      Error_Handler();
 80015c2:	f7ff fca1 	bl	8000f08 <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmarx,hdma_sdio_rx);
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	4a29      	ldr	r2, [pc, #164]	; (8001670 <HAL_SD_MspInit+0x1f0>)
 80015ca:	641a      	str	r2, [r3, #64]	; 0x40
 80015cc:	4a28      	ldr	r2, [pc, #160]	; (8001670 <HAL_SD_MspInit+0x1f0>)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 80015d2:	4b29      	ldr	r3, [pc, #164]	; (8001678 <HAL_SD_MspInit+0x1f8>)
 80015d4:	4a29      	ldr	r2, [pc, #164]	; (800167c <HAL_SD_MspInit+0x1fc>)
 80015d6:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 80015d8:	4b27      	ldr	r3, [pc, #156]	; (8001678 <HAL_SD_MspInit+0x1f8>)
 80015da:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80015de:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80015e0:	4b25      	ldr	r3, [pc, #148]	; (8001678 <HAL_SD_MspInit+0x1f8>)
 80015e2:	2240      	movs	r2, #64	; 0x40
 80015e4:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80015e6:	4b24      	ldr	r3, [pc, #144]	; (8001678 <HAL_SD_MspInit+0x1f8>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 80015ec:	4b22      	ldr	r3, [pc, #136]	; (8001678 <HAL_SD_MspInit+0x1f8>)
 80015ee:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80015f2:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80015f4:	4b20      	ldr	r3, [pc, #128]	; (8001678 <HAL_SD_MspInit+0x1f8>)
 80015f6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80015fa:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80015fc:	4b1e      	ldr	r3, [pc, #120]	; (8001678 <HAL_SD_MspInit+0x1f8>)
 80015fe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001602:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 8001604:	4b1c      	ldr	r3, [pc, #112]	; (8001678 <HAL_SD_MspInit+0x1f8>)
 8001606:	2220      	movs	r2, #32
 8001608:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 800160a:	4b1b      	ldr	r3, [pc, #108]	; (8001678 <HAL_SD_MspInit+0x1f8>)
 800160c:	2200      	movs	r2, #0
 800160e:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001610:	4b19      	ldr	r3, [pc, #100]	; (8001678 <HAL_SD_MspInit+0x1f8>)
 8001612:	2204      	movs	r2, #4
 8001614:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001616:	4b18      	ldr	r3, [pc, #96]	; (8001678 <HAL_SD_MspInit+0x1f8>)
 8001618:	2203      	movs	r2, #3
 800161a:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 800161c:	4b16      	ldr	r3, [pc, #88]	; (8001678 <HAL_SD_MspInit+0x1f8>)
 800161e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001622:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8001624:	4b14      	ldr	r3, [pc, #80]	; (8001678 <HAL_SD_MspInit+0x1f8>)
 8001626:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800162a:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 800162c:	4812      	ldr	r0, [pc, #72]	; (8001678 <HAL_SD_MspInit+0x1f8>)
 800162e:	f001 fb95 	bl	8002d5c <HAL_DMA_Init>
 8001632:	4603      	mov	r3, r0
 8001634:	2b00      	cmp	r3, #0
 8001636:	d001      	beq.n	800163c <HAL_SD_MspInit+0x1bc>
    {
      Error_Handler();
 8001638:	f7ff fc66 	bl	8000f08 <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmatx,hdma_sdio_tx);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	4a0e      	ldr	r2, [pc, #56]	; (8001678 <HAL_SD_MspInit+0x1f8>)
 8001640:	63da      	str	r2, [r3, #60]	; 0x3c
 8001642:	4a0d      	ldr	r2, [pc, #52]	; (8001678 <HAL_SD_MspInit+0x1f8>)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 8001648:	2200      	movs	r2, #0
 800164a:	2100      	movs	r1, #0
 800164c:	2031      	movs	r0, #49	; 0x31
 800164e:	f001 fb4e 	bl	8002cee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8001652:	2031      	movs	r0, #49	; 0x31
 8001654:	f001 fb67 	bl	8002d26 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }
}
 8001658:	bf00      	nop
 800165a:	3728      	adds	r7, #40	; 0x28
 800165c:	46bd      	mov	sp, r7
 800165e:	bd80      	pop	{r7, pc}
 8001660:	40012c00 	.word	0x40012c00
 8001664:	40023800 	.word	0x40023800
 8001668:	40020800 	.word	0x40020800
 800166c:	40020c00 	.word	0x40020c00
 8001670:	2000135c 	.word	0x2000135c
 8001674:	40026458 	.word	0x40026458
 8001678:	200013bc 	.word	0x200013bc
 800167c:	400264a0 	.word	0x400264a0

08001680 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001680:	b480      	push	{r7}
 8001682:	b083      	sub	sp, #12
 8001684:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001686:	2300      	movs	r3, #0
 8001688:	607b      	str	r3, [r7, #4]
 800168a:	4b10      	ldr	r3, [pc, #64]	; (80016cc <HAL_MspInit+0x4c>)
 800168c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800168e:	4a0f      	ldr	r2, [pc, #60]	; (80016cc <HAL_MspInit+0x4c>)
 8001690:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001694:	6453      	str	r3, [r2, #68]	; 0x44
 8001696:	4b0d      	ldr	r3, [pc, #52]	; (80016cc <HAL_MspInit+0x4c>)
 8001698:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800169a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800169e:	607b      	str	r3, [r7, #4]
 80016a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016a2:	2300      	movs	r3, #0
 80016a4:	603b      	str	r3, [r7, #0]
 80016a6:	4b09      	ldr	r3, [pc, #36]	; (80016cc <HAL_MspInit+0x4c>)
 80016a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016aa:	4a08      	ldr	r2, [pc, #32]	; (80016cc <HAL_MspInit+0x4c>)
 80016ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016b0:	6413      	str	r3, [r2, #64]	; 0x40
 80016b2:	4b06      	ldr	r3, [pc, #24]	; (80016cc <HAL_MspInit+0x4c>)
 80016b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016ba:	603b      	str	r3, [r7, #0]
 80016bc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016be:	bf00      	nop
 80016c0:	370c      	adds	r7, #12
 80016c2:	46bd      	mov	sp, r7
 80016c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c8:	4770      	bx	lr
 80016ca:	bf00      	nop
 80016cc:	40023800 	.word	0x40023800

080016d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 80016d4:	f004 fada 	bl	8005c8c <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80016d8:	e7fe      	b.n	80016d8 <NMI_Handler+0x8>

080016da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016da:	b480      	push	{r7}
 80016dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016de:	e7fe      	b.n	80016de <HardFault_Handler+0x4>

080016e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016e0:	b480      	push	{r7}
 80016e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016e4:	e7fe      	b.n	80016e4 <MemManage_Handler+0x4>

080016e6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016e6:	b480      	push	{r7}
 80016e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016ea:	e7fe      	b.n	80016ea <BusFault_Handler+0x4>

080016ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016ec:	b480      	push	{r7}
 80016ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016f0:	e7fe      	b.n	80016f0 <UsageFault_Handler+0x4>

080016f2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016f2:	b480      	push	{r7}
 80016f4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016f6:	bf00      	nop
 80016f8:	46bd      	mov	sp, r7
 80016fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fe:	4770      	bx	lr

08001700 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001700:	b480      	push	{r7}
 8001702:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001704:	bf00      	nop
 8001706:	46bd      	mov	sp, r7
 8001708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170c:	4770      	bx	lr

0800170e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800170e:	b480      	push	{r7}
 8001710:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001712:	bf00      	nop
 8001714:	46bd      	mov	sp, r7
 8001716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171a:	4770      	bx	lr

0800171c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001720:	f000 faf8 	bl	8001d14 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001724:	bf00      	nop
 8001726:	bd80      	pop	{r7, pc}

08001728 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800172c:	4805      	ldr	r0, [pc, #20]	; (8001744 <ADC_IRQHandler+0x1c>)
 800172e:	f000 fb78 	bl	8001e22 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8001732:	4805      	ldr	r0, [pc, #20]	; (8001748 <ADC_IRQHandler+0x20>)
 8001734:	f000 fb75 	bl	8001e22 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc3);
 8001738:	4804      	ldr	r0, [pc, #16]	; (800174c <ADC_IRQHandler+0x24>)
 800173a:	f000 fb72 	bl	8001e22 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800173e:	bf00      	nop
 8001740:	bd80      	pop	{r7, pc}
 8001742:	bf00      	nop
 8001744:	2000008c 	.word	0x2000008c
 8001748:	200000d4 	.word	0x200000d4
 800174c:	2000011c 	.word	0x2000011c

08001750 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001754:	4802      	ldr	r0, [pc, #8]	; (8001760 <CAN1_TX_IRQHandler+0x10>)
 8001756:	f000 ffb6 	bl	80026c6 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 800175a:	bf00      	nop
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop
 8001760:	20000164 	.word	0x20000164

08001764 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001768:	4802      	ldr	r0, [pc, #8]	; (8001774 <CAN1_RX0_IRQHandler+0x10>)
 800176a:	f000 ffac 	bl	80026c6 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 800176e:	bf00      	nop
 8001770:	bd80      	pop	{r7, pc}
 8001772:	bf00      	nop
 8001774:	20000164 	.word	0x20000164

08001778 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800177c:	4802      	ldr	r0, [pc, #8]	; (8001788 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800177e:	f006 f871 	bl	8007864 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001782:	bf00      	nop
 8001784:	bd80      	pop	{r7, pc}
 8001786:	bf00      	nop
 8001788:	20001420 	.word	0x20001420

0800178c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001790:	4802      	ldr	r0, [pc, #8]	; (800179c <I2C1_EV_IRQHandler+0x10>)
 8001792:	f002 fa11 	bl	8003bb8 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001796:	bf00      	nop
 8001798:	bd80      	pop	{r7, pc}
 800179a:	bf00      	nop
 800179c:	2000018c 	.word	0x2000018c

080017a0 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 80017a4:	4802      	ldr	r0, [pc, #8]	; (80017b0 <I2C2_EV_IRQHandler+0x10>)
 80017a6:	f002 fa07 	bl	8003bb8 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 80017aa:	bf00      	nop
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	200001e0 	.word	0x200001e0

080017b4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80017b8:	4802      	ldr	r0, [pc, #8]	; (80017c4 <USART1_IRQHandler+0x10>)
 80017ba:	f006 fcf5 	bl	80081a8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80017be:	bf00      	nop
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	20001468 	.word	0x20001468

080017c8 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 80017cc:	4802      	ldr	r0, [pc, #8]	; (80017d8 <SDIO_IRQHandler+0x10>)
 80017ce:	f005 f8d1 	bl	8006974 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 80017d2:	bf00      	nop
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	200012d8 	.word	0x200012d8

080017dc <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 80017e0:	4802      	ldr	r0, [pc, #8]	; (80017ec <DMA2_Stream3_IRQHandler+0x10>)
 80017e2:	f001 fc53 	bl	800308c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 80017e6:	bf00      	nop
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	bf00      	nop
 80017ec:	2000135c 	.word	0x2000135c

080017f0 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 80017f4:	4802      	ldr	r0, [pc, #8]	; (8001800 <DMA2_Stream6_IRQHandler+0x10>)
 80017f6:	f001 fc49 	bl	800308c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 80017fa:	bf00      	nop
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	200013bc 	.word	0x200013bc

08001804 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b086      	sub	sp, #24
 8001808:	af00      	add	r7, sp, #0
 800180a:	60f8      	str	r0, [r7, #12]
 800180c:	60b9      	str	r1, [r7, #8]
 800180e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001810:	2300      	movs	r3, #0
 8001812:	617b      	str	r3, [r7, #20]
 8001814:	e00a      	b.n	800182c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001816:	f3af 8000 	nop.w
 800181a:	4601      	mov	r1, r0
 800181c:	68bb      	ldr	r3, [r7, #8]
 800181e:	1c5a      	adds	r2, r3, #1
 8001820:	60ba      	str	r2, [r7, #8]
 8001822:	b2ca      	uxtb	r2, r1
 8001824:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001826:	697b      	ldr	r3, [r7, #20]
 8001828:	3301      	adds	r3, #1
 800182a:	617b      	str	r3, [r7, #20]
 800182c:	697a      	ldr	r2, [r7, #20]
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	429a      	cmp	r2, r3
 8001832:	dbf0      	blt.n	8001816 <_read+0x12>
  }

  return len;
 8001834:	687b      	ldr	r3, [r7, #4]
}
 8001836:	4618      	mov	r0, r3
 8001838:	3718      	adds	r7, #24
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}

0800183e <_close>:
  }
  return len;
}

int _close(int file)
{
 800183e:	b480      	push	{r7}
 8001840:	b083      	sub	sp, #12
 8001842:	af00      	add	r7, sp, #0
 8001844:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001846:	f04f 33ff 	mov.w	r3, #4294967295
}
 800184a:	4618      	mov	r0, r3
 800184c:	370c      	adds	r7, #12
 800184e:	46bd      	mov	sp, r7
 8001850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001854:	4770      	bx	lr

08001856 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001856:	b480      	push	{r7}
 8001858:	b083      	sub	sp, #12
 800185a:	af00      	add	r7, sp, #0
 800185c:	6078      	str	r0, [r7, #4]
 800185e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001866:	605a      	str	r2, [r3, #4]
  return 0;
 8001868:	2300      	movs	r3, #0
}
 800186a:	4618      	mov	r0, r3
 800186c:	370c      	adds	r7, #12
 800186e:	46bd      	mov	sp, r7
 8001870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001874:	4770      	bx	lr

08001876 <_isatty>:

int _isatty(int file)
{
 8001876:	b480      	push	{r7}
 8001878:	b083      	sub	sp, #12
 800187a:	af00      	add	r7, sp, #0
 800187c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800187e:	2301      	movs	r3, #1
}
 8001880:	4618      	mov	r0, r3
 8001882:	370c      	adds	r7, #12
 8001884:	46bd      	mov	sp, r7
 8001886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188a:	4770      	bx	lr

0800188c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800188c:	b480      	push	{r7}
 800188e:	b085      	sub	sp, #20
 8001890:	af00      	add	r7, sp, #0
 8001892:	60f8      	str	r0, [r7, #12]
 8001894:	60b9      	str	r1, [r7, #8]
 8001896:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001898:	2300      	movs	r3, #0
}
 800189a:	4618      	mov	r0, r3
 800189c:	3714      	adds	r7, #20
 800189e:	46bd      	mov	sp, r7
 80018a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a4:	4770      	bx	lr
	...

080018a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b086      	sub	sp, #24
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018b0:	4a14      	ldr	r2, [pc, #80]	; (8001904 <_sbrk+0x5c>)
 80018b2:	4b15      	ldr	r3, [pc, #84]	; (8001908 <_sbrk+0x60>)
 80018b4:	1ad3      	subs	r3, r2, r3
 80018b6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018b8:	697b      	ldr	r3, [r7, #20]
 80018ba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018bc:	4b13      	ldr	r3, [pc, #76]	; (800190c <_sbrk+0x64>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d102      	bne.n	80018ca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018c4:	4b11      	ldr	r3, [pc, #68]	; (800190c <_sbrk+0x64>)
 80018c6:	4a12      	ldr	r2, [pc, #72]	; (8001910 <_sbrk+0x68>)
 80018c8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018ca:	4b10      	ldr	r3, [pc, #64]	; (800190c <_sbrk+0x64>)
 80018cc:	681a      	ldr	r2, [r3, #0]
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	4413      	add	r3, r2
 80018d2:	693a      	ldr	r2, [r7, #16]
 80018d4:	429a      	cmp	r2, r3
 80018d6:	d207      	bcs.n	80018e8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018d8:	f00b fa04 	bl	800cce4 <__errno>
 80018dc:	4603      	mov	r3, r0
 80018de:	220c      	movs	r2, #12
 80018e0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80018e2:	f04f 33ff 	mov.w	r3, #4294967295
 80018e6:	e009      	b.n	80018fc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018e8:	4b08      	ldr	r3, [pc, #32]	; (800190c <_sbrk+0x64>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018ee:	4b07      	ldr	r3, [pc, #28]	; (800190c <_sbrk+0x64>)
 80018f0:	681a      	ldr	r2, [r3, #0]
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	4413      	add	r3, r2
 80018f6:	4a05      	ldr	r2, [pc, #20]	; (800190c <_sbrk+0x64>)
 80018f8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018fa:	68fb      	ldr	r3, [r7, #12]
}
 80018fc:	4618      	mov	r0, r3
 80018fe:	3718      	adds	r7, #24
 8001900:	46bd      	mov	sp, r7
 8001902:	bd80      	pop	{r7, pc}
 8001904:	20020000 	.word	0x20020000
 8001908:	00000400 	.word	0x00000400
 800190c:	2000141c 	.word	0x2000141c
 8001910:	20001748 	.word	0x20001748

08001914 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001914:	b480      	push	{r7}
 8001916:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001918:	4b06      	ldr	r3, [pc, #24]	; (8001934 <SystemInit+0x20>)
 800191a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800191e:	4a05      	ldr	r2, [pc, #20]	; (8001934 <SystemInit+0x20>)
 8001920:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001924:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001928:	bf00      	nop
 800192a:	46bd      	mov	sp, r7
 800192c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001930:	4770      	bx	lr
 8001932:	bf00      	nop
 8001934:	e000ed00 	.word	0xe000ed00

08001938 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "tim.h"

/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001938:	b580      	push	{r7, lr}
 800193a:	b082      	sub	sp, #8
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM1) {
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4a08      	ldr	r2, [pc, #32]	; (8001968 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8001946:	4293      	cmp	r3, r2
 8001948:	d109      	bne.n	800195e <HAL_TIM_PeriodElapsedCallback+0x26>
    #ifdef DEBUG_MODE
      printf("[%8lu] [INF] TIMER IRQ\n", HAL_GetTick());
 800194a:	f000 f9f7 	bl	8001d3c <HAL_GetTick>
 800194e:	4603      	mov	r3, r0
 8001950:	4619      	mov	r1, r3
 8001952:	4806      	ldr	r0, [pc, #24]	; (800196c <HAL_TIM_PeriodElapsedCallback+0x34>)
 8001954:	f00b f9f8 	bl	800cd48 <iprintf>
    #endif

    timer_flag[TIMER_SD] = true;
 8001958:	4b05      	ldr	r3, [pc, #20]	; (8001970 <HAL_TIM_PeriodElapsedCallback+0x38>)
 800195a:	2201      	movs	r2, #1
 800195c:	601a      	str	r2, [r3, #0]
	}
}
 800195e:	bf00      	nop
 8001960:	3708      	adds	r7, #8
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}
 8001966:	bf00      	nop
 8001968:	40010000 	.word	0x40010000
 800196c:	0800e18c 	.word	0x0800e18c
 8001970:	20001278 	.word	0x20001278

08001974 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b086      	sub	sp, #24
 8001978:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800197a:	f107 0308 	add.w	r3, r7, #8
 800197e:	2200      	movs	r2, #0
 8001980:	601a      	str	r2, [r3, #0]
 8001982:	605a      	str	r2, [r3, #4]
 8001984:	609a      	str	r2, [r3, #8]
 8001986:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001988:	463b      	mov	r3, r7
 800198a:	2200      	movs	r2, #0
 800198c:	601a      	str	r2, [r3, #0]
 800198e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001990:	4b1f      	ldr	r3, [pc, #124]	; (8001a10 <MX_TIM1_Init+0x9c>)
 8001992:	4a20      	ldr	r2, [pc, #128]	; (8001a14 <MX_TIM1_Init+0xa0>)
 8001994:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 8400 - 1;
 8001996:	4b1e      	ldr	r3, [pc, #120]	; (8001a10 <MX_TIM1_Init+0x9c>)
 8001998:	f242 02cf 	movw	r2, #8399	; 0x20cf
 800199c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800199e:	4b1c      	ldr	r3, [pc, #112]	; (8001a10 <MX_TIM1_Init+0x9c>)
 80019a0:	2200      	movs	r2, #0
 80019a2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 20000 - 1;
 80019a4:	4b1a      	ldr	r3, [pc, #104]	; (8001a10 <MX_TIM1_Init+0x9c>)
 80019a6:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80019aa:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019ac:	4b18      	ldr	r3, [pc, #96]	; (8001a10 <MX_TIM1_Init+0x9c>)
 80019ae:	2200      	movs	r2, #0
 80019b0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80019b2:	4b17      	ldr	r3, [pc, #92]	; (8001a10 <MX_TIM1_Init+0x9c>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019b8:	4b15      	ldr	r3, [pc, #84]	; (8001a10 <MX_TIM1_Init+0x9c>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80019be:	4814      	ldr	r0, [pc, #80]	; (8001a10 <MX_TIM1_Init+0x9c>)
 80019c0:	f005 fe90 	bl	80076e4 <HAL_TIM_Base_Init>
 80019c4:	4603      	mov	r3, r0
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d001      	beq.n	80019ce <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 80019ca:	f7ff fa9d 	bl	8000f08 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019d2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80019d4:	f107 0308 	add.w	r3, r7, #8
 80019d8:	4619      	mov	r1, r3
 80019da:	480d      	ldr	r0, [pc, #52]	; (8001a10 <MX_TIM1_Init+0x9c>)
 80019dc:	f006 f84a 	bl	8007a74 <HAL_TIM_ConfigClockSource>
 80019e0:	4603      	mov	r3, r0
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d001      	beq.n	80019ea <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 80019e6:	f7ff fa8f 	bl	8000f08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019ea:	2300      	movs	r3, #0
 80019ec:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019ee:	2300      	movs	r3, #0
 80019f0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80019f2:	463b      	mov	r3, r7
 80019f4:	4619      	mov	r1, r3
 80019f6:	4806      	ldr	r0, [pc, #24]	; (8001a10 <MX_TIM1_Init+0x9c>)
 80019f8:	f006 fa66 	bl	8007ec8 <HAL_TIMEx_MasterConfigSynchronization>
 80019fc:	4603      	mov	r3, r0
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d001      	beq.n	8001a06 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8001a02:	f7ff fa81 	bl	8000f08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001a06:	bf00      	nop
 8001a08:	3718      	adds	r7, #24
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}
 8001a0e:	bf00      	nop
 8001a10:	20001420 	.word	0x20001420
 8001a14:	40010000 	.word	0x40010000

08001a18 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b084      	sub	sp, #16
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4a0e      	ldr	r2, [pc, #56]	; (8001a60 <HAL_TIM_Base_MspInit+0x48>)
 8001a26:	4293      	cmp	r3, r2
 8001a28:	d115      	bne.n	8001a56 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	60fb      	str	r3, [r7, #12]
 8001a2e:	4b0d      	ldr	r3, [pc, #52]	; (8001a64 <HAL_TIM_Base_MspInit+0x4c>)
 8001a30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a32:	4a0c      	ldr	r2, [pc, #48]	; (8001a64 <HAL_TIM_Base_MspInit+0x4c>)
 8001a34:	f043 0301 	orr.w	r3, r3, #1
 8001a38:	6453      	str	r3, [r2, #68]	; 0x44
 8001a3a:	4b0a      	ldr	r3, [pc, #40]	; (8001a64 <HAL_TIM_Base_MspInit+0x4c>)
 8001a3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a3e:	f003 0301 	and.w	r3, r3, #1
 8001a42:	60fb      	str	r3, [r7, #12]
 8001a44:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8001a46:	2200      	movs	r2, #0
 8001a48:	2100      	movs	r1, #0
 8001a4a:	2019      	movs	r0, #25
 8001a4c:	f001 f94f 	bl	8002cee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001a50:	2019      	movs	r0, #25
 8001a52:	f001 f968 	bl	8002d26 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001a56:	bf00      	nop
 8001a58:	3710      	adds	r7, #16
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}
 8001a5e:	bf00      	nop
 8001a60:	40010000 	.word	0x40010000
 8001a64:	40023800 	.word	0x40023800

08001a68 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001a6c:	4b11      	ldr	r3, [pc, #68]	; (8001ab4 <MX_USART1_UART_Init+0x4c>)
 8001a6e:	4a12      	ldr	r2, [pc, #72]	; (8001ab8 <MX_USART1_UART_Init+0x50>)
 8001a70:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001a72:	4b10      	ldr	r3, [pc, #64]	; (8001ab4 <MX_USART1_UART_Init+0x4c>)
 8001a74:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001a78:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001a7a:	4b0e      	ldr	r3, [pc, #56]	; (8001ab4 <MX_USART1_UART_Init+0x4c>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001a80:	4b0c      	ldr	r3, [pc, #48]	; (8001ab4 <MX_USART1_UART_Init+0x4c>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001a86:	4b0b      	ldr	r3, [pc, #44]	; (8001ab4 <MX_USART1_UART_Init+0x4c>)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001a8c:	4b09      	ldr	r3, [pc, #36]	; (8001ab4 <MX_USART1_UART_Init+0x4c>)
 8001a8e:	220c      	movs	r2, #12
 8001a90:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a92:	4b08      	ldr	r3, [pc, #32]	; (8001ab4 <MX_USART1_UART_Init+0x4c>)
 8001a94:	2200      	movs	r2, #0
 8001a96:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a98:	4b06      	ldr	r3, [pc, #24]	; (8001ab4 <MX_USART1_UART_Init+0x4c>)
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001a9e:	4805      	ldr	r0, [pc, #20]	; (8001ab4 <MX_USART1_UART_Init+0x4c>)
 8001aa0:	f006 faa2 	bl	8007fe8 <HAL_UART_Init>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d001      	beq.n	8001aae <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001aaa:	f7ff fa2d 	bl	8000f08 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001aae:	bf00      	nop
 8001ab0:	bd80      	pop	{r7, pc}
 8001ab2:	bf00      	nop
 8001ab4:	20001468 	.word	0x20001468
 8001ab8:	40011000 	.word	0x40011000

08001abc <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001ac0:	4b11      	ldr	r3, [pc, #68]	; (8001b08 <MX_USART2_UART_Init+0x4c>)
 8001ac2:	4a12      	ldr	r2, [pc, #72]	; (8001b0c <MX_USART2_UART_Init+0x50>)
 8001ac4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001ac6:	4b10      	ldr	r3, [pc, #64]	; (8001b08 <MX_USART2_UART_Init+0x4c>)
 8001ac8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001acc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001ace:	4b0e      	ldr	r3, [pc, #56]	; (8001b08 <MX_USART2_UART_Init+0x4c>)
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001ad4:	4b0c      	ldr	r3, [pc, #48]	; (8001b08 <MX_USART2_UART_Init+0x4c>)
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001ada:	4b0b      	ldr	r3, [pc, #44]	; (8001b08 <MX_USART2_UART_Init+0x4c>)
 8001adc:	2200      	movs	r2, #0
 8001ade:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001ae0:	4b09      	ldr	r3, [pc, #36]	; (8001b08 <MX_USART2_UART_Init+0x4c>)
 8001ae2:	220c      	movs	r2, #12
 8001ae4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ae6:	4b08      	ldr	r3, [pc, #32]	; (8001b08 <MX_USART2_UART_Init+0x4c>)
 8001ae8:	2200      	movs	r2, #0
 8001aea:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001aec:	4b06      	ldr	r3, [pc, #24]	; (8001b08 <MX_USART2_UART_Init+0x4c>)
 8001aee:	2200      	movs	r2, #0
 8001af0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001af2:	4805      	ldr	r0, [pc, #20]	; (8001b08 <MX_USART2_UART_Init+0x4c>)
 8001af4:	f006 fa78 	bl	8007fe8 <HAL_UART_Init>
 8001af8:	4603      	mov	r3, r0
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d001      	beq.n	8001b02 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001afe:	f7ff fa03 	bl	8000f08 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001b02:	bf00      	nop
 8001b04:	bd80      	pop	{r7, pc}
 8001b06:	bf00      	nop
 8001b08:	200014ac 	.word	0x200014ac
 8001b0c:	40004400 	.word	0x40004400

08001b10 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b08c      	sub	sp, #48	; 0x30
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b18:	f107 031c 	add.w	r3, r7, #28
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	601a      	str	r2, [r3, #0]
 8001b20:	605a      	str	r2, [r3, #4]
 8001b22:	609a      	str	r2, [r3, #8]
 8001b24:	60da      	str	r2, [r3, #12]
 8001b26:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4a36      	ldr	r2, [pc, #216]	; (8001c08 <HAL_UART_MspInit+0xf8>)
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d135      	bne.n	8001b9e <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001b32:	2300      	movs	r3, #0
 8001b34:	61bb      	str	r3, [r7, #24]
 8001b36:	4b35      	ldr	r3, [pc, #212]	; (8001c0c <HAL_UART_MspInit+0xfc>)
 8001b38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b3a:	4a34      	ldr	r2, [pc, #208]	; (8001c0c <HAL_UART_MspInit+0xfc>)
 8001b3c:	f043 0310 	orr.w	r3, r3, #16
 8001b40:	6453      	str	r3, [r2, #68]	; 0x44
 8001b42:	4b32      	ldr	r3, [pc, #200]	; (8001c0c <HAL_UART_MspInit+0xfc>)
 8001b44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b46:	f003 0310 	and.w	r3, r3, #16
 8001b4a:	61bb      	str	r3, [r7, #24]
 8001b4c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b4e:	2300      	movs	r3, #0
 8001b50:	617b      	str	r3, [r7, #20]
 8001b52:	4b2e      	ldr	r3, [pc, #184]	; (8001c0c <HAL_UART_MspInit+0xfc>)
 8001b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b56:	4a2d      	ldr	r2, [pc, #180]	; (8001c0c <HAL_UART_MspInit+0xfc>)
 8001b58:	f043 0301 	orr.w	r3, r3, #1
 8001b5c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b5e:	4b2b      	ldr	r3, [pc, #172]	; (8001c0c <HAL_UART_MspInit+0xfc>)
 8001b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b62:	f003 0301 	and.w	r3, r3, #1
 8001b66:	617b      	str	r3, [r7, #20]
 8001b68:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001b6a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001b6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b70:	2302      	movs	r3, #2
 8001b72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b74:	2300      	movs	r3, #0
 8001b76:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b78:	2303      	movs	r3, #3
 8001b7a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001b7c:	2307      	movs	r3, #7
 8001b7e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b80:	f107 031c 	add.w	r3, r7, #28
 8001b84:	4619      	mov	r1, r3
 8001b86:	4822      	ldr	r0, [pc, #136]	; (8001c10 <HAL_UART_MspInit+0x100>)
 8001b88:	f001 fd04 	bl	8003594 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	2100      	movs	r1, #0
 8001b90:	2025      	movs	r0, #37	; 0x25
 8001b92:	f001 f8ac 	bl	8002cee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001b96:	2025      	movs	r0, #37	; 0x25
 8001b98:	f001 f8c5 	bl	8002d26 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001b9c:	e030      	b.n	8001c00 <HAL_UART_MspInit+0xf0>
  else if(uartHandle->Instance==USART2)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	4a1c      	ldr	r2, [pc, #112]	; (8001c14 <HAL_UART_MspInit+0x104>)
 8001ba4:	4293      	cmp	r3, r2
 8001ba6:	d12b      	bne.n	8001c00 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001ba8:	2300      	movs	r3, #0
 8001baa:	613b      	str	r3, [r7, #16]
 8001bac:	4b17      	ldr	r3, [pc, #92]	; (8001c0c <HAL_UART_MspInit+0xfc>)
 8001bae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bb0:	4a16      	ldr	r2, [pc, #88]	; (8001c0c <HAL_UART_MspInit+0xfc>)
 8001bb2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bb6:	6413      	str	r3, [r2, #64]	; 0x40
 8001bb8:	4b14      	ldr	r3, [pc, #80]	; (8001c0c <HAL_UART_MspInit+0xfc>)
 8001bba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bc0:	613b      	str	r3, [r7, #16]
 8001bc2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	60fb      	str	r3, [r7, #12]
 8001bc8:	4b10      	ldr	r3, [pc, #64]	; (8001c0c <HAL_UART_MspInit+0xfc>)
 8001bca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bcc:	4a0f      	ldr	r2, [pc, #60]	; (8001c0c <HAL_UART_MspInit+0xfc>)
 8001bce:	f043 0308 	orr.w	r3, r3, #8
 8001bd2:	6313      	str	r3, [r2, #48]	; 0x30
 8001bd4:	4b0d      	ldr	r3, [pc, #52]	; (8001c0c <HAL_UART_MspInit+0xfc>)
 8001bd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bd8:	f003 0308 	and.w	r3, r3, #8
 8001bdc:	60fb      	str	r3, [r7, #12]
 8001bde:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001be0:	2360      	movs	r3, #96	; 0x60
 8001be2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001be4:	2302      	movs	r3, #2
 8001be6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be8:	2300      	movs	r3, #0
 8001bea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bec:	2303      	movs	r3, #3
 8001bee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001bf0:	2307      	movs	r3, #7
 8001bf2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001bf4:	f107 031c 	add.w	r3, r7, #28
 8001bf8:	4619      	mov	r1, r3
 8001bfa:	4807      	ldr	r0, [pc, #28]	; (8001c18 <HAL_UART_MspInit+0x108>)
 8001bfc:	f001 fcca 	bl	8003594 <HAL_GPIO_Init>
}
 8001c00:	bf00      	nop
 8001c02:	3730      	adds	r7, #48	; 0x30
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bd80      	pop	{r7, pc}
 8001c08:	40011000 	.word	0x40011000
 8001c0c:	40023800 	.word	0x40023800
 8001c10:	40020000 	.word	0x40020000
 8001c14:	40004400 	.word	0x40004400
 8001c18:	40020c00 	.word	0x40020c00

08001c1c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001c1c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c54 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001c20:	480d      	ldr	r0, [pc, #52]	; (8001c58 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001c22:	490e      	ldr	r1, [pc, #56]	; (8001c5c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001c24:	4a0e      	ldr	r2, [pc, #56]	; (8001c60 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001c26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c28:	e002      	b.n	8001c30 <LoopCopyDataInit>

08001c2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c2e:	3304      	adds	r3, #4

08001c30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c34:	d3f9      	bcc.n	8001c2a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c36:	4a0b      	ldr	r2, [pc, #44]	; (8001c64 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001c38:	4c0b      	ldr	r4, [pc, #44]	; (8001c68 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001c3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c3c:	e001      	b.n	8001c42 <LoopFillZerobss>

08001c3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c40:	3204      	adds	r2, #4

08001c42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c44:	d3fb      	bcc.n	8001c3e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001c46:	f7ff fe65 	bl	8001914 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001c4a:	f00b f851 	bl	800ccf0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c4e:	f7ff f869 	bl	8000d24 <main>
  bx  lr    
 8001c52:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001c54:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001c58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c5c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001c60:	0800e708 	.word	0x0800e708
  ldr r2, =_sbss
 8001c64:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001c68:	20001748 	.word	0x20001748

08001c6c <CAN1_RX1_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c6c:	e7fe      	b.n	8001c6c <CAN1_RX1_IRQHandler>
	...

08001c70 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001c74:	4b0e      	ldr	r3, [pc, #56]	; (8001cb0 <HAL_Init+0x40>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4a0d      	ldr	r2, [pc, #52]	; (8001cb0 <HAL_Init+0x40>)
 8001c7a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c7e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001c80:	4b0b      	ldr	r3, [pc, #44]	; (8001cb0 <HAL_Init+0x40>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4a0a      	ldr	r2, [pc, #40]	; (8001cb0 <HAL_Init+0x40>)
 8001c86:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c8a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c8c:	4b08      	ldr	r3, [pc, #32]	; (8001cb0 <HAL_Init+0x40>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	4a07      	ldr	r2, [pc, #28]	; (8001cb0 <HAL_Init+0x40>)
 8001c92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c96:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c98:	2003      	movs	r0, #3
 8001c9a:	f001 f81d 	bl	8002cd8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c9e:	2000      	movs	r0, #0
 8001ca0:	f000 f808 	bl	8001cb4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ca4:	f7ff fcec 	bl	8001680 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ca8:	2300      	movs	r3, #0
}
 8001caa:	4618      	mov	r0, r3
 8001cac:	bd80      	pop	{r7, pc}
 8001cae:	bf00      	nop
 8001cb0:	40023c00 	.word	0x40023c00

08001cb4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b082      	sub	sp, #8
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001cbc:	4b12      	ldr	r3, [pc, #72]	; (8001d08 <HAL_InitTick+0x54>)
 8001cbe:	681a      	ldr	r2, [r3, #0]
 8001cc0:	4b12      	ldr	r3, [pc, #72]	; (8001d0c <HAL_InitTick+0x58>)
 8001cc2:	781b      	ldrb	r3, [r3, #0]
 8001cc4:	4619      	mov	r1, r3
 8001cc6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001cca:	fbb3 f3f1 	udiv	r3, r3, r1
 8001cce:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	f001 f835 	bl	8002d42 <HAL_SYSTICK_Config>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d001      	beq.n	8001ce2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001cde:	2301      	movs	r3, #1
 8001ce0:	e00e      	b.n	8001d00 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	2b0f      	cmp	r3, #15
 8001ce6:	d80a      	bhi.n	8001cfe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ce8:	2200      	movs	r2, #0
 8001cea:	6879      	ldr	r1, [r7, #4]
 8001cec:	f04f 30ff 	mov.w	r0, #4294967295
 8001cf0:	f000 fffd 	bl	8002cee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001cf4:	4a06      	ldr	r2, [pc, #24]	; (8001d10 <HAL_InitTick+0x5c>)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	e000      	b.n	8001d00 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001cfe:	2301      	movs	r3, #1
}
 8001d00:	4618      	mov	r0, r3
 8001d02:	3708      	adds	r7, #8
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bd80      	pop	{r7, pc}
 8001d08:	20000000 	.word	0x20000000
 8001d0c:	20000008 	.word	0x20000008
 8001d10:	20000004 	.word	0x20000004

08001d14 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d14:	b480      	push	{r7}
 8001d16:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d18:	4b06      	ldr	r3, [pc, #24]	; (8001d34 <HAL_IncTick+0x20>)
 8001d1a:	781b      	ldrb	r3, [r3, #0]
 8001d1c:	461a      	mov	r2, r3
 8001d1e:	4b06      	ldr	r3, [pc, #24]	; (8001d38 <HAL_IncTick+0x24>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	4413      	add	r3, r2
 8001d24:	4a04      	ldr	r2, [pc, #16]	; (8001d38 <HAL_IncTick+0x24>)
 8001d26:	6013      	str	r3, [r2, #0]
}
 8001d28:	bf00      	nop
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d30:	4770      	bx	lr
 8001d32:	bf00      	nop
 8001d34:	20000008 	.word	0x20000008
 8001d38:	200014f0 	.word	0x200014f0

08001d3c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	af00      	add	r7, sp, #0
  return uwTick;
 8001d40:	4b03      	ldr	r3, [pc, #12]	; (8001d50 <HAL_GetTick+0x14>)
 8001d42:	681b      	ldr	r3, [r3, #0]
}
 8001d44:	4618      	mov	r0, r3
 8001d46:	46bd      	mov	sp, r7
 8001d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4c:	4770      	bx	lr
 8001d4e:	bf00      	nop
 8001d50:	200014f0 	.word	0x200014f0

08001d54 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b084      	sub	sp, #16
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d5c:	f7ff ffee 	bl	8001d3c <HAL_GetTick>
 8001d60:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d6c:	d005      	beq.n	8001d7a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d6e:	4b0a      	ldr	r3, [pc, #40]	; (8001d98 <HAL_Delay+0x44>)
 8001d70:	781b      	ldrb	r3, [r3, #0]
 8001d72:	461a      	mov	r2, r3
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	4413      	add	r3, r2
 8001d78:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001d7a:	bf00      	nop
 8001d7c:	f7ff ffde 	bl	8001d3c <HAL_GetTick>
 8001d80:	4602      	mov	r2, r0
 8001d82:	68bb      	ldr	r3, [r7, #8]
 8001d84:	1ad3      	subs	r3, r2, r3
 8001d86:	68fa      	ldr	r2, [r7, #12]
 8001d88:	429a      	cmp	r2, r3
 8001d8a:	d8f7      	bhi.n	8001d7c <HAL_Delay+0x28>
  {
  }
}
 8001d8c:	bf00      	nop
 8001d8e:	bf00      	nop
 8001d90:	3710      	adds	r7, #16
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}
 8001d96:	bf00      	nop
 8001d98:	20000008 	.word	0x20000008

08001d9c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b084      	sub	sp, #16
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001da4:	2300      	movs	r3, #0
 8001da6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d101      	bne.n	8001db2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001dae:	2301      	movs	r3, #1
 8001db0:	e033      	b.n	8001e1a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d109      	bne.n	8001dce <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001dba:	6878      	ldr	r0, [r7, #4]
 8001dbc:	f7fe fcd0 	bl	8000760 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	2200      	movs	r2, #0
 8001dca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dd2:	f003 0310 	and.w	r3, r3, #16
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d118      	bne.n	8001e0c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dde:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001de2:	f023 0302 	bic.w	r3, r3, #2
 8001de6:	f043 0202 	orr.w	r2, r3, #2
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001dee:	6878      	ldr	r0, [r7, #4]
 8001df0:	f000 fa68 	bl	80022c4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2200      	movs	r2, #0
 8001df8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dfe:	f023 0303 	bic.w	r3, r3, #3
 8001e02:	f043 0201 	orr.w	r2, r3, #1
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	641a      	str	r2, [r3, #64]	; 0x40
 8001e0a:	e001      	b.n	8001e10 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2200      	movs	r2, #0
 8001e14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001e18:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	3710      	adds	r7, #16
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}

08001e22 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001e22:	b580      	push	{r7, lr}
 8001e24:	b086      	sub	sp, #24
 8001e26:	af00      	add	r7, sp, #0
 8001e28:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	617b      	str	r3, [r7, #20]
 8001e2e:	2300      	movs	r3, #0
 8001e30:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	f003 0302 	and.w	r3, r3, #2
 8001e48:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8001e4a:	68bb      	ldr	r3, [r7, #8]
 8001e4c:	f003 0320 	and.w	r3, r3, #32
 8001e50:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8001e52:	697b      	ldr	r3, [r7, #20]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d049      	beq.n	8001eec <HAL_ADC_IRQHandler+0xca>
 8001e58:	693b      	ldr	r3, [r7, #16]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d046      	beq.n	8001eec <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e62:	f003 0310 	and.w	r3, r3, #16
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d105      	bne.n	8001e76 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e6e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	689b      	ldr	r3, [r3, #8]
 8001e7c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d12b      	bne.n	8001edc <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d127      	bne.n	8001edc <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e92:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d006      	beq.n	8001ea8 <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	689b      	ldr	r3, [r3, #8]
 8001ea0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d119      	bne.n	8001edc <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	685a      	ldr	r2, [r3, #4]
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f022 0220 	bic.w	r2, r2, #32
 8001eb6:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ebc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ec8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d105      	bne.n	8001edc <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ed4:	f043 0201 	orr.w	r2, r3, #1
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001edc:	6878      	ldr	r0, [r7, #4]
 8001ede:	f000 f8b0 	bl	8002042 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f06f 0212 	mvn.w	r2, #18
 8001eea:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	f003 0304 	and.w	r3, r3, #4
 8001ef2:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8001ef4:	68bb      	ldr	r3, [r7, #8]
 8001ef6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001efa:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8001efc:	697b      	ldr	r3, [r7, #20]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d057      	beq.n	8001fb2 <HAL_ADC_IRQHandler+0x190>
 8001f02:	693b      	ldr	r3, [r7, #16]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d054      	beq.n	8001fb2 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f0c:	f003 0310 	and.w	r3, r3, #16
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d105      	bne.n	8001f20 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f18:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	689b      	ldr	r3, [r3, #8]
 8001f26:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d139      	bne.n	8001fa2 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f34:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d006      	beq.n	8001f4a <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	689b      	ldr	r3, [r3, #8]
 8001f42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d12b      	bne.n	8001fa2 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d124      	bne.n	8001fa2 <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	689b      	ldr	r3, [r3, #8]
 8001f5e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d11d      	bne.n	8001fa2 <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d119      	bne.n	8001fa2 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	685a      	ldr	r2, [r3, #4]
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001f7c:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f82:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d105      	bne.n	8001fa2 <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f9a:	f043 0201 	orr.w	r2, r3, #1
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001fa2:	6878      	ldr	r0, [r7, #4]
 8001fa4:	f000 fa8a 	bl	80024bc <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f06f 020c 	mvn.w	r2, #12
 8001fb0:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	f003 0301 	and.w	r3, r3, #1
 8001fb8:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8001fba:	68bb      	ldr	r3, [r7, #8]
 8001fbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fc0:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8001fc2:	697b      	ldr	r3, [r7, #20]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d017      	beq.n	8001ff8 <HAL_ADC_IRQHandler+0x1d6>
 8001fc8:	693b      	ldr	r3, [r7, #16]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d014      	beq.n	8001ff8 <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f003 0301 	and.w	r3, r3, #1
 8001fd8:	2b01      	cmp	r3, #1
 8001fda:	d10d      	bne.n	8001ff8 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fe0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001fe8:	6878      	ldr	r0, [r7, #4]
 8001fea:	f000 f834 	bl	8002056 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f06f 0201 	mvn.w	r2, #1
 8001ff6:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	f003 0320 	and.w	r3, r3, #32
 8001ffe:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8002000:	68bb      	ldr	r3, [r7, #8]
 8002002:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002006:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8002008:	697b      	ldr	r3, [r7, #20]
 800200a:	2b00      	cmp	r3, #0
 800200c:	d015      	beq.n	800203a <HAL_ADC_IRQHandler+0x218>
 800200e:	693b      	ldr	r3, [r7, #16]
 8002010:	2b00      	cmp	r3, #0
 8002012:	d012      	beq.n	800203a <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002018:	f043 0202 	orr.w	r2, r3, #2
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f06f 0220 	mvn.w	r2, #32
 8002028:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800202a:	6878      	ldr	r0, [r7, #4]
 800202c:	f000 f81d 	bl	800206a <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f06f 0220 	mvn.w	r2, #32
 8002038:	601a      	str	r2, [r3, #0]
  }
}
 800203a:	bf00      	nop
 800203c:	3718      	adds	r7, #24
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}

08002042 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002042:	b480      	push	{r7}
 8002044:	b083      	sub	sp, #12
 8002046:	af00      	add	r7, sp, #0
 8002048:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 800204a:	bf00      	nop
 800204c:	370c      	adds	r7, #12
 800204e:	46bd      	mov	sp, r7
 8002050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002054:	4770      	bx	lr

08002056 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8002056:	b480      	push	{r7}
 8002058:	b083      	sub	sp, #12
 800205a:	af00      	add	r7, sp, #0
 800205c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 800205e:	bf00      	nop
 8002060:	370c      	adds	r7, #12
 8002062:	46bd      	mov	sp, r7
 8002064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002068:	4770      	bx	lr

0800206a <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800206a:	b480      	push	{r7}
 800206c:	b083      	sub	sp, #12
 800206e:	af00      	add	r7, sp, #0
 8002070:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002072:	bf00      	nop
 8002074:	370c      	adds	r7, #12
 8002076:	46bd      	mov	sp, r7
 8002078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207c:	4770      	bx	lr
	...

08002080 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002080:	b480      	push	{r7}
 8002082:	b085      	sub	sp, #20
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
 8002088:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800208a:	2300      	movs	r3, #0
 800208c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002094:	2b01      	cmp	r3, #1
 8002096:	d101      	bne.n	800209c <HAL_ADC_ConfigChannel+0x1c>
 8002098:	2302      	movs	r3, #2
 800209a:	e105      	b.n	80022a8 <HAL_ADC_ConfigChannel+0x228>
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2201      	movs	r2, #1
 80020a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	2b09      	cmp	r3, #9
 80020aa:	d925      	bls.n	80020f8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	68d9      	ldr	r1, [r3, #12]
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	b29b      	uxth	r3, r3
 80020b8:	461a      	mov	r2, r3
 80020ba:	4613      	mov	r3, r2
 80020bc:	005b      	lsls	r3, r3, #1
 80020be:	4413      	add	r3, r2
 80020c0:	3b1e      	subs	r3, #30
 80020c2:	2207      	movs	r2, #7
 80020c4:	fa02 f303 	lsl.w	r3, r2, r3
 80020c8:	43da      	mvns	r2, r3
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	400a      	ands	r2, r1
 80020d0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	68d9      	ldr	r1, [r3, #12]
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	689a      	ldr	r2, [r3, #8]
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	b29b      	uxth	r3, r3
 80020e2:	4618      	mov	r0, r3
 80020e4:	4603      	mov	r3, r0
 80020e6:	005b      	lsls	r3, r3, #1
 80020e8:	4403      	add	r3, r0
 80020ea:	3b1e      	subs	r3, #30
 80020ec:	409a      	lsls	r2, r3
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	430a      	orrs	r2, r1
 80020f4:	60da      	str	r2, [r3, #12]
 80020f6:	e022      	b.n	800213e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	6919      	ldr	r1, [r3, #16]
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	b29b      	uxth	r3, r3
 8002104:	461a      	mov	r2, r3
 8002106:	4613      	mov	r3, r2
 8002108:	005b      	lsls	r3, r3, #1
 800210a:	4413      	add	r3, r2
 800210c:	2207      	movs	r2, #7
 800210e:	fa02 f303 	lsl.w	r3, r2, r3
 8002112:	43da      	mvns	r2, r3
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	400a      	ands	r2, r1
 800211a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	6919      	ldr	r1, [r3, #16]
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	689a      	ldr	r2, [r3, #8]
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	b29b      	uxth	r3, r3
 800212c:	4618      	mov	r0, r3
 800212e:	4603      	mov	r3, r0
 8002130:	005b      	lsls	r3, r3, #1
 8002132:	4403      	add	r3, r0
 8002134:	409a      	lsls	r2, r3
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	430a      	orrs	r2, r1
 800213c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	2b06      	cmp	r3, #6
 8002144:	d824      	bhi.n	8002190 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	685a      	ldr	r2, [r3, #4]
 8002150:	4613      	mov	r3, r2
 8002152:	009b      	lsls	r3, r3, #2
 8002154:	4413      	add	r3, r2
 8002156:	3b05      	subs	r3, #5
 8002158:	221f      	movs	r2, #31
 800215a:	fa02 f303 	lsl.w	r3, r2, r3
 800215e:	43da      	mvns	r2, r3
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	400a      	ands	r2, r1
 8002166:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	b29b      	uxth	r3, r3
 8002174:	4618      	mov	r0, r3
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	685a      	ldr	r2, [r3, #4]
 800217a:	4613      	mov	r3, r2
 800217c:	009b      	lsls	r3, r3, #2
 800217e:	4413      	add	r3, r2
 8002180:	3b05      	subs	r3, #5
 8002182:	fa00 f203 	lsl.w	r2, r0, r3
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	430a      	orrs	r2, r1
 800218c:	635a      	str	r2, [r3, #52]	; 0x34
 800218e:	e04c      	b.n	800222a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	2b0c      	cmp	r3, #12
 8002196:	d824      	bhi.n	80021e2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	685a      	ldr	r2, [r3, #4]
 80021a2:	4613      	mov	r3, r2
 80021a4:	009b      	lsls	r3, r3, #2
 80021a6:	4413      	add	r3, r2
 80021a8:	3b23      	subs	r3, #35	; 0x23
 80021aa:	221f      	movs	r2, #31
 80021ac:	fa02 f303 	lsl.w	r3, r2, r3
 80021b0:	43da      	mvns	r2, r3
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	400a      	ands	r2, r1
 80021b8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	b29b      	uxth	r3, r3
 80021c6:	4618      	mov	r0, r3
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	685a      	ldr	r2, [r3, #4]
 80021cc:	4613      	mov	r3, r2
 80021ce:	009b      	lsls	r3, r3, #2
 80021d0:	4413      	add	r3, r2
 80021d2:	3b23      	subs	r3, #35	; 0x23
 80021d4:	fa00 f203 	lsl.w	r2, r0, r3
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	430a      	orrs	r2, r1
 80021de:	631a      	str	r2, [r3, #48]	; 0x30
 80021e0:	e023      	b.n	800222a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	685a      	ldr	r2, [r3, #4]
 80021ec:	4613      	mov	r3, r2
 80021ee:	009b      	lsls	r3, r3, #2
 80021f0:	4413      	add	r3, r2
 80021f2:	3b41      	subs	r3, #65	; 0x41
 80021f4:	221f      	movs	r2, #31
 80021f6:	fa02 f303 	lsl.w	r3, r2, r3
 80021fa:	43da      	mvns	r2, r3
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	400a      	ands	r2, r1
 8002202:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	b29b      	uxth	r3, r3
 8002210:	4618      	mov	r0, r3
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	685a      	ldr	r2, [r3, #4]
 8002216:	4613      	mov	r3, r2
 8002218:	009b      	lsls	r3, r3, #2
 800221a:	4413      	add	r3, r2
 800221c:	3b41      	subs	r3, #65	; 0x41
 800221e:	fa00 f203 	lsl.w	r2, r0, r3
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	430a      	orrs	r2, r1
 8002228:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800222a:	4b22      	ldr	r3, [pc, #136]	; (80022b4 <HAL_ADC_ConfigChannel+0x234>)
 800222c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	4a21      	ldr	r2, [pc, #132]	; (80022b8 <HAL_ADC_ConfigChannel+0x238>)
 8002234:	4293      	cmp	r3, r2
 8002236:	d109      	bne.n	800224c <HAL_ADC_ConfigChannel+0x1cc>
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	2b12      	cmp	r3, #18
 800223e:	d105      	bne.n	800224c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4a19      	ldr	r2, [pc, #100]	; (80022b8 <HAL_ADC_ConfigChannel+0x238>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d123      	bne.n	800229e <HAL_ADC_ConfigChannel+0x21e>
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	2b10      	cmp	r3, #16
 800225c:	d003      	beq.n	8002266 <HAL_ADC_ConfigChannel+0x1e6>
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	2b11      	cmp	r3, #17
 8002264:	d11b      	bne.n	800229e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	2b10      	cmp	r3, #16
 8002278:	d111      	bne.n	800229e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800227a:	4b10      	ldr	r3, [pc, #64]	; (80022bc <HAL_ADC_ConfigChannel+0x23c>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	4a10      	ldr	r2, [pc, #64]	; (80022c0 <HAL_ADC_ConfigChannel+0x240>)
 8002280:	fba2 2303 	umull	r2, r3, r2, r3
 8002284:	0c9a      	lsrs	r2, r3, #18
 8002286:	4613      	mov	r3, r2
 8002288:	009b      	lsls	r3, r3, #2
 800228a:	4413      	add	r3, r2
 800228c:	005b      	lsls	r3, r3, #1
 800228e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002290:	e002      	b.n	8002298 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002292:	68bb      	ldr	r3, [r7, #8]
 8002294:	3b01      	subs	r3, #1
 8002296:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002298:	68bb      	ldr	r3, [r7, #8]
 800229a:	2b00      	cmp	r3, #0
 800229c:	d1f9      	bne.n	8002292 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2200      	movs	r2, #0
 80022a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80022a6:	2300      	movs	r3, #0
}
 80022a8:	4618      	mov	r0, r3
 80022aa:	3714      	adds	r7, #20
 80022ac:	46bd      	mov	sp, r7
 80022ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b2:	4770      	bx	lr
 80022b4:	40012300 	.word	0x40012300
 80022b8:	40012000 	.word	0x40012000
 80022bc:	20000000 	.word	0x20000000
 80022c0:	431bde83 	.word	0x431bde83

080022c4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80022c4:	b480      	push	{r7}
 80022c6:	b085      	sub	sp, #20
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80022cc:	4b79      	ldr	r3, [pc, #484]	; (80024b4 <ADC_Init+0x1f0>)
 80022ce:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	685a      	ldr	r2, [r3, #4]
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	431a      	orrs	r2, r3
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	685a      	ldr	r2, [r3, #4]
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80022f8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	6859      	ldr	r1, [r3, #4]
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	691b      	ldr	r3, [r3, #16]
 8002304:	021a      	lsls	r2, r3, #8
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	430a      	orrs	r2, r1
 800230c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	685a      	ldr	r2, [r3, #4]
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800231c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	6859      	ldr	r1, [r3, #4]
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	689a      	ldr	r2, [r3, #8]
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	430a      	orrs	r2, r1
 800232e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	689a      	ldr	r2, [r3, #8]
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800233e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	6899      	ldr	r1, [r3, #8]
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	68da      	ldr	r2, [r3, #12]
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	430a      	orrs	r2, r1
 8002350:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002356:	4a58      	ldr	r2, [pc, #352]	; (80024b8 <ADC_Init+0x1f4>)
 8002358:	4293      	cmp	r3, r2
 800235a:	d022      	beq.n	80023a2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	689a      	ldr	r2, [r3, #8]
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800236a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	6899      	ldr	r1, [r3, #8]
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	430a      	orrs	r2, r1
 800237c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	689a      	ldr	r2, [r3, #8]
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800238c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	6899      	ldr	r1, [r3, #8]
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	430a      	orrs	r2, r1
 800239e:	609a      	str	r2, [r3, #8]
 80023a0:	e00f      	b.n	80023c2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	689a      	ldr	r2, [r3, #8]
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80023b0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	689a      	ldr	r2, [r3, #8]
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80023c0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	689a      	ldr	r2, [r3, #8]
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f022 0202 	bic.w	r2, r2, #2
 80023d0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	6899      	ldr	r1, [r3, #8]
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	7e1b      	ldrb	r3, [r3, #24]
 80023dc:	005a      	lsls	r2, r3, #1
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	430a      	orrs	r2, r1
 80023e4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d01b      	beq.n	8002428 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	685a      	ldr	r2, [r3, #4]
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80023fe:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	685a      	ldr	r2, [r3, #4]
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800240e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	6859      	ldr	r1, [r3, #4]
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800241a:	3b01      	subs	r3, #1
 800241c:	035a      	lsls	r2, r3, #13
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	430a      	orrs	r2, r1
 8002424:	605a      	str	r2, [r3, #4]
 8002426:	e007      	b.n	8002438 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	685a      	ldr	r2, [r3, #4]
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002436:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002446:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	69db      	ldr	r3, [r3, #28]
 8002452:	3b01      	subs	r3, #1
 8002454:	051a      	lsls	r2, r3, #20
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	430a      	orrs	r2, r1
 800245c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	689a      	ldr	r2, [r3, #8]
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800246c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	6899      	ldr	r1, [r3, #8]
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800247a:	025a      	lsls	r2, r3, #9
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	430a      	orrs	r2, r1
 8002482:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	689a      	ldr	r2, [r3, #8]
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002492:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	6899      	ldr	r1, [r3, #8]
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	695b      	ldr	r3, [r3, #20]
 800249e:	029a      	lsls	r2, r3, #10
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	430a      	orrs	r2, r1
 80024a6:	609a      	str	r2, [r3, #8]
}
 80024a8:	bf00      	nop
 80024aa:	3714      	adds	r7, #20
 80024ac:	46bd      	mov	sp, r7
 80024ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b2:	4770      	bx	lr
 80024b4:	40012300 	.word	0x40012300
 80024b8:	0f000001 	.word	0x0f000001

080024bc <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80024bc:	b480      	push	{r7}
 80024be:	b083      	sub	sp, #12
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80024c4:	bf00      	nop
 80024c6:	370c      	adds	r7, #12
 80024c8:	46bd      	mov	sp, r7
 80024ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ce:	4770      	bx	lr

080024d0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b084      	sub	sp, #16
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d101      	bne.n	80024e2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80024de:	2301      	movs	r3, #1
 80024e0:	e0ed      	b.n	80026be <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80024e8:	b2db      	uxtb	r3, r3
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d102      	bne.n	80024f4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80024ee:	6878      	ldr	r0, [r7, #4]
 80024f0:	f7fe fa12 	bl	8000918 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	681a      	ldr	r2, [r3, #0]
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f042 0201 	orr.w	r2, r2, #1
 8002502:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002504:	f7ff fc1a 	bl	8001d3c <HAL_GetTick>
 8002508:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800250a:	e012      	b.n	8002532 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800250c:	f7ff fc16 	bl	8001d3c <HAL_GetTick>
 8002510:	4602      	mov	r2, r0
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	1ad3      	subs	r3, r2, r3
 8002516:	2b0a      	cmp	r3, #10
 8002518:	d90b      	bls.n	8002532 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800251e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	2205      	movs	r2, #5
 800252a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800252e:	2301      	movs	r3, #1
 8002530:	e0c5      	b.n	80026be <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	f003 0301 	and.w	r3, r3, #1
 800253c:	2b00      	cmp	r3, #0
 800253e:	d0e5      	beq.n	800250c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	681a      	ldr	r2, [r3, #0]
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f022 0202 	bic.w	r2, r2, #2
 800254e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002550:	f7ff fbf4 	bl	8001d3c <HAL_GetTick>
 8002554:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002556:	e012      	b.n	800257e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002558:	f7ff fbf0 	bl	8001d3c <HAL_GetTick>
 800255c:	4602      	mov	r2, r0
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	1ad3      	subs	r3, r2, r3
 8002562:	2b0a      	cmp	r3, #10
 8002564:	d90b      	bls.n	800257e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800256a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	2205      	movs	r2, #5
 8002576:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800257a:	2301      	movs	r3, #1
 800257c:	e09f      	b.n	80026be <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	f003 0302 	and.w	r3, r3, #2
 8002588:	2b00      	cmp	r3, #0
 800258a:	d1e5      	bne.n	8002558 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	7e1b      	ldrb	r3, [r3, #24]
 8002590:	2b01      	cmp	r3, #1
 8002592:	d108      	bne.n	80025a6 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	681a      	ldr	r2, [r3, #0]
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80025a2:	601a      	str	r2, [r3, #0]
 80025a4:	e007      	b.n	80025b6 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	681a      	ldr	r2, [r3, #0]
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80025b4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	7e5b      	ldrb	r3, [r3, #25]
 80025ba:	2b01      	cmp	r3, #1
 80025bc:	d108      	bne.n	80025d0 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	681a      	ldr	r2, [r3, #0]
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80025cc:	601a      	str	r2, [r3, #0]
 80025ce:	e007      	b.n	80025e0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	681a      	ldr	r2, [r3, #0]
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80025de:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	7e9b      	ldrb	r3, [r3, #26]
 80025e4:	2b01      	cmp	r3, #1
 80025e6:	d108      	bne.n	80025fa <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	681a      	ldr	r2, [r3, #0]
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f042 0220 	orr.w	r2, r2, #32
 80025f6:	601a      	str	r2, [r3, #0]
 80025f8:	e007      	b.n	800260a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	681a      	ldr	r2, [r3, #0]
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f022 0220 	bic.w	r2, r2, #32
 8002608:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	7edb      	ldrb	r3, [r3, #27]
 800260e:	2b01      	cmp	r3, #1
 8002610:	d108      	bne.n	8002624 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	681a      	ldr	r2, [r3, #0]
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f022 0210 	bic.w	r2, r2, #16
 8002620:	601a      	str	r2, [r3, #0]
 8002622:	e007      	b.n	8002634 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	681a      	ldr	r2, [r3, #0]
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f042 0210 	orr.w	r2, r2, #16
 8002632:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	7f1b      	ldrb	r3, [r3, #28]
 8002638:	2b01      	cmp	r3, #1
 800263a:	d108      	bne.n	800264e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	681a      	ldr	r2, [r3, #0]
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f042 0208 	orr.w	r2, r2, #8
 800264a:	601a      	str	r2, [r3, #0]
 800264c:	e007      	b.n	800265e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	681a      	ldr	r2, [r3, #0]
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f022 0208 	bic.w	r2, r2, #8
 800265c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	7f5b      	ldrb	r3, [r3, #29]
 8002662:	2b01      	cmp	r3, #1
 8002664:	d108      	bne.n	8002678 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	681a      	ldr	r2, [r3, #0]
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f042 0204 	orr.w	r2, r2, #4
 8002674:	601a      	str	r2, [r3, #0]
 8002676:	e007      	b.n	8002688 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	681a      	ldr	r2, [r3, #0]
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f022 0204 	bic.w	r2, r2, #4
 8002686:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	689a      	ldr	r2, [r3, #8]
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	68db      	ldr	r3, [r3, #12]
 8002690:	431a      	orrs	r2, r3
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	691b      	ldr	r3, [r3, #16]
 8002696:	431a      	orrs	r2, r3
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	695b      	ldr	r3, [r3, #20]
 800269c:	ea42 0103 	orr.w	r1, r2, r3
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	1e5a      	subs	r2, r3, #1
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	430a      	orrs	r2, r1
 80026ac:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	2200      	movs	r2, #0
 80026b2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2201      	movs	r2, #1
 80026b8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80026bc:	2300      	movs	r3, #0
}
 80026be:	4618      	mov	r0, r3
 80026c0:	3710      	adds	r7, #16
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bd80      	pop	{r7, pc}

080026c6 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80026c6:	b580      	push	{r7, lr}
 80026c8:	b08a      	sub	sp, #40	; 0x28
 80026ca:	af00      	add	r7, sp, #0
 80026cc:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80026ce:	2300      	movs	r3, #0
 80026d0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	695b      	ldr	r3, [r3, #20]
 80026d8:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	689b      	ldr	r3, [r3, #8]
 80026e8:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	68db      	ldr	r3, [r3, #12]
 80026f0:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	691b      	ldr	r3, [r3, #16]
 80026f8:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	699b      	ldr	r3, [r3, #24]
 8002700:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002702:	6a3b      	ldr	r3, [r7, #32]
 8002704:	f003 0301 	and.w	r3, r3, #1
 8002708:	2b00      	cmp	r3, #0
 800270a:	d07c      	beq.n	8002806 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800270c:	69bb      	ldr	r3, [r7, #24]
 800270e:	f003 0301 	and.w	r3, r3, #1
 8002712:	2b00      	cmp	r3, #0
 8002714:	d023      	beq.n	800275e <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	2201      	movs	r2, #1
 800271c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800271e:	69bb      	ldr	r3, [r7, #24]
 8002720:	f003 0302 	and.w	r3, r3, #2
 8002724:	2b00      	cmp	r3, #0
 8002726:	d003      	beq.n	8002730 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002728:	6878      	ldr	r0, [r7, #4]
 800272a:	f000 f983 	bl	8002a34 <HAL_CAN_TxMailbox0CompleteCallback>
 800272e:	e016      	b.n	800275e <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002730:	69bb      	ldr	r3, [r7, #24]
 8002732:	f003 0304 	and.w	r3, r3, #4
 8002736:	2b00      	cmp	r3, #0
 8002738:	d004      	beq.n	8002744 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800273a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800273c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002740:	627b      	str	r3, [r7, #36]	; 0x24
 8002742:	e00c      	b.n	800275e <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002744:	69bb      	ldr	r3, [r7, #24]
 8002746:	f003 0308 	and.w	r3, r3, #8
 800274a:	2b00      	cmp	r3, #0
 800274c:	d004      	beq.n	8002758 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800274e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002750:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002754:	627b      	str	r3, [r7, #36]	; 0x24
 8002756:	e002      	b.n	800275e <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002758:	6878      	ldr	r0, [r7, #4]
 800275a:	f000 f989 	bl	8002a70 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800275e:	69bb      	ldr	r3, [r7, #24]
 8002760:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002764:	2b00      	cmp	r3, #0
 8002766:	d024      	beq.n	80027b2 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002770:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002772:	69bb      	ldr	r3, [r7, #24]
 8002774:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002778:	2b00      	cmp	r3, #0
 800277a:	d003      	beq.n	8002784 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800277c:	6878      	ldr	r0, [r7, #4]
 800277e:	f000 f963 	bl	8002a48 <HAL_CAN_TxMailbox1CompleteCallback>
 8002782:	e016      	b.n	80027b2 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002784:	69bb      	ldr	r3, [r7, #24]
 8002786:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800278a:	2b00      	cmp	r3, #0
 800278c:	d004      	beq.n	8002798 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800278e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002790:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002794:	627b      	str	r3, [r7, #36]	; 0x24
 8002796:	e00c      	b.n	80027b2 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002798:	69bb      	ldr	r3, [r7, #24]
 800279a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d004      	beq.n	80027ac <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80027a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80027a8:	627b      	str	r3, [r7, #36]	; 0x24
 80027aa:	e002      	b.n	80027b2 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80027ac:	6878      	ldr	r0, [r7, #4]
 80027ae:	f000 f969 	bl	8002a84 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80027b2:	69bb      	ldr	r3, [r7, #24]
 80027b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d024      	beq.n	8002806 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80027c4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80027c6:	69bb      	ldr	r3, [r7, #24]
 80027c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d003      	beq.n	80027d8 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80027d0:	6878      	ldr	r0, [r7, #4]
 80027d2:	f000 f943 	bl	8002a5c <HAL_CAN_TxMailbox2CompleteCallback>
 80027d6:	e016      	b.n	8002806 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80027d8:	69bb      	ldr	r3, [r7, #24]
 80027da:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d004      	beq.n	80027ec <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80027e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80027e8:	627b      	str	r3, [r7, #36]	; 0x24
 80027ea:	e00c      	b.n	8002806 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80027ec:	69bb      	ldr	r3, [r7, #24]
 80027ee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d004      	beq.n	8002800 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80027f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027fc:	627b      	str	r3, [r7, #36]	; 0x24
 80027fe:	e002      	b.n	8002806 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002800:	6878      	ldr	r0, [r7, #4]
 8002802:	f000 f949 	bl	8002a98 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002806:	6a3b      	ldr	r3, [r7, #32]
 8002808:	f003 0308 	and.w	r3, r3, #8
 800280c:	2b00      	cmp	r3, #0
 800280e:	d00c      	beq.n	800282a <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002810:	697b      	ldr	r3, [r7, #20]
 8002812:	f003 0310 	and.w	r3, r3, #16
 8002816:	2b00      	cmp	r3, #0
 8002818:	d007      	beq.n	800282a <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800281a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800281c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002820:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	2210      	movs	r2, #16
 8002828:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800282a:	6a3b      	ldr	r3, [r7, #32]
 800282c:	f003 0304 	and.w	r3, r3, #4
 8002830:	2b00      	cmp	r3, #0
 8002832:	d00b      	beq.n	800284c <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002834:	697b      	ldr	r3, [r7, #20]
 8002836:	f003 0308 	and.w	r3, r3, #8
 800283a:	2b00      	cmp	r3, #0
 800283c:	d006      	beq.n	800284c <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	2208      	movs	r2, #8
 8002844:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002846:	6878      	ldr	r0, [r7, #4]
 8002848:	f000 f93a 	bl	8002ac0 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800284c:	6a3b      	ldr	r3, [r7, #32]
 800284e:	f003 0302 	and.w	r3, r3, #2
 8002852:	2b00      	cmp	r3, #0
 8002854:	d009      	beq.n	800286a <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	68db      	ldr	r3, [r3, #12]
 800285c:	f003 0303 	and.w	r3, r3, #3
 8002860:	2b00      	cmp	r3, #0
 8002862:	d002      	beq.n	800286a <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002864:	6878      	ldr	r0, [r7, #4]
 8002866:	f000 f921 	bl	8002aac <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800286a:	6a3b      	ldr	r3, [r7, #32]
 800286c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002870:	2b00      	cmp	r3, #0
 8002872:	d00c      	beq.n	800288e <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002874:	693b      	ldr	r3, [r7, #16]
 8002876:	f003 0310 	and.w	r3, r3, #16
 800287a:	2b00      	cmp	r3, #0
 800287c:	d007      	beq.n	800288e <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800287e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002880:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002884:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	2210      	movs	r2, #16
 800288c:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800288e:	6a3b      	ldr	r3, [r7, #32]
 8002890:	f003 0320 	and.w	r3, r3, #32
 8002894:	2b00      	cmp	r3, #0
 8002896:	d00b      	beq.n	80028b0 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002898:	693b      	ldr	r3, [r7, #16]
 800289a:	f003 0308 	and.w	r3, r3, #8
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d006      	beq.n	80028b0 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	2208      	movs	r2, #8
 80028a8:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80028aa:	6878      	ldr	r0, [r7, #4]
 80028ac:	f000 f91c 	bl	8002ae8 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80028b0:	6a3b      	ldr	r3, [r7, #32]
 80028b2:	f003 0310 	and.w	r3, r3, #16
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d009      	beq.n	80028ce <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	691b      	ldr	r3, [r3, #16]
 80028c0:	f003 0303 	and.w	r3, r3, #3
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d002      	beq.n	80028ce <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80028c8:	6878      	ldr	r0, [r7, #4]
 80028ca:	f000 f903 	bl	8002ad4 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80028ce:	6a3b      	ldr	r3, [r7, #32]
 80028d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d00b      	beq.n	80028f0 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80028d8:	69fb      	ldr	r3, [r7, #28]
 80028da:	f003 0310 	and.w	r3, r3, #16
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d006      	beq.n	80028f0 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	2210      	movs	r2, #16
 80028e8:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80028ea:	6878      	ldr	r0, [r7, #4]
 80028ec:	f000 f906 	bl	8002afc <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80028f0:	6a3b      	ldr	r3, [r7, #32]
 80028f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d00b      	beq.n	8002912 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80028fa:	69fb      	ldr	r3, [r7, #28]
 80028fc:	f003 0308 	and.w	r3, r3, #8
 8002900:	2b00      	cmp	r3, #0
 8002902:	d006      	beq.n	8002912 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	2208      	movs	r2, #8
 800290a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800290c:	6878      	ldr	r0, [r7, #4]
 800290e:	f000 f8ff 	bl	8002b10 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002912:	6a3b      	ldr	r3, [r7, #32]
 8002914:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002918:	2b00      	cmp	r3, #0
 800291a:	d07b      	beq.n	8002a14 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800291c:	69fb      	ldr	r3, [r7, #28]
 800291e:	f003 0304 	and.w	r3, r3, #4
 8002922:	2b00      	cmp	r3, #0
 8002924:	d072      	beq.n	8002a0c <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002926:	6a3b      	ldr	r3, [r7, #32]
 8002928:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800292c:	2b00      	cmp	r3, #0
 800292e:	d008      	beq.n	8002942 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002936:	2b00      	cmp	r3, #0
 8002938:	d003      	beq.n	8002942 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800293a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800293c:	f043 0301 	orr.w	r3, r3, #1
 8002940:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002942:	6a3b      	ldr	r3, [r7, #32]
 8002944:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002948:	2b00      	cmp	r3, #0
 800294a:	d008      	beq.n	800295e <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002952:	2b00      	cmp	r3, #0
 8002954:	d003      	beq.n	800295e <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002958:	f043 0302 	orr.w	r3, r3, #2
 800295c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800295e:	6a3b      	ldr	r3, [r7, #32]
 8002960:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002964:	2b00      	cmp	r3, #0
 8002966:	d008      	beq.n	800297a <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800296e:	2b00      	cmp	r3, #0
 8002970:	d003      	beq.n	800297a <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002974:	f043 0304 	orr.w	r3, r3, #4
 8002978:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800297a:	6a3b      	ldr	r3, [r7, #32]
 800297c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002980:	2b00      	cmp	r3, #0
 8002982:	d043      	beq.n	8002a0c <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800298a:	2b00      	cmp	r3, #0
 800298c:	d03e      	beq.n	8002a0c <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002994:	2b60      	cmp	r3, #96	; 0x60
 8002996:	d02b      	beq.n	80029f0 <HAL_CAN_IRQHandler+0x32a>
 8002998:	2b60      	cmp	r3, #96	; 0x60
 800299a:	d82e      	bhi.n	80029fa <HAL_CAN_IRQHandler+0x334>
 800299c:	2b50      	cmp	r3, #80	; 0x50
 800299e:	d022      	beq.n	80029e6 <HAL_CAN_IRQHandler+0x320>
 80029a0:	2b50      	cmp	r3, #80	; 0x50
 80029a2:	d82a      	bhi.n	80029fa <HAL_CAN_IRQHandler+0x334>
 80029a4:	2b40      	cmp	r3, #64	; 0x40
 80029a6:	d019      	beq.n	80029dc <HAL_CAN_IRQHandler+0x316>
 80029a8:	2b40      	cmp	r3, #64	; 0x40
 80029aa:	d826      	bhi.n	80029fa <HAL_CAN_IRQHandler+0x334>
 80029ac:	2b30      	cmp	r3, #48	; 0x30
 80029ae:	d010      	beq.n	80029d2 <HAL_CAN_IRQHandler+0x30c>
 80029b0:	2b30      	cmp	r3, #48	; 0x30
 80029b2:	d822      	bhi.n	80029fa <HAL_CAN_IRQHandler+0x334>
 80029b4:	2b10      	cmp	r3, #16
 80029b6:	d002      	beq.n	80029be <HAL_CAN_IRQHandler+0x2f8>
 80029b8:	2b20      	cmp	r3, #32
 80029ba:	d005      	beq.n	80029c8 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80029bc:	e01d      	b.n	80029fa <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80029be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c0:	f043 0308 	orr.w	r3, r3, #8
 80029c4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80029c6:	e019      	b.n	80029fc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80029c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ca:	f043 0310 	orr.w	r3, r3, #16
 80029ce:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80029d0:	e014      	b.n	80029fc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80029d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029d4:	f043 0320 	orr.w	r3, r3, #32
 80029d8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80029da:	e00f      	b.n	80029fc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80029dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80029e2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80029e4:	e00a      	b.n	80029fc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80029e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80029ec:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80029ee:	e005      	b.n	80029fc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80029f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029f6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80029f8:	e000      	b.n	80029fc <HAL_CAN_IRQHandler+0x336>
            break;
 80029fa:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	699a      	ldr	r2, [r3, #24]
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002a0a:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	2204      	movs	r2, #4
 8002a12:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d008      	beq.n	8002a2c <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a20:	431a      	orrs	r2, r3
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002a26:	6878      	ldr	r0, [r7, #4]
 8002a28:	f000 f87c 	bl	8002b24 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002a2c:	bf00      	nop
 8002a2e:	3728      	adds	r7, #40	; 0x28
 8002a30:	46bd      	mov	sp, r7
 8002a32:	bd80      	pop	{r7, pc}

08002a34 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002a34:	b480      	push	{r7}
 8002a36:	b083      	sub	sp, #12
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002a3c:	bf00      	nop
 8002a3e:	370c      	adds	r7, #12
 8002a40:	46bd      	mov	sp, r7
 8002a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a46:	4770      	bx	lr

08002a48 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002a48:	b480      	push	{r7}
 8002a4a:	b083      	sub	sp, #12
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002a50:	bf00      	nop
 8002a52:	370c      	adds	r7, #12
 8002a54:	46bd      	mov	sp, r7
 8002a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5a:	4770      	bx	lr

08002a5c <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	b083      	sub	sp, #12
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002a64:	bf00      	nop
 8002a66:	370c      	adds	r7, #12
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6e:	4770      	bx	lr

08002a70 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002a70:	b480      	push	{r7}
 8002a72:	b083      	sub	sp, #12
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002a78:	bf00      	nop
 8002a7a:	370c      	adds	r7, #12
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a82:	4770      	bx	lr

08002a84 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002a84:	b480      	push	{r7}
 8002a86:	b083      	sub	sp, #12
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002a8c:	bf00      	nop
 8002a8e:	370c      	adds	r7, #12
 8002a90:	46bd      	mov	sp, r7
 8002a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a96:	4770      	bx	lr

08002a98 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	b083      	sub	sp, #12
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002aa0:	bf00      	nop
 8002aa2:	370c      	adds	r7, #12
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aaa:	4770      	bx	lr

08002aac <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002aac:	b480      	push	{r7}
 8002aae:	b083      	sub	sp, #12
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8002ab4:	bf00      	nop
 8002ab6:	370c      	adds	r7, #12
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abe:	4770      	bx	lr

08002ac0 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	b083      	sub	sp, #12
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002ac8:	bf00      	nop
 8002aca:	370c      	adds	r7, #12
 8002acc:	46bd      	mov	sp, r7
 8002ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad2:	4770      	bx	lr

08002ad4 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	b083      	sub	sp, #12
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002adc:	bf00      	nop
 8002ade:	370c      	adds	r7, #12
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae6:	4770      	bx	lr

08002ae8 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	b083      	sub	sp, #12
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002af0:	bf00      	nop
 8002af2:	370c      	adds	r7, #12
 8002af4:	46bd      	mov	sp, r7
 8002af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afa:	4770      	bx	lr

08002afc <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002afc:	b480      	push	{r7}
 8002afe:	b083      	sub	sp, #12
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002b04:	bf00      	nop
 8002b06:	370c      	adds	r7, #12
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0e:	4770      	bx	lr

08002b10 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002b10:	b480      	push	{r7}
 8002b12:	b083      	sub	sp, #12
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002b18:	bf00      	nop
 8002b1a:	370c      	adds	r7, #12
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b22:	4770      	bx	lr

08002b24 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002b24:	b480      	push	{r7}
 8002b26:	b083      	sub	sp, #12
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002b2c:	bf00      	nop
 8002b2e:	370c      	adds	r7, #12
 8002b30:	46bd      	mov	sp, r7
 8002b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b36:	4770      	bx	lr

08002b38 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b38:	b480      	push	{r7}
 8002b3a:	b085      	sub	sp, #20
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	f003 0307 	and.w	r3, r3, #7
 8002b46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b48:	4b0c      	ldr	r3, [pc, #48]	; (8002b7c <__NVIC_SetPriorityGrouping+0x44>)
 8002b4a:	68db      	ldr	r3, [r3, #12]
 8002b4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b4e:	68ba      	ldr	r2, [r7, #8]
 8002b50:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002b54:	4013      	ands	r3, r2
 8002b56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b5c:	68bb      	ldr	r3, [r7, #8]
 8002b5e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b60:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002b64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b6a:	4a04      	ldr	r2, [pc, #16]	; (8002b7c <__NVIC_SetPriorityGrouping+0x44>)
 8002b6c:	68bb      	ldr	r3, [r7, #8]
 8002b6e:	60d3      	str	r3, [r2, #12]
}
 8002b70:	bf00      	nop
 8002b72:	3714      	adds	r7, #20
 8002b74:	46bd      	mov	sp, r7
 8002b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7a:	4770      	bx	lr
 8002b7c:	e000ed00 	.word	0xe000ed00

08002b80 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b80:	b480      	push	{r7}
 8002b82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b84:	4b04      	ldr	r3, [pc, #16]	; (8002b98 <__NVIC_GetPriorityGrouping+0x18>)
 8002b86:	68db      	ldr	r3, [r3, #12]
 8002b88:	0a1b      	lsrs	r3, r3, #8
 8002b8a:	f003 0307 	and.w	r3, r3, #7
}
 8002b8e:	4618      	mov	r0, r3
 8002b90:	46bd      	mov	sp, r7
 8002b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b96:	4770      	bx	lr
 8002b98:	e000ed00 	.word	0xe000ed00

08002b9c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	b083      	sub	sp, #12
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ba6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	db0b      	blt.n	8002bc6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002bae:	79fb      	ldrb	r3, [r7, #7]
 8002bb0:	f003 021f 	and.w	r2, r3, #31
 8002bb4:	4907      	ldr	r1, [pc, #28]	; (8002bd4 <__NVIC_EnableIRQ+0x38>)
 8002bb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bba:	095b      	lsrs	r3, r3, #5
 8002bbc:	2001      	movs	r0, #1
 8002bbe:	fa00 f202 	lsl.w	r2, r0, r2
 8002bc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002bc6:	bf00      	nop
 8002bc8:	370c      	adds	r7, #12
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd0:	4770      	bx	lr
 8002bd2:	bf00      	nop
 8002bd4:	e000e100 	.word	0xe000e100

08002bd8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	b083      	sub	sp, #12
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	4603      	mov	r3, r0
 8002be0:	6039      	str	r1, [r7, #0]
 8002be2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002be4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	db0a      	blt.n	8002c02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	b2da      	uxtb	r2, r3
 8002bf0:	490c      	ldr	r1, [pc, #48]	; (8002c24 <__NVIC_SetPriority+0x4c>)
 8002bf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bf6:	0112      	lsls	r2, r2, #4
 8002bf8:	b2d2      	uxtb	r2, r2
 8002bfa:	440b      	add	r3, r1
 8002bfc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c00:	e00a      	b.n	8002c18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	b2da      	uxtb	r2, r3
 8002c06:	4908      	ldr	r1, [pc, #32]	; (8002c28 <__NVIC_SetPriority+0x50>)
 8002c08:	79fb      	ldrb	r3, [r7, #7]
 8002c0a:	f003 030f 	and.w	r3, r3, #15
 8002c0e:	3b04      	subs	r3, #4
 8002c10:	0112      	lsls	r2, r2, #4
 8002c12:	b2d2      	uxtb	r2, r2
 8002c14:	440b      	add	r3, r1
 8002c16:	761a      	strb	r2, [r3, #24]
}
 8002c18:	bf00      	nop
 8002c1a:	370c      	adds	r7, #12
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c22:	4770      	bx	lr
 8002c24:	e000e100 	.word	0xe000e100
 8002c28:	e000ed00 	.word	0xe000ed00

08002c2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	b089      	sub	sp, #36	; 0x24
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	60f8      	str	r0, [r7, #12]
 8002c34:	60b9      	str	r1, [r7, #8]
 8002c36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	f003 0307 	and.w	r3, r3, #7
 8002c3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c40:	69fb      	ldr	r3, [r7, #28]
 8002c42:	f1c3 0307 	rsb	r3, r3, #7
 8002c46:	2b04      	cmp	r3, #4
 8002c48:	bf28      	it	cs
 8002c4a:	2304      	movcs	r3, #4
 8002c4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c4e:	69fb      	ldr	r3, [r7, #28]
 8002c50:	3304      	adds	r3, #4
 8002c52:	2b06      	cmp	r3, #6
 8002c54:	d902      	bls.n	8002c5c <NVIC_EncodePriority+0x30>
 8002c56:	69fb      	ldr	r3, [r7, #28]
 8002c58:	3b03      	subs	r3, #3
 8002c5a:	e000      	b.n	8002c5e <NVIC_EncodePriority+0x32>
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c60:	f04f 32ff 	mov.w	r2, #4294967295
 8002c64:	69bb      	ldr	r3, [r7, #24]
 8002c66:	fa02 f303 	lsl.w	r3, r2, r3
 8002c6a:	43da      	mvns	r2, r3
 8002c6c:	68bb      	ldr	r3, [r7, #8]
 8002c6e:	401a      	ands	r2, r3
 8002c70:	697b      	ldr	r3, [r7, #20]
 8002c72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c74:	f04f 31ff 	mov.w	r1, #4294967295
 8002c78:	697b      	ldr	r3, [r7, #20]
 8002c7a:	fa01 f303 	lsl.w	r3, r1, r3
 8002c7e:	43d9      	mvns	r1, r3
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c84:	4313      	orrs	r3, r2
         );
}
 8002c86:	4618      	mov	r0, r3
 8002c88:	3724      	adds	r7, #36	; 0x24
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c90:	4770      	bx	lr
	...

08002c94 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b082      	sub	sp, #8
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	3b01      	subs	r3, #1
 8002ca0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002ca4:	d301      	bcc.n	8002caa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	e00f      	b.n	8002cca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002caa:	4a0a      	ldr	r2, [pc, #40]	; (8002cd4 <SysTick_Config+0x40>)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	3b01      	subs	r3, #1
 8002cb0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002cb2:	210f      	movs	r1, #15
 8002cb4:	f04f 30ff 	mov.w	r0, #4294967295
 8002cb8:	f7ff ff8e 	bl	8002bd8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002cbc:	4b05      	ldr	r3, [pc, #20]	; (8002cd4 <SysTick_Config+0x40>)
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002cc2:	4b04      	ldr	r3, [pc, #16]	; (8002cd4 <SysTick_Config+0x40>)
 8002cc4:	2207      	movs	r2, #7
 8002cc6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002cc8:	2300      	movs	r3, #0
}
 8002cca:	4618      	mov	r0, r3
 8002ccc:	3708      	adds	r7, #8
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bd80      	pop	{r7, pc}
 8002cd2:	bf00      	nop
 8002cd4:	e000e010 	.word	0xe000e010

08002cd8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b082      	sub	sp, #8
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ce0:	6878      	ldr	r0, [r7, #4]
 8002ce2:	f7ff ff29 	bl	8002b38 <__NVIC_SetPriorityGrouping>
}
 8002ce6:	bf00      	nop
 8002ce8:	3708      	adds	r7, #8
 8002cea:	46bd      	mov	sp, r7
 8002cec:	bd80      	pop	{r7, pc}

08002cee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002cee:	b580      	push	{r7, lr}
 8002cf0:	b086      	sub	sp, #24
 8002cf2:	af00      	add	r7, sp, #0
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	60b9      	str	r1, [r7, #8]
 8002cf8:	607a      	str	r2, [r7, #4]
 8002cfa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002d00:	f7ff ff3e 	bl	8002b80 <__NVIC_GetPriorityGrouping>
 8002d04:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d06:	687a      	ldr	r2, [r7, #4]
 8002d08:	68b9      	ldr	r1, [r7, #8]
 8002d0a:	6978      	ldr	r0, [r7, #20]
 8002d0c:	f7ff ff8e 	bl	8002c2c <NVIC_EncodePriority>
 8002d10:	4602      	mov	r2, r0
 8002d12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d16:	4611      	mov	r1, r2
 8002d18:	4618      	mov	r0, r3
 8002d1a:	f7ff ff5d 	bl	8002bd8 <__NVIC_SetPriority>
}
 8002d1e:	bf00      	nop
 8002d20:	3718      	adds	r7, #24
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bd80      	pop	{r7, pc}

08002d26 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d26:	b580      	push	{r7, lr}
 8002d28:	b082      	sub	sp, #8
 8002d2a:	af00      	add	r7, sp, #0
 8002d2c:	4603      	mov	r3, r0
 8002d2e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d34:	4618      	mov	r0, r3
 8002d36:	f7ff ff31 	bl	8002b9c <__NVIC_EnableIRQ>
}
 8002d3a:	bf00      	nop
 8002d3c:	3708      	adds	r7, #8
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bd80      	pop	{r7, pc}

08002d42 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002d42:	b580      	push	{r7, lr}
 8002d44:	b082      	sub	sp, #8
 8002d46:	af00      	add	r7, sp, #0
 8002d48:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002d4a:	6878      	ldr	r0, [r7, #4]
 8002d4c:	f7ff ffa2 	bl	8002c94 <SysTick_Config>
 8002d50:	4603      	mov	r3, r0
}
 8002d52:	4618      	mov	r0, r3
 8002d54:	3708      	adds	r7, #8
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bd80      	pop	{r7, pc}
	...

08002d5c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b086      	sub	sp, #24
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002d64:	2300      	movs	r3, #0
 8002d66:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002d68:	f7fe ffe8 	bl	8001d3c <HAL_GetTick>
 8002d6c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d101      	bne.n	8002d78 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002d74:	2301      	movs	r3, #1
 8002d76:	e099      	b.n	8002eac <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2202      	movs	r2, #2
 8002d7c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2200      	movs	r2, #0
 8002d84:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	681a      	ldr	r2, [r3, #0]
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f022 0201 	bic.w	r2, r2, #1
 8002d96:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002d98:	e00f      	b.n	8002dba <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002d9a:	f7fe ffcf 	bl	8001d3c <HAL_GetTick>
 8002d9e:	4602      	mov	r2, r0
 8002da0:	693b      	ldr	r3, [r7, #16]
 8002da2:	1ad3      	subs	r3, r2, r3
 8002da4:	2b05      	cmp	r3, #5
 8002da6:	d908      	bls.n	8002dba <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2220      	movs	r2, #32
 8002dac:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2203      	movs	r2, #3
 8002db2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002db6:	2303      	movs	r3, #3
 8002db8:	e078      	b.n	8002eac <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f003 0301 	and.w	r3, r3, #1
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d1e8      	bne.n	8002d9a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002dd0:	697a      	ldr	r2, [r7, #20]
 8002dd2:	4b38      	ldr	r3, [pc, #224]	; (8002eb4 <HAL_DMA_Init+0x158>)
 8002dd4:	4013      	ands	r3, r2
 8002dd6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	685a      	ldr	r2, [r3, #4]
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	689b      	ldr	r3, [r3, #8]
 8002de0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002de6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	691b      	ldr	r3, [r3, #16]
 8002dec:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002df2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	699b      	ldr	r3, [r3, #24]
 8002df8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002dfe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6a1b      	ldr	r3, [r3, #32]
 8002e04:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002e06:	697a      	ldr	r2, [r7, #20]
 8002e08:	4313      	orrs	r3, r2
 8002e0a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e10:	2b04      	cmp	r3, #4
 8002e12:	d107      	bne.n	8002e24 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e1c:	4313      	orrs	r3, r2
 8002e1e:	697a      	ldr	r2, [r7, #20]
 8002e20:	4313      	orrs	r3, r2
 8002e22:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	697a      	ldr	r2, [r7, #20]
 8002e2a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	695b      	ldr	r3, [r3, #20]
 8002e32:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002e34:	697b      	ldr	r3, [r7, #20]
 8002e36:	f023 0307 	bic.w	r3, r3, #7
 8002e3a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e40:	697a      	ldr	r2, [r7, #20]
 8002e42:	4313      	orrs	r3, r2
 8002e44:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e4a:	2b04      	cmp	r3, #4
 8002e4c:	d117      	bne.n	8002e7e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e52:	697a      	ldr	r2, [r7, #20]
 8002e54:	4313      	orrs	r3, r2
 8002e56:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d00e      	beq.n	8002e7e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002e60:	6878      	ldr	r0, [r7, #4]
 8002e62:	f000 fb1b 	bl	800349c <DMA_CheckFifoParam>
 8002e66:	4603      	mov	r3, r0
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d008      	beq.n	8002e7e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2240      	movs	r2, #64	; 0x40
 8002e70:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2201      	movs	r2, #1
 8002e76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	e016      	b.n	8002eac <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	697a      	ldr	r2, [r7, #20]
 8002e84:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002e86:	6878      	ldr	r0, [r7, #4]
 8002e88:	f000 fad2 	bl	8003430 <DMA_CalcBaseAndBitshift>
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e94:	223f      	movs	r2, #63	; 0x3f
 8002e96:	409a      	lsls	r2, r3
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2201      	movs	r2, #1
 8002ea6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002eaa:	2300      	movs	r3, #0
}
 8002eac:	4618      	mov	r0, r3
 8002eae:	3718      	adds	r7, #24
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	bd80      	pop	{r7, pc}
 8002eb4:	f010803f 	.word	0xf010803f

08002eb8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b086      	sub	sp, #24
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	60f8      	str	r0, [r7, #12]
 8002ec0:	60b9      	str	r1, [r7, #8]
 8002ec2:	607a      	str	r2, [r7, #4]
 8002ec4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ece:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002ed6:	2b01      	cmp	r3, #1
 8002ed8:	d101      	bne.n	8002ede <HAL_DMA_Start_IT+0x26>
 8002eda:	2302      	movs	r3, #2
 8002edc:	e040      	b.n	8002f60 <HAL_DMA_Start_IT+0xa8>
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	2201      	movs	r2, #1
 8002ee2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002eec:	b2db      	uxtb	r3, r3
 8002eee:	2b01      	cmp	r3, #1
 8002ef0:	d12f      	bne.n	8002f52 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	2202      	movs	r2, #2
 8002ef6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	2200      	movs	r2, #0
 8002efe:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	687a      	ldr	r2, [r7, #4]
 8002f04:	68b9      	ldr	r1, [r7, #8]
 8002f06:	68f8      	ldr	r0, [r7, #12]
 8002f08:	f000 fa64 	bl	80033d4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f10:	223f      	movs	r2, #63	; 0x3f
 8002f12:	409a      	lsls	r2, r3
 8002f14:	693b      	ldr	r3, [r7, #16]
 8002f16:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	681a      	ldr	r2, [r3, #0]
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f042 0216 	orr.w	r2, r2, #22
 8002f26:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d007      	beq.n	8002f40 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	681a      	ldr	r2, [r3, #0]
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f042 0208 	orr.w	r2, r2, #8
 8002f3e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	681a      	ldr	r2, [r3, #0]
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f042 0201 	orr.w	r2, r2, #1
 8002f4e:	601a      	str	r2, [r3, #0]
 8002f50:	e005      	b.n	8002f5e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	2200      	movs	r2, #0
 8002f56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002f5a:	2302      	movs	r3, #2
 8002f5c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002f5e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f60:	4618      	mov	r0, r3
 8002f62:	3718      	adds	r7, #24
 8002f64:	46bd      	mov	sp, r7
 8002f66:	bd80      	pop	{r7, pc}

08002f68 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b084      	sub	sp, #16
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f74:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002f76:	f7fe fee1 	bl	8001d3c <HAL_GetTick>
 8002f7a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002f82:	b2db      	uxtb	r3, r3
 8002f84:	2b02      	cmp	r3, #2
 8002f86:	d008      	beq.n	8002f9a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2280      	movs	r2, #128	; 0x80
 8002f8c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	2200      	movs	r2, #0
 8002f92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002f96:	2301      	movs	r3, #1
 8002f98:	e052      	b.n	8003040 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	681a      	ldr	r2, [r3, #0]
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f022 0216 	bic.w	r2, r2, #22
 8002fa8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	695a      	ldr	r2, [r3, #20]
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002fb8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d103      	bne.n	8002fca <HAL_DMA_Abort+0x62>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d007      	beq.n	8002fda <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	681a      	ldr	r2, [r3, #0]
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f022 0208 	bic.w	r2, r2, #8
 8002fd8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	681a      	ldr	r2, [r3, #0]
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f022 0201 	bic.w	r2, r2, #1
 8002fe8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002fea:	e013      	b.n	8003014 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002fec:	f7fe fea6 	bl	8001d3c <HAL_GetTick>
 8002ff0:	4602      	mov	r2, r0
 8002ff2:	68bb      	ldr	r3, [r7, #8]
 8002ff4:	1ad3      	subs	r3, r2, r3
 8002ff6:	2b05      	cmp	r3, #5
 8002ff8:	d90c      	bls.n	8003014 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2220      	movs	r2, #32
 8002ffe:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2203      	movs	r2, #3
 8003004:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2200      	movs	r2, #0
 800300c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003010:	2303      	movs	r3, #3
 8003012:	e015      	b.n	8003040 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f003 0301 	and.w	r3, r3, #1
 800301e:	2b00      	cmp	r3, #0
 8003020:	d1e4      	bne.n	8002fec <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003026:	223f      	movs	r2, #63	; 0x3f
 8003028:	409a      	lsls	r2, r3
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2201      	movs	r2, #1
 8003032:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2200      	movs	r2, #0
 800303a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800303e:	2300      	movs	r3, #0
}
 8003040:	4618      	mov	r0, r3
 8003042:	3710      	adds	r7, #16
 8003044:	46bd      	mov	sp, r7
 8003046:	bd80      	pop	{r7, pc}

08003048 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003048:	b480      	push	{r7}
 800304a:	b083      	sub	sp, #12
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003056:	b2db      	uxtb	r3, r3
 8003058:	2b02      	cmp	r3, #2
 800305a:	d004      	beq.n	8003066 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2280      	movs	r2, #128	; 0x80
 8003060:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003062:	2301      	movs	r3, #1
 8003064:	e00c      	b.n	8003080 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2205      	movs	r2, #5
 800306a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	681a      	ldr	r2, [r3, #0]
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f022 0201 	bic.w	r2, r2, #1
 800307c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800307e:	2300      	movs	r3, #0
}
 8003080:	4618      	mov	r0, r3
 8003082:	370c      	adds	r7, #12
 8003084:	46bd      	mov	sp, r7
 8003086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308a:	4770      	bx	lr

0800308c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b086      	sub	sp, #24
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003094:	2300      	movs	r3, #0
 8003096:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003098:	4b8e      	ldr	r3, [pc, #568]	; (80032d4 <HAL_DMA_IRQHandler+0x248>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4a8e      	ldr	r2, [pc, #568]	; (80032d8 <HAL_DMA_IRQHandler+0x24c>)
 800309e:	fba2 2303 	umull	r2, r3, r2, r3
 80030a2:	0a9b      	lsrs	r3, r3, #10
 80030a4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030aa:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80030ac:	693b      	ldr	r3, [r7, #16]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030b6:	2208      	movs	r2, #8
 80030b8:	409a      	lsls	r2, r3
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	4013      	ands	r3, r2
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d01a      	beq.n	80030f8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f003 0304 	and.w	r3, r3, #4
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d013      	beq.n	80030f8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	681a      	ldr	r2, [r3, #0]
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f022 0204 	bic.w	r2, r2, #4
 80030de:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030e4:	2208      	movs	r2, #8
 80030e6:	409a      	lsls	r2, r3
 80030e8:	693b      	ldr	r3, [r7, #16]
 80030ea:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030f0:	f043 0201 	orr.w	r2, r3, #1
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030fc:	2201      	movs	r2, #1
 80030fe:	409a      	lsls	r2, r3
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	4013      	ands	r3, r2
 8003104:	2b00      	cmp	r3, #0
 8003106:	d012      	beq.n	800312e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	695b      	ldr	r3, [r3, #20]
 800310e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003112:	2b00      	cmp	r3, #0
 8003114:	d00b      	beq.n	800312e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800311a:	2201      	movs	r2, #1
 800311c:	409a      	lsls	r2, r3
 800311e:	693b      	ldr	r3, [r7, #16]
 8003120:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003126:	f043 0202 	orr.w	r2, r3, #2
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003132:	2204      	movs	r2, #4
 8003134:	409a      	lsls	r2, r3
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	4013      	ands	r3, r2
 800313a:	2b00      	cmp	r3, #0
 800313c:	d012      	beq.n	8003164 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f003 0302 	and.w	r3, r3, #2
 8003148:	2b00      	cmp	r3, #0
 800314a:	d00b      	beq.n	8003164 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003150:	2204      	movs	r2, #4
 8003152:	409a      	lsls	r2, r3
 8003154:	693b      	ldr	r3, [r7, #16]
 8003156:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800315c:	f043 0204 	orr.w	r2, r3, #4
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003168:	2210      	movs	r2, #16
 800316a:	409a      	lsls	r2, r3
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	4013      	ands	r3, r2
 8003170:	2b00      	cmp	r3, #0
 8003172:	d043      	beq.n	80031fc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f003 0308 	and.w	r3, r3, #8
 800317e:	2b00      	cmp	r3, #0
 8003180:	d03c      	beq.n	80031fc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003186:	2210      	movs	r2, #16
 8003188:	409a      	lsls	r2, r3
 800318a:	693b      	ldr	r3, [r7, #16]
 800318c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003198:	2b00      	cmp	r3, #0
 800319a:	d018      	beq.n	80031ce <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d108      	bne.n	80031bc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d024      	beq.n	80031fc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031b6:	6878      	ldr	r0, [r7, #4]
 80031b8:	4798      	blx	r3
 80031ba:	e01f      	b.n	80031fc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d01b      	beq.n	80031fc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031c8:	6878      	ldr	r0, [r7, #4]
 80031ca:	4798      	blx	r3
 80031cc:	e016      	b.n	80031fc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d107      	bne.n	80031ec <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	681a      	ldr	r2, [r3, #0]
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f022 0208 	bic.w	r2, r2, #8
 80031ea:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d003      	beq.n	80031fc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031f8:	6878      	ldr	r0, [r7, #4]
 80031fa:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003200:	2220      	movs	r2, #32
 8003202:	409a      	lsls	r2, r3
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	4013      	ands	r3, r2
 8003208:	2b00      	cmp	r3, #0
 800320a:	f000 808f 	beq.w	800332c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f003 0310 	and.w	r3, r3, #16
 8003218:	2b00      	cmp	r3, #0
 800321a:	f000 8087 	beq.w	800332c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003222:	2220      	movs	r2, #32
 8003224:	409a      	lsls	r2, r3
 8003226:	693b      	ldr	r3, [r7, #16]
 8003228:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003230:	b2db      	uxtb	r3, r3
 8003232:	2b05      	cmp	r3, #5
 8003234:	d136      	bne.n	80032a4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	681a      	ldr	r2, [r3, #0]
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f022 0216 	bic.w	r2, r2, #22
 8003244:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	695a      	ldr	r2, [r3, #20]
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003254:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800325a:	2b00      	cmp	r3, #0
 800325c:	d103      	bne.n	8003266 <HAL_DMA_IRQHandler+0x1da>
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003262:	2b00      	cmp	r3, #0
 8003264:	d007      	beq.n	8003276 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	681a      	ldr	r2, [r3, #0]
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f022 0208 	bic.w	r2, r2, #8
 8003274:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800327a:	223f      	movs	r2, #63	; 0x3f
 800327c:	409a      	lsls	r2, r3
 800327e:	693b      	ldr	r3, [r7, #16]
 8003280:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2201      	movs	r2, #1
 8003286:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	2200      	movs	r2, #0
 800328e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003296:	2b00      	cmp	r3, #0
 8003298:	d07e      	beq.n	8003398 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800329e:	6878      	ldr	r0, [r7, #4]
 80032a0:	4798      	blx	r3
        }
        return;
 80032a2:	e079      	b.n	8003398 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d01d      	beq.n	80032ee <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d10d      	bne.n	80032dc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d031      	beq.n	800332c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032cc:	6878      	ldr	r0, [r7, #4]
 80032ce:	4798      	blx	r3
 80032d0:	e02c      	b.n	800332c <HAL_DMA_IRQHandler+0x2a0>
 80032d2:	bf00      	nop
 80032d4:	20000000 	.word	0x20000000
 80032d8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d023      	beq.n	800332c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032e8:	6878      	ldr	r0, [r7, #4]
 80032ea:	4798      	blx	r3
 80032ec:	e01e      	b.n	800332c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d10f      	bne.n	800331c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	681a      	ldr	r2, [r3, #0]
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f022 0210 	bic.w	r2, r2, #16
 800330a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2201      	movs	r2, #1
 8003310:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2200      	movs	r2, #0
 8003318:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003320:	2b00      	cmp	r3, #0
 8003322:	d003      	beq.n	800332c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003328:	6878      	ldr	r0, [r7, #4]
 800332a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003330:	2b00      	cmp	r3, #0
 8003332:	d032      	beq.n	800339a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003338:	f003 0301 	and.w	r3, r3, #1
 800333c:	2b00      	cmp	r3, #0
 800333e:	d022      	beq.n	8003386 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2205      	movs	r2, #5
 8003344:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	681a      	ldr	r2, [r3, #0]
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f022 0201 	bic.w	r2, r2, #1
 8003356:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003358:	68bb      	ldr	r3, [r7, #8]
 800335a:	3301      	adds	r3, #1
 800335c:	60bb      	str	r3, [r7, #8]
 800335e:	697a      	ldr	r2, [r7, #20]
 8003360:	429a      	cmp	r2, r3
 8003362:	d307      	bcc.n	8003374 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f003 0301 	and.w	r3, r3, #1
 800336e:	2b00      	cmp	r3, #0
 8003370:	d1f2      	bne.n	8003358 <HAL_DMA_IRQHandler+0x2cc>
 8003372:	e000      	b.n	8003376 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003374:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2201      	movs	r2, #1
 800337a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2200      	movs	r2, #0
 8003382:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800338a:	2b00      	cmp	r3, #0
 800338c:	d005      	beq.n	800339a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003392:	6878      	ldr	r0, [r7, #4]
 8003394:	4798      	blx	r3
 8003396:	e000      	b.n	800339a <HAL_DMA_IRQHandler+0x30e>
        return;
 8003398:	bf00      	nop
    }
  }
}
 800339a:	3718      	adds	r7, #24
 800339c:	46bd      	mov	sp, r7
 800339e:	bd80      	pop	{r7, pc}

080033a0 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80033a0:	b480      	push	{r7}
 80033a2:	b083      	sub	sp, #12
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80033ae:	b2db      	uxtb	r3, r3
}
 80033b0:	4618      	mov	r0, r3
 80033b2:	370c      	adds	r7, #12
 80033b4:	46bd      	mov	sp, r7
 80033b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ba:	4770      	bx	lr

080033bc <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80033bc:	b480      	push	{r7}
 80033be:	b083      	sub	sp, #12
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 80033c8:	4618      	mov	r0, r3
 80033ca:	370c      	adds	r7, #12
 80033cc:	46bd      	mov	sp, r7
 80033ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d2:	4770      	bx	lr

080033d4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80033d4:	b480      	push	{r7}
 80033d6:	b085      	sub	sp, #20
 80033d8:	af00      	add	r7, sp, #0
 80033da:	60f8      	str	r0, [r7, #12]
 80033dc:	60b9      	str	r1, [r7, #8]
 80033de:	607a      	str	r2, [r7, #4]
 80033e0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	681a      	ldr	r2, [r3, #0]
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80033f0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	683a      	ldr	r2, [r7, #0]
 80033f8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	689b      	ldr	r3, [r3, #8]
 80033fe:	2b40      	cmp	r3, #64	; 0x40
 8003400:	d108      	bne.n	8003414 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	687a      	ldr	r2, [r7, #4]
 8003408:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	68ba      	ldr	r2, [r7, #8]
 8003410:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003412:	e007      	b.n	8003424 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	68ba      	ldr	r2, [r7, #8]
 800341a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	687a      	ldr	r2, [r7, #4]
 8003422:	60da      	str	r2, [r3, #12]
}
 8003424:	bf00      	nop
 8003426:	3714      	adds	r7, #20
 8003428:	46bd      	mov	sp, r7
 800342a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342e:	4770      	bx	lr

08003430 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003430:	b480      	push	{r7}
 8003432:	b085      	sub	sp, #20
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	b2db      	uxtb	r3, r3
 800343e:	3b10      	subs	r3, #16
 8003440:	4a14      	ldr	r2, [pc, #80]	; (8003494 <DMA_CalcBaseAndBitshift+0x64>)
 8003442:	fba2 2303 	umull	r2, r3, r2, r3
 8003446:	091b      	lsrs	r3, r3, #4
 8003448:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800344a:	4a13      	ldr	r2, [pc, #76]	; (8003498 <DMA_CalcBaseAndBitshift+0x68>)
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	4413      	add	r3, r2
 8003450:	781b      	ldrb	r3, [r3, #0]
 8003452:	461a      	mov	r2, r3
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	2b03      	cmp	r3, #3
 800345c:	d909      	bls.n	8003472 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003466:	f023 0303 	bic.w	r3, r3, #3
 800346a:	1d1a      	adds	r2, r3, #4
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	659a      	str	r2, [r3, #88]	; 0x58
 8003470:	e007      	b.n	8003482 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800347a:	f023 0303 	bic.w	r3, r3, #3
 800347e:	687a      	ldr	r2, [r7, #4]
 8003480:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003486:	4618      	mov	r0, r3
 8003488:	3714      	adds	r7, #20
 800348a:	46bd      	mov	sp, r7
 800348c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003490:	4770      	bx	lr
 8003492:	bf00      	nop
 8003494:	aaaaaaab 	.word	0xaaaaaaab
 8003498:	0800e204 	.word	0x0800e204

0800349c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800349c:	b480      	push	{r7}
 800349e:	b085      	sub	sp, #20
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80034a4:	2300      	movs	r3, #0
 80034a6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034ac:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	699b      	ldr	r3, [r3, #24]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d11f      	bne.n	80034f6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80034b6:	68bb      	ldr	r3, [r7, #8]
 80034b8:	2b03      	cmp	r3, #3
 80034ba:	d856      	bhi.n	800356a <DMA_CheckFifoParam+0xce>
 80034bc:	a201      	add	r2, pc, #4	; (adr r2, 80034c4 <DMA_CheckFifoParam+0x28>)
 80034be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034c2:	bf00      	nop
 80034c4:	080034d5 	.word	0x080034d5
 80034c8:	080034e7 	.word	0x080034e7
 80034cc:	080034d5 	.word	0x080034d5
 80034d0:	0800356b 	.word	0x0800356b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034d8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d046      	beq.n	800356e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80034e0:	2301      	movs	r3, #1
 80034e2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80034e4:	e043      	b.n	800356e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034ea:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80034ee:	d140      	bne.n	8003572 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80034f0:	2301      	movs	r3, #1
 80034f2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80034f4:	e03d      	b.n	8003572 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	699b      	ldr	r3, [r3, #24]
 80034fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80034fe:	d121      	bne.n	8003544 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003500:	68bb      	ldr	r3, [r7, #8]
 8003502:	2b03      	cmp	r3, #3
 8003504:	d837      	bhi.n	8003576 <DMA_CheckFifoParam+0xda>
 8003506:	a201      	add	r2, pc, #4	; (adr r2, 800350c <DMA_CheckFifoParam+0x70>)
 8003508:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800350c:	0800351d 	.word	0x0800351d
 8003510:	08003523 	.word	0x08003523
 8003514:	0800351d 	.word	0x0800351d
 8003518:	08003535 	.word	0x08003535
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800351c:	2301      	movs	r3, #1
 800351e:	73fb      	strb	r3, [r7, #15]
      break;
 8003520:	e030      	b.n	8003584 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003526:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800352a:	2b00      	cmp	r3, #0
 800352c:	d025      	beq.n	800357a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800352e:	2301      	movs	r3, #1
 8003530:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003532:	e022      	b.n	800357a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003538:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800353c:	d11f      	bne.n	800357e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800353e:	2301      	movs	r3, #1
 8003540:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003542:	e01c      	b.n	800357e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003544:	68bb      	ldr	r3, [r7, #8]
 8003546:	2b02      	cmp	r3, #2
 8003548:	d903      	bls.n	8003552 <DMA_CheckFifoParam+0xb6>
 800354a:	68bb      	ldr	r3, [r7, #8]
 800354c:	2b03      	cmp	r3, #3
 800354e:	d003      	beq.n	8003558 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003550:	e018      	b.n	8003584 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003552:	2301      	movs	r3, #1
 8003554:	73fb      	strb	r3, [r7, #15]
      break;
 8003556:	e015      	b.n	8003584 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800355c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003560:	2b00      	cmp	r3, #0
 8003562:	d00e      	beq.n	8003582 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003564:	2301      	movs	r3, #1
 8003566:	73fb      	strb	r3, [r7, #15]
      break;
 8003568:	e00b      	b.n	8003582 <DMA_CheckFifoParam+0xe6>
      break;
 800356a:	bf00      	nop
 800356c:	e00a      	b.n	8003584 <DMA_CheckFifoParam+0xe8>
      break;
 800356e:	bf00      	nop
 8003570:	e008      	b.n	8003584 <DMA_CheckFifoParam+0xe8>
      break;
 8003572:	bf00      	nop
 8003574:	e006      	b.n	8003584 <DMA_CheckFifoParam+0xe8>
      break;
 8003576:	bf00      	nop
 8003578:	e004      	b.n	8003584 <DMA_CheckFifoParam+0xe8>
      break;
 800357a:	bf00      	nop
 800357c:	e002      	b.n	8003584 <DMA_CheckFifoParam+0xe8>
      break;   
 800357e:	bf00      	nop
 8003580:	e000      	b.n	8003584 <DMA_CheckFifoParam+0xe8>
      break;
 8003582:	bf00      	nop
    }
  } 
  
  return status; 
 8003584:	7bfb      	ldrb	r3, [r7, #15]
}
 8003586:	4618      	mov	r0, r3
 8003588:	3714      	adds	r7, #20
 800358a:	46bd      	mov	sp, r7
 800358c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003590:	4770      	bx	lr
 8003592:	bf00      	nop

08003594 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003594:	b480      	push	{r7}
 8003596:	b089      	sub	sp, #36	; 0x24
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
 800359c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800359e:	2300      	movs	r3, #0
 80035a0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80035a2:	2300      	movs	r3, #0
 80035a4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80035a6:	2300      	movs	r3, #0
 80035a8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80035aa:	2300      	movs	r3, #0
 80035ac:	61fb      	str	r3, [r7, #28]
 80035ae:	e16b      	b.n	8003888 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80035b0:	2201      	movs	r2, #1
 80035b2:	69fb      	ldr	r3, [r7, #28]
 80035b4:	fa02 f303 	lsl.w	r3, r2, r3
 80035b8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	697a      	ldr	r2, [r7, #20]
 80035c0:	4013      	ands	r3, r2
 80035c2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80035c4:	693a      	ldr	r2, [r7, #16]
 80035c6:	697b      	ldr	r3, [r7, #20]
 80035c8:	429a      	cmp	r2, r3
 80035ca:	f040 815a 	bne.w	8003882 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	685b      	ldr	r3, [r3, #4]
 80035d2:	f003 0303 	and.w	r3, r3, #3
 80035d6:	2b01      	cmp	r3, #1
 80035d8:	d005      	beq.n	80035e6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	685b      	ldr	r3, [r3, #4]
 80035de:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80035e2:	2b02      	cmp	r3, #2
 80035e4:	d130      	bne.n	8003648 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	689b      	ldr	r3, [r3, #8]
 80035ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80035ec:	69fb      	ldr	r3, [r7, #28]
 80035ee:	005b      	lsls	r3, r3, #1
 80035f0:	2203      	movs	r2, #3
 80035f2:	fa02 f303 	lsl.w	r3, r2, r3
 80035f6:	43db      	mvns	r3, r3
 80035f8:	69ba      	ldr	r2, [r7, #24]
 80035fa:	4013      	ands	r3, r2
 80035fc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	68da      	ldr	r2, [r3, #12]
 8003602:	69fb      	ldr	r3, [r7, #28]
 8003604:	005b      	lsls	r3, r3, #1
 8003606:	fa02 f303 	lsl.w	r3, r2, r3
 800360a:	69ba      	ldr	r2, [r7, #24]
 800360c:	4313      	orrs	r3, r2
 800360e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	69ba      	ldr	r2, [r7, #24]
 8003614:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	685b      	ldr	r3, [r3, #4]
 800361a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800361c:	2201      	movs	r2, #1
 800361e:	69fb      	ldr	r3, [r7, #28]
 8003620:	fa02 f303 	lsl.w	r3, r2, r3
 8003624:	43db      	mvns	r3, r3
 8003626:	69ba      	ldr	r2, [r7, #24]
 8003628:	4013      	ands	r3, r2
 800362a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	685b      	ldr	r3, [r3, #4]
 8003630:	091b      	lsrs	r3, r3, #4
 8003632:	f003 0201 	and.w	r2, r3, #1
 8003636:	69fb      	ldr	r3, [r7, #28]
 8003638:	fa02 f303 	lsl.w	r3, r2, r3
 800363c:	69ba      	ldr	r2, [r7, #24]
 800363e:	4313      	orrs	r3, r2
 8003640:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	69ba      	ldr	r2, [r7, #24]
 8003646:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	685b      	ldr	r3, [r3, #4]
 800364c:	f003 0303 	and.w	r3, r3, #3
 8003650:	2b03      	cmp	r3, #3
 8003652:	d017      	beq.n	8003684 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	68db      	ldr	r3, [r3, #12]
 8003658:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800365a:	69fb      	ldr	r3, [r7, #28]
 800365c:	005b      	lsls	r3, r3, #1
 800365e:	2203      	movs	r2, #3
 8003660:	fa02 f303 	lsl.w	r3, r2, r3
 8003664:	43db      	mvns	r3, r3
 8003666:	69ba      	ldr	r2, [r7, #24]
 8003668:	4013      	ands	r3, r2
 800366a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	689a      	ldr	r2, [r3, #8]
 8003670:	69fb      	ldr	r3, [r7, #28]
 8003672:	005b      	lsls	r3, r3, #1
 8003674:	fa02 f303 	lsl.w	r3, r2, r3
 8003678:	69ba      	ldr	r2, [r7, #24]
 800367a:	4313      	orrs	r3, r2
 800367c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	69ba      	ldr	r2, [r7, #24]
 8003682:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	685b      	ldr	r3, [r3, #4]
 8003688:	f003 0303 	and.w	r3, r3, #3
 800368c:	2b02      	cmp	r3, #2
 800368e:	d123      	bne.n	80036d8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003690:	69fb      	ldr	r3, [r7, #28]
 8003692:	08da      	lsrs	r2, r3, #3
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	3208      	adds	r2, #8
 8003698:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800369c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800369e:	69fb      	ldr	r3, [r7, #28]
 80036a0:	f003 0307 	and.w	r3, r3, #7
 80036a4:	009b      	lsls	r3, r3, #2
 80036a6:	220f      	movs	r2, #15
 80036a8:	fa02 f303 	lsl.w	r3, r2, r3
 80036ac:	43db      	mvns	r3, r3
 80036ae:	69ba      	ldr	r2, [r7, #24]
 80036b0:	4013      	ands	r3, r2
 80036b2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	691a      	ldr	r2, [r3, #16]
 80036b8:	69fb      	ldr	r3, [r7, #28]
 80036ba:	f003 0307 	and.w	r3, r3, #7
 80036be:	009b      	lsls	r3, r3, #2
 80036c0:	fa02 f303 	lsl.w	r3, r2, r3
 80036c4:	69ba      	ldr	r2, [r7, #24]
 80036c6:	4313      	orrs	r3, r2
 80036c8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80036ca:	69fb      	ldr	r3, [r7, #28]
 80036cc:	08da      	lsrs	r2, r3, #3
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	3208      	adds	r2, #8
 80036d2:	69b9      	ldr	r1, [r7, #24]
 80036d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80036de:	69fb      	ldr	r3, [r7, #28]
 80036e0:	005b      	lsls	r3, r3, #1
 80036e2:	2203      	movs	r2, #3
 80036e4:	fa02 f303 	lsl.w	r3, r2, r3
 80036e8:	43db      	mvns	r3, r3
 80036ea:	69ba      	ldr	r2, [r7, #24]
 80036ec:	4013      	ands	r3, r2
 80036ee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	685b      	ldr	r3, [r3, #4]
 80036f4:	f003 0203 	and.w	r2, r3, #3
 80036f8:	69fb      	ldr	r3, [r7, #28]
 80036fa:	005b      	lsls	r3, r3, #1
 80036fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003700:	69ba      	ldr	r2, [r7, #24]
 8003702:	4313      	orrs	r3, r2
 8003704:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	69ba      	ldr	r2, [r7, #24]
 800370a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	685b      	ldr	r3, [r3, #4]
 8003710:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003714:	2b00      	cmp	r3, #0
 8003716:	f000 80b4 	beq.w	8003882 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800371a:	2300      	movs	r3, #0
 800371c:	60fb      	str	r3, [r7, #12]
 800371e:	4b60      	ldr	r3, [pc, #384]	; (80038a0 <HAL_GPIO_Init+0x30c>)
 8003720:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003722:	4a5f      	ldr	r2, [pc, #380]	; (80038a0 <HAL_GPIO_Init+0x30c>)
 8003724:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003728:	6453      	str	r3, [r2, #68]	; 0x44
 800372a:	4b5d      	ldr	r3, [pc, #372]	; (80038a0 <HAL_GPIO_Init+0x30c>)
 800372c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800372e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003732:	60fb      	str	r3, [r7, #12]
 8003734:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003736:	4a5b      	ldr	r2, [pc, #364]	; (80038a4 <HAL_GPIO_Init+0x310>)
 8003738:	69fb      	ldr	r3, [r7, #28]
 800373a:	089b      	lsrs	r3, r3, #2
 800373c:	3302      	adds	r3, #2
 800373e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003742:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003744:	69fb      	ldr	r3, [r7, #28]
 8003746:	f003 0303 	and.w	r3, r3, #3
 800374a:	009b      	lsls	r3, r3, #2
 800374c:	220f      	movs	r2, #15
 800374e:	fa02 f303 	lsl.w	r3, r2, r3
 8003752:	43db      	mvns	r3, r3
 8003754:	69ba      	ldr	r2, [r7, #24]
 8003756:	4013      	ands	r3, r2
 8003758:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	4a52      	ldr	r2, [pc, #328]	; (80038a8 <HAL_GPIO_Init+0x314>)
 800375e:	4293      	cmp	r3, r2
 8003760:	d02b      	beq.n	80037ba <HAL_GPIO_Init+0x226>
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	4a51      	ldr	r2, [pc, #324]	; (80038ac <HAL_GPIO_Init+0x318>)
 8003766:	4293      	cmp	r3, r2
 8003768:	d025      	beq.n	80037b6 <HAL_GPIO_Init+0x222>
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	4a50      	ldr	r2, [pc, #320]	; (80038b0 <HAL_GPIO_Init+0x31c>)
 800376e:	4293      	cmp	r3, r2
 8003770:	d01f      	beq.n	80037b2 <HAL_GPIO_Init+0x21e>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	4a4f      	ldr	r2, [pc, #316]	; (80038b4 <HAL_GPIO_Init+0x320>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d019      	beq.n	80037ae <HAL_GPIO_Init+0x21a>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	4a4e      	ldr	r2, [pc, #312]	; (80038b8 <HAL_GPIO_Init+0x324>)
 800377e:	4293      	cmp	r3, r2
 8003780:	d013      	beq.n	80037aa <HAL_GPIO_Init+0x216>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	4a4d      	ldr	r2, [pc, #308]	; (80038bc <HAL_GPIO_Init+0x328>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d00d      	beq.n	80037a6 <HAL_GPIO_Init+0x212>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	4a4c      	ldr	r2, [pc, #304]	; (80038c0 <HAL_GPIO_Init+0x32c>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d007      	beq.n	80037a2 <HAL_GPIO_Init+0x20e>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	4a4b      	ldr	r2, [pc, #300]	; (80038c4 <HAL_GPIO_Init+0x330>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d101      	bne.n	800379e <HAL_GPIO_Init+0x20a>
 800379a:	2307      	movs	r3, #7
 800379c:	e00e      	b.n	80037bc <HAL_GPIO_Init+0x228>
 800379e:	2308      	movs	r3, #8
 80037a0:	e00c      	b.n	80037bc <HAL_GPIO_Init+0x228>
 80037a2:	2306      	movs	r3, #6
 80037a4:	e00a      	b.n	80037bc <HAL_GPIO_Init+0x228>
 80037a6:	2305      	movs	r3, #5
 80037a8:	e008      	b.n	80037bc <HAL_GPIO_Init+0x228>
 80037aa:	2304      	movs	r3, #4
 80037ac:	e006      	b.n	80037bc <HAL_GPIO_Init+0x228>
 80037ae:	2303      	movs	r3, #3
 80037b0:	e004      	b.n	80037bc <HAL_GPIO_Init+0x228>
 80037b2:	2302      	movs	r3, #2
 80037b4:	e002      	b.n	80037bc <HAL_GPIO_Init+0x228>
 80037b6:	2301      	movs	r3, #1
 80037b8:	e000      	b.n	80037bc <HAL_GPIO_Init+0x228>
 80037ba:	2300      	movs	r3, #0
 80037bc:	69fa      	ldr	r2, [r7, #28]
 80037be:	f002 0203 	and.w	r2, r2, #3
 80037c2:	0092      	lsls	r2, r2, #2
 80037c4:	4093      	lsls	r3, r2
 80037c6:	69ba      	ldr	r2, [r7, #24]
 80037c8:	4313      	orrs	r3, r2
 80037ca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80037cc:	4935      	ldr	r1, [pc, #212]	; (80038a4 <HAL_GPIO_Init+0x310>)
 80037ce:	69fb      	ldr	r3, [r7, #28]
 80037d0:	089b      	lsrs	r3, r3, #2
 80037d2:	3302      	adds	r3, #2
 80037d4:	69ba      	ldr	r2, [r7, #24]
 80037d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80037da:	4b3b      	ldr	r3, [pc, #236]	; (80038c8 <HAL_GPIO_Init+0x334>)
 80037dc:	689b      	ldr	r3, [r3, #8]
 80037de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037e0:	693b      	ldr	r3, [r7, #16]
 80037e2:	43db      	mvns	r3, r3
 80037e4:	69ba      	ldr	r2, [r7, #24]
 80037e6:	4013      	ands	r3, r2
 80037e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	685b      	ldr	r3, [r3, #4]
 80037ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d003      	beq.n	80037fe <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80037f6:	69ba      	ldr	r2, [r7, #24]
 80037f8:	693b      	ldr	r3, [r7, #16]
 80037fa:	4313      	orrs	r3, r2
 80037fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80037fe:	4a32      	ldr	r2, [pc, #200]	; (80038c8 <HAL_GPIO_Init+0x334>)
 8003800:	69bb      	ldr	r3, [r7, #24]
 8003802:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003804:	4b30      	ldr	r3, [pc, #192]	; (80038c8 <HAL_GPIO_Init+0x334>)
 8003806:	68db      	ldr	r3, [r3, #12]
 8003808:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800380a:	693b      	ldr	r3, [r7, #16]
 800380c:	43db      	mvns	r3, r3
 800380e:	69ba      	ldr	r2, [r7, #24]
 8003810:	4013      	ands	r3, r2
 8003812:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	685b      	ldr	r3, [r3, #4]
 8003818:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800381c:	2b00      	cmp	r3, #0
 800381e:	d003      	beq.n	8003828 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003820:	69ba      	ldr	r2, [r7, #24]
 8003822:	693b      	ldr	r3, [r7, #16]
 8003824:	4313      	orrs	r3, r2
 8003826:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003828:	4a27      	ldr	r2, [pc, #156]	; (80038c8 <HAL_GPIO_Init+0x334>)
 800382a:	69bb      	ldr	r3, [r7, #24]
 800382c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800382e:	4b26      	ldr	r3, [pc, #152]	; (80038c8 <HAL_GPIO_Init+0x334>)
 8003830:	685b      	ldr	r3, [r3, #4]
 8003832:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003834:	693b      	ldr	r3, [r7, #16]
 8003836:	43db      	mvns	r3, r3
 8003838:	69ba      	ldr	r2, [r7, #24]
 800383a:	4013      	ands	r3, r2
 800383c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	685b      	ldr	r3, [r3, #4]
 8003842:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003846:	2b00      	cmp	r3, #0
 8003848:	d003      	beq.n	8003852 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800384a:	69ba      	ldr	r2, [r7, #24]
 800384c:	693b      	ldr	r3, [r7, #16]
 800384e:	4313      	orrs	r3, r2
 8003850:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003852:	4a1d      	ldr	r2, [pc, #116]	; (80038c8 <HAL_GPIO_Init+0x334>)
 8003854:	69bb      	ldr	r3, [r7, #24]
 8003856:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003858:	4b1b      	ldr	r3, [pc, #108]	; (80038c8 <HAL_GPIO_Init+0x334>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800385e:	693b      	ldr	r3, [r7, #16]
 8003860:	43db      	mvns	r3, r3
 8003862:	69ba      	ldr	r2, [r7, #24]
 8003864:	4013      	ands	r3, r2
 8003866:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	685b      	ldr	r3, [r3, #4]
 800386c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003870:	2b00      	cmp	r3, #0
 8003872:	d003      	beq.n	800387c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003874:	69ba      	ldr	r2, [r7, #24]
 8003876:	693b      	ldr	r3, [r7, #16]
 8003878:	4313      	orrs	r3, r2
 800387a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800387c:	4a12      	ldr	r2, [pc, #72]	; (80038c8 <HAL_GPIO_Init+0x334>)
 800387e:	69bb      	ldr	r3, [r7, #24]
 8003880:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003882:	69fb      	ldr	r3, [r7, #28]
 8003884:	3301      	adds	r3, #1
 8003886:	61fb      	str	r3, [r7, #28]
 8003888:	69fb      	ldr	r3, [r7, #28]
 800388a:	2b0f      	cmp	r3, #15
 800388c:	f67f ae90 	bls.w	80035b0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003890:	bf00      	nop
 8003892:	bf00      	nop
 8003894:	3724      	adds	r7, #36	; 0x24
 8003896:	46bd      	mov	sp, r7
 8003898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389c:	4770      	bx	lr
 800389e:	bf00      	nop
 80038a0:	40023800 	.word	0x40023800
 80038a4:	40013800 	.word	0x40013800
 80038a8:	40020000 	.word	0x40020000
 80038ac:	40020400 	.word	0x40020400
 80038b0:	40020800 	.word	0x40020800
 80038b4:	40020c00 	.word	0x40020c00
 80038b8:	40021000 	.word	0x40021000
 80038bc:	40021400 	.word	0x40021400
 80038c0:	40021800 	.word	0x40021800
 80038c4:	40021c00 	.word	0x40021c00
 80038c8:	40013c00 	.word	0x40013c00

080038cc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80038cc:	b480      	push	{r7}
 80038ce:	b085      	sub	sp, #20
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
 80038d4:	460b      	mov	r3, r1
 80038d6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	691a      	ldr	r2, [r3, #16]
 80038dc:	887b      	ldrh	r3, [r7, #2]
 80038de:	4013      	ands	r3, r2
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d002      	beq.n	80038ea <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80038e4:	2301      	movs	r3, #1
 80038e6:	73fb      	strb	r3, [r7, #15]
 80038e8:	e001      	b.n	80038ee <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80038ea:	2300      	movs	r3, #0
 80038ec:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80038ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80038f0:	4618      	mov	r0, r3
 80038f2:	3714      	adds	r7, #20
 80038f4:	46bd      	mov	sp, r7
 80038f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fa:	4770      	bx	lr

080038fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80038fc:	b480      	push	{r7}
 80038fe:	b083      	sub	sp, #12
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
 8003904:	460b      	mov	r3, r1
 8003906:	807b      	strh	r3, [r7, #2]
 8003908:	4613      	mov	r3, r2
 800390a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800390c:	787b      	ldrb	r3, [r7, #1]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d003      	beq.n	800391a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003912:	887a      	ldrh	r2, [r7, #2]
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003918:	e003      	b.n	8003922 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800391a:	887b      	ldrh	r3, [r7, #2]
 800391c:	041a      	lsls	r2, r3, #16
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	619a      	str	r2, [r3, #24]
}
 8003922:	bf00      	nop
 8003924:	370c      	adds	r7, #12
 8003926:	46bd      	mov	sp, r7
 8003928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392c:	4770      	bx	lr
	...

08003930 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b084      	sub	sp, #16
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d101      	bne.n	8003942 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800393e:	2301      	movs	r3, #1
 8003940:	e12b      	b.n	8003b9a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003948:	b2db      	uxtb	r3, r3
 800394a:	2b00      	cmp	r3, #0
 800394c:	d106      	bne.n	800395c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2200      	movs	r2, #0
 8003952:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003956:	6878      	ldr	r0, [r7, #4]
 8003958:	f7fd f944 	bl	8000be4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2224      	movs	r2, #36	; 0x24
 8003960:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	681a      	ldr	r2, [r3, #0]
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f022 0201 	bic.w	r2, r2, #1
 8003972:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	681a      	ldr	r2, [r3, #0]
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003982:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	681a      	ldr	r2, [r3, #0]
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003992:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003994:	f002 f952 	bl	8005c3c <HAL_RCC_GetPCLK1Freq>
 8003998:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	685b      	ldr	r3, [r3, #4]
 800399e:	4a81      	ldr	r2, [pc, #516]	; (8003ba4 <HAL_I2C_Init+0x274>)
 80039a0:	4293      	cmp	r3, r2
 80039a2:	d807      	bhi.n	80039b4 <HAL_I2C_Init+0x84>
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	4a80      	ldr	r2, [pc, #512]	; (8003ba8 <HAL_I2C_Init+0x278>)
 80039a8:	4293      	cmp	r3, r2
 80039aa:	bf94      	ite	ls
 80039ac:	2301      	movls	r3, #1
 80039ae:	2300      	movhi	r3, #0
 80039b0:	b2db      	uxtb	r3, r3
 80039b2:	e006      	b.n	80039c2 <HAL_I2C_Init+0x92>
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	4a7d      	ldr	r2, [pc, #500]	; (8003bac <HAL_I2C_Init+0x27c>)
 80039b8:	4293      	cmp	r3, r2
 80039ba:	bf94      	ite	ls
 80039bc:	2301      	movls	r3, #1
 80039be:	2300      	movhi	r3, #0
 80039c0:	b2db      	uxtb	r3, r3
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d001      	beq.n	80039ca <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80039c6:	2301      	movs	r3, #1
 80039c8:	e0e7      	b.n	8003b9a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	4a78      	ldr	r2, [pc, #480]	; (8003bb0 <HAL_I2C_Init+0x280>)
 80039ce:	fba2 2303 	umull	r2, r3, r2, r3
 80039d2:	0c9b      	lsrs	r3, r3, #18
 80039d4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	685b      	ldr	r3, [r3, #4]
 80039dc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	68ba      	ldr	r2, [r7, #8]
 80039e6:	430a      	orrs	r2, r1
 80039e8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	6a1b      	ldr	r3, [r3, #32]
 80039f0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	685b      	ldr	r3, [r3, #4]
 80039f8:	4a6a      	ldr	r2, [pc, #424]	; (8003ba4 <HAL_I2C_Init+0x274>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d802      	bhi.n	8003a04 <HAL_I2C_Init+0xd4>
 80039fe:	68bb      	ldr	r3, [r7, #8]
 8003a00:	3301      	adds	r3, #1
 8003a02:	e009      	b.n	8003a18 <HAL_I2C_Init+0xe8>
 8003a04:	68bb      	ldr	r3, [r7, #8]
 8003a06:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003a0a:	fb02 f303 	mul.w	r3, r2, r3
 8003a0e:	4a69      	ldr	r2, [pc, #420]	; (8003bb4 <HAL_I2C_Init+0x284>)
 8003a10:	fba2 2303 	umull	r2, r3, r2, r3
 8003a14:	099b      	lsrs	r3, r3, #6
 8003a16:	3301      	adds	r3, #1
 8003a18:	687a      	ldr	r2, [r7, #4]
 8003a1a:	6812      	ldr	r2, [r2, #0]
 8003a1c:	430b      	orrs	r3, r1
 8003a1e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	69db      	ldr	r3, [r3, #28]
 8003a26:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003a2a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	685b      	ldr	r3, [r3, #4]
 8003a32:	495c      	ldr	r1, [pc, #368]	; (8003ba4 <HAL_I2C_Init+0x274>)
 8003a34:	428b      	cmp	r3, r1
 8003a36:	d819      	bhi.n	8003a6c <HAL_I2C_Init+0x13c>
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	1e59      	subs	r1, r3, #1
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	685b      	ldr	r3, [r3, #4]
 8003a40:	005b      	lsls	r3, r3, #1
 8003a42:	fbb1 f3f3 	udiv	r3, r1, r3
 8003a46:	1c59      	adds	r1, r3, #1
 8003a48:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003a4c:	400b      	ands	r3, r1
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d00a      	beq.n	8003a68 <HAL_I2C_Init+0x138>
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	1e59      	subs	r1, r3, #1
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	685b      	ldr	r3, [r3, #4]
 8003a5a:	005b      	lsls	r3, r3, #1
 8003a5c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003a60:	3301      	adds	r3, #1
 8003a62:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a66:	e051      	b.n	8003b0c <HAL_I2C_Init+0x1dc>
 8003a68:	2304      	movs	r3, #4
 8003a6a:	e04f      	b.n	8003b0c <HAL_I2C_Init+0x1dc>
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	689b      	ldr	r3, [r3, #8]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d111      	bne.n	8003a98 <HAL_I2C_Init+0x168>
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	1e58      	subs	r0, r3, #1
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6859      	ldr	r1, [r3, #4]
 8003a7c:	460b      	mov	r3, r1
 8003a7e:	005b      	lsls	r3, r3, #1
 8003a80:	440b      	add	r3, r1
 8003a82:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a86:	3301      	adds	r3, #1
 8003a88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	bf0c      	ite	eq
 8003a90:	2301      	moveq	r3, #1
 8003a92:	2300      	movne	r3, #0
 8003a94:	b2db      	uxtb	r3, r3
 8003a96:	e012      	b.n	8003abe <HAL_I2C_Init+0x18e>
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	1e58      	subs	r0, r3, #1
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6859      	ldr	r1, [r3, #4]
 8003aa0:	460b      	mov	r3, r1
 8003aa2:	009b      	lsls	r3, r3, #2
 8003aa4:	440b      	add	r3, r1
 8003aa6:	0099      	lsls	r1, r3, #2
 8003aa8:	440b      	add	r3, r1
 8003aaa:	fbb0 f3f3 	udiv	r3, r0, r3
 8003aae:	3301      	adds	r3, #1
 8003ab0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	bf0c      	ite	eq
 8003ab8:	2301      	moveq	r3, #1
 8003aba:	2300      	movne	r3, #0
 8003abc:	b2db      	uxtb	r3, r3
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d001      	beq.n	8003ac6 <HAL_I2C_Init+0x196>
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	e022      	b.n	8003b0c <HAL_I2C_Init+0x1dc>
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	689b      	ldr	r3, [r3, #8]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d10e      	bne.n	8003aec <HAL_I2C_Init+0x1bc>
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	1e58      	subs	r0, r3, #1
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6859      	ldr	r1, [r3, #4]
 8003ad6:	460b      	mov	r3, r1
 8003ad8:	005b      	lsls	r3, r3, #1
 8003ada:	440b      	add	r3, r1
 8003adc:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ae0:	3301      	adds	r3, #1
 8003ae2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ae6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003aea:	e00f      	b.n	8003b0c <HAL_I2C_Init+0x1dc>
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	1e58      	subs	r0, r3, #1
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6859      	ldr	r1, [r3, #4]
 8003af4:	460b      	mov	r3, r1
 8003af6:	009b      	lsls	r3, r3, #2
 8003af8:	440b      	add	r3, r1
 8003afa:	0099      	lsls	r1, r3, #2
 8003afc:	440b      	add	r3, r1
 8003afe:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b02:	3301      	adds	r3, #1
 8003b04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b08:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003b0c:	6879      	ldr	r1, [r7, #4]
 8003b0e:	6809      	ldr	r1, [r1, #0]
 8003b10:	4313      	orrs	r3, r2
 8003b12:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	69da      	ldr	r2, [r3, #28]
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6a1b      	ldr	r3, [r3, #32]
 8003b26:	431a      	orrs	r2, r3
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	430a      	orrs	r2, r1
 8003b2e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	689b      	ldr	r3, [r3, #8]
 8003b36:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003b3a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003b3e:	687a      	ldr	r2, [r7, #4]
 8003b40:	6911      	ldr	r1, [r2, #16]
 8003b42:	687a      	ldr	r2, [r7, #4]
 8003b44:	68d2      	ldr	r2, [r2, #12]
 8003b46:	4311      	orrs	r1, r2
 8003b48:	687a      	ldr	r2, [r7, #4]
 8003b4a:	6812      	ldr	r2, [r2, #0]
 8003b4c:	430b      	orrs	r3, r1
 8003b4e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	68db      	ldr	r3, [r3, #12]
 8003b56:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	695a      	ldr	r2, [r3, #20]
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	699b      	ldr	r3, [r3, #24]
 8003b62:	431a      	orrs	r2, r3
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	430a      	orrs	r2, r1
 8003b6a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	681a      	ldr	r2, [r3, #0]
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f042 0201 	orr.w	r2, r2, #1
 8003b7a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2200      	movs	r2, #0
 8003b80:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2220      	movs	r2, #32
 8003b86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2200      	movs	r2, #0
 8003b94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003b98:	2300      	movs	r3, #0
}
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	3710      	adds	r7, #16
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	bd80      	pop	{r7, pc}
 8003ba2:	bf00      	nop
 8003ba4:	000186a0 	.word	0x000186a0
 8003ba8:	001e847f 	.word	0x001e847f
 8003bac:	003d08ff 	.word	0x003d08ff
 8003bb0:	431bde83 	.word	0x431bde83
 8003bb4:	10624dd3 	.word	0x10624dd3

08003bb8 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b088      	sub	sp, #32
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	685b      	ldr	r3, [r3, #4]
 8003bca:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bd0:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003bd8:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003be0:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003be2:	7bfb      	ldrb	r3, [r7, #15]
 8003be4:	2b10      	cmp	r3, #16
 8003be6:	d003      	beq.n	8003bf0 <HAL_I2C_EV_IRQHandler+0x38>
 8003be8:	7bfb      	ldrb	r3, [r7, #15]
 8003bea:	2b40      	cmp	r3, #64	; 0x40
 8003bec:	f040 80c1 	bne.w	8003d72 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	699b      	ldr	r3, [r3, #24]
 8003bf6:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	695b      	ldr	r3, [r3, #20]
 8003bfe:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8003c00:	69fb      	ldr	r3, [r7, #28]
 8003c02:	f003 0301 	and.w	r3, r3, #1
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d10d      	bne.n	8003c26 <HAL_I2C_EV_IRQHandler+0x6e>
 8003c0a:	693b      	ldr	r3, [r7, #16]
 8003c0c:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8003c10:	d003      	beq.n	8003c1a <HAL_I2C_EV_IRQHandler+0x62>
 8003c12:	693b      	ldr	r3, [r7, #16]
 8003c14:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8003c18:	d101      	bne.n	8003c1e <HAL_I2C_EV_IRQHandler+0x66>
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	e000      	b.n	8003c20 <HAL_I2C_EV_IRQHandler+0x68>
 8003c1e:	2300      	movs	r3, #0
 8003c20:	2b01      	cmp	r3, #1
 8003c22:	f000 8132 	beq.w	8003e8a <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003c26:	69fb      	ldr	r3, [r7, #28]
 8003c28:	f003 0301 	and.w	r3, r3, #1
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d00c      	beq.n	8003c4a <HAL_I2C_EV_IRQHandler+0x92>
 8003c30:	697b      	ldr	r3, [r7, #20]
 8003c32:	0a5b      	lsrs	r3, r3, #9
 8003c34:	f003 0301 	and.w	r3, r3, #1
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d006      	beq.n	8003c4a <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8003c3c:	6878      	ldr	r0, [r7, #4]
 8003c3e:	f001 fb65 	bl	800530c <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8003c42:	6878      	ldr	r0, [r7, #4]
 8003c44:	f000 fcdc 	bl	8004600 <I2C_Master_SB>
 8003c48:	e092      	b.n	8003d70 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003c4a:	69fb      	ldr	r3, [r7, #28]
 8003c4c:	08db      	lsrs	r3, r3, #3
 8003c4e:	f003 0301 	and.w	r3, r3, #1
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d009      	beq.n	8003c6a <HAL_I2C_EV_IRQHandler+0xb2>
 8003c56:	697b      	ldr	r3, [r7, #20]
 8003c58:	0a5b      	lsrs	r3, r3, #9
 8003c5a:	f003 0301 	and.w	r3, r3, #1
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d003      	beq.n	8003c6a <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8003c62:	6878      	ldr	r0, [r7, #4]
 8003c64:	f000 fd52 	bl	800470c <I2C_Master_ADD10>
 8003c68:	e082      	b.n	8003d70 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003c6a:	69fb      	ldr	r3, [r7, #28]
 8003c6c:	085b      	lsrs	r3, r3, #1
 8003c6e:	f003 0301 	and.w	r3, r3, #1
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d009      	beq.n	8003c8a <HAL_I2C_EV_IRQHandler+0xd2>
 8003c76:	697b      	ldr	r3, [r7, #20]
 8003c78:	0a5b      	lsrs	r3, r3, #9
 8003c7a:	f003 0301 	and.w	r3, r3, #1
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d003      	beq.n	8003c8a <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8003c82:	6878      	ldr	r0, [r7, #4]
 8003c84:	f000 fd6c 	bl	8004760 <I2C_Master_ADDR>
 8003c88:	e072      	b.n	8003d70 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8003c8a:	69bb      	ldr	r3, [r7, #24]
 8003c8c:	089b      	lsrs	r3, r3, #2
 8003c8e:	f003 0301 	and.w	r3, r3, #1
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d03b      	beq.n	8003d0e <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	685b      	ldr	r3, [r3, #4]
 8003c9c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ca0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ca4:	f000 80f3 	beq.w	8003e8e <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003ca8:	69fb      	ldr	r3, [r7, #28]
 8003caa:	09db      	lsrs	r3, r3, #7
 8003cac:	f003 0301 	and.w	r3, r3, #1
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d00f      	beq.n	8003cd4 <HAL_I2C_EV_IRQHandler+0x11c>
 8003cb4:	697b      	ldr	r3, [r7, #20]
 8003cb6:	0a9b      	lsrs	r3, r3, #10
 8003cb8:	f003 0301 	and.w	r3, r3, #1
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d009      	beq.n	8003cd4 <HAL_I2C_EV_IRQHandler+0x11c>
 8003cc0:	69fb      	ldr	r3, [r7, #28]
 8003cc2:	089b      	lsrs	r3, r3, #2
 8003cc4:	f003 0301 	and.w	r3, r3, #1
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d103      	bne.n	8003cd4 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8003ccc:	6878      	ldr	r0, [r7, #4]
 8003cce:	f000 f94c 	bl	8003f6a <I2C_MasterTransmit_TXE>
 8003cd2:	e04d      	b.n	8003d70 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003cd4:	69fb      	ldr	r3, [r7, #28]
 8003cd6:	089b      	lsrs	r3, r3, #2
 8003cd8:	f003 0301 	and.w	r3, r3, #1
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	f000 80d6 	beq.w	8003e8e <HAL_I2C_EV_IRQHandler+0x2d6>
 8003ce2:	697b      	ldr	r3, [r7, #20]
 8003ce4:	0a5b      	lsrs	r3, r3, #9
 8003ce6:	f003 0301 	and.w	r3, r3, #1
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	f000 80cf 	beq.w	8003e8e <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003cf0:	7bbb      	ldrb	r3, [r7, #14]
 8003cf2:	2b21      	cmp	r3, #33	; 0x21
 8003cf4:	d103      	bne.n	8003cfe <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8003cf6:	6878      	ldr	r0, [r7, #4]
 8003cf8:	f000 f9d3 	bl	80040a2 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003cfc:	e0c7      	b.n	8003e8e <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8003cfe:	7bfb      	ldrb	r3, [r7, #15]
 8003d00:	2b40      	cmp	r3, #64	; 0x40
 8003d02:	f040 80c4 	bne.w	8003e8e <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003d06:	6878      	ldr	r0, [r7, #4]
 8003d08:	f000 fa41 	bl	800418e <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003d0c:	e0bf      	b.n	8003e8e <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	685b      	ldr	r3, [r3, #4]
 8003d14:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d18:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d1c:	f000 80b7 	beq.w	8003e8e <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003d20:	69fb      	ldr	r3, [r7, #28]
 8003d22:	099b      	lsrs	r3, r3, #6
 8003d24:	f003 0301 	and.w	r3, r3, #1
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d00f      	beq.n	8003d4c <HAL_I2C_EV_IRQHandler+0x194>
 8003d2c:	697b      	ldr	r3, [r7, #20]
 8003d2e:	0a9b      	lsrs	r3, r3, #10
 8003d30:	f003 0301 	and.w	r3, r3, #1
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d009      	beq.n	8003d4c <HAL_I2C_EV_IRQHandler+0x194>
 8003d38:	69fb      	ldr	r3, [r7, #28]
 8003d3a:	089b      	lsrs	r3, r3, #2
 8003d3c:	f003 0301 	and.w	r3, r3, #1
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d103      	bne.n	8003d4c <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8003d44:	6878      	ldr	r0, [r7, #4]
 8003d46:	f000 fab6 	bl	80042b6 <I2C_MasterReceive_RXNE>
 8003d4a:	e011      	b.n	8003d70 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003d4c:	69fb      	ldr	r3, [r7, #28]
 8003d4e:	089b      	lsrs	r3, r3, #2
 8003d50:	f003 0301 	and.w	r3, r3, #1
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	f000 809a 	beq.w	8003e8e <HAL_I2C_EV_IRQHandler+0x2d6>
 8003d5a:	697b      	ldr	r3, [r7, #20]
 8003d5c:	0a5b      	lsrs	r3, r3, #9
 8003d5e:	f003 0301 	and.w	r3, r3, #1
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	f000 8093 	beq.w	8003e8e <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8003d68:	6878      	ldr	r0, [r7, #4]
 8003d6a:	f000 fb5f 	bl	800442c <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003d6e:	e08e      	b.n	8003e8e <HAL_I2C_EV_IRQHandler+0x2d6>
 8003d70:	e08d      	b.n	8003e8e <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d004      	beq.n	8003d84 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	695b      	ldr	r3, [r3, #20]
 8003d80:	61fb      	str	r3, [r7, #28]
 8003d82:	e007      	b.n	8003d94 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	699b      	ldr	r3, [r3, #24]
 8003d8a:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	695b      	ldr	r3, [r3, #20]
 8003d92:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003d94:	69fb      	ldr	r3, [r7, #28]
 8003d96:	085b      	lsrs	r3, r3, #1
 8003d98:	f003 0301 	and.w	r3, r3, #1
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d012      	beq.n	8003dc6 <HAL_I2C_EV_IRQHandler+0x20e>
 8003da0:	697b      	ldr	r3, [r7, #20]
 8003da2:	0a5b      	lsrs	r3, r3, #9
 8003da4:	f003 0301 	and.w	r3, r3, #1
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d00c      	beq.n	8003dc6 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d003      	beq.n	8003dbc <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	699b      	ldr	r3, [r3, #24]
 8003dba:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8003dbc:	69b9      	ldr	r1, [r7, #24]
 8003dbe:	6878      	ldr	r0, [r7, #4]
 8003dc0:	f000 ff1d 	bl	8004bfe <I2C_Slave_ADDR>
 8003dc4:	e066      	b.n	8003e94 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003dc6:	69fb      	ldr	r3, [r7, #28]
 8003dc8:	091b      	lsrs	r3, r3, #4
 8003dca:	f003 0301 	and.w	r3, r3, #1
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d009      	beq.n	8003de6 <HAL_I2C_EV_IRQHandler+0x22e>
 8003dd2:	697b      	ldr	r3, [r7, #20]
 8003dd4:	0a5b      	lsrs	r3, r3, #9
 8003dd6:	f003 0301 	and.w	r3, r3, #1
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d003      	beq.n	8003de6 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8003dde:	6878      	ldr	r0, [r7, #4]
 8003de0:	f000 ff58 	bl	8004c94 <I2C_Slave_STOPF>
 8003de4:	e056      	b.n	8003e94 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003de6:	7bbb      	ldrb	r3, [r7, #14]
 8003de8:	2b21      	cmp	r3, #33	; 0x21
 8003dea:	d002      	beq.n	8003df2 <HAL_I2C_EV_IRQHandler+0x23a>
 8003dec:	7bbb      	ldrb	r3, [r7, #14]
 8003dee:	2b29      	cmp	r3, #41	; 0x29
 8003df0:	d125      	bne.n	8003e3e <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003df2:	69fb      	ldr	r3, [r7, #28]
 8003df4:	09db      	lsrs	r3, r3, #7
 8003df6:	f003 0301 	and.w	r3, r3, #1
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d00f      	beq.n	8003e1e <HAL_I2C_EV_IRQHandler+0x266>
 8003dfe:	697b      	ldr	r3, [r7, #20]
 8003e00:	0a9b      	lsrs	r3, r3, #10
 8003e02:	f003 0301 	and.w	r3, r3, #1
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d009      	beq.n	8003e1e <HAL_I2C_EV_IRQHandler+0x266>
 8003e0a:	69fb      	ldr	r3, [r7, #28]
 8003e0c:	089b      	lsrs	r3, r3, #2
 8003e0e:	f003 0301 	and.w	r3, r3, #1
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d103      	bne.n	8003e1e <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8003e16:	6878      	ldr	r0, [r7, #4]
 8003e18:	f000 fe33 	bl	8004a82 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003e1c:	e039      	b.n	8003e92 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003e1e:	69fb      	ldr	r3, [r7, #28]
 8003e20:	089b      	lsrs	r3, r3, #2
 8003e22:	f003 0301 	and.w	r3, r3, #1
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d033      	beq.n	8003e92 <HAL_I2C_EV_IRQHandler+0x2da>
 8003e2a:	697b      	ldr	r3, [r7, #20]
 8003e2c:	0a5b      	lsrs	r3, r3, #9
 8003e2e:	f003 0301 	and.w	r3, r3, #1
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d02d      	beq.n	8003e92 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8003e36:	6878      	ldr	r0, [r7, #4]
 8003e38:	f000 fe60 	bl	8004afc <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003e3c:	e029      	b.n	8003e92 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003e3e:	69fb      	ldr	r3, [r7, #28]
 8003e40:	099b      	lsrs	r3, r3, #6
 8003e42:	f003 0301 	and.w	r3, r3, #1
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d00f      	beq.n	8003e6a <HAL_I2C_EV_IRQHandler+0x2b2>
 8003e4a:	697b      	ldr	r3, [r7, #20]
 8003e4c:	0a9b      	lsrs	r3, r3, #10
 8003e4e:	f003 0301 	and.w	r3, r3, #1
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d009      	beq.n	8003e6a <HAL_I2C_EV_IRQHandler+0x2b2>
 8003e56:	69fb      	ldr	r3, [r7, #28]
 8003e58:	089b      	lsrs	r3, r3, #2
 8003e5a:	f003 0301 	and.w	r3, r3, #1
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d103      	bne.n	8003e6a <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8003e62:	6878      	ldr	r0, [r7, #4]
 8003e64:	f000 fe6b 	bl	8004b3e <I2C_SlaveReceive_RXNE>
 8003e68:	e014      	b.n	8003e94 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003e6a:	69fb      	ldr	r3, [r7, #28]
 8003e6c:	089b      	lsrs	r3, r3, #2
 8003e6e:	f003 0301 	and.w	r3, r3, #1
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d00e      	beq.n	8003e94 <HAL_I2C_EV_IRQHandler+0x2dc>
 8003e76:	697b      	ldr	r3, [r7, #20]
 8003e78:	0a5b      	lsrs	r3, r3, #9
 8003e7a:	f003 0301 	and.w	r3, r3, #1
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d008      	beq.n	8003e94 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8003e82:	6878      	ldr	r0, [r7, #4]
 8003e84:	f000 fe99 	bl	8004bba <I2C_SlaveReceive_BTF>
 8003e88:	e004      	b.n	8003e94 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8003e8a:	bf00      	nop
 8003e8c:	e002      	b.n	8003e94 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003e8e:	bf00      	nop
 8003e90:	e000      	b.n	8003e94 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003e92:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8003e94:	3720      	adds	r7, #32
 8003e96:	46bd      	mov	sp, r7
 8003e98:	bd80      	pop	{r7, pc}

08003e9a <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003e9a:	b480      	push	{r7}
 8003e9c:	b083      	sub	sp, #12
 8003e9e:	af00      	add	r7, sp, #0
 8003ea0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8003ea2:	bf00      	nop
 8003ea4:	370c      	adds	r7, #12
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eac:	4770      	bx	lr

08003eae <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003eae:	b480      	push	{r7}
 8003eb0:	b083      	sub	sp, #12
 8003eb2:	af00      	add	r7, sp, #0
 8003eb4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8003eb6:	bf00      	nop
 8003eb8:	370c      	adds	r7, #12
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec0:	4770      	bx	lr

08003ec2 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003ec2:	b480      	push	{r7}
 8003ec4:	b083      	sub	sp, #12
 8003ec6:	af00      	add	r7, sp, #0
 8003ec8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003eca:	bf00      	nop
 8003ecc:	370c      	adds	r7, #12
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed4:	4770      	bx	lr

08003ed6 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003ed6:	b480      	push	{r7}
 8003ed8:	b083      	sub	sp, #12
 8003eda:	af00      	add	r7, sp, #0
 8003edc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003ede:	bf00      	nop
 8003ee0:	370c      	adds	r7, #12
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee8:	4770      	bx	lr

08003eea <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003eea:	b480      	push	{r7}
 8003eec:	b083      	sub	sp, #12
 8003eee:	af00      	add	r7, sp, #0
 8003ef0:	6078      	str	r0, [r7, #4]
 8003ef2:	460b      	mov	r3, r1
 8003ef4:	70fb      	strb	r3, [r7, #3]
 8003ef6:	4613      	mov	r3, r2
 8003ef8:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003efa:	bf00      	nop
 8003efc:	370c      	adds	r7, #12
 8003efe:	46bd      	mov	sp, r7
 8003f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f04:	4770      	bx	lr

08003f06 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003f06:	b480      	push	{r7}
 8003f08:	b083      	sub	sp, #12
 8003f0a:	af00      	add	r7, sp, #0
 8003f0c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8003f0e:	bf00      	nop
 8003f10:	370c      	adds	r7, #12
 8003f12:	46bd      	mov	sp, r7
 8003f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f18:	4770      	bx	lr

08003f1a <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003f1a:	b480      	push	{r7}
 8003f1c:	b083      	sub	sp, #12
 8003f1e:	af00      	add	r7, sp, #0
 8003f20:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8003f22:	bf00      	nop
 8003f24:	370c      	adds	r7, #12
 8003f26:	46bd      	mov	sp, r7
 8003f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2c:	4770      	bx	lr

08003f2e <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003f2e:	b480      	push	{r7}
 8003f30:	b083      	sub	sp, #12
 8003f32:	af00      	add	r7, sp, #0
 8003f34:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8003f36:	bf00      	nop
 8003f38:	370c      	adds	r7, #12
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f40:	4770      	bx	lr

08003f42 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003f42:	b480      	push	{r7}
 8003f44:	b083      	sub	sp, #12
 8003f46:	af00      	add	r7, sp, #0
 8003f48:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003f4a:	bf00      	nop
 8003f4c:	370c      	adds	r7, #12
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f54:	4770      	bx	lr

08003f56 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003f56:	b480      	push	{r7}
 8003f58:	b083      	sub	sp, #12
 8003f5a:	af00      	add	r7, sp, #0
 8003f5c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003f5e:	bf00      	nop
 8003f60:	370c      	adds	r7, #12
 8003f62:	46bd      	mov	sp, r7
 8003f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f68:	4770      	bx	lr

08003f6a <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003f6a:	b580      	push	{r7, lr}
 8003f6c:	b084      	sub	sp, #16
 8003f6e:	af00      	add	r7, sp, #0
 8003f70:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f78:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003f80:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f86:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d150      	bne.n	8004032 <I2C_MasterTransmit_TXE+0xc8>
 8003f90:	7bfb      	ldrb	r3, [r7, #15]
 8003f92:	2b21      	cmp	r3, #33	; 0x21
 8003f94:	d14d      	bne.n	8004032 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003f96:	68bb      	ldr	r3, [r7, #8]
 8003f98:	2b08      	cmp	r3, #8
 8003f9a:	d01d      	beq.n	8003fd8 <I2C_MasterTransmit_TXE+0x6e>
 8003f9c:	68bb      	ldr	r3, [r7, #8]
 8003f9e:	2b20      	cmp	r3, #32
 8003fa0:	d01a      	beq.n	8003fd8 <I2C_MasterTransmit_TXE+0x6e>
 8003fa2:	68bb      	ldr	r3, [r7, #8]
 8003fa4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003fa8:	d016      	beq.n	8003fd8 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	685a      	ldr	r2, [r3, #4]
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003fb8:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	2211      	movs	r2, #17
 8003fbe:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2220      	movs	r2, #32
 8003fcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8003fd0:	6878      	ldr	r0, [r7, #4]
 8003fd2:	f7ff ff62 	bl	8003e9a <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003fd6:	e060      	b.n	800409a <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	685a      	ldr	r2, [r3, #4]
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003fe6:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	681a      	ldr	r2, [r3, #0]
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ff6:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	2220      	movs	r2, #32
 8004002:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800400c:	b2db      	uxtb	r3, r3
 800400e:	2b40      	cmp	r3, #64	; 0x40
 8004010:	d107      	bne.n	8004022 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	2200      	movs	r2, #0
 8004016:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 800401a:	6878      	ldr	r0, [r7, #4]
 800401c:	f7ff ff7d 	bl	8003f1a <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004020:	e03b      	b.n	800409a <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	2200      	movs	r2, #0
 8004026:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800402a:	6878      	ldr	r0, [r7, #4]
 800402c:	f7ff ff35 	bl	8003e9a <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004030:	e033      	b.n	800409a <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8004032:	7bfb      	ldrb	r3, [r7, #15]
 8004034:	2b21      	cmp	r3, #33	; 0x21
 8004036:	d005      	beq.n	8004044 <I2C_MasterTransmit_TXE+0xda>
 8004038:	7bbb      	ldrb	r3, [r7, #14]
 800403a:	2b40      	cmp	r3, #64	; 0x40
 800403c:	d12d      	bne.n	800409a <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 800403e:	7bfb      	ldrb	r3, [r7, #15]
 8004040:	2b22      	cmp	r3, #34	; 0x22
 8004042:	d12a      	bne.n	800409a <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004048:	b29b      	uxth	r3, r3
 800404a:	2b00      	cmp	r3, #0
 800404c:	d108      	bne.n	8004060 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	685a      	ldr	r2, [r3, #4]
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800405c:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800405e:	e01c      	b.n	800409a <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004066:	b2db      	uxtb	r3, r3
 8004068:	2b40      	cmp	r3, #64	; 0x40
 800406a:	d103      	bne.n	8004074 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800406c:	6878      	ldr	r0, [r7, #4]
 800406e:	f000 f88e 	bl	800418e <I2C_MemoryTransmit_TXE_BTF>
}
 8004072:	e012      	b.n	800409a <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004078:	781a      	ldrb	r2, [r3, #0]
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004084:	1c5a      	adds	r2, r3, #1
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800408e:	b29b      	uxth	r3, r3
 8004090:	3b01      	subs	r3, #1
 8004092:	b29a      	uxth	r2, r3
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004098:	e7ff      	b.n	800409a <I2C_MasterTransmit_TXE+0x130>
 800409a:	bf00      	nop
 800409c:	3710      	adds	r7, #16
 800409e:	46bd      	mov	sp, r7
 80040a0:	bd80      	pop	{r7, pc}

080040a2 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80040a2:	b580      	push	{r7, lr}
 80040a4:	b084      	sub	sp, #16
 80040a6:	af00      	add	r7, sp, #0
 80040a8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040ae:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040b6:	b2db      	uxtb	r3, r3
 80040b8:	2b21      	cmp	r3, #33	; 0x21
 80040ba:	d164      	bne.n	8004186 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040c0:	b29b      	uxth	r3, r3
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d012      	beq.n	80040ec <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ca:	781a      	ldrb	r2, [r3, #0]
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040d6:	1c5a      	adds	r2, r3, #1
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040e0:	b29b      	uxth	r3, r3
 80040e2:	3b01      	subs	r3, #1
 80040e4:	b29a      	uxth	r2, r3
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80040ea:	e04c      	b.n	8004186 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	2b08      	cmp	r3, #8
 80040f0:	d01d      	beq.n	800412e <I2C_MasterTransmit_BTF+0x8c>
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	2b20      	cmp	r3, #32
 80040f6:	d01a      	beq.n	800412e <I2C_MasterTransmit_BTF+0x8c>
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80040fe:	d016      	beq.n	800412e <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	685a      	ldr	r2, [r3, #4]
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800410e:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2211      	movs	r2, #17
 8004114:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	2200      	movs	r2, #0
 800411a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	2220      	movs	r2, #32
 8004122:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004126:	6878      	ldr	r0, [r7, #4]
 8004128:	f7ff feb7 	bl	8003e9a <HAL_I2C_MasterTxCpltCallback>
}
 800412c:	e02b      	b.n	8004186 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	685a      	ldr	r2, [r3, #4]
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800413c:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	681a      	ldr	r2, [r3, #0]
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800414c:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	2200      	movs	r2, #0
 8004152:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2220      	movs	r2, #32
 8004158:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004162:	b2db      	uxtb	r3, r3
 8004164:	2b40      	cmp	r3, #64	; 0x40
 8004166:	d107      	bne.n	8004178 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2200      	movs	r2, #0
 800416c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8004170:	6878      	ldr	r0, [r7, #4]
 8004172:	f7ff fed2 	bl	8003f1a <HAL_I2C_MemTxCpltCallback>
}
 8004176:	e006      	b.n	8004186 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2200      	movs	r2, #0
 800417c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8004180:	6878      	ldr	r0, [r7, #4]
 8004182:	f7ff fe8a 	bl	8003e9a <HAL_I2C_MasterTxCpltCallback>
}
 8004186:	bf00      	nop
 8004188:	3710      	adds	r7, #16
 800418a:	46bd      	mov	sp, r7
 800418c:	bd80      	pop	{r7, pc}

0800418e <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 800418e:	b580      	push	{r7, lr}
 8004190:	b084      	sub	sp, #16
 8004192:	af00      	add	r7, sp, #0
 8004194:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800419c:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d11d      	bne.n	80041e2 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041aa:	2b01      	cmp	r3, #1
 80041ac:	d10b      	bne.n	80041c6 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041b2:	b2da      	uxtb	r2, r3
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041be:	1c9a      	adds	r2, r3, #2
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 80041c4:	e073      	b.n	80042ae <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041ca:	b29b      	uxth	r3, r3
 80041cc:	121b      	asrs	r3, r3, #8
 80041ce:	b2da      	uxtb	r2, r3
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041da:	1c5a      	adds	r2, r3, #1
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	651a      	str	r2, [r3, #80]	; 0x50
}
 80041e0:	e065      	b.n	80042ae <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041e6:	2b01      	cmp	r3, #1
 80041e8:	d10b      	bne.n	8004202 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041ee:	b2da      	uxtb	r2, r3
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041fa:	1c5a      	adds	r2, r3, #1
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004200:	e055      	b.n	80042ae <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004206:	2b02      	cmp	r3, #2
 8004208:	d151      	bne.n	80042ae <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 800420a:	7bfb      	ldrb	r3, [r7, #15]
 800420c:	2b22      	cmp	r3, #34	; 0x22
 800420e:	d10d      	bne.n	800422c <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	681a      	ldr	r2, [r3, #0]
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800421e:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004224:	1c5a      	adds	r2, r3, #1
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	651a      	str	r2, [r3, #80]	; 0x50
}
 800422a:	e040      	b.n	80042ae <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004230:	b29b      	uxth	r3, r3
 8004232:	2b00      	cmp	r3, #0
 8004234:	d015      	beq.n	8004262 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8004236:	7bfb      	ldrb	r3, [r7, #15]
 8004238:	2b21      	cmp	r3, #33	; 0x21
 800423a:	d112      	bne.n	8004262 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004240:	781a      	ldrb	r2, [r3, #0]
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800424c:	1c5a      	adds	r2, r3, #1
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004256:	b29b      	uxth	r3, r3
 8004258:	3b01      	subs	r3, #1
 800425a:	b29a      	uxth	r2, r3
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004260:	e025      	b.n	80042ae <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004266:	b29b      	uxth	r3, r3
 8004268:	2b00      	cmp	r3, #0
 800426a:	d120      	bne.n	80042ae <I2C_MemoryTransmit_TXE_BTF+0x120>
 800426c:	7bfb      	ldrb	r3, [r7, #15]
 800426e:	2b21      	cmp	r3, #33	; 0x21
 8004270:	d11d      	bne.n	80042ae <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	685a      	ldr	r2, [r3, #4]
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004280:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	681a      	ldr	r2, [r3, #0]
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004290:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	2200      	movs	r2, #0
 8004296:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2220      	movs	r2, #32
 800429c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2200      	movs	r2, #0
 80042a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80042a8:	6878      	ldr	r0, [r7, #4]
 80042aa:	f7ff fe36 	bl	8003f1a <HAL_I2C_MemTxCpltCallback>
}
 80042ae:	bf00      	nop
 80042b0:	3710      	adds	r7, #16
 80042b2:	46bd      	mov	sp, r7
 80042b4:	bd80      	pop	{r7, pc}

080042b6 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80042b6:	b580      	push	{r7, lr}
 80042b8:	b084      	sub	sp, #16
 80042ba:	af00      	add	r7, sp, #0
 80042bc:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042c4:	b2db      	uxtb	r3, r3
 80042c6:	2b22      	cmp	r3, #34	; 0x22
 80042c8:	f040 80ac 	bne.w	8004424 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042d0:	b29b      	uxth	r3, r3
 80042d2:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	2b03      	cmp	r3, #3
 80042d8:	d921      	bls.n	800431e <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	691a      	ldr	r2, [r3, #16]
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042e4:	b2d2      	uxtb	r2, r2
 80042e6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ec:	1c5a      	adds	r2, r3, #1
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042f6:	b29b      	uxth	r3, r3
 80042f8:	3b01      	subs	r3, #1
 80042fa:	b29a      	uxth	r2, r3
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004304:	b29b      	uxth	r3, r3
 8004306:	2b03      	cmp	r3, #3
 8004308:	f040 808c 	bne.w	8004424 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	685a      	ldr	r2, [r3, #4]
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800431a:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 800431c:	e082      	b.n	8004424 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004322:	2b02      	cmp	r3, #2
 8004324:	d075      	beq.n	8004412 <I2C_MasterReceive_RXNE+0x15c>
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	2b01      	cmp	r3, #1
 800432a:	d002      	beq.n	8004332 <I2C_MasterReceive_RXNE+0x7c>
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	2b00      	cmp	r3, #0
 8004330:	d16f      	bne.n	8004412 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004332:	6878      	ldr	r0, [r7, #4]
 8004334:	f000 ffb8 	bl	80052a8 <I2C_WaitOnSTOPRequestThroughIT>
 8004338:	4603      	mov	r3, r0
 800433a:	2b00      	cmp	r3, #0
 800433c:	d142      	bne.n	80043c4 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	681a      	ldr	r2, [r3, #0]
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800434c:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	685a      	ldr	r2, [r3, #4]
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800435c:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	691a      	ldr	r2, [r3, #16]
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004368:	b2d2      	uxtb	r2, r2
 800436a:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004370:	1c5a      	adds	r2, r3, #1
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800437a:	b29b      	uxth	r3, r3
 800437c:	3b01      	subs	r3, #1
 800437e:	b29a      	uxth	r2, r3
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2220      	movs	r2, #32
 8004388:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004392:	b2db      	uxtb	r3, r3
 8004394:	2b40      	cmp	r3, #64	; 0x40
 8004396:	d10a      	bne.n	80043ae <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2200      	movs	r2, #0
 800439c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2200      	movs	r2, #0
 80043a4:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80043a6:	6878      	ldr	r0, [r7, #4]
 80043a8:	f7ff fdc1 	bl	8003f2e <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80043ac:	e03a      	b.n	8004424 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	2200      	movs	r2, #0
 80043b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	2212      	movs	r2, #18
 80043ba:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80043bc:	6878      	ldr	r0, [r7, #4]
 80043be:	f7ff fd76 	bl	8003eae <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80043c2:	e02f      	b.n	8004424 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	685a      	ldr	r2, [r3, #4]
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80043d2:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	691a      	ldr	r2, [r3, #16]
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043de:	b2d2      	uxtb	r2, r2
 80043e0:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043e6:	1c5a      	adds	r2, r3, #1
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043f0:	b29b      	uxth	r3, r3
 80043f2:	3b01      	subs	r3, #1
 80043f4:	b29a      	uxth	r2, r3
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	2220      	movs	r2, #32
 80043fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2200      	movs	r2, #0
 8004406:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 800440a:	6878      	ldr	r0, [r7, #4]
 800440c:	f7ff fd99 	bl	8003f42 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004410:	e008      	b.n	8004424 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	685a      	ldr	r2, [r3, #4]
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004420:	605a      	str	r2, [r3, #4]
}
 8004422:	e7ff      	b.n	8004424 <I2C_MasterReceive_RXNE+0x16e>
 8004424:	bf00      	nop
 8004426:	3710      	adds	r7, #16
 8004428:	46bd      	mov	sp, r7
 800442a:	bd80      	pop	{r7, pc}

0800442c <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b084      	sub	sp, #16
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004438:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800443e:	b29b      	uxth	r3, r3
 8004440:	2b04      	cmp	r3, #4
 8004442:	d11b      	bne.n	800447c <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	685a      	ldr	r2, [r3, #4]
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004452:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	691a      	ldr	r2, [r3, #16]
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800445e:	b2d2      	uxtb	r2, r2
 8004460:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004466:	1c5a      	adds	r2, r3, #1
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004470:	b29b      	uxth	r3, r3
 8004472:	3b01      	subs	r3, #1
 8004474:	b29a      	uxth	r2, r3
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 800447a:	e0bd      	b.n	80045f8 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004480:	b29b      	uxth	r3, r3
 8004482:	2b03      	cmp	r3, #3
 8004484:	d129      	bne.n	80044da <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	685a      	ldr	r2, [r3, #4]
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004494:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	2b04      	cmp	r3, #4
 800449a:	d00a      	beq.n	80044b2 <I2C_MasterReceive_BTF+0x86>
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	2b02      	cmp	r3, #2
 80044a0:	d007      	beq.n	80044b2 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	681a      	ldr	r2, [r3, #0]
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80044b0:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	691a      	ldr	r2, [r3, #16]
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044bc:	b2d2      	uxtb	r2, r2
 80044be:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044c4:	1c5a      	adds	r2, r3, #1
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044ce:	b29b      	uxth	r3, r3
 80044d0:	3b01      	subs	r3, #1
 80044d2:	b29a      	uxth	r2, r3
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80044d8:	e08e      	b.n	80045f8 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044de:	b29b      	uxth	r3, r3
 80044e0:	2b02      	cmp	r3, #2
 80044e2:	d176      	bne.n	80045d2 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	2b01      	cmp	r3, #1
 80044e8:	d002      	beq.n	80044f0 <I2C_MasterReceive_BTF+0xc4>
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	2b10      	cmp	r3, #16
 80044ee:	d108      	bne.n	8004502 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	681a      	ldr	r2, [r3, #0]
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80044fe:	601a      	str	r2, [r3, #0]
 8004500:	e019      	b.n	8004536 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	2b04      	cmp	r3, #4
 8004506:	d002      	beq.n	800450e <I2C_MasterReceive_BTF+0xe2>
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	2b02      	cmp	r3, #2
 800450c:	d108      	bne.n	8004520 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	681a      	ldr	r2, [r3, #0]
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800451c:	601a      	str	r2, [r3, #0]
 800451e:	e00a      	b.n	8004536 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	2b10      	cmp	r3, #16
 8004524:	d007      	beq.n	8004536 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	681a      	ldr	r2, [r3, #0]
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004534:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	691a      	ldr	r2, [r3, #16]
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004540:	b2d2      	uxtb	r2, r2
 8004542:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004548:	1c5a      	adds	r2, r3, #1
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004552:	b29b      	uxth	r3, r3
 8004554:	3b01      	subs	r3, #1
 8004556:	b29a      	uxth	r2, r3
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	691a      	ldr	r2, [r3, #16]
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004566:	b2d2      	uxtb	r2, r2
 8004568:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800456e:	1c5a      	adds	r2, r3, #1
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004578:	b29b      	uxth	r3, r3
 800457a:	3b01      	subs	r3, #1
 800457c:	b29a      	uxth	r2, r3
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	685a      	ldr	r2, [r3, #4]
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004590:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	2220      	movs	r2, #32
 8004596:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80045a0:	b2db      	uxtb	r3, r3
 80045a2:	2b40      	cmp	r3, #64	; 0x40
 80045a4:	d10a      	bne.n	80045bc <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	2200      	movs	r2, #0
 80045aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	2200      	movs	r2, #0
 80045b2:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80045b4:	6878      	ldr	r0, [r7, #4]
 80045b6:	f7ff fcba 	bl	8003f2e <HAL_I2C_MemRxCpltCallback>
}
 80045ba:	e01d      	b.n	80045f8 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2200      	movs	r2, #0
 80045c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2212      	movs	r2, #18
 80045c8:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80045ca:	6878      	ldr	r0, [r7, #4]
 80045cc:	f7ff fc6f 	bl	8003eae <HAL_I2C_MasterRxCpltCallback>
}
 80045d0:	e012      	b.n	80045f8 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	691a      	ldr	r2, [r3, #16]
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045dc:	b2d2      	uxtb	r2, r2
 80045de:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045e4:	1c5a      	adds	r2, r3, #1
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045ee:	b29b      	uxth	r3, r3
 80045f0:	3b01      	subs	r3, #1
 80045f2:	b29a      	uxth	r2, r3
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80045f8:	bf00      	nop
 80045fa:	3710      	adds	r7, #16
 80045fc:	46bd      	mov	sp, r7
 80045fe:	bd80      	pop	{r7, pc}

08004600 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8004600:	b480      	push	{r7}
 8004602:	b083      	sub	sp, #12
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800460e:	b2db      	uxtb	r3, r3
 8004610:	2b40      	cmp	r3, #64	; 0x40
 8004612:	d117      	bne.n	8004644 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004618:	2b00      	cmp	r3, #0
 800461a:	d109      	bne.n	8004630 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004620:	b2db      	uxtb	r3, r3
 8004622:	461a      	mov	r2, r3
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800462c:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 800462e:	e067      	b.n	8004700 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004634:	b2db      	uxtb	r3, r3
 8004636:	f043 0301 	orr.w	r3, r3, #1
 800463a:	b2da      	uxtb	r2, r3
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	611a      	str	r2, [r3, #16]
}
 8004642:	e05d      	b.n	8004700 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	691b      	ldr	r3, [r3, #16]
 8004648:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800464c:	d133      	bne.n	80046b6 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004654:	b2db      	uxtb	r3, r3
 8004656:	2b21      	cmp	r3, #33	; 0x21
 8004658:	d109      	bne.n	800466e <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800465e:	b2db      	uxtb	r3, r3
 8004660:	461a      	mov	r2, r3
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800466a:	611a      	str	r2, [r3, #16]
 800466c:	e008      	b.n	8004680 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004672:	b2db      	uxtb	r3, r3
 8004674:	f043 0301 	orr.w	r3, r3, #1
 8004678:	b2da      	uxtb	r2, r3
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004684:	2b00      	cmp	r3, #0
 8004686:	d004      	beq.n	8004692 <I2C_Master_SB+0x92>
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800468c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800468e:	2b00      	cmp	r3, #0
 8004690:	d108      	bne.n	80046a4 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004696:	2b00      	cmp	r3, #0
 8004698:	d032      	beq.n	8004700 <I2C_Master_SB+0x100>
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800469e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d02d      	beq.n	8004700 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	685a      	ldr	r2, [r3, #4]
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80046b2:	605a      	str	r2, [r3, #4]
}
 80046b4:	e024      	b.n	8004700 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d10e      	bne.n	80046dc <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046c2:	b29b      	uxth	r3, r3
 80046c4:	11db      	asrs	r3, r3, #7
 80046c6:	b2db      	uxtb	r3, r3
 80046c8:	f003 0306 	and.w	r3, r3, #6
 80046cc:	b2db      	uxtb	r3, r3
 80046ce:	f063 030f 	orn	r3, r3, #15
 80046d2:	b2da      	uxtb	r2, r3
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	611a      	str	r2, [r3, #16]
}
 80046da:	e011      	b.n	8004700 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046e0:	2b01      	cmp	r3, #1
 80046e2:	d10d      	bne.n	8004700 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046e8:	b29b      	uxth	r3, r3
 80046ea:	11db      	asrs	r3, r3, #7
 80046ec:	b2db      	uxtb	r3, r3
 80046ee:	f003 0306 	and.w	r3, r3, #6
 80046f2:	b2db      	uxtb	r3, r3
 80046f4:	f063 030e 	orn	r3, r3, #14
 80046f8:	b2da      	uxtb	r2, r3
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	611a      	str	r2, [r3, #16]
}
 8004700:	bf00      	nop
 8004702:	370c      	adds	r7, #12
 8004704:	46bd      	mov	sp, r7
 8004706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470a:	4770      	bx	lr

0800470c <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800470c:	b480      	push	{r7}
 800470e:	b083      	sub	sp, #12
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004718:	b2da      	uxtb	r2, r3
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004724:	2b00      	cmp	r3, #0
 8004726:	d004      	beq.n	8004732 <I2C_Master_ADD10+0x26>
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800472c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800472e:	2b00      	cmp	r3, #0
 8004730:	d108      	bne.n	8004744 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004736:	2b00      	cmp	r3, #0
 8004738:	d00c      	beq.n	8004754 <I2C_Master_ADD10+0x48>
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800473e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004740:	2b00      	cmp	r3, #0
 8004742:	d007      	beq.n	8004754 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	685a      	ldr	r2, [r3, #4]
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004752:	605a      	str	r2, [r3, #4]
  }
}
 8004754:	bf00      	nop
 8004756:	370c      	adds	r7, #12
 8004758:	46bd      	mov	sp, r7
 800475a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475e:	4770      	bx	lr

08004760 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8004760:	b480      	push	{r7}
 8004762:	b091      	sub	sp, #68	; 0x44
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800476e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004776:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800477c:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004784:	b2db      	uxtb	r3, r3
 8004786:	2b22      	cmp	r3, #34	; 0x22
 8004788:	f040 8169 	bne.w	8004a5e <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004790:	2b00      	cmp	r3, #0
 8004792:	d10f      	bne.n	80047b4 <I2C_Master_ADDR+0x54>
 8004794:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004798:	2b40      	cmp	r3, #64	; 0x40
 800479a:	d10b      	bne.n	80047b4 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800479c:	2300      	movs	r3, #0
 800479e:	633b      	str	r3, [r7, #48]	; 0x30
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	695b      	ldr	r3, [r3, #20]
 80047a6:	633b      	str	r3, [r7, #48]	; 0x30
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	699b      	ldr	r3, [r3, #24]
 80047ae:	633b      	str	r3, [r7, #48]	; 0x30
 80047b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047b2:	e160      	b.n	8004a76 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d11d      	bne.n	80047f8 <I2C_Master_ADDR+0x98>
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	691b      	ldr	r3, [r3, #16]
 80047c0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80047c4:	d118      	bne.n	80047f8 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80047c6:	2300      	movs	r3, #0
 80047c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	695b      	ldr	r3, [r3, #20]
 80047d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	699b      	ldr	r3, [r3, #24]
 80047d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80047da:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	681a      	ldr	r2, [r3, #0]
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80047ea:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047f0:	1c5a      	adds	r2, r3, #1
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	651a      	str	r2, [r3, #80]	; 0x50
 80047f6:	e13e      	b.n	8004a76 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047fc:	b29b      	uxth	r3, r3
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d113      	bne.n	800482a <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004802:	2300      	movs	r3, #0
 8004804:	62bb      	str	r3, [r7, #40]	; 0x28
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	695b      	ldr	r3, [r3, #20]
 800480c:	62bb      	str	r3, [r7, #40]	; 0x28
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	699b      	ldr	r3, [r3, #24]
 8004814:	62bb      	str	r3, [r7, #40]	; 0x28
 8004816:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	681a      	ldr	r2, [r3, #0]
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004826:	601a      	str	r2, [r3, #0]
 8004828:	e115      	b.n	8004a56 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800482e:	b29b      	uxth	r3, r3
 8004830:	2b01      	cmp	r3, #1
 8004832:	f040 808a 	bne.w	800494a <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8004836:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004838:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800483c:	d137      	bne.n	80048ae <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	681a      	ldr	r2, [r3, #0]
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800484c:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	685b      	ldr	r3, [r3, #4]
 8004854:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004858:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800485c:	d113      	bne.n	8004886 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	681a      	ldr	r2, [r3, #0]
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800486c:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800486e:	2300      	movs	r3, #0
 8004870:	627b      	str	r3, [r7, #36]	; 0x24
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	695b      	ldr	r3, [r3, #20]
 8004878:	627b      	str	r3, [r7, #36]	; 0x24
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	699b      	ldr	r3, [r3, #24]
 8004880:	627b      	str	r3, [r7, #36]	; 0x24
 8004882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004884:	e0e7      	b.n	8004a56 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004886:	2300      	movs	r3, #0
 8004888:	623b      	str	r3, [r7, #32]
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	695b      	ldr	r3, [r3, #20]
 8004890:	623b      	str	r3, [r7, #32]
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	699b      	ldr	r3, [r3, #24]
 8004898:	623b      	str	r3, [r7, #32]
 800489a:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	681a      	ldr	r2, [r3, #0]
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80048aa:	601a      	str	r2, [r3, #0]
 80048ac:	e0d3      	b.n	8004a56 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80048ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048b0:	2b08      	cmp	r3, #8
 80048b2:	d02e      	beq.n	8004912 <I2C_Master_ADDR+0x1b2>
 80048b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048b6:	2b20      	cmp	r3, #32
 80048b8:	d02b      	beq.n	8004912 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80048ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048bc:	2b12      	cmp	r3, #18
 80048be:	d102      	bne.n	80048c6 <I2C_Master_ADDR+0x166>
 80048c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048c2:	2b01      	cmp	r3, #1
 80048c4:	d125      	bne.n	8004912 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80048c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048c8:	2b04      	cmp	r3, #4
 80048ca:	d00e      	beq.n	80048ea <I2C_Master_ADDR+0x18a>
 80048cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048ce:	2b02      	cmp	r3, #2
 80048d0:	d00b      	beq.n	80048ea <I2C_Master_ADDR+0x18a>
 80048d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048d4:	2b10      	cmp	r3, #16
 80048d6:	d008      	beq.n	80048ea <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	681a      	ldr	r2, [r3, #0]
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80048e6:	601a      	str	r2, [r3, #0]
 80048e8:	e007      	b.n	80048fa <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	681a      	ldr	r2, [r3, #0]
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80048f8:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80048fa:	2300      	movs	r3, #0
 80048fc:	61fb      	str	r3, [r7, #28]
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	695b      	ldr	r3, [r3, #20]
 8004904:	61fb      	str	r3, [r7, #28]
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	699b      	ldr	r3, [r3, #24]
 800490c:	61fb      	str	r3, [r7, #28]
 800490e:	69fb      	ldr	r3, [r7, #28]
 8004910:	e0a1      	b.n	8004a56 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	681a      	ldr	r2, [r3, #0]
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004920:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004922:	2300      	movs	r3, #0
 8004924:	61bb      	str	r3, [r7, #24]
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	695b      	ldr	r3, [r3, #20]
 800492c:	61bb      	str	r3, [r7, #24]
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	699b      	ldr	r3, [r3, #24]
 8004934:	61bb      	str	r3, [r7, #24]
 8004936:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	681a      	ldr	r2, [r3, #0]
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004946:	601a      	str	r2, [r3, #0]
 8004948:	e085      	b.n	8004a56 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800494e:	b29b      	uxth	r3, r3
 8004950:	2b02      	cmp	r3, #2
 8004952:	d14d      	bne.n	80049f0 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004954:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004956:	2b04      	cmp	r3, #4
 8004958:	d016      	beq.n	8004988 <I2C_Master_ADDR+0x228>
 800495a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800495c:	2b02      	cmp	r3, #2
 800495e:	d013      	beq.n	8004988 <I2C_Master_ADDR+0x228>
 8004960:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004962:	2b10      	cmp	r3, #16
 8004964:	d010      	beq.n	8004988 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	681a      	ldr	r2, [r3, #0]
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004974:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	681a      	ldr	r2, [r3, #0]
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004984:	601a      	str	r2, [r3, #0]
 8004986:	e007      	b.n	8004998 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	681a      	ldr	r2, [r3, #0]
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004996:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	685b      	ldr	r3, [r3, #4]
 800499e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80049a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80049a6:	d117      	bne.n	80049d8 <I2C_Master_ADDR+0x278>
 80049a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049aa:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80049ae:	d00b      	beq.n	80049c8 <I2C_Master_ADDR+0x268>
 80049b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049b2:	2b01      	cmp	r3, #1
 80049b4:	d008      	beq.n	80049c8 <I2C_Master_ADDR+0x268>
 80049b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049b8:	2b08      	cmp	r3, #8
 80049ba:	d005      	beq.n	80049c8 <I2C_Master_ADDR+0x268>
 80049bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049be:	2b10      	cmp	r3, #16
 80049c0:	d002      	beq.n	80049c8 <I2C_Master_ADDR+0x268>
 80049c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049c4:	2b20      	cmp	r3, #32
 80049c6:	d107      	bne.n	80049d8 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	685a      	ldr	r2, [r3, #4]
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80049d6:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80049d8:	2300      	movs	r3, #0
 80049da:	617b      	str	r3, [r7, #20]
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	695b      	ldr	r3, [r3, #20]
 80049e2:	617b      	str	r3, [r7, #20]
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	699b      	ldr	r3, [r3, #24]
 80049ea:	617b      	str	r3, [r7, #20]
 80049ec:	697b      	ldr	r3, [r7, #20]
 80049ee:	e032      	b.n	8004a56 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	681a      	ldr	r2, [r3, #0]
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80049fe:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	685b      	ldr	r3, [r3, #4]
 8004a06:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a0a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a0e:	d117      	bne.n	8004a40 <I2C_Master_ADDR+0x2e0>
 8004a10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a12:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004a16:	d00b      	beq.n	8004a30 <I2C_Master_ADDR+0x2d0>
 8004a18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a1a:	2b01      	cmp	r3, #1
 8004a1c:	d008      	beq.n	8004a30 <I2C_Master_ADDR+0x2d0>
 8004a1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a20:	2b08      	cmp	r3, #8
 8004a22:	d005      	beq.n	8004a30 <I2C_Master_ADDR+0x2d0>
 8004a24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a26:	2b10      	cmp	r3, #16
 8004a28:	d002      	beq.n	8004a30 <I2C_Master_ADDR+0x2d0>
 8004a2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a2c:	2b20      	cmp	r3, #32
 8004a2e:	d107      	bne.n	8004a40 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	685a      	ldr	r2, [r3, #4]
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004a3e:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a40:	2300      	movs	r3, #0
 8004a42:	613b      	str	r3, [r7, #16]
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	695b      	ldr	r3, [r3, #20]
 8004a4a:	613b      	str	r3, [r7, #16]
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	699b      	ldr	r3, [r3, #24]
 8004a52:	613b      	str	r3, [r7, #16]
 8004a54:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	2200      	movs	r2, #0
 8004a5a:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8004a5c:	e00b      	b.n	8004a76 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a5e:	2300      	movs	r3, #0
 8004a60:	60fb      	str	r3, [r7, #12]
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	695b      	ldr	r3, [r3, #20]
 8004a68:	60fb      	str	r3, [r7, #12]
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	699b      	ldr	r3, [r3, #24]
 8004a70:	60fb      	str	r3, [r7, #12]
 8004a72:	68fb      	ldr	r3, [r7, #12]
}
 8004a74:	e7ff      	b.n	8004a76 <I2C_Master_ADDR+0x316>
 8004a76:	bf00      	nop
 8004a78:	3744      	adds	r7, #68	; 0x44
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a80:	4770      	bx	lr

08004a82 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004a82:	b580      	push	{r7, lr}
 8004a84:	b084      	sub	sp, #16
 8004a86:	af00      	add	r7, sp, #0
 8004a88:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a90:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a96:	b29b      	uxth	r3, r3
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d02b      	beq.n	8004af4 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aa0:	781a      	ldrb	r2, [r3, #0]
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aac:	1c5a      	adds	r2, r3, #1
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ab6:	b29b      	uxth	r3, r3
 8004ab8:	3b01      	subs	r3, #1
 8004aba:	b29a      	uxth	r2, r3
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ac4:	b29b      	uxth	r3, r3
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d114      	bne.n	8004af4 <I2C_SlaveTransmit_TXE+0x72>
 8004aca:	7bfb      	ldrb	r3, [r7, #15]
 8004acc:	2b29      	cmp	r3, #41	; 0x29
 8004ace:	d111      	bne.n	8004af4 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	685a      	ldr	r2, [r3, #4]
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ade:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2221      	movs	r2, #33	; 0x21
 8004ae4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	2228      	movs	r2, #40	; 0x28
 8004aea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004aee:	6878      	ldr	r0, [r7, #4]
 8004af0:	f7ff f9e7 	bl	8003ec2 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004af4:	bf00      	nop
 8004af6:	3710      	adds	r7, #16
 8004af8:	46bd      	mov	sp, r7
 8004afa:	bd80      	pop	{r7, pc}

08004afc <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004afc:	b480      	push	{r7}
 8004afe:	b083      	sub	sp, #12
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b08:	b29b      	uxth	r3, r3
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d011      	beq.n	8004b32 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b12:	781a      	ldrb	r2, [r3, #0]
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b1e:	1c5a      	adds	r2, r3, #1
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b28:	b29b      	uxth	r3, r3
 8004b2a:	3b01      	subs	r3, #1
 8004b2c:	b29a      	uxth	r2, r3
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8004b32:	bf00      	nop
 8004b34:	370c      	adds	r7, #12
 8004b36:	46bd      	mov	sp, r7
 8004b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3c:	4770      	bx	lr

08004b3e <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004b3e:	b580      	push	{r7, lr}
 8004b40:	b084      	sub	sp, #16
 8004b42:	af00      	add	r7, sp, #0
 8004b44:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b4c:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b52:	b29b      	uxth	r3, r3
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d02c      	beq.n	8004bb2 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	691a      	ldr	r2, [r3, #16]
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b62:	b2d2      	uxtb	r2, r2
 8004b64:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b6a:	1c5a      	adds	r2, r3, #1
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b74:	b29b      	uxth	r3, r3
 8004b76:	3b01      	subs	r3, #1
 8004b78:	b29a      	uxth	r2, r3
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b82:	b29b      	uxth	r3, r3
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d114      	bne.n	8004bb2 <I2C_SlaveReceive_RXNE+0x74>
 8004b88:	7bfb      	ldrb	r3, [r7, #15]
 8004b8a:	2b2a      	cmp	r3, #42	; 0x2a
 8004b8c:	d111      	bne.n	8004bb2 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	685a      	ldr	r2, [r3, #4]
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b9c:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2222      	movs	r2, #34	; 0x22
 8004ba2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2228      	movs	r2, #40	; 0x28
 8004ba8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004bac:	6878      	ldr	r0, [r7, #4]
 8004bae:	f7ff f992 	bl	8003ed6 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004bb2:	bf00      	nop
 8004bb4:	3710      	adds	r7, #16
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	bd80      	pop	{r7, pc}

08004bba <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004bba:	b480      	push	{r7}
 8004bbc:	b083      	sub	sp, #12
 8004bbe:	af00      	add	r7, sp, #0
 8004bc0:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bc6:	b29b      	uxth	r3, r3
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d012      	beq.n	8004bf2 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	691a      	ldr	r2, [r3, #16]
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bd6:	b2d2      	uxtb	r2, r2
 8004bd8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bde:	1c5a      	adds	r2, r3, #1
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004be8:	b29b      	uxth	r3, r3
 8004bea:	3b01      	subs	r3, #1
 8004bec:	b29a      	uxth	r2, r3
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8004bf2:	bf00      	nop
 8004bf4:	370c      	adds	r7, #12
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfc:	4770      	bx	lr

08004bfe <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8004bfe:	b580      	push	{r7, lr}
 8004c00:	b084      	sub	sp, #16
 8004c02:	af00      	add	r7, sp, #0
 8004c04:	6078      	str	r0, [r7, #4]
 8004c06:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8004c08:	2300      	movs	r3, #0
 8004c0a:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c12:	b2db      	uxtb	r3, r3
 8004c14:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004c18:	2b28      	cmp	r3, #40	; 0x28
 8004c1a:	d127      	bne.n	8004c6c <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	685a      	ldr	r2, [r3, #4]
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c2a:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	089b      	lsrs	r3, r3, #2
 8004c30:	f003 0301 	and.w	r3, r3, #1
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d101      	bne.n	8004c3c <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8004c38:	2301      	movs	r3, #1
 8004c3a:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	09db      	lsrs	r3, r3, #7
 8004c40:	f003 0301 	and.w	r3, r3, #1
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d103      	bne.n	8004c50 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	68db      	ldr	r3, [r3, #12]
 8004c4c:	81bb      	strh	r3, [r7, #12]
 8004c4e:	e002      	b.n	8004c56 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	699b      	ldr	r3, [r3, #24]
 8004c54:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	2200      	movs	r2, #0
 8004c5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8004c5e:	89ba      	ldrh	r2, [r7, #12]
 8004c60:	7bfb      	ldrb	r3, [r7, #15]
 8004c62:	4619      	mov	r1, r3
 8004c64:	6878      	ldr	r0, [r7, #4]
 8004c66:	f7ff f940 	bl	8003eea <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004c6a:	e00e      	b.n	8004c8a <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	60bb      	str	r3, [r7, #8]
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	695b      	ldr	r3, [r3, #20]
 8004c76:	60bb      	str	r3, [r7, #8]
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	699b      	ldr	r3, [r3, #24]
 8004c7e:	60bb      	str	r3, [r7, #8]
 8004c80:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	2200      	movs	r2, #0
 8004c86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8004c8a:	bf00      	nop
 8004c8c:	3710      	adds	r7, #16
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	bd80      	pop	{r7, pc}
	...

08004c94 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8004c94:	b580      	push	{r7, lr}
 8004c96:	b084      	sub	sp, #16
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ca2:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	685a      	ldr	r2, [r3, #4]
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004cb2:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	60bb      	str	r3, [r7, #8]
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	695b      	ldr	r3, [r3, #20]
 8004cbe:	60bb      	str	r3, [r7, #8]
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	681a      	ldr	r2, [r3, #0]
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f042 0201 	orr.w	r2, r2, #1
 8004cce:	601a      	str	r2, [r3, #0]
 8004cd0:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	681a      	ldr	r2, [r3, #0]
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ce0:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	685b      	ldr	r3, [r3, #4]
 8004ce8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004cec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004cf0:	d172      	bne.n	8004dd8 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004cf2:	7bfb      	ldrb	r3, [r7, #15]
 8004cf4:	2b22      	cmp	r3, #34	; 0x22
 8004cf6:	d002      	beq.n	8004cfe <I2C_Slave_STOPF+0x6a>
 8004cf8:	7bfb      	ldrb	r3, [r7, #15]
 8004cfa:	2b2a      	cmp	r3, #42	; 0x2a
 8004cfc:	d135      	bne.n	8004d6a <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	685b      	ldr	r3, [r3, #4]
 8004d06:	b29a      	uxth	r2, r3
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d10:	b29b      	uxth	r3, r3
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d005      	beq.n	8004d22 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d1a:	f043 0204 	orr.w	r2, r3, #4
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	685a      	ldr	r2, [r3, #4]
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004d30:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d36:	4618      	mov	r0, r3
 8004d38:	f7fe fb32 	bl	80033a0 <HAL_DMA_GetState>
 8004d3c:	4603      	mov	r3, r0
 8004d3e:	2b01      	cmp	r3, #1
 8004d40:	d049      	beq.n	8004dd6 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d46:	4a69      	ldr	r2, [pc, #420]	; (8004eec <I2C_Slave_STOPF+0x258>)
 8004d48:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d4e:	4618      	mov	r0, r3
 8004d50:	f7fe f97a 	bl	8003048 <HAL_DMA_Abort_IT>
 8004d54:	4603      	mov	r3, r0
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d03d      	beq.n	8004dd6 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d60:	687a      	ldr	r2, [r7, #4]
 8004d62:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004d64:	4610      	mov	r0, r2
 8004d66:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004d68:	e035      	b.n	8004dd6 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	685b      	ldr	r3, [r3, #4]
 8004d72:	b29a      	uxth	r2, r3
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d7c:	b29b      	uxth	r3, r3
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d005      	beq.n	8004d8e <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d86:	f043 0204 	orr.w	r2, r3, #4
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	685a      	ldr	r2, [r3, #4]
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004d9c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004da2:	4618      	mov	r0, r3
 8004da4:	f7fe fafc 	bl	80033a0 <HAL_DMA_GetState>
 8004da8:	4603      	mov	r3, r0
 8004daa:	2b01      	cmp	r3, #1
 8004dac:	d014      	beq.n	8004dd8 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004db2:	4a4e      	ldr	r2, [pc, #312]	; (8004eec <I2C_Slave_STOPF+0x258>)
 8004db4:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004dba:	4618      	mov	r0, r3
 8004dbc:	f7fe f944 	bl	8003048 <HAL_DMA_Abort_IT>
 8004dc0:	4603      	mov	r3, r0
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d008      	beq.n	8004dd8 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004dca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004dcc:	687a      	ldr	r2, [r7, #4]
 8004dce:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004dd0:	4610      	mov	r0, r2
 8004dd2:	4798      	blx	r3
 8004dd4:	e000      	b.n	8004dd8 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004dd6:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ddc:	b29b      	uxth	r3, r3
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d03e      	beq.n	8004e60 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	695b      	ldr	r3, [r3, #20]
 8004de8:	f003 0304 	and.w	r3, r3, #4
 8004dec:	2b04      	cmp	r3, #4
 8004dee:	d112      	bne.n	8004e16 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	691a      	ldr	r2, [r3, #16]
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dfa:	b2d2      	uxtb	r2, r2
 8004dfc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e02:	1c5a      	adds	r2, r3, #1
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e0c:	b29b      	uxth	r3, r3
 8004e0e:	3b01      	subs	r3, #1
 8004e10:	b29a      	uxth	r2, r3
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	695b      	ldr	r3, [r3, #20]
 8004e1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e20:	2b40      	cmp	r3, #64	; 0x40
 8004e22:	d112      	bne.n	8004e4a <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	691a      	ldr	r2, [r3, #16]
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e2e:	b2d2      	uxtb	r2, r2
 8004e30:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e36:	1c5a      	adds	r2, r3, #1
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e40:	b29b      	uxth	r3, r3
 8004e42:	3b01      	subs	r3, #1
 8004e44:	b29a      	uxth	r2, r3
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e4e:	b29b      	uxth	r3, r3
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d005      	beq.n	8004e60 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e58:	f043 0204 	orr.w	r2, r3, #4
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d003      	beq.n	8004e70 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8004e68:	6878      	ldr	r0, [r7, #4]
 8004e6a:	f000 f843 	bl	8004ef4 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8004e6e:	e039      	b.n	8004ee4 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004e70:	7bfb      	ldrb	r3, [r7, #15]
 8004e72:	2b2a      	cmp	r3, #42	; 0x2a
 8004e74:	d109      	bne.n	8004e8a <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	2200      	movs	r2, #0
 8004e7a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2228      	movs	r2, #40	; 0x28
 8004e80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004e84:	6878      	ldr	r0, [r7, #4]
 8004e86:	f7ff f826 	bl	8003ed6 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e90:	b2db      	uxtb	r3, r3
 8004e92:	2b28      	cmp	r3, #40	; 0x28
 8004e94:	d111      	bne.n	8004eba <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	4a15      	ldr	r2, [pc, #84]	; (8004ef0 <I2C_Slave_STOPF+0x25c>)
 8004e9a:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	2220      	movs	r2, #32
 8004ea6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	2200      	movs	r2, #0
 8004eae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8004eb2:	6878      	ldr	r0, [r7, #4]
 8004eb4:	f7ff f827 	bl	8003f06 <HAL_I2C_ListenCpltCallback>
}
 8004eb8:	e014      	b.n	8004ee4 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ebe:	2b22      	cmp	r3, #34	; 0x22
 8004ec0:	d002      	beq.n	8004ec8 <I2C_Slave_STOPF+0x234>
 8004ec2:	7bfb      	ldrb	r3, [r7, #15]
 8004ec4:	2b22      	cmp	r3, #34	; 0x22
 8004ec6:	d10d      	bne.n	8004ee4 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2200      	movs	r2, #0
 8004ecc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	2220      	movs	r2, #32
 8004ed2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	2200      	movs	r2, #0
 8004eda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004ede:	6878      	ldr	r0, [r7, #4]
 8004ee0:	f7fe fff9 	bl	8003ed6 <HAL_I2C_SlaveRxCpltCallback>
}
 8004ee4:	bf00      	nop
 8004ee6:	3710      	adds	r7, #16
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	bd80      	pop	{r7, pc}
 8004eec:	08005159 	.word	0x08005159
 8004ef0:	ffff0000 	.word	0xffff0000

08004ef4 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	b084      	sub	sp, #16
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f02:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004f0a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004f0c:	7bbb      	ldrb	r3, [r7, #14]
 8004f0e:	2b10      	cmp	r3, #16
 8004f10:	d002      	beq.n	8004f18 <I2C_ITError+0x24>
 8004f12:	7bbb      	ldrb	r3, [r7, #14]
 8004f14:	2b40      	cmp	r3, #64	; 0x40
 8004f16:	d10a      	bne.n	8004f2e <I2C_ITError+0x3a>
 8004f18:	7bfb      	ldrb	r3, [r7, #15]
 8004f1a:	2b22      	cmp	r3, #34	; 0x22
 8004f1c:	d107      	bne.n	8004f2e <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	681a      	ldr	r2, [r3, #0]
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004f2c:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004f2e:	7bfb      	ldrb	r3, [r7, #15]
 8004f30:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004f34:	2b28      	cmp	r3, #40	; 0x28
 8004f36:	d107      	bne.n	8004f48 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	2228      	movs	r2, #40	; 0x28
 8004f42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004f46:	e015      	b.n	8004f74 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	685b      	ldr	r3, [r3, #4]
 8004f4e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f52:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f56:	d00a      	beq.n	8004f6e <I2C_ITError+0x7a>
 8004f58:	7bfb      	ldrb	r3, [r7, #15]
 8004f5a:	2b60      	cmp	r3, #96	; 0x60
 8004f5c:	d007      	beq.n	8004f6e <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	2220      	movs	r2, #32
 8004f62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	2200      	movs	r2, #0
 8004f6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	2200      	movs	r2, #0
 8004f72:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	685b      	ldr	r3, [r3, #4]
 8004f7a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f7e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f82:	d162      	bne.n	800504a <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	685a      	ldr	r2, [r3, #4]
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004f92:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f98:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004f9c:	b2db      	uxtb	r3, r3
 8004f9e:	2b01      	cmp	r3, #1
 8004fa0:	d020      	beq.n	8004fe4 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fa6:	4a6a      	ldr	r2, [pc, #424]	; (8005150 <I2C_ITError+0x25c>)
 8004fa8:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fae:	4618      	mov	r0, r3
 8004fb0:	f7fe f84a 	bl	8003048 <HAL_DMA_Abort_IT>
 8004fb4:	4603      	mov	r3, r0
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	f000 8089 	beq.w	80050ce <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	681a      	ldr	r2, [r3, #0]
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f022 0201 	bic.w	r2, r2, #1
 8004fca:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2220      	movs	r2, #32
 8004fd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fd8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004fda:	687a      	ldr	r2, [r7, #4]
 8004fdc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004fde:	4610      	mov	r0, r2
 8004fe0:	4798      	blx	r3
 8004fe2:	e074      	b.n	80050ce <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fe8:	4a59      	ldr	r2, [pc, #356]	; (8005150 <I2C_ITError+0x25c>)
 8004fea:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	f7fe f829 	bl	8003048 <HAL_DMA_Abort_IT>
 8004ff6:	4603      	mov	r3, r0
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d068      	beq.n	80050ce <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	695b      	ldr	r3, [r3, #20]
 8005002:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005006:	2b40      	cmp	r3, #64	; 0x40
 8005008:	d10b      	bne.n	8005022 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	691a      	ldr	r2, [r3, #16]
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005014:	b2d2      	uxtb	r2, r2
 8005016:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800501c:	1c5a      	adds	r2, r3, #1
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	681a      	ldr	r2, [r3, #0]
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f022 0201 	bic.w	r2, r2, #1
 8005030:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	2220      	movs	r2, #32
 8005036:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800503e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005040:	687a      	ldr	r2, [r7, #4]
 8005042:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005044:	4610      	mov	r0, r2
 8005046:	4798      	blx	r3
 8005048:	e041      	b.n	80050ce <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005050:	b2db      	uxtb	r3, r3
 8005052:	2b60      	cmp	r3, #96	; 0x60
 8005054:	d125      	bne.n	80050a2 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	2220      	movs	r2, #32
 800505a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	2200      	movs	r2, #0
 8005062:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	695b      	ldr	r3, [r3, #20]
 800506a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800506e:	2b40      	cmp	r3, #64	; 0x40
 8005070:	d10b      	bne.n	800508a <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	691a      	ldr	r2, [r3, #16]
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800507c:	b2d2      	uxtb	r2, r2
 800507e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005084:	1c5a      	adds	r2, r3, #1
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	681a      	ldr	r2, [r3, #0]
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f022 0201 	bic.w	r2, r2, #1
 8005098:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800509a:	6878      	ldr	r0, [r7, #4]
 800509c:	f7fe ff5b 	bl	8003f56 <HAL_I2C_AbortCpltCallback>
 80050a0:	e015      	b.n	80050ce <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	695b      	ldr	r3, [r3, #20]
 80050a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050ac:	2b40      	cmp	r3, #64	; 0x40
 80050ae:	d10b      	bne.n	80050c8 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	691a      	ldr	r2, [r3, #16]
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ba:	b2d2      	uxtb	r2, r2
 80050bc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050c2:	1c5a      	adds	r2, r3, #1
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80050c8:	6878      	ldr	r0, [r7, #4]
 80050ca:	f7fe ff3a 	bl	8003f42 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050d2:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80050d4:	68bb      	ldr	r3, [r7, #8]
 80050d6:	f003 0301 	and.w	r3, r3, #1
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d10e      	bne.n	80050fc <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80050de:	68bb      	ldr	r3, [r7, #8]
 80050e0:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d109      	bne.n	80050fc <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80050e8:	68bb      	ldr	r3, [r7, #8]
 80050ea:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d104      	bne.n	80050fc <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80050f2:	68bb      	ldr	r3, [r7, #8]
 80050f4:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d007      	beq.n	800510c <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	685a      	ldr	r2, [r3, #4]
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800510a:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005112:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005118:	f003 0304 	and.w	r3, r3, #4
 800511c:	2b04      	cmp	r3, #4
 800511e:	d113      	bne.n	8005148 <I2C_ITError+0x254>
 8005120:	7bfb      	ldrb	r3, [r7, #15]
 8005122:	2b28      	cmp	r3, #40	; 0x28
 8005124:	d110      	bne.n	8005148 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	4a0a      	ldr	r2, [pc, #40]	; (8005154 <I2C_ITError+0x260>)
 800512a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2200      	movs	r2, #0
 8005130:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	2220      	movs	r2, #32
 8005136:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	2200      	movs	r2, #0
 800513e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8005142:	6878      	ldr	r0, [r7, #4]
 8005144:	f7fe fedf 	bl	8003f06 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005148:	bf00      	nop
 800514a:	3710      	adds	r7, #16
 800514c:	46bd      	mov	sp, r7
 800514e:	bd80      	pop	{r7, pc}
 8005150:	08005159 	.word	0x08005159
 8005154:	ffff0000 	.word	0xffff0000

08005158 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005158:	b580      	push	{r7, lr}
 800515a:	b086      	sub	sp, #24
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005160:	2300      	movs	r3, #0
 8005162:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005168:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800516a:	697b      	ldr	r3, [r7, #20]
 800516c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005170:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8005172:	4b4b      	ldr	r3, [pc, #300]	; (80052a0 <I2C_DMAAbort+0x148>)
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	08db      	lsrs	r3, r3, #3
 8005178:	4a4a      	ldr	r2, [pc, #296]	; (80052a4 <I2C_DMAAbort+0x14c>)
 800517a:	fba2 2303 	umull	r2, r3, r2, r3
 800517e:	0a1a      	lsrs	r2, r3, #8
 8005180:	4613      	mov	r3, r2
 8005182:	009b      	lsls	r3, r3, #2
 8005184:	4413      	add	r3, r2
 8005186:	00da      	lsls	r2, r3, #3
 8005188:	1ad3      	subs	r3, r2, r3
 800518a:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	2b00      	cmp	r3, #0
 8005190:	d106      	bne.n	80051a0 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005192:	697b      	ldr	r3, [r7, #20]
 8005194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005196:	f043 0220 	orr.w	r2, r3, #32
 800519a:	697b      	ldr	r3, [r7, #20]
 800519c:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 800519e:	e00a      	b.n	80051b6 <I2C_DMAAbort+0x5e>
    }
    count--;
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	3b01      	subs	r3, #1
 80051a4:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80051a6:	697b      	ldr	r3, [r7, #20]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80051b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80051b4:	d0ea      	beq.n	800518c <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80051b6:	697b      	ldr	r3, [r7, #20]
 80051b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d003      	beq.n	80051c6 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80051be:	697b      	ldr	r3, [r7, #20]
 80051c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051c2:	2200      	movs	r2, #0
 80051c4:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80051c6:	697b      	ldr	r3, [r7, #20]
 80051c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d003      	beq.n	80051d6 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80051ce:	697b      	ldr	r3, [r7, #20]
 80051d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051d2:	2200      	movs	r2, #0
 80051d4:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80051d6:	697b      	ldr	r3, [r7, #20]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	681a      	ldr	r2, [r3, #0]
 80051dc:	697b      	ldr	r3, [r7, #20]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80051e4:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80051e6:	697b      	ldr	r3, [r7, #20]
 80051e8:	2200      	movs	r2, #0
 80051ea:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80051ec:	697b      	ldr	r3, [r7, #20]
 80051ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d003      	beq.n	80051fc <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80051f4:	697b      	ldr	r3, [r7, #20]
 80051f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051f8:	2200      	movs	r2, #0
 80051fa:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 80051fc:	697b      	ldr	r3, [r7, #20]
 80051fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005200:	2b00      	cmp	r3, #0
 8005202:	d003      	beq.n	800520c <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8005204:	697b      	ldr	r3, [r7, #20]
 8005206:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005208:	2200      	movs	r2, #0
 800520a:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 800520c:	697b      	ldr	r3, [r7, #20]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	681a      	ldr	r2, [r3, #0]
 8005212:	697b      	ldr	r3, [r7, #20]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f022 0201 	bic.w	r2, r2, #1
 800521a:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800521c:	697b      	ldr	r3, [r7, #20]
 800521e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005222:	b2db      	uxtb	r3, r3
 8005224:	2b60      	cmp	r3, #96	; 0x60
 8005226:	d10e      	bne.n	8005246 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8005228:	697b      	ldr	r3, [r7, #20]
 800522a:	2220      	movs	r2, #32
 800522c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005230:	697b      	ldr	r3, [r7, #20]
 8005232:	2200      	movs	r2, #0
 8005234:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8005238:	697b      	ldr	r3, [r7, #20]
 800523a:	2200      	movs	r2, #0
 800523c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800523e:	6978      	ldr	r0, [r7, #20]
 8005240:	f7fe fe89 	bl	8003f56 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005244:	e027      	b.n	8005296 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005246:	7cfb      	ldrb	r3, [r7, #19]
 8005248:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800524c:	2b28      	cmp	r3, #40	; 0x28
 800524e:	d117      	bne.n	8005280 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8005250:	697b      	ldr	r3, [r7, #20]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	681a      	ldr	r2, [r3, #0]
 8005256:	697b      	ldr	r3, [r7, #20]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f042 0201 	orr.w	r2, r2, #1
 800525e:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005260:	697b      	ldr	r3, [r7, #20]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	681a      	ldr	r2, [r3, #0]
 8005266:	697b      	ldr	r3, [r7, #20]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800526e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005270:	697b      	ldr	r3, [r7, #20]
 8005272:	2200      	movs	r2, #0
 8005274:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005276:	697b      	ldr	r3, [r7, #20]
 8005278:	2228      	movs	r2, #40	; 0x28
 800527a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800527e:	e007      	b.n	8005290 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8005280:	697b      	ldr	r3, [r7, #20]
 8005282:	2220      	movs	r2, #32
 8005284:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005288:	697b      	ldr	r3, [r7, #20]
 800528a:	2200      	movs	r2, #0
 800528c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8005290:	6978      	ldr	r0, [r7, #20]
 8005292:	f7fe fe56 	bl	8003f42 <HAL_I2C_ErrorCallback>
}
 8005296:	bf00      	nop
 8005298:	3718      	adds	r7, #24
 800529a:	46bd      	mov	sp, r7
 800529c:	bd80      	pop	{r7, pc}
 800529e:	bf00      	nop
 80052a0:	20000000 	.word	0x20000000
 80052a4:	14f8b589 	.word	0x14f8b589

080052a8 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80052a8:	b480      	push	{r7}
 80052aa:	b085      	sub	sp, #20
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80052b0:	2300      	movs	r3, #0
 80052b2:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80052b4:	4b13      	ldr	r3, [pc, #76]	; (8005304 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	08db      	lsrs	r3, r3, #3
 80052ba:	4a13      	ldr	r2, [pc, #76]	; (8005308 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80052bc:	fba2 2303 	umull	r2, r3, r2, r3
 80052c0:	0a1a      	lsrs	r2, r3, #8
 80052c2:	4613      	mov	r3, r2
 80052c4:	009b      	lsls	r3, r3, #2
 80052c6:	4413      	add	r3, r2
 80052c8:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	3b01      	subs	r3, #1
 80052ce:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d107      	bne.n	80052e6 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052da:	f043 0220 	orr.w	r2, r3, #32
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80052e2:	2301      	movs	r3, #1
 80052e4:	e008      	b.n	80052f8 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80052f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80052f4:	d0e9      	beq.n	80052ca <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80052f6:	2300      	movs	r3, #0
}
 80052f8:	4618      	mov	r0, r3
 80052fa:	3714      	adds	r7, #20
 80052fc:	46bd      	mov	sp, r7
 80052fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005302:	4770      	bx	lr
 8005304:	20000000 	.word	0x20000000
 8005308:	14f8b589 	.word	0x14f8b589

0800530c <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800530c:	b480      	push	{r7}
 800530e:	b083      	sub	sp, #12
 8005310:	af00      	add	r7, sp, #0
 8005312:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005318:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800531c:	d103      	bne.n	8005326 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	2201      	movs	r2, #1
 8005322:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8005324:	e007      	b.n	8005336 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800532a:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800532e:	d102      	bne.n	8005336 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2208      	movs	r2, #8
 8005334:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8005336:	bf00      	nop
 8005338:	370c      	adds	r7, #12
 800533a:	46bd      	mov	sp, r7
 800533c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005340:	4770      	bx	lr
	...

08005344 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005344:	b580      	push	{r7, lr}
 8005346:	b086      	sub	sp, #24
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2b00      	cmp	r3, #0
 8005350:	d101      	bne.n	8005356 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005352:	2301      	movs	r3, #1
 8005354:	e267      	b.n	8005826 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f003 0301 	and.w	r3, r3, #1
 800535e:	2b00      	cmp	r3, #0
 8005360:	d075      	beq.n	800544e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005362:	4b88      	ldr	r3, [pc, #544]	; (8005584 <HAL_RCC_OscConfig+0x240>)
 8005364:	689b      	ldr	r3, [r3, #8]
 8005366:	f003 030c 	and.w	r3, r3, #12
 800536a:	2b04      	cmp	r3, #4
 800536c:	d00c      	beq.n	8005388 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800536e:	4b85      	ldr	r3, [pc, #532]	; (8005584 <HAL_RCC_OscConfig+0x240>)
 8005370:	689b      	ldr	r3, [r3, #8]
 8005372:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005376:	2b08      	cmp	r3, #8
 8005378:	d112      	bne.n	80053a0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800537a:	4b82      	ldr	r3, [pc, #520]	; (8005584 <HAL_RCC_OscConfig+0x240>)
 800537c:	685b      	ldr	r3, [r3, #4]
 800537e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005382:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005386:	d10b      	bne.n	80053a0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005388:	4b7e      	ldr	r3, [pc, #504]	; (8005584 <HAL_RCC_OscConfig+0x240>)
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005390:	2b00      	cmp	r3, #0
 8005392:	d05b      	beq.n	800544c <HAL_RCC_OscConfig+0x108>
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	685b      	ldr	r3, [r3, #4]
 8005398:	2b00      	cmp	r3, #0
 800539a:	d157      	bne.n	800544c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800539c:	2301      	movs	r3, #1
 800539e:	e242      	b.n	8005826 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	685b      	ldr	r3, [r3, #4]
 80053a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80053a8:	d106      	bne.n	80053b8 <HAL_RCC_OscConfig+0x74>
 80053aa:	4b76      	ldr	r3, [pc, #472]	; (8005584 <HAL_RCC_OscConfig+0x240>)
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	4a75      	ldr	r2, [pc, #468]	; (8005584 <HAL_RCC_OscConfig+0x240>)
 80053b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80053b4:	6013      	str	r3, [r2, #0]
 80053b6:	e01d      	b.n	80053f4 <HAL_RCC_OscConfig+0xb0>
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	685b      	ldr	r3, [r3, #4]
 80053bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80053c0:	d10c      	bne.n	80053dc <HAL_RCC_OscConfig+0x98>
 80053c2:	4b70      	ldr	r3, [pc, #448]	; (8005584 <HAL_RCC_OscConfig+0x240>)
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	4a6f      	ldr	r2, [pc, #444]	; (8005584 <HAL_RCC_OscConfig+0x240>)
 80053c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80053cc:	6013      	str	r3, [r2, #0]
 80053ce:	4b6d      	ldr	r3, [pc, #436]	; (8005584 <HAL_RCC_OscConfig+0x240>)
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	4a6c      	ldr	r2, [pc, #432]	; (8005584 <HAL_RCC_OscConfig+0x240>)
 80053d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80053d8:	6013      	str	r3, [r2, #0]
 80053da:	e00b      	b.n	80053f4 <HAL_RCC_OscConfig+0xb0>
 80053dc:	4b69      	ldr	r3, [pc, #420]	; (8005584 <HAL_RCC_OscConfig+0x240>)
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	4a68      	ldr	r2, [pc, #416]	; (8005584 <HAL_RCC_OscConfig+0x240>)
 80053e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80053e6:	6013      	str	r3, [r2, #0]
 80053e8:	4b66      	ldr	r3, [pc, #408]	; (8005584 <HAL_RCC_OscConfig+0x240>)
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	4a65      	ldr	r2, [pc, #404]	; (8005584 <HAL_RCC_OscConfig+0x240>)
 80053ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80053f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	685b      	ldr	r3, [r3, #4]
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d013      	beq.n	8005424 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053fc:	f7fc fc9e 	bl	8001d3c <HAL_GetTick>
 8005400:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005402:	e008      	b.n	8005416 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005404:	f7fc fc9a 	bl	8001d3c <HAL_GetTick>
 8005408:	4602      	mov	r2, r0
 800540a:	693b      	ldr	r3, [r7, #16]
 800540c:	1ad3      	subs	r3, r2, r3
 800540e:	2b64      	cmp	r3, #100	; 0x64
 8005410:	d901      	bls.n	8005416 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005412:	2303      	movs	r3, #3
 8005414:	e207      	b.n	8005826 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005416:	4b5b      	ldr	r3, [pc, #364]	; (8005584 <HAL_RCC_OscConfig+0x240>)
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800541e:	2b00      	cmp	r3, #0
 8005420:	d0f0      	beq.n	8005404 <HAL_RCC_OscConfig+0xc0>
 8005422:	e014      	b.n	800544e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005424:	f7fc fc8a 	bl	8001d3c <HAL_GetTick>
 8005428:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800542a:	e008      	b.n	800543e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800542c:	f7fc fc86 	bl	8001d3c <HAL_GetTick>
 8005430:	4602      	mov	r2, r0
 8005432:	693b      	ldr	r3, [r7, #16]
 8005434:	1ad3      	subs	r3, r2, r3
 8005436:	2b64      	cmp	r3, #100	; 0x64
 8005438:	d901      	bls.n	800543e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800543a:	2303      	movs	r3, #3
 800543c:	e1f3      	b.n	8005826 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800543e:	4b51      	ldr	r3, [pc, #324]	; (8005584 <HAL_RCC_OscConfig+0x240>)
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005446:	2b00      	cmp	r3, #0
 8005448:	d1f0      	bne.n	800542c <HAL_RCC_OscConfig+0xe8>
 800544a:	e000      	b.n	800544e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800544c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f003 0302 	and.w	r3, r3, #2
 8005456:	2b00      	cmp	r3, #0
 8005458:	d063      	beq.n	8005522 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800545a:	4b4a      	ldr	r3, [pc, #296]	; (8005584 <HAL_RCC_OscConfig+0x240>)
 800545c:	689b      	ldr	r3, [r3, #8]
 800545e:	f003 030c 	and.w	r3, r3, #12
 8005462:	2b00      	cmp	r3, #0
 8005464:	d00b      	beq.n	800547e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005466:	4b47      	ldr	r3, [pc, #284]	; (8005584 <HAL_RCC_OscConfig+0x240>)
 8005468:	689b      	ldr	r3, [r3, #8]
 800546a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800546e:	2b08      	cmp	r3, #8
 8005470:	d11c      	bne.n	80054ac <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005472:	4b44      	ldr	r3, [pc, #272]	; (8005584 <HAL_RCC_OscConfig+0x240>)
 8005474:	685b      	ldr	r3, [r3, #4]
 8005476:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800547a:	2b00      	cmp	r3, #0
 800547c:	d116      	bne.n	80054ac <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800547e:	4b41      	ldr	r3, [pc, #260]	; (8005584 <HAL_RCC_OscConfig+0x240>)
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f003 0302 	and.w	r3, r3, #2
 8005486:	2b00      	cmp	r3, #0
 8005488:	d005      	beq.n	8005496 <HAL_RCC_OscConfig+0x152>
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	68db      	ldr	r3, [r3, #12]
 800548e:	2b01      	cmp	r3, #1
 8005490:	d001      	beq.n	8005496 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005492:	2301      	movs	r3, #1
 8005494:	e1c7      	b.n	8005826 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005496:	4b3b      	ldr	r3, [pc, #236]	; (8005584 <HAL_RCC_OscConfig+0x240>)
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	691b      	ldr	r3, [r3, #16]
 80054a2:	00db      	lsls	r3, r3, #3
 80054a4:	4937      	ldr	r1, [pc, #220]	; (8005584 <HAL_RCC_OscConfig+0x240>)
 80054a6:	4313      	orrs	r3, r2
 80054a8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80054aa:	e03a      	b.n	8005522 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	68db      	ldr	r3, [r3, #12]
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d020      	beq.n	80054f6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80054b4:	4b34      	ldr	r3, [pc, #208]	; (8005588 <HAL_RCC_OscConfig+0x244>)
 80054b6:	2201      	movs	r2, #1
 80054b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054ba:	f7fc fc3f 	bl	8001d3c <HAL_GetTick>
 80054be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80054c0:	e008      	b.n	80054d4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80054c2:	f7fc fc3b 	bl	8001d3c <HAL_GetTick>
 80054c6:	4602      	mov	r2, r0
 80054c8:	693b      	ldr	r3, [r7, #16]
 80054ca:	1ad3      	subs	r3, r2, r3
 80054cc:	2b02      	cmp	r3, #2
 80054ce:	d901      	bls.n	80054d4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80054d0:	2303      	movs	r3, #3
 80054d2:	e1a8      	b.n	8005826 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80054d4:	4b2b      	ldr	r3, [pc, #172]	; (8005584 <HAL_RCC_OscConfig+0x240>)
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f003 0302 	and.w	r3, r3, #2
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d0f0      	beq.n	80054c2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80054e0:	4b28      	ldr	r3, [pc, #160]	; (8005584 <HAL_RCC_OscConfig+0x240>)
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	691b      	ldr	r3, [r3, #16]
 80054ec:	00db      	lsls	r3, r3, #3
 80054ee:	4925      	ldr	r1, [pc, #148]	; (8005584 <HAL_RCC_OscConfig+0x240>)
 80054f0:	4313      	orrs	r3, r2
 80054f2:	600b      	str	r3, [r1, #0]
 80054f4:	e015      	b.n	8005522 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80054f6:	4b24      	ldr	r3, [pc, #144]	; (8005588 <HAL_RCC_OscConfig+0x244>)
 80054f8:	2200      	movs	r2, #0
 80054fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054fc:	f7fc fc1e 	bl	8001d3c <HAL_GetTick>
 8005500:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005502:	e008      	b.n	8005516 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005504:	f7fc fc1a 	bl	8001d3c <HAL_GetTick>
 8005508:	4602      	mov	r2, r0
 800550a:	693b      	ldr	r3, [r7, #16]
 800550c:	1ad3      	subs	r3, r2, r3
 800550e:	2b02      	cmp	r3, #2
 8005510:	d901      	bls.n	8005516 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005512:	2303      	movs	r3, #3
 8005514:	e187      	b.n	8005826 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005516:	4b1b      	ldr	r3, [pc, #108]	; (8005584 <HAL_RCC_OscConfig+0x240>)
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f003 0302 	and.w	r3, r3, #2
 800551e:	2b00      	cmp	r3, #0
 8005520:	d1f0      	bne.n	8005504 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f003 0308 	and.w	r3, r3, #8
 800552a:	2b00      	cmp	r3, #0
 800552c:	d036      	beq.n	800559c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	695b      	ldr	r3, [r3, #20]
 8005532:	2b00      	cmp	r3, #0
 8005534:	d016      	beq.n	8005564 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005536:	4b15      	ldr	r3, [pc, #84]	; (800558c <HAL_RCC_OscConfig+0x248>)
 8005538:	2201      	movs	r2, #1
 800553a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800553c:	f7fc fbfe 	bl	8001d3c <HAL_GetTick>
 8005540:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005542:	e008      	b.n	8005556 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005544:	f7fc fbfa 	bl	8001d3c <HAL_GetTick>
 8005548:	4602      	mov	r2, r0
 800554a:	693b      	ldr	r3, [r7, #16]
 800554c:	1ad3      	subs	r3, r2, r3
 800554e:	2b02      	cmp	r3, #2
 8005550:	d901      	bls.n	8005556 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005552:	2303      	movs	r3, #3
 8005554:	e167      	b.n	8005826 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005556:	4b0b      	ldr	r3, [pc, #44]	; (8005584 <HAL_RCC_OscConfig+0x240>)
 8005558:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800555a:	f003 0302 	and.w	r3, r3, #2
 800555e:	2b00      	cmp	r3, #0
 8005560:	d0f0      	beq.n	8005544 <HAL_RCC_OscConfig+0x200>
 8005562:	e01b      	b.n	800559c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005564:	4b09      	ldr	r3, [pc, #36]	; (800558c <HAL_RCC_OscConfig+0x248>)
 8005566:	2200      	movs	r2, #0
 8005568:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800556a:	f7fc fbe7 	bl	8001d3c <HAL_GetTick>
 800556e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005570:	e00e      	b.n	8005590 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005572:	f7fc fbe3 	bl	8001d3c <HAL_GetTick>
 8005576:	4602      	mov	r2, r0
 8005578:	693b      	ldr	r3, [r7, #16]
 800557a:	1ad3      	subs	r3, r2, r3
 800557c:	2b02      	cmp	r3, #2
 800557e:	d907      	bls.n	8005590 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005580:	2303      	movs	r3, #3
 8005582:	e150      	b.n	8005826 <HAL_RCC_OscConfig+0x4e2>
 8005584:	40023800 	.word	0x40023800
 8005588:	42470000 	.word	0x42470000
 800558c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005590:	4b88      	ldr	r3, [pc, #544]	; (80057b4 <HAL_RCC_OscConfig+0x470>)
 8005592:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005594:	f003 0302 	and.w	r3, r3, #2
 8005598:	2b00      	cmp	r3, #0
 800559a:	d1ea      	bne.n	8005572 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f003 0304 	and.w	r3, r3, #4
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	f000 8097 	beq.w	80056d8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80055aa:	2300      	movs	r3, #0
 80055ac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80055ae:	4b81      	ldr	r3, [pc, #516]	; (80057b4 <HAL_RCC_OscConfig+0x470>)
 80055b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d10f      	bne.n	80055da <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80055ba:	2300      	movs	r3, #0
 80055bc:	60bb      	str	r3, [r7, #8]
 80055be:	4b7d      	ldr	r3, [pc, #500]	; (80057b4 <HAL_RCC_OscConfig+0x470>)
 80055c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055c2:	4a7c      	ldr	r2, [pc, #496]	; (80057b4 <HAL_RCC_OscConfig+0x470>)
 80055c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80055c8:	6413      	str	r3, [r2, #64]	; 0x40
 80055ca:	4b7a      	ldr	r3, [pc, #488]	; (80057b4 <HAL_RCC_OscConfig+0x470>)
 80055cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055d2:	60bb      	str	r3, [r7, #8]
 80055d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80055d6:	2301      	movs	r3, #1
 80055d8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80055da:	4b77      	ldr	r3, [pc, #476]	; (80057b8 <HAL_RCC_OscConfig+0x474>)
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d118      	bne.n	8005618 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80055e6:	4b74      	ldr	r3, [pc, #464]	; (80057b8 <HAL_RCC_OscConfig+0x474>)
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	4a73      	ldr	r2, [pc, #460]	; (80057b8 <HAL_RCC_OscConfig+0x474>)
 80055ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80055f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80055f2:	f7fc fba3 	bl	8001d3c <HAL_GetTick>
 80055f6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80055f8:	e008      	b.n	800560c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80055fa:	f7fc fb9f 	bl	8001d3c <HAL_GetTick>
 80055fe:	4602      	mov	r2, r0
 8005600:	693b      	ldr	r3, [r7, #16]
 8005602:	1ad3      	subs	r3, r2, r3
 8005604:	2b02      	cmp	r3, #2
 8005606:	d901      	bls.n	800560c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005608:	2303      	movs	r3, #3
 800560a:	e10c      	b.n	8005826 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800560c:	4b6a      	ldr	r3, [pc, #424]	; (80057b8 <HAL_RCC_OscConfig+0x474>)
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005614:	2b00      	cmp	r3, #0
 8005616:	d0f0      	beq.n	80055fa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	689b      	ldr	r3, [r3, #8]
 800561c:	2b01      	cmp	r3, #1
 800561e:	d106      	bne.n	800562e <HAL_RCC_OscConfig+0x2ea>
 8005620:	4b64      	ldr	r3, [pc, #400]	; (80057b4 <HAL_RCC_OscConfig+0x470>)
 8005622:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005624:	4a63      	ldr	r2, [pc, #396]	; (80057b4 <HAL_RCC_OscConfig+0x470>)
 8005626:	f043 0301 	orr.w	r3, r3, #1
 800562a:	6713      	str	r3, [r2, #112]	; 0x70
 800562c:	e01c      	b.n	8005668 <HAL_RCC_OscConfig+0x324>
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	689b      	ldr	r3, [r3, #8]
 8005632:	2b05      	cmp	r3, #5
 8005634:	d10c      	bne.n	8005650 <HAL_RCC_OscConfig+0x30c>
 8005636:	4b5f      	ldr	r3, [pc, #380]	; (80057b4 <HAL_RCC_OscConfig+0x470>)
 8005638:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800563a:	4a5e      	ldr	r2, [pc, #376]	; (80057b4 <HAL_RCC_OscConfig+0x470>)
 800563c:	f043 0304 	orr.w	r3, r3, #4
 8005640:	6713      	str	r3, [r2, #112]	; 0x70
 8005642:	4b5c      	ldr	r3, [pc, #368]	; (80057b4 <HAL_RCC_OscConfig+0x470>)
 8005644:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005646:	4a5b      	ldr	r2, [pc, #364]	; (80057b4 <HAL_RCC_OscConfig+0x470>)
 8005648:	f043 0301 	orr.w	r3, r3, #1
 800564c:	6713      	str	r3, [r2, #112]	; 0x70
 800564e:	e00b      	b.n	8005668 <HAL_RCC_OscConfig+0x324>
 8005650:	4b58      	ldr	r3, [pc, #352]	; (80057b4 <HAL_RCC_OscConfig+0x470>)
 8005652:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005654:	4a57      	ldr	r2, [pc, #348]	; (80057b4 <HAL_RCC_OscConfig+0x470>)
 8005656:	f023 0301 	bic.w	r3, r3, #1
 800565a:	6713      	str	r3, [r2, #112]	; 0x70
 800565c:	4b55      	ldr	r3, [pc, #340]	; (80057b4 <HAL_RCC_OscConfig+0x470>)
 800565e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005660:	4a54      	ldr	r2, [pc, #336]	; (80057b4 <HAL_RCC_OscConfig+0x470>)
 8005662:	f023 0304 	bic.w	r3, r3, #4
 8005666:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	689b      	ldr	r3, [r3, #8]
 800566c:	2b00      	cmp	r3, #0
 800566e:	d015      	beq.n	800569c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005670:	f7fc fb64 	bl	8001d3c <HAL_GetTick>
 8005674:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005676:	e00a      	b.n	800568e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005678:	f7fc fb60 	bl	8001d3c <HAL_GetTick>
 800567c:	4602      	mov	r2, r0
 800567e:	693b      	ldr	r3, [r7, #16]
 8005680:	1ad3      	subs	r3, r2, r3
 8005682:	f241 3288 	movw	r2, #5000	; 0x1388
 8005686:	4293      	cmp	r3, r2
 8005688:	d901      	bls.n	800568e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800568a:	2303      	movs	r3, #3
 800568c:	e0cb      	b.n	8005826 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800568e:	4b49      	ldr	r3, [pc, #292]	; (80057b4 <HAL_RCC_OscConfig+0x470>)
 8005690:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005692:	f003 0302 	and.w	r3, r3, #2
 8005696:	2b00      	cmp	r3, #0
 8005698:	d0ee      	beq.n	8005678 <HAL_RCC_OscConfig+0x334>
 800569a:	e014      	b.n	80056c6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800569c:	f7fc fb4e 	bl	8001d3c <HAL_GetTick>
 80056a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80056a2:	e00a      	b.n	80056ba <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80056a4:	f7fc fb4a 	bl	8001d3c <HAL_GetTick>
 80056a8:	4602      	mov	r2, r0
 80056aa:	693b      	ldr	r3, [r7, #16]
 80056ac:	1ad3      	subs	r3, r2, r3
 80056ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80056b2:	4293      	cmp	r3, r2
 80056b4:	d901      	bls.n	80056ba <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80056b6:	2303      	movs	r3, #3
 80056b8:	e0b5      	b.n	8005826 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80056ba:	4b3e      	ldr	r3, [pc, #248]	; (80057b4 <HAL_RCC_OscConfig+0x470>)
 80056bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056be:	f003 0302 	and.w	r3, r3, #2
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d1ee      	bne.n	80056a4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80056c6:	7dfb      	ldrb	r3, [r7, #23]
 80056c8:	2b01      	cmp	r3, #1
 80056ca:	d105      	bne.n	80056d8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80056cc:	4b39      	ldr	r3, [pc, #228]	; (80057b4 <HAL_RCC_OscConfig+0x470>)
 80056ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056d0:	4a38      	ldr	r2, [pc, #224]	; (80057b4 <HAL_RCC_OscConfig+0x470>)
 80056d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80056d6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	699b      	ldr	r3, [r3, #24]
 80056dc:	2b00      	cmp	r3, #0
 80056de:	f000 80a1 	beq.w	8005824 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80056e2:	4b34      	ldr	r3, [pc, #208]	; (80057b4 <HAL_RCC_OscConfig+0x470>)
 80056e4:	689b      	ldr	r3, [r3, #8]
 80056e6:	f003 030c 	and.w	r3, r3, #12
 80056ea:	2b08      	cmp	r3, #8
 80056ec:	d05c      	beq.n	80057a8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	699b      	ldr	r3, [r3, #24]
 80056f2:	2b02      	cmp	r3, #2
 80056f4:	d141      	bne.n	800577a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80056f6:	4b31      	ldr	r3, [pc, #196]	; (80057bc <HAL_RCC_OscConfig+0x478>)
 80056f8:	2200      	movs	r2, #0
 80056fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056fc:	f7fc fb1e 	bl	8001d3c <HAL_GetTick>
 8005700:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005702:	e008      	b.n	8005716 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005704:	f7fc fb1a 	bl	8001d3c <HAL_GetTick>
 8005708:	4602      	mov	r2, r0
 800570a:	693b      	ldr	r3, [r7, #16]
 800570c:	1ad3      	subs	r3, r2, r3
 800570e:	2b02      	cmp	r3, #2
 8005710:	d901      	bls.n	8005716 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005712:	2303      	movs	r3, #3
 8005714:	e087      	b.n	8005826 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005716:	4b27      	ldr	r3, [pc, #156]	; (80057b4 <HAL_RCC_OscConfig+0x470>)
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800571e:	2b00      	cmp	r3, #0
 8005720:	d1f0      	bne.n	8005704 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	69da      	ldr	r2, [r3, #28]
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	6a1b      	ldr	r3, [r3, #32]
 800572a:	431a      	orrs	r2, r3
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005730:	019b      	lsls	r3, r3, #6
 8005732:	431a      	orrs	r2, r3
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005738:	085b      	lsrs	r3, r3, #1
 800573a:	3b01      	subs	r3, #1
 800573c:	041b      	lsls	r3, r3, #16
 800573e:	431a      	orrs	r2, r3
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005744:	061b      	lsls	r3, r3, #24
 8005746:	491b      	ldr	r1, [pc, #108]	; (80057b4 <HAL_RCC_OscConfig+0x470>)
 8005748:	4313      	orrs	r3, r2
 800574a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800574c:	4b1b      	ldr	r3, [pc, #108]	; (80057bc <HAL_RCC_OscConfig+0x478>)
 800574e:	2201      	movs	r2, #1
 8005750:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005752:	f7fc faf3 	bl	8001d3c <HAL_GetTick>
 8005756:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005758:	e008      	b.n	800576c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800575a:	f7fc faef 	bl	8001d3c <HAL_GetTick>
 800575e:	4602      	mov	r2, r0
 8005760:	693b      	ldr	r3, [r7, #16]
 8005762:	1ad3      	subs	r3, r2, r3
 8005764:	2b02      	cmp	r3, #2
 8005766:	d901      	bls.n	800576c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005768:	2303      	movs	r3, #3
 800576a:	e05c      	b.n	8005826 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800576c:	4b11      	ldr	r3, [pc, #68]	; (80057b4 <HAL_RCC_OscConfig+0x470>)
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005774:	2b00      	cmp	r3, #0
 8005776:	d0f0      	beq.n	800575a <HAL_RCC_OscConfig+0x416>
 8005778:	e054      	b.n	8005824 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800577a:	4b10      	ldr	r3, [pc, #64]	; (80057bc <HAL_RCC_OscConfig+0x478>)
 800577c:	2200      	movs	r2, #0
 800577e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005780:	f7fc fadc 	bl	8001d3c <HAL_GetTick>
 8005784:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005786:	e008      	b.n	800579a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005788:	f7fc fad8 	bl	8001d3c <HAL_GetTick>
 800578c:	4602      	mov	r2, r0
 800578e:	693b      	ldr	r3, [r7, #16]
 8005790:	1ad3      	subs	r3, r2, r3
 8005792:	2b02      	cmp	r3, #2
 8005794:	d901      	bls.n	800579a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005796:	2303      	movs	r3, #3
 8005798:	e045      	b.n	8005826 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800579a:	4b06      	ldr	r3, [pc, #24]	; (80057b4 <HAL_RCC_OscConfig+0x470>)
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d1f0      	bne.n	8005788 <HAL_RCC_OscConfig+0x444>
 80057a6:	e03d      	b.n	8005824 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	699b      	ldr	r3, [r3, #24]
 80057ac:	2b01      	cmp	r3, #1
 80057ae:	d107      	bne.n	80057c0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80057b0:	2301      	movs	r3, #1
 80057b2:	e038      	b.n	8005826 <HAL_RCC_OscConfig+0x4e2>
 80057b4:	40023800 	.word	0x40023800
 80057b8:	40007000 	.word	0x40007000
 80057bc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80057c0:	4b1b      	ldr	r3, [pc, #108]	; (8005830 <HAL_RCC_OscConfig+0x4ec>)
 80057c2:	685b      	ldr	r3, [r3, #4]
 80057c4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	699b      	ldr	r3, [r3, #24]
 80057ca:	2b01      	cmp	r3, #1
 80057cc:	d028      	beq.n	8005820 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80057d8:	429a      	cmp	r2, r3
 80057da:	d121      	bne.n	8005820 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80057e6:	429a      	cmp	r2, r3
 80057e8:	d11a      	bne.n	8005820 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80057ea:	68fa      	ldr	r2, [r7, #12]
 80057ec:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80057f0:	4013      	ands	r3, r2
 80057f2:	687a      	ldr	r2, [r7, #4]
 80057f4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80057f6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80057f8:	4293      	cmp	r3, r2
 80057fa:	d111      	bne.n	8005820 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005806:	085b      	lsrs	r3, r3, #1
 8005808:	3b01      	subs	r3, #1
 800580a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800580c:	429a      	cmp	r2, r3
 800580e:	d107      	bne.n	8005820 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800581a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800581c:	429a      	cmp	r2, r3
 800581e:	d001      	beq.n	8005824 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005820:	2301      	movs	r3, #1
 8005822:	e000      	b.n	8005826 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005824:	2300      	movs	r3, #0
}
 8005826:	4618      	mov	r0, r3
 8005828:	3718      	adds	r7, #24
 800582a:	46bd      	mov	sp, r7
 800582c:	bd80      	pop	{r7, pc}
 800582e:	bf00      	nop
 8005830:	40023800 	.word	0x40023800

08005834 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005834:	b580      	push	{r7, lr}
 8005836:	b084      	sub	sp, #16
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]
 800583c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	2b00      	cmp	r3, #0
 8005842:	d101      	bne.n	8005848 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005844:	2301      	movs	r3, #1
 8005846:	e0cc      	b.n	80059e2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005848:	4b68      	ldr	r3, [pc, #416]	; (80059ec <HAL_RCC_ClockConfig+0x1b8>)
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f003 0307 	and.w	r3, r3, #7
 8005850:	683a      	ldr	r2, [r7, #0]
 8005852:	429a      	cmp	r2, r3
 8005854:	d90c      	bls.n	8005870 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005856:	4b65      	ldr	r3, [pc, #404]	; (80059ec <HAL_RCC_ClockConfig+0x1b8>)
 8005858:	683a      	ldr	r2, [r7, #0]
 800585a:	b2d2      	uxtb	r2, r2
 800585c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800585e:	4b63      	ldr	r3, [pc, #396]	; (80059ec <HAL_RCC_ClockConfig+0x1b8>)
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f003 0307 	and.w	r3, r3, #7
 8005866:	683a      	ldr	r2, [r7, #0]
 8005868:	429a      	cmp	r2, r3
 800586a:	d001      	beq.n	8005870 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800586c:	2301      	movs	r3, #1
 800586e:	e0b8      	b.n	80059e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f003 0302 	and.w	r3, r3, #2
 8005878:	2b00      	cmp	r3, #0
 800587a:	d020      	beq.n	80058be <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f003 0304 	and.w	r3, r3, #4
 8005884:	2b00      	cmp	r3, #0
 8005886:	d005      	beq.n	8005894 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005888:	4b59      	ldr	r3, [pc, #356]	; (80059f0 <HAL_RCC_ClockConfig+0x1bc>)
 800588a:	689b      	ldr	r3, [r3, #8]
 800588c:	4a58      	ldr	r2, [pc, #352]	; (80059f0 <HAL_RCC_ClockConfig+0x1bc>)
 800588e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005892:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	f003 0308 	and.w	r3, r3, #8
 800589c:	2b00      	cmp	r3, #0
 800589e:	d005      	beq.n	80058ac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80058a0:	4b53      	ldr	r3, [pc, #332]	; (80059f0 <HAL_RCC_ClockConfig+0x1bc>)
 80058a2:	689b      	ldr	r3, [r3, #8]
 80058a4:	4a52      	ldr	r2, [pc, #328]	; (80059f0 <HAL_RCC_ClockConfig+0x1bc>)
 80058a6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80058aa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80058ac:	4b50      	ldr	r3, [pc, #320]	; (80059f0 <HAL_RCC_ClockConfig+0x1bc>)
 80058ae:	689b      	ldr	r3, [r3, #8]
 80058b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	689b      	ldr	r3, [r3, #8]
 80058b8:	494d      	ldr	r1, [pc, #308]	; (80059f0 <HAL_RCC_ClockConfig+0x1bc>)
 80058ba:	4313      	orrs	r3, r2
 80058bc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f003 0301 	and.w	r3, r3, #1
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d044      	beq.n	8005954 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	685b      	ldr	r3, [r3, #4]
 80058ce:	2b01      	cmp	r3, #1
 80058d0:	d107      	bne.n	80058e2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80058d2:	4b47      	ldr	r3, [pc, #284]	; (80059f0 <HAL_RCC_ClockConfig+0x1bc>)
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d119      	bne.n	8005912 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80058de:	2301      	movs	r3, #1
 80058e0:	e07f      	b.n	80059e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	685b      	ldr	r3, [r3, #4]
 80058e6:	2b02      	cmp	r3, #2
 80058e8:	d003      	beq.n	80058f2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80058ee:	2b03      	cmp	r3, #3
 80058f0:	d107      	bne.n	8005902 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80058f2:	4b3f      	ldr	r3, [pc, #252]	; (80059f0 <HAL_RCC_ClockConfig+0x1bc>)
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d109      	bne.n	8005912 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80058fe:	2301      	movs	r3, #1
 8005900:	e06f      	b.n	80059e2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005902:	4b3b      	ldr	r3, [pc, #236]	; (80059f0 <HAL_RCC_ClockConfig+0x1bc>)
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f003 0302 	and.w	r3, r3, #2
 800590a:	2b00      	cmp	r3, #0
 800590c:	d101      	bne.n	8005912 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800590e:	2301      	movs	r3, #1
 8005910:	e067      	b.n	80059e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005912:	4b37      	ldr	r3, [pc, #220]	; (80059f0 <HAL_RCC_ClockConfig+0x1bc>)
 8005914:	689b      	ldr	r3, [r3, #8]
 8005916:	f023 0203 	bic.w	r2, r3, #3
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	685b      	ldr	r3, [r3, #4]
 800591e:	4934      	ldr	r1, [pc, #208]	; (80059f0 <HAL_RCC_ClockConfig+0x1bc>)
 8005920:	4313      	orrs	r3, r2
 8005922:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005924:	f7fc fa0a 	bl	8001d3c <HAL_GetTick>
 8005928:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800592a:	e00a      	b.n	8005942 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800592c:	f7fc fa06 	bl	8001d3c <HAL_GetTick>
 8005930:	4602      	mov	r2, r0
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	1ad3      	subs	r3, r2, r3
 8005936:	f241 3288 	movw	r2, #5000	; 0x1388
 800593a:	4293      	cmp	r3, r2
 800593c:	d901      	bls.n	8005942 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800593e:	2303      	movs	r3, #3
 8005940:	e04f      	b.n	80059e2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005942:	4b2b      	ldr	r3, [pc, #172]	; (80059f0 <HAL_RCC_ClockConfig+0x1bc>)
 8005944:	689b      	ldr	r3, [r3, #8]
 8005946:	f003 020c 	and.w	r2, r3, #12
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	685b      	ldr	r3, [r3, #4]
 800594e:	009b      	lsls	r3, r3, #2
 8005950:	429a      	cmp	r2, r3
 8005952:	d1eb      	bne.n	800592c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005954:	4b25      	ldr	r3, [pc, #148]	; (80059ec <HAL_RCC_ClockConfig+0x1b8>)
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f003 0307 	and.w	r3, r3, #7
 800595c:	683a      	ldr	r2, [r7, #0]
 800595e:	429a      	cmp	r2, r3
 8005960:	d20c      	bcs.n	800597c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005962:	4b22      	ldr	r3, [pc, #136]	; (80059ec <HAL_RCC_ClockConfig+0x1b8>)
 8005964:	683a      	ldr	r2, [r7, #0]
 8005966:	b2d2      	uxtb	r2, r2
 8005968:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800596a:	4b20      	ldr	r3, [pc, #128]	; (80059ec <HAL_RCC_ClockConfig+0x1b8>)
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f003 0307 	and.w	r3, r3, #7
 8005972:	683a      	ldr	r2, [r7, #0]
 8005974:	429a      	cmp	r2, r3
 8005976:	d001      	beq.n	800597c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005978:	2301      	movs	r3, #1
 800597a:	e032      	b.n	80059e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	f003 0304 	and.w	r3, r3, #4
 8005984:	2b00      	cmp	r3, #0
 8005986:	d008      	beq.n	800599a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005988:	4b19      	ldr	r3, [pc, #100]	; (80059f0 <HAL_RCC_ClockConfig+0x1bc>)
 800598a:	689b      	ldr	r3, [r3, #8]
 800598c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	68db      	ldr	r3, [r3, #12]
 8005994:	4916      	ldr	r1, [pc, #88]	; (80059f0 <HAL_RCC_ClockConfig+0x1bc>)
 8005996:	4313      	orrs	r3, r2
 8005998:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	f003 0308 	and.w	r3, r3, #8
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d009      	beq.n	80059ba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80059a6:	4b12      	ldr	r3, [pc, #72]	; (80059f0 <HAL_RCC_ClockConfig+0x1bc>)
 80059a8:	689b      	ldr	r3, [r3, #8]
 80059aa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	691b      	ldr	r3, [r3, #16]
 80059b2:	00db      	lsls	r3, r3, #3
 80059b4:	490e      	ldr	r1, [pc, #56]	; (80059f0 <HAL_RCC_ClockConfig+0x1bc>)
 80059b6:	4313      	orrs	r3, r2
 80059b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80059ba:	f000 f82d 	bl	8005a18 <HAL_RCC_GetSysClockFreq>
 80059be:	4602      	mov	r2, r0
 80059c0:	4b0b      	ldr	r3, [pc, #44]	; (80059f0 <HAL_RCC_ClockConfig+0x1bc>)
 80059c2:	689b      	ldr	r3, [r3, #8]
 80059c4:	091b      	lsrs	r3, r3, #4
 80059c6:	f003 030f 	and.w	r3, r3, #15
 80059ca:	490a      	ldr	r1, [pc, #40]	; (80059f4 <HAL_RCC_ClockConfig+0x1c0>)
 80059cc:	5ccb      	ldrb	r3, [r1, r3]
 80059ce:	fa22 f303 	lsr.w	r3, r2, r3
 80059d2:	4a09      	ldr	r2, [pc, #36]	; (80059f8 <HAL_RCC_ClockConfig+0x1c4>)
 80059d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80059d6:	4b09      	ldr	r3, [pc, #36]	; (80059fc <HAL_RCC_ClockConfig+0x1c8>)
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	4618      	mov	r0, r3
 80059dc:	f7fc f96a 	bl	8001cb4 <HAL_InitTick>

  return HAL_OK;
 80059e0:	2300      	movs	r3, #0
}
 80059e2:	4618      	mov	r0, r3
 80059e4:	3710      	adds	r7, #16
 80059e6:	46bd      	mov	sp, r7
 80059e8:	bd80      	pop	{r7, pc}
 80059ea:	bf00      	nop
 80059ec:	40023c00 	.word	0x40023c00
 80059f0:	40023800 	.word	0x40023800
 80059f4:	0800e1ec 	.word	0x0800e1ec
 80059f8:	20000000 	.word	0x20000000
 80059fc:	20000004 	.word	0x20000004

08005a00 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8005a00:	b480      	push	{r7}
 8005a02:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8005a04:	4b03      	ldr	r3, [pc, #12]	; (8005a14 <HAL_RCC_EnableCSS+0x14>)
 8005a06:	2201      	movs	r2, #1
 8005a08:	601a      	str	r2, [r3, #0]
}
 8005a0a:	bf00      	nop
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a12:	4770      	bx	lr
 8005a14:	4247004c 	.word	0x4247004c

08005a18 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005a18:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005a1c:	b094      	sub	sp, #80	; 0x50
 8005a1e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005a20:	2300      	movs	r3, #0
 8005a22:	647b      	str	r3, [r7, #68]	; 0x44
 8005a24:	2300      	movs	r3, #0
 8005a26:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005a28:	2300      	movs	r3, #0
 8005a2a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005a2c:	2300      	movs	r3, #0
 8005a2e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005a30:	4b79      	ldr	r3, [pc, #484]	; (8005c18 <HAL_RCC_GetSysClockFreq+0x200>)
 8005a32:	689b      	ldr	r3, [r3, #8]
 8005a34:	f003 030c 	and.w	r3, r3, #12
 8005a38:	2b08      	cmp	r3, #8
 8005a3a:	d00d      	beq.n	8005a58 <HAL_RCC_GetSysClockFreq+0x40>
 8005a3c:	2b08      	cmp	r3, #8
 8005a3e:	f200 80e1 	bhi.w	8005c04 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d002      	beq.n	8005a4c <HAL_RCC_GetSysClockFreq+0x34>
 8005a46:	2b04      	cmp	r3, #4
 8005a48:	d003      	beq.n	8005a52 <HAL_RCC_GetSysClockFreq+0x3a>
 8005a4a:	e0db      	b.n	8005c04 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005a4c:	4b73      	ldr	r3, [pc, #460]	; (8005c1c <HAL_RCC_GetSysClockFreq+0x204>)
 8005a4e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005a50:	e0db      	b.n	8005c0a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005a52:	4b73      	ldr	r3, [pc, #460]	; (8005c20 <HAL_RCC_GetSysClockFreq+0x208>)
 8005a54:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005a56:	e0d8      	b.n	8005c0a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005a58:	4b6f      	ldr	r3, [pc, #444]	; (8005c18 <HAL_RCC_GetSysClockFreq+0x200>)
 8005a5a:	685b      	ldr	r3, [r3, #4]
 8005a5c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005a60:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005a62:	4b6d      	ldr	r3, [pc, #436]	; (8005c18 <HAL_RCC_GetSysClockFreq+0x200>)
 8005a64:	685b      	ldr	r3, [r3, #4]
 8005a66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d063      	beq.n	8005b36 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005a6e:	4b6a      	ldr	r3, [pc, #424]	; (8005c18 <HAL_RCC_GetSysClockFreq+0x200>)
 8005a70:	685b      	ldr	r3, [r3, #4]
 8005a72:	099b      	lsrs	r3, r3, #6
 8005a74:	2200      	movs	r2, #0
 8005a76:	63bb      	str	r3, [r7, #56]	; 0x38
 8005a78:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005a7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a80:	633b      	str	r3, [r7, #48]	; 0x30
 8005a82:	2300      	movs	r3, #0
 8005a84:	637b      	str	r3, [r7, #52]	; 0x34
 8005a86:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005a8a:	4622      	mov	r2, r4
 8005a8c:	462b      	mov	r3, r5
 8005a8e:	f04f 0000 	mov.w	r0, #0
 8005a92:	f04f 0100 	mov.w	r1, #0
 8005a96:	0159      	lsls	r1, r3, #5
 8005a98:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005a9c:	0150      	lsls	r0, r2, #5
 8005a9e:	4602      	mov	r2, r0
 8005aa0:	460b      	mov	r3, r1
 8005aa2:	4621      	mov	r1, r4
 8005aa4:	1a51      	subs	r1, r2, r1
 8005aa6:	6139      	str	r1, [r7, #16]
 8005aa8:	4629      	mov	r1, r5
 8005aaa:	eb63 0301 	sbc.w	r3, r3, r1
 8005aae:	617b      	str	r3, [r7, #20]
 8005ab0:	f04f 0200 	mov.w	r2, #0
 8005ab4:	f04f 0300 	mov.w	r3, #0
 8005ab8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005abc:	4659      	mov	r1, fp
 8005abe:	018b      	lsls	r3, r1, #6
 8005ac0:	4651      	mov	r1, sl
 8005ac2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005ac6:	4651      	mov	r1, sl
 8005ac8:	018a      	lsls	r2, r1, #6
 8005aca:	4651      	mov	r1, sl
 8005acc:	ebb2 0801 	subs.w	r8, r2, r1
 8005ad0:	4659      	mov	r1, fp
 8005ad2:	eb63 0901 	sbc.w	r9, r3, r1
 8005ad6:	f04f 0200 	mov.w	r2, #0
 8005ada:	f04f 0300 	mov.w	r3, #0
 8005ade:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005ae2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005ae6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005aea:	4690      	mov	r8, r2
 8005aec:	4699      	mov	r9, r3
 8005aee:	4623      	mov	r3, r4
 8005af0:	eb18 0303 	adds.w	r3, r8, r3
 8005af4:	60bb      	str	r3, [r7, #8]
 8005af6:	462b      	mov	r3, r5
 8005af8:	eb49 0303 	adc.w	r3, r9, r3
 8005afc:	60fb      	str	r3, [r7, #12]
 8005afe:	f04f 0200 	mov.w	r2, #0
 8005b02:	f04f 0300 	mov.w	r3, #0
 8005b06:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005b0a:	4629      	mov	r1, r5
 8005b0c:	024b      	lsls	r3, r1, #9
 8005b0e:	4621      	mov	r1, r4
 8005b10:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005b14:	4621      	mov	r1, r4
 8005b16:	024a      	lsls	r2, r1, #9
 8005b18:	4610      	mov	r0, r2
 8005b1a:	4619      	mov	r1, r3
 8005b1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b1e:	2200      	movs	r2, #0
 8005b20:	62bb      	str	r3, [r7, #40]	; 0x28
 8005b22:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005b24:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005b28:	f7fa fba2 	bl	8000270 <__aeabi_uldivmod>
 8005b2c:	4602      	mov	r2, r0
 8005b2e:	460b      	mov	r3, r1
 8005b30:	4613      	mov	r3, r2
 8005b32:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005b34:	e058      	b.n	8005be8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005b36:	4b38      	ldr	r3, [pc, #224]	; (8005c18 <HAL_RCC_GetSysClockFreq+0x200>)
 8005b38:	685b      	ldr	r3, [r3, #4]
 8005b3a:	099b      	lsrs	r3, r3, #6
 8005b3c:	2200      	movs	r2, #0
 8005b3e:	4618      	mov	r0, r3
 8005b40:	4611      	mov	r1, r2
 8005b42:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005b46:	623b      	str	r3, [r7, #32]
 8005b48:	2300      	movs	r3, #0
 8005b4a:	627b      	str	r3, [r7, #36]	; 0x24
 8005b4c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005b50:	4642      	mov	r2, r8
 8005b52:	464b      	mov	r3, r9
 8005b54:	f04f 0000 	mov.w	r0, #0
 8005b58:	f04f 0100 	mov.w	r1, #0
 8005b5c:	0159      	lsls	r1, r3, #5
 8005b5e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005b62:	0150      	lsls	r0, r2, #5
 8005b64:	4602      	mov	r2, r0
 8005b66:	460b      	mov	r3, r1
 8005b68:	4641      	mov	r1, r8
 8005b6a:	ebb2 0a01 	subs.w	sl, r2, r1
 8005b6e:	4649      	mov	r1, r9
 8005b70:	eb63 0b01 	sbc.w	fp, r3, r1
 8005b74:	f04f 0200 	mov.w	r2, #0
 8005b78:	f04f 0300 	mov.w	r3, #0
 8005b7c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005b80:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005b84:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005b88:	ebb2 040a 	subs.w	r4, r2, sl
 8005b8c:	eb63 050b 	sbc.w	r5, r3, fp
 8005b90:	f04f 0200 	mov.w	r2, #0
 8005b94:	f04f 0300 	mov.w	r3, #0
 8005b98:	00eb      	lsls	r3, r5, #3
 8005b9a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005b9e:	00e2      	lsls	r2, r4, #3
 8005ba0:	4614      	mov	r4, r2
 8005ba2:	461d      	mov	r5, r3
 8005ba4:	4643      	mov	r3, r8
 8005ba6:	18e3      	adds	r3, r4, r3
 8005ba8:	603b      	str	r3, [r7, #0]
 8005baa:	464b      	mov	r3, r9
 8005bac:	eb45 0303 	adc.w	r3, r5, r3
 8005bb0:	607b      	str	r3, [r7, #4]
 8005bb2:	f04f 0200 	mov.w	r2, #0
 8005bb6:	f04f 0300 	mov.w	r3, #0
 8005bba:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005bbe:	4629      	mov	r1, r5
 8005bc0:	028b      	lsls	r3, r1, #10
 8005bc2:	4621      	mov	r1, r4
 8005bc4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005bc8:	4621      	mov	r1, r4
 8005bca:	028a      	lsls	r2, r1, #10
 8005bcc:	4610      	mov	r0, r2
 8005bce:	4619      	mov	r1, r3
 8005bd0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005bd2:	2200      	movs	r2, #0
 8005bd4:	61bb      	str	r3, [r7, #24]
 8005bd6:	61fa      	str	r2, [r7, #28]
 8005bd8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005bdc:	f7fa fb48 	bl	8000270 <__aeabi_uldivmod>
 8005be0:	4602      	mov	r2, r0
 8005be2:	460b      	mov	r3, r1
 8005be4:	4613      	mov	r3, r2
 8005be6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005be8:	4b0b      	ldr	r3, [pc, #44]	; (8005c18 <HAL_RCC_GetSysClockFreq+0x200>)
 8005bea:	685b      	ldr	r3, [r3, #4]
 8005bec:	0c1b      	lsrs	r3, r3, #16
 8005bee:	f003 0303 	and.w	r3, r3, #3
 8005bf2:	3301      	adds	r3, #1
 8005bf4:	005b      	lsls	r3, r3, #1
 8005bf6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005bf8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005bfa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005bfc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c00:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005c02:	e002      	b.n	8005c0a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005c04:	4b05      	ldr	r3, [pc, #20]	; (8005c1c <HAL_RCC_GetSysClockFreq+0x204>)
 8005c06:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005c08:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005c0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005c0c:	4618      	mov	r0, r3
 8005c0e:	3750      	adds	r7, #80	; 0x50
 8005c10:	46bd      	mov	sp, r7
 8005c12:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005c16:	bf00      	nop
 8005c18:	40023800 	.word	0x40023800
 8005c1c:	00f42400 	.word	0x00f42400
 8005c20:	007a1200 	.word	0x007a1200

08005c24 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005c24:	b480      	push	{r7}
 8005c26:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005c28:	4b03      	ldr	r3, [pc, #12]	; (8005c38 <HAL_RCC_GetHCLKFreq+0x14>)
 8005c2a:	681b      	ldr	r3, [r3, #0]
}
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c34:	4770      	bx	lr
 8005c36:	bf00      	nop
 8005c38:	20000000 	.word	0x20000000

08005c3c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005c3c:	b580      	push	{r7, lr}
 8005c3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005c40:	f7ff fff0 	bl	8005c24 <HAL_RCC_GetHCLKFreq>
 8005c44:	4602      	mov	r2, r0
 8005c46:	4b05      	ldr	r3, [pc, #20]	; (8005c5c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005c48:	689b      	ldr	r3, [r3, #8]
 8005c4a:	0a9b      	lsrs	r3, r3, #10
 8005c4c:	f003 0307 	and.w	r3, r3, #7
 8005c50:	4903      	ldr	r1, [pc, #12]	; (8005c60 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005c52:	5ccb      	ldrb	r3, [r1, r3]
 8005c54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005c58:	4618      	mov	r0, r3
 8005c5a:	bd80      	pop	{r7, pc}
 8005c5c:	40023800 	.word	0x40023800
 8005c60:	0800e1fc 	.word	0x0800e1fc

08005c64 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005c64:	b580      	push	{r7, lr}
 8005c66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005c68:	f7ff ffdc 	bl	8005c24 <HAL_RCC_GetHCLKFreq>
 8005c6c:	4602      	mov	r2, r0
 8005c6e:	4b05      	ldr	r3, [pc, #20]	; (8005c84 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005c70:	689b      	ldr	r3, [r3, #8]
 8005c72:	0b5b      	lsrs	r3, r3, #13
 8005c74:	f003 0307 	and.w	r3, r3, #7
 8005c78:	4903      	ldr	r1, [pc, #12]	; (8005c88 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005c7a:	5ccb      	ldrb	r3, [r1, r3]
 8005c7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005c80:	4618      	mov	r0, r3
 8005c82:	bd80      	pop	{r7, pc}
 8005c84:	40023800 	.word	0x40023800
 8005c88:	0800e1fc 	.word	0x0800e1fc

08005c8c <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8005c8c:	b580      	push	{r7, lr}
 8005c8e:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 8005c90:	4b06      	ldr	r3, [pc, #24]	; (8005cac <HAL_RCC_NMI_IRQHandler+0x20>)
 8005c92:	68db      	ldr	r3, [r3, #12]
 8005c94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c98:	2b80      	cmp	r3, #128	; 0x80
 8005c9a:	d104      	bne.n	8005ca6 <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8005c9c:	f000 f80a 	bl	8005cb4 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8005ca0:	4b03      	ldr	r3, [pc, #12]	; (8005cb0 <HAL_RCC_NMI_IRQHandler+0x24>)
 8005ca2:	2280      	movs	r2, #128	; 0x80
 8005ca4:	701a      	strb	r2, [r3, #0]
  }
}
 8005ca6:	bf00      	nop
 8005ca8:	bd80      	pop	{r7, pc}
 8005caa:	bf00      	nop
 8005cac:	40023800 	.word	0x40023800
 8005cb0:	4002380e 	.word	0x4002380e

08005cb4 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8005cb4:	b480      	push	{r7}
 8005cb6:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 8005cb8:	bf00      	nop
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc0:	4770      	bx	lr
	...

08005cc4 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005cc4:	b580      	push	{r7, lr}
 8005cc6:	b086      	sub	sp, #24
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005ccc:	2300      	movs	r3, #0
 8005cce:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005cd0:	2300      	movs	r3, #0
 8005cd2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f003 0301 	and.w	r3, r3, #1
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d105      	bne.n	8005cec <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d035      	beq.n	8005d58 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005cec:	4b62      	ldr	r3, [pc, #392]	; (8005e78 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8005cee:	2200      	movs	r2, #0
 8005cf0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005cf2:	f7fc f823 	bl	8001d3c <HAL_GetTick>
 8005cf6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005cf8:	e008      	b.n	8005d0c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005cfa:	f7fc f81f 	bl	8001d3c <HAL_GetTick>
 8005cfe:	4602      	mov	r2, r0
 8005d00:	697b      	ldr	r3, [r7, #20]
 8005d02:	1ad3      	subs	r3, r2, r3
 8005d04:	2b02      	cmp	r3, #2
 8005d06:	d901      	bls.n	8005d0c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005d08:	2303      	movs	r3, #3
 8005d0a:	e0b0      	b.n	8005e6e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005d0c:	4b5b      	ldr	r3, [pc, #364]	; (8005e7c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d1f0      	bne.n	8005cfa <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	685b      	ldr	r3, [r3, #4]
 8005d1c:	019a      	lsls	r2, r3, #6
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	689b      	ldr	r3, [r3, #8]
 8005d22:	071b      	lsls	r3, r3, #28
 8005d24:	4955      	ldr	r1, [pc, #340]	; (8005e7c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005d26:	4313      	orrs	r3, r2
 8005d28:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005d2c:	4b52      	ldr	r3, [pc, #328]	; (8005e78 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8005d2e:	2201      	movs	r2, #1
 8005d30:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005d32:	f7fc f803 	bl	8001d3c <HAL_GetTick>
 8005d36:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005d38:	e008      	b.n	8005d4c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005d3a:	f7fb ffff 	bl	8001d3c <HAL_GetTick>
 8005d3e:	4602      	mov	r2, r0
 8005d40:	697b      	ldr	r3, [r7, #20]
 8005d42:	1ad3      	subs	r3, r2, r3
 8005d44:	2b02      	cmp	r3, #2
 8005d46:	d901      	bls.n	8005d4c <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005d48:	2303      	movs	r3, #3
 8005d4a:	e090      	b.n	8005e6e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005d4c:	4b4b      	ldr	r3, [pc, #300]	; (8005e7c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d0f0      	beq.n	8005d3a <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	f003 0302 	and.w	r3, r3, #2
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	f000 8083 	beq.w	8005e6c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005d66:	2300      	movs	r3, #0
 8005d68:	60fb      	str	r3, [r7, #12]
 8005d6a:	4b44      	ldr	r3, [pc, #272]	; (8005e7c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d6e:	4a43      	ldr	r2, [pc, #268]	; (8005e7c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005d70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d74:	6413      	str	r3, [r2, #64]	; 0x40
 8005d76:	4b41      	ldr	r3, [pc, #260]	; (8005e7c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d7e:	60fb      	str	r3, [r7, #12]
 8005d80:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005d82:	4b3f      	ldr	r3, [pc, #252]	; (8005e80 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	4a3e      	ldr	r2, [pc, #248]	; (8005e80 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005d88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d8c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005d8e:	f7fb ffd5 	bl	8001d3c <HAL_GetTick>
 8005d92:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005d94:	e008      	b.n	8005da8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005d96:	f7fb ffd1 	bl	8001d3c <HAL_GetTick>
 8005d9a:	4602      	mov	r2, r0
 8005d9c:	697b      	ldr	r3, [r7, #20]
 8005d9e:	1ad3      	subs	r3, r2, r3
 8005da0:	2b02      	cmp	r3, #2
 8005da2:	d901      	bls.n	8005da8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8005da4:	2303      	movs	r3, #3
 8005da6:	e062      	b.n	8005e6e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005da8:	4b35      	ldr	r3, [pc, #212]	; (8005e80 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d0f0      	beq.n	8005d96 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005db4:	4b31      	ldr	r3, [pc, #196]	; (8005e7c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005db6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005db8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005dbc:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005dbe:	693b      	ldr	r3, [r7, #16]
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d02f      	beq.n	8005e24 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	68db      	ldr	r3, [r3, #12]
 8005dc8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005dcc:	693a      	ldr	r2, [r7, #16]
 8005dce:	429a      	cmp	r2, r3
 8005dd0:	d028      	beq.n	8005e24 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005dd2:	4b2a      	ldr	r3, [pc, #168]	; (8005e7c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005dd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005dd6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005dda:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005ddc:	4b29      	ldr	r3, [pc, #164]	; (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005dde:	2201      	movs	r2, #1
 8005de0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005de2:	4b28      	ldr	r3, [pc, #160]	; (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005de4:	2200      	movs	r2, #0
 8005de6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005de8:	4a24      	ldr	r2, [pc, #144]	; (8005e7c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005dea:	693b      	ldr	r3, [r7, #16]
 8005dec:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005dee:	4b23      	ldr	r3, [pc, #140]	; (8005e7c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005df0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005df2:	f003 0301 	and.w	r3, r3, #1
 8005df6:	2b01      	cmp	r3, #1
 8005df8:	d114      	bne.n	8005e24 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005dfa:	f7fb ff9f 	bl	8001d3c <HAL_GetTick>
 8005dfe:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e00:	e00a      	b.n	8005e18 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005e02:	f7fb ff9b 	bl	8001d3c <HAL_GetTick>
 8005e06:	4602      	mov	r2, r0
 8005e08:	697b      	ldr	r3, [r7, #20]
 8005e0a:	1ad3      	subs	r3, r2, r3
 8005e0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e10:	4293      	cmp	r3, r2
 8005e12:	d901      	bls.n	8005e18 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8005e14:	2303      	movs	r3, #3
 8005e16:	e02a      	b.n	8005e6e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e18:	4b18      	ldr	r3, [pc, #96]	; (8005e7c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005e1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e1c:	f003 0302 	and.w	r3, r3, #2
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d0ee      	beq.n	8005e02 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	68db      	ldr	r3, [r3, #12]
 8005e28:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e2c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005e30:	d10d      	bne.n	8005e4e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8005e32:	4b12      	ldr	r3, [pc, #72]	; (8005e7c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005e34:	689b      	ldr	r3, [r3, #8]
 8005e36:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	68db      	ldr	r3, [r3, #12]
 8005e3e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005e42:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e46:	490d      	ldr	r1, [pc, #52]	; (8005e7c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005e48:	4313      	orrs	r3, r2
 8005e4a:	608b      	str	r3, [r1, #8]
 8005e4c:	e005      	b.n	8005e5a <HAL_RCCEx_PeriphCLKConfig+0x196>
 8005e4e:	4b0b      	ldr	r3, [pc, #44]	; (8005e7c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005e50:	689b      	ldr	r3, [r3, #8]
 8005e52:	4a0a      	ldr	r2, [pc, #40]	; (8005e7c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005e54:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005e58:	6093      	str	r3, [r2, #8]
 8005e5a:	4b08      	ldr	r3, [pc, #32]	; (8005e7c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005e5c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	68db      	ldr	r3, [r3, #12]
 8005e62:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005e66:	4905      	ldr	r1, [pc, #20]	; (8005e7c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005e68:	4313      	orrs	r3, r2
 8005e6a:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8005e6c:	2300      	movs	r3, #0
}
 8005e6e:	4618      	mov	r0, r3
 8005e70:	3718      	adds	r7, #24
 8005e72:	46bd      	mov	sp, r7
 8005e74:	bd80      	pop	{r7, pc}
 8005e76:	bf00      	nop
 8005e78:	42470068 	.word	0x42470068
 8005e7c:	40023800 	.word	0x40023800
 8005e80:	40007000 	.word	0x40007000
 8005e84:	42470e40 	.word	0x42470e40

08005e88 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005e88:	b580      	push	{r7, lr}
 8005e8a:	b084      	sub	sp, #16
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005e90:	2301      	movs	r3, #1
 8005e92:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d101      	bne.n	8005e9e <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8005e9a:	2301      	movs	r3, #1
 8005e9c:	e066      	b.n	8005f6c <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	7f5b      	ldrb	r3, [r3, #29]
 8005ea2:	b2db      	uxtb	r3, r3
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d105      	bne.n	8005eb4 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	2200      	movs	r2, #0
 8005eac:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8005eae:	6878      	ldr	r0, [r7, #4]
 8005eb0:	f7fb f97e 	bl	80011b0 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2202      	movs	r2, #2
 8005eb8:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	22ca      	movs	r2, #202	; 0xca
 8005ec0:	625a      	str	r2, [r3, #36]	; 0x24
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	2253      	movs	r2, #83	; 0x53
 8005ec8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005eca:	6878      	ldr	r0, [r7, #4]
 8005ecc:	f000 fa45 	bl	800635a <RTC_EnterInitMode>
 8005ed0:	4603      	mov	r3, r0
 8005ed2:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8005ed4:	7bfb      	ldrb	r3, [r7, #15]
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d12c      	bne.n	8005f34 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	689b      	ldr	r3, [r3, #8]
 8005ee0:	687a      	ldr	r2, [r7, #4]
 8005ee2:	6812      	ldr	r2, [r2, #0]
 8005ee4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005ee8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005eec:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	6899      	ldr	r1, [r3, #8]
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	685a      	ldr	r2, [r3, #4]
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	691b      	ldr	r3, [r3, #16]
 8005efc:	431a      	orrs	r2, r3
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	695b      	ldr	r3, [r3, #20]
 8005f02:	431a      	orrs	r2, r3
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	430a      	orrs	r2, r1
 8005f0a:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	687a      	ldr	r2, [r7, #4]
 8005f12:	68d2      	ldr	r2, [r2, #12]
 8005f14:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	6919      	ldr	r1, [r3, #16]
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	689b      	ldr	r3, [r3, #8]
 8005f20:	041a      	lsls	r2, r3, #16
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	430a      	orrs	r2, r1
 8005f28:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005f2a:	6878      	ldr	r0, [r7, #4]
 8005f2c:	f000 fa4c 	bl	80063c8 <RTC_ExitInitMode>
 8005f30:	4603      	mov	r3, r0
 8005f32:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8005f34:	7bfb      	ldrb	r3, [r7, #15]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d113      	bne.n	8005f62 <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005f48:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	699a      	ldr	r2, [r3, #24]
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	430a      	orrs	r2, r1
 8005f5a:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	2201      	movs	r2, #1
 8005f60:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	22ff      	movs	r2, #255	; 0xff
 8005f68:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 8005f6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f6c:	4618      	mov	r0, r3
 8005f6e:	3710      	adds	r7, #16
 8005f70:	46bd      	mov	sp, r7
 8005f72:	bd80      	pop	{r7, pc}

08005f74 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005f74:	b590      	push	{r4, r7, lr}
 8005f76:	b087      	sub	sp, #28
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	60f8      	str	r0, [r7, #12]
 8005f7c:	60b9      	str	r1, [r7, #8]
 8005f7e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8005f80:	2300      	movs	r3, #0
 8005f82:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	7f1b      	ldrb	r3, [r3, #28]
 8005f88:	2b01      	cmp	r3, #1
 8005f8a:	d101      	bne.n	8005f90 <HAL_RTC_SetTime+0x1c>
 8005f8c:	2302      	movs	r3, #2
 8005f8e:	e087      	b.n	80060a0 <HAL_RTC_SetTime+0x12c>
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	2201      	movs	r2, #1
 8005f94:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	2202      	movs	r2, #2
 8005f9a:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d126      	bne.n	8005ff0 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	689b      	ldr	r3, [r3, #8]
 8005fa8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d102      	bne.n	8005fb6 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005fb0:	68bb      	ldr	r3, [r7, #8]
 8005fb2:	2200      	movs	r2, #0
 8005fb4:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005fb6:	68bb      	ldr	r3, [r7, #8]
 8005fb8:	781b      	ldrb	r3, [r3, #0]
 8005fba:	4618      	mov	r0, r3
 8005fbc:	f000 fa29 	bl	8006412 <RTC_ByteToBcd2>
 8005fc0:	4603      	mov	r3, r0
 8005fc2:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005fc4:	68bb      	ldr	r3, [r7, #8]
 8005fc6:	785b      	ldrb	r3, [r3, #1]
 8005fc8:	4618      	mov	r0, r3
 8005fca:	f000 fa22 	bl	8006412 <RTC_ByteToBcd2>
 8005fce:	4603      	mov	r3, r0
 8005fd0:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005fd2:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8005fd4:	68bb      	ldr	r3, [r7, #8]
 8005fd6:	789b      	ldrb	r3, [r3, #2]
 8005fd8:	4618      	mov	r0, r3
 8005fda:	f000 fa1a 	bl	8006412 <RTC_ByteToBcd2>
 8005fde:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005fe0:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8005fe4:	68bb      	ldr	r3, [r7, #8]
 8005fe6:	78db      	ldrb	r3, [r3, #3]
 8005fe8:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005fea:	4313      	orrs	r3, r2
 8005fec:	617b      	str	r3, [r7, #20]
 8005fee:	e018      	b.n	8006022 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	689b      	ldr	r3, [r3, #8]
 8005ff6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d102      	bne.n	8006004 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005ffe:	68bb      	ldr	r3, [r7, #8]
 8006000:	2200      	movs	r2, #0
 8006002:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8006004:	68bb      	ldr	r3, [r7, #8]
 8006006:	781b      	ldrb	r3, [r3, #0]
 8006008:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800600a:	68bb      	ldr	r3, [r7, #8]
 800600c:	785b      	ldrb	r3, [r3, #1]
 800600e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8006010:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8006012:	68ba      	ldr	r2, [r7, #8]
 8006014:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8006016:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8006018:	68bb      	ldr	r3, [r7, #8]
 800601a:	78db      	ldrb	r3, [r3, #3]
 800601c:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800601e:	4313      	orrs	r3, r2
 8006020:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	22ca      	movs	r2, #202	; 0xca
 8006028:	625a      	str	r2, [r3, #36]	; 0x24
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	2253      	movs	r2, #83	; 0x53
 8006030:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8006032:	68f8      	ldr	r0, [r7, #12]
 8006034:	f000 f991 	bl	800635a <RTC_EnterInitMode>
 8006038:	4603      	mov	r3, r0
 800603a:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800603c:	7cfb      	ldrb	r3, [r7, #19]
 800603e:	2b00      	cmp	r3, #0
 8006040:	d120      	bne.n	8006084 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	681a      	ldr	r2, [r3, #0]
 8006046:	697b      	ldr	r3, [r7, #20]
 8006048:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800604c:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8006050:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	689a      	ldr	r2, [r3, #8]
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006060:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	6899      	ldr	r1, [r3, #8]
 8006068:	68bb      	ldr	r3, [r7, #8]
 800606a:	68da      	ldr	r2, [r3, #12]
 800606c:	68bb      	ldr	r3, [r7, #8]
 800606e:	691b      	ldr	r3, [r3, #16]
 8006070:	431a      	orrs	r2, r3
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	430a      	orrs	r2, r1
 8006078:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800607a:	68f8      	ldr	r0, [r7, #12]
 800607c:	f000 f9a4 	bl	80063c8 <RTC_ExitInitMode>
 8006080:	4603      	mov	r3, r0
 8006082:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8006084:	7cfb      	ldrb	r3, [r7, #19]
 8006086:	2b00      	cmp	r3, #0
 8006088:	d102      	bne.n	8006090 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	2201      	movs	r2, #1
 800608e:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	22ff      	movs	r2, #255	; 0xff
 8006096:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	2200      	movs	r2, #0
 800609c:	771a      	strb	r2, [r3, #28]

  return status;
 800609e:	7cfb      	ldrb	r3, [r7, #19]
}
 80060a0:	4618      	mov	r0, r3
 80060a2:	371c      	adds	r7, #28
 80060a4:	46bd      	mov	sp, r7
 80060a6:	bd90      	pop	{r4, r7, pc}

080060a8 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80060a8:	b580      	push	{r7, lr}
 80060aa:	b086      	sub	sp, #24
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	60f8      	str	r0, [r7, #12]
 80060b0:	60b9      	str	r1, [r7, #8]
 80060b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80060b4:	2300      	movs	r3, #0
 80060b6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80060be:	68bb      	ldr	r3, [r7, #8]
 80060c0:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	691b      	ldr	r3, [r3, #16]
 80060c8:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80060cc:	68bb      	ldr	r3, [r7, #8]
 80060ce:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80060da:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80060de:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 80060e0:	697b      	ldr	r3, [r7, #20]
 80060e2:	0c1b      	lsrs	r3, r3, #16
 80060e4:	b2db      	uxtb	r3, r3
 80060e6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80060ea:	b2da      	uxtb	r2, r3
 80060ec:	68bb      	ldr	r3, [r7, #8]
 80060ee:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 80060f0:	697b      	ldr	r3, [r7, #20]
 80060f2:	0a1b      	lsrs	r3, r3, #8
 80060f4:	b2db      	uxtb	r3, r3
 80060f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80060fa:	b2da      	uxtb	r2, r3
 80060fc:	68bb      	ldr	r3, [r7, #8]
 80060fe:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8006100:	697b      	ldr	r3, [r7, #20]
 8006102:	b2db      	uxtb	r3, r3
 8006104:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006108:	b2da      	uxtb	r2, r3
 800610a:	68bb      	ldr	r3, [r7, #8]
 800610c:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 800610e:	697b      	ldr	r3, [r7, #20]
 8006110:	0d9b      	lsrs	r3, r3, #22
 8006112:	b2db      	uxtb	r3, r3
 8006114:	f003 0301 	and.w	r3, r3, #1
 8006118:	b2da      	uxtb	r2, r3
 800611a:	68bb      	ldr	r3, [r7, #8]
 800611c:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	2b00      	cmp	r3, #0
 8006122:	d11a      	bne.n	800615a <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8006124:	68bb      	ldr	r3, [r7, #8]
 8006126:	781b      	ldrb	r3, [r3, #0]
 8006128:	4618      	mov	r0, r3
 800612a:	f000 f98f 	bl	800644c <RTC_Bcd2ToByte>
 800612e:	4603      	mov	r3, r0
 8006130:	461a      	mov	r2, r3
 8006132:	68bb      	ldr	r3, [r7, #8]
 8006134:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8006136:	68bb      	ldr	r3, [r7, #8]
 8006138:	785b      	ldrb	r3, [r3, #1]
 800613a:	4618      	mov	r0, r3
 800613c:	f000 f986 	bl	800644c <RTC_Bcd2ToByte>
 8006140:	4603      	mov	r3, r0
 8006142:	461a      	mov	r2, r3
 8006144:	68bb      	ldr	r3, [r7, #8]
 8006146:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8006148:	68bb      	ldr	r3, [r7, #8]
 800614a:	789b      	ldrb	r3, [r3, #2]
 800614c:	4618      	mov	r0, r3
 800614e:	f000 f97d 	bl	800644c <RTC_Bcd2ToByte>
 8006152:	4603      	mov	r3, r0
 8006154:	461a      	mov	r2, r3
 8006156:	68bb      	ldr	r3, [r7, #8]
 8006158:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800615a:	2300      	movs	r3, #0
}
 800615c:	4618      	mov	r0, r3
 800615e:	3718      	adds	r7, #24
 8006160:	46bd      	mov	sp, r7
 8006162:	bd80      	pop	{r7, pc}

08006164 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006164:	b590      	push	{r4, r7, lr}
 8006166:	b087      	sub	sp, #28
 8006168:	af00      	add	r7, sp, #0
 800616a:	60f8      	str	r0, [r7, #12]
 800616c:	60b9      	str	r1, [r7, #8]
 800616e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8006170:	2300      	movs	r3, #0
 8006172:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	7f1b      	ldrb	r3, [r3, #28]
 8006178:	2b01      	cmp	r3, #1
 800617a:	d101      	bne.n	8006180 <HAL_RTC_SetDate+0x1c>
 800617c:	2302      	movs	r3, #2
 800617e:	e071      	b.n	8006264 <HAL_RTC_SetDate+0x100>
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	2201      	movs	r2, #1
 8006184:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	2202      	movs	r2, #2
 800618a:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	2b00      	cmp	r3, #0
 8006190:	d10e      	bne.n	80061b0 <HAL_RTC_SetDate+0x4c>
 8006192:	68bb      	ldr	r3, [r7, #8]
 8006194:	785b      	ldrb	r3, [r3, #1]
 8006196:	f003 0310 	and.w	r3, r3, #16
 800619a:	2b00      	cmp	r3, #0
 800619c:	d008      	beq.n	80061b0 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800619e:	68bb      	ldr	r3, [r7, #8]
 80061a0:	785b      	ldrb	r3, [r3, #1]
 80061a2:	f023 0310 	bic.w	r3, r3, #16
 80061a6:	b2db      	uxtb	r3, r3
 80061a8:	330a      	adds	r3, #10
 80061aa:	b2da      	uxtb	r2, r3
 80061ac:	68bb      	ldr	r3, [r7, #8]
 80061ae:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d11c      	bne.n	80061f0 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80061b6:	68bb      	ldr	r3, [r7, #8]
 80061b8:	78db      	ldrb	r3, [r3, #3]
 80061ba:	4618      	mov	r0, r3
 80061bc:	f000 f929 	bl	8006412 <RTC_ByteToBcd2>
 80061c0:	4603      	mov	r3, r0
 80061c2:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80061c4:	68bb      	ldr	r3, [r7, #8]
 80061c6:	785b      	ldrb	r3, [r3, #1]
 80061c8:	4618      	mov	r0, r3
 80061ca:	f000 f922 	bl	8006412 <RTC_ByteToBcd2>
 80061ce:	4603      	mov	r3, r0
 80061d0:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80061d2:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 80061d4:	68bb      	ldr	r3, [r7, #8]
 80061d6:	789b      	ldrb	r3, [r3, #2]
 80061d8:	4618      	mov	r0, r3
 80061da:	f000 f91a 	bl	8006412 <RTC_ByteToBcd2>
 80061de:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80061e0:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 80061e4:	68bb      	ldr	r3, [r7, #8]
 80061e6:	781b      	ldrb	r3, [r3, #0]
 80061e8:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80061ea:	4313      	orrs	r3, r2
 80061ec:	617b      	str	r3, [r7, #20]
 80061ee:	e00e      	b.n	800620e <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80061f0:	68bb      	ldr	r3, [r7, #8]
 80061f2:	78db      	ldrb	r3, [r3, #3]
 80061f4:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80061f6:	68bb      	ldr	r3, [r7, #8]
 80061f8:	785b      	ldrb	r3, [r3, #1]
 80061fa:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80061fc:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 80061fe:	68ba      	ldr	r2, [r7, #8]
 8006200:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8006202:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8006204:	68bb      	ldr	r3, [r7, #8]
 8006206:	781b      	ldrb	r3, [r3, #0]
 8006208:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800620a:	4313      	orrs	r3, r2
 800620c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	22ca      	movs	r2, #202	; 0xca
 8006214:	625a      	str	r2, [r3, #36]	; 0x24
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	2253      	movs	r2, #83	; 0x53
 800621c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800621e:	68f8      	ldr	r0, [r7, #12]
 8006220:	f000 f89b 	bl	800635a <RTC_EnterInitMode>
 8006224:	4603      	mov	r3, r0
 8006226:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8006228:	7cfb      	ldrb	r3, [r7, #19]
 800622a:	2b00      	cmp	r3, #0
 800622c:	d10c      	bne.n	8006248 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	681a      	ldr	r2, [r3, #0]
 8006232:	697b      	ldr	r3, [r7, #20]
 8006234:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006238:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800623c:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800623e:	68f8      	ldr	r0, [r7, #12]
 8006240:	f000 f8c2 	bl	80063c8 <RTC_ExitInitMode>
 8006244:	4603      	mov	r3, r0
 8006246:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8006248:	7cfb      	ldrb	r3, [r7, #19]
 800624a:	2b00      	cmp	r3, #0
 800624c:	d102      	bne.n	8006254 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	2201      	movs	r2, #1
 8006252:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	22ff      	movs	r2, #255	; 0xff
 800625a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	2200      	movs	r2, #0
 8006260:	771a      	strb	r2, [r3, #28]

  return status;
 8006262:	7cfb      	ldrb	r3, [r7, #19]
}
 8006264:	4618      	mov	r0, r3
 8006266:	371c      	adds	r7, #28
 8006268:	46bd      	mov	sp, r7
 800626a:	bd90      	pop	{r4, r7, pc}

0800626c <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800626c:	b580      	push	{r7, lr}
 800626e:	b086      	sub	sp, #24
 8006270:	af00      	add	r7, sp, #0
 8006272:	60f8      	str	r0, [r7, #12]
 8006274:	60b9      	str	r1, [r7, #8]
 8006276:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8006278:	2300      	movs	r3, #0
 800627a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	685b      	ldr	r3, [r3, #4]
 8006282:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006286:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800628a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800628c:	697b      	ldr	r3, [r7, #20]
 800628e:	0c1b      	lsrs	r3, r3, #16
 8006290:	b2da      	uxtb	r2, r3
 8006292:	68bb      	ldr	r3, [r7, #8]
 8006294:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8006296:	697b      	ldr	r3, [r7, #20]
 8006298:	0a1b      	lsrs	r3, r3, #8
 800629a:	b2db      	uxtb	r3, r3
 800629c:	f003 031f 	and.w	r3, r3, #31
 80062a0:	b2da      	uxtb	r2, r3
 80062a2:	68bb      	ldr	r3, [r7, #8]
 80062a4:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 80062a6:	697b      	ldr	r3, [r7, #20]
 80062a8:	b2db      	uxtb	r3, r3
 80062aa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80062ae:	b2da      	uxtb	r2, r3
 80062b0:	68bb      	ldr	r3, [r7, #8]
 80062b2:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 80062b4:	697b      	ldr	r3, [r7, #20]
 80062b6:	0b5b      	lsrs	r3, r3, #13
 80062b8:	b2db      	uxtb	r3, r3
 80062ba:	f003 0307 	and.w	r3, r3, #7
 80062be:	b2da      	uxtb	r2, r3
 80062c0:	68bb      	ldr	r3, [r7, #8]
 80062c2:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d11a      	bne.n	8006300 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80062ca:	68bb      	ldr	r3, [r7, #8]
 80062cc:	78db      	ldrb	r3, [r3, #3]
 80062ce:	4618      	mov	r0, r3
 80062d0:	f000 f8bc 	bl	800644c <RTC_Bcd2ToByte>
 80062d4:	4603      	mov	r3, r0
 80062d6:	461a      	mov	r2, r3
 80062d8:	68bb      	ldr	r3, [r7, #8]
 80062da:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80062dc:	68bb      	ldr	r3, [r7, #8]
 80062de:	785b      	ldrb	r3, [r3, #1]
 80062e0:	4618      	mov	r0, r3
 80062e2:	f000 f8b3 	bl	800644c <RTC_Bcd2ToByte>
 80062e6:	4603      	mov	r3, r0
 80062e8:	461a      	mov	r2, r3
 80062ea:	68bb      	ldr	r3, [r7, #8]
 80062ec:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80062ee:	68bb      	ldr	r3, [r7, #8]
 80062f0:	789b      	ldrb	r3, [r3, #2]
 80062f2:	4618      	mov	r0, r3
 80062f4:	f000 f8aa 	bl	800644c <RTC_Bcd2ToByte>
 80062f8:	4603      	mov	r3, r0
 80062fa:	461a      	mov	r2, r3
 80062fc:	68bb      	ldr	r3, [r7, #8]
 80062fe:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8006300:	2300      	movs	r3, #0
}
 8006302:	4618      	mov	r0, r3
 8006304:	3718      	adds	r7, #24
 8006306:	46bd      	mov	sp, r7
 8006308:	bd80      	pop	{r7, pc}

0800630a <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800630a:	b580      	push	{r7, lr}
 800630c:	b084      	sub	sp, #16
 800630e:	af00      	add	r7, sp, #0
 8006310:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006312:	2300      	movs	r3, #0
 8006314:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	68da      	ldr	r2, [r3, #12]
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006324:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006326:	f7fb fd09 	bl	8001d3c <HAL_GetTick>
 800632a:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800632c:	e009      	b.n	8006342 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800632e:	f7fb fd05 	bl	8001d3c <HAL_GetTick>
 8006332:	4602      	mov	r2, r0
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	1ad3      	subs	r3, r2, r3
 8006338:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800633c:	d901      	bls.n	8006342 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800633e:	2303      	movs	r3, #3
 8006340:	e007      	b.n	8006352 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	68db      	ldr	r3, [r3, #12]
 8006348:	f003 0320 	and.w	r3, r3, #32
 800634c:	2b00      	cmp	r3, #0
 800634e:	d0ee      	beq.n	800632e <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8006350:	2300      	movs	r3, #0
}
 8006352:	4618      	mov	r0, r3
 8006354:	3710      	adds	r7, #16
 8006356:	46bd      	mov	sp, r7
 8006358:	bd80      	pop	{r7, pc}

0800635a <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800635a:	b580      	push	{r7, lr}
 800635c:	b084      	sub	sp, #16
 800635e:	af00      	add	r7, sp, #0
 8006360:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006362:	2300      	movs	r3, #0
 8006364:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8006366:	2300      	movs	r3, #0
 8006368:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	68db      	ldr	r3, [r3, #12]
 8006370:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006374:	2b00      	cmp	r3, #0
 8006376:	d122      	bne.n	80063be <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	68da      	ldr	r2, [r3, #12]
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006386:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006388:	f7fb fcd8 	bl	8001d3c <HAL_GetTick>
 800638c:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800638e:	e00c      	b.n	80063aa <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006390:	f7fb fcd4 	bl	8001d3c <HAL_GetTick>
 8006394:	4602      	mov	r2, r0
 8006396:	68bb      	ldr	r3, [r7, #8]
 8006398:	1ad3      	subs	r3, r2, r3
 800639a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800639e:	d904      	bls.n	80063aa <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	2204      	movs	r2, #4
 80063a4:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 80063a6:	2301      	movs	r3, #1
 80063a8:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	68db      	ldr	r3, [r3, #12]
 80063b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d102      	bne.n	80063be <RTC_EnterInitMode+0x64>
 80063b8:	7bfb      	ldrb	r3, [r7, #15]
 80063ba:	2b01      	cmp	r3, #1
 80063bc:	d1e8      	bne.n	8006390 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 80063be:	7bfb      	ldrb	r3, [r7, #15]
}
 80063c0:	4618      	mov	r0, r3
 80063c2:	3710      	adds	r7, #16
 80063c4:	46bd      	mov	sp, r7
 80063c6:	bd80      	pop	{r7, pc}

080063c8 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80063c8:	b580      	push	{r7, lr}
 80063ca:	b084      	sub	sp, #16
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80063d0:	2300      	movs	r3, #0
 80063d2:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	68da      	ldr	r2, [r3, #12]
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80063e2:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	689b      	ldr	r3, [r3, #8]
 80063ea:	f003 0320 	and.w	r3, r3, #32
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d10a      	bne.n	8006408 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80063f2:	6878      	ldr	r0, [r7, #4]
 80063f4:	f7ff ff89 	bl	800630a <HAL_RTC_WaitForSynchro>
 80063f8:	4603      	mov	r3, r0
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d004      	beq.n	8006408 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	2204      	movs	r2, #4
 8006402:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8006404:	2301      	movs	r3, #1
 8006406:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8006408:	7bfb      	ldrb	r3, [r7, #15]
}
 800640a:	4618      	mov	r0, r3
 800640c:	3710      	adds	r7, #16
 800640e:	46bd      	mov	sp, r7
 8006410:	bd80      	pop	{r7, pc}

08006412 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8006412:	b480      	push	{r7}
 8006414:	b085      	sub	sp, #20
 8006416:	af00      	add	r7, sp, #0
 8006418:	4603      	mov	r3, r0
 800641a:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 800641c:	2300      	movs	r3, #0
 800641e:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 8006420:	e005      	b.n	800642e <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8006422:	7bfb      	ldrb	r3, [r7, #15]
 8006424:	3301      	adds	r3, #1
 8006426:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 8006428:	79fb      	ldrb	r3, [r7, #7]
 800642a:	3b0a      	subs	r3, #10
 800642c:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 800642e:	79fb      	ldrb	r3, [r7, #7]
 8006430:	2b09      	cmp	r3, #9
 8006432:	d8f6      	bhi.n	8006422 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8006434:	7bfb      	ldrb	r3, [r7, #15]
 8006436:	011b      	lsls	r3, r3, #4
 8006438:	b2da      	uxtb	r2, r3
 800643a:	79fb      	ldrb	r3, [r7, #7]
 800643c:	4313      	orrs	r3, r2
 800643e:	b2db      	uxtb	r3, r3
}
 8006440:	4618      	mov	r0, r3
 8006442:	3714      	adds	r7, #20
 8006444:	46bd      	mov	sp, r7
 8006446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644a:	4770      	bx	lr

0800644c <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 800644c:	b480      	push	{r7}
 800644e:	b085      	sub	sp, #20
 8006450:	af00      	add	r7, sp, #0
 8006452:	4603      	mov	r3, r0
 8006454:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 8006456:	2300      	movs	r3, #0
 8006458:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 800645a:	79fb      	ldrb	r3, [r7, #7]
 800645c:	091b      	lsrs	r3, r3, #4
 800645e:	b2db      	uxtb	r3, r3
 8006460:	461a      	mov	r2, r3
 8006462:	0092      	lsls	r2, r2, #2
 8006464:	4413      	add	r3, r2
 8006466:	005b      	lsls	r3, r3, #1
 8006468:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 800646a:	79fb      	ldrb	r3, [r7, #7]
 800646c:	f003 030f 	and.w	r3, r3, #15
 8006470:	b2da      	uxtb	r2, r3
 8006472:	7bfb      	ldrb	r3, [r7, #15]
 8006474:	4413      	add	r3, r2
 8006476:	b2db      	uxtb	r3, r3
}
 8006478:	4618      	mov	r0, r3
 800647a:	3714      	adds	r7, #20
 800647c:	46bd      	mov	sp, r7
 800647e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006482:	4770      	bx	lr

08006484 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8006484:	b580      	push	{r7, lr}
 8006486:	b082      	sub	sp, #8
 8006488:	af00      	add	r7, sp, #0
 800648a:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	2b00      	cmp	r3, #0
 8006490:	d101      	bne.n	8006496 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8006492:	2301      	movs	r3, #1
 8006494:	e022      	b.n	80064dc <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800649c:	b2db      	uxtb	r3, r3
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d105      	bne.n	80064ae <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	2200      	movs	r2, #0
 80064a6:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80064a8:	6878      	ldr	r0, [r7, #4]
 80064aa:	f7fa ffe9 	bl	8001480 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	2203      	movs	r2, #3
 80064b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80064b6:	6878      	ldr	r0, [r7, #4]
 80064b8:	f000 f814 	bl	80064e4 <HAL_SD_InitCard>
 80064bc:	4603      	mov	r3, r0
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d001      	beq.n	80064c6 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80064c2:	2301      	movs	r3, #1
 80064c4:	e00a      	b.n	80064dc <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	2200      	movs	r2, #0
 80064ca:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	2200      	movs	r2, #0
 80064d0:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	2201      	movs	r2, #1
 80064d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80064da:	2300      	movs	r3, #0
}
 80064dc:	4618      	mov	r0, r3
 80064de:	3708      	adds	r7, #8
 80064e0:	46bd      	mov	sp, r7
 80064e2:	bd80      	pop	{r7, pc}

080064e4 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80064e4:	b5b0      	push	{r4, r5, r7, lr}
 80064e6:	b08e      	sub	sp, #56	; 0x38
 80064e8:	af04      	add	r7, sp, #16
 80064ea:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 80064ec:	2300      	movs	r3, #0
 80064ee:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 80064f0:	2300      	movs	r3, #0
 80064f2:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80064f4:	2300      	movs	r3, #0
 80064f6:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 80064f8:	2300      	movs	r3, #0
 80064fa:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80064fc:	2300      	movs	r3, #0
 80064fe:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8006500:	2376      	movs	r3, #118	; 0x76
 8006502:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681d      	ldr	r5, [r3, #0]
 8006508:	466c      	mov	r4, sp
 800650a:	f107 0314 	add.w	r3, r7, #20
 800650e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006512:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006516:	f107 0308 	add.w	r3, r7, #8
 800651a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800651c:	4628      	mov	r0, r5
 800651e:	f002 fd77 	bl	8009010 <SDIO_Init>
 8006522:	4603      	mov	r3, r0
 8006524:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8006528:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800652c:	2b00      	cmp	r3, #0
 800652e:	d001      	beq.n	8006534 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8006530:	2301      	movs	r3, #1
 8006532:	e04f      	b.n	80065d4 <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8006534:	4b29      	ldr	r3, [pc, #164]	; (80065dc <HAL_SD_InitCard+0xf8>)
 8006536:	2200      	movs	r2, #0
 8006538:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	4618      	mov	r0, r3
 8006540:	f002 fdaf 	bl	80090a2 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8006544:	4b25      	ldr	r3, [pc, #148]	; (80065dc <HAL_SD_InitCard+0xf8>)
 8006546:	2201      	movs	r2, #1
 8006548:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 800654a:	2002      	movs	r0, #2
 800654c:	f7fb fc02 	bl	8001d54 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8006550:	6878      	ldr	r0, [r7, #4]
 8006552:	f000 ff6b 	bl	800742c <SD_PowerON>
 8006556:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006558:	6a3b      	ldr	r3, [r7, #32]
 800655a:	2b00      	cmp	r3, #0
 800655c:	d00b      	beq.n	8006576 <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	2201      	movs	r2, #1
 8006562:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800656a:	6a3b      	ldr	r3, [r7, #32]
 800656c:	431a      	orrs	r2, r3
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006572:	2301      	movs	r3, #1
 8006574:	e02e      	b.n	80065d4 <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8006576:	6878      	ldr	r0, [r7, #4]
 8006578:	f000 fe8a 	bl	8007290 <SD_InitCard>
 800657c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800657e:	6a3b      	ldr	r3, [r7, #32]
 8006580:	2b00      	cmp	r3, #0
 8006582:	d00b      	beq.n	800659c <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	2201      	movs	r2, #1
 8006588:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006590:	6a3b      	ldr	r3, [r7, #32]
 8006592:	431a      	orrs	r2, r3
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006598:	2301      	movs	r3, #1
 800659a:	e01b      	b.n	80065d4 <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80065a4:	4618      	mov	r0, r3
 80065a6:	f002 fe0e 	bl	80091c6 <SDMMC_CmdBlockLength>
 80065aa:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80065ac:	6a3b      	ldr	r3, [r7, #32]
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d00f      	beq.n	80065d2 <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	4a0a      	ldr	r2, [pc, #40]	; (80065e0 <HAL_SD_InitCard+0xfc>)
 80065b8:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80065be:	6a3b      	ldr	r3, [r7, #32]
 80065c0:	431a      	orrs	r2, r3
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	2201      	movs	r2, #1
 80065ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80065ce:	2301      	movs	r3, #1
 80065d0:	e000      	b.n	80065d4 <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 80065d2:	2300      	movs	r3, #0
}
 80065d4:	4618      	mov	r0, r3
 80065d6:	3728      	adds	r7, #40	; 0x28
 80065d8:	46bd      	mov	sp, r7
 80065da:	bdb0      	pop	{r4, r5, r7, pc}
 80065dc:	422580a0 	.word	0x422580a0
 80065e0:	004005ff 	.word	0x004005ff

080065e4 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 80065e4:	b580      	push	{r7, lr}
 80065e6:	b08c      	sub	sp, #48	; 0x30
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	60f8      	str	r0, [r7, #12]
 80065ec:	60b9      	str	r1, [r7, #8]
 80065ee:	607a      	str	r2, [r7, #4]
 80065f0:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 80065f6:	68bb      	ldr	r3, [r7, #8]
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d107      	bne.n	800660c <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006600:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006608:	2301      	movs	r3, #1
 800660a:	e0c0      	b.n	800678e <HAL_SD_ReadBlocks_DMA+0x1aa>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006612:	b2db      	uxtb	r3, r3
 8006614:	2b01      	cmp	r3, #1
 8006616:	f040 80b9 	bne.w	800678c <HAL_SD_ReadBlocks_DMA+0x1a8>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	2200      	movs	r2, #0
 800661e:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8006620:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006622:	683b      	ldr	r3, [r7, #0]
 8006624:	441a      	add	r2, r3
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800662a:	429a      	cmp	r2, r3
 800662c:	d907      	bls.n	800663e <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006632:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800663a:	2301      	movs	r3, #1
 800663c:	e0a7      	b.n	800678e <HAL_SD_ReadBlocks_DMA+0x1aa>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	2203      	movs	r2, #3
 8006642:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	2200      	movs	r2, #0
 800664c:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006654:	68fa      	ldr	r2, [r7, #12]
 8006656:	6812      	ldr	r2, [r2, #0]
 8006658:	f443 734a 	orr.w	r3, r3, #808	; 0x328
 800665c:	f043 0302 	orr.w	r3, r3, #2
 8006660:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006666:	4a4c      	ldr	r2, [pc, #304]	; (8006798 <HAL_SD_ReadBlocks_DMA+0x1b4>)
 8006668:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800666e:	4a4b      	ldr	r2, [pc, #300]	; (800679c <HAL_SD_ReadBlocks_DMA+0x1b8>)
 8006670:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006676:	2200      	movs	r2, #0
 8006678:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800667e:	2200      	movs	r2, #0
 8006680:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006692:	689a      	ldr	r2, [r3, #8]
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	430a      	orrs	r2, r1
 800669c:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	6c18      	ldr	r0, [r3, #64]	; 0x40
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	3380      	adds	r3, #128	; 0x80
 80066a8:	4619      	mov	r1, r3
 80066aa:	68ba      	ldr	r2, [r7, #8]
 80066ac:	683b      	ldr	r3, [r7, #0]
 80066ae:	025b      	lsls	r3, r3, #9
 80066b0:	089b      	lsrs	r3, r3, #2
 80066b2:	f7fc fc01 	bl	8002eb8 <HAL_DMA_Start_IT>
 80066b6:	4603      	mov	r3, r0
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d017      	beq.n	80066ec <HAL_SD_ReadBlocks_DMA+0x108>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 80066ca:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	4a33      	ldr	r2, [pc, #204]	; (80067a0 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 80066d2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066d8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	2201      	movs	r2, #1
 80066e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80066e8:	2301      	movs	r3, #1
 80066ea:	e050      	b.n	800678e <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 80066ec:	4b2d      	ldr	r3, [pc, #180]	; (80067a4 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 80066ee:	2201      	movs	r2, #1
 80066f0:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066f6:	2b01      	cmp	r3, #1
 80066f8:	d002      	beq.n	8006700 <HAL_SD_ReadBlocks_DMA+0x11c>
      {
        add *= 512U;
 80066fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066fc:	025b      	lsls	r3, r3, #9
 80066fe:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006700:	f04f 33ff 	mov.w	r3, #4294967295
 8006704:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8006706:	683b      	ldr	r3, [r7, #0]
 8006708:	025b      	lsls	r3, r3, #9
 800670a:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800670c:	2390      	movs	r3, #144	; 0x90
 800670e:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8006710:	2302      	movs	r3, #2
 8006712:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8006714:	2300      	movs	r3, #0
 8006716:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8006718:	2301      	movs	r3, #1
 800671a:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	f107 0210 	add.w	r2, r7, #16
 8006724:	4611      	mov	r1, r2
 8006726:	4618      	mov	r0, r3
 8006728:	f002 fd21 	bl	800916e <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 800672c:	683b      	ldr	r3, [r7, #0]
 800672e:	2b01      	cmp	r3, #1
 8006730:	d90a      	bls.n	8006748 <HAL_SD_ReadBlocks_DMA+0x164>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	2282      	movs	r2, #130	; 0x82
 8006736:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800673e:	4618      	mov	r0, r3
 8006740:	f002 fd85 	bl	800924e <SDMMC_CmdReadMultiBlock>
 8006744:	62f8      	str	r0, [r7, #44]	; 0x2c
 8006746:	e009      	b.n	800675c <HAL_SD_ReadBlocks_DMA+0x178>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	2281      	movs	r2, #129	; 0x81
 800674c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006754:	4618      	mov	r0, r3
 8006756:	f002 fd58 	bl	800920a <SDMMC_CmdReadSingleBlock>
 800675a:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 800675c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800675e:	2b00      	cmp	r3, #0
 8006760:	d012      	beq.n	8006788 <HAL_SD_ReadBlocks_DMA+0x1a4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	4a0e      	ldr	r2, [pc, #56]	; (80067a0 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8006768:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800676e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006770:	431a      	orrs	r2, r3
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	2201      	movs	r2, #1
 800677a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	2200      	movs	r2, #0
 8006782:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8006784:	2301      	movs	r3, #1
 8006786:	e002      	b.n	800678e <HAL_SD_ReadBlocks_DMA+0x1aa>
      }

      return HAL_OK;
 8006788:	2300      	movs	r3, #0
 800678a:	e000      	b.n	800678e <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
  }
  else
  {
    return HAL_BUSY;
 800678c:	2302      	movs	r3, #2
  }
}
 800678e:	4618      	mov	r0, r3
 8006790:	3730      	adds	r7, #48	; 0x30
 8006792:	46bd      	mov	sp, r7
 8006794:	bd80      	pop	{r7, pc}
 8006796:	bf00      	nop
 8006798:	0800709f 	.word	0x0800709f
 800679c:	08007111 	.word	0x08007111
 80067a0:	004005ff 	.word	0x004005ff
 80067a4:	4225858c 	.word	0x4225858c

080067a8 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 80067a8:	b580      	push	{r7, lr}
 80067aa:	b08c      	sub	sp, #48	; 0x30
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	60f8      	str	r0, [r7, #12]
 80067b0:	60b9      	str	r1, [r7, #8]
 80067b2:	607a      	str	r2, [r7, #4]
 80067b4:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 80067ba:	68bb      	ldr	r3, [r7, #8]
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d107      	bne.n	80067d0 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067c4:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80067cc:	2301      	movs	r3, #1
 80067ce:	e0c5      	b.n	800695c <HAL_SD_WriteBlocks_DMA+0x1b4>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80067d6:	b2db      	uxtb	r3, r3
 80067d8:	2b01      	cmp	r3, #1
 80067da:	f040 80be 	bne.w	800695a <HAL_SD_WriteBlocks_DMA+0x1b2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	2200      	movs	r2, #0
 80067e2:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80067e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80067e6:	683b      	ldr	r3, [r7, #0]
 80067e8:	441a      	add	r2, r3
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80067ee:	429a      	cmp	r2, r3
 80067f0:	d907      	bls.n	8006802 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067f6:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80067fe:	2301      	movs	r3, #1
 8006800:	e0ac      	b.n	800695c <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	2203      	movs	r2, #3
 8006806:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	2200      	movs	r2, #0
 8006810:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006818:	68fa      	ldr	r2, [r7, #12]
 800681a:	6812      	ldr	r2, [r2, #0]
 800681c:	f443 7306 	orr.w	r3, r3, #536	; 0x218
 8006820:	f043 0302 	orr.w	r3, r3, #2
 8006824:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800682a:	4a4e      	ldr	r2, [pc, #312]	; (8006964 <HAL_SD_WriteBlocks_DMA+0x1bc>)
 800682c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006832:	4a4d      	ldr	r2, [pc, #308]	; (8006968 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 8006834:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800683a:	2200      	movs	r2, #0
 800683c:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006842:	2b01      	cmp	r3, #1
 8006844:	d002      	beq.n	800684c <HAL_SD_WriteBlocks_DMA+0xa4>
    {
      add *= 512U;
 8006846:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006848:	025b      	lsls	r3, r3, #9
 800684a:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800684c:	683b      	ldr	r3, [r7, #0]
 800684e:	2b01      	cmp	r3, #1
 8006850:	d90a      	bls.n	8006868 <HAL_SD_WriteBlocks_DMA+0xc0>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	22a0      	movs	r2, #160	; 0xa0
 8006856:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800685e:	4618      	mov	r0, r3
 8006860:	f002 fd39 	bl	80092d6 <SDMMC_CmdWriteMultiBlock>
 8006864:	62f8      	str	r0, [r7, #44]	; 0x2c
 8006866:	e009      	b.n	800687c <HAL_SD_WriteBlocks_DMA+0xd4>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	2290      	movs	r2, #144	; 0x90
 800686c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006874:	4618      	mov	r0, r3
 8006876:	f002 fd0c 	bl	8009292 <SDMMC_CmdWriteSingleBlock>
 800687a:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800687c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800687e:	2b00      	cmp	r3, #0
 8006880:	d012      	beq.n	80068a8 <HAL_SD_WriteBlocks_DMA+0x100>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	4a39      	ldr	r2, [pc, #228]	; (800696c <HAL_SD_WriteBlocks_DMA+0x1c4>)
 8006888:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800688e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006890:	431a      	orrs	r2, r3
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	2201      	movs	r2, #1
 800689a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	2200      	movs	r2, #0
 80068a2:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80068a4:	2301      	movs	r3, #1
 80068a6:	e059      	b.n	800695c <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 80068a8:	4b31      	ldr	r3, [pc, #196]	; (8006970 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 80068aa:	2201      	movs	r2, #1
 80068ac:	601a      	str	r2, [r3, #0]

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068b2:	2240      	movs	r2, #64	; 0x40
 80068b4:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068c6:	689a      	ldr	r2, [r3, #8]
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	430a      	orrs	r2, r1
 80068d0:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80068d6:	68b9      	ldr	r1, [r7, #8]
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	3380      	adds	r3, #128	; 0x80
 80068de:	461a      	mov	r2, r3
 80068e0:	683b      	ldr	r3, [r7, #0]
 80068e2:	025b      	lsls	r3, r3, #9
 80068e4:	089b      	lsrs	r3, r3, #2
 80068e6:	f7fc fae7 	bl	8002eb8 <HAL_DMA_Start_IT>
 80068ea:	4603      	mov	r3, r0
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d01c      	beq.n	800692a <HAL_SD_WriteBlocks_DMA+0x182>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068f6:	68fa      	ldr	r2, [r7, #12]
 80068f8:	6812      	ldr	r2, [r2, #0]
 80068fa:	f423 7306 	bic.w	r3, r3, #536	; 0x218
 80068fe:	f023 0302 	bic.w	r3, r3, #2
 8006902:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	4a18      	ldr	r2, [pc, #96]	; (800696c <HAL_SD_WriteBlocks_DMA+0x1c4>)
 800690a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006910:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	2201      	movs	r2, #1
 800691c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	2200      	movs	r2, #0
 8006924:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8006926:	2301      	movs	r3, #1
 8006928:	e018      	b.n	800695c <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800692a:	f04f 33ff 	mov.w	r3, #4294967295
 800692e:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8006930:	683b      	ldr	r3, [r7, #0]
 8006932:	025b      	lsls	r3, r3, #9
 8006934:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8006936:	2390      	movs	r3, #144	; 0x90
 8006938:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 800693a:	2300      	movs	r3, #0
 800693c:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800693e:	2300      	movs	r3, #0
 8006940:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8006942:	2301      	movs	r3, #1
 8006944:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	f107 0210 	add.w	r2, r7, #16
 800694e:	4611      	mov	r1, r2
 8006950:	4618      	mov	r0, r3
 8006952:	f002 fc0c 	bl	800916e <SDIO_ConfigData>

      return HAL_OK;
 8006956:	2300      	movs	r3, #0
 8006958:	e000      	b.n	800695c <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_BUSY;
 800695a:	2302      	movs	r3, #2
  }
}
 800695c:	4618      	mov	r0, r3
 800695e:	3730      	adds	r7, #48	; 0x30
 8006960:	46bd      	mov	sp, r7
 8006962:	bd80      	pop	{r7, pc}
 8006964:	08007075 	.word	0x08007075
 8006968:	08007111 	.word	0x08007111
 800696c:	004005ff 	.word	0x004005ff
 8006970:	4225858c 	.word	0x4225858c

08006974 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8006974:	b580      	push	{r7, lr}
 8006976:	b084      	sub	sp, #16
 8006978:	af00      	add	r7, sp, #0
 800697a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006980:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006988:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800698c:	2b00      	cmp	r3, #0
 800698e:	d008      	beq.n	80069a2 <HAL_SD_IRQHandler+0x2e>
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	f003 0308 	and.w	r3, r3, #8
 8006996:	2b00      	cmp	r3, #0
 8006998:	d003      	beq.n	80069a2 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800699a:	6878      	ldr	r0, [r7, #4]
 800699c:	f000 fdfc 	bl	8007598 <SD_Read_IT>
 80069a0:	e165      	b.n	8006c6e <HAL_SD_IRQHandler+0x2fa>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	f000 808f 	beq.w	8006ad0 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80069ba:	639a      	str	r2, [r3, #56]	; 0x38

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069c2:	687a      	ldr	r2, [r7, #4]
 80069c4:	6812      	ldr	r2, [r2, #0]
 80069c6:	f423 4343 	bic.w	r3, r3, #49920	; 0xc300
 80069ca:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 80069ce:	63d3      	str	r3, [r2, #60]	; 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	f022 0201 	bic.w	r2, r2, #1
 80069de:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	f003 0308 	and.w	r3, r3, #8
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d039      	beq.n	8006a5e <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	f003 0302 	and.w	r3, r3, #2
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d104      	bne.n	80069fe <HAL_SD_IRQHandler+0x8a>
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	f003 0320 	and.w	r3, r3, #32
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d011      	beq.n	8006a22 <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	4618      	mov	r0, r3
 8006a04:	f002 fc8a 	bl	800931c <SDMMC_CmdStopTransfer>
 8006a08:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8006a0a:	68bb      	ldr	r3, [r7, #8]
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d008      	beq.n	8006a22 <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006a14:	68bb      	ldr	r3, [r7, #8]
 8006a16:	431a      	orrs	r2, r3
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8006a1c:	6878      	ldr	r0, [r7, #4]
 8006a1e:	f000 f92f 	bl	8006c80 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	f240 523a 	movw	r2, #1338	; 0x53a
 8006a2a:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	2201      	movs	r2, #1
 8006a30:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	2200      	movs	r2, #0
 8006a38:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	f003 0301 	and.w	r3, r3, #1
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d104      	bne.n	8006a4e <HAL_SD_IRQHandler+0xda>
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	f003 0302 	and.w	r3, r3, #2
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d003      	beq.n	8006a56 <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8006a4e:	6878      	ldr	r0, [r7, #4]
 8006a50:	f003 f8a8 	bl	8009ba4 <HAL_SD_RxCpltCallback>
 8006a54:	e10b      	b.n	8006c6e <HAL_SD_IRQHandler+0x2fa>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8006a56:	6878      	ldr	r0, [r7, #4]
 8006a58:	f003 f89a 	bl	8009b90 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8006a5c:	e107      	b.n	8006c6e <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	f000 8102 	beq.w	8006c6e <HAL_SD_IRQHandler+0x2fa>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	f003 0320 	and.w	r3, r3, #32
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d011      	beq.n	8006a98 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	4618      	mov	r0, r3
 8006a7a:	f002 fc4f 	bl	800931c <SDMMC_CmdStopTransfer>
 8006a7e:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8006a80:	68bb      	ldr	r3, [r7, #8]
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d008      	beq.n	8006a98 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006a8a:	68bb      	ldr	r3, [r7, #8]
 8006a8c:	431a      	orrs	r2, r3
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8006a92:	6878      	ldr	r0, [r7, #4]
 8006a94:	f000 f8f4 	bl	8006c80 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	f003 0301 	and.w	r3, r3, #1
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	f040 80e5 	bne.w	8006c6e <HAL_SD_IRQHandler+0x2fa>
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	f003 0302 	and.w	r3, r3, #2
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	f040 80df 	bne.w	8006c6e <HAL_SD_IRQHandler+0x2fa>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	f022 0208 	bic.w	r2, r2, #8
 8006abe:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	2201      	movs	r2, #1
 8006ac4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8006ac8:	6878      	ldr	r0, [r7, #4]
 8006aca:	f003 f861 	bl	8009b90 <HAL_SD_TxCpltCallback>
}
 8006ace:	e0ce      	b.n	8006c6e <HAL_SD_IRQHandler+0x2fa>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ad6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d008      	beq.n	8006af0 <HAL_SD_IRQHandler+0x17c>
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	f003 0308 	and.w	r3, r3, #8
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d003      	beq.n	8006af0 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 8006ae8:	6878      	ldr	r0, [r7, #4]
 8006aea:	f000 fda6 	bl	800763a <SD_Write_IT>
 8006aee:	e0be      	b.n	8006c6e <HAL_SD_IRQHandler+0x2fa>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR | SDIO_FLAG_STBITERR) != RESET)
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006af6:	f240 233a 	movw	r3, #570	; 0x23a
 8006afa:	4013      	ands	r3, r2
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	f000 80b6 	beq.w	8006c6e <HAL_SD_IRQHandler+0x2fa>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b08:	f003 0302 	and.w	r3, r3, #2
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d005      	beq.n	8006b1c <HAL_SD_IRQHandler+0x1a8>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b14:	f043 0202 	orr.w	r2, r3, #2
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b22:	f003 0308 	and.w	r3, r3, #8
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d005      	beq.n	8006b36 <HAL_SD_IRQHandler+0x1c2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b2e:	f043 0208 	orr.w	r2, r3, #8
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b3c:	f003 0320 	and.w	r3, r3, #32
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d005      	beq.n	8006b50 <HAL_SD_IRQHandler+0x1dc>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b48:	f043 0220 	orr.w	r2, r3, #32
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b56:	f003 0310 	and.w	r3, r3, #16
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d005      	beq.n	8006b6a <HAL_SD_IRQHandler+0x1f6>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b62:	f043 0210 	orr.w	r2, r3, #16
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR) != RESET)
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b70:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d005      	beq.n	8006b84 <HAL_SD_IRQHandler+0x210>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b7c:	f043 0208 	orr.w	r2, r3, #8
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	f240 723a 	movw	r2, #1850	; 0x73a
 8006b8c:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b94:	687a      	ldr	r2, [r7, #4]
 8006b96:	6812      	ldr	r2, [r2, #0]
 8006b98:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 8006b9c:	f023 0302 	bic.w	r3, r3, #2
 8006ba0:	63d3      	str	r3, [r2, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	4618      	mov	r0, r3
 8006ba8:	f002 fbb8 	bl	800931c <SDMMC_CmdStopTransfer>
 8006bac:	4602      	mov	r2, r0
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bb2:	431a      	orrs	r2, r3
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	f003 0308 	and.w	r3, r3, #8
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d00a      	beq.n	8006bd8 <HAL_SD_IRQHandler+0x264>
      hsd->State = HAL_SD_STATE_READY;
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	2201      	movs	r2, #1
 8006bc6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	2200      	movs	r2, #0
 8006bce:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8006bd0:	6878      	ldr	r0, [r7, #4]
 8006bd2:	f000 f855 	bl	8006c80 <HAL_SD_ErrorCallback>
}
 8006bd6:	e04a      	b.n	8006c6e <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d045      	beq.n	8006c6e <HAL_SD_IRQHandler+0x2fa>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	f003 0310 	and.w	r3, r3, #16
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d104      	bne.n	8006bf6 <HAL_SD_IRQHandler+0x282>
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	f003 0320 	and.w	r3, r3, #32
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d011      	beq.n	8006c1a <HAL_SD_IRQHandler+0x2a6>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bfa:	4a1f      	ldr	r2, [pc, #124]	; (8006c78 <HAL_SD_IRQHandler+0x304>)
 8006bfc:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c02:	4618      	mov	r0, r3
 8006c04:	f7fc fa20 	bl	8003048 <HAL_DMA_Abort_IT>
 8006c08:	4603      	mov	r3, r0
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d02f      	beq.n	8006c6e <HAL_SD_IRQHandler+0x2fa>
          SD_DMATxAbort(hsd->hdmatx);
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c12:	4618      	mov	r0, r3
 8006c14:	f000 face 	bl	80071b4 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8006c18:	e029      	b.n	8006c6e <HAL_SD_IRQHandler+0x2fa>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	f003 0301 	and.w	r3, r3, #1
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d104      	bne.n	8006c2e <HAL_SD_IRQHandler+0x2ba>
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	f003 0302 	and.w	r3, r3, #2
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d011      	beq.n	8006c52 <HAL_SD_IRQHandler+0x2de>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c32:	4a12      	ldr	r2, [pc, #72]	; (8006c7c <HAL_SD_IRQHandler+0x308>)
 8006c34:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c3a:	4618      	mov	r0, r3
 8006c3c:	f7fc fa04 	bl	8003048 <HAL_DMA_Abort_IT>
 8006c40:	4603      	mov	r3, r0
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d013      	beq.n	8006c6e <HAL_SD_IRQHandler+0x2fa>
          SD_DMARxAbort(hsd->hdmarx);
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c4a:	4618      	mov	r0, r3
 8006c4c:	f000 fae9 	bl	8007222 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8006c50:	e00d      	b.n	8006c6e <HAL_SD_IRQHandler+0x2fa>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	2200      	movs	r2, #0
 8006c56:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	2201      	movs	r2, #1
 8006c5c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	2200      	movs	r2, #0
 8006c64:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 8006c66:	6878      	ldr	r0, [r7, #4]
 8006c68:	f002 ff88 	bl	8009b7c <HAL_SD_AbortCallback>
}
 8006c6c:	e7ff      	b.n	8006c6e <HAL_SD_IRQHandler+0x2fa>
 8006c6e:	bf00      	nop
 8006c70:	3710      	adds	r7, #16
 8006c72:	46bd      	mov	sp, r7
 8006c74:	bd80      	pop	{r7, pc}
 8006c76:	bf00      	nop
 8006c78:	080071b5 	.word	0x080071b5
 8006c7c:	08007223 	.word	0x08007223

08006c80 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8006c80:	b480      	push	{r7}
 8006c82:	b083      	sub	sp, #12
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8006c88:	bf00      	nop
 8006c8a:	370c      	adds	r7, #12
 8006c8c:	46bd      	mov	sp, r7
 8006c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c92:	4770      	bx	lr

08006c94 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8006c94:	b480      	push	{r7}
 8006c96:	b083      	sub	sp, #12
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	6078      	str	r0, [r7, #4]
 8006c9c:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006ca2:	0f9b      	lsrs	r3, r3, #30
 8006ca4:	b2da      	uxtb	r2, r3
 8006ca6:	683b      	ldr	r3, [r7, #0]
 8006ca8:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006cae:	0e9b      	lsrs	r3, r3, #26
 8006cb0:	b2db      	uxtb	r3, r3
 8006cb2:	f003 030f 	and.w	r3, r3, #15
 8006cb6:	b2da      	uxtb	r2, r3
 8006cb8:	683b      	ldr	r3, [r7, #0]
 8006cba:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006cc0:	0e1b      	lsrs	r3, r3, #24
 8006cc2:	b2db      	uxtb	r3, r3
 8006cc4:	f003 0303 	and.w	r3, r3, #3
 8006cc8:	b2da      	uxtb	r2, r3
 8006cca:	683b      	ldr	r3, [r7, #0]
 8006ccc:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006cd2:	0c1b      	lsrs	r3, r3, #16
 8006cd4:	b2da      	uxtb	r2, r3
 8006cd6:	683b      	ldr	r3, [r7, #0]
 8006cd8:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006cde:	0a1b      	lsrs	r3, r3, #8
 8006ce0:	b2da      	uxtb	r2, r3
 8006ce2:	683b      	ldr	r3, [r7, #0]
 8006ce4:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006cea:	b2da      	uxtb	r2, r3
 8006cec:	683b      	ldr	r3, [r7, #0]
 8006cee:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006cf4:	0d1b      	lsrs	r3, r3, #20
 8006cf6:	b29a      	uxth	r2, r3
 8006cf8:	683b      	ldr	r3, [r7, #0]
 8006cfa:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006d00:	0c1b      	lsrs	r3, r3, #16
 8006d02:	b2db      	uxtb	r3, r3
 8006d04:	f003 030f 	and.w	r3, r3, #15
 8006d08:	b2da      	uxtb	r2, r3
 8006d0a:	683b      	ldr	r3, [r7, #0]
 8006d0c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006d12:	0bdb      	lsrs	r3, r3, #15
 8006d14:	b2db      	uxtb	r3, r3
 8006d16:	f003 0301 	and.w	r3, r3, #1
 8006d1a:	b2da      	uxtb	r2, r3
 8006d1c:	683b      	ldr	r3, [r7, #0]
 8006d1e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006d24:	0b9b      	lsrs	r3, r3, #14
 8006d26:	b2db      	uxtb	r3, r3
 8006d28:	f003 0301 	and.w	r3, r3, #1
 8006d2c:	b2da      	uxtb	r2, r3
 8006d2e:	683b      	ldr	r3, [r7, #0]
 8006d30:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006d36:	0b5b      	lsrs	r3, r3, #13
 8006d38:	b2db      	uxtb	r3, r3
 8006d3a:	f003 0301 	and.w	r3, r3, #1
 8006d3e:	b2da      	uxtb	r2, r3
 8006d40:	683b      	ldr	r3, [r7, #0]
 8006d42:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006d48:	0b1b      	lsrs	r3, r3, #12
 8006d4a:	b2db      	uxtb	r3, r3
 8006d4c:	f003 0301 	and.w	r3, r3, #1
 8006d50:	b2da      	uxtb	r2, r3
 8006d52:	683b      	ldr	r3, [r7, #0]
 8006d54:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8006d56:	683b      	ldr	r3, [r7, #0]
 8006d58:	2200      	movs	r2, #0
 8006d5a:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d163      	bne.n	8006e2c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006d68:	009a      	lsls	r2, r3, #2
 8006d6a:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006d6e:	4013      	ands	r3, r2
 8006d70:	687a      	ldr	r2, [r7, #4]
 8006d72:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8006d74:	0f92      	lsrs	r2, r2, #30
 8006d76:	431a      	orrs	r2, r3
 8006d78:	683b      	ldr	r3, [r7, #0]
 8006d7a:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006d80:	0edb      	lsrs	r3, r3, #27
 8006d82:	b2db      	uxtb	r3, r3
 8006d84:	f003 0307 	and.w	r3, r3, #7
 8006d88:	b2da      	uxtb	r2, r3
 8006d8a:	683b      	ldr	r3, [r7, #0]
 8006d8c:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006d92:	0e1b      	lsrs	r3, r3, #24
 8006d94:	b2db      	uxtb	r3, r3
 8006d96:	f003 0307 	and.w	r3, r3, #7
 8006d9a:	b2da      	uxtb	r2, r3
 8006d9c:	683b      	ldr	r3, [r7, #0]
 8006d9e:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006da4:	0d5b      	lsrs	r3, r3, #21
 8006da6:	b2db      	uxtb	r3, r3
 8006da8:	f003 0307 	and.w	r3, r3, #7
 8006dac:	b2da      	uxtb	r2, r3
 8006dae:	683b      	ldr	r3, [r7, #0]
 8006db0:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006db6:	0c9b      	lsrs	r3, r3, #18
 8006db8:	b2db      	uxtb	r3, r3
 8006dba:	f003 0307 	and.w	r3, r3, #7
 8006dbe:	b2da      	uxtb	r2, r3
 8006dc0:	683b      	ldr	r3, [r7, #0]
 8006dc2:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006dc8:	0bdb      	lsrs	r3, r3, #15
 8006dca:	b2db      	uxtb	r3, r3
 8006dcc:	f003 0307 	and.w	r3, r3, #7
 8006dd0:	b2da      	uxtb	r2, r3
 8006dd2:	683b      	ldr	r3, [r7, #0]
 8006dd4:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8006dd6:	683b      	ldr	r3, [r7, #0]
 8006dd8:	691b      	ldr	r3, [r3, #16]
 8006dda:	1c5a      	adds	r2, r3, #1
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8006de0:	683b      	ldr	r3, [r7, #0]
 8006de2:	7e1b      	ldrb	r3, [r3, #24]
 8006de4:	b2db      	uxtb	r3, r3
 8006de6:	f003 0307 	and.w	r3, r3, #7
 8006dea:	3302      	adds	r3, #2
 8006dec:	2201      	movs	r2, #1
 8006dee:	fa02 f303 	lsl.w	r3, r2, r3
 8006df2:	687a      	ldr	r2, [r7, #4]
 8006df4:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8006df6:	fb03 f202 	mul.w	r2, r3, r2
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8006dfe:	683b      	ldr	r3, [r7, #0]
 8006e00:	7a1b      	ldrb	r3, [r3, #8]
 8006e02:	b2db      	uxtb	r3, r3
 8006e04:	f003 030f 	and.w	r3, r3, #15
 8006e08:	2201      	movs	r2, #1
 8006e0a:	409a      	lsls	r2, r3
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e14:	687a      	ldr	r2, [r7, #4]
 8006e16:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8006e18:	0a52      	lsrs	r2, r2, #9
 8006e1a:	fb03 f202 	mul.w	r2, r3, r2
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006e28:	661a      	str	r2, [r3, #96]	; 0x60
 8006e2a:	e031      	b.n	8006e90 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e30:	2b01      	cmp	r3, #1
 8006e32:	d11d      	bne.n	8006e70 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006e38:	041b      	lsls	r3, r3, #16
 8006e3a:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006e42:	0c1b      	lsrs	r3, r3, #16
 8006e44:	431a      	orrs	r2, r3
 8006e46:	683b      	ldr	r3, [r7, #0]
 8006e48:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8006e4a:	683b      	ldr	r3, [r7, #0]
 8006e4c:	691b      	ldr	r3, [r3, #16]
 8006e4e:	3301      	adds	r3, #1
 8006e50:	029a      	lsls	r2, r3, #10
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006e64:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	661a      	str	r2, [r3, #96]	; 0x60
 8006e6e:	e00f      	b.n	8006e90 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	4a58      	ldr	r2, [pc, #352]	; (8006fd8 <HAL_SD_GetCardCSD+0x344>)
 8006e76:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e7c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	2201      	movs	r2, #1
 8006e88:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8006e8c:	2301      	movs	r3, #1
 8006e8e:	e09d      	b.n	8006fcc <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006e94:	0b9b      	lsrs	r3, r3, #14
 8006e96:	b2db      	uxtb	r3, r3
 8006e98:	f003 0301 	and.w	r3, r3, #1
 8006e9c:	b2da      	uxtb	r2, r3
 8006e9e:	683b      	ldr	r3, [r7, #0]
 8006ea0:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006ea6:	09db      	lsrs	r3, r3, #7
 8006ea8:	b2db      	uxtb	r3, r3
 8006eaa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006eae:	b2da      	uxtb	r2, r3
 8006eb0:	683b      	ldr	r3, [r7, #0]
 8006eb2:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006eb8:	b2db      	uxtb	r3, r3
 8006eba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006ebe:	b2da      	uxtb	r2, r3
 8006ec0:	683b      	ldr	r3, [r7, #0]
 8006ec2:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ec8:	0fdb      	lsrs	r3, r3, #31
 8006eca:	b2da      	uxtb	r2, r3
 8006ecc:	683b      	ldr	r3, [r7, #0]
 8006ece:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ed4:	0f5b      	lsrs	r3, r3, #29
 8006ed6:	b2db      	uxtb	r3, r3
 8006ed8:	f003 0303 	and.w	r3, r3, #3
 8006edc:	b2da      	uxtb	r2, r3
 8006ede:	683b      	ldr	r3, [r7, #0]
 8006ee0:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ee6:	0e9b      	lsrs	r3, r3, #26
 8006ee8:	b2db      	uxtb	r3, r3
 8006eea:	f003 0307 	and.w	r3, r3, #7
 8006eee:	b2da      	uxtb	r2, r3
 8006ef0:	683b      	ldr	r3, [r7, #0]
 8006ef2:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ef8:	0d9b      	lsrs	r3, r3, #22
 8006efa:	b2db      	uxtb	r3, r3
 8006efc:	f003 030f 	and.w	r3, r3, #15
 8006f00:	b2da      	uxtb	r2, r3
 8006f02:	683b      	ldr	r3, [r7, #0]
 8006f04:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f0a:	0d5b      	lsrs	r3, r3, #21
 8006f0c:	b2db      	uxtb	r3, r3
 8006f0e:	f003 0301 	and.w	r3, r3, #1
 8006f12:	b2da      	uxtb	r2, r3
 8006f14:	683b      	ldr	r3, [r7, #0]
 8006f16:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8006f1a:	683b      	ldr	r3, [r7, #0]
 8006f1c:	2200      	movs	r2, #0
 8006f1e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f26:	0c1b      	lsrs	r3, r3, #16
 8006f28:	b2db      	uxtb	r3, r3
 8006f2a:	f003 0301 	and.w	r3, r3, #1
 8006f2e:	b2da      	uxtb	r2, r3
 8006f30:	683b      	ldr	r3, [r7, #0]
 8006f32:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f3a:	0bdb      	lsrs	r3, r3, #15
 8006f3c:	b2db      	uxtb	r3, r3
 8006f3e:	f003 0301 	and.w	r3, r3, #1
 8006f42:	b2da      	uxtb	r2, r3
 8006f44:	683b      	ldr	r3, [r7, #0]
 8006f46:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f4e:	0b9b      	lsrs	r3, r3, #14
 8006f50:	b2db      	uxtb	r3, r3
 8006f52:	f003 0301 	and.w	r3, r3, #1
 8006f56:	b2da      	uxtb	r2, r3
 8006f58:	683b      	ldr	r3, [r7, #0]
 8006f5a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f62:	0b5b      	lsrs	r3, r3, #13
 8006f64:	b2db      	uxtb	r3, r3
 8006f66:	f003 0301 	and.w	r3, r3, #1
 8006f6a:	b2da      	uxtb	r2, r3
 8006f6c:	683b      	ldr	r3, [r7, #0]
 8006f6e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f76:	0b1b      	lsrs	r3, r3, #12
 8006f78:	b2db      	uxtb	r3, r3
 8006f7a:	f003 0301 	and.w	r3, r3, #1
 8006f7e:	b2da      	uxtb	r2, r3
 8006f80:	683b      	ldr	r3, [r7, #0]
 8006f82:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f8a:	0a9b      	lsrs	r3, r3, #10
 8006f8c:	b2db      	uxtb	r3, r3
 8006f8e:	f003 0303 	and.w	r3, r3, #3
 8006f92:	b2da      	uxtb	r2, r3
 8006f94:	683b      	ldr	r3, [r7, #0]
 8006f96:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f9e:	0a1b      	lsrs	r3, r3, #8
 8006fa0:	b2db      	uxtb	r3, r3
 8006fa2:	f003 0303 	and.w	r3, r3, #3
 8006fa6:	b2da      	uxtb	r2, r3
 8006fa8:	683b      	ldr	r3, [r7, #0]
 8006faa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fb2:	085b      	lsrs	r3, r3, #1
 8006fb4:	b2db      	uxtb	r3, r3
 8006fb6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006fba:	b2da      	uxtb	r2, r3
 8006fbc:	683b      	ldr	r3, [r7, #0]
 8006fbe:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8006fc2:	683b      	ldr	r3, [r7, #0]
 8006fc4:	2201      	movs	r2, #1
 8006fc6:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8006fca:	2300      	movs	r3, #0
}
 8006fcc:	4618      	mov	r0, r3
 8006fce:	370c      	adds	r7, #12
 8006fd0:	46bd      	mov	sp, r7
 8006fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd6:	4770      	bx	lr
 8006fd8:	004005ff 	.word	0x004005ff

08006fdc <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8006fdc:	b480      	push	{r7}
 8006fde:	b083      	sub	sp, #12
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	6078      	str	r0, [r7, #4]
 8006fe4:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006fea:	683b      	ldr	r3, [r7, #0]
 8006fec:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006ff2:	683b      	ldr	r3, [r7, #0]
 8006ff4:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006ffa:	683b      	ldr	r3, [r7, #0]
 8006ffc:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007002:	683b      	ldr	r3, [r7, #0]
 8007004:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800700a:	683b      	ldr	r3, [r7, #0]
 800700c:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007012:	683b      	ldr	r3, [r7, #0]
 8007014:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800701a:	683b      	ldr	r3, [r7, #0]
 800701c:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8007022:	683b      	ldr	r3, [r7, #0]
 8007024:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8007026:	2300      	movs	r3, #0
}
 8007028:	4618      	mov	r0, r3
 800702a:	370c      	adds	r7, #12
 800702c:	46bd      	mov	sp, r7
 800702e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007032:	4770      	bx	lr

08007034 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8007034:	b580      	push	{r7, lr}
 8007036:	b086      	sub	sp, #24
 8007038:	af00      	add	r7, sp, #0
 800703a:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800703c:	2300      	movs	r3, #0
 800703e:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8007040:	f107 030c 	add.w	r3, r7, #12
 8007044:	4619      	mov	r1, r3
 8007046:	6878      	ldr	r0, [r7, #4]
 8007048:	f000 fa7e 	bl	8007548 <SD_SendStatus>
 800704c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800704e:	697b      	ldr	r3, [r7, #20]
 8007050:	2b00      	cmp	r3, #0
 8007052:	d005      	beq.n	8007060 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007058:	697b      	ldr	r3, [r7, #20]
 800705a:	431a      	orrs	r2, r3
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	0a5b      	lsrs	r3, r3, #9
 8007064:	f003 030f 	and.w	r3, r3, #15
 8007068:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800706a:	693b      	ldr	r3, [r7, #16]
}
 800706c:	4618      	mov	r0, r3
 800706e:	3718      	adds	r7, #24
 8007070:	46bd      	mov	sp, r7
 8007072:	bd80      	pop	{r7, pc}

08007074 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007074:	b480      	push	{r7}
 8007076:	b085      	sub	sp, #20
 8007078:	af00      	add	r7, sp, #0
 800707a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007080:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007090:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8007092:	bf00      	nop
 8007094:	3714      	adds	r7, #20
 8007096:	46bd      	mov	sp, r7
 8007098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800709c:	4770      	bx	lr

0800709e <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800709e:	b580      	push	{r7, lr}
 80070a0:	b084      	sub	sp, #16
 80070a2:	af00      	add	r7, sp, #0
 80070a4:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070aa:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070b0:	2b82      	cmp	r3, #130	; 0x82
 80070b2:	d111      	bne.n	80070d8 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	4618      	mov	r0, r3
 80070ba:	f002 f92f 	bl	800931c <SDMMC_CmdStopTransfer>
 80070be:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 80070c0:	68bb      	ldr	r3, [r7, #8]
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d008      	beq.n	80070d8 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80070ca:	68bb      	ldr	r3, [r7, #8]
 80070cc:	431a      	orrs	r2, r3
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 80070d2:	68f8      	ldr	r0, [r7, #12]
 80070d4:	f7ff fdd4 	bl	8006c80 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	f022 0208 	bic.w	r2, r2, #8
 80070e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	f240 523a 	movw	r2, #1338	; 0x53a
 80070f0:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	2201      	movs	r2, #1
 80070f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	2200      	movs	r2, #0
 80070fe:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8007100:	68f8      	ldr	r0, [r7, #12]
 8007102:	f002 fd4f 	bl	8009ba4 <HAL_SD_RxCpltCallback>
#endif
}
 8007106:	bf00      	nop
 8007108:	3710      	adds	r7, #16
 800710a:	46bd      	mov	sp, r7
 800710c:	bd80      	pop	{r7, pc}
	...

08007110 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8007110:	b580      	push	{r7, lr}
 8007112:	b086      	sub	sp, #24
 8007114:	af00      	add	r7, sp, #0
 8007116:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800711c:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800711e:	6878      	ldr	r0, [r7, #4]
 8007120:	f7fc f94c 	bl	80033bc <HAL_DMA_GetError>
 8007124:	4603      	mov	r3, r0
 8007126:	2b02      	cmp	r3, #2
 8007128:	d03e      	beq.n	80071a8 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 800712a:	697b      	ldr	r3, [r7, #20]
 800712c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800712e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007130:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8007132:	697b      	ldr	r3, [r7, #20]
 8007134:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007136:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007138:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 800713a:	693b      	ldr	r3, [r7, #16]
 800713c:	2b01      	cmp	r3, #1
 800713e:	d002      	beq.n	8007146 <SD_DMAError+0x36>
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	2b01      	cmp	r3, #1
 8007144:	d12d      	bne.n	80071a2 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007146:	697b      	ldr	r3, [r7, #20]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	4a19      	ldr	r2, [pc, #100]	; (80071b0 <SD_DMAError+0xa0>)
 800714c:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800714e:	697b      	ldr	r3, [r7, #20]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007154:	697b      	ldr	r3, [r7, #20]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800715c:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800715e:	697b      	ldr	r3, [r7, #20]
 8007160:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007162:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007166:	697b      	ldr	r3, [r7, #20]
 8007168:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800716a:	6978      	ldr	r0, [r7, #20]
 800716c:	f7ff ff62 	bl	8007034 <HAL_SD_GetCardState>
 8007170:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8007172:	68bb      	ldr	r3, [r7, #8]
 8007174:	2b06      	cmp	r3, #6
 8007176:	d002      	beq.n	800717e <SD_DMAError+0x6e>
 8007178:	68bb      	ldr	r3, [r7, #8]
 800717a:	2b05      	cmp	r3, #5
 800717c:	d10a      	bne.n	8007194 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800717e:	697b      	ldr	r3, [r7, #20]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	4618      	mov	r0, r3
 8007184:	f002 f8ca 	bl	800931c <SDMMC_CmdStopTransfer>
 8007188:	4602      	mov	r2, r0
 800718a:	697b      	ldr	r3, [r7, #20]
 800718c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800718e:	431a      	orrs	r2, r3
 8007190:	697b      	ldr	r3, [r7, #20]
 8007192:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8007194:	697b      	ldr	r3, [r7, #20]
 8007196:	2201      	movs	r2, #1
 8007198:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800719c:	697b      	ldr	r3, [r7, #20]
 800719e:	2200      	movs	r2, #0
 80071a0:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 80071a2:	6978      	ldr	r0, [r7, #20]
 80071a4:	f7ff fd6c 	bl	8006c80 <HAL_SD_ErrorCallback>
#endif
  }
}
 80071a8:	bf00      	nop
 80071aa:	3718      	adds	r7, #24
 80071ac:	46bd      	mov	sp, r7
 80071ae:	bd80      	pop	{r7, pc}
 80071b0:	004005ff 	.word	0x004005ff

080071b4 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 80071b4:	b580      	push	{r7, lr}
 80071b6:	b084      	sub	sp, #16
 80071b8:	af00      	add	r7, sp, #0
 80071ba:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071c0:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	f240 523a 	movw	r2, #1338	; 0x53a
 80071ca:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 80071cc:	68f8      	ldr	r0, [r7, #12]
 80071ce:	f7ff ff31 	bl	8007034 <HAL_SD_GetCardState>
 80071d2:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	2201      	movs	r2, #1
 80071d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	2200      	movs	r2, #0
 80071e0:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80071e2:	68bb      	ldr	r3, [r7, #8]
 80071e4:	2b06      	cmp	r3, #6
 80071e6:	d002      	beq.n	80071ee <SD_DMATxAbort+0x3a>
 80071e8:	68bb      	ldr	r3, [r7, #8]
 80071ea:	2b05      	cmp	r3, #5
 80071ec:	d10a      	bne.n	8007204 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	4618      	mov	r0, r3
 80071f4:	f002 f892 	bl	800931c <SDMMC_CmdStopTransfer>
 80071f8:	4602      	mov	r2, r0
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071fe:	431a      	orrs	r2, r3
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007208:	2b00      	cmp	r3, #0
 800720a:	d103      	bne.n	8007214 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800720c:	68f8      	ldr	r0, [r7, #12]
 800720e:	f002 fcb5 	bl	8009b7c <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8007212:	e002      	b.n	800721a <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8007214:	68f8      	ldr	r0, [r7, #12]
 8007216:	f7ff fd33 	bl	8006c80 <HAL_SD_ErrorCallback>
}
 800721a:	bf00      	nop
 800721c:	3710      	adds	r7, #16
 800721e:	46bd      	mov	sp, r7
 8007220:	bd80      	pop	{r7, pc}

08007222 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8007222:	b580      	push	{r7, lr}
 8007224:	b084      	sub	sp, #16
 8007226:	af00      	add	r7, sp, #0
 8007228:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800722e:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	f240 523a 	movw	r2, #1338	; 0x53a
 8007238:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800723a:	68f8      	ldr	r0, [r7, #12]
 800723c:	f7ff fefa 	bl	8007034 <HAL_SD_GetCardState>
 8007240:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	2201      	movs	r2, #1
 8007246:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	2200      	movs	r2, #0
 800724e:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8007250:	68bb      	ldr	r3, [r7, #8]
 8007252:	2b06      	cmp	r3, #6
 8007254:	d002      	beq.n	800725c <SD_DMARxAbort+0x3a>
 8007256:	68bb      	ldr	r3, [r7, #8]
 8007258:	2b05      	cmp	r3, #5
 800725a:	d10a      	bne.n	8007272 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	4618      	mov	r0, r3
 8007262:	f002 f85b 	bl	800931c <SDMMC_CmdStopTransfer>
 8007266:	4602      	mov	r2, r0
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800726c:	431a      	orrs	r2, r3
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007276:	2b00      	cmp	r3, #0
 8007278:	d103      	bne.n	8007282 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800727a:	68f8      	ldr	r0, [r7, #12]
 800727c:	f002 fc7e 	bl	8009b7c <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8007280:	e002      	b.n	8007288 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8007282:	68f8      	ldr	r0, [r7, #12]
 8007284:	f7ff fcfc 	bl	8006c80 <HAL_SD_ErrorCallback>
}
 8007288:	bf00      	nop
 800728a:	3710      	adds	r7, #16
 800728c:	46bd      	mov	sp, r7
 800728e:	bd80      	pop	{r7, pc}

08007290 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8007290:	b5b0      	push	{r4, r5, r7, lr}
 8007292:	b094      	sub	sp, #80	; 0x50
 8007294:	af04      	add	r7, sp, #16
 8007296:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8007298:	2301      	movs	r3, #1
 800729a:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	4618      	mov	r0, r3
 80072a2:	f001 ff0c 	bl	80090be <SDIO_GetPowerState>
 80072a6:	4603      	mov	r3, r0
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d102      	bne.n	80072b2 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80072ac:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80072b0:	e0b8      	b.n	8007424 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072b6:	2b03      	cmp	r3, #3
 80072b8:	d02f      	beq.n	800731a <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	4618      	mov	r0, r3
 80072c0:	f002 f8f3 	bl	80094aa <SDMMC_CmdSendCID>
 80072c4:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80072c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d001      	beq.n	80072d0 <SD_InitCard+0x40>
    {
      return errorstate;
 80072cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80072ce:	e0a9      	b.n	8007424 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	2100      	movs	r1, #0
 80072d6:	4618      	mov	r0, r3
 80072d8:	f001 ff36 	bl	8009148 <SDIO_GetResponse>
 80072dc:	4602      	mov	r2, r0
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	2104      	movs	r1, #4
 80072e8:	4618      	mov	r0, r3
 80072ea:	f001 ff2d 	bl	8009148 <SDIO_GetResponse>
 80072ee:	4602      	mov	r2, r0
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	2108      	movs	r1, #8
 80072fa:	4618      	mov	r0, r3
 80072fc:	f001 ff24 	bl	8009148 <SDIO_GetResponse>
 8007300:	4602      	mov	r2, r0
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	210c      	movs	r1, #12
 800730c:	4618      	mov	r0, r3
 800730e:	f001 ff1b 	bl	8009148 <SDIO_GetResponse>
 8007312:	4602      	mov	r2, r0
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800731e:	2b03      	cmp	r3, #3
 8007320:	d00d      	beq.n	800733e <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	f107 020e 	add.w	r2, r7, #14
 800732a:	4611      	mov	r1, r2
 800732c:	4618      	mov	r0, r3
 800732e:	f002 f8f9 	bl	8009524 <SDMMC_CmdSetRelAdd>
 8007332:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8007334:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007336:	2b00      	cmp	r3, #0
 8007338:	d001      	beq.n	800733e <SD_InitCard+0xae>
    {
      return errorstate;
 800733a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800733c:	e072      	b.n	8007424 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007342:	2b03      	cmp	r3, #3
 8007344:	d036      	beq.n	80073b4 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8007346:	89fb      	ldrh	r3, [r7, #14]
 8007348:	461a      	mov	r2, r3
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681a      	ldr	r2, [r3, #0]
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007356:	041b      	lsls	r3, r3, #16
 8007358:	4619      	mov	r1, r3
 800735a:	4610      	mov	r0, r2
 800735c:	f002 f8c3 	bl	80094e6 <SDMMC_CmdSendCSD>
 8007360:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8007362:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007364:	2b00      	cmp	r3, #0
 8007366:	d001      	beq.n	800736c <SD_InitCard+0xdc>
    {
      return errorstate;
 8007368:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800736a:	e05b      	b.n	8007424 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	2100      	movs	r1, #0
 8007372:	4618      	mov	r0, r3
 8007374:	f001 fee8 	bl	8009148 <SDIO_GetResponse>
 8007378:	4602      	mov	r2, r0
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	2104      	movs	r1, #4
 8007384:	4618      	mov	r0, r3
 8007386:	f001 fedf 	bl	8009148 <SDIO_GetResponse>
 800738a:	4602      	mov	r2, r0
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	2108      	movs	r1, #8
 8007396:	4618      	mov	r0, r3
 8007398:	f001 fed6 	bl	8009148 <SDIO_GetResponse>
 800739c:	4602      	mov	r2, r0
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	210c      	movs	r1, #12
 80073a8:	4618      	mov	r0, r3
 80073aa:	f001 fecd 	bl	8009148 <SDIO_GetResponse>
 80073ae:	4602      	mov	r2, r0
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	2104      	movs	r1, #4
 80073ba:	4618      	mov	r0, r3
 80073bc:	f001 fec4 	bl	8009148 <SDIO_GetResponse>
 80073c0:	4603      	mov	r3, r0
 80073c2:	0d1a      	lsrs	r2, r3, #20
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80073c8:	f107 0310 	add.w	r3, r7, #16
 80073cc:	4619      	mov	r1, r3
 80073ce:	6878      	ldr	r0, [r7, #4]
 80073d0:	f7ff fc60 	bl	8006c94 <HAL_SD_GetCardCSD>
 80073d4:	4603      	mov	r3, r0
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d002      	beq.n	80073e0 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80073da:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80073de:	e021      	b.n	8007424 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	6819      	ldr	r1, [r3, #0]
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80073e8:	041b      	lsls	r3, r3, #16
 80073ea:	2200      	movs	r2, #0
 80073ec:	461c      	mov	r4, r3
 80073ee:	4615      	mov	r5, r2
 80073f0:	4622      	mov	r2, r4
 80073f2:	462b      	mov	r3, r5
 80073f4:	4608      	mov	r0, r1
 80073f6:	f001 ffb3 	bl	8009360 <SDMMC_CmdSelDesel>
 80073fa:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 80073fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d001      	beq.n	8007406 <SD_InitCard+0x176>
  {
    return errorstate;
 8007402:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007404:	e00e      	b.n	8007424 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681d      	ldr	r5, [r3, #0]
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	466c      	mov	r4, sp
 800740e:	f103 0210 	add.w	r2, r3, #16
 8007412:	ca07      	ldmia	r2, {r0, r1, r2}
 8007414:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007418:	3304      	adds	r3, #4
 800741a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800741c:	4628      	mov	r0, r5
 800741e:	f001 fdf7 	bl	8009010 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8007422:	2300      	movs	r3, #0
}
 8007424:	4618      	mov	r0, r3
 8007426:	3740      	adds	r7, #64	; 0x40
 8007428:	46bd      	mov	sp, r7
 800742a:	bdb0      	pop	{r4, r5, r7, pc}

0800742c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800742c:	b580      	push	{r7, lr}
 800742e:	b086      	sub	sp, #24
 8007430:	af00      	add	r7, sp, #0
 8007432:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007434:	2300      	movs	r3, #0
 8007436:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8007438:	2300      	movs	r3, #0
 800743a:	617b      	str	r3, [r7, #20]
 800743c:	2300      	movs	r3, #0
 800743e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	4618      	mov	r0, r3
 8007446:	f001 ffae 	bl	80093a6 <SDMMC_CmdGoIdleState>
 800744a:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	2b00      	cmp	r3, #0
 8007450:	d001      	beq.n	8007456 <SD_PowerON+0x2a>
  {
    return errorstate;
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	e072      	b.n	800753c <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	4618      	mov	r0, r3
 800745c:	f001 ffc1 	bl	80093e2 <SDMMC_CmdOperCond>
 8007460:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	2b00      	cmp	r3, #0
 8007466:	d00d      	beq.n	8007484 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	2200      	movs	r2, #0
 800746c:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	4618      	mov	r0, r3
 8007474:	f001 ff97 	bl	80093a6 <SDMMC_CmdGoIdleState>
 8007478:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	2b00      	cmp	r3, #0
 800747e:	d004      	beq.n	800748a <SD_PowerON+0x5e>
    {
      return errorstate;
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	e05b      	b.n	800753c <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	2201      	movs	r2, #1
 8007488:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800748e:	2b01      	cmp	r3, #1
 8007490:	d137      	bne.n	8007502 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	2100      	movs	r1, #0
 8007498:	4618      	mov	r0, r3
 800749a:	f001 ffc1 	bl	8009420 <SDMMC_CmdAppCommand>
 800749e:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d02d      	beq.n	8007502 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80074a6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80074aa:	e047      	b.n	800753c <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	2100      	movs	r1, #0
 80074b2:	4618      	mov	r0, r3
 80074b4:	f001 ffb4 	bl	8009420 <SDMMC_CmdAppCommand>
 80074b8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d001      	beq.n	80074c4 <SD_PowerON+0x98>
    {
      return errorstate;
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	e03b      	b.n	800753c <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	491e      	ldr	r1, [pc, #120]	; (8007544 <SD_PowerON+0x118>)
 80074ca:	4618      	mov	r0, r3
 80074cc:	f001 ffca 	bl	8009464 <SDMMC_CmdAppOperCommand>
 80074d0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d002      	beq.n	80074de <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80074d8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80074dc:	e02e      	b.n	800753c <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	2100      	movs	r1, #0
 80074e4:	4618      	mov	r0, r3
 80074e6:	f001 fe2f 	bl	8009148 <SDIO_GetResponse>
 80074ea:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80074ec:	697b      	ldr	r3, [r7, #20]
 80074ee:	0fdb      	lsrs	r3, r3, #31
 80074f0:	2b01      	cmp	r3, #1
 80074f2:	d101      	bne.n	80074f8 <SD_PowerON+0xcc>
 80074f4:	2301      	movs	r3, #1
 80074f6:	e000      	b.n	80074fa <SD_PowerON+0xce>
 80074f8:	2300      	movs	r3, #0
 80074fa:	613b      	str	r3, [r7, #16]

    count++;
 80074fc:	68bb      	ldr	r3, [r7, #8]
 80074fe:	3301      	adds	r3, #1
 8007500:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8007502:	68bb      	ldr	r3, [r7, #8]
 8007504:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8007508:	4293      	cmp	r3, r2
 800750a:	d802      	bhi.n	8007512 <SD_PowerON+0xe6>
 800750c:	693b      	ldr	r3, [r7, #16]
 800750e:	2b00      	cmp	r3, #0
 8007510:	d0cc      	beq.n	80074ac <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8007512:	68bb      	ldr	r3, [r7, #8]
 8007514:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8007518:	4293      	cmp	r3, r2
 800751a:	d902      	bls.n	8007522 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800751c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007520:	e00c      	b.n	800753c <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8007522:	697b      	ldr	r3, [r7, #20]
 8007524:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007528:	2b00      	cmp	r3, #0
 800752a:	d003      	beq.n	8007534 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	2201      	movs	r2, #1
 8007530:	645a      	str	r2, [r3, #68]	; 0x44
 8007532:	e002      	b.n	800753a <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	2200      	movs	r2, #0
 8007538:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800753a:	2300      	movs	r3, #0
}
 800753c:	4618      	mov	r0, r3
 800753e:	3718      	adds	r7, #24
 8007540:	46bd      	mov	sp, r7
 8007542:	bd80      	pop	{r7, pc}
 8007544:	c1100000 	.word	0xc1100000

08007548 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8007548:	b580      	push	{r7, lr}
 800754a:	b084      	sub	sp, #16
 800754c:	af00      	add	r7, sp, #0
 800754e:	6078      	str	r0, [r7, #4]
 8007550:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8007552:	683b      	ldr	r3, [r7, #0]
 8007554:	2b00      	cmp	r3, #0
 8007556:	d102      	bne.n	800755e <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8007558:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800755c:	e018      	b.n	8007590 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681a      	ldr	r2, [r3, #0]
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007566:	041b      	lsls	r3, r3, #16
 8007568:	4619      	mov	r1, r3
 800756a:	4610      	mov	r0, r2
 800756c:	f001 fffb 	bl	8009566 <SDMMC_CmdSendStatus>
 8007570:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	2b00      	cmp	r3, #0
 8007576:	d001      	beq.n	800757c <SD_SendStatus+0x34>
  {
    return errorstate;
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	e009      	b.n	8007590 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	2100      	movs	r1, #0
 8007582:	4618      	mov	r0, r3
 8007584:	f001 fde0 	bl	8009148 <SDIO_GetResponse>
 8007588:	4602      	mov	r2, r0
 800758a:	683b      	ldr	r3, [r7, #0]
 800758c:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800758e:	2300      	movs	r3, #0
}
 8007590:	4618      	mov	r0, r3
 8007592:	3710      	adds	r7, #16
 8007594:	46bd      	mov	sp, r7
 8007596:	bd80      	pop	{r7, pc}

08007598 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8007598:	b580      	push	{r7, lr}
 800759a:	b086      	sub	sp, #24
 800759c:	af00      	add	r7, sp, #0
 800759e:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075a4:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075aa:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 80075ac:	693b      	ldr	r3, [r7, #16]
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d03f      	beq.n	8007632 <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 80075b2:	2300      	movs	r3, #0
 80075b4:	617b      	str	r3, [r7, #20]
 80075b6:	e033      	b.n	8007620 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	4618      	mov	r0, r3
 80075be:	f001 fd52 	bl	8009066 <SDIO_ReadFIFO>
 80075c2:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 80075c4:	68bb      	ldr	r3, [r7, #8]
 80075c6:	b2da      	uxtb	r2, r3
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	701a      	strb	r2, [r3, #0]
      tmp++;
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	3301      	adds	r3, #1
 80075d0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80075d2:	693b      	ldr	r3, [r7, #16]
 80075d4:	3b01      	subs	r3, #1
 80075d6:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 80075d8:	68bb      	ldr	r3, [r7, #8]
 80075da:	0a1b      	lsrs	r3, r3, #8
 80075dc:	b2da      	uxtb	r2, r3
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	701a      	strb	r2, [r3, #0]
      tmp++;
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	3301      	adds	r3, #1
 80075e6:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80075e8:	693b      	ldr	r3, [r7, #16]
 80075ea:	3b01      	subs	r3, #1
 80075ec:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 80075ee:	68bb      	ldr	r3, [r7, #8]
 80075f0:	0c1b      	lsrs	r3, r3, #16
 80075f2:	b2da      	uxtb	r2, r3
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	701a      	strb	r2, [r3, #0]
      tmp++;
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	3301      	adds	r3, #1
 80075fc:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80075fe:	693b      	ldr	r3, [r7, #16]
 8007600:	3b01      	subs	r3, #1
 8007602:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8007604:	68bb      	ldr	r3, [r7, #8]
 8007606:	0e1b      	lsrs	r3, r3, #24
 8007608:	b2da      	uxtb	r2, r3
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	701a      	strb	r2, [r3, #0]
      tmp++;
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	3301      	adds	r3, #1
 8007612:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007614:	693b      	ldr	r3, [r7, #16]
 8007616:	3b01      	subs	r3, #1
 8007618:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800761a:	697b      	ldr	r3, [r7, #20]
 800761c:	3301      	adds	r3, #1
 800761e:	617b      	str	r3, [r7, #20]
 8007620:	697b      	ldr	r3, [r7, #20]
 8007622:	2b07      	cmp	r3, #7
 8007624:	d9c8      	bls.n	80075b8 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	68fa      	ldr	r2, [r7, #12]
 800762a:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	693a      	ldr	r2, [r7, #16]
 8007630:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 8007632:	bf00      	nop
 8007634:	3718      	adds	r7, #24
 8007636:	46bd      	mov	sp, r7
 8007638:	bd80      	pop	{r7, pc}

0800763a <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800763a:	b580      	push	{r7, lr}
 800763c:	b086      	sub	sp, #24
 800763e:	af00      	add	r7, sp, #0
 8007640:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	6a1b      	ldr	r3, [r3, #32]
 8007646:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800764c:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800764e:	693b      	ldr	r3, [r7, #16]
 8007650:	2b00      	cmp	r3, #0
 8007652:	d043      	beq.n	80076dc <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8007654:	2300      	movs	r3, #0
 8007656:	617b      	str	r3, [r7, #20]
 8007658:	e037      	b.n	80076ca <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	781b      	ldrb	r3, [r3, #0]
 800765e:	60bb      	str	r3, [r7, #8]
      tmp++;
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	3301      	adds	r3, #1
 8007664:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007666:	693b      	ldr	r3, [r7, #16]
 8007668:	3b01      	subs	r3, #1
 800766a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	781b      	ldrb	r3, [r3, #0]
 8007670:	021a      	lsls	r2, r3, #8
 8007672:	68bb      	ldr	r3, [r7, #8]
 8007674:	4313      	orrs	r3, r2
 8007676:	60bb      	str	r3, [r7, #8]
      tmp++;
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	3301      	adds	r3, #1
 800767c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800767e:	693b      	ldr	r3, [r7, #16]
 8007680:	3b01      	subs	r3, #1
 8007682:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	781b      	ldrb	r3, [r3, #0]
 8007688:	041a      	lsls	r2, r3, #16
 800768a:	68bb      	ldr	r3, [r7, #8]
 800768c:	4313      	orrs	r3, r2
 800768e:	60bb      	str	r3, [r7, #8]
      tmp++;
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	3301      	adds	r3, #1
 8007694:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007696:	693b      	ldr	r3, [r7, #16]
 8007698:	3b01      	subs	r3, #1
 800769a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	781b      	ldrb	r3, [r3, #0]
 80076a0:	061a      	lsls	r2, r3, #24
 80076a2:	68bb      	ldr	r3, [r7, #8]
 80076a4:	4313      	orrs	r3, r2
 80076a6:	60bb      	str	r3, [r7, #8]
      tmp++;
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	3301      	adds	r3, #1
 80076ac:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80076ae:	693b      	ldr	r3, [r7, #16]
 80076b0:	3b01      	subs	r3, #1
 80076b2:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	f107 0208 	add.w	r2, r7, #8
 80076bc:	4611      	mov	r1, r2
 80076be:	4618      	mov	r0, r3
 80076c0:	f001 fcde 	bl	8009080 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 80076c4:	697b      	ldr	r3, [r7, #20]
 80076c6:	3301      	adds	r3, #1
 80076c8:	617b      	str	r3, [r7, #20]
 80076ca:	697b      	ldr	r3, [r7, #20]
 80076cc:	2b07      	cmp	r3, #7
 80076ce:	d9c4      	bls.n	800765a <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	68fa      	ldr	r2, [r7, #12]
 80076d4:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	693a      	ldr	r2, [r7, #16]
 80076da:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 80076dc:	bf00      	nop
 80076de:	3718      	adds	r7, #24
 80076e0:	46bd      	mov	sp, r7
 80076e2:	bd80      	pop	{r7, pc}

080076e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80076e4:	b580      	push	{r7, lr}
 80076e6:	b082      	sub	sp, #8
 80076e8:	af00      	add	r7, sp, #0
 80076ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d101      	bne.n	80076f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80076f2:	2301      	movs	r3, #1
 80076f4:	e041      	b.n	800777a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80076fc:	b2db      	uxtb	r3, r3
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d106      	bne.n	8007710 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	2200      	movs	r2, #0
 8007706:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800770a:	6878      	ldr	r0, [r7, #4]
 800770c:	f7fa f984 	bl	8001a18 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	2202      	movs	r2, #2
 8007714:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681a      	ldr	r2, [r3, #0]
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	3304      	adds	r3, #4
 8007720:	4619      	mov	r1, r3
 8007722:	4610      	mov	r0, r2
 8007724:	f000 fa96 	bl	8007c54 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	2201      	movs	r2, #1
 800772c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	2201      	movs	r2, #1
 8007734:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	2201      	movs	r2, #1
 800773c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	2201      	movs	r2, #1
 8007744:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	2201      	movs	r2, #1
 800774c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	2201      	movs	r2, #1
 8007754:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	2201      	movs	r2, #1
 800775c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	2201      	movs	r2, #1
 8007764:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	2201      	movs	r2, #1
 800776c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	2201      	movs	r2, #1
 8007774:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007778:	2300      	movs	r3, #0
}
 800777a:	4618      	mov	r0, r3
 800777c:	3708      	adds	r7, #8
 800777e:	46bd      	mov	sp, r7
 8007780:	bd80      	pop	{r7, pc}
	...

08007784 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007784:	b480      	push	{r7}
 8007786:	b085      	sub	sp, #20
 8007788:	af00      	add	r7, sp, #0
 800778a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007792:	b2db      	uxtb	r3, r3
 8007794:	2b01      	cmp	r3, #1
 8007796:	d001      	beq.n	800779c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007798:	2301      	movs	r3, #1
 800779a:	e04e      	b.n	800783a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	2202      	movs	r2, #2
 80077a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	68da      	ldr	r2, [r3, #12]
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	f042 0201 	orr.w	r2, r2, #1
 80077b2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	4a23      	ldr	r2, [pc, #140]	; (8007848 <HAL_TIM_Base_Start_IT+0xc4>)
 80077ba:	4293      	cmp	r3, r2
 80077bc:	d022      	beq.n	8007804 <HAL_TIM_Base_Start_IT+0x80>
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80077c6:	d01d      	beq.n	8007804 <HAL_TIM_Base_Start_IT+0x80>
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	4a1f      	ldr	r2, [pc, #124]	; (800784c <HAL_TIM_Base_Start_IT+0xc8>)
 80077ce:	4293      	cmp	r3, r2
 80077d0:	d018      	beq.n	8007804 <HAL_TIM_Base_Start_IT+0x80>
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	4a1e      	ldr	r2, [pc, #120]	; (8007850 <HAL_TIM_Base_Start_IT+0xcc>)
 80077d8:	4293      	cmp	r3, r2
 80077da:	d013      	beq.n	8007804 <HAL_TIM_Base_Start_IT+0x80>
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	4a1c      	ldr	r2, [pc, #112]	; (8007854 <HAL_TIM_Base_Start_IT+0xd0>)
 80077e2:	4293      	cmp	r3, r2
 80077e4:	d00e      	beq.n	8007804 <HAL_TIM_Base_Start_IT+0x80>
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	4a1b      	ldr	r2, [pc, #108]	; (8007858 <HAL_TIM_Base_Start_IT+0xd4>)
 80077ec:	4293      	cmp	r3, r2
 80077ee:	d009      	beq.n	8007804 <HAL_TIM_Base_Start_IT+0x80>
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	4a19      	ldr	r2, [pc, #100]	; (800785c <HAL_TIM_Base_Start_IT+0xd8>)
 80077f6:	4293      	cmp	r3, r2
 80077f8:	d004      	beq.n	8007804 <HAL_TIM_Base_Start_IT+0x80>
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	4a18      	ldr	r2, [pc, #96]	; (8007860 <HAL_TIM_Base_Start_IT+0xdc>)
 8007800:	4293      	cmp	r3, r2
 8007802:	d111      	bne.n	8007828 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	689b      	ldr	r3, [r3, #8]
 800780a:	f003 0307 	and.w	r3, r3, #7
 800780e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	2b06      	cmp	r3, #6
 8007814:	d010      	beq.n	8007838 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	681a      	ldr	r2, [r3, #0]
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	f042 0201 	orr.w	r2, r2, #1
 8007824:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007826:	e007      	b.n	8007838 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	681a      	ldr	r2, [r3, #0]
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	f042 0201 	orr.w	r2, r2, #1
 8007836:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007838:	2300      	movs	r3, #0
}
 800783a:	4618      	mov	r0, r3
 800783c:	3714      	adds	r7, #20
 800783e:	46bd      	mov	sp, r7
 8007840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007844:	4770      	bx	lr
 8007846:	bf00      	nop
 8007848:	40010000 	.word	0x40010000
 800784c:	40000400 	.word	0x40000400
 8007850:	40000800 	.word	0x40000800
 8007854:	40000c00 	.word	0x40000c00
 8007858:	40010400 	.word	0x40010400
 800785c:	40014000 	.word	0x40014000
 8007860:	40001800 	.word	0x40001800

08007864 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007864:	b580      	push	{r7, lr}
 8007866:	b082      	sub	sp, #8
 8007868:	af00      	add	r7, sp, #0
 800786a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	691b      	ldr	r3, [r3, #16]
 8007872:	f003 0302 	and.w	r3, r3, #2
 8007876:	2b02      	cmp	r3, #2
 8007878:	d122      	bne.n	80078c0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	68db      	ldr	r3, [r3, #12]
 8007880:	f003 0302 	and.w	r3, r3, #2
 8007884:	2b02      	cmp	r3, #2
 8007886:	d11b      	bne.n	80078c0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	f06f 0202 	mvn.w	r2, #2
 8007890:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	2201      	movs	r2, #1
 8007896:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	699b      	ldr	r3, [r3, #24]
 800789e:	f003 0303 	and.w	r3, r3, #3
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d003      	beq.n	80078ae <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80078a6:	6878      	ldr	r0, [r7, #4]
 80078a8:	f000 f9b5 	bl	8007c16 <HAL_TIM_IC_CaptureCallback>
 80078ac:	e005      	b.n	80078ba <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80078ae:	6878      	ldr	r0, [r7, #4]
 80078b0:	f000 f9a7 	bl	8007c02 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80078b4:	6878      	ldr	r0, [r7, #4]
 80078b6:	f000 f9b8 	bl	8007c2a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	2200      	movs	r2, #0
 80078be:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	691b      	ldr	r3, [r3, #16]
 80078c6:	f003 0304 	and.w	r3, r3, #4
 80078ca:	2b04      	cmp	r3, #4
 80078cc:	d122      	bne.n	8007914 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	68db      	ldr	r3, [r3, #12]
 80078d4:	f003 0304 	and.w	r3, r3, #4
 80078d8:	2b04      	cmp	r3, #4
 80078da:	d11b      	bne.n	8007914 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	f06f 0204 	mvn.w	r2, #4
 80078e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	2202      	movs	r2, #2
 80078ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	699b      	ldr	r3, [r3, #24]
 80078f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d003      	beq.n	8007902 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80078fa:	6878      	ldr	r0, [r7, #4]
 80078fc:	f000 f98b 	bl	8007c16 <HAL_TIM_IC_CaptureCallback>
 8007900:	e005      	b.n	800790e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007902:	6878      	ldr	r0, [r7, #4]
 8007904:	f000 f97d 	bl	8007c02 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007908:	6878      	ldr	r0, [r7, #4]
 800790a:	f000 f98e 	bl	8007c2a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	2200      	movs	r2, #0
 8007912:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	691b      	ldr	r3, [r3, #16]
 800791a:	f003 0308 	and.w	r3, r3, #8
 800791e:	2b08      	cmp	r3, #8
 8007920:	d122      	bne.n	8007968 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	68db      	ldr	r3, [r3, #12]
 8007928:	f003 0308 	and.w	r3, r3, #8
 800792c:	2b08      	cmp	r3, #8
 800792e:	d11b      	bne.n	8007968 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	f06f 0208 	mvn.w	r2, #8
 8007938:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	2204      	movs	r2, #4
 800793e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	69db      	ldr	r3, [r3, #28]
 8007946:	f003 0303 	and.w	r3, r3, #3
 800794a:	2b00      	cmp	r3, #0
 800794c:	d003      	beq.n	8007956 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800794e:	6878      	ldr	r0, [r7, #4]
 8007950:	f000 f961 	bl	8007c16 <HAL_TIM_IC_CaptureCallback>
 8007954:	e005      	b.n	8007962 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007956:	6878      	ldr	r0, [r7, #4]
 8007958:	f000 f953 	bl	8007c02 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800795c:	6878      	ldr	r0, [r7, #4]
 800795e:	f000 f964 	bl	8007c2a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	2200      	movs	r2, #0
 8007966:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	691b      	ldr	r3, [r3, #16]
 800796e:	f003 0310 	and.w	r3, r3, #16
 8007972:	2b10      	cmp	r3, #16
 8007974:	d122      	bne.n	80079bc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	68db      	ldr	r3, [r3, #12]
 800797c:	f003 0310 	and.w	r3, r3, #16
 8007980:	2b10      	cmp	r3, #16
 8007982:	d11b      	bne.n	80079bc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	f06f 0210 	mvn.w	r2, #16
 800798c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	2208      	movs	r2, #8
 8007992:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	69db      	ldr	r3, [r3, #28]
 800799a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d003      	beq.n	80079aa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80079a2:	6878      	ldr	r0, [r7, #4]
 80079a4:	f000 f937 	bl	8007c16 <HAL_TIM_IC_CaptureCallback>
 80079a8:	e005      	b.n	80079b6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80079aa:	6878      	ldr	r0, [r7, #4]
 80079ac:	f000 f929 	bl	8007c02 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80079b0:	6878      	ldr	r0, [r7, #4]
 80079b2:	f000 f93a 	bl	8007c2a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	2200      	movs	r2, #0
 80079ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	691b      	ldr	r3, [r3, #16]
 80079c2:	f003 0301 	and.w	r3, r3, #1
 80079c6:	2b01      	cmp	r3, #1
 80079c8:	d10e      	bne.n	80079e8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	68db      	ldr	r3, [r3, #12]
 80079d0:	f003 0301 	and.w	r3, r3, #1
 80079d4:	2b01      	cmp	r3, #1
 80079d6:	d107      	bne.n	80079e8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	f06f 0201 	mvn.w	r2, #1
 80079e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80079e2:	6878      	ldr	r0, [r7, #4]
 80079e4:	f7f9 ffa8 	bl	8001938 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	691b      	ldr	r3, [r3, #16]
 80079ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079f2:	2b80      	cmp	r3, #128	; 0x80
 80079f4:	d10e      	bne.n	8007a14 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	68db      	ldr	r3, [r3, #12]
 80079fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a00:	2b80      	cmp	r3, #128	; 0x80
 8007a02:	d107      	bne.n	8007a14 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007a0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007a0e:	6878      	ldr	r0, [r7, #4]
 8007a10:	f000 fae0 	bl	8007fd4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	691b      	ldr	r3, [r3, #16]
 8007a1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a1e:	2b40      	cmp	r3, #64	; 0x40
 8007a20:	d10e      	bne.n	8007a40 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	68db      	ldr	r3, [r3, #12]
 8007a28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a2c:	2b40      	cmp	r3, #64	; 0x40
 8007a2e:	d107      	bne.n	8007a40 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007a38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007a3a:	6878      	ldr	r0, [r7, #4]
 8007a3c:	f000 f8ff 	bl	8007c3e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	691b      	ldr	r3, [r3, #16]
 8007a46:	f003 0320 	and.w	r3, r3, #32
 8007a4a:	2b20      	cmp	r3, #32
 8007a4c:	d10e      	bne.n	8007a6c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	68db      	ldr	r3, [r3, #12]
 8007a54:	f003 0320 	and.w	r3, r3, #32
 8007a58:	2b20      	cmp	r3, #32
 8007a5a:	d107      	bne.n	8007a6c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	f06f 0220 	mvn.w	r2, #32
 8007a64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007a66:	6878      	ldr	r0, [r7, #4]
 8007a68:	f000 faaa 	bl	8007fc0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007a6c:	bf00      	nop
 8007a6e:	3708      	adds	r7, #8
 8007a70:	46bd      	mov	sp, r7
 8007a72:	bd80      	pop	{r7, pc}

08007a74 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007a74:	b580      	push	{r7, lr}
 8007a76:	b084      	sub	sp, #16
 8007a78:	af00      	add	r7, sp, #0
 8007a7a:	6078      	str	r0, [r7, #4]
 8007a7c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007a7e:	2300      	movs	r3, #0
 8007a80:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007a88:	2b01      	cmp	r3, #1
 8007a8a:	d101      	bne.n	8007a90 <HAL_TIM_ConfigClockSource+0x1c>
 8007a8c:	2302      	movs	r3, #2
 8007a8e:	e0b4      	b.n	8007bfa <HAL_TIM_ConfigClockSource+0x186>
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	2201      	movs	r2, #1
 8007a94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	2202      	movs	r2, #2
 8007a9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	689b      	ldr	r3, [r3, #8]
 8007aa6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007aa8:	68bb      	ldr	r3, [r7, #8]
 8007aaa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007aae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007ab0:	68bb      	ldr	r3, [r7, #8]
 8007ab2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007ab6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	68ba      	ldr	r2, [r7, #8]
 8007abe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007ac0:	683b      	ldr	r3, [r7, #0]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007ac8:	d03e      	beq.n	8007b48 <HAL_TIM_ConfigClockSource+0xd4>
 8007aca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007ace:	f200 8087 	bhi.w	8007be0 <HAL_TIM_ConfigClockSource+0x16c>
 8007ad2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ad6:	f000 8086 	beq.w	8007be6 <HAL_TIM_ConfigClockSource+0x172>
 8007ada:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ade:	d87f      	bhi.n	8007be0 <HAL_TIM_ConfigClockSource+0x16c>
 8007ae0:	2b70      	cmp	r3, #112	; 0x70
 8007ae2:	d01a      	beq.n	8007b1a <HAL_TIM_ConfigClockSource+0xa6>
 8007ae4:	2b70      	cmp	r3, #112	; 0x70
 8007ae6:	d87b      	bhi.n	8007be0 <HAL_TIM_ConfigClockSource+0x16c>
 8007ae8:	2b60      	cmp	r3, #96	; 0x60
 8007aea:	d050      	beq.n	8007b8e <HAL_TIM_ConfigClockSource+0x11a>
 8007aec:	2b60      	cmp	r3, #96	; 0x60
 8007aee:	d877      	bhi.n	8007be0 <HAL_TIM_ConfigClockSource+0x16c>
 8007af0:	2b50      	cmp	r3, #80	; 0x50
 8007af2:	d03c      	beq.n	8007b6e <HAL_TIM_ConfigClockSource+0xfa>
 8007af4:	2b50      	cmp	r3, #80	; 0x50
 8007af6:	d873      	bhi.n	8007be0 <HAL_TIM_ConfigClockSource+0x16c>
 8007af8:	2b40      	cmp	r3, #64	; 0x40
 8007afa:	d058      	beq.n	8007bae <HAL_TIM_ConfigClockSource+0x13a>
 8007afc:	2b40      	cmp	r3, #64	; 0x40
 8007afe:	d86f      	bhi.n	8007be0 <HAL_TIM_ConfigClockSource+0x16c>
 8007b00:	2b30      	cmp	r3, #48	; 0x30
 8007b02:	d064      	beq.n	8007bce <HAL_TIM_ConfigClockSource+0x15a>
 8007b04:	2b30      	cmp	r3, #48	; 0x30
 8007b06:	d86b      	bhi.n	8007be0 <HAL_TIM_ConfigClockSource+0x16c>
 8007b08:	2b20      	cmp	r3, #32
 8007b0a:	d060      	beq.n	8007bce <HAL_TIM_ConfigClockSource+0x15a>
 8007b0c:	2b20      	cmp	r3, #32
 8007b0e:	d867      	bhi.n	8007be0 <HAL_TIM_ConfigClockSource+0x16c>
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d05c      	beq.n	8007bce <HAL_TIM_ConfigClockSource+0x15a>
 8007b14:	2b10      	cmp	r3, #16
 8007b16:	d05a      	beq.n	8007bce <HAL_TIM_ConfigClockSource+0x15a>
 8007b18:	e062      	b.n	8007be0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	6818      	ldr	r0, [r3, #0]
 8007b1e:	683b      	ldr	r3, [r7, #0]
 8007b20:	6899      	ldr	r1, [r3, #8]
 8007b22:	683b      	ldr	r3, [r7, #0]
 8007b24:	685a      	ldr	r2, [r3, #4]
 8007b26:	683b      	ldr	r3, [r7, #0]
 8007b28:	68db      	ldr	r3, [r3, #12]
 8007b2a:	f000 f9ad 	bl	8007e88 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	689b      	ldr	r3, [r3, #8]
 8007b34:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007b36:	68bb      	ldr	r3, [r7, #8]
 8007b38:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007b3c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	68ba      	ldr	r2, [r7, #8]
 8007b44:	609a      	str	r2, [r3, #8]
      break;
 8007b46:	e04f      	b.n	8007be8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	6818      	ldr	r0, [r3, #0]
 8007b4c:	683b      	ldr	r3, [r7, #0]
 8007b4e:	6899      	ldr	r1, [r3, #8]
 8007b50:	683b      	ldr	r3, [r7, #0]
 8007b52:	685a      	ldr	r2, [r3, #4]
 8007b54:	683b      	ldr	r3, [r7, #0]
 8007b56:	68db      	ldr	r3, [r3, #12]
 8007b58:	f000 f996 	bl	8007e88 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	689a      	ldr	r2, [r3, #8]
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007b6a:	609a      	str	r2, [r3, #8]
      break;
 8007b6c:	e03c      	b.n	8007be8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	6818      	ldr	r0, [r3, #0]
 8007b72:	683b      	ldr	r3, [r7, #0]
 8007b74:	6859      	ldr	r1, [r3, #4]
 8007b76:	683b      	ldr	r3, [r7, #0]
 8007b78:	68db      	ldr	r3, [r3, #12]
 8007b7a:	461a      	mov	r2, r3
 8007b7c:	f000 f90a 	bl	8007d94 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	2150      	movs	r1, #80	; 0x50
 8007b86:	4618      	mov	r0, r3
 8007b88:	f000 f963 	bl	8007e52 <TIM_ITRx_SetConfig>
      break;
 8007b8c:	e02c      	b.n	8007be8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	6818      	ldr	r0, [r3, #0]
 8007b92:	683b      	ldr	r3, [r7, #0]
 8007b94:	6859      	ldr	r1, [r3, #4]
 8007b96:	683b      	ldr	r3, [r7, #0]
 8007b98:	68db      	ldr	r3, [r3, #12]
 8007b9a:	461a      	mov	r2, r3
 8007b9c:	f000 f929 	bl	8007df2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	2160      	movs	r1, #96	; 0x60
 8007ba6:	4618      	mov	r0, r3
 8007ba8:	f000 f953 	bl	8007e52 <TIM_ITRx_SetConfig>
      break;
 8007bac:	e01c      	b.n	8007be8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	6818      	ldr	r0, [r3, #0]
 8007bb2:	683b      	ldr	r3, [r7, #0]
 8007bb4:	6859      	ldr	r1, [r3, #4]
 8007bb6:	683b      	ldr	r3, [r7, #0]
 8007bb8:	68db      	ldr	r3, [r3, #12]
 8007bba:	461a      	mov	r2, r3
 8007bbc:	f000 f8ea 	bl	8007d94 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	2140      	movs	r1, #64	; 0x40
 8007bc6:	4618      	mov	r0, r3
 8007bc8:	f000 f943 	bl	8007e52 <TIM_ITRx_SetConfig>
      break;
 8007bcc:	e00c      	b.n	8007be8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681a      	ldr	r2, [r3, #0]
 8007bd2:	683b      	ldr	r3, [r7, #0]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	4619      	mov	r1, r3
 8007bd8:	4610      	mov	r0, r2
 8007bda:	f000 f93a 	bl	8007e52 <TIM_ITRx_SetConfig>
      break;
 8007bde:	e003      	b.n	8007be8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007be0:	2301      	movs	r3, #1
 8007be2:	73fb      	strb	r3, [r7, #15]
      break;
 8007be4:	e000      	b.n	8007be8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007be6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	2201      	movs	r2, #1
 8007bec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	2200      	movs	r2, #0
 8007bf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007bf8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bfa:	4618      	mov	r0, r3
 8007bfc:	3710      	adds	r7, #16
 8007bfe:	46bd      	mov	sp, r7
 8007c00:	bd80      	pop	{r7, pc}

08007c02 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007c02:	b480      	push	{r7}
 8007c04:	b083      	sub	sp, #12
 8007c06:	af00      	add	r7, sp, #0
 8007c08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007c0a:	bf00      	nop
 8007c0c:	370c      	adds	r7, #12
 8007c0e:	46bd      	mov	sp, r7
 8007c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c14:	4770      	bx	lr

08007c16 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007c16:	b480      	push	{r7}
 8007c18:	b083      	sub	sp, #12
 8007c1a:	af00      	add	r7, sp, #0
 8007c1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007c1e:	bf00      	nop
 8007c20:	370c      	adds	r7, #12
 8007c22:	46bd      	mov	sp, r7
 8007c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c28:	4770      	bx	lr

08007c2a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007c2a:	b480      	push	{r7}
 8007c2c:	b083      	sub	sp, #12
 8007c2e:	af00      	add	r7, sp, #0
 8007c30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007c32:	bf00      	nop
 8007c34:	370c      	adds	r7, #12
 8007c36:	46bd      	mov	sp, r7
 8007c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c3c:	4770      	bx	lr

08007c3e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007c3e:	b480      	push	{r7}
 8007c40:	b083      	sub	sp, #12
 8007c42:	af00      	add	r7, sp, #0
 8007c44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007c46:	bf00      	nop
 8007c48:	370c      	adds	r7, #12
 8007c4a:	46bd      	mov	sp, r7
 8007c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c50:	4770      	bx	lr
	...

08007c54 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007c54:	b480      	push	{r7}
 8007c56:	b085      	sub	sp, #20
 8007c58:	af00      	add	r7, sp, #0
 8007c5a:	6078      	str	r0, [r7, #4]
 8007c5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	4a40      	ldr	r2, [pc, #256]	; (8007d68 <TIM_Base_SetConfig+0x114>)
 8007c68:	4293      	cmp	r3, r2
 8007c6a:	d013      	beq.n	8007c94 <TIM_Base_SetConfig+0x40>
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c72:	d00f      	beq.n	8007c94 <TIM_Base_SetConfig+0x40>
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	4a3d      	ldr	r2, [pc, #244]	; (8007d6c <TIM_Base_SetConfig+0x118>)
 8007c78:	4293      	cmp	r3, r2
 8007c7a:	d00b      	beq.n	8007c94 <TIM_Base_SetConfig+0x40>
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	4a3c      	ldr	r2, [pc, #240]	; (8007d70 <TIM_Base_SetConfig+0x11c>)
 8007c80:	4293      	cmp	r3, r2
 8007c82:	d007      	beq.n	8007c94 <TIM_Base_SetConfig+0x40>
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	4a3b      	ldr	r2, [pc, #236]	; (8007d74 <TIM_Base_SetConfig+0x120>)
 8007c88:	4293      	cmp	r3, r2
 8007c8a:	d003      	beq.n	8007c94 <TIM_Base_SetConfig+0x40>
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	4a3a      	ldr	r2, [pc, #232]	; (8007d78 <TIM_Base_SetConfig+0x124>)
 8007c90:	4293      	cmp	r3, r2
 8007c92:	d108      	bne.n	8007ca6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c9a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007c9c:	683b      	ldr	r3, [r7, #0]
 8007c9e:	685b      	ldr	r3, [r3, #4]
 8007ca0:	68fa      	ldr	r2, [r7, #12]
 8007ca2:	4313      	orrs	r3, r2
 8007ca4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	4a2f      	ldr	r2, [pc, #188]	; (8007d68 <TIM_Base_SetConfig+0x114>)
 8007caa:	4293      	cmp	r3, r2
 8007cac:	d02b      	beq.n	8007d06 <TIM_Base_SetConfig+0xb2>
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007cb4:	d027      	beq.n	8007d06 <TIM_Base_SetConfig+0xb2>
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	4a2c      	ldr	r2, [pc, #176]	; (8007d6c <TIM_Base_SetConfig+0x118>)
 8007cba:	4293      	cmp	r3, r2
 8007cbc:	d023      	beq.n	8007d06 <TIM_Base_SetConfig+0xb2>
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	4a2b      	ldr	r2, [pc, #172]	; (8007d70 <TIM_Base_SetConfig+0x11c>)
 8007cc2:	4293      	cmp	r3, r2
 8007cc4:	d01f      	beq.n	8007d06 <TIM_Base_SetConfig+0xb2>
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	4a2a      	ldr	r2, [pc, #168]	; (8007d74 <TIM_Base_SetConfig+0x120>)
 8007cca:	4293      	cmp	r3, r2
 8007ccc:	d01b      	beq.n	8007d06 <TIM_Base_SetConfig+0xb2>
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	4a29      	ldr	r2, [pc, #164]	; (8007d78 <TIM_Base_SetConfig+0x124>)
 8007cd2:	4293      	cmp	r3, r2
 8007cd4:	d017      	beq.n	8007d06 <TIM_Base_SetConfig+0xb2>
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	4a28      	ldr	r2, [pc, #160]	; (8007d7c <TIM_Base_SetConfig+0x128>)
 8007cda:	4293      	cmp	r3, r2
 8007cdc:	d013      	beq.n	8007d06 <TIM_Base_SetConfig+0xb2>
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	4a27      	ldr	r2, [pc, #156]	; (8007d80 <TIM_Base_SetConfig+0x12c>)
 8007ce2:	4293      	cmp	r3, r2
 8007ce4:	d00f      	beq.n	8007d06 <TIM_Base_SetConfig+0xb2>
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	4a26      	ldr	r2, [pc, #152]	; (8007d84 <TIM_Base_SetConfig+0x130>)
 8007cea:	4293      	cmp	r3, r2
 8007cec:	d00b      	beq.n	8007d06 <TIM_Base_SetConfig+0xb2>
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	4a25      	ldr	r2, [pc, #148]	; (8007d88 <TIM_Base_SetConfig+0x134>)
 8007cf2:	4293      	cmp	r3, r2
 8007cf4:	d007      	beq.n	8007d06 <TIM_Base_SetConfig+0xb2>
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	4a24      	ldr	r2, [pc, #144]	; (8007d8c <TIM_Base_SetConfig+0x138>)
 8007cfa:	4293      	cmp	r3, r2
 8007cfc:	d003      	beq.n	8007d06 <TIM_Base_SetConfig+0xb2>
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	4a23      	ldr	r2, [pc, #140]	; (8007d90 <TIM_Base_SetConfig+0x13c>)
 8007d02:	4293      	cmp	r3, r2
 8007d04:	d108      	bne.n	8007d18 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007d0c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007d0e:	683b      	ldr	r3, [r7, #0]
 8007d10:	68db      	ldr	r3, [r3, #12]
 8007d12:	68fa      	ldr	r2, [r7, #12]
 8007d14:	4313      	orrs	r3, r2
 8007d16:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007d1e:	683b      	ldr	r3, [r7, #0]
 8007d20:	695b      	ldr	r3, [r3, #20]
 8007d22:	4313      	orrs	r3, r2
 8007d24:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	68fa      	ldr	r2, [r7, #12]
 8007d2a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007d2c:	683b      	ldr	r3, [r7, #0]
 8007d2e:	689a      	ldr	r2, [r3, #8]
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007d34:	683b      	ldr	r3, [r7, #0]
 8007d36:	681a      	ldr	r2, [r3, #0]
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	4a0a      	ldr	r2, [pc, #40]	; (8007d68 <TIM_Base_SetConfig+0x114>)
 8007d40:	4293      	cmp	r3, r2
 8007d42:	d003      	beq.n	8007d4c <TIM_Base_SetConfig+0xf8>
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	4a0c      	ldr	r2, [pc, #48]	; (8007d78 <TIM_Base_SetConfig+0x124>)
 8007d48:	4293      	cmp	r3, r2
 8007d4a:	d103      	bne.n	8007d54 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007d4c:	683b      	ldr	r3, [r7, #0]
 8007d4e:	691a      	ldr	r2, [r3, #16]
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	2201      	movs	r2, #1
 8007d58:	615a      	str	r2, [r3, #20]
}
 8007d5a:	bf00      	nop
 8007d5c:	3714      	adds	r7, #20
 8007d5e:	46bd      	mov	sp, r7
 8007d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d64:	4770      	bx	lr
 8007d66:	bf00      	nop
 8007d68:	40010000 	.word	0x40010000
 8007d6c:	40000400 	.word	0x40000400
 8007d70:	40000800 	.word	0x40000800
 8007d74:	40000c00 	.word	0x40000c00
 8007d78:	40010400 	.word	0x40010400
 8007d7c:	40014000 	.word	0x40014000
 8007d80:	40014400 	.word	0x40014400
 8007d84:	40014800 	.word	0x40014800
 8007d88:	40001800 	.word	0x40001800
 8007d8c:	40001c00 	.word	0x40001c00
 8007d90:	40002000 	.word	0x40002000

08007d94 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007d94:	b480      	push	{r7}
 8007d96:	b087      	sub	sp, #28
 8007d98:	af00      	add	r7, sp, #0
 8007d9a:	60f8      	str	r0, [r7, #12]
 8007d9c:	60b9      	str	r1, [r7, #8]
 8007d9e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	6a1b      	ldr	r3, [r3, #32]
 8007da4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	6a1b      	ldr	r3, [r3, #32]
 8007daa:	f023 0201 	bic.w	r2, r3, #1
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	699b      	ldr	r3, [r3, #24]
 8007db6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007db8:	693b      	ldr	r3, [r7, #16]
 8007dba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007dbe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	011b      	lsls	r3, r3, #4
 8007dc4:	693a      	ldr	r2, [r7, #16]
 8007dc6:	4313      	orrs	r3, r2
 8007dc8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007dca:	697b      	ldr	r3, [r7, #20]
 8007dcc:	f023 030a 	bic.w	r3, r3, #10
 8007dd0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007dd2:	697a      	ldr	r2, [r7, #20]
 8007dd4:	68bb      	ldr	r3, [r7, #8]
 8007dd6:	4313      	orrs	r3, r2
 8007dd8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	693a      	ldr	r2, [r7, #16]
 8007dde:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	697a      	ldr	r2, [r7, #20]
 8007de4:	621a      	str	r2, [r3, #32]
}
 8007de6:	bf00      	nop
 8007de8:	371c      	adds	r7, #28
 8007dea:	46bd      	mov	sp, r7
 8007dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df0:	4770      	bx	lr

08007df2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007df2:	b480      	push	{r7}
 8007df4:	b087      	sub	sp, #28
 8007df6:	af00      	add	r7, sp, #0
 8007df8:	60f8      	str	r0, [r7, #12]
 8007dfa:	60b9      	str	r1, [r7, #8]
 8007dfc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	6a1b      	ldr	r3, [r3, #32]
 8007e02:	f023 0210 	bic.w	r2, r3, #16
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	699b      	ldr	r3, [r3, #24]
 8007e0e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	6a1b      	ldr	r3, [r3, #32]
 8007e14:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007e16:	697b      	ldr	r3, [r7, #20]
 8007e18:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007e1c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	031b      	lsls	r3, r3, #12
 8007e22:	697a      	ldr	r2, [r7, #20]
 8007e24:	4313      	orrs	r3, r2
 8007e26:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007e28:	693b      	ldr	r3, [r7, #16]
 8007e2a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007e2e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007e30:	68bb      	ldr	r3, [r7, #8]
 8007e32:	011b      	lsls	r3, r3, #4
 8007e34:	693a      	ldr	r2, [r7, #16]
 8007e36:	4313      	orrs	r3, r2
 8007e38:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	697a      	ldr	r2, [r7, #20]
 8007e3e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	693a      	ldr	r2, [r7, #16]
 8007e44:	621a      	str	r2, [r3, #32]
}
 8007e46:	bf00      	nop
 8007e48:	371c      	adds	r7, #28
 8007e4a:	46bd      	mov	sp, r7
 8007e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e50:	4770      	bx	lr

08007e52 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007e52:	b480      	push	{r7}
 8007e54:	b085      	sub	sp, #20
 8007e56:	af00      	add	r7, sp, #0
 8007e58:	6078      	str	r0, [r7, #4]
 8007e5a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	689b      	ldr	r3, [r3, #8]
 8007e60:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e68:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007e6a:	683a      	ldr	r2, [r7, #0]
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	4313      	orrs	r3, r2
 8007e70:	f043 0307 	orr.w	r3, r3, #7
 8007e74:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	68fa      	ldr	r2, [r7, #12]
 8007e7a:	609a      	str	r2, [r3, #8]
}
 8007e7c:	bf00      	nop
 8007e7e:	3714      	adds	r7, #20
 8007e80:	46bd      	mov	sp, r7
 8007e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e86:	4770      	bx	lr

08007e88 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007e88:	b480      	push	{r7}
 8007e8a:	b087      	sub	sp, #28
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	60f8      	str	r0, [r7, #12]
 8007e90:	60b9      	str	r1, [r7, #8]
 8007e92:	607a      	str	r2, [r7, #4]
 8007e94:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	689b      	ldr	r3, [r3, #8]
 8007e9a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007e9c:	697b      	ldr	r3, [r7, #20]
 8007e9e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007ea2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007ea4:	683b      	ldr	r3, [r7, #0]
 8007ea6:	021a      	lsls	r2, r3, #8
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	431a      	orrs	r2, r3
 8007eac:	68bb      	ldr	r3, [r7, #8]
 8007eae:	4313      	orrs	r3, r2
 8007eb0:	697a      	ldr	r2, [r7, #20]
 8007eb2:	4313      	orrs	r3, r2
 8007eb4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	697a      	ldr	r2, [r7, #20]
 8007eba:	609a      	str	r2, [r3, #8]
}
 8007ebc:	bf00      	nop
 8007ebe:	371c      	adds	r7, #28
 8007ec0:	46bd      	mov	sp, r7
 8007ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec6:	4770      	bx	lr

08007ec8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007ec8:	b480      	push	{r7}
 8007eca:	b085      	sub	sp, #20
 8007ecc:	af00      	add	r7, sp, #0
 8007ece:	6078      	str	r0, [r7, #4]
 8007ed0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007ed8:	2b01      	cmp	r3, #1
 8007eda:	d101      	bne.n	8007ee0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007edc:	2302      	movs	r3, #2
 8007ede:	e05a      	b.n	8007f96 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	2201      	movs	r2, #1
 8007ee4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	2202      	movs	r2, #2
 8007eec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	685b      	ldr	r3, [r3, #4]
 8007ef6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	689b      	ldr	r3, [r3, #8]
 8007efe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f06:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007f08:	683b      	ldr	r3, [r7, #0]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	68fa      	ldr	r2, [r7, #12]
 8007f0e:	4313      	orrs	r3, r2
 8007f10:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	68fa      	ldr	r2, [r7, #12]
 8007f18:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	4a21      	ldr	r2, [pc, #132]	; (8007fa4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007f20:	4293      	cmp	r3, r2
 8007f22:	d022      	beq.n	8007f6a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f2c:	d01d      	beq.n	8007f6a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	4a1d      	ldr	r2, [pc, #116]	; (8007fa8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007f34:	4293      	cmp	r3, r2
 8007f36:	d018      	beq.n	8007f6a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	4a1b      	ldr	r2, [pc, #108]	; (8007fac <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007f3e:	4293      	cmp	r3, r2
 8007f40:	d013      	beq.n	8007f6a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	4a1a      	ldr	r2, [pc, #104]	; (8007fb0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007f48:	4293      	cmp	r3, r2
 8007f4a:	d00e      	beq.n	8007f6a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	4a18      	ldr	r2, [pc, #96]	; (8007fb4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007f52:	4293      	cmp	r3, r2
 8007f54:	d009      	beq.n	8007f6a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	4a17      	ldr	r2, [pc, #92]	; (8007fb8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007f5c:	4293      	cmp	r3, r2
 8007f5e:	d004      	beq.n	8007f6a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	4a15      	ldr	r2, [pc, #84]	; (8007fbc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007f66:	4293      	cmp	r3, r2
 8007f68:	d10c      	bne.n	8007f84 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007f6a:	68bb      	ldr	r3, [r7, #8]
 8007f6c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007f70:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007f72:	683b      	ldr	r3, [r7, #0]
 8007f74:	685b      	ldr	r3, [r3, #4]
 8007f76:	68ba      	ldr	r2, [r7, #8]
 8007f78:	4313      	orrs	r3, r2
 8007f7a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	68ba      	ldr	r2, [r7, #8]
 8007f82:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	2201      	movs	r2, #1
 8007f88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	2200      	movs	r2, #0
 8007f90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007f94:	2300      	movs	r3, #0
}
 8007f96:	4618      	mov	r0, r3
 8007f98:	3714      	adds	r7, #20
 8007f9a:	46bd      	mov	sp, r7
 8007f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa0:	4770      	bx	lr
 8007fa2:	bf00      	nop
 8007fa4:	40010000 	.word	0x40010000
 8007fa8:	40000400 	.word	0x40000400
 8007fac:	40000800 	.word	0x40000800
 8007fb0:	40000c00 	.word	0x40000c00
 8007fb4:	40010400 	.word	0x40010400
 8007fb8:	40014000 	.word	0x40014000
 8007fbc:	40001800 	.word	0x40001800

08007fc0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007fc0:	b480      	push	{r7}
 8007fc2:	b083      	sub	sp, #12
 8007fc4:	af00      	add	r7, sp, #0
 8007fc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007fc8:	bf00      	nop
 8007fca:	370c      	adds	r7, #12
 8007fcc:	46bd      	mov	sp, r7
 8007fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd2:	4770      	bx	lr

08007fd4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007fd4:	b480      	push	{r7}
 8007fd6:	b083      	sub	sp, #12
 8007fd8:	af00      	add	r7, sp, #0
 8007fda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007fdc:	bf00      	nop
 8007fde:	370c      	adds	r7, #12
 8007fe0:	46bd      	mov	sp, r7
 8007fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe6:	4770      	bx	lr

08007fe8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007fe8:	b580      	push	{r7, lr}
 8007fea:	b082      	sub	sp, #8
 8007fec:	af00      	add	r7, sp, #0
 8007fee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d101      	bne.n	8007ffa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007ff6:	2301      	movs	r3, #1
 8007ff8:	e03f      	b.n	800807a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008000:	b2db      	uxtb	r3, r3
 8008002:	2b00      	cmp	r3, #0
 8008004:	d106      	bne.n	8008014 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	2200      	movs	r2, #0
 800800a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800800e:	6878      	ldr	r0, [r7, #4]
 8008010:	f7f9 fd7e 	bl	8001b10 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	2224      	movs	r2, #36	; 0x24
 8008018:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	68da      	ldr	r2, [r3, #12]
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800802a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800802c:	6878      	ldr	r0, [r7, #4]
 800802e:	f000 fd7b 	bl	8008b28 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	691a      	ldr	r2, [r3, #16]
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008040:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	695a      	ldr	r2, [r3, #20]
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008050:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	68da      	ldr	r2, [r3, #12]
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008060:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	2200      	movs	r2, #0
 8008066:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	2220      	movs	r2, #32
 800806c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	2220      	movs	r2, #32
 8008074:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008078:	2300      	movs	r3, #0
}
 800807a:	4618      	mov	r0, r3
 800807c:	3708      	adds	r7, #8
 800807e:	46bd      	mov	sp, r7
 8008080:	bd80      	pop	{r7, pc}

08008082 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008082:	b580      	push	{r7, lr}
 8008084:	b08a      	sub	sp, #40	; 0x28
 8008086:	af02      	add	r7, sp, #8
 8008088:	60f8      	str	r0, [r7, #12]
 800808a:	60b9      	str	r1, [r7, #8]
 800808c:	603b      	str	r3, [r7, #0]
 800808e:	4613      	mov	r3, r2
 8008090:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008092:	2300      	movs	r3, #0
 8008094:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800809c:	b2db      	uxtb	r3, r3
 800809e:	2b20      	cmp	r3, #32
 80080a0:	d17c      	bne.n	800819c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80080a2:	68bb      	ldr	r3, [r7, #8]
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d002      	beq.n	80080ae <HAL_UART_Transmit+0x2c>
 80080a8:	88fb      	ldrh	r3, [r7, #6]
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d101      	bne.n	80080b2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80080ae:	2301      	movs	r3, #1
 80080b0:	e075      	b.n	800819e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80080b8:	2b01      	cmp	r3, #1
 80080ba:	d101      	bne.n	80080c0 <HAL_UART_Transmit+0x3e>
 80080bc:	2302      	movs	r3, #2
 80080be:	e06e      	b.n	800819e <HAL_UART_Transmit+0x11c>
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	2201      	movs	r2, #1
 80080c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	2200      	movs	r2, #0
 80080cc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	2221      	movs	r2, #33	; 0x21
 80080d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80080d6:	f7f9 fe31 	bl	8001d3c <HAL_GetTick>
 80080da:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	88fa      	ldrh	r2, [r7, #6]
 80080e0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	88fa      	ldrh	r2, [r7, #6]
 80080e6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	689b      	ldr	r3, [r3, #8]
 80080ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80080f0:	d108      	bne.n	8008104 <HAL_UART_Transmit+0x82>
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	691b      	ldr	r3, [r3, #16]
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d104      	bne.n	8008104 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80080fa:	2300      	movs	r3, #0
 80080fc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80080fe:	68bb      	ldr	r3, [r7, #8]
 8008100:	61bb      	str	r3, [r7, #24]
 8008102:	e003      	b.n	800810c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8008104:	68bb      	ldr	r3, [r7, #8]
 8008106:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008108:	2300      	movs	r3, #0
 800810a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	2200      	movs	r2, #0
 8008110:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8008114:	e02a      	b.n	800816c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008116:	683b      	ldr	r3, [r7, #0]
 8008118:	9300      	str	r3, [sp, #0]
 800811a:	697b      	ldr	r3, [r7, #20]
 800811c:	2200      	movs	r2, #0
 800811e:	2180      	movs	r1, #128	; 0x80
 8008120:	68f8      	ldr	r0, [r7, #12]
 8008122:	f000 faf9 	bl	8008718 <UART_WaitOnFlagUntilTimeout>
 8008126:	4603      	mov	r3, r0
 8008128:	2b00      	cmp	r3, #0
 800812a:	d001      	beq.n	8008130 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800812c:	2303      	movs	r3, #3
 800812e:	e036      	b.n	800819e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8008130:	69fb      	ldr	r3, [r7, #28]
 8008132:	2b00      	cmp	r3, #0
 8008134:	d10b      	bne.n	800814e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008136:	69bb      	ldr	r3, [r7, #24]
 8008138:	881b      	ldrh	r3, [r3, #0]
 800813a:	461a      	mov	r2, r3
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008144:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8008146:	69bb      	ldr	r3, [r7, #24]
 8008148:	3302      	adds	r3, #2
 800814a:	61bb      	str	r3, [r7, #24]
 800814c:	e007      	b.n	800815e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800814e:	69fb      	ldr	r3, [r7, #28]
 8008150:	781a      	ldrb	r2, [r3, #0]
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8008158:	69fb      	ldr	r3, [r7, #28]
 800815a:	3301      	adds	r3, #1
 800815c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008162:	b29b      	uxth	r3, r3
 8008164:	3b01      	subs	r3, #1
 8008166:	b29a      	uxth	r2, r3
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008170:	b29b      	uxth	r3, r3
 8008172:	2b00      	cmp	r3, #0
 8008174:	d1cf      	bne.n	8008116 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008176:	683b      	ldr	r3, [r7, #0]
 8008178:	9300      	str	r3, [sp, #0]
 800817a:	697b      	ldr	r3, [r7, #20]
 800817c:	2200      	movs	r2, #0
 800817e:	2140      	movs	r1, #64	; 0x40
 8008180:	68f8      	ldr	r0, [r7, #12]
 8008182:	f000 fac9 	bl	8008718 <UART_WaitOnFlagUntilTimeout>
 8008186:	4603      	mov	r3, r0
 8008188:	2b00      	cmp	r3, #0
 800818a:	d001      	beq.n	8008190 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800818c:	2303      	movs	r3, #3
 800818e:	e006      	b.n	800819e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	2220      	movs	r2, #32
 8008194:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8008198:	2300      	movs	r3, #0
 800819a:	e000      	b.n	800819e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800819c:	2302      	movs	r3, #2
  }
}
 800819e:	4618      	mov	r0, r3
 80081a0:	3720      	adds	r7, #32
 80081a2:	46bd      	mov	sp, r7
 80081a4:	bd80      	pop	{r7, pc}
	...

080081a8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80081a8:	b580      	push	{r7, lr}
 80081aa:	b0ba      	sub	sp, #232	; 0xe8
 80081ac:	af00      	add	r7, sp, #0
 80081ae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	68db      	ldr	r3, [r3, #12]
 80081c0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	695b      	ldr	r3, [r3, #20]
 80081ca:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80081ce:	2300      	movs	r3, #0
 80081d0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80081d4:	2300      	movs	r3, #0
 80081d6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80081da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80081de:	f003 030f 	and.w	r3, r3, #15
 80081e2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80081e6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d10f      	bne.n	800820e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80081ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80081f2:	f003 0320 	and.w	r3, r3, #32
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d009      	beq.n	800820e <HAL_UART_IRQHandler+0x66>
 80081fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80081fe:	f003 0320 	and.w	r3, r3, #32
 8008202:	2b00      	cmp	r3, #0
 8008204:	d003      	beq.n	800820e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8008206:	6878      	ldr	r0, [r7, #4]
 8008208:	f000 fbd3 	bl	80089b2 <UART_Receive_IT>
      return;
 800820c:	e256      	b.n	80086bc <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800820e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008212:	2b00      	cmp	r3, #0
 8008214:	f000 80de 	beq.w	80083d4 <HAL_UART_IRQHandler+0x22c>
 8008218:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800821c:	f003 0301 	and.w	r3, r3, #1
 8008220:	2b00      	cmp	r3, #0
 8008222:	d106      	bne.n	8008232 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008224:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008228:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800822c:	2b00      	cmp	r3, #0
 800822e:	f000 80d1 	beq.w	80083d4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008232:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008236:	f003 0301 	and.w	r3, r3, #1
 800823a:	2b00      	cmp	r3, #0
 800823c:	d00b      	beq.n	8008256 <HAL_UART_IRQHandler+0xae>
 800823e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008242:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008246:	2b00      	cmp	r3, #0
 8008248:	d005      	beq.n	8008256 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800824e:	f043 0201 	orr.w	r2, r3, #1
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008256:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800825a:	f003 0304 	and.w	r3, r3, #4
 800825e:	2b00      	cmp	r3, #0
 8008260:	d00b      	beq.n	800827a <HAL_UART_IRQHandler+0xd2>
 8008262:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008266:	f003 0301 	and.w	r3, r3, #1
 800826a:	2b00      	cmp	r3, #0
 800826c:	d005      	beq.n	800827a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008272:	f043 0202 	orr.w	r2, r3, #2
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800827a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800827e:	f003 0302 	and.w	r3, r3, #2
 8008282:	2b00      	cmp	r3, #0
 8008284:	d00b      	beq.n	800829e <HAL_UART_IRQHandler+0xf6>
 8008286:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800828a:	f003 0301 	and.w	r3, r3, #1
 800828e:	2b00      	cmp	r3, #0
 8008290:	d005      	beq.n	800829e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008296:	f043 0204 	orr.w	r2, r3, #4
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800829e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80082a2:	f003 0308 	and.w	r3, r3, #8
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d011      	beq.n	80082ce <HAL_UART_IRQHandler+0x126>
 80082aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80082ae:	f003 0320 	and.w	r3, r3, #32
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d105      	bne.n	80082c2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80082b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80082ba:	f003 0301 	and.w	r3, r3, #1
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d005      	beq.n	80082ce <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082c6:	f043 0208 	orr.w	r2, r3, #8
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	f000 81ed 	beq.w	80086b2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80082d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80082dc:	f003 0320 	and.w	r3, r3, #32
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d008      	beq.n	80082f6 <HAL_UART_IRQHandler+0x14e>
 80082e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80082e8:	f003 0320 	and.w	r3, r3, #32
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d002      	beq.n	80082f6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80082f0:	6878      	ldr	r0, [r7, #4]
 80082f2:	f000 fb5e 	bl	80089b2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	695b      	ldr	r3, [r3, #20]
 80082fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008300:	2b40      	cmp	r3, #64	; 0x40
 8008302:	bf0c      	ite	eq
 8008304:	2301      	moveq	r3, #1
 8008306:	2300      	movne	r3, #0
 8008308:	b2db      	uxtb	r3, r3
 800830a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008312:	f003 0308 	and.w	r3, r3, #8
 8008316:	2b00      	cmp	r3, #0
 8008318:	d103      	bne.n	8008322 <HAL_UART_IRQHandler+0x17a>
 800831a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800831e:	2b00      	cmp	r3, #0
 8008320:	d04f      	beq.n	80083c2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008322:	6878      	ldr	r0, [r7, #4]
 8008324:	f000 fa66 	bl	80087f4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	695b      	ldr	r3, [r3, #20]
 800832e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008332:	2b40      	cmp	r3, #64	; 0x40
 8008334:	d141      	bne.n	80083ba <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	3314      	adds	r3, #20
 800833c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008340:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008344:	e853 3f00 	ldrex	r3, [r3]
 8008348:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800834c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008350:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008354:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	3314      	adds	r3, #20
 800835e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8008362:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8008366:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800836a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800836e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008372:	e841 2300 	strex	r3, r2, [r1]
 8008376:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800837a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800837e:	2b00      	cmp	r3, #0
 8008380:	d1d9      	bne.n	8008336 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008386:	2b00      	cmp	r3, #0
 8008388:	d013      	beq.n	80083b2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800838e:	4a7d      	ldr	r2, [pc, #500]	; (8008584 <HAL_UART_IRQHandler+0x3dc>)
 8008390:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008396:	4618      	mov	r0, r3
 8008398:	f7fa fe56 	bl	8003048 <HAL_DMA_Abort_IT>
 800839c:	4603      	mov	r3, r0
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d016      	beq.n	80083d0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80083a8:	687a      	ldr	r2, [r7, #4]
 80083aa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80083ac:	4610      	mov	r0, r2
 80083ae:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80083b0:	e00e      	b.n	80083d0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80083b2:	6878      	ldr	r0, [r7, #4]
 80083b4:	f000 f99a 	bl	80086ec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80083b8:	e00a      	b.n	80083d0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80083ba:	6878      	ldr	r0, [r7, #4]
 80083bc:	f000 f996 	bl	80086ec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80083c0:	e006      	b.n	80083d0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80083c2:	6878      	ldr	r0, [r7, #4]
 80083c4:	f000 f992 	bl	80086ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	2200      	movs	r2, #0
 80083cc:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80083ce:	e170      	b.n	80086b2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80083d0:	bf00      	nop
    return;
 80083d2:	e16e      	b.n	80086b2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083d8:	2b01      	cmp	r3, #1
 80083da:	f040 814a 	bne.w	8008672 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80083de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80083e2:	f003 0310 	and.w	r3, r3, #16
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	f000 8143 	beq.w	8008672 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80083ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80083f0:	f003 0310 	and.w	r3, r3, #16
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	f000 813c 	beq.w	8008672 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80083fa:	2300      	movs	r3, #0
 80083fc:	60bb      	str	r3, [r7, #8]
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	60bb      	str	r3, [r7, #8]
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	685b      	ldr	r3, [r3, #4]
 800840c:	60bb      	str	r3, [r7, #8]
 800840e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	695b      	ldr	r3, [r3, #20]
 8008416:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800841a:	2b40      	cmp	r3, #64	; 0x40
 800841c:	f040 80b4 	bne.w	8008588 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	685b      	ldr	r3, [r3, #4]
 8008428:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800842c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008430:	2b00      	cmp	r3, #0
 8008432:	f000 8140 	beq.w	80086b6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800843a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800843e:	429a      	cmp	r2, r3
 8008440:	f080 8139 	bcs.w	80086b6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800844a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008450:	69db      	ldr	r3, [r3, #28]
 8008452:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008456:	f000 8088 	beq.w	800856a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	330c      	adds	r3, #12
 8008460:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008464:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008468:	e853 3f00 	ldrex	r3, [r3]
 800846c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008470:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008474:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008478:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	330c      	adds	r3, #12
 8008482:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8008486:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800848a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800848e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8008492:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008496:	e841 2300 	strex	r3, r2, [r1]
 800849a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800849e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d1d9      	bne.n	800845a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	3314      	adds	r3, #20
 80084ac:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80084b0:	e853 3f00 	ldrex	r3, [r3]
 80084b4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80084b6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80084b8:	f023 0301 	bic.w	r3, r3, #1
 80084bc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	3314      	adds	r3, #20
 80084c6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80084ca:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80084ce:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084d0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80084d2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80084d6:	e841 2300 	strex	r3, r2, [r1]
 80084da:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80084dc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d1e1      	bne.n	80084a6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	3314      	adds	r3, #20
 80084e8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084ea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80084ec:	e853 3f00 	ldrex	r3, [r3]
 80084f0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80084f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80084f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80084f8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	3314      	adds	r3, #20
 8008502:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008506:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008508:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800850a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800850c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800850e:	e841 2300 	strex	r3, r2, [r1]
 8008512:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008514:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008516:	2b00      	cmp	r3, #0
 8008518:	d1e3      	bne.n	80084e2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	2220      	movs	r2, #32
 800851e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	2200      	movs	r2, #0
 8008526:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	330c      	adds	r3, #12
 800852e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008530:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008532:	e853 3f00 	ldrex	r3, [r3]
 8008536:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008538:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800853a:	f023 0310 	bic.w	r3, r3, #16
 800853e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	330c      	adds	r3, #12
 8008548:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800854c:	65ba      	str	r2, [r7, #88]	; 0x58
 800854e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008550:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008552:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008554:	e841 2300 	strex	r3, r2, [r1]
 8008558:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800855a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800855c:	2b00      	cmp	r3, #0
 800855e:	d1e3      	bne.n	8008528 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008564:	4618      	mov	r0, r3
 8008566:	f7fa fcff 	bl	8002f68 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008572:	b29b      	uxth	r3, r3
 8008574:	1ad3      	subs	r3, r2, r3
 8008576:	b29b      	uxth	r3, r3
 8008578:	4619      	mov	r1, r3
 800857a:	6878      	ldr	r0, [r7, #4]
 800857c:	f000 f8c0 	bl	8008700 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008580:	e099      	b.n	80086b6 <HAL_UART_IRQHandler+0x50e>
 8008582:	bf00      	nop
 8008584:	080088bb 	.word	0x080088bb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008590:	b29b      	uxth	r3, r3
 8008592:	1ad3      	subs	r3, r2, r3
 8008594:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800859c:	b29b      	uxth	r3, r3
 800859e:	2b00      	cmp	r3, #0
 80085a0:	f000 808b 	beq.w	80086ba <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80085a4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	f000 8086 	beq.w	80086ba <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	330c      	adds	r3, #12
 80085b4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085b8:	e853 3f00 	ldrex	r3, [r3]
 80085bc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80085be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085c0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80085c4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	330c      	adds	r3, #12
 80085ce:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80085d2:	647a      	str	r2, [r7, #68]	; 0x44
 80085d4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085d6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80085d8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80085da:	e841 2300 	strex	r3, r2, [r1]
 80085de:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80085e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d1e3      	bne.n	80085ae <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	3314      	adds	r3, #20
 80085ec:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085f0:	e853 3f00 	ldrex	r3, [r3]
 80085f4:	623b      	str	r3, [r7, #32]
   return(result);
 80085f6:	6a3b      	ldr	r3, [r7, #32]
 80085f8:	f023 0301 	bic.w	r3, r3, #1
 80085fc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	3314      	adds	r3, #20
 8008606:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800860a:	633a      	str	r2, [r7, #48]	; 0x30
 800860c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800860e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008610:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008612:	e841 2300 	strex	r3, r2, [r1]
 8008616:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008618:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800861a:	2b00      	cmp	r3, #0
 800861c:	d1e3      	bne.n	80085e6 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	2220      	movs	r2, #32
 8008622:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	2200      	movs	r2, #0
 800862a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	330c      	adds	r3, #12
 8008632:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008634:	693b      	ldr	r3, [r7, #16]
 8008636:	e853 3f00 	ldrex	r3, [r3]
 800863a:	60fb      	str	r3, [r7, #12]
   return(result);
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	f023 0310 	bic.w	r3, r3, #16
 8008642:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	330c      	adds	r3, #12
 800864c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8008650:	61fa      	str	r2, [r7, #28]
 8008652:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008654:	69b9      	ldr	r1, [r7, #24]
 8008656:	69fa      	ldr	r2, [r7, #28]
 8008658:	e841 2300 	strex	r3, r2, [r1]
 800865c:	617b      	str	r3, [r7, #20]
   return(result);
 800865e:	697b      	ldr	r3, [r7, #20]
 8008660:	2b00      	cmp	r3, #0
 8008662:	d1e3      	bne.n	800862c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008664:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008668:	4619      	mov	r1, r3
 800866a:	6878      	ldr	r0, [r7, #4]
 800866c:	f000 f848 	bl	8008700 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008670:	e023      	b.n	80086ba <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008672:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008676:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800867a:	2b00      	cmp	r3, #0
 800867c:	d009      	beq.n	8008692 <HAL_UART_IRQHandler+0x4ea>
 800867e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008682:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008686:	2b00      	cmp	r3, #0
 8008688:	d003      	beq.n	8008692 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800868a:	6878      	ldr	r0, [r7, #4]
 800868c:	f000 f929 	bl	80088e2 <UART_Transmit_IT>
    return;
 8008690:	e014      	b.n	80086bc <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008692:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008696:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800869a:	2b00      	cmp	r3, #0
 800869c:	d00e      	beq.n	80086bc <HAL_UART_IRQHandler+0x514>
 800869e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80086a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d008      	beq.n	80086bc <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80086aa:	6878      	ldr	r0, [r7, #4]
 80086ac:	f000 f969 	bl	8008982 <UART_EndTransmit_IT>
    return;
 80086b0:	e004      	b.n	80086bc <HAL_UART_IRQHandler+0x514>
    return;
 80086b2:	bf00      	nop
 80086b4:	e002      	b.n	80086bc <HAL_UART_IRQHandler+0x514>
      return;
 80086b6:	bf00      	nop
 80086b8:	e000      	b.n	80086bc <HAL_UART_IRQHandler+0x514>
      return;
 80086ba:	bf00      	nop
  }
}
 80086bc:	37e8      	adds	r7, #232	; 0xe8
 80086be:	46bd      	mov	sp, r7
 80086c0:	bd80      	pop	{r7, pc}
 80086c2:	bf00      	nop

080086c4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80086c4:	b480      	push	{r7}
 80086c6:	b083      	sub	sp, #12
 80086c8:	af00      	add	r7, sp, #0
 80086ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80086cc:	bf00      	nop
 80086ce:	370c      	adds	r7, #12
 80086d0:	46bd      	mov	sp, r7
 80086d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086d6:	4770      	bx	lr

080086d8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80086d8:	b480      	push	{r7}
 80086da:	b083      	sub	sp, #12
 80086dc:	af00      	add	r7, sp, #0
 80086de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80086e0:	bf00      	nop
 80086e2:	370c      	adds	r7, #12
 80086e4:	46bd      	mov	sp, r7
 80086e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ea:	4770      	bx	lr

080086ec <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80086ec:	b480      	push	{r7}
 80086ee:	b083      	sub	sp, #12
 80086f0:	af00      	add	r7, sp, #0
 80086f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80086f4:	bf00      	nop
 80086f6:	370c      	adds	r7, #12
 80086f8:	46bd      	mov	sp, r7
 80086fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086fe:	4770      	bx	lr

08008700 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008700:	b480      	push	{r7}
 8008702:	b083      	sub	sp, #12
 8008704:	af00      	add	r7, sp, #0
 8008706:	6078      	str	r0, [r7, #4]
 8008708:	460b      	mov	r3, r1
 800870a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800870c:	bf00      	nop
 800870e:	370c      	adds	r7, #12
 8008710:	46bd      	mov	sp, r7
 8008712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008716:	4770      	bx	lr

08008718 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8008718:	b580      	push	{r7, lr}
 800871a:	b090      	sub	sp, #64	; 0x40
 800871c:	af00      	add	r7, sp, #0
 800871e:	60f8      	str	r0, [r7, #12]
 8008720:	60b9      	str	r1, [r7, #8]
 8008722:	603b      	str	r3, [r7, #0]
 8008724:	4613      	mov	r3, r2
 8008726:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008728:	e050      	b.n	80087cc <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800872a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800872c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008730:	d04c      	beq.n	80087cc <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8008732:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008734:	2b00      	cmp	r3, #0
 8008736:	d007      	beq.n	8008748 <UART_WaitOnFlagUntilTimeout+0x30>
 8008738:	f7f9 fb00 	bl	8001d3c <HAL_GetTick>
 800873c:	4602      	mov	r2, r0
 800873e:	683b      	ldr	r3, [r7, #0]
 8008740:	1ad3      	subs	r3, r2, r3
 8008742:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008744:	429a      	cmp	r2, r3
 8008746:	d241      	bcs.n	80087cc <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	330c      	adds	r3, #12
 800874e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008750:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008752:	e853 3f00 	ldrex	r3, [r3]
 8008756:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800875a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800875e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	330c      	adds	r3, #12
 8008766:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008768:	637a      	str	r2, [r7, #52]	; 0x34
 800876a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800876c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800876e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008770:	e841 2300 	strex	r3, r2, [r1]
 8008774:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008776:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008778:	2b00      	cmp	r3, #0
 800877a:	d1e5      	bne.n	8008748 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	3314      	adds	r3, #20
 8008782:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008784:	697b      	ldr	r3, [r7, #20]
 8008786:	e853 3f00 	ldrex	r3, [r3]
 800878a:	613b      	str	r3, [r7, #16]
   return(result);
 800878c:	693b      	ldr	r3, [r7, #16]
 800878e:	f023 0301 	bic.w	r3, r3, #1
 8008792:	63bb      	str	r3, [r7, #56]	; 0x38
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	3314      	adds	r3, #20
 800879a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800879c:	623a      	str	r2, [r7, #32]
 800879e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087a0:	69f9      	ldr	r1, [r7, #28]
 80087a2:	6a3a      	ldr	r2, [r7, #32]
 80087a4:	e841 2300 	strex	r3, r2, [r1]
 80087a8:	61bb      	str	r3, [r7, #24]
   return(result);
 80087aa:	69bb      	ldr	r3, [r7, #24]
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d1e5      	bne.n	800877c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	2220      	movs	r2, #32
 80087b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	2220      	movs	r2, #32
 80087bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	2200      	movs	r2, #0
 80087c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80087c8:	2303      	movs	r3, #3
 80087ca:	e00f      	b.n	80087ec <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	681a      	ldr	r2, [r3, #0]
 80087d2:	68bb      	ldr	r3, [r7, #8]
 80087d4:	4013      	ands	r3, r2
 80087d6:	68ba      	ldr	r2, [r7, #8]
 80087d8:	429a      	cmp	r2, r3
 80087da:	bf0c      	ite	eq
 80087dc:	2301      	moveq	r3, #1
 80087de:	2300      	movne	r3, #0
 80087e0:	b2db      	uxtb	r3, r3
 80087e2:	461a      	mov	r2, r3
 80087e4:	79fb      	ldrb	r3, [r7, #7]
 80087e6:	429a      	cmp	r2, r3
 80087e8:	d09f      	beq.n	800872a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80087ea:	2300      	movs	r3, #0
}
 80087ec:	4618      	mov	r0, r3
 80087ee:	3740      	adds	r7, #64	; 0x40
 80087f0:	46bd      	mov	sp, r7
 80087f2:	bd80      	pop	{r7, pc}

080087f4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80087f4:	b480      	push	{r7}
 80087f6:	b095      	sub	sp, #84	; 0x54
 80087f8:	af00      	add	r7, sp, #0
 80087fa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	330c      	adds	r3, #12
 8008802:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008804:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008806:	e853 3f00 	ldrex	r3, [r3]
 800880a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800880c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800880e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008812:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	330c      	adds	r3, #12
 800881a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800881c:	643a      	str	r2, [r7, #64]	; 0x40
 800881e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008820:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008822:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008824:	e841 2300 	strex	r3, r2, [r1]
 8008828:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800882a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800882c:	2b00      	cmp	r3, #0
 800882e:	d1e5      	bne.n	80087fc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	3314      	adds	r3, #20
 8008836:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008838:	6a3b      	ldr	r3, [r7, #32]
 800883a:	e853 3f00 	ldrex	r3, [r3]
 800883e:	61fb      	str	r3, [r7, #28]
   return(result);
 8008840:	69fb      	ldr	r3, [r7, #28]
 8008842:	f023 0301 	bic.w	r3, r3, #1
 8008846:	64bb      	str	r3, [r7, #72]	; 0x48
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	3314      	adds	r3, #20
 800884e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008850:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008852:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008854:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008856:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008858:	e841 2300 	strex	r3, r2, [r1]
 800885c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800885e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008860:	2b00      	cmp	r3, #0
 8008862:	d1e5      	bne.n	8008830 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008868:	2b01      	cmp	r3, #1
 800886a:	d119      	bne.n	80088a0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	330c      	adds	r3, #12
 8008872:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	e853 3f00 	ldrex	r3, [r3]
 800887a:	60bb      	str	r3, [r7, #8]
   return(result);
 800887c:	68bb      	ldr	r3, [r7, #8]
 800887e:	f023 0310 	bic.w	r3, r3, #16
 8008882:	647b      	str	r3, [r7, #68]	; 0x44
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	330c      	adds	r3, #12
 800888a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800888c:	61ba      	str	r2, [r7, #24]
 800888e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008890:	6979      	ldr	r1, [r7, #20]
 8008892:	69ba      	ldr	r2, [r7, #24]
 8008894:	e841 2300 	strex	r3, r2, [r1]
 8008898:	613b      	str	r3, [r7, #16]
   return(result);
 800889a:	693b      	ldr	r3, [r7, #16]
 800889c:	2b00      	cmp	r3, #0
 800889e:	d1e5      	bne.n	800886c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	2220      	movs	r2, #32
 80088a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	2200      	movs	r2, #0
 80088ac:	631a      	str	r2, [r3, #48]	; 0x30
}
 80088ae:	bf00      	nop
 80088b0:	3754      	adds	r7, #84	; 0x54
 80088b2:	46bd      	mov	sp, r7
 80088b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b8:	4770      	bx	lr

080088ba <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80088ba:	b580      	push	{r7, lr}
 80088bc:	b084      	sub	sp, #16
 80088be:	af00      	add	r7, sp, #0
 80088c0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088c6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	2200      	movs	r2, #0
 80088cc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	2200      	movs	r2, #0
 80088d2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80088d4:	68f8      	ldr	r0, [r7, #12]
 80088d6:	f7ff ff09 	bl	80086ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80088da:	bf00      	nop
 80088dc:	3710      	adds	r7, #16
 80088de:	46bd      	mov	sp, r7
 80088e0:	bd80      	pop	{r7, pc}

080088e2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80088e2:	b480      	push	{r7}
 80088e4:	b085      	sub	sp, #20
 80088e6:	af00      	add	r7, sp, #0
 80088e8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80088f0:	b2db      	uxtb	r3, r3
 80088f2:	2b21      	cmp	r3, #33	; 0x21
 80088f4:	d13e      	bne.n	8008974 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	689b      	ldr	r3, [r3, #8]
 80088fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80088fe:	d114      	bne.n	800892a <UART_Transmit_IT+0x48>
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	691b      	ldr	r3, [r3, #16]
 8008904:	2b00      	cmp	r3, #0
 8008906:	d110      	bne.n	800892a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	6a1b      	ldr	r3, [r3, #32]
 800890c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	881b      	ldrh	r3, [r3, #0]
 8008912:	461a      	mov	r2, r3
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800891c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	6a1b      	ldr	r3, [r3, #32]
 8008922:	1c9a      	adds	r2, r3, #2
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	621a      	str	r2, [r3, #32]
 8008928:	e008      	b.n	800893c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	6a1b      	ldr	r3, [r3, #32]
 800892e:	1c59      	adds	r1, r3, #1
 8008930:	687a      	ldr	r2, [r7, #4]
 8008932:	6211      	str	r1, [r2, #32]
 8008934:	781a      	ldrb	r2, [r3, #0]
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008940:	b29b      	uxth	r3, r3
 8008942:	3b01      	subs	r3, #1
 8008944:	b29b      	uxth	r3, r3
 8008946:	687a      	ldr	r2, [r7, #4]
 8008948:	4619      	mov	r1, r3
 800894a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800894c:	2b00      	cmp	r3, #0
 800894e:	d10f      	bne.n	8008970 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	68da      	ldr	r2, [r3, #12]
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800895e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	68da      	ldr	r2, [r3, #12]
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800896e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008970:	2300      	movs	r3, #0
 8008972:	e000      	b.n	8008976 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008974:	2302      	movs	r3, #2
  }
}
 8008976:	4618      	mov	r0, r3
 8008978:	3714      	adds	r7, #20
 800897a:	46bd      	mov	sp, r7
 800897c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008980:	4770      	bx	lr

08008982 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008982:	b580      	push	{r7, lr}
 8008984:	b082      	sub	sp, #8
 8008986:	af00      	add	r7, sp, #0
 8008988:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	68da      	ldr	r2, [r3, #12]
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008998:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	2220      	movs	r2, #32
 800899e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80089a2:	6878      	ldr	r0, [r7, #4]
 80089a4:	f7ff fe8e 	bl	80086c4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80089a8:	2300      	movs	r3, #0
}
 80089aa:	4618      	mov	r0, r3
 80089ac:	3708      	adds	r7, #8
 80089ae:	46bd      	mov	sp, r7
 80089b0:	bd80      	pop	{r7, pc}

080089b2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80089b2:	b580      	push	{r7, lr}
 80089b4:	b08c      	sub	sp, #48	; 0x30
 80089b6:	af00      	add	r7, sp, #0
 80089b8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80089c0:	b2db      	uxtb	r3, r3
 80089c2:	2b22      	cmp	r3, #34	; 0x22
 80089c4:	f040 80ab 	bne.w	8008b1e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	689b      	ldr	r3, [r3, #8]
 80089cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80089d0:	d117      	bne.n	8008a02 <UART_Receive_IT+0x50>
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	691b      	ldr	r3, [r3, #16]
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d113      	bne.n	8008a02 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80089da:	2300      	movs	r3, #0
 80089dc:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089e2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	685b      	ldr	r3, [r3, #4]
 80089ea:	b29b      	uxth	r3, r3
 80089ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80089f0:	b29a      	uxth	r2, r3
 80089f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089f4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089fa:	1c9a      	adds	r2, r3, #2
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	629a      	str	r2, [r3, #40]	; 0x28
 8008a00:	e026      	b.n	8008a50 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a06:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8008a08:	2300      	movs	r3, #0
 8008a0a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	689b      	ldr	r3, [r3, #8]
 8008a10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008a14:	d007      	beq.n	8008a26 <UART_Receive_IT+0x74>
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	689b      	ldr	r3, [r3, #8]
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d10a      	bne.n	8008a34 <UART_Receive_IT+0x82>
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	691b      	ldr	r3, [r3, #16]
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d106      	bne.n	8008a34 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	685b      	ldr	r3, [r3, #4]
 8008a2c:	b2da      	uxtb	r2, r3
 8008a2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a30:	701a      	strb	r2, [r3, #0]
 8008a32:	e008      	b.n	8008a46 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	685b      	ldr	r3, [r3, #4]
 8008a3a:	b2db      	uxtb	r3, r3
 8008a3c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008a40:	b2da      	uxtb	r2, r3
 8008a42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a44:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a4a:	1c5a      	adds	r2, r3, #1
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008a54:	b29b      	uxth	r3, r3
 8008a56:	3b01      	subs	r3, #1
 8008a58:	b29b      	uxth	r3, r3
 8008a5a:	687a      	ldr	r2, [r7, #4]
 8008a5c:	4619      	mov	r1, r3
 8008a5e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d15a      	bne.n	8008b1a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	68da      	ldr	r2, [r3, #12]
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	f022 0220 	bic.w	r2, r2, #32
 8008a72:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	68da      	ldr	r2, [r3, #12]
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008a82:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	695a      	ldr	r2, [r3, #20]
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	f022 0201 	bic.w	r2, r2, #1
 8008a92:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	2220      	movs	r2, #32
 8008a98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008aa0:	2b01      	cmp	r3, #1
 8008aa2:	d135      	bne.n	8008b10 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	2200      	movs	r2, #0
 8008aa8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	330c      	adds	r3, #12
 8008ab0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ab2:	697b      	ldr	r3, [r7, #20]
 8008ab4:	e853 3f00 	ldrex	r3, [r3]
 8008ab8:	613b      	str	r3, [r7, #16]
   return(result);
 8008aba:	693b      	ldr	r3, [r7, #16]
 8008abc:	f023 0310 	bic.w	r3, r3, #16
 8008ac0:	627b      	str	r3, [r7, #36]	; 0x24
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	330c      	adds	r3, #12
 8008ac8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008aca:	623a      	str	r2, [r7, #32]
 8008acc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ace:	69f9      	ldr	r1, [r7, #28]
 8008ad0:	6a3a      	ldr	r2, [r7, #32]
 8008ad2:	e841 2300 	strex	r3, r2, [r1]
 8008ad6:	61bb      	str	r3, [r7, #24]
   return(result);
 8008ad8:	69bb      	ldr	r3, [r7, #24]
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d1e5      	bne.n	8008aaa <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	f003 0310 	and.w	r3, r3, #16
 8008ae8:	2b10      	cmp	r3, #16
 8008aea:	d10a      	bne.n	8008b02 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008aec:	2300      	movs	r3, #0
 8008aee:	60fb      	str	r3, [r7, #12]
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	60fb      	str	r3, [r7, #12]
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	685b      	ldr	r3, [r3, #4]
 8008afe:	60fb      	str	r3, [r7, #12]
 8008b00:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008b06:	4619      	mov	r1, r3
 8008b08:	6878      	ldr	r0, [r7, #4]
 8008b0a:	f7ff fdf9 	bl	8008700 <HAL_UARTEx_RxEventCallback>
 8008b0e:	e002      	b.n	8008b16 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008b10:	6878      	ldr	r0, [r7, #4]
 8008b12:	f7ff fde1 	bl	80086d8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008b16:	2300      	movs	r3, #0
 8008b18:	e002      	b.n	8008b20 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8008b1a:	2300      	movs	r3, #0
 8008b1c:	e000      	b.n	8008b20 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8008b1e:	2302      	movs	r3, #2
  }
}
 8008b20:	4618      	mov	r0, r3
 8008b22:	3730      	adds	r7, #48	; 0x30
 8008b24:	46bd      	mov	sp, r7
 8008b26:	bd80      	pop	{r7, pc}

08008b28 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008b28:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008b2c:	b0c0      	sub	sp, #256	; 0x100
 8008b2e:	af00      	add	r7, sp, #0
 8008b30:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008b34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	691b      	ldr	r3, [r3, #16]
 8008b3c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008b40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b44:	68d9      	ldr	r1, [r3, #12]
 8008b46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b4a:	681a      	ldr	r2, [r3, #0]
 8008b4c:	ea40 0301 	orr.w	r3, r0, r1
 8008b50:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008b52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b56:	689a      	ldr	r2, [r3, #8]
 8008b58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b5c:	691b      	ldr	r3, [r3, #16]
 8008b5e:	431a      	orrs	r2, r3
 8008b60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b64:	695b      	ldr	r3, [r3, #20]
 8008b66:	431a      	orrs	r2, r3
 8008b68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b6c:	69db      	ldr	r3, [r3, #28]
 8008b6e:	4313      	orrs	r3, r2
 8008b70:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008b74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	68db      	ldr	r3, [r3, #12]
 8008b7c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008b80:	f021 010c 	bic.w	r1, r1, #12
 8008b84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b88:	681a      	ldr	r2, [r3, #0]
 8008b8a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008b8e:	430b      	orrs	r3, r1
 8008b90:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008b92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	695b      	ldr	r3, [r3, #20]
 8008b9a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008b9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ba2:	6999      	ldr	r1, [r3, #24]
 8008ba4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ba8:	681a      	ldr	r2, [r3, #0]
 8008baa:	ea40 0301 	orr.w	r3, r0, r1
 8008bae:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008bb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008bb4:	681a      	ldr	r2, [r3, #0]
 8008bb6:	4b8f      	ldr	r3, [pc, #572]	; (8008df4 <UART_SetConfig+0x2cc>)
 8008bb8:	429a      	cmp	r2, r3
 8008bba:	d005      	beq.n	8008bc8 <UART_SetConfig+0xa0>
 8008bbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008bc0:	681a      	ldr	r2, [r3, #0]
 8008bc2:	4b8d      	ldr	r3, [pc, #564]	; (8008df8 <UART_SetConfig+0x2d0>)
 8008bc4:	429a      	cmp	r2, r3
 8008bc6:	d104      	bne.n	8008bd2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008bc8:	f7fd f84c 	bl	8005c64 <HAL_RCC_GetPCLK2Freq>
 8008bcc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8008bd0:	e003      	b.n	8008bda <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008bd2:	f7fd f833 	bl	8005c3c <HAL_RCC_GetPCLK1Freq>
 8008bd6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008bda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008bde:	69db      	ldr	r3, [r3, #28]
 8008be0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008be4:	f040 810c 	bne.w	8008e00 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008be8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008bec:	2200      	movs	r2, #0
 8008bee:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008bf2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8008bf6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8008bfa:	4622      	mov	r2, r4
 8008bfc:	462b      	mov	r3, r5
 8008bfe:	1891      	adds	r1, r2, r2
 8008c00:	65b9      	str	r1, [r7, #88]	; 0x58
 8008c02:	415b      	adcs	r3, r3
 8008c04:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008c06:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8008c0a:	4621      	mov	r1, r4
 8008c0c:	eb12 0801 	adds.w	r8, r2, r1
 8008c10:	4629      	mov	r1, r5
 8008c12:	eb43 0901 	adc.w	r9, r3, r1
 8008c16:	f04f 0200 	mov.w	r2, #0
 8008c1a:	f04f 0300 	mov.w	r3, #0
 8008c1e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008c22:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008c26:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008c2a:	4690      	mov	r8, r2
 8008c2c:	4699      	mov	r9, r3
 8008c2e:	4623      	mov	r3, r4
 8008c30:	eb18 0303 	adds.w	r3, r8, r3
 8008c34:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008c38:	462b      	mov	r3, r5
 8008c3a:	eb49 0303 	adc.w	r3, r9, r3
 8008c3e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008c42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c46:	685b      	ldr	r3, [r3, #4]
 8008c48:	2200      	movs	r2, #0
 8008c4a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008c4e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8008c52:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8008c56:	460b      	mov	r3, r1
 8008c58:	18db      	adds	r3, r3, r3
 8008c5a:	653b      	str	r3, [r7, #80]	; 0x50
 8008c5c:	4613      	mov	r3, r2
 8008c5e:	eb42 0303 	adc.w	r3, r2, r3
 8008c62:	657b      	str	r3, [r7, #84]	; 0x54
 8008c64:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008c68:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8008c6c:	f7f7 fb00 	bl	8000270 <__aeabi_uldivmod>
 8008c70:	4602      	mov	r2, r0
 8008c72:	460b      	mov	r3, r1
 8008c74:	4b61      	ldr	r3, [pc, #388]	; (8008dfc <UART_SetConfig+0x2d4>)
 8008c76:	fba3 2302 	umull	r2, r3, r3, r2
 8008c7a:	095b      	lsrs	r3, r3, #5
 8008c7c:	011c      	lsls	r4, r3, #4
 8008c7e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008c82:	2200      	movs	r2, #0
 8008c84:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008c88:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8008c8c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8008c90:	4642      	mov	r2, r8
 8008c92:	464b      	mov	r3, r9
 8008c94:	1891      	adds	r1, r2, r2
 8008c96:	64b9      	str	r1, [r7, #72]	; 0x48
 8008c98:	415b      	adcs	r3, r3
 8008c9a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008c9c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008ca0:	4641      	mov	r1, r8
 8008ca2:	eb12 0a01 	adds.w	sl, r2, r1
 8008ca6:	4649      	mov	r1, r9
 8008ca8:	eb43 0b01 	adc.w	fp, r3, r1
 8008cac:	f04f 0200 	mov.w	r2, #0
 8008cb0:	f04f 0300 	mov.w	r3, #0
 8008cb4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008cb8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008cbc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008cc0:	4692      	mov	sl, r2
 8008cc2:	469b      	mov	fp, r3
 8008cc4:	4643      	mov	r3, r8
 8008cc6:	eb1a 0303 	adds.w	r3, sl, r3
 8008cca:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008cce:	464b      	mov	r3, r9
 8008cd0:	eb4b 0303 	adc.w	r3, fp, r3
 8008cd4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008cd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008cdc:	685b      	ldr	r3, [r3, #4]
 8008cde:	2200      	movs	r2, #0
 8008ce0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008ce4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8008ce8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8008cec:	460b      	mov	r3, r1
 8008cee:	18db      	adds	r3, r3, r3
 8008cf0:	643b      	str	r3, [r7, #64]	; 0x40
 8008cf2:	4613      	mov	r3, r2
 8008cf4:	eb42 0303 	adc.w	r3, r2, r3
 8008cf8:	647b      	str	r3, [r7, #68]	; 0x44
 8008cfa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008cfe:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8008d02:	f7f7 fab5 	bl	8000270 <__aeabi_uldivmod>
 8008d06:	4602      	mov	r2, r0
 8008d08:	460b      	mov	r3, r1
 8008d0a:	4611      	mov	r1, r2
 8008d0c:	4b3b      	ldr	r3, [pc, #236]	; (8008dfc <UART_SetConfig+0x2d4>)
 8008d0e:	fba3 2301 	umull	r2, r3, r3, r1
 8008d12:	095b      	lsrs	r3, r3, #5
 8008d14:	2264      	movs	r2, #100	; 0x64
 8008d16:	fb02 f303 	mul.w	r3, r2, r3
 8008d1a:	1acb      	subs	r3, r1, r3
 8008d1c:	00db      	lsls	r3, r3, #3
 8008d1e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8008d22:	4b36      	ldr	r3, [pc, #216]	; (8008dfc <UART_SetConfig+0x2d4>)
 8008d24:	fba3 2302 	umull	r2, r3, r3, r2
 8008d28:	095b      	lsrs	r3, r3, #5
 8008d2a:	005b      	lsls	r3, r3, #1
 8008d2c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008d30:	441c      	add	r4, r3
 8008d32:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008d36:	2200      	movs	r2, #0
 8008d38:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008d3c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8008d40:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8008d44:	4642      	mov	r2, r8
 8008d46:	464b      	mov	r3, r9
 8008d48:	1891      	adds	r1, r2, r2
 8008d4a:	63b9      	str	r1, [r7, #56]	; 0x38
 8008d4c:	415b      	adcs	r3, r3
 8008d4e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008d50:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008d54:	4641      	mov	r1, r8
 8008d56:	1851      	adds	r1, r2, r1
 8008d58:	6339      	str	r1, [r7, #48]	; 0x30
 8008d5a:	4649      	mov	r1, r9
 8008d5c:	414b      	adcs	r3, r1
 8008d5e:	637b      	str	r3, [r7, #52]	; 0x34
 8008d60:	f04f 0200 	mov.w	r2, #0
 8008d64:	f04f 0300 	mov.w	r3, #0
 8008d68:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8008d6c:	4659      	mov	r1, fp
 8008d6e:	00cb      	lsls	r3, r1, #3
 8008d70:	4651      	mov	r1, sl
 8008d72:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008d76:	4651      	mov	r1, sl
 8008d78:	00ca      	lsls	r2, r1, #3
 8008d7a:	4610      	mov	r0, r2
 8008d7c:	4619      	mov	r1, r3
 8008d7e:	4603      	mov	r3, r0
 8008d80:	4642      	mov	r2, r8
 8008d82:	189b      	adds	r3, r3, r2
 8008d84:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008d88:	464b      	mov	r3, r9
 8008d8a:	460a      	mov	r2, r1
 8008d8c:	eb42 0303 	adc.w	r3, r2, r3
 8008d90:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008d94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d98:	685b      	ldr	r3, [r3, #4]
 8008d9a:	2200      	movs	r2, #0
 8008d9c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008da0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8008da4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8008da8:	460b      	mov	r3, r1
 8008daa:	18db      	adds	r3, r3, r3
 8008dac:	62bb      	str	r3, [r7, #40]	; 0x28
 8008dae:	4613      	mov	r3, r2
 8008db0:	eb42 0303 	adc.w	r3, r2, r3
 8008db4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008db6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008dba:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8008dbe:	f7f7 fa57 	bl	8000270 <__aeabi_uldivmod>
 8008dc2:	4602      	mov	r2, r0
 8008dc4:	460b      	mov	r3, r1
 8008dc6:	4b0d      	ldr	r3, [pc, #52]	; (8008dfc <UART_SetConfig+0x2d4>)
 8008dc8:	fba3 1302 	umull	r1, r3, r3, r2
 8008dcc:	095b      	lsrs	r3, r3, #5
 8008dce:	2164      	movs	r1, #100	; 0x64
 8008dd0:	fb01 f303 	mul.w	r3, r1, r3
 8008dd4:	1ad3      	subs	r3, r2, r3
 8008dd6:	00db      	lsls	r3, r3, #3
 8008dd8:	3332      	adds	r3, #50	; 0x32
 8008dda:	4a08      	ldr	r2, [pc, #32]	; (8008dfc <UART_SetConfig+0x2d4>)
 8008ddc:	fba2 2303 	umull	r2, r3, r2, r3
 8008de0:	095b      	lsrs	r3, r3, #5
 8008de2:	f003 0207 	and.w	r2, r3, #7
 8008de6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	4422      	add	r2, r4
 8008dee:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008df0:	e105      	b.n	8008ffe <UART_SetConfig+0x4d6>
 8008df2:	bf00      	nop
 8008df4:	40011000 	.word	0x40011000
 8008df8:	40011400 	.word	0x40011400
 8008dfc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008e00:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008e04:	2200      	movs	r2, #0
 8008e06:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008e0a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8008e0e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8008e12:	4642      	mov	r2, r8
 8008e14:	464b      	mov	r3, r9
 8008e16:	1891      	adds	r1, r2, r2
 8008e18:	6239      	str	r1, [r7, #32]
 8008e1a:	415b      	adcs	r3, r3
 8008e1c:	627b      	str	r3, [r7, #36]	; 0x24
 8008e1e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008e22:	4641      	mov	r1, r8
 8008e24:	1854      	adds	r4, r2, r1
 8008e26:	4649      	mov	r1, r9
 8008e28:	eb43 0501 	adc.w	r5, r3, r1
 8008e2c:	f04f 0200 	mov.w	r2, #0
 8008e30:	f04f 0300 	mov.w	r3, #0
 8008e34:	00eb      	lsls	r3, r5, #3
 8008e36:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008e3a:	00e2      	lsls	r2, r4, #3
 8008e3c:	4614      	mov	r4, r2
 8008e3e:	461d      	mov	r5, r3
 8008e40:	4643      	mov	r3, r8
 8008e42:	18e3      	adds	r3, r4, r3
 8008e44:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008e48:	464b      	mov	r3, r9
 8008e4a:	eb45 0303 	adc.w	r3, r5, r3
 8008e4e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008e52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e56:	685b      	ldr	r3, [r3, #4]
 8008e58:	2200      	movs	r2, #0
 8008e5a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008e5e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008e62:	f04f 0200 	mov.w	r2, #0
 8008e66:	f04f 0300 	mov.w	r3, #0
 8008e6a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8008e6e:	4629      	mov	r1, r5
 8008e70:	008b      	lsls	r3, r1, #2
 8008e72:	4621      	mov	r1, r4
 8008e74:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008e78:	4621      	mov	r1, r4
 8008e7a:	008a      	lsls	r2, r1, #2
 8008e7c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8008e80:	f7f7 f9f6 	bl	8000270 <__aeabi_uldivmod>
 8008e84:	4602      	mov	r2, r0
 8008e86:	460b      	mov	r3, r1
 8008e88:	4b60      	ldr	r3, [pc, #384]	; (800900c <UART_SetConfig+0x4e4>)
 8008e8a:	fba3 2302 	umull	r2, r3, r3, r2
 8008e8e:	095b      	lsrs	r3, r3, #5
 8008e90:	011c      	lsls	r4, r3, #4
 8008e92:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008e96:	2200      	movs	r2, #0
 8008e98:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008e9c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008ea0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8008ea4:	4642      	mov	r2, r8
 8008ea6:	464b      	mov	r3, r9
 8008ea8:	1891      	adds	r1, r2, r2
 8008eaa:	61b9      	str	r1, [r7, #24]
 8008eac:	415b      	adcs	r3, r3
 8008eae:	61fb      	str	r3, [r7, #28]
 8008eb0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008eb4:	4641      	mov	r1, r8
 8008eb6:	1851      	adds	r1, r2, r1
 8008eb8:	6139      	str	r1, [r7, #16]
 8008eba:	4649      	mov	r1, r9
 8008ebc:	414b      	adcs	r3, r1
 8008ebe:	617b      	str	r3, [r7, #20]
 8008ec0:	f04f 0200 	mov.w	r2, #0
 8008ec4:	f04f 0300 	mov.w	r3, #0
 8008ec8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008ecc:	4659      	mov	r1, fp
 8008ece:	00cb      	lsls	r3, r1, #3
 8008ed0:	4651      	mov	r1, sl
 8008ed2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008ed6:	4651      	mov	r1, sl
 8008ed8:	00ca      	lsls	r2, r1, #3
 8008eda:	4610      	mov	r0, r2
 8008edc:	4619      	mov	r1, r3
 8008ede:	4603      	mov	r3, r0
 8008ee0:	4642      	mov	r2, r8
 8008ee2:	189b      	adds	r3, r3, r2
 8008ee4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008ee8:	464b      	mov	r3, r9
 8008eea:	460a      	mov	r2, r1
 8008eec:	eb42 0303 	adc.w	r3, r2, r3
 8008ef0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008ef4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ef8:	685b      	ldr	r3, [r3, #4]
 8008efa:	2200      	movs	r2, #0
 8008efc:	67bb      	str	r3, [r7, #120]	; 0x78
 8008efe:	67fa      	str	r2, [r7, #124]	; 0x7c
 8008f00:	f04f 0200 	mov.w	r2, #0
 8008f04:	f04f 0300 	mov.w	r3, #0
 8008f08:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8008f0c:	4649      	mov	r1, r9
 8008f0e:	008b      	lsls	r3, r1, #2
 8008f10:	4641      	mov	r1, r8
 8008f12:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008f16:	4641      	mov	r1, r8
 8008f18:	008a      	lsls	r2, r1, #2
 8008f1a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8008f1e:	f7f7 f9a7 	bl	8000270 <__aeabi_uldivmod>
 8008f22:	4602      	mov	r2, r0
 8008f24:	460b      	mov	r3, r1
 8008f26:	4b39      	ldr	r3, [pc, #228]	; (800900c <UART_SetConfig+0x4e4>)
 8008f28:	fba3 1302 	umull	r1, r3, r3, r2
 8008f2c:	095b      	lsrs	r3, r3, #5
 8008f2e:	2164      	movs	r1, #100	; 0x64
 8008f30:	fb01 f303 	mul.w	r3, r1, r3
 8008f34:	1ad3      	subs	r3, r2, r3
 8008f36:	011b      	lsls	r3, r3, #4
 8008f38:	3332      	adds	r3, #50	; 0x32
 8008f3a:	4a34      	ldr	r2, [pc, #208]	; (800900c <UART_SetConfig+0x4e4>)
 8008f3c:	fba2 2303 	umull	r2, r3, r2, r3
 8008f40:	095b      	lsrs	r3, r3, #5
 8008f42:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008f46:	441c      	add	r4, r3
 8008f48:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008f4c:	2200      	movs	r2, #0
 8008f4e:	673b      	str	r3, [r7, #112]	; 0x70
 8008f50:	677a      	str	r2, [r7, #116]	; 0x74
 8008f52:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8008f56:	4642      	mov	r2, r8
 8008f58:	464b      	mov	r3, r9
 8008f5a:	1891      	adds	r1, r2, r2
 8008f5c:	60b9      	str	r1, [r7, #8]
 8008f5e:	415b      	adcs	r3, r3
 8008f60:	60fb      	str	r3, [r7, #12]
 8008f62:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008f66:	4641      	mov	r1, r8
 8008f68:	1851      	adds	r1, r2, r1
 8008f6a:	6039      	str	r1, [r7, #0]
 8008f6c:	4649      	mov	r1, r9
 8008f6e:	414b      	adcs	r3, r1
 8008f70:	607b      	str	r3, [r7, #4]
 8008f72:	f04f 0200 	mov.w	r2, #0
 8008f76:	f04f 0300 	mov.w	r3, #0
 8008f7a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008f7e:	4659      	mov	r1, fp
 8008f80:	00cb      	lsls	r3, r1, #3
 8008f82:	4651      	mov	r1, sl
 8008f84:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008f88:	4651      	mov	r1, sl
 8008f8a:	00ca      	lsls	r2, r1, #3
 8008f8c:	4610      	mov	r0, r2
 8008f8e:	4619      	mov	r1, r3
 8008f90:	4603      	mov	r3, r0
 8008f92:	4642      	mov	r2, r8
 8008f94:	189b      	adds	r3, r3, r2
 8008f96:	66bb      	str	r3, [r7, #104]	; 0x68
 8008f98:	464b      	mov	r3, r9
 8008f9a:	460a      	mov	r2, r1
 8008f9c:	eb42 0303 	adc.w	r3, r2, r3
 8008fa0:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008fa2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008fa6:	685b      	ldr	r3, [r3, #4]
 8008fa8:	2200      	movs	r2, #0
 8008faa:	663b      	str	r3, [r7, #96]	; 0x60
 8008fac:	667a      	str	r2, [r7, #100]	; 0x64
 8008fae:	f04f 0200 	mov.w	r2, #0
 8008fb2:	f04f 0300 	mov.w	r3, #0
 8008fb6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8008fba:	4649      	mov	r1, r9
 8008fbc:	008b      	lsls	r3, r1, #2
 8008fbe:	4641      	mov	r1, r8
 8008fc0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008fc4:	4641      	mov	r1, r8
 8008fc6:	008a      	lsls	r2, r1, #2
 8008fc8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8008fcc:	f7f7 f950 	bl	8000270 <__aeabi_uldivmod>
 8008fd0:	4602      	mov	r2, r0
 8008fd2:	460b      	mov	r3, r1
 8008fd4:	4b0d      	ldr	r3, [pc, #52]	; (800900c <UART_SetConfig+0x4e4>)
 8008fd6:	fba3 1302 	umull	r1, r3, r3, r2
 8008fda:	095b      	lsrs	r3, r3, #5
 8008fdc:	2164      	movs	r1, #100	; 0x64
 8008fde:	fb01 f303 	mul.w	r3, r1, r3
 8008fe2:	1ad3      	subs	r3, r2, r3
 8008fe4:	011b      	lsls	r3, r3, #4
 8008fe6:	3332      	adds	r3, #50	; 0x32
 8008fe8:	4a08      	ldr	r2, [pc, #32]	; (800900c <UART_SetConfig+0x4e4>)
 8008fea:	fba2 2303 	umull	r2, r3, r2, r3
 8008fee:	095b      	lsrs	r3, r3, #5
 8008ff0:	f003 020f 	and.w	r2, r3, #15
 8008ff4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	4422      	add	r2, r4
 8008ffc:	609a      	str	r2, [r3, #8]
}
 8008ffe:	bf00      	nop
 8009000:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8009004:	46bd      	mov	sp, r7
 8009006:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800900a:	bf00      	nop
 800900c:	51eb851f 	.word	0x51eb851f

08009010 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8009010:	b084      	sub	sp, #16
 8009012:	b480      	push	{r7}
 8009014:	b085      	sub	sp, #20
 8009016:	af00      	add	r7, sp, #0
 8009018:	6078      	str	r0, [r7, #4]
 800901a:	f107 001c 	add.w	r0, r7, #28
 800901e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8009022:	2300      	movs	r3, #0
 8009024:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8009026:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8009028:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800902a:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800902c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800902e:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8009030:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8009032:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8009034:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8009036:	431a      	orrs	r2, r3
             Init.ClockDiv
 8009038:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800903a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800903c:	68fa      	ldr	r2, [r7, #12]
 800903e:	4313      	orrs	r3, r2
 8009040:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	685b      	ldr	r3, [r3, #4]
 8009046:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800904a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800904e:	68fa      	ldr	r2, [r7, #12]
 8009050:	431a      	orrs	r2, r3
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8009056:	2300      	movs	r3, #0
}
 8009058:	4618      	mov	r0, r3
 800905a:	3714      	adds	r7, #20
 800905c:	46bd      	mov	sp, r7
 800905e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009062:	b004      	add	sp, #16
 8009064:	4770      	bx	lr

08009066 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8009066:	b480      	push	{r7}
 8009068:	b083      	sub	sp, #12
 800906a:	af00      	add	r7, sp, #0
 800906c:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8009074:	4618      	mov	r0, r3
 8009076:	370c      	adds	r7, #12
 8009078:	46bd      	mov	sp, r7
 800907a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800907e:	4770      	bx	lr

08009080 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8009080:	b480      	push	{r7}
 8009082:	b083      	sub	sp, #12
 8009084:	af00      	add	r7, sp, #0
 8009086:	6078      	str	r0, [r7, #4]
 8009088:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800908a:	683b      	ldr	r3, [r7, #0]
 800908c:	681a      	ldr	r2, [r3, #0]
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009094:	2300      	movs	r3, #0
}
 8009096:	4618      	mov	r0, r3
 8009098:	370c      	adds	r7, #12
 800909a:	46bd      	mov	sp, r7
 800909c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090a0:	4770      	bx	lr

080090a2 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 80090a2:	b480      	push	{r7}
 80090a4:	b083      	sub	sp, #12
 80090a6:	af00      	add	r7, sp, #0
 80090a8:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	2203      	movs	r2, #3
 80090ae:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80090b0:	2300      	movs	r3, #0
}
 80090b2:	4618      	mov	r0, r3
 80090b4:	370c      	adds	r7, #12
 80090b6:	46bd      	mov	sp, r7
 80090b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090bc:	4770      	bx	lr

080090be <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 80090be:	b480      	push	{r7}
 80090c0:	b083      	sub	sp, #12
 80090c2:	af00      	add	r7, sp, #0
 80090c4:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	f003 0303 	and.w	r3, r3, #3
}
 80090ce:	4618      	mov	r0, r3
 80090d0:	370c      	adds	r7, #12
 80090d2:	46bd      	mov	sp, r7
 80090d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d8:	4770      	bx	lr

080090da <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 80090da:	b480      	push	{r7}
 80090dc:	b085      	sub	sp, #20
 80090de:	af00      	add	r7, sp, #0
 80090e0:	6078      	str	r0, [r7, #4]
 80090e2:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80090e4:	2300      	movs	r3, #0
 80090e6:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 80090e8:	683b      	ldr	r3, [r7, #0]
 80090ea:	681a      	ldr	r2, [r3, #0]
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80090f0:	683b      	ldr	r3, [r7, #0]
 80090f2:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 80090f4:	683b      	ldr	r3, [r7, #0]
 80090f6:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80090f8:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 80090fa:	683b      	ldr	r3, [r7, #0]
 80090fc:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 80090fe:	431a      	orrs	r2, r3
                       Command->CPSM);
 8009100:	683b      	ldr	r3, [r7, #0]
 8009102:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8009104:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8009106:	68fa      	ldr	r2, [r7, #12]
 8009108:	4313      	orrs	r3, r2
 800910a:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	68db      	ldr	r3, [r3, #12]
 8009110:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8009114:	f023 030f 	bic.w	r3, r3, #15
 8009118:	68fa      	ldr	r2, [r7, #12]
 800911a:	431a      	orrs	r2, r3
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8009120:	2300      	movs	r3, #0
}
 8009122:	4618      	mov	r0, r3
 8009124:	3714      	adds	r7, #20
 8009126:	46bd      	mov	sp, r7
 8009128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800912c:	4770      	bx	lr

0800912e <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800912e:	b480      	push	{r7}
 8009130:	b083      	sub	sp, #12
 8009132:	af00      	add	r7, sp, #0
 8009134:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	691b      	ldr	r3, [r3, #16]
 800913a:	b2db      	uxtb	r3, r3
}
 800913c:	4618      	mov	r0, r3
 800913e:	370c      	adds	r7, #12
 8009140:	46bd      	mov	sp, r7
 8009142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009146:	4770      	bx	lr

08009148 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8009148:	b480      	push	{r7}
 800914a:	b085      	sub	sp, #20
 800914c:	af00      	add	r7, sp, #0
 800914e:	6078      	str	r0, [r7, #4]
 8009150:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	3314      	adds	r3, #20
 8009156:	461a      	mov	r2, r3
 8009158:	683b      	ldr	r3, [r7, #0]
 800915a:	4413      	add	r3, r2
 800915c:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	681b      	ldr	r3, [r3, #0]
}  
 8009162:	4618      	mov	r0, r3
 8009164:	3714      	adds	r7, #20
 8009166:	46bd      	mov	sp, r7
 8009168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800916c:	4770      	bx	lr

0800916e <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800916e:	b480      	push	{r7}
 8009170:	b085      	sub	sp, #20
 8009172:	af00      	add	r7, sp, #0
 8009174:	6078      	str	r0, [r7, #4]
 8009176:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8009178:	2300      	movs	r3, #0
 800917a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800917c:	683b      	ldr	r3, [r7, #0]
 800917e:	681a      	ldr	r2, [r3, #0]
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8009184:	683b      	ldr	r3, [r7, #0]
 8009186:	685a      	ldr	r2, [r3, #4]
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800918c:	683b      	ldr	r3, [r7, #0]
 800918e:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8009190:	683b      	ldr	r3, [r7, #0]
 8009192:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8009194:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8009196:	683b      	ldr	r3, [r7, #0]
 8009198:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800919a:	431a      	orrs	r2, r3
                       Data->DPSM);
 800919c:	683b      	ldr	r3, [r7, #0]
 800919e:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 80091a0:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80091a2:	68fa      	ldr	r2, [r7, #12]
 80091a4:	4313      	orrs	r3, r2
 80091a6:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091ac:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	431a      	orrs	r2, r3
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80091b8:	2300      	movs	r3, #0

}
 80091ba:	4618      	mov	r0, r3
 80091bc:	3714      	adds	r7, #20
 80091be:	46bd      	mov	sp, r7
 80091c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091c4:	4770      	bx	lr

080091c6 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 80091c6:	b580      	push	{r7, lr}
 80091c8:	b088      	sub	sp, #32
 80091ca:	af00      	add	r7, sp, #0
 80091cc:	6078      	str	r0, [r7, #4]
 80091ce:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80091d0:	683b      	ldr	r3, [r7, #0]
 80091d2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80091d4:	2310      	movs	r3, #16
 80091d6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80091d8:	2340      	movs	r3, #64	; 0x40
 80091da:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80091dc:	2300      	movs	r3, #0
 80091de:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80091e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80091e4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80091e6:	f107 0308 	add.w	r3, r7, #8
 80091ea:	4619      	mov	r1, r3
 80091ec:	6878      	ldr	r0, [r7, #4]
 80091ee:	f7ff ff74 	bl	80090da <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 80091f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80091f6:	2110      	movs	r1, #16
 80091f8:	6878      	ldr	r0, [r7, #4]
 80091fa:	f000 f9d7 	bl	80095ac <SDMMC_GetCmdResp1>
 80091fe:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009200:	69fb      	ldr	r3, [r7, #28]
}
 8009202:	4618      	mov	r0, r3
 8009204:	3720      	adds	r7, #32
 8009206:	46bd      	mov	sp, r7
 8009208:	bd80      	pop	{r7, pc}

0800920a <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800920a:	b580      	push	{r7, lr}
 800920c:	b088      	sub	sp, #32
 800920e:	af00      	add	r7, sp, #0
 8009210:	6078      	str	r0, [r7, #4]
 8009212:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8009214:	683b      	ldr	r3, [r7, #0]
 8009216:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8009218:	2311      	movs	r3, #17
 800921a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800921c:	2340      	movs	r3, #64	; 0x40
 800921e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009220:	2300      	movs	r3, #0
 8009222:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009224:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009228:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800922a:	f107 0308 	add.w	r3, r7, #8
 800922e:	4619      	mov	r1, r3
 8009230:	6878      	ldr	r0, [r7, #4]
 8009232:	f7ff ff52 	bl	80090da <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8009236:	f241 3288 	movw	r2, #5000	; 0x1388
 800923a:	2111      	movs	r1, #17
 800923c:	6878      	ldr	r0, [r7, #4]
 800923e:	f000 f9b5 	bl	80095ac <SDMMC_GetCmdResp1>
 8009242:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009244:	69fb      	ldr	r3, [r7, #28]
}
 8009246:	4618      	mov	r0, r3
 8009248:	3720      	adds	r7, #32
 800924a:	46bd      	mov	sp, r7
 800924c:	bd80      	pop	{r7, pc}

0800924e <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800924e:	b580      	push	{r7, lr}
 8009250:	b088      	sub	sp, #32
 8009252:	af00      	add	r7, sp, #0
 8009254:	6078      	str	r0, [r7, #4]
 8009256:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8009258:	683b      	ldr	r3, [r7, #0]
 800925a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800925c:	2312      	movs	r3, #18
 800925e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009260:	2340      	movs	r3, #64	; 0x40
 8009262:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009264:	2300      	movs	r3, #0
 8009266:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009268:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800926c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800926e:	f107 0308 	add.w	r3, r7, #8
 8009272:	4619      	mov	r1, r3
 8009274:	6878      	ldr	r0, [r7, #4]
 8009276:	f7ff ff30 	bl	80090da <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800927a:	f241 3288 	movw	r2, #5000	; 0x1388
 800927e:	2112      	movs	r1, #18
 8009280:	6878      	ldr	r0, [r7, #4]
 8009282:	f000 f993 	bl	80095ac <SDMMC_GetCmdResp1>
 8009286:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009288:	69fb      	ldr	r3, [r7, #28]
}
 800928a:	4618      	mov	r0, r3
 800928c:	3720      	adds	r7, #32
 800928e:	46bd      	mov	sp, r7
 8009290:	bd80      	pop	{r7, pc}

08009292 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8009292:	b580      	push	{r7, lr}
 8009294:	b088      	sub	sp, #32
 8009296:	af00      	add	r7, sp, #0
 8009298:	6078      	str	r0, [r7, #4]
 800929a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800929c:	683b      	ldr	r3, [r7, #0]
 800929e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 80092a0:	2318      	movs	r3, #24
 80092a2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80092a4:	2340      	movs	r3, #64	; 0x40
 80092a6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80092a8:	2300      	movs	r3, #0
 80092aa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80092ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80092b0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80092b2:	f107 0308 	add.w	r3, r7, #8
 80092b6:	4619      	mov	r1, r3
 80092b8:	6878      	ldr	r0, [r7, #4]
 80092ba:	f7ff ff0e 	bl	80090da <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80092be:	f241 3288 	movw	r2, #5000	; 0x1388
 80092c2:	2118      	movs	r1, #24
 80092c4:	6878      	ldr	r0, [r7, #4]
 80092c6:	f000 f971 	bl	80095ac <SDMMC_GetCmdResp1>
 80092ca:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80092cc:	69fb      	ldr	r3, [r7, #28]
}
 80092ce:	4618      	mov	r0, r3
 80092d0:	3720      	adds	r7, #32
 80092d2:	46bd      	mov	sp, r7
 80092d4:	bd80      	pop	{r7, pc}

080092d6 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 80092d6:	b580      	push	{r7, lr}
 80092d8:	b088      	sub	sp, #32
 80092da:	af00      	add	r7, sp, #0
 80092dc:	6078      	str	r0, [r7, #4]
 80092de:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80092e0:	683b      	ldr	r3, [r7, #0]
 80092e2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 80092e4:	2319      	movs	r3, #25
 80092e6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80092e8:	2340      	movs	r3, #64	; 0x40
 80092ea:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80092ec:	2300      	movs	r3, #0
 80092ee:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80092f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80092f4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80092f6:	f107 0308 	add.w	r3, r7, #8
 80092fa:	4619      	mov	r1, r3
 80092fc:	6878      	ldr	r0, [r7, #4]
 80092fe:	f7ff feec 	bl	80090da <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8009302:	f241 3288 	movw	r2, #5000	; 0x1388
 8009306:	2119      	movs	r1, #25
 8009308:	6878      	ldr	r0, [r7, #4]
 800930a:	f000 f94f 	bl	80095ac <SDMMC_GetCmdResp1>
 800930e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009310:	69fb      	ldr	r3, [r7, #28]
}
 8009312:	4618      	mov	r0, r3
 8009314:	3720      	adds	r7, #32
 8009316:	46bd      	mov	sp, r7
 8009318:	bd80      	pop	{r7, pc}
	...

0800931c <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800931c:	b580      	push	{r7, lr}
 800931e:	b088      	sub	sp, #32
 8009320:	af00      	add	r7, sp, #0
 8009322:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8009324:	2300      	movs	r3, #0
 8009326:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8009328:	230c      	movs	r3, #12
 800932a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800932c:	2340      	movs	r3, #64	; 0x40
 800932e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009330:	2300      	movs	r3, #0
 8009332:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009334:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009338:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800933a:	f107 0308 	add.w	r3, r7, #8
 800933e:	4619      	mov	r1, r3
 8009340:	6878      	ldr	r0, [r7, #4]
 8009342:	f7ff feca 	bl	80090da <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8009346:	4a05      	ldr	r2, [pc, #20]	; (800935c <SDMMC_CmdStopTransfer+0x40>)
 8009348:	210c      	movs	r1, #12
 800934a:	6878      	ldr	r0, [r7, #4]
 800934c:	f000 f92e 	bl	80095ac <SDMMC_GetCmdResp1>
 8009350:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009352:	69fb      	ldr	r3, [r7, #28]
}
 8009354:	4618      	mov	r0, r3
 8009356:	3720      	adds	r7, #32
 8009358:	46bd      	mov	sp, r7
 800935a:	bd80      	pop	{r7, pc}
 800935c:	05f5e100 	.word	0x05f5e100

08009360 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8009360:	b580      	push	{r7, lr}
 8009362:	b08a      	sub	sp, #40	; 0x28
 8009364:	af00      	add	r7, sp, #0
 8009366:	60f8      	str	r0, [r7, #12]
 8009368:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800936c:	683b      	ldr	r3, [r7, #0]
 800936e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8009370:	2307      	movs	r3, #7
 8009372:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009374:	2340      	movs	r3, #64	; 0x40
 8009376:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009378:	2300      	movs	r3, #0
 800937a:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800937c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009380:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009382:	f107 0310 	add.w	r3, r7, #16
 8009386:	4619      	mov	r1, r3
 8009388:	68f8      	ldr	r0, [r7, #12]
 800938a:	f7ff fea6 	bl	80090da <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800938e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009392:	2107      	movs	r1, #7
 8009394:	68f8      	ldr	r0, [r7, #12]
 8009396:	f000 f909 	bl	80095ac <SDMMC_GetCmdResp1>
 800939a:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800939c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800939e:	4618      	mov	r0, r3
 80093a0:	3728      	adds	r7, #40	; 0x28
 80093a2:	46bd      	mov	sp, r7
 80093a4:	bd80      	pop	{r7, pc}

080093a6 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 80093a6:	b580      	push	{r7, lr}
 80093a8:	b088      	sub	sp, #32
 80093aa:	af00      	add	r7, sp, #0
 80093ac:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 80093ae:	2300      	movs	r3, #0
 80093b0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80093b2:	2300      	movs	r3, #0
 80093b4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 80093b6:	2300      	movs	r3, #0
 80093b8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80093ba:	2300      	movs	r3, #0
 80093bc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80093be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80093c2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80093c4:	f107 0308 	add.w	r3, r7, #8
 80093c8:	4619      	mov	r1, r3
 80093ca:	6878      	ldr	r0, [r7, #4]
 80093cc:	f7ff fe85 	bl	80090da <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 80093d0:	6878      	ldr	r0, [r7, #4]
 80093d2:	f000 fb23 	bl	8009a1c <SDMMC_GetCmdError>
 80093d6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80093d8:	69fb      	ldr	r3, [r7, #28]
}
 80093da:	4618      	mov	r0, r3
 80093dc:	3720      	adds	r7, #32
 80093de:	46bd      	mov	sp, r7
 80093e0:	bd80      	pop	{r7, pc}

080093e2 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 80093e2:	b580      	push	{r7, lr}
 80093e4:	b088      	sub	sp, #32
 80093e6:	af00      	add	r7, sp, #0
 80093e8:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 80093ea:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 80093ee:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 80093f0:	2308      	movs	r3, #8
 80093f2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80093f4:	2340      	movs	r3, #64	; 0x40
 80093f6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80093f8:	2300      	movs	r3, #0
 80093fa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80093fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009400:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009402:	f107 0308 	add.w	r3, r7, #8
 8009406:	4619      	mov	r1, r3
 8009408:	6878      	ldr	r0, [r7, #4]
 800940a:	f7ff fe66 	bl	80090da <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800940e:	6878      	ldr	r0, [r7, #4]
 8009410:	f000 fab6 	bl	8009980 <SDMMC_GetCmdResp7>
 8009414:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009416:	69fb      	ldr	r3, [r7, #28]
}
 8009418:	4618      	mov	r0, r3
 800941a:	3720      	adds	r7, #32
 800941c:	46bd      	mov	sp, r7
 800941e:	bd80      	pop	{r7, pc}

08009420 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8009420:	b580      	push	{r7, lr}
 8009422:	b088      	sub	sp, #32
 8009424:	af00      	add	r7, sp, #0
 8009426:	6078      	str	r0, [r7, #4]
 8009428:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800942a:	683b      	ldr	r3, [r7, #0]
 800942c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800942e:	2337      	movs	r3, #55	; 0x37
 8009430:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009432:	2340      	movs	r3, #64	; 0x40
 8009434:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009436:	2300      	movs	r3, #0
 8009438:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800943a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800943e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009440:	f107 0308 	add.w	r3, r7, #8
 8009444:	4619      	mov	r1, r3
 8009446:	6878      	ldr	r0, [r7, #4]
 8009448:	f7ff fe47 	bl	80090da <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800944c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009450:	2137      	movs	r1, #55	; 0x37
 8009452:	6878      	ldr	r0, [r7, #4]
 8009454:	f000 f8aa 	bl	80095ac <SDMMC_GetCmdResp1>
 8009458:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800945a:	69fb      	ldr	r3, [r7, #28]
}
 800945c:	4618      	mov	r0, r3
 800945e:	3720      	adds	r7, #32
 8009460:	46bd      	mov	sp, r7
 8009462:	bd80      	pop	{r7, pc}

08009464 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8009464:	b580      	push	{r7, lr}
 8009466:	b088      	sub	sp, #32
 8009468:	af00      	add	r7, sp, #0
 800946a:	6078      	str	r0, [r7, #4]
 800946c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800946e:	683b      	ldr	r3, [r7, #0]
 8009470:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009474:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009478:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800947a:	2329      	movs	r3, #41	; 0x29
 800947c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800947e:	2340      	movs	r3, #64	; 0x40
 8009480:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009482:	2300      	movs	r3, #0
 8009484:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009486:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800948a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800948c:	f107 0308 	add.w	r3, r7, #8
 8009490:	4619      	mov	r1, r3
 8009492:	6878      	ldr	r0, [r7, #4]
 8009494:	f7ff fe21 	bl	80090da <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8009498:	6878      	ldr	r0, [r7, #4]
 800949a:	f000 f9bd 	bl	8009818 <SDMMC_GetCmdResp3>
 800949e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80094a0:	69fb      	ldr	r3, [r7, #28]
}
 80094a2:	4618      	mov	r0, r3
 80094a4:	3720      	adds	r7, #32
 80094a6:	46bd      	mov	sp, r7
 80094a8:	bd80      	pop	{r7, pc}

080094aa <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 80094aa:	b580      	push	{r7, lr}
 80094ac:	b088      	sub	sp, #32
 80094ae:	af00      	add	r7, sp, #0
 80094b0:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 80094b2:	2300      	movs	r3, #0
 80094b4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80094b6:	2302      	movs	r3, #2
 80094b8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80094ba:	23c0      	movs	r3, #192	; 0xc0
 80094bc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80094be:	2300      	movs	r3, #0
 80094c0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80094c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80094c6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80094c8:	f107 0308 	add.w	r3, r7, #8
 80094cc:	4619      	mov	r1, r3
 80094ce:	6878      	ldr	r0, [r7, #4]
 80094d0:	f7ff fe03 	bl	80090da <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80094d4:	6878      	ldr	r0, [r7, #4]
 80094d6:	f000 f957 	bl	8009788 <SDMMC_GetCmdResp2>
 80094da:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80094dc:	69fb      	ldr	r3, [r7, #28]
}
 80094de:	4618      	mov	r0, r3
 80094e0:	3720      	adds	r7, #32
 80094e2:	46bd      	mov	sp, r7
 80094e4:	bd80      	pop	{r7, pc}

080094e6 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80094e6:	b580      	push	{r7, lr}
 80094e8:	b088      	sub	sp, #32
 80094ea:	af00      	add	r7, sp, #0
 80094ec:	6078      	str	r0, [r7, #4]
 80094ee:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 80094f0:	683b      	ldr	r3, [r7, #0]
 80094f2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 80094f4:	2309      	movs	r3, #9
 80094f6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80094f8:	23c0      	movs	r3, #192	; 0xc0
 80094fa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80094fc:	2300      	movs	r3, #0
 80094fe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009500:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009504:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009506:	f107 0308 	add.w	r3, r7, #8
 800950a:	4619      	mov	r1, r3
 800950c:	6878      	ldr	r0, [r7, #4]
 800950e:	f7ff fde4 	bl	80090da <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8009512:	6878      	ldr	r0, [r7, #4]
 8009514:	f000 f938 	bl	8009788 <SDMMC_GetCmdResp2>
 8009518:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800951a:	69fb      	ldr	r3, [r7, #28]
}
 800951c:	4618      	mov	r0, r3
 800951e:	3720      	adds	r7, #32
 8009520:	46bd      	mov	sp, r7
 8009522:	bd80      	pop	{r7, pc}

08009524 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8009524:	b580      	push	{r7, lr}
 8009526:	b088      	sub	sp, #32
 8009528:	af00      	add	r7, sp, #0
 800952a:	6078      	str	r0, [r7, #4]
 800952c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800952e:	2300      	movs	r3, #0
 8009530:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8009532:	2303      	movs	r3, #3
 8009534:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009536:	2340      	movs	r3, #64	; 0x40
 8009538:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800953a:	2300      	movs	r3, #0
 800953c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800953e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009542:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009544:	f107 0308 	add.w	r3, r7, #8
 8009548:	4619      	mov	r1, r3
 800954a:	6878      	ldr	r0, [r7, #4]
 800954c:	f7ff fdc5 	bl	80090da <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8009550:	683a      	ldr	r2, [r7, #0]
 8009552:	2103      	movs	r1, #3
 8009554:	6878      	ldr	r0, [r7, #4]
 8009556:	f000 f99d 	bl	8009894 <SDMMC_GetCmdResp6>
 800955a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800955c:	69fb      	ldr	r3, [r7, #28]
}
 800955e:	4618      	mov	r0, r3
 8009560:	3720      	adds	r7, #32
 8009562:	46bd      	mov	sp, r7
 8009564:	bd80      	pop	{r7, pc}

08009566 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8009566:	b580      	push	{r7, lr}
 8009568:	b088      	sub	sp, #32
 800956a:	af00      	add	r7, sp, #0
 800956c:	6078      	str	r0, [r7, #4]
 800956e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8009570:	683b      	ldr	r3, [r7, #0]
 8009572:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8009574:	230d      	movs	r3, #13
 8009576:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009578:	2340      	movs	r3, #64	; 0x40
 800957a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800957c:	2300      	movs	r3, #0
 800957e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009580:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009584:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009586:	f107 0308 	add.w	r3, r7, #8
 800958a:	4619      	mov	r1, r3
 800958c:	6878      	ldr	r0, [r7, #4]
 800958e:	f7ff fda4 	bl	80090da <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8009592:	f241 3288 	movw	r2, #5000	; 0x1388
 8009596:	210d      	movs	r1, #13
 8009598:	6878      	ldr	r0, [r7, #4]
 800959a:	f000 f807 	bl	80095ac <SDMMC_GetCmdResp1>
 800959e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80095a0:	69fb      	ldr	r3, [r7, #28]
}
 80095a2:	4618      	mov	r0, r3
 80095a4:	3720      	adds	r7, #32
 80095a6:	46bd      	mov	sp, r7
 80095a8:	bd80      	pop	{r7, pc}
	...

080095ac <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 80095ac:	b580      	push	{r7, lr}
 80095ae:	b088      	sub	sp, #32
 80095b0:	af00      	add	r7, sp, #0
 80095b2:	60f8      	str	r0, [r7, #12]
 80095b4:	460b      	mov	r3, r1
 80095b6:	607a      	str	r2, [r7, #4]
 80095b8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80095ba:	4b70      	ldr	r3, [pc, #448]	; (800977c <SDMMC_GetCmdResp1+0x1d0>)
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	4a70      	ldr	r2, [pc, #448]	; (8009780 <SDMMC_GetCmdResp1+0x1d4>)
 80095c0:	fba2 2303 	umull	r2, r3, r2, r3
 80095c4:	0a5a      	lsrs	r2, r3, #9
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	fb02 f303 	mul.w	r3, r2, r3
 80095cc:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 80095ce:	69fb      	ldr	r3, [r7, #28]
 80095d0:	1e5a      	subs	r2, r3, #1
 80095d2:	61fa      	str	r2, [r7, #28]
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d102      	bne.n	80095de <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 80095d8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80095dc:	e0c9      	b.n	8009772 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80095e2:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80095e4:	69bb      	ldr	r3, [r7, #24]
 80095e6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d0ef      	beq.n	80095ce <SDMMC_GetCmdResp1+0x22>
 80095ee:	69bb      	ldr	r3, [r7, #24]
 80095f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d1ea      	bne.n	80095ce <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80095fc:	f003 0304 	and.w	r3, r3, #4
 8009600:	2b00      	cmp	r3, #0
 8009602:	d004      	beq.n	800960e <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	2204      	movs	r2, #4
 8009608:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800960a:	2304      	movs	r3, #4
 800960c:	e0b1      	b.n	8009772 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009612:	f003 0301 	and.w	r3, r3, #1
 8009616:	2b00      	cmp	r3, #0
 8009618:	d004      	beq.n	8009624 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	2201      	movs	r2, #1
 800961e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009620:	2301      	movs	r3, #1
 8009622:	e0a6      	b.n	8009772 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	22c5      	movs	r2, #197	; 0xc5
 8009628:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800962a:	68f8      	ldr	r0, [r7, #12]
 800962c:	f7ff fd7f 	bl	800912e <SDIO_GetCommandResponse>
 8009630:	4603      	mov	r3, r0
 8009632:	461a      	mov	r2, r3
 8009634:	7afb      	ldrb	r3, [r7, #11]
 8009636:	4293      	cmp	r3, r2
 8009638:	d001      	beq.n	800963e <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800963a:	2301      	movs	r3, #1
 800963c:	e099      	b.n	8009772 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800963e:	2100      	movs	r1, #0
 8009640:	68f8      	ldr	r0, [r7, #12]
 8009642:	f7ff fd81 	bl	8009148 <SDIO_GetResponse>
 8009646:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8009648:	697a      	ldr	r2, [r7, #20]
 800964a:	4b4e      	ldr	r3, [pc, #312]	; (8009784 <SDMMC_GetCmdResp1+0x1d8>)
 800964c:	4013      	ands	r3, r2
 800964e:	2b00      	cmp	r3, #0
 8009650:	d101      	bne.n	8009656 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8009652:	2300      	movs	r3, #0
 8009654:	e08d      	b.n	8009772 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8009656:	697b      	ldr	r3, [r7, #20]
 8009658:	2b00      	cmp	r3, #0
 800965a:	da02      	bge.n	8009662 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800965c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009660:	e087      	b.n	8009772 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8009662:	697b      	ldr	r3, [r7, #20]
 8009664:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009668:	2b00      	cmp	r3, #0
 800966a:	d001      	beq.n	8009670 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800966c:	2340      	movs	r3, #64	; 0x40
 800966e:	e080      	b.n	8009772 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8009670:	697b      	ldr	r3, [r7, #20]
 8009672:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009676:	2b00      	cmp	r3, #0
 8009678:	d001      	beq.n	800967e <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800967a:	2380      	movs	r3, #128	; 0x80
 800967c:	e079      	b.n	8009772 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800967e:	697b      	ldr	r3, [r7, #20]
 8009680:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009684:	2b00      	cmp	r3, #0
 8009686:	d002      	beq.n	800968e <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8009688:	f44f 7380 	mov.w	r3, #256	; 0x100
 800968c:	e071      	b.n	8009772 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800968e:	697b      	ldr	r3, [r7, #20]
 8009690:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009694:	2b00      	cmp	r3, #0
 8009696:	d002      	beq.n	800969e <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8009698:	f44f 7300 	mov.w	r3, #512	; 0x200
 800969c:	e069      	b.n	8009772 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800969e:	697b      	ldr	r3, [r7, #20]
 80096a0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d002      	beq.n	80096ae <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80096a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80096ac:	e061      	b.n	8009772 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80096ae:	697b      	ldr	r3, [r7, #20]
 80096b0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d002      	beq.n	80096be <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80096b8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80096bc:	e059      	b.n	8009772 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80096be:	697b      	ldr	r3, [r7, #20]
 80096c0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d002      	beq.n	80096ce <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80096c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80096cc:	e051      	b.n	8009772 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80096ce:	697b      	ldr	r3, [r7, #20]
 80096d0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d002      	beq.n	80096de <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80096d8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80096dc:	e049      	b.n	8009772 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80096de:	697b      	ldr	r3, [r7, #20]
 80096e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d002      	beq.n	80096ee <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80096e8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80096ec:	e041      	b.n	8009772 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80096ee:	697b      	ldr	r3, [r7, #20]
 80096f0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d002      	beq.n	80096fe <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 80096f8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80096fc:	e039      	b.n	8009772 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80096fe:	697b      	ldr	r3, [r7, #20]
 8009700:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009704:	2b00      	cmp	r3, #0
 8009706:	d002      	beq.n	800970e <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8009708:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800970c:	e031      	b.n	8009772 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800970e:	697b      	ldr	r3, [r7, #20]
 8009710:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009714:	2b00      	cmp	r3, #0
 8009716:	d002      	beq.n	800971e <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8009718:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800971c:	e029      	b.n	8009772 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800971e:	697b      	ldr	r3, [r7, #20]
 8009720:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009724:	2b00      	cmp	r3, #0
 8009726:	d002      	beq.n	800972e <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8009728:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800972c:	e021      	b.n	8009772 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800972e:	697b      	ldr	r3, [r7, #20]
 8009730:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009734:	2b00      	cmp	r3, #0
 8009736:	d002      	beq.n	800973e <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8009738:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800973c:	e019      	b.n	8009772 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800973e:	697b      	ldr	r3, [r7, #20]
 8009740:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009744:	2b00      	cmp	r3, #0
 8009746:	d002      	beq.n	800974e <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8009748:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800974c:	e011      	b.n	8009772 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800974e:	697b      	ldr	r3, [r7, #20]
 8009750:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009754:	2b00      	cmp	r3, #0
 8009756:	d002      	beq.n	800975e <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8009758:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800975c:	e009      	b.n	8009772 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800975e:	697b      	ldr	r3, [r7, #20]
 8009760:	f003 0308 	and.w	r3, r3, #8
 8009764:	2b00      	cmp	r3, #0
 8009766:	d002      	beq.n	800976e <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8009768:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800976c:	e001      	b.n	8009772 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800976e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8009772:	4618      	mov	r0, r3
 8009774:	3720      	adds	r7, #32
 8009776:	46bd      	mov	sp, r7
 8009778:	bd80      	pop	{r7, pc}
 800977a:	bf00      	nop
 800977c:	20000000 	.word	0x20000000
 8009780:	10624dd3 	.word	0x10624dd3
 8009784:	fdffe008 	.word	0xfdffe008

08009788 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8009788:	b480      	push	{r7}
 800978a:	b085      	sub	sp, #20
 800978c:	af00      	add	r7, sp, #0
 800978e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009790:	4b1f      	ldr	r3, [pc, #124]	; (8009810 <SDMMC_GetCmdResp2+0x88>)
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	4a1f      	ldr	r2, [pc, #124]	; (8009814 <SDMMC_GetCmdResp2+0x8c>)
 8009796:	fba2 2303 	umull	r2, r3, r2, r3
 800979a:	0a5b      	lsrs	r3, r3, #9
 800979c:	f241 3288 	movw	r2, #5000	; 0x1388
 80097a0:	fb02 f303 	mul.w	r3, r2, r3
 80097a4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	1e5a      	subs	r2, r3, #1
 80097aa:	60fa      	str	r2, [r7, #12]
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d102      	bne.n	80097b6 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80097b0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80097b4:	e026      	b.n	8009804 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80097ba:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80097bc:	68bb      	ldr	r3, [r7, #8]
 80097be:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d0ef      	beq.n	80097a6 <SDMMC_GetCmdResp2+0x1e>
 80097c6:	68bb      	ldr	r3, [r7, #8]
 80097c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d1ea      	bne.n	80097a6 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80097d4:	f003 0304 	and.w	r3, r3, #4
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d004      	beq.n	80097e6 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	2204      	movs	r2, #4
 80097e0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80097e2:	2304      	movs	r3, #4
 80097e4:	e00e      	b.n	8009804 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80097ea:	f003 0301 	and.w	r3, r3, #1
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d004      	beq.n	80097fc <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	2201      	movs	r2, #1
 80097f6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80097f8:	2301      	movs	r3, #1
 80097fa:	e003      	b.n	8009804 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	22c5      	movs	r2, #197	; 0xc5
 8009800:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8009802:	2300      	movs	r3, #0
}
 8009804:	4618      	mov	r0, r3
 8009806:	3714      	adds	r7, #20
 8009808:	46bd      	mov	sp, r7
 800980a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800980e:	4770      	bx	lr
 8009810:	20000000 	.word	0x20000000
 8009814:	10624dd3 	.word	0x10624dd3

08009818 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8009818:	b480      	push	{r7}
 800981a:	b085      	sub	sp, #20
 800981c:	af00      	add	r7, sp, #0
 800981e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009820:	4b1a      	ldr	r3, [pc, #104]	; (800988c <SDMMC_GetCmdResp3+0x74>)
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	4a1a      	ldr	r2, [pc, #104]	; (8009890 <SDMMC_GetCmdResp3+0x78>)
 8009826:	fba2 2303 	umull	r2, r3, r2, r3
 800982a:	0a5b      	lsrs	r3, r3, #9
 800982c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009830:	fb02 f303 	mul.w	r3, r2, r3
 8009834:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	1e5a      	subs	r2, r3, #1
 800983a:	60fa      	str	r2, [r7, #12]
 800983c:	2b00      	cmp	r3, #0
 800983e:	d102      	bne.n	8009846 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009840:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009844:	e01b      	b.n	800987e <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800984a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800984c:	68bb      	ldr	r3, [r7, #8]
 800984e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8009852:	2b00      	cmp	r3, #0
 8009854:	d0ef      	beq.n	8009836 <SDMMC_GetCmdResp3+0x1e>
 8009856:	68bb      	ldr	r3, [r7, #8]
 8009858:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800985c:	2b00      	cmp	r3, #0
 800985e:	d1ea      	bne.n	8009836 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009864:	f003 0304 	and.w	r3, r3, #4
 8009868:	2b00      	cmp	r3, #0
 800986a:	d004      	beq.n	8009876 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	2204      	movs	r2, #4
 8009870:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009872:	2304      	movs	r3, #4
 8009874:	e003      	b.n	800987e <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	22c5      	movs	r2, #197	; 0xc5
 800987a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800987c:	2300      	movs	r3, #0
}
 800987e:	4618      	mov	r0, r3
 8009880:	3714      	adds	r7, #20
 8009882:	46bd      	mov	sp, r7
 8009884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009888:	4770      	bx	lr
 800988a:	bf00      	nop
 800988c:	20000000 	.word	0x20000000
 8009890:	10624dd3 	.word	0x10624dd3

08009894 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8009894:	b580      	push	{r7, lr}
 8009896:	b088      	sub	sp, #32
 8009898:	af00      	add	r7, sp, #0
 800989a:	60f8      	str	r0, [r7, #12]
 800989c:	460b      	mov	r3, r1
 800989e:	607a      	str	r2, [r7, #4]
 80098a0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80098a2:	4b35      	ldr	r3, [pc, #212]	; (8009978 <SDMMC_GetCmdResp6+0xe4>)
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	4a35      	ldr	r2, [pc, #212]	; (800997c <SDMMC_GetCmdResp6+0xe8>)
 80098a8:	fba2 2303 	umull	r2, r3, r2, r3
 80098ac:	0a5b      	lsrs	r3, r3, #9
 80098ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80098b2:	fb02 f303 	mul.w	r3, r2, r3
 80098b6:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 80098b8:	69fb      	ldr	r3, [r7, #28]
 80098ba:	1e5a      	subs	r2, r3, #1
 80098bc:	61fa      	str	r2, [r7, #28]
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d102      	bne.n	80098c8 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 80098c2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80098c6:	e052      	b.n	800996e <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80098cc:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80098ce:	69bb      	ldr	r3, [r7, #24]
 80098d0:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d0ef      	beq.n	80098b8 <SDMMC_GetCmdResp6+0x24>
 80098d8:	69bb      	ldr	r3, [r7, #24]
 80098da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d1ea      	bne.n	80098b8 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80098e6:	f003 0304 	and.w	r3, r3, #4
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d004      	beq.n	80098f8 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80098ee:	68fb      	ldr	r3, [r7, #12]
 80098f0:	2204      	movs	r2, #4
 80098f2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80098f4:	2304      	movs	r3, #4
 80098f6:	e03a      	b.n	800996e <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80098fc:	f003 0301 	and.w	r3, r3, #1
 8009900:	2b00      	cmp	r3, #0
 8009902:	d004      	beq.n	800990e <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	2201      	movs	r2, #1
 8009908:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800990a:	2301      	movs	r3, #1
 800990c:	e02f      	b.n	800996e <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800990e:	68f8      	ldr	r0, [r7, #12]
 8009910:	f7ff fc0d 	bl	800912e <SDIO_GetCommandResponse>
 8009914:	4603      	mov	r3, r0
 8009916:	461a      	mov	r2, r3
 8009918:	7afb      	ldrb	r3, [r7, #11]
 800991a:	4293      	cmp	r3, r2
 800991c:	d001      	beq.n	8009922 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800991e:	2301      	movs	r3, #1
 8009920:	e025      	b.n	800996e <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	22c5      	movs	r2, #197	; 0xc5
 8009926:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8009928:	2100      	movs	r1, #0
 800992a:	68f8      	ldr	r0, [r7, #12]
 800992c:	f7ff fc0c 	bl	8009148 <SDIO_GetResponse>
 8009930:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8009932:	697b      	ldr	r3, [r7, #20]
 8009934:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8009938:	2b00      	cmp	r3, #0
 800993a:	d106      	bne.n	800994a <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800993c:	697b      	ldr	r3, [r7, #20]
 800993e:	0c1b      	lsrs	r3, r3, #16
 8009940:	b29a      	uxth	r2, r3
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8009946:	2300      	movs	r3, #0
 8009948:	e011      	b.n	800996e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800994a:	697b      	ldr	r3, [r7, #20]
 800994c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009950:	2b00      	cmp	r3, #0
 8009952:	d002      	beq.n	800995a <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8009954:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009958:	e009      	b.n	800996e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800995a:	697b      	ldr	r3, [r7, #20]
 800995c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009960:	2b00      	cmp	r3, #0
 8009962:	d002      	beq.n	800996a <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8009964:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009968:	e001      	b.n	800996e <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800996a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800996e:	4618      	mov	r0, r3
 8009970:	3720      	adds	r7, #32
 8009972:	46bd      	mov	sp, r7
 8009974:	bd80      	pop	{r7, pc}
 8009976:	bf00      	nop
 8009978:	20000000 	.word	0x20000000
 800997c:	10624dd3 	.word	0x10624dd3

08009980 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8009980:	b480      	push	{r7}
 8009982:	b085      	sub	sp, #20
 8009984:	af00      	add	r7, sp, #0
 8009986:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009988:	4b22      	ldr	r3, [pc, #136]	; (8009a14 <SDMMC_GetCmdResp7+0x94>)
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	4a22      	ldr	r2, [pc, #136]	; (8009a18 <SDMMC_GetCmdResp7+0x98>)
 800998e:	fba2 2303 	umull	r2, r3, r2, r3
 8009992:	0a5b      	lsrs	r3, r3, #9
 8009994:	f241 3288 	movw	r2, #5000	; 0x1388
 8009998:	fb02 f303 	mul.w	r3, r2, r3
 800999c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	1e5a      	subs	r2, r3, #1
 80099a2:	60fa      	str	r2, [r7, #12]
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d102      	bne.n	80099ae <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80099a8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80099ac:	e02c      	b.n	8009a08 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80099b2:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80099b4:	68bb      	ldr	r3, [r7, #8]
 80099b6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d0ef      	beq.n	800999e <SDMMC_GetCmdResp7+0x1e>
 80099be:	68bb      	ldr	r3, [r7, #8]
 80099c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d1ea      	bne.n	800999e <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80099cc:	f003 0304 	and.w	r3, r3, #4
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d004      	beq.n	80099de <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	2204      	movs	r2, #4
 80099d8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80099da:	2304      	movs	r3, #4
 80099dc:	e014      	b.n	8009a08 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80099e2:	f003 0301 	and.w	r3, r3, #1
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d004      	beq.n	80099f4 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	2201      	movs	r2, #1
 80099ee:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80099f0:	2301      	movs	r3, #1
 80099f2:	e009      	b.n	8009a08 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80099f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d002      	beq.n	8009a06 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	2240      	movs	r2, #64	; 0x40
 8009a04:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8009a06:	2300      	movs	r3, #0
  
}
 8009a08:	4618      	mov	r0, r3
 8009a0a:	3714      	adds	r7, #20
 8009a0c:	46bd      	mov	sp, r7
 8009a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a12:	4770      	bx	lr
 8009a14:	20000000 	.word	0x20000000
 8009a18:	10624dd3 	.word	0x10624dd3

08009a1c <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8009a1c:	b480      	push	{r7}
 8009a1e:	b085      	sub	sp, #20
 8009a20:	af00      	add	r7, sp, #0
 8009a22:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009a24:	4b11      	ldr	r3, [pc, #68]	; (8009a6c <SDMMC_GetCmdError+0x50>)
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	4a11      	ldr	r2, [pc, #68]	; (8009a70 <SDMMC_GetCmdError+0x54>)
 8009a2a:	fba2 2303 	umull	r2, r3, r2, r3
 8009a2e:	0a5b      	lsrs	r3, r3, #9
 8009a30:	f241 3288 	movw	r2, #5000	; 0x1388
 8009a34:	fb02 f303 	mul.w	r3, r2, r3
 8009a38:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	1e5a      	subs	r2, r3, #1
 8009a3e:	60fa      	str	r2, [r7, #12]
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d102      	bne.n	8009a4a <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009a44:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009a48:	e009      	b.n	8009a5e <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d0f1      	beq.n	8009a3a <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	22c5      	movs	r2, #197	; 0xc5
 8009a5a:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8009a5c:	2300      	movs	r3, #0
}
 8009a5e:	4618      	mov	r0, r3
 8009a60:	3714      	adds	r7, #20
 8009a62:	46bd      	mov	sp, r7
 8009a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a68:	4770      	bx	lr
 8009a6a:	bf00      	nop
 8009a6c:	20000000 	.word	0x20000000
 8009a70:	10624dd3 	.word	0x10624dd3

08009a74 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8009a74:	b580      	push	{r7, lr}
 8009a76:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8009a78:	4904      	ldr	r1, [pc, #16]	; (8009a8c <MX_FATFS_Init+0x18>)
 8009a7a:	4805      	ldr	r0, [pc, #20]	; (8009a90 <MX_FATFS_Init+0x1c>)
 8009a7c:	f003 f85c 	bl	800cb38 <FATFS_LinkDriver>
 8009a80:	4603      	mov	r3, r0
 8009a82:	461a      	mov	r2, r3
 8009a84:	4b03      	ldr	r3, [pc, #12]	; (8009a94 <MX_FATFS_Init+0x20>)
 8009a86:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8009a88:	bf00      	nop
 8009a8a:	bd80      	pop	{r7, pc}
 8009a8c:	200014f8 	.word	0x200014f8
 8009a90:	0800e20c 	.word	0x0800e20c
 8009a94:	200014f4 	.word	0x200014f4

08009a98 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8009a98:	b480      	push	{r7}
 8009a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8009a9c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8009a9e:	4618      	mov	r0, r3
 8009aa0:	46bd      	mov	sp, r7
 8009aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aa6:	4770      	bx	lr

08009aa8 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8009aa8:	b580      	push	{r7, lr}
 8009aaa:	b082      	sub	sp, #8
 8009aac:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8009aae:	2300      	movs	r3, #0
 8009ab0:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8009ab2:	f000 f888 	bl	8009bc6 <BSP_SD_IsDetected>
 8009ab6:	4603      	mov	r3, r0
 8009ab8:	2b01      	cmp	r3, #1
 8009aba:	d001      	beq.n	8009ac0 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8009abc:	2301      	movs	r3, #1
 8009abe:	e005      	b.n	8009acc <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8009ac0:	4804      	ldr	r0, [pc, #16]	; (8009ad4 <BSP_SD_Init+0x2c>)
 8009ac2:	f7fc fcdf 	bl	8006484 <HAL_SD_Init>
 8009ac6:	4603      	mov	r3, r0
 8009ac8:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 8009aca:	79fb      	ldrb	r3, [r7, #7]
}
 8009acc:	4618      	mov	r0, r3
 8009ace:	3708      	adds	r7, #8
 8009ad0:	46bd      	mov	sp, r7
 8009ad2:	bd80      	pop	{r7, pc}
 8009ad4:	200012d8 	.word	0x200012d8

08009ad8 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8009ad8:	b580      	push	{r7, lr}
 8009ada:	b086      	sub	sp, #24
 8009adc:	af00      	add	r7, sp, #0
 8009ade:	60f8      	str	r0, [r7, #12]
 8009ae0:	60b9      	str	r1, [r7, #8]
 8009ae2:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8009ae4:	2300      	movs	r3, #0
 8009ae6:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	68ba      	ldr	r2, [r7, #8]
 8009aec:	68f9      	ldr	r1, [r7, #12]
 8009aee:	4806      	ldr	r0, [pc, #24]	; (8009b08 <BSP_SD_ReadBlocks_DMA+0x30>)
 8009af0:	f7fc fd78 	bl	80065e4 <HAL_SD_ReadBlocks_DMA>
 8009af4:	4603      	mov	r3, r0
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d001      	beq.n	8009afe <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8009afa:	2301      	movs	r3, #1
 8009afc:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8009afe:	7dfb      	ldrb	r3, [r7, #23]
}
 8009b00:	4618      	mov	r0, r3
 8009b02:	3718      	adds	r7, #24
 8009b04:	46bd      	mov	sp, r7
 8009b06:	bd80      	pop	{r7, pc}
 8009b08:	200012d8 	.word	0x200012d8

08009b0c <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8009b0c:	b580      	push	{r7, lr}
 8009b0e:	b086      	sub	sp, #24
 8009b10:	af00      	add	r7, sp, #0
 8009b12:	60f8      	str	r0, [r7, #12]
 8009b14:	60b9      	str	r1, [r7, #8]
 8009b16:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8009b18:	2300      	movs	r3, #0
 8009b1a:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	68ba      	ldr	r2, [r7, #8]
 8009b20:	68f9      	ldr	r1, [r7, #12]
 8009b22:	4806      	ldr	r0, [pc, #24]	; (8009b3c <BSP_SD_WriteBlocks_DMA+0x30>)
 8009b24:	f7fc fe40 	bl	80067a8 <HAL_SD_WriteBlocks_DMA>
 8009b28:	4603      	mov	r3, r0
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d001      	beq.n	8009b32 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8009b2e:	2301      	movs	r3, #1
 8009b30:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8009b32:	7dfb      	ldrb	r3, [r7, #23]
}
 8009b34:	4618      	mov	r0, r3
 8009b36:	3718      	adds	r7, #24
 8009b38:	46bd      	mov	sp, r7
 8009b3a:	bd80      	pop	{r7, pc}
 8009b3c:	200012d8 	.word	0x200012d8

08009b40 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8009b40:	b580      	push	{r7, lr}
 8009b42:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8009b44:	4805      	ldr	r0, [pc, #20]	; (8009b5c <BSP_SD_GetCardState+0x1c>)
 8009b46:	f7fd fa75 	bl	8007034 <HAL_SD_GetCardState>
 8009b4a:	4603      	mov	r3, r0
 8009b4c:	2b04      	cmp	r3, #4
 8009b4e:	bf14      	ite	ne
 8009b50:	2301      	movne	r3, #1
 8009b52:	2300      	moveq	r3, #0
 8009b54:	b2db      	uxtb	r3, r3
}
 8009b56:	4618      	mov	r0, r3
 8009b58:	bd80      	pop	{r7, pc}
 8009b5a:	bf00      	nop
 8009b5c:	200012d8 	.word	0x200012d8

08009b60 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8009b60:	b580      	push	{r7, lr}
 8009b62:	b082      	sub	sp, #8
 8009b64:	af00      	add	r7, sp, #0
 8009b66:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8009b68:	6879      	ldr	r1, [r7, #4]
 8009b6a:	4803      	ldr	r0, [pc, #12]	; (8009b78 <BSP_SD_GetCardInfo+0x18>)
 8009b6c:	f7fd fa36 	bl	8006fdc <HAL_SD_GetCardInfo>
}
 8009b70:	bf00      	nop
 8009b72:	3708      	adds	r7, #8
 8009b74:	46bd      	mov	sp, r7
 8009b76:	bd80      	pop	{r7, pc}
 8009b78:	200012d8 	.word	0x200012d8

08009b7c <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8009b7c:	b580      	push	{r7, lr}
 8009b7e:	b082      	sub	sp, #8
 8009b80:	af00      	add	r7, sp, #0
 8009b82:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 8009b84:	f000 f818 	bl	8009bb8 <BSP_SD_AbortCallback>
}
 8009b88:	bf00      	nop
 8009b8a:	3708      	adds	r7, #8
 8009b8c:	46bd      	mov	sp, r7
 8009b8e:	bd80      	pop	{r7, pc}

08009b90 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8009b90:	b580      	push	{r7, lr}
 8009b92:	b082      	sub	sp, #8
 8009b94:	af00      	add	r7, sp, #0
 8009b96:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8009b98:	f000 f9a8 	bl	8009eec <BSP_SD_WriteCpltCallback>
}
 8009b9c:	bf00      	nop
 8009b9e:	3708      	adds	r7, #8
 8009ba0:	46bd      	mov	sp, r7
 8009ba2:	bd80      	pop	{r7, pc}

08009ba4 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8009ba4:	b580      	push	{r7, lr}
 8009ba6:	b082      	sub	sp, #8
 8009ba8:	af00      	add	r7, sp, #0
 8009baa:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8009bac:	f000 f9aa 	bl	8009f04 <BSP_SD_ReadCpltCallback>
}
 8009bb0:	bf00      	nop
 8009bb2:	3708      	adds	r7, #8
 8009bb4:	46bd      	mov	sp, r7
 8009bb6:	bd80      	pop	{r7, pc}

08009bb8 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 8009bb8:	b480      	push	{r7}
 8009bba:	af00      	add	r7, sp, #0

}
 8009bbc:	bf00      	nop
 8009bbe:	46bd      	mov	sp, r7
 8009bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bc4:	4770      	bx	lr

08009bc6 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8009bc6:	b580      	push	{r7, lr}
 8009bc8:	b082      	sub	sp, #8
 8009bca:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8009bcc:	2301      	movs	r3, #1
 8009bce:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8009bd0:	f000 f80c 	bl	8009bec <BSP_PlatformIsDetected>
 8009bd4:	4603      	mov	r3, r0
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d101      	bne.n	8009bde <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8009bda:	2300      	movs	r3, #0
 8009bdc:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8009bde:	79fb      	ldrb	r3, [r7, #7]
 8009be0:	b2db      	uxtb	r3, r3
}
 8009be2:	4618      	mov	r0, r3
 8009be4:	3708      	adds	r7, #8
 8009be6:	46bd      	mov	sp, r7
 8009be8:	bd80      	pop	{r7, pc}
	...

08009bec <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8009bec:	b580      	push	{r7, lr}
 8009bee:	b082      	sub	sp, #8
 8009bf0:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8009bf2:	2301      	movs	r3, #1
 8009bf4:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8009bf6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8009bfa:	4806      	ldr	r0, [pc, #24]	; (8009c14 <BSP_PlatformIsDetected+0x28>)
 8009bfc:	f7f9 fe66 	bl	80038cc <HAL_GPIO_ReadPin>
 8009c00:	4603      	mov	r3, r0
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d001      	beq.n	8009c0a <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 8009c06:	2300      	movs	r3, #0
 8009c08:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 8009c0a:	79fb      	ldrb	r3, [r7, #7]
}
 8009c0c:	4618      	mov	r0, r3
 8009c0e:	3708      	adds	r7, #8
 8009c10:	46bd      	mov	sp, r7
 8009c12:	bd80      	pop	{r7, pc}
 8009c14:	40020400 	.word	0x40020400

08009c18 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8009c18:	b580      	push	{r7, lr}
 8009c1a:	b084      	sub	sp, #16
 8009c1c:	af00      	add	r7, sp, #0
 8009c1e:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 8009c20:	f7f8 f88c 	bl	8001d3c <HAL_GetTick>
 8009c24:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 8009c26:	e006      	b.n	8009c36 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8009c28:	f7ff ff8a 	bl	8009b40 <BSP_SD_GetCardState>
 8009c2c:	4603      	mov	r3, r0
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d101      	bne.n	8009c36 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8009c32:	2300      	movs	r3, #0
 8009c34:	e009      	b.n	8009c4a <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 8009c36:	f7f8 f881 	bl	8001d3c <HAL_GetTick>
 8009c3a:	4602      	mov	r2, r0
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	1ad3      	subs	r3, r2, r3
 8009c40:	687a      	ldr	r2, [r7, #4]
 8009c42:	429a      	cmp	r2, r3
 8009c44:	d8f0      	bhi.n	8009c28 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8009c46:	f04f 33ff 	mov.w	r3, #4294967295
}
 8009c4a:	4618      	mov	r0, r3
 8009c4c:	3710      	adds	r7, #16
 8009c4e:	46bd      	mov	sp, r7
 8009c50:	bd80      	pop	{r7, pc}
	...

08009c54 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8009c54:	b580      	push	{r7, lr}
 8009c56:	b082      	sub	sp, #8
 8009c58:	af00      	add	r7, sp, #0
 8009c5a:	4603      	mov	r3, r0
 8009c5c:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8009c5e:	4b0b      	ldr	r3, [pc, #44]	; (8009c8c <SD_CheckStatus+0x38>)
 8009c60:	2201      	movs	r2, #1
 8009c62:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8009c64:	f7ff ff6c 	bl	8009b40 <BSP_SD_GetCardState>
 8009c68:	4603      	mov	r3, r0
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d107      	bne.n	8009c7e <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8009c6e:	4b07      	ldr	r3, [pc, #28]	; (8009c8c <SD_CheckStatus+0x38>)
 8009c70:	781b      	ldrb	r3, [r3, #0]
 8009c72:	b2db      	uxtb	r3, r3
 8009c74:	f023 0301 	bic.w	r3, r3, #1
 8009c78:	b2da      	uxtb	r2, r3
 8009c7a:	4b04      	ldr	r3, [pc, #16]	; (8009c8c <SD_CheckStatus+0x38>)
 8009c7c:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8009c7e:	4b03      	ldr	r3, [pc, #12]	; (8009c8c <SD_CheckStatus+0x38>)
 8009c80:	781b      	ldrb	r3, [r3, #0]
 8009c82:	b2db      	uxtb	r3, r3
}
 8009c84:	4618      	mov	r0, r3
 8009c86:	3708      	adds	r7, #8
 8009c88:	46bd      	mov	sp, r7
 8009c8a:	bd80      	pop	{r7, pc}
 8009c8c:	20000009 	.word	0x20000009

08009c90 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8009c90:	b580      	push	{r7, lr}
 8009c92:	b082      	sub	sp, #8
 8009c94:	af00      	add	r7, sp, #0
 8009c96:	4603      	mov	r3, r0
 8009c98:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8009c9a:	f7ff ff05 	bl	8009aa8 <BSP_SD_Init>
 8009c9e:	4603      	mov	r3, r0
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d107      	bne.n	8009cb4 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 8009ca4:	79fb      	ldrb	r3, [r7, #7]
 8009ca6:	4618      	mov	r0, r3
 8009ca8:	f7ff ffd4 	bl	8009c54 <SD_CheckStatus>
 8009cac:	4603      	mov	r3, r0
 8009cae:	461a      	mov	r2, r3
 8009cb0:	4b04      	ldr	r3, [pc, #16]	; (8009cc4 <SD_initialize+0x34>)
 8009cb2:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8009cb4:	4b03      	ldr	r3, [pc, #12]	; (8009cc4 <SD_initialize+0x34>)
 8009cb6:	781b      	ldrb	r3, [r3, #0]
 8009cb8:	b2db      	uxtb	r3, r3
}
 8009cba:	4618      	mov	r0, r3
 8009cbc:	3708      	adds	r7, #8
 8009cbe:	46bd      	mov	sp, r7
 8009cc0:	bd80      	pop	{r7, pc}
 8009cc2:	bf00      	nop
 8009cc4:	20000009 	.word	0x20000009

08009cc8 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8009cc8:	b580      	push	{r7, lr}
 8009cca:	b082      	sub	sp, #8
 8009ccc:	af00      	add	r7, sp, #0
 8009cce:	4603      	mov	r3, r0
 8009cd0:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8009cd2:	79fb      	ldrb	r3, [r7, #7]
 8009cd4:	4618      	mov	r0, r3
 8009cd6:	f7ff ffbd 	bl	8009c54 <SD_CheckStatus>
 8009cda:	4603      	mov	r3, r0
}
 8009cdc:	4618      	mov	r0, r3
 8009cde:	3708      	adds	r7, #8
 8009ce0:	46bd      	mov	sp, r7
 8009ce2:	bd80      	pop	{r7, pc}

08009ce4 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8009ce4:	b580      	push	{r7, lr}
 8009ce6:	b086      	sub	sp, #24
 8009ce8:	af00      	add	r7, sp, #0
 8009cea:	60b9      	str	r1, [r7, #8]
 8009cec:	607a      	str	r2, [r7, #4]
 8009cee:	603b      	str	r3, [r7, #0]
 8009cf0:	4603      	mov	r3, r0
 8009cf2:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8009cf4:	2301      	movs	r3, #1
 8009cf6:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8009cf8:	f247 5030 	movw	r0, #30000	; 0x7530
 8009cfc:	f7ff ff8c 	bl	8009c18 <SD_CheckStatusWithTimeout>
 8009d00:	4603      	mov	r3, r0
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	da01      	bge.n	8009d0a <SD_read+0x26>
  {
    return res;
 8009d06:	7dfb      	ldrb	r3, [r7, #23]
 8009d08:	e03b      	b.n	8009d82 <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 8009d0a:	683a      	ldr	r2, [r7, #0]
 8009d0c:	6879      	ldr	r1, [r7, #4]
 8009d0e:	68b8      	ldr	r0, [r7, #8]
 8009d10:	f7ff fee2 	bl	8009ad8 <BSP_SD_ReadBlocks_DMA>
 8009d14:	4603      	mov	r3, r0
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d132      	bne.n	8009d80 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 8009d1a:	4b1c      	ldr	r3, [pc, #112]	; (8009d8c <SD_read+0xa8>)
 8009d1c:	2200      	movs	r2, #0
 8009d1e:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 8009d20:	f7f8 f80c 	bl	8001d3c <HAL_GetTick>
 8009d24:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8009d26:	bf00      	nop
 8009d28:	4b18      	ldr	r3, [pc, #96]	; (8009d8c <SD_read+0xa8>)
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d108      	bne.n	8009d42 <SD_read+0x5e>
 8009d30:	f7f8 f804 	bl	8001d3c <HAL_GetTick>
 8009d34:	4602      	mov	r2, r0
 8009d36:	693b      	ldr	r3, [r7, #16]
 8009d38:	1ad3      	subs	r3, r2, r3
 8009d3a:	f247 522f 	movw	r2, #29999	; 0x752f
 8009d3e:	4293      	cmp	r3, r2
 8009d40:	d9f2      	bls.n	8009d28 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 8009d42:	4b12      	ldr	r3, [pc, #72]	; (8009d8c <SD_read+0xa8>)
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d102      	bne.n	8009d50 <SD_read+0x6c>
      {
        res = RES_ERROR;
 8009d4a:	2301      	movs	r3, #1
 8009d4c:	75fb      	strb	r3, [r7, #23]
 8009d4e:	e017      	b.n	8009d80 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 8009d50:	4b0e      	ldr	r3, [pc, #56]	; (8009d8c <SD_read+0xa8>)
 8009d52:	2200      	movs	r2, #0
 8009d54:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8009d56:	f7f7 fff1 	bl	8001d3c <HAL_GetTick>
 8009d5a:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8009d5c:	e007      	b.n	8009d6e <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8009d5e:	f7ff feef 	bl	8009b40 <BSP_SD_GetCardState>
 8009d62:	4603      	mov	r3, r0
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d102      	bne.n	8009d6e <SD_read+0x8a>
          {
            res = RES_OK;
 8009d68:	2300      	movs	r3, #0
 8009d6a:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 8009d6c:	e008      	b.n	8009d80 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8009d6e:	f7f7 ffe5 	bl	8001d3c <HAL_GetTick>
 8009d72:	4602      	mov	r2, r0
 8009d74:	693b      	ldr	r3, [r7, #16]
 8009d76:	1ad3      	subs	r3, r2, r3
 8009d78:	f247 522f 	movw	r2, #29999	; 0x752f
 8009d7c:	4293      	cmp	r3, r2
 8009d7e:	d9ee      	bls.n	8009d5e <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 8009d80:	7dfb      	ldrb	r3, [r7, #23]
}
 8009d82:	4618      	mov	r0, r3
 8009d84:	3718      	adds	r7, #24
 8009d86:	46bd      	mov	sp, r7
 8009d88:	bd80      	pop	{r7, pc}
 8009d8a:	bf00      	nop
 8009d8c:	20001500 	.word	0x20001500

08009d90 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8009d90:	b580      	push	{r7, lr}
 8009d92:	b086      	sub	sp, #24
 8009d94:	af00      	add	r7, sp, #0
 8009d96:	60b9      	str	r1, [r7, #8]
 8009d98:	607a      	str	r2, [r7, #4]
 8009d9a:	603b      	str	r3, [r7, #0]
 8009d9c:	4603      	mov	r3, r0
 8009d9e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8009da0:	2301      	movs	r3, #1
 8009da2:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 8009da4:	4b24      	ldr	r3, [pc, #144]	; (8009e38 <SD_write+0xa8>)
 8009da6:	2200      	movs	r2, #0
 8009da8:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8009daa:	f247 5030 	movw	r0, #30000	; 0x7530
 8009dae:	f7ff ff33 	bl	8009c18 <SD_CheckStatusWithTimeout>
 8009db2:	4603      	mov	r3, r0
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	da01      	bge.n	8009dbc <SD_write+0x2c>
  {
    return res;
 8009db8:	7dfb      	ldrb	r3, [r7, #23]
 8009dba:	e038      	b.n	8009e2e <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8009dbc:	683a      	ldr	r2, [r7, #0]
 8009dbe:	6879      	ldr	r1, [r7, #4]
 8009dc0:	68b8      	ldr	r0, [r7, #8]
 8009dc2:	f7ff fea3 	bl	8009b0c <BSP_SD_WriteBlocks_DMA>
 8009dc6:	4603      	mov	r3, r0
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d12f      	bne.n	8009e2c <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 8009dcc:	f7f7 ffb6 	bl	8001d3c <HAL_GetTick>
 8009dd0:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8009dd2:	bf00      	nop
 8009dd4:	4b18      	ldr	r3, [pc, #96]	; (8009e38 <SD_write+0xa8>)
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d108      	bne.n	8009dee <SD_write+0x5e>
 8009ddc:	f7f7 ffae 	bl	8001d3c <HAL_GetTick>
 8009de0:	4602      	mov	r2, r0
 8009de2:	693b      	ldr	r3, [r7, #16]
 8009de4:	1ad3      	subs	r3, r2, r3
 8009de6:	f247 522f 	movw	r2, #29999	; 0x752f
 8009dea:	4293      	cmp	r3, r2
 8009dec:	d9f2      	bls.n	8009dd4 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 8009dee:	4b12      	ldr	r3, [pc, #72]	; (8009e38 <SD_write+0xa8>)
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d102      	bne.n	8009dfc <SD_write+0x6c>
      {
        res = RES_ERROR;
 8009df6:	2301      	movs	r3, #1
 8009df8:	75fb      	strb	r3, [r7, #23]
 8009dfa:	e017      	b.n	8009e2c <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 8009dfc:	4b0e      	ldr	r3, [pc, #56]	; (8009e38 <SD_write+0xa8>)
 8009dfe:	2200      	movs	r2, #0
 8009e00:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8009e02:	f7f7 ff9b 	bl	8001d3c <HAL_GetTick>
 8009e06:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8009e08:	e007      	b.n	8009e1a <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8009e0a:	f7ff fe99 	bl	8009b40 <BSP_SD_GetCardState>
 8009e0e:	4603      	mov	r3, r0
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d102      	bne.n	8009e1a <SD_write+0x8a>
          {
            res = RES_OK;
 8009e14:	2300      	movs	r3, #0
 8009e16:	75fb      	strb	r3, [r7, #23]
            break;
 8009e18:	e008      	b.n	8009e2c <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8009e1a:	f7f7 ff8f 	bl	8001d3c <HAL_GetTick>
 8009e1e:	4602      	mov	r2, r0
 8009e20:	693b      	ldr	r3, [r7, #16]
 8009e22:	1ad3      	subs	r3, r2, r3
 8009e24:	f247 522f 	movw	r2, #29999	; 0x752f
 8009e28:	4293      	cmp	r3, r2
 8009e2a:	d9ee      	bls.n	8009e0a <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 8009e2c:	7dfb      	ldrb	r3, [r7, #23]
}
 8009e2e:	4618      	mov	r0, r3
 8009e30:	3718      	adds	r7, #24
 8009e32:	46bd      	mov	sp, r7
 8009e34:	bd80      	pop	{r7, pc}
 8009e36:	bf00      	nop
 8009e38:	200014fc 	.word	0x200014fc

08009e3c <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8009e3c:	b580      	push	{r7, lr}
 8009e3e:	b08c      	sub	sp, #48	; 0x30
 8009e40:	af00      	add	r7, sp, #0
 8009e42:	4603      	mov	r3, r0
 8009e44:	603a      	str	r2, [r7, #0]
 8009e46:	71fb      	strb	r3, [r7, #7]
 8009e48:	460b      	mov	r3, r1
 8009e4a:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8009e4c:	2301      	movs	r3, #1
 8009e4e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8009e52:	4b25      	ldr	r3, [pc, #148]	; (8009ee8 <SD_ioctl+0xac>)
 8009e54:	781b      	ldrb	r3, [r3, #0]
 8009e56:	b2db      	uxtb	r3, r3
 8009e58:	f003 0301 	and.w	r3, r3, #1
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d001      	beq.n	8009e64 <SD_ioctl+0x28>
 8009e60:	2303      	movs	r3, #3
 8009e62:	e03c      	b.n	8009ede <SD_ioctl+0xa2>

  switch (cmd)
 8009e64:	79bb      	ldrb	r3, [r7, #6]
 8009e66:	2b03      	cmp	r3, #3
 8009e68:	d834      	bhi.n	8009ed4 <SD_ioctl+0x98>
 8009e6a:	a201      	add	r2, pc, #4	; (adr r2, 8009e70 <SD_ioctl+0x34>)
 8009e6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e70:	08009e81 	.word	0x08009e81
 8009e74:	08009e89 	.word	0x08009e89
 8009e78:	08009ea1 	.word	0x08009ea1
 8009e7c:	08009ebb 	.word	0x08009ebb
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8009e80:	2300      	movs	r3, #0
 8009e82:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8009e86:	e028      	b.n	8009eda <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8009e88:	f107 030c 	add.w	r3, r7, #12
 8009e8c:	4618      	mov	r0, r3
 8009e8e:	f7ff fe67 	bl	8009b60 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8009e92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009e94:	683b      	ldr	r3, [r7, #0]
 8009e96:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8009e98:	2300      	movs	r3, #0
 8009e9a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8009e9e:	e01c      	b.n	8009eda <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8009ea0:	f107 030c 	add.w	r3, r7, #12
 8009ea4:	4618      	mov	r0, r3
 8009ea6:	f7ff fe5b 	bl	8009b60 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8009eaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009eac:	b29a      	uxth	r2, r3
 8009eae:	683b      	ldr	r3, [r7, #0]
 8009eb0:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8009eb2:	2300      	movs	r3, #0
 8009eb4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8009eb8:	e00f      	b.n	8009eda <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8009eba:	f107 030c 	add.w	r3, r7, #12
 8009ebe:	4618      	mov	r0, r3
 8009ec0:	f7ff fe4e 	bl	8009b60 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8009ec4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ec6:	0a5a      	lsrs	r2, r3, #9
 8009ec8:	683b      	ldr	r3, [r7, #0]
 8009eca:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8009ecc:	2300      	movs	r3, #0
 8009ece:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8009ed2:	e002      	b.n	8009eda <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8009ed4:	2304      	movs	r3, #4
 8009ed6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8009eda:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8009ede:	4618      	mov	r0, r3
 8009ee0:	3730      	adds	r7, #48	; 0x30
 8009ee2:	46bd      	mov	sp, r7
 8009ee4:	bd80      	pop	{r7, pc}
 8009ee6:	bf00      	nop
 8009ee8:	20000009 	.word	0x20000009

08009eec <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8009eec:	b480      	push	{r7}
 8009eee:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 8009ef0:	4b03      	ldr	r3, [pc, #12]	; (8009f00 <BSP_SD_WriteCpltCallback+0x14>)
 8009ef2:	2201      	movs	r2, #1
 8009ef4:	601a      	str	r2, [r3, #0]
}
 8009ef6:	bf00      	nop
 8009ef8:	46bd      	mov	sp, r7
 8009efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009efe:	4770      	bx	lr
 8009f00:	200014fc 	.word	0x200014fc

08009f04 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8009f04:	b480      	push	{r7}
 8009f06:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 8009f08:	4b03      	ldr	r3, [pc, #12]	; (8009f18 <BSP_SD_ReadCpltCallback+0x14>)
 8009f0a:	2201      	movs	r2, #1
 8009f0c:	601a      	str	r2, [r3, #0]
}
 8009f0e:	bf00      	nop
 8009f10:	46bd      	mov	sp, r7
 8009f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f16:	4770      	bx	lr
 8009f18:	20001500 	.word	0x20001500

08009f1c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8009f1c:	b580      	push	{r7, lr}
 8009f1e:	b084      	sub	sp, #16
 8009f20:	af00      	add	r7, sp, #0
 8009f22:	4603      	mov	r3, r0
 8009f24:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8009f26:	79fb      	ldrb	r3, [r7, #7]
 8009f28:	4a08      	ldr	r2, [pc, #32]	; (8009f4c <disk_status+0x30>)
 8009f2a:	009b      	lsls	r3, r3, #2
 8009f2c:	4413      	add	r3, r2
 8009f2e:	685b      	ldr	r3, [r3, #4]
 8009f30:	685b      	ldr	r3, [r3, #4]
 8009f32:	79fa      	ldrb	r2, [r7, #7]
 8009f34:	4905      	ldr	r1, [pc, #20]	; (8009f4c <disk_status+0x30>)
 8009f36:	440a      	add	r2, r1
 8009f38:	7a12      	ldrb	r2, [r2, #8]
 8009f3a:	4610      	mov	r0, r2
 8009f3c:	4798      	blx	r3
 8009f3e:	4603      	mov	r3, r0
 8009f40:	73fb      	strb	r3, [r7, #15]
  return stat;
 8009f42:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f44:	4618      	mov	r0, r3
 8009f46:	3710      	adds	r7, #16
 8009f48:	46bd      	mov	sp, r7
 8009f4a:	bd80      	pop	{r7, pc}
 8009f4c:	2000172c 	.word	0x2000172c

08009f50 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8009f50:	b580      	push	{r7, lr}
 8009f52:	b084      	sub	sp, #16
 8009f54:	af00      	add	r7, sp, #0
 8009f56:	4603      	mov	r3, r0
 8009f58:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8009f5a:	2300      	movs	r3, #0
 8009f5c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8009f5e:	79fb      	ldrb	r3, [r7, #7]
 8009f60:	4a0d      	ldr	r2, [pc, #52]	; (8009f98 <disk_initialize+0x48>)
 8009f62:	5cd3      	ldrb	r3, [r2, r3]
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	d111      	bne.n	8009f8c <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8009f68:	79fb      	ldrb	r3, [r7, #7]
 8009f6a:	4a0b      	ldr	r2, [pc, #44]	; (8009f98 <disk_initialize+0x48>)
 8009f6c:	2101      	movs	r1, #1
 8009f6e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8009f70:	79fb      	ldrb	r3, [r7, #7]
 8009f72:	4a09      	ldr	r2, [pc, #36]	; (8009f98 <disk_initialize+0x48>)
 8009f74:	009b      	lsls	r3, r3, #2
 8009f76:	4413      	add	r3, r2
 8009f78:	685b      	ldr	r3, [r3, #4]
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	79fa      	ldrb	r2, [r7, #7]
 8009f7e:	4906      	ldr	r1, [pc, #24]	; (8009f98 <disk_initialize+0x48>)
 8009f80:	440a      	add	r2, r1
 8009f82:	7a12      	ldrb	r2, [r2, #8]
 8009f84:	4610      	mov	r0, r2
 8009f86:	4798      	blx	r3
 8009f88:	4603      	mov	r3, r0
 8009f8a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8009f8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f8e:	4618      	mov	r0, r3
 8009f90:	3710      	adds	r7, #16
 8009f92:	46bd      	mov	sp, r7
 8009f94:	bd80      	pop	{r7, pc}
 8009f96:	bf00      	nop
 8009f98:	2000172c 	.word	0x2000172c

08009f9c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8009f9c:	b590      	push	{r4, r7, lr}
 8009f9e:	b087      	sub	sp, #28
 8009fa0:	af00      	add	r7, sp, #0
 8009fa2:	60b9      	str	r1, [r7, #8]
 8009fa4:	607a      	str	r2, [r7, #4]
 8009fa6:	603b      	str	r3, [r7, #0]
 8009fa8:	4603      	mov	r3, r0
 8009faa:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8009fac:	7bfb      	ldrb	r3, [r7, #15]
 8009fae:	4a0a      	ldr	r2, [pc, #40]	; (8009fd8 <disk_read+0x3c>)
 8009fb0:	009b      	lsls	r3, r3, #2
 8009fb2:	4413      	add	r3, r2
 8009fb4:	685b      	ldr	r3, [r3, #4]
 8009fb6:	689c      	ldr	r4, [r3, #8]
 8009fb8:	7bfb      	ldrb	r3, [r7, #15]
 8009fba:	4a07      	ldr	r2, [pc, #28]	; (8009fd8 <disk_read+0x3c>)
 8009fbc:	4413      	add	r3, r2
 8009fbe:	7a18      	ldrb	r0, [r3, #8]
 8009fc0:	683b      	ldr	r3, [r7, #0]
 8009fc2:	687a      	ldr	r2, [r7, #4]
 8009fc4:	68b9      	ldr	r1, [r7, #8]
 8009fc6:	47a0      	blx	r4
 8009fc8:	4603      	mov	r3, r0
 8009fca:	75fb      	strb	r3, [r7, #23]
  return res;
 8009fcc:	7dfb      	ldrb	r3, [r7, #23]
}
 8009fce:	4618      	mov	r0, r3
 8009fd0:	371c      	adds	r7, #28
 8009fd2:	46bd      	mov	sp, r7
 8009fd4:	bd90      	pop	{r4, r7, pc}
 8009fd6:	bf00      	nop
 8009fd8:	2000172c 	.word	0x2000172c

08009fdc <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8009fdc:	b590      	push	{r4, r7, lr}
 8009fde:	b087      	sub	sp, #28
 8009fe0:	af00      	add	r7, sp, #0
 8009fe2:	60b9      	str	r1, [r7, #8]
 8009fe4:	607a      	str	r2, [r7, #4]
 8009fe6:	603b      	str	r3, [r7, #0]
 8009fe8:	4603      	mov	r3, r0
 8009fea:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8009fec:	7bfb      	ldrb	r3, [r7, #15]
 8009fee:	4a0a      	ldr	r2, [pc, #40]	; (800a018 <disk_write+0x3c>)
 8009ff0:	009b      	lsls	r3, r3, #2
 8009ff2:	4413      	add	r3, r2
 8009ff4:	685b      	ldr	r3, [r3, #4]
 8009ff6:	68dc      	ldr	r4, [r3, #12]
 8009ff8:	7bfb      	ldrb	r3, [r7, #15]
 8009ffa:	4a07      	ldr	r2, [pc, #28]	; (800a018 <disk_write+0x3c>)
 8009ffc:	4413      	add	r3, r2
 8009ffe:	7a18      	ldrb	r0, [r3, #8]
 800a000:	683b      	ldr	r3, [r7, #0]
 800a002:	687a      	ldr	r2, [r7, #4]
 800a004:	68b9      	ldr	r1, [r7, #8]
 800a006:	47a0      	blx	r4
 800a008:	4603      	mov	r3, r0
 800a00a:	75fb      	strb	r3, [r7, #23]
  return res;
 800a00c:	7dfb      	ldrb	r3, [r7, #23]
}
 800a00e:	4618      	mov	r0, r3
 800a010:	371c      	adds	r7, #28
 800a012:	46bd      	mov	sp, r7
 800a014:	bd90      	pop	{r4, r7, pc}
 800a016:	bf00      	nop
 800a018:	2000172c 	.word	0x2000172c

0800a01c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800a01c:	b580      	push	{r7, lr}
 800a01e:	b084      	sub	sp, #16
 800a020:	af00      	add	r7, sp, #0
 800a022:	4603      	mov	r3, r0
 800a024:	603a      	str	r2, [r7, #0]
 800a026:	71fb      	strb	r3, [r7, #7]
 800a028:	460b      	mov	r3, r1
 800a02a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800a02c:	79fb      	ldrb	r3, [r7, #7]
 800a02e:	4a09      	ldr	r2, [pc, #36]	; (800a054 <disk_ioctl+0x38>)
 800a030:	009b      	lsls	r3, r3, #2
 800a032:	4413      	add	r3, r2
 800a034:	685b      	ldr	r3, [r3, #4]
 800a036:	691b      	ldr	r3, [r3, #16]
 800a038:	79fa      	ldrb	r2, [r7, #7]
 800a03a:	4906      	ldr	r1, [pc, #24]	; (800a054 <disk_ioctl+0x38>)
 800a03c:	440a      	add	r2, r1
 800a03e:	7a10      	ldrb	r0, [r2, #8]
 800a040:	79b9      	ldrb	r1, [r7, #6]
 800a042:	683a      	ldr	r2, [r7, #0]
 800a044:	4798      	blx	r3
 800a046:	4603      	mov	r3, r0
 800a048:	73fb      	strb	r3, [r7, #15]
  return res;
 800a04a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a04c:	4618      	mov	r0, r3
 800a04e:	3710      	adds	r7, #16
 800a050:	46bd      	mov	sp, r7
 800a052:	bd80      	pop	{r7, pc}
 800a054:	2000172c 	.word	0x2000172c

0800a058 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800a058:	b480      	push	{r7}
 800a05a:	b085      	sub	sp, #20
 800a05c:	af00      	add	r7, sp, #0
 800a05e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	3301      	adds	r3, #1
 800a064:	781b      	ldrb	r3, [r3, #0]
 800a066:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800a068:	89fb      	ldrh	r3, [r7, #14]
 800a06a:	021b      	lsls	r3, r3, #8
 800a06c:	b21a      	sxth	r2, r3
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	781b      	ldrb	r3, [r3, #0]
 800a072:	b21b      	sxth	r3, r3
 800a074:	4313      	orrs	r3, r2
 800a076:	b21b      	sxth	r3, r3
 800a078:	81fb      	strh	r3, [r7, #14]
	return rv;
 800a07a:	89fb      	ldrh	r3, [r7, #14]
}
 800a07c:	4618      	mov	r0, r3
 800a07e:	3714      	adds	r7, #20
 800a080:	46bd      	mov	sp, r7
 800a082:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a086:	4770      	bx	lr

0800a088 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800a088:	b480      	push	{r7}
 800a08a:	b085      	sub	sp, #20
 800a08c:	af00      	add	r7, sp, #0
 800a08e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	3303      	adds	r3, #3
 800a094:	781b      	ldrb	r3, [r3, #0]
 800a096:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	021b      	lsls	r3, r3, #8
 800a09c:	687a      	ldr	r2, [r7, #4]
 800a09e:	3202      	adds	r2, #2
 800a0a0:	7812      	ldrb	r2, [r2, #0]
 800a0a2:	4313      	orrs	r3, r2
 800a0a4:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	021b      	lsls	r3, r3, #8
 800a0aa:	687a      	ldr	r2, [r7, #4]
 800a0ac:	3201      	adds	r2, #1
 800a0ae:	7812      	ldrb	r2, [r2, #0]
 800a0b0:	4313      	orrs	r3, r2
 800a0b2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	021b      	lsls	r3, r3, #8
 800a0b8:	687a      	ldr	r2, [r7, #4]
 800a0ba:	7812      	ldrb	r2, [r2, #0]
 800a0bc:	4313      	orrs	r3, r2
 800a0be:	60fb      	str	r3, [r7, #12]
	return rv;
 800a0c0:	68fb      	ldr	r3, [r7, #12]
}
 800a0c2:	4618      	mov	r0, r3
 800a0c4:	3714      	adds	r7, #20
 800a0c6:	46bd      	mov	sp, r7
 800a0c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0cc:	4770      	bx	lr

0800a0ce <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800a0ce:	b480      	push	{r7}
 800a0d0:	b083      	sub	sp, #12
 800a0d2:	af00      	add	r7, sp, #0
 800a0d4:	6078      	str	r0, [r7, #4]
 800a0d6:	460b      	mov	r3, r1
 800a0d8:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	1c5a      	adds	r2, r3, #1
 800a0de:	607a      	str	r2, [r7, #4]
 800a0e0:	887a      	ldrh	r2, [r7, #2]
 800a0e2:	b2d2      	uxtb	r2, r2
 800a0e4:	701a      	strb	r2, [r3, #0]
 800a0e6:	887b      	ldrh	r3, [r7, #2]
 800a0e8:	0a1b      	lsrs	r3, r3, #8
 800a0ea:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	1c5a      	adds	r2, r3, #1
 800a0f0:	607a      	str	r2, [r7, #4]
 800a0f2:	887a      	ldrh	r2, [r7, #2]
 800a0f4:	b2d2      	uxtb	r2, r2
 800a0f6:	701a      	strb	r2, [r3, #0]
}
 800a0f8:	bf00      	nop
 800a0fa:	370c      	adds	r7, #12
 800a0fc:	46bd      	mov	sp, r7
 800a0fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a102:	4770      	bx	lr

0800a104 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800a104:	b480      	push	{r7}
 800a106:	b083      	sub	sp, #12
 800a108:	af00      	add	r7, sp, #0
 800a10a:	6078      	str	r0, [r7, #4]
 800a10c:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	1c5a      	adds	r2, r3, #1
 800a112:	607a      	str	r2, [r7, #4]
 800a114:	683a      	ldr	r2, [r7, #0]
 800a116:	b2d2      	uxtb	r2, r2
 800a118:	701a      	strb	r2, [r3, #0]
 800a11a:	683b      	ldr	r3, [r7, #0]
 800a11c:	0a1b      	lsrs	r3, r3, #8
 800a11e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	1c5a      	adds	r2, r3, #1
 800a124:	607a      	str	r2, [r7, #4]
 800a126:	683a      	ldr	r2, [r7, #0]
 800a128:	b2d2      	uxtb	r2, r2
 800a12a:	701a      	strb	r2, [r3, #0]
 800a12c:	683b      	ldr	r3, [r7, #0]
 800a12e:	0a1b      	lsrs	r3, r3, #8
 800a130:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	1c5a      	adds	r2, r3, #1
 800a136:	607a      	str	r2, [r7, #4]
 800a138:	683a      	ldr	r2, [r7, #0]
 800a13a:	b2d2      	uxtb	r2, r2
 800a13c:	701a      	strb	r2, [r3, #0]
 800a13e:	683b      	ldr	r3, [r7, #0]
 800a140:	0a1b      	lsrs	r3, r3, #8
 800a142:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	1c5a      	adds	r2, r3, #1
 800a148:	607a      	str	r2, [r7, #4]
 800a14a:	683a      	ldr	r2, [r7, #0]
 800a14c:	b2d2      	uxtb	r2, r2
 800a14e:	701a      	strb	r2, [r3, #0]
}
 800a150:	bf00      	nop
 800a152:	370c      	adds	r7, #12
 800a154:	46bd      	mov	sp, r7
 800a156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a15a:	4770      	bx	lr

0800a15c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800a15c:	b480      	push	{r7}
 800a15e:	b087      	sub	sp, #28
 800a160:	af00      	add	r7, sp, #0
 800a162:	60f8      	str	r0, [r7, #12]
 800a164:	60b9      	str	r1, [r7, #8]
 800a166:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800a16c:	68bb      	ldr	r3, [r7, #8]
 800a16e:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	2b00      	cmp	r3, #0
 800a174:	d00d      	beq.n	800a192 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800a176:	693a      	ldr	r2, [r7, #16]
 800a178:	1c53      	adds	r3, r2, #1
 800a17a:	613b      	str	r3, [r7, #16]
 800a17c:	697b      	ldr	r3, [r7, #20]
 800a17e:	1c59      	adds	r1, r3, #1
 800a180:	6179      	str	r1, [r7, #20]
 800a182:	7812      	ldrb	r2, [r2, #0]
 800a184:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	3b01      	subs	r3, #1
 800a18a:	607b      	str	r3, [r7, #4]
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	2b00      	cmp	r3, #0
 800a190:	d1f1      	bne.n	800a176 <mem_cpy+0x1a>
	}
}
 800a192:	bf00      	nop
 800a194:	371c      	adds	r7, #28
 800a196:	46bd      	mov	sp, r7
 800a198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a19c:	4770      	bx	lr

0800a19e <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800a19e:	b480      	push	{r7}
 800a1a0:	b087      	sub	sp, #28
 800a1a2:	af00      	add	r7, sp, #0
 800a1a4:	60f8      	str	r0, [r7, #12]
 800a1a6:	60b9      	str	r1, [r7, #8]
 800a1a8:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800a1ae:	697b      	ldr	r3, [r7, #20]
 800a1b0:	1c5a      	adds	r2, r3, #1
 800a1b2:	617a      	str	r2, [r7, #20]
 800a1b4:	68ba      	ldr	r2, [r7, #8]
 800a1b6:	b2d2      	uxtb	r2, r2
 800a1b8:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	3b01      	subs	r3, #1
 800a1be:	607b      	str	r3, [r7, #4]
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d1f3      	bne.n	800a1ae <mem_set+0x10>
}
 800a1c6:	bf00      	nop
 800a1c8:	bf00      	nop
 800a1ca:	371c      	adds	r7, #28
 800a1cc:	46bd      	mov	sp, r7
 800a1ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1d2:	4770      	bx	lr

0800a1d4 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800a1d4:	b480      	push	{r7}
 800a1d6:	b089      	sub	sp, #36	; 0x24
 800a1d8:	af00      	add	r7, sp, #0
 800a1da:	60f8      	str	r0, [r7, #12]
 800a1dc:	60b9      	str	r1, [r7, #8]
 800a1de:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	61fb      	str	r3, [r7, #28]
 800a1e4:	68bb      	ldr	r3, [r7, #8]
 800a1e6:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800a1e8:	2300      	movs	r3, #0
 800a1ea:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800a1ec:	69fb      	ldr	r3, [r7, #28]
 800a1ee:	1c5a      	adds	r2, r3, #1
 800a1f0:	61fa      	str	r2, [r7, #28]
 800a1f2:	781b      	ldrb	r3, [r3, #0]
 800a1f4:	4619      	mov	r1, r3
 800a1f6:	69bb      	ldr	r3, [r7, #24]
 800a1f8:	1c5a      	adds	r2, r3, #1
 800a1fa:	61ba      	str	r2, [r7, #24]
 800a1fc:	781b      	ldrb	r3, [r3, #0]
 800a1fe:	1acb      	subs	r3, r1, r3
 800a200:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	3b01      	subs	r3, #1
 800a206:	607b      	str	r3, [r7, #4]
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d002      	beq.n	800a214 <mem_cmp+0x40>
 800a20e:	697b      	ldr	r3, [r7, #20]
 800a210:	2b00      	cmp	r3, #0
 800a212:	d0eb      	beq.n	800a1ec <mem_cmp+0x18>

	return r;
 800a214:	697b      	ldr	r3, [r7, #20]
}
 800a216:	4618      	mov	r0, r3
 800a218:	3724      	adds	r7, #36	; 0x24
 800a21a:	46bd      	mov	sp, r7
 800a21c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a220:	4770      	bx	lr

0800a222 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800a222:	b480      	push	{r7}
 800a224:	b083      	sub	sp, #12
 800a226:	af00      	add	r7, sp, #0
 800a228:	6078      	str	r0, [r7, #4]
 800a22a:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800a22c:	e002      	b.n	800a234 <chk_chr+0x12>
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	3301      	adds	r3, #1
 800a232:	607b      	str	r3, [r7, #4]
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	781b      	ldrb	r3, [r3, #0]
 800a238:	2b00      	cmp	r3, #0
 800a23a:	d005      	beq.n	800a248 <chk_chr+0x26>
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	781b      	ldrb	r3, [r3, #0]
 800a240:	461a      	mov	r2, r3
 800a242:	683b      	ldr	r3, [r7, #0]
 800a244:	4293      	cmp	r3, r2
 800a246:	d1f2      	bne.n	800a22e <chk_chr+0xc>
	return *str;
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	781b      	ldrb	r3, [r3, #0]
}
 800a24c:	4618      	mov	r0, r3
 800a24e:	370c      	adds	r7, #12
 800a250:	46bd      	mov	sp, r7
 800a252:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a256:	4770      	bx	lr

0800a258 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800a258:	b480      	push	{r7}
 800a25a:	b085      	sub	sp, #20
 800a25c:	af00      	add	r7, sp, #0
 800a25e:	6078      	str	r0, [r7, #4]
 800a260:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800a262:	2300      	movs	r3, #0
 800a264:	60bb      	str	r3, [r7, #8]
 800a266:	68bb      	ldr	r3, [r7, #8]
 800a268:	60fb      	str	r3, [r7, #12]
 800a26a:	e029      	b.n	800a2c0 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800a26c:	4a27      	ldr	r2, [pc, #156]	; (800a30c <chk_lock+0xb4>)
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	011b      	lsls	r3, r3, #4
 800a272:	4413      	add	r3, r2
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	2b00      	cmp	r3, #0
 800a278:	d01d      	beq.n	800a2b6 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800a27a:	4a24      	ldr	r2, [pc, #144]	; (800a30c <chk_lock+0xb4>)
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	011b      	lsls	r3, r3, #4
 800a280:	4413      	add	r3, r2
 800a282:	681a      	ldr	r2, [r3, #0]
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	429a      	cmp	r2, r3
 800a28a:	d116      	bne.n	800a2ba <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800a28c:	4a1f      	ldr	r2, [pc, #124]	; (800a30c <chk_lock+0xb4>)
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	011b      	lsls	r3, r3, #4
 800a292:	4413      	add	r3, r2
 800a294:	3304      	adds	r3, #4
 800a296:	681a      	ldr	r2, [r3, #0]
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800a29c:	429a      	cmp	r2, r3
 800a29e:	d10c      	bne.n	800a2ba <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800a2a0:	4a1a      	ldr	r2, [pc, #104]	; (800a30c <chk_lock+0xb4>)
 800a2a2:	68fb      	ldr	r3, [r7, #12]
 800a2a4:	011b      	lsls	r3, r3, #4
 800a2a6:	4413      	add	r3, r2
 800a2a8:	3308      	adds	r3, #8
 800a2aa:	681a      	ldr	r2, [r3, #0]
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800a2b0:	429a      	cmp	r2, r3
 800a2b2:	d102      	bne.n	800a2ba <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800a2b4:	e007      	b.n	800a2c6 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800a2b6:	2301      	movs	r3, #1
 800a2b8:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800a2ba:	68fb      	ldr	r3, [r7, #12]
 800a2bc:	3301      	adds	r3, #1
 800a2be:	60fb      	str	r3, [r7, #12]
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	2b01      	cmp	r3, #1
 800a2c4:	d9d2      	bls.n	800a26c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800a2c6:	68fb      	ldr	r3, [r7, #12]
 800a2c8:	2b02      	cmp	r3, #2
 800a2ca:	d109      	bne.n	800a2e0 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800a2cc:	68bb      	ldr	r3, [r7, #8]
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d102      	bne.n	800a2d8 <chk_lock+0x80>
 800a2d2:	683b      	ldr	r3, [r7, #0]
 800a2d4:	2b02      	cmp	r3, #2
 800a2d6:	d101      	bne.n	800a2dc <chk_lock+0x84>
 800a2d8:	2300      	movs	r3, #0
 800a2da:	e010      	b.n	800a2fe <chk_lock+0xa6>
 800a2dc:	2312      	movs	r3, #18
 800a2de:	e00e      	b.n	800a2fe <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800a2e0:	683b      	ldr	r3, [r7, #0]
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	d108      	bne.n	800a2f8 <chk_lock+0xa0>
 800a2e6:	4a09      	ldr	r2, [pc, #36]	; (800a30c <chk_lock+0xb4>)
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	011b      	lsls	r3, r3, #4
 800a2ec:	4413      	add	r3, r2
 800a2ee:	330c      	adds	r3, #12
 800a2f0:	881b      	ldrh	r3, [r3, #0]
 800a2f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a2f6:	d101      	bne.n	800a2fc <chk_lock+0xa4>
 800a2f8:	2310      	movs	r3, #16
 800a2fa:	e000      	b.n	800a2fe <chk_lock+0xa6>
 800a2fc:	2300      	movs	r3, #0
}
 800a2fe:	4618      	mov	r0, r3
 800a300:	3714      	adds	r7, #20
 800a302:	46bd      	mov	sp, r7
 800a304:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a308:	4770      	bx	lr
 800a30a:	bf00      	nop
 800a30c:	2000150c 	.word	0x2000150c

0800a310 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800a310:	b480      	push	{r7}
 800a312:	b083      	sub	sp, #12
 800a314:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800a316:	2300      	movs	r3, #0
 800a318:	607b      	str	r3, [r7, #4]
 800a31a:	e002      	b.n	800a322 <enq_lock+0x12>
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	3301      	adds	r3, #1
 800a320:	607b      	str	r3, [r7, #4]
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	2b01      	cmp	r3, #1
 800a326:	d806      	bhi.n	800a336 <enq_lock+0x26>
 800a328:	4a09      	ldr	r2, [pc, #36]	; (800a350 <enq_lock+0x40>)
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	011b      	lsls	r3, r3, #4
 800a32e:	4413      	add	r3, r2
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	2b00      	cmp	r3, #0
 800a334:	d1f2      	bne.n	800a31c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	2b02      	cmp	r3, #2
 800a33a:	bf14      	ite	ne
 800a33c:	2301      	movne	r3, #1
 800a33e:	2300      	moveq	r3, #0
 800a340:	b2db      	uxtb	r3, r3
}
 800a342:	4618      	mov	r0, r3
 800a344:	370c      	adds	r7, #12
 800a346:	46bd      	mov	sp, r7
 800a348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a34c:	4770      	bx	lr
 800a34e:	bf00      	nop
 800a350:	2000150c 	.word	0x2000150c

0800a354 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800a354:	b480      	push	{r7}
 800a356:	b085      	sub	sp, #20
 800a358:	af00      	add	r7, sp, #0
 800a35a:	6078      	str	r0, [r7, #4]
 800a35c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800a35e:	2300      	movs	r3, #0
 800a360:	60fb      	str	r3, [r7, #12]
 800a362:	e01f      	b.n	800a3a4 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800a364:	4a41      	ldr	r2, [pc, #260]	; (800a46c <inc_lock+0x118>)
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	011b      	lsls	r3, r3, #4
 800a36a:	4413      	add	r3, r2
 800a36c:	681a      	ldr	r2, [r3, #0]
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	429a      	cmp	r2, r3
 800a374:	d113      	bne.n	800a39e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800a376:	4a3d      	ldr	r2, [pc, #244]	; (800a46c <inc_lock+0x118>)
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	011b      	lsls	r3, r3, #4
 800a37c:	4413      	add	r3, r2
 800a37e:	3304      	adds	r3, #4
 800a380:	681a      	ldr	r2, [r3, #0]
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800a386:	429a      	cmp	r2, r3
 800a388:	d109      	bne.n	800a39e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800a38a:	4a38      	ldr	r2, [pc, #224]	; (800a46c <inc_lock+0x118>)
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	011b      	lsls	r3, r3, #4
 800a390:	4413      	add	r3, r2
 800a392:	3308      	adds	r3, #8
 800a394:	681a      	ldr	r2, [r3, #0]
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800a39a:	429a      	cmp	r2, r3
 800a39c:	d006      	beq.n	800a3ac <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	3301      	adds	r3, #1
 800a3a2:	60fb      	str	r3, [r7, #12]
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	2b01      	cmp	r3, #1
 800a3a8:	d9dc      	bls.n	800a364 <inc_lock+0x10>
 800a3aa:	e000      	b.n	800a3ae <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800a3ac:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	2b02      	cmp	r3, #2
 800a3b2:	d132      	bne.n	800a41a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800a3b4:	2300      	movs	r3, #0
 800a3b6:	60fb      	str	r3, [r7, #12]
 800a3b8:	e002      	b.n	800a3c0 <inc_lock+0x6c>
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	3301      	adds	r3, #1
 800a3be:	60fb      	str	r3, [r7, #12]
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	2b01      	cmp	r3, #1
 800a3c4:	d806      	bhi.n	800a3d4 <inc_lock+0x80>
 800a3c6:	4a29      	ldr	r2, [pc, #164]	; (800a46c <inc_lock+0x118>)
 800a3c8:	68fb      	ldr	r3, [r7, #12]
 800a3ca:	011b      	lsls	r3, r3, #4
 800a3cc:	4413      	add	r3, r2
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	d1f2      	bne.n	800a3ba <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	2b02      	cmp	r3, #2
 800a3d8:	d101      	bne.n	800a3de <inc_lock+0x8a>
 800a3da:	2300      	movs	r3, #0
 800a3dc:	e040      	b.n	800a460 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	681a      	ldr	r2, [r3, #0]
 800a3e2:	4922      	ldr	r1, [pc, #136]	; (800a46c <inc_lock+0x118>)
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	011b      	lsls	r3, r3, #4
 800a3e8:	440b      	add	r3, r1
 800a3ea:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	689a      	ldr	r2, [r3, #8]
 800a3f0:	491e      	ldr	r1, [pc, #120]	; (800a46c <inc_lock+0x118>)
 800a3f2:	68fb      	ldr	r3, [r7, #12]
 800a3f4:	011b      	lsls	r3, r3, #4
 800a3f6:	440b      	add	r3, r1
 800a3f8:	3304      	adds	r3, #4
 800a3fa:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	695a      	ldr	r2, [r3, #20]
 800a400:	491a      	ldr	r1, [pc, #104]	; (800a46c <inc_lock+0x118>)
 800a402:	68fb      	ldr	r3, [r7, #12]
 800a404:	011b      	lsls	r3, r3, #4
 800a406:	440b      	add	r3, r1
 800a408:	3308      	adds	r3, #8
 800a40a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800a40c:	4a17      	ldr	r2, [pc, #92]	; (800a46c <inc_lock+0x118>)
 800a40e:	68fb      	ldr	r3, [r7, #12]
 800a410:	011b      	lsls	r3, r3, #4
 800a412:	4413      	add	r3, r2
 800a414:	330c      	adds	r3, #12
 800a416:	2200      	movs	r2, #0
 800a418:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800a41a:	683b      	ldr	r3, [r7, #0]
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d009      	beq.n	800a434 <inc_lock+0xe0>
 800a420:	4a12      	ldr	r2, [pc, #72]	; (800a46c <inc_lock+0x118>)
 800a422:	68fb      	ldr	r3, [r7, #12]
 800a424:	011b      	lsls	r3, r3, #4
 800a426:	4413      	add	r3, r2
 800a428:	330c      	adds	r3, #12
 800a42a:	881b      	ldrh	r3, [r3, #0]
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	d001      	beq.n	800a434 <inc_lock+0xe0>
 800a430:	2300      	movs	r3, #0
 800a432:	e015      	b.n	800a460 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800a434:	683b      	ldr	r3, [r7, #0]
 800a436:	2b00      	cmp	r3, #0
 800a438:	d108      	bne.n	800a44c <inc_lock+0xf8>
 800a43a:	4a0c      	ldr	r2, [pc, #48]	; (800a46c <inc_lock+0x118>)
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	011b      	lsls	r3, r3, #4
 800a440:	4413      	add	r3, r2
 800a442:	330c      	adds	r3, #12
 800a444:	881b      	ldrh	r3, [r3, #0]
 800a446:	3301      	adds	r3, #1
 800a448:	b29a      	uxth	r2, r3
 800a44a:	e001      	b.n	800a450 <inc_lock+0xfc>
 800a44c:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a450:	4906      	ldr	r1, [pc, #24]	; (800a46c <inc_lock+0x118>)
 800a452:	68fb      	ldr	r3, [r7, #12]
 800a454:	011b      	lsls	r3, r3, #4
 800a456:	440b      	add	r3, r1
 800a458:	330c      	adds	r3, #12
 800a45a:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	3301      	adds	r3, #1
}
 800a460:	4618      	mov	r0, r3
 800a462:	3714      	adds	r7, #20
 800a464:	46bd      	mov	sp, r7
 800a466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a46a:	4770      	bx	lr
 800a46c:	2000150c 	.word	0x2000150c

0800a470 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800a470:	b480      	push	{r7}
 800a472:	b085      	sub	sp, #20
 800a474:	af00      	add	r7, sp, #0
 800a476:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800a478:	2300      	movs	r3, #0
 800a47a:	60fb      	str	r3, [r7, #12]
 800a47c:	e010      	b.n	800a4a0 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800a47e:	4a0d      	ldr	r2, [pc, #52]	; (800a4b4 <clear_lock+0x44>)
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	011b      	lsls	r3, r3, #4
 800a484:	4413      	add	r3, r2
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	687a      	ldr	r2, [r7, #4]
 800a48a:	429a      	cmp	r2, r3
 800a48c:	d105      	bne.n	800a49a <clear_lock+0x2a>
 800a48e:	4a09      	ldr	r2, [pc, #36]	; (800a4b4 <clear_lock+0x44>)
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	011b      	lsls	r3, r3, #4
 800a494:	4413      	add	r3, r2
 800a496:	2200      	movs	r2, #0
 800a498:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	3301      	adds	r3, #1
 800a49e:	60fb      	str	r3, [r7, #12]
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	2b01      	cmp	r3, #1
 800a4a4:	d9eb      	bls.n	800a47e <clear_lock+0xe>
	}
}
 800a4a6:	bf00      	nop
 800a4a8:	bf00      	nop
 800a4aa:	3714      	adds	r7, #20
 800a4ac:	46bd      	mov	sp, r7
 800a4ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4b2:	4770      	bx	lr
 800a4b4:	2000150c 	.word	0x2000150c

0800a4b8 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800a4b8:	b580      	push	{r7, lr}
 800a4ba:	b086      	sub	sp, #24
 800a4bc:	af00      	add	r7, sp, #0
 800a4be:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800a4c0:	2300      	movs	r3, #0
 800a4c2:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	78db      	ldrb	r3, [r3, #3]
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	d034      	beq.n	800a536 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a4d0:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	7858      	ldrb	r0, [r3, #1]
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800a4dc:	2301      	movs	r3, #1
 800a4de:	697a      	ldr	r2, [r7, #20]
 800a4e0:	f7ff fd7c 	bl	8009fdc <disk_write>
 800a4e4:	4603      	mov	r3, r0
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	d002      	beq.n	800a4f0 <sync_window+0x38>
			res = FR_DISK_ERR;
 800a4ea:	2301      	movs	r3, #1
 800a4ec:	73fb      	strb	r3, [r7, #15]
 800a4ee:	e022      	b.n	800a536 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	2200      	movs	r2, #0
 800a4f4:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4fa:	697a      	ldr	r2, [r7, #20]
 800a4fc:	1ad2      	subs	r2, r2, r3
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	6a1b      	ldr	r3, [r3, #32]
 800a502:	429a      	cmp	r2, r3
 800a504:	d217      	bcs.n	800a536 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	789b      	ldrb	r3, [r3, #2]
 800a50a:	613b      	str	r3, [r7, #16]
 800a50c:	e010      	b.n	800a530 <sync_window+0x78>
					wsect += fs->fsize;
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	6a1b      	ldr	r3, [r3, #32]
 800a512:	697a      	ldr	r2, [r7, #20]
 800a514:	4413      	add	r3, r2
 800a516:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	7858      	ldrb	r0, [r3, #1]
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800a522:	2301      	movs	r3, #1
 800a524:	697a      	ldr	r2, [r7, #20]
 800a526:	f7ff fd59 	bl	8009fdc <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800a52a:	693b      	ldr	r3, [r7, #16]
 800a52c:	3b01      	subs	r3, #1
 800a52e:	613b      	str	r3, [r7, #16]
 800a530:	693b      	ldr	r3, [r7, #16]
 800a532:	2b01      	cmp	r3, #1
 800a534:	d8eb      	bhi.n	800a50e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800a536:	7bfb      	ldrb	r3, [r7, #15]
}
 800a538:	4618      	mov	r0, r3
 800a53a:	3718      	adds	r7, #24
 800a53c:	46bd      	mov	sp, r7
 800a53e:	bd80      	pop	{r7, pc}

0800a540 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800a540:	b580      	push	{r7, lr}
 800a542:	b084      	sub	sp, #16
 800a544:	af00      	add	r7, sp, #0
 800a546:	6078      	str	r0, [r7, #4]
 800a548:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800a54a:	2300      	movs	r3, #0
 800a54c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a552:	683a      	ldr	r2, [r7, #0]
 800a554:	429a      	cmp	r2, r3
 800a556:	d01b      	beq.n	800a590 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800a558:	6878      	ldr	r0, [r7, #4]
 800a55a:	f7ff ffad 	bl	800a4b8 <sync_window>
 800a55e:	4603      	mov	r3, r0
 800a560:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800a562:	7bfb      	ldrb	r3, [r7, #15]
 800a564:	2b00      	cmp	r3, #0
 800a566:	d113      	bne.n	800a590 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	7858      	ldrb	r0, [r3, #1]
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800a572:	2301      	movs	r3, #1
 800a574:	683a      	ldr	r2, [r7, #0]
 800a576:	f7ff fd11 	bl	8009f9c <disk_read>
 800a57a:	4603      	mov	r3, r0
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	d004      	beq.n	800a58a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800a580:	f04f 33ff 	mov.w	r3, #4294967295
 800a584:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800a586:	2301      	movs	r3, #1
 800a588:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	683a      	ldr	r2, [r7, #0]
 800a58e:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 800a590:	7bfb      	ldrb	r3, [r7, #15]
}
 800a592:	4618      	mov	r0, r3
 800a594:	3710      	adds	r7, #16
 800a596:	46bd      	mov	sp, r7
 800a598:	bd80      	pop	{r7, pc}
	...

0800a59c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800a59c:	b580      	push	{r7, lr}
 800a59e:	b084      	sub	sp, #16
 800a5a0:	af00      	add	r7, sp, #0
 800a5a2:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800a5a4:	6878      	ldr	r0, [r7, #4]
 800a5a6:	f7ff ff87 	bl	800a4b8 <sync_window>
 800a5aa:	4603      	mov	r3, r0
 800a5ac:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800a5ae:	7bfb      	ldrb	r3, [r7, #15]
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	d159      	bne.n	800a668 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	781b      	ldrb	r3, [r3, #0]
 800a5b8:	2b03      	cmp	r3, #3
 800a5ba:	d149      	bne.n	800a650 <sync_fs+0xb4>
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	791b      	ldrb	r3, [r3, #4]
 800a5c0:	2b01      	cmp	r3, #1
 800a5c2:	d145      	bne.n	800a650 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	899b      	ldrh	r3, [r3, #12]
 800a5ce:	461a      	mov	r2, r3
 800a5d0:	2100      	movs	r1, #0
 800a5d2:	f7ff fde4 	bl	800a19e <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	3338      	adds	r3, #56	; 0x38
 800a5da:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800a5de:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800a5e2:	4618      	mov	r0, r3
 800a5e4:	f7ff fd73 	bl	800a0ce <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	3338      	adds	r3, #56	; 0x38
 800a5ec:	4921      	ldr	r1, [pc, #132]	; (800a674 <sync_fs+0xd8>)
 800a5ee:	4618      	mov	r0, r3
 800a5f0:	f7ff fd88 	bl	800a104 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	3338      	adds	r3, #56	; 0x38
 800a5f8:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800a5fc:	491e      	ldr	r1, [pc, #120]	; (800a678 <sync_fs+0xdc>)
 800a5fe:	4618      	mov	r0, r3
 800a600:	f7ff fd80 	bl	800a104 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	3338      	adds	r3, #56	; 0x38
 800a608:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	699b      	ldr	r3, [r3, #24]
 800a610:	4619      	mov	r1, r3
 800a612:	4610      	mov	r0, r2
 800a614:	f7ff fd76 	bl	800a104 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	3338      	adds	r3, #56	; 0x38
 800a61c:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	695b      	ldr	r3, [r3, #20]
 800a624:	4619      	mov	r1, r3
 800a626:	4610      	mov	r0, r2
 800a628:	f7ff fd6c 	bl	800a104 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a630:	1c5a      	adds	r2, r3, #1
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	7858      	ldrb	r0, [r3, #1]
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a644:	2301      	movs	r3, #1
 800a646:	f7ff fcc9 	bl	8009fdc <disk_write>
			fs->fsi_flag = 0;
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	2200      	movs	r2, #0
 800a64e:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	785b      	ldrb	r3, [r3, #1]
 800a654:	2200      	movs	r2, #0
 800a656:	2100      	movs	r1, #0
 800a658:	4618      	mov	r0, r3
 800a65a:	f7ff fcdf 	bl	800a01c <disk_ioctl>
 800a65e:	4603      	mov	r3, r0
 800a660:	2b00      	cmp	r3, #0
 800a662:	d001      	beq.n	800a668 <sync_fs+0xcc>
 800a664:	2301      	movs	r3, #1
 800a666:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800a668:	7bfb      	ldrb	r3, [r7, #15]
}
 800a66a:	4618      	mov	r0, r3
 800a66c:	3710      	adds	r7, #16
 800a66e:	46bd      	mov	sp, r7
 800a670:	bd80      	pop	{r7, pc}
 800a672:	bf00      	nop
 800a674:	41615252 	.word	0x41615252
 800a678:	61417272 	.word	0x61417272

0800a67c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800a67c:	b480      	push	{r7}
 800a67e:	b083      	sub	sp, #12
 800a680:	af00      	add	r7, sp, #0
 800a682:	6078      	str	r0, [r7, #4]
 800a684:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800a686:	683b      	ldr	r3, [r7, #0]
 800a688:	3b02      	subs	r3, #2
 800a68a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	69db      	ldr	r3, [r3, #28]
 800a690:	3b02      	subs	r3, #2
 800a692:	683a      	ldr	r2, [r7, #0]
 800a694:	429a      	cmp	r2, r3
 800a696:	d301      	bcc.n	800a69c <clust2sect+0x20>
 800a698:	2300      	movs	r3, #0
 800a69a:	e008      	b.n	800a6ae <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	895b      	ldrh	r3, [r3, #10]
 800a6a0:	461a      	mov	r2, r3
 800a6a2:	683b      	ldr	r3, [r7, #0]
 800a6a4:	fb03 f202 	mul.w	r2, r3, r2
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a6ac:	4413      	add	r3, r2
}
 800a6ae:	4618      	mov	r0, r3
 800a6b0:	370c      	adds	r7, #12
 800a6b2:	46bd      	mov	sp, r7
 800a6b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6b8:	4770      	bx	lr

0800a6ba <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800a6ba:	b580      	push	{r7, lr}
 800a6bc:	b086      	sub	sp, #24
 800a6be:	af00      	add	r7, sp, #0
 800a6c0:	6078      	str	r0, [r7, #4]
 800a6c2:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800a6ca:	683b      	ldr	r3, [r7, #0]
 800a6cc:	2b01      	cmp	r3, #1
 800a6ce:	d904      	bls.n	800a6da <get_fat+0x20>
 800a6d0:	693b      	ldr	r3, [r7, #16]
 800a6d2:	69db      	ldr	r3, [r3, #28]
 800a6d4:	683a      	ldr	r2, [r7, #0]
 800a6d6:	429a      	cmp	r2, r3
 800a6d8:	d302      	bcc.n	800a6e0 <get_fat+0x26>
		val = 1;	/* Internal error */
 800a6da:	2301      	movs	r3, #1
 800a6dc:	617b      	str	r3, [r7, #20]
 800a6de:	e0bb      	b.n	800a858 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800a6e0:	f04f 33ff 	mov.w	r3, #4294967295
 800a6e4:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800a6e6:	693b      	ldr	r3, [r7, #16]
 800a6e8:	781b      	ldrb	r3, [r3, #0]
 800a6ea:	2b03      	cmp	r3, #3
 800a6ec:	f000 8083 	beq.w	800a7f6 <get_fat+0x13c>
 800a6f0:	2b03      	cmp	r3, #3
 800a6f2:	f300 80a7 	bgt.w	800a844 <get_fat+0x18a>
 800a6f6:	2b01      	cmp	r3, #1
 800a6f8:	d002      	beq.n	800a700 <get_fat+0x46>
 800a6fa:	2b02      	cmp	r3, #2
 800a6fc:	d056      	beq.n	800a7ac <get_fat+0xf2>
 800a6fe:	e0a1      	b.n	800a844 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800a700:	683b      	ldr	r3, [r7, #0]
 800a702:	60fb      	str	r3, [r7, #12]
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	085b      	lsrs	r3, r3, #1
 800a708:	68fa      	ldr	r2, [r7, #12]
 800a70a:	4413      	add	r3, r2
 800a70c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a70e:	693b      	ldr	r3, [r7, #16]
 800a710:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a712:	693b      	ldr	r3, [r7, #16]
 800a714:	899b      	ldrh	r3, [r3, #12]
 800a716:	4619      	mov	r1, r3
 800a718:	68fb      	ldr	r3, [r7, #12]
 800a71a:	fbb3 f3f1 	udiv	r3, r3, r1
 800a71e:	4413      	add	r3, r2
 800a720:	4619      	mov	r1, r3
 800a722:	6938      	ldr	r0, [r7, #16]
 800a724:	f7ff ff0c 	bl	800a540 <move_window>
 800a728:	4603      	mov	r3, r0
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	f040 808d 	bne.w	800a84a <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 800a730:	68fb      	ldr	r3, [r7, #12]
 800a732:	1c5a      	adds	r2, r3, #1
 800a734:	60fa      	str	r2, [r7, #12]
 800a736:	693a      	ldr	r2, [r7, #16]
 800a738:	8992      	ldrh	r2, [r2, #12]
 800a73a:	fbb3 f1f2 	udiv	r1, r3, r2
 800a73e:	fb01 f202 	mul.w	r2, r1, r2
 800a742:	1a9b      	subs	r3, r3, r2
 800a744:	693a      	ldr	r2, [r7, #16]
 800a746:	4413      	add	r3, r2
 800a748:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800a74c:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a74e:	693b      	ldr	r3, [r7, #16]
 800a750:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a752:	693b      	ldr	r3, [r7, #16]
 800a754:	899b      	ldrh	r3, [r3, #12]
 800a756:	4619      	mov	r1, r3
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	fbb3 f3f1 	udiv	r3, r3, r1
 800a75e:	4413      	add	r3, r2
 800a760:	4619      	mov	r1, r3
 800a762:	6938      	ldr	r0, [r7, #16]
 800a764:	f7ff feec 	bl	800a540 <move_window>
 800a768:	4603      	mov	r3, r0
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	d16f      	bne.n	800a84e <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 800a76e:	693b      	ldr	r3, [r7, #16]
 800a770:	899b      	ldrh	r3, [r3, #12]
 800a772:	461a      	mov	r2, r3
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	fbb3 f1f2 	udiv	r1, r3, r2
 800a77a:	fb01 f202 	mul.w	r2, r1, r2
 800a77e:	1a9b      	subs	r3, r3, r2
 800a780:	693a      	ldr	r2, [r7, #16]
 800a782:	4413      	add	r3, r2
 800a784:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800a788:	021b      	lsls	r3, r3, #8
 800a78a:	461a      	mov	r2, r3
 800a78c:	68bb      	ldr	r3, [r7, #8]
 800a78e:	4313      	orrs	r3, r2
 800a790:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800a792:	683b      	ldr	r3, [r7, #0]
 800a794:	f003 0301 	and.w	r3, r3, #1
 800a798:	2b00      	cmp	r3, #0
 800a79a:	d002      	beq.n	800a7a2 <get_fat+0xe8>
 800a79c:	68bb      	ldr	r3, [r7, #8]
 800a79e:	091b      	lsrs	r3, r3, #4
 800a7a0:	e002      	b.n	800a7a8 <get_fat+0xee>
 800a7a2:	68bb      	ldr	r3, [r7, #8]
 800a7a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a7a8:	617b      	str	r3, [r7, #20]
			break;
 800a7aa:	e055      	b.n	800a858 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800a7ac:	693b      	ldr	r3, [r7, #16]
 800a7ae:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a7b0:	693b      	ldr	r3, [r7, #16]
 800a7b2:	899b      	ldrh	r3, [r3, #12]
 800a7b4:	085b      	lsrs	r3, r3, #1
 800a7b6:	b29b      	uxth	r3, r3
 800a7b8:	4619      	mov	r1, r3
 800a7ba:	683b      	ldr	r3, [r7, #0]
 800a7bc:	fbb3 f3f1 	udiv	r3, r3, r1
 800a7c0:	4413      	add	r3, r2
 800a7c2:	4619      	mov	r1, r3
 800a7c4:	6938      	ldr	r0, [r7, #16]
 800a7c6:	f7ff febb 	bl	800a540 <move_window>
 800a7ca:	4603      	mov	r3, r0
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	d140      	bne.n	800a852 <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800a7d0:	693b      	ldr	r3, [r7, #16]
 800a7d2:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800a7d6:	683b      	ldr	r3, [r7, #0]
 800a7d8:	005b      	lsls	r3, r3, #1
 800a7da:	693a      	ldr	r2, [r7, #16]
 800a7dc:	8992      	ldrh	r2, [r2, #12]
 800a7de:	fbb3 f0f2 	udiv	r0, r3, r2
 800a7e2:	fb00 f202 	mul.w	r2, r0, r2
 800a7e6:	1a9b      	subs	r3, r3, r2
 800a7e8:	440b      	add	r3, r1
 800a7ea:	4618      	mov	r0, r3
 800a7ec:	f7ff fc34 	bl	800a058 <ld_word>
 800a7f0:	4603      	mov	r3, r0
 800a7f2:	617b      	str	r3, [r7, #20]
			break;
 800a7f4:	e030      	b.n	800a858 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800a7f6:	693b      	ldr	r3, [r7, #16]
 800a7f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a7fa:	693b      	ldr	r3, [r7, #16]
 800a7fc:	899b      	ldrh	r3, [r3, #12]
 800a7fe:	089b      	lsrs	r3, r3, #2
 800a800:	b29b      	uxth	r3, r3
 800a802:	4619      	mov	r1, r3
 800a804:	683b      	ldr	r3, [r7, #0]
 800a806:	fbb3 f3f1 	udiv	r3, r3, r1
 800a80a:	4413      	add	r3, r2
 800a80c:	4619      	mov	r1, r3
 800a80e:	6938      	ldr	r0, [r7, #16]
 800a810:	f7ff fe96 	bl	800a540 <move_window>
 800a814:	4603      	mov	r3, r0
 800a816:	2b00      	cmp	r3, #0
 800a818:	d11d      	bne.n	800a856 <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800a81a:	693b      	ldr	r3, [r7, #16]
 800a81c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800a820:	683b      	ldr	r3, [r7, #0]
 800a822:	009b      	lsls	r3, r3, #2
 800a824:	693a      	ldr	r2, [r7, #16]
 800a826:	8992      	ldrh	r2, [r2, #12]
 800a828:	fbb3 f0f2 	udiv	r0, r3, r2
 800a82c:	fb00 f202 	mul.w	r2, r0, r2
 800a830:	1a9b      	subs	r3, r3, r2
 800a832:	440b      	add	r3, r1
 800a834:	4618      	mov	r0, r3
 800a836:	f7ff fc27 	bl	800a088 <ld_dword>
 800a83a:	4603      	mov	r3, r0
 800a83c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800a840:	617b      	str	r3, [r7, #20]
			break;
 800a842:	e009      	b.n	800a858 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800a844:	2301      	movs	r3, #1
 800a846:	617b      	str	r3, [r7, #20]
 800a848:	e006      	b.n	800a858 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a84a:	bf00      	nop
 800a84c:	e004      	b.n	800a858 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a84e:	bf00      	nop
 800a850:	e002      	b.n	800a858 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800a852:	bf00      	nop
 800a854:	e000      	b.n	800a858 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800a856:	bf00      	nop
		}
	}

	return val;
 800a858:	697b      	ldr	r3, [r7, #20]
}
 800a85a:	4618      	mov	r0, r3
 800a85c:	3718      	adds	r7, #24
 800a85e:	46bd      	mov	sp, r7
 800a860:	bd80      	pop	{r7, pc}

0800a862 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800a862:	b590      	push	{r4, r7, lr}
 800a864:	b089      	sub	sp, #36	; 0x24
 800a866:	af00      	add	r7, sp, #0
 800a868:	60f8      	str	r0, [r7, #12]
 800a86a:	60b9      	str	r1, [r7, #8]
 800a86c:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800a86e:	2302      	movs	r3, #2
 800a870:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800a872:	68bb      	ldr	r3, [r7, #8]
 800a874:	2b01      	cmp	r3, #1
 800a876:	f240 8102 	bls.w	800aa7e <put_fat+0x21c>
 800a87a:	68fb      	ldr	r3, [r7, #12]
 800a87c:	69db      	ldr	r3, [r3, #28]
 800a87e:	68ba      	ldr	r2, [r7, #8]
 800a880:	429a      	cmp	r2, r3
 800a882:	f080 80fc 	bcs.w	800aa7e <put_fat+0x21c>
		switch (fs->fs_type) {
 800a886:	68fb      	ldr	r3, [r7, #12]
 800a888:	781b      	ldrb	r3, [r3, #0]
 800a88a:	2b03      	cmp	r3, #3
 800a88c:	f000 80b6 	beq.w	800a9fc <put_fat+0x19a>
 800a890:	2b03      	cmp	r3, #3
 800a892:	f300 80fd 	bgt.w	800aa90 <put_fat+0x22e>
 800a896:	2b01      	cmp	r3, #1
 800a898:	d003      	beq.n	800a8a2 <put_fat+0x40>
 800a89a:	2b02      	cmp	r3, #2
 800a89c:	f000 8083 	beq.w	800a9a6 <put_fat+0x144>
 800a8a0:	e0f6      	b.n	800aa90 <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800a8a2:	68bb      	ldr	r3, [r7, #8]
 800a8a4:	61bb      	str	r3, [r7, #24]
 800a8a6:	69bb      	ldr	r3, [r7, #24]
 800a8a8:	085b      	lsrs	r3, r3, #1
 800a8aa:	69ba      	ldr	r2, [r7, #24]
 800a8ac:	4413      	add	r3, r2
 800a8ae:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800a8b0:	68fb      	ldr	r3, [r7, #12]
 800a8b2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	899b      	ldrh	r3, [r3, #12]
 800a8b8:	4619      	mov	r1, r3
 800a8ba:	69bb      	ldr	r3, [r7, #24]
 800a8bc:	fbb3 f3f1 	udiv	r3, r3, r1
 800a8c0:	4413      	add	r3, r2
 800a8c2:	4619      	mov	r1, r3
 800a8c4:	68f8      	ldr	r0, [r7, #12]
 800a8c6:	f7ff fe3b 	bl	800a540 <move_window>
 800a8ca:	4603      	mov	r3, r0
 800a8cc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a8ce:	7ffb      	ldrb	r3, [r7, #31]
 800a8d0:	2b00      	cmp	r3, #0
 800a8d2:	f040 80d6 	bne.w	800aa82 <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 800a8d6:	68fb      	ldr	r3, [r7, #12]
 800a8d8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800a8dc:	69bb      	ldr	r3, [r7, #24]
 800a8de:	1c5a      	adds	r2, r3, #1
 800a8e0:	61ba      	str	r2, [r7, #24]
 800a8e2:	68fa      	ldr	r2, [r7, #12]
 800a8e4:	8992      	ldrh	r2, [r2, #12]
 800a8e6:	fbb3 f0f2 	udiv	r0, r3, r2
 800a8ea:	fb00 f202 	mul.w	r2, r0, r2
 800a8ee:	1a9b      	subs	r3, r3, r2
 800a8f0:	440b      	add	r3, r1
 800a8f2:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800a8f4:	68bb      	ldr	r3, [r7, #8]
 800a8f6:	f003 0301 	and.w	r3, r3, #1
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	d00d      	beq.n	800a91a <put_fat+0xb8>
 800a8fe:	697b      	ldr	r3, [r7, #20]
 800a900:	781b      	ldrb	r3, [r3, #0]
 800a902:	b25b      	sxtb	r3, r3
 800a904:	f003 030f 	and.w	r3, r3, #15
 800a908:	b25a      	sxtb	r2, r3
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	b2db      	uxtb	r3, r3
 800a90e:	011b      	lsls	r3, r3, #4
 800a910:	b25b      	sxtb	r3, r3
 800a912:	4313      	orrs	r3, r2
 800a914:	b25b      	sxtb	r3, r3
 800a916:	b2db      	uxtb	r3, r3
 800a918:	e001      	b.n	800a91e <put_fat+0xbc>
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	b2db      	uxtb	r3, r3
 800a91e:	697a      	ldr	r2, [r7, #20]
 800a920:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800a922:	68fb      	ldr	r3, [r7, #12]
 800a924:	2201      	movs	r2, #1
 800a926:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800a928:	68fb      	ldr	r3, [r7, #12]
 800a92a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a92c:	68fb      	ldr	r3, [r7, #12]
 800a92e:	899b      	ldrh	r3, [r3, #12]
 800a930:	4619      	mov	r1, r3
 800a932:	69bb      	ldr	r3, [r7, #24]
 800a934:	fbb3 f3f1 	udiv	r3, r3, r1
 800a938:	4413      	add	r3, r2
 800a93a:	4619      	mov	r1, r3
 800a93c:	68f8      	ldr	r0, [r7, #12]
 800a93e:	f7ff fdff 	bl	800a540 <move_window>
 800a942:	4603      	mov	r3, r0
 800a944:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a946:	7ffb      	ldrb	r3, [r7, #31]
 800a948:	2b00      	cmp	r3, #0
 800a94a:	f040 809c 	bne.w	800aa86 <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 800a94e:	68fb      	ldr	r3, [r7, #12]
 800a950:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800a954:	68fb      	ldr	r3, [r7, #12]
 800a956:	899b      	ldrh	r3, [r3, #12]
 800a958:	461a      	mov	r2, r3
 800a95a:	69bb      	ldr	r3, [r7, #24]
 800a95c:	fbb3 f0f2 	udiv	r0, r3, r2
 800a960:	fb00 f202 	mul.w	r2, r0, r2
 800a964:	1a9b      	subs	r3, r3, r2
 800a966:	440b      	add	r3, r1
 800a968:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800a96a:	68bb      	ldr	r3, [r7, #8]
 800a96c:	f003 0301 	and.w	r3, r3, #1
 800a970:	2b00      	cmp	r3, #0
 800a972:	d003      	beq.n	800a97c <put_fat+0x11a>
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	091b      	lsrs	r3, r3, #4
 800a978:	b2db      	uxtb	r3, r3
 800a97a:	e00e      	b.n	800a99a <put_fat+0x138>
 800a97c:	697b      	ldr	r3, [r7, #20]
 800a97e:	781b      	ldrb	r3, [r3, #0]
 800a980:	b25b      	sxtb	r3, r3
 800a982:	f023 030f 	bic.w	r3, r3, #15
 800a986:	b25a      	sxtb	r2, r3
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	0a1b      	lsrs	r3, r3, #8
 800a98c:	b25b      	sxtb	r3, r3
 800a98e:	f003 030f 	and.w	r3, r3, #15
 800a992:	b25b      	sxtb	r3, r3
 800a994:	4313      	orrs	r3, r2
 800a996:	b25b      	sxtb	r3, r3
 800a998:	b2db      	uxtb	r3, r3
 800a99a:	697a      	ldr	r2, [r7, #20]
 800a99c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800a99e:	68fb      	ldr	r3, [r7, #12]
 800a9a0:	2201      	movs	r2, #1
 800a9a2:	70da      	strb	r2, [r3, #3]
			break;
 800a9a4:	e074      	b.n	800aa90 <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800a9a6:	68fb      	ldr	r3, [r7, #12]
 800a9a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a9aa:	68fb      	ldr	r3, [r7, #12]
 800a9ac:	899b      	ldrh	r3, [r3, #12]
 800a9ae:	085b      	lsrs	r3, r3, #1
 800a9b0:	b29b      	uxth	r3, r3
 800a9b2:	4619      	mov	r1, r3
 800a9b4:	68bb      	ldr	r3, [r7, #8]
 800a9b6:	fbb3 f3f1 	udiv	r3, r3, r1
 800a9ba:	4413      	add	r3, r2
 800a9bc:	4619      	mov	r1, r3
 800a9be:	68f8      	ldr	r0, [r7, #12]
 800a9c0:	f7ff fdbe 	bl	800a540 <move_window>
 800a9c4:	4603      	mov	r3, r0
 800a9c6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a9c8:	7ffb      	ldrb	r3, [r7, #31]
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	d15d      	bne.n	800aa8a <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800a9ce:	68fb      	ldr	r3, [r7, #12]
 800a9d0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800a9d4:	68bb      	ldr	r3, [r7, #8]
 800a9d6:	005b      	lsls	r3, r3, #1
 800a9d8:	68fa      	ldr	r2, [r7, #12]
 800a9da:	8992      	ldrh	r2, [r2, #12]
 800a9dc:	fbb3 f0f2 	udiv	r0, r3, r2
 800a9e0:	fb00 f202 	mul.w	r2, r0, r2
 800a9e4:	1a9b      	subs	r3, r3, r2
 800a9e6:	440b      	add	r3, r1
 800a9e8:	687a      	ldr	r2, [r7, #4]
 800a9ea:	b292      	uxth	r2, r2
 800a9ec:	4611      	mov	r1, r2
 800a9ee:	4618      	mov	r0, r3
 800a9f0:	f7ff fb6d 	bl	800a0ce <st_word>
			fs->wflag = 1;
 800a9f4:	68fb      	ldr	r3, [r7, #12]
 800a9f6:	2201      	movs	r2, #1
 800a9f8:	70da      	strb	r2, [r3, #3]
			break;
 800a9fa:	e049      	b.n	800aa90 <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800a9fc:	68fb      	ldr	r3, [r7, #12]
 800a9fe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800aa00:	68fb      	ldr	r3, [r7, #12]
 800aa02:	899b      	ldrh	r3, [r3, #12]
 800aa04:	089b      	lsrs	r3, r3, #2
 800aa06:	b29b      	uxth	r3, r3
 800aa08:	4619      	mov	r1, r3
 800aa0a:	68bb      	ldr	r3, [r7, #8]
 800aa0c:	fbb3 f3f1 	udiv	r3, r3, r1
 800aa10:	4413      	add	r3, r2
 800aa12:	4619      	mov	r1, r3
 800aa14:	68f8      	ldr	r0, [r7, #12]
 800aa16:	f7ff fd93 	bl	800a540 <move_window>
 800aa1a:	4603      	mov	r3, r0
 800aa1c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800aa1e:	7ffb      	ldrb	r3, [r7, #31]
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	d134      	bne.n	800aa8e <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800aa2a:	68fb      	ldr	r3, [r7, #12]
 800aa2c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800aa30:	68bb      	ldr	r3, [r7, #8]
 800aa32:	009b      	lsls	r3, r3, #2
 800aa34:	68fa      	ldr	r2, [r7, #12]
 800aa36:	8992      	ldrh	r2, [r2, #12]
 800aa38:	fbb3 f0f2 	udiv	r0, r3, r2
 800aa3c:	fb00 f202 	mul.w	r2, r0, r2
 800aa40:	1a9b      	subs	r3, r3, r2
 800aa42:	440b      	add	r3, r1
 800aa44:	4618      	mov	r0, r3
 800aa46:	f7ff fb1f 	bl	800a088 <ld_dword>
 800aa4a:	4603      	mov	r3, r0
 800aa4c:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800aa50:	4323      	orrs	r3, r4
 800aa52:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800aa54:	68fb      	ldr	r3, [r7, #12]
 800aa56:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800aa5a:	68bb      	ldr	r3, [r7, #8]
 800aa5c:	009b      	lsls	r3, r3, #2
 800aa5e:	68fa      	ldr	r2, [r7, #12]
 800aa60:	8992      	ldrh	r2, [r2, #12]
 800aa62:	fbb3 f0f2 	udiv	r0, r3, r2
 800aa66:	fb00 f202 	mul.w	r2, r0, r2
 800aa6a:	1a9b      	subs	r3, r3, r2
 800aa6c:	440b      	add	r3, r1
 800aa6e:	6879      	ldr	r1, [r7, #4]
 800aa70:	4618      	mov	r0, r3
 800aa72:	f7ff fb47 	bl	800a104 <st_dword>
			fs->wflag = 1;
 800aa76:	68fb      	ldr	r3, [r7, #12]
 800aa78:	2201      	movs	r2, #1
 800aa7a:	70da      	strb	r2, [r3, #3]
			break;
 800aa7c:	e008      	b.n	800aa90 <put_fat+0x22e>
		}
	}
 800aa7e:	bf00      	nop
 800aa80:	e006      	b.n	800aa90 <put_fat+0x22e>
			if (res != FR_OK) break;
 800aa82:	bf00      	nop
 800aa84:	e004      	b.n	800aa90 <put_fat+0x22e>
			if (res != FR_OK) break;
 800aa86:	bf00      	nop
 800aa88:	e002      	b.n	800aa90 <put_fat+0x22e>
			if (res != FR_OK) break;
 800aa8a:	bf00      	nop
 800aa8c:	e000      	b.n	800aa90 <put_fat+0x22e>
			if (res != FR_OK) break;
 800aa8e:	bf00      	nop
	return res;
 800aa90:	7ffb      	ldrb	r3, [r7, #31]
}
 800aa92:	4618      	mov	r0, r3
 800aa94:	3724      	adds	r7, #36	; 0x24
 800aa96:	46bd      	mov	sp, r7
 800aa98:	bd90      	pop	{r4, r7, pc}

0800aa9a <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800aa9a:	b580      	push	{r7, lr}
 800aa9c:	b088      	sub	sp, #32
 800aa9e:	af00      	add	r7, sp, #0
 800aaa0:	60f8      	str	r0, [r7, #12]
 800aaa2:	60b9      	str	r1, [r7, #8]
 800aaa4:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800aaa6:	2300      	movs	r3, #0
 800aaa8:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800aaaa:	68fb      	ldr	r3, [r7, #12]
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800aab0:	68bb      	ldr	r3, [r7, #8]
 800aab2:	2b01      	cmp	r3, #1
 800aab4:	d904      	bls.n	800aac0 <remove_chain+0x26>
 800aab6:	69bb      	ldr	r3, [r7, #24]
 800aab8:	69db      	ldr	r3, [r3, #28]
 800aaba:	68ba      	ldr	r2, [r7, #8]
 800aabc:	429a      	cmp	r2, r3
 800aabe:	d301      	bcc.n	800aac4 <remove_chain+0x2a>
 800aac0:	2302      	movs	r3, #2
 800aac2:	e04b      	b.n	800ab5c <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	d00c      	beq.n	800aae4 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800aaca:	f04f 32ff 	mov.w	r2, #4294967295
 800aace:	6879      	ldr	r1, [r7, #4]
 800aad0:	69b8      	ldr	r0, [r7, #24]
 800aad2:	f7ff fec6 	bl	800a862 <put_fat>
 800aad6:	4603      	mov	r3, r0
 800aad8:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800aada:	7ffb      	ldrb	r3, [r7, #31]
 800aadc:	2b00      	cmp	r3, #0
 800aade:	d001      	beq.n	800aae4 <remove_chain+0x4a>
 800aae0:	7ffb      	ldrb	r3, [r7, #31]
 800aae2:	e03b      	b.n	800ab5c <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800aae4:	68b9      	ldr	r1, [r7, #8]
 800aae6:	68f8      	ldr	r0, [r7, #12]
 800aae8:	f7ff fde7 	bl	800a6ba <get_fat>
 800aaec:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800aaee:	697b      	ldr	r3, [r7, #20]
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	d031      	beq.n	800ab58 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800aaf4:	697b      	ldr	r3, [r7, #20]
 800aaf6:	2b01      	cmp	r3, #1
 800aaf8:	d101      	bne.n	800aafe <remove_chain+0x64>
 800aafa:	2302      	movs	r3, #2
 800aafc:	e02e      	b.n	800ab5c <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800aafe:	697b      	ldr	r3, [r7, #20]
 800ab00:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab04:	d101      	bne.n	800ab0a <remove_chain+0x70>
 800ab06:	2301      	movs	r3, #1
 800ab08:	e028      	b.n	800ab5c <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800ab0a:	2200      	movs	r2, #0
 800ab0c:	68b9      	ldr	r1, [r7, #8]
 800ab0e:	69b8      	ldr	r0, [r7, #24]
 800ab10:	f7ff fea7 	bl	800a862 <put_fat>
 800ab14:	4603      	mov	r3, r0
 800ab16:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800ab18:	7ffb      	ldrb	r3, [r7, #31]
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	d001      	beq.n	800ab22 <remove_chain+0x88>
 800ab1e:	7ffb      	ldrb	r3, [r7, #31]
 800ab20:	e01c      	b.n	800ab5c <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800ab22:	69bb      	ldr	r3, [r7, #24]
 800ab24:	699a      	ldr	r2, [r3, #24]
 800ab26:	69bb      	ldr	r3, [r7, #24]
 800ab28:	69db      	ldr	r3, [r3, #28]
 800ab2a:	3b02      	subs	r3, #2
 800ab2c:	429a      	cmp	r2, r3
 800ab2e:	d20b      	bcs.n	800ab48 <remove_chain+0xae>
			fs->free_clst++;
 800ab30:	69bb      	ldr	r3, [r7, #24]
 800ab32:	699b      	ldr	r3, [r3, #24]
 800ab34:	1c5a      	adds	r2, r3, #1
 800ab36:	69bb      	ldr	r3, [r7, #24]
 800ab38:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 800ab3a:	69bb      	ldr	r3, [r7, #24]
 800ab3c:	791b      	ldrb	r3, [r3, #4]
 800ab3e:	f043 0301 	orr.w	r3, r3, #1
 800ab42:	b2da      	uxtb	r2, r3
 800ab44:	69bb      	ldr	r3, [r7, #24]
 800ab46:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800ab48:	697b      	ldr	r3, [r7, #20]
 800ab4a:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800ab4c:	69bb      	ldr	r3, [r7, #24]
 800ab4e:	69db      	ldr	r3, [r3, #28]
 800ab50:	68ba      	ldr	r2, [r7, #8]
 800ab52:	429a      	cmp	r2, r3
 800ab54:	d3c6      	bcc.n	800aae4 <remove_chain+0x4a>
 800ab56:	e000      	b.n	800ab5a <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800ab58:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800ab5a:	2300      	movs	r3, #0
}
 800ab5c:	4618      	mov	r0, r3
 800ab5e:	3720      	adds	r7, #32
 800ab60:	46bd      	mov	sp, r7
 800ab62:	bd80      	pop	{r7, pc}

0800ab64 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800ab64:	b580      	push	{r7, lr}
 800ab66:	b088      	sub	sp, #32
 800ab68:	af00      	add	r7, sp, #0
 800ab6a:	6078      	str	r0, [r7, #4]
 800ab6c:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	681b      	ldr	r3, [r3, #0]
 800ab72:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800ab74:	683b      	ldr	r3, [r7, #0]
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	d10d      	bne.n	800ab96 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800ab7a:	693b      	ldr	r3, [r7, #16]
 800ab7c:	695b      	ldr	r3, [r3, #20]
 800ab7e:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800ab80:	69bb      	ldr	r3, [r7, #24]
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	d004      	beq.n	800ab90 <create_chain+0x2c>
 800ab86:	693b      	ldr	r3, [r7, #16]
 800ab88:	69db      	ldr	r3, [r3, #28]
 800ab8a:	69ba      	ldr	r2, [r7, #24]
 800ab8c:	429a      	cmp	r2, r3
 800ab8e:	d31b      	bcc.n	800abc8 <create_chain+0x64>
 800ab90:	2301      	movs	r3, #1
 800ab92:	61bb      	str	r3, [r7, #24]
 800ab94:	e018      	b.n	800abc8 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800ab96:	6839      	ldr	r1, [r7, #0]
 800ab98:	6878      	ldr	r0, [r7, #4]
 800ab9a:	f7ff fd8e 	bl	800a6ba <get_fat>
 800ab9e:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	2b01      	cmp	r3, #1
 800aba4:	d801      	bhi.n	800abaa <create_chain+0x46>
 800aba6:	2301      	movs	r3, #1
 800aba8:	e070      	b.n	800ac8c <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800abaa:	68fb      	ldr	r3, [r7, #12]
 800abac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800abb0:	d101      	bne.n	800abb6 <create_chain+0x52>
 800abb2:	68fb      	ldr	r3, [r7, #12]
 800abb4:	e06a      	b.n	800ac8c <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800abb6:	693b      	ldr	r3, [r7, #16]
 800abb8:	69db      	ldr	r3, [r3, #28]
 800abba:	68fa      	ldr	r2, [r7, #12]
 800abbc:	429a      	cmp	r2, r3
 800abbe:	d201      	bcs.n	800abc4 <create_chain+0x60>
 800abc0:	68fb      	ldr	r3, [r7, #12]
 800abc2:	e063      	b.n	800ac8c <create_chain+0x128>
		scl = clst;
 800abc4:	683b      	ldr	r3, [r7, #0]
 800abc6:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800abc8:	69bb      	ldr	r3, [r7, #24]
 800abca:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800abcc:	69fb      	ldr	r3, [r7, #28]
 800abce:	3301      	adds	r3, #1
 800abd0:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800abd2:	693b      	ldr	r3, [r7, #16]
 800abd4:	69db      	ldr	r3, [r3, #28]
 800abd6:	69fa      	ldr	r2, [r7, #28]
 800abd8:	429a      	cmp	r2, r3
 800abda:	d307      	bcc.n	800abec <create_chain+0x88>
				ncl = 2;
 800abdc:	2302      	movs	r3, #2
 800abde:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800abe0:	69fa      	ldr	r2, [r7, #28]
 800abe2:	69bb      	ldr	r3, [r7, #24]
 800abe4:	429a      	cmp	r2, r3
 800abe6:	d901      	bls.n	800abec <create_chain+0x88>
 800abe8:	2300      	movs	r3, #0
 800abea:	e04f      	b.n	800ac8c <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800abec:	69f9      	ldr	r1, [r7, #28]
 800abee:	6878      	ldr	r0, [r7, #4]
 800abf0:	f7ff fd63 	bl	800a6ba <get_fat>
 800abf4:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800abf6:	68fb      	ldr	r3, [r7, #12]
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d00e      	beq.n	800ac1a <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800abfc:	68fb      	ldr	r3, [r7, #12]
 800abfe:	2b01      	cmp	r3, #1
 800ac00:	d003      	beq.n	800ac0a <create_chain+0xa6>
 800ac02:	68fb      	ldr	r3, [r7, #12]
 800ac04:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac08:	d101      	bne.n	800ac0e <create_chain+0xaa>
 800ac0a:	68fb      	ldr	r3, [r7, #12]
 800ac0c:	e03e      	b.n	800ac8c <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800ac0e:	69fa      	ldr	r2, [r7, #28]
 800ac10:	69bb      	ldr	r3, [r7, #24]
 800ac12:	429a      	cmp	r2, r3
 800ac14:	d1da      	bne.n	800abcc <create_chain+0x68>
 800ac16:	2300      	movs	r3, #0
 800ac18:	e038      	b.n	800ac8c <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800ac1a:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800ac1c:	f04f 32ff 	mov.w	r2, #4294967295
 800ac20:	69f9      	ldr	r1, [r7, #28]
 800ac22:	6938      	ldr	r0, [r7, #16]
 800ac24:	f7ff fe1d 	bl	800a862 <put_fat>
 800ac28:	4603      	mov	r3, r0
 800ac2a:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800ac2c:	7dfb      	ldrb	r3, [r7, #23]
 800ac2e:	2b00      	cmp	r3, #0
 800ac30:	d109      	bne.n	800ac46 <create_chain+0xe2>
 800ac32:	683b      	ldr	r3, [r7, #0]
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	d006      	beq.n	800ac46 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800ac38:	69fa      	ldr	r2, [r7, #28]
 800ac3a:	6839      	ldr	r1, [r7, #0]
 800ac3c:	6938      	ldr	r0, [r7, #16]
 800ac3e:	f7ff fe10 	bl	800a862 <put_fat>
 800ac42:	4603      	mov	r3, r0
 800ac44:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800ac46:	7dfb      	ldrb	r3, [r7, #23]
 800ac48:	2b00      	cmp	r3, #0
 800ac4a:	d116      	bne.n	800ac7a <create_chain+0x116>
		fs->last_clst = ncl;
 800ac4c:	693b      	ldr	r3, [r7, #16]
 800ac4e:	69fa      	ldr	r2, [r7, #28]
 800ac50:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800ac52:	693b      	ldr	r3, [r7, #16]
 800ac54:	699a      	ldr	r2, [r3, #24]
 800ac56:	693b      	ldr	r3, [r7, #16]
 800ac58:	69db      	ldr	r3, [r3, #28]
 800ac5a:	3b02      	subs	r3, #2
 800ac5c:	429a      	cmp	r2, r3
 800ac5e:	d804      	bhi.n	800ac6a <create_chain+0x106>
 800ac60:	693b      	ldr	r3, [r7, #16]
 800ac62:	699b      	ldr	r3, [r3, #24]
 800ac64:	1e5a      	subs	r2, r3, #1
 800ac66:	693b      	ldr	r3, [r7, #16]
 800ac68:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 800ac6a:	693b      	ldr	r3, [r7, #16]
 800ac6c:	791b      	ldrb	r3, [r3, #4]
 800ac6e:	f043 0301 	orr.w	r3, r3, #1
 800ac72:	b2da      	uxtb	r2, r3
 800ac74:	693b      	ldr	r3, [r7, #16]
 800ac76:	711a      	strb	r2, [r3, #4]
 800ac78:	e007      	b.n	800ac8a <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800ac7a:	7dfb      	ldrb	r3, [r7, #23]
 800ac7c:	2b01      	cmp	r3, #1
 800ac7e:	d102      	bne.n	800ac86 <create_chain+0x122>
 800ac80:	f04f 33ff 	mov.w	r3, #4294967295
 800ac84:	e000      	b.n	800ac88 <create_chain+0x124>
 800ac86:	2301      	movs	r3, #1
 800ac88:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800ac8a:	69fb      	ldr	r3, [r7, #28]
}
 800ac8c:	4618      	mov	r0, r3
 800ac8e:	3720      	adds	r7, #32
 800ac90:	46bd      	mov	sp, r7
 800ac92:	bd80      	pop	{r7, pc}

0800ac94 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800ac94:	b480      	push	{r7}
 800ac96:	b087      	sub	sp, #28
 800ac98:	af00      	add	r7, sp, #0
 800ac9a:	6078      	str	r0, [r7, #4]
 800ac9c:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	681b      	ldr	r3, [r3, #0]
 800aca2:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aca8:	3304      	adds	r3, #4
 800acaa:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800acac:	68fb      	ldr	r3, [r7, #12]
 800acae:	899b      	ldrh	r3, [r3, #12]
 800acb0:	461a      	mov	r2, r3
 800acb2:	683b      	ldr	r3, [r7, #0]
 800acb4:	fbb3 f3f2 	udiv	r3, r3, r2
 800acb8:	68fa      	ldr	r2, [r7, #12]
 800acba:	8952      	ldrh	r2, [r2, #10]
 800acbc:	fbb3 f3f2 	udiv	r3, r3, r2
 800acc0:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800acc2:	693b      	ldr	r3, [r7, #16]
 800acc4:	1d1a      	adds	r2, r3, #4
 800acc6:	613a      	str	r2, [r7, #16]
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800accc:	68bb      	ldr	r3, [r7, #8]
 800acce:	2b00      	cmp	r3, #0
 800acd0:	d101      	bne.n	800acd6 <clmt_clust+0x42>
 800acd2:	2300      	movs	r3, #0
 800acd4:	e010      	b.n	800acf8 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 800acd6:	697a      	ldr	r2, [r7, #20]
 800acd8:	68bb      	ldr	r3, [r7, #8]
 800acda:	429a      	cmp	r2, r3
 800acdc:	d307      	bcc.n	800acee <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 800acde:	697a      	ldr	r2, [r7, #20]
 800ace0:	68bb      	ldr	r3, [r7, #8]
 800ace2:	1ad3      	subs	r3, r2, r3
 800ace4:	617b      	str	r3, [r7, #20]
 800ace6:	693b      	ldr	r3, [r7, #16]
 800ace8:	3304      	adds	r3, #4
 800acea:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800acec:	e7e9      	b.n	800acc2 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 800acee:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800acf0:	693b      	ldr	r3, [r7, #16]
 800acf2:	681a      	ldr	r2, [r3, #0]
 800acf4:	697b      	ldr	r3, [r7, #20]
 800acf6:	4413      	add	r3, r2
}
 800acf8:	4618      	mov	r0, r3
 800acfa:	371c      	adds	r7, #28
 800acfc:	46bd      	mov	sp, r7
 800acfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad02:	4770      	bx	lr

0800ad04 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800ad04:	b580      	push	{r7, lr}
 800ad06:	b086      	sub	sp, #24
 800ad08:	af00      	add	r7, sp, #0
 800ad0a:	6078      	str	r0, [r7, #4]
 800ad0c:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	681b      	ldr	r3, [r3, #0]
 800ad12:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800ad14:	683b      	ldr	r3, [r7, #0]
 800ad16:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ad1a:	d204      	bcs.n	800ad26 <dir_sdi+0x22>
 800ad1c:	683b      	ldr	r3, [r7, #0]
 800ad1e:	f003 031f 	and.w	r3, r3, #31
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	d001      	beq.n	800ad2a <dir_sdi+0x26>
		return FR_INT_ERR;
 800ad26:	2302      	movs	r3, #2
 800ad28:	e071      	b.n	800ae0e <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	683a      	ldr	r2, [r7, #0]
 800ad2e:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	689b      	ldr	r3, [r3, #8]
 800ad34:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800ad36:	697b      	ldr	r3, [r7, #20]
 800ad38:	2b00      	cmp	r3, #0
 800ad3a:	d106      	bne.n	800ad4a <dir_sdi+0x46>
 800ad3c:	693b      	ldr	r3, [r7, #16]
 800ad3e:	781b      	ldrb	r3, [r3, #0]
 800ad40:	2b02      	cmp	r3, #2
 800ad42:	d902      	bls.n	800ad4a <dir_sdi+0x46>
		clst = fs->dirbase;
 800ad44:	693b      	ldr	r3, [r7, #16]
 800ad46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad48:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800ad4a:	697b      	ldr	r3, [r7, #20]
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	d10c      	bne.n	800ad6a <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800ad50:	683b      	ldr	r3, [r7, #0]
 800ad52:	095b      	lsrs	r3, r3, #5
 800ad54:	693a      	ldr	r2, [r7, #16]
 800ad56:	8912      	ldrh	r2, [r2, #8]
 800ad58:	4293      	cmp	r3, r2
 800ad5a:	d301      	bcc.n	800ad60 <dir_sdi+0x5c>
 800ad5c:	2302      	movs	r3, #2
 800ad5e:	e056      	b.n	800ae0e <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 800ad60:	693b      	ldr	r3, [r7, #16]
 800ad62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	61da      	str	r2, [r3, #28]
 800ad68:	e02d      	b.n	800adc6 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800ad6a:	693b      	ldr	r3, [r7, #16]
 800ad6c:	895b      	ldrh	r3, [r3, #10]
 800ad6e:	461a      	mov	r2, r3
 800ad70:	693b      	ldr	r3, [r7, #16]
 800ad72:	899b      	ldrh	r3, [r3, #12]
 800ad74:	fb02 f303 	mul.w	r3, r2, r3
 800ad78:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800ad7a:	e019      	b.n	800adb0 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	6979      	ldr	r1, [r7, #20]
 800ad80:	4618      	mov	r0, r3
 800ad82:	f7ff fc9a 	bl	800a6ba <get_fat>
 800ad86:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800ad88:	697b      	ldr	r3, [r7, #20]
 800ad8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad8e:	d101      	bne.n	800ad94 <dir_sdi+0x90>
 800ad90:	2301      	movs	r3, #1
 800ad92:	e03c      	b.n	800ae0e <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800ad94:	697b      	ldr	r3, [r7, #20]
 800ad96:	2b01      	cmp	r3, #1
 800ad98:	d904      	bls.n	800ada4 <dir_sdi+0xa0>
 800ad9a:	693b      	ldr	r3, [r7, #16]
 800ad9c:	69db      	ldr	r3, [r3, #28]
 800ad9e:	697a      	ldr	r2, [r7, #20]
 800ada0:	429a      	cmp	r2, r3
 800ada2:	d301      	bcc.n	800ada8 <dir_sdi+0xa4>
 800ada4:	2302      	movs	r3, #2
 800ada6:	e032      	b.n	800ae0e <dir_sdi+0x10a>
			ofs -= csz;
 800ada8:	683a      	ldr	r2, [r7, #0]
 800adaa:	68fb      	ldr	r3, [r7, #12]
 800adac:	1ad3      	subs	r3, r2, r3
 800adae:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800adb0:	683a      	ldr	r2, [r7, #0]
 800adb2:	68fb      	ldr	r3, [r7, #12]
 800adb4:	429a      	cmp	r2, r3
 800adb6:	d2e1      	bcs.n	800ad7c <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 800adb8:	6979      	ldr	r1, [r7, #20]
 800adba:	6938      	ldr	r0, [r7, #16]
 800adbc:	f7ff fc5e 	bl	800a67c <clust2sect>
 800adc0:	4602      	mov	r2, r0
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	697a      	ldr	r2, [r7, #20]
 800adca:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	69db      	ldr	r3, [r3, #28]
 800add0:	2b00      	cmp	r3, #0
 800add2:	d101      	bne.n	800add8 <dir_sdi+0xd4>
 800add4:	2302      	movs	r3, #2
 800add6:	e01a      	b.n	800ae0e <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	69da      	ldr	r2, [r3, #28]
 800addc:	693b      	ldr	r3, [r7, #16]
 800adde:	899b      	ldrh	r3, [r3, #12]
 800ade0:	4619      	mov	r1, r3
 800ade2:	683b      	ldr	r3, [r7, #0]
 800ade4:	fbb3 f3f1 	udiv	r3, r3, r1
 800ade8:	441a      	add	r2, r3
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800adee:	693b      	ldr	r3, [r7, #16]
 800adf0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800adf4:	693b      	ldr	r3, [r7, #16]
 800adf6:	899b      	ldrh	r3, [r3, #12]
 800adf8:	461a      	mov	r2, r3
 800adfa:	683b      	ldr	r3, [r7, #0]
 800adfc:	fbb3 f0f2 	udiv	r0, r3, r2
 800ae00:	fb00 f202 	mul.w	r2, r0, r2
 800ae04:	1a9b      	subs	r3, r3, r2
 800ae06:	18ca      	adds	r2, r1, r3
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800ae0c:	2300      	movs	r3, #0
}
 800ae0e:	4618      	mov	r0, r3
 800ae10:	3718      	adds	r7, #24
 800ae12:	46bd      	mov	sp, r7
 800ae14:	bd80      	pop	{r7, pc}

0800ae16 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800ae16:	b580      	push	{r7, lr}
 800ae18:	b086      	sub	sp, #24
 800ae1a:	af00      	add	r7, sp, #0
 800ae1c:	6078      	str	r0, [r7, #4]
 800ae1e:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	695b      	ldr	r3, [r3, #20]
 800ae2a:	3320      	adds	r3, #32
 800ae2c:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	69db      	ldr	r3, [r3, #28]
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	d003      	beq.n	800ae3e <dir_next+0x28>
 800ae36:	68bb      	ldr	r3, [r7, #8]
 800ae38:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ae3c:	d301      	bcc.n	800ae42 <dir_next+0x2c>
 800ae3e:	2304      	movs	r3, #4
 800ae40:	e0bb      	b.n	800afba <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800ae42:	68fb      	ldr	r3, [r7, #12]
 800ae44:	899b      	ldrh	r3, [r3, #12]
 800ae46:	461a      	mov	r2, r3
 800ae48:	68bb      	ldr	r3, [r7, #8]
 800ae4a:	fbb3 f1f2 	udiv	r1, r3, r2
 800ae4e:	fb01 f202 	mul.w	r2, r1, r2
 800ae52:	1a9b      	subs	r3, r3, r2
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	f040 809d 	bne.w	800af94 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	69db      	ldr	r3, [r3, #28]
 800ae5e:	1c5a      	adds	r2, r3, #1
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	699b      	ldr	r3, [r3, #24]
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	d10b      	bne.n	800ae84 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800ae6c:	68bb      	ldr	r3, [r7, #8]
 800ae6e:	095b      	lsrs	r3, r3, #5
 800ae70:	68fa      	ldr	r2, [r7, #12]
 800ae72:	8912      	ldrh	r2, [r2, #8]
 800ae74:	4293      	cmp	r3, r2
 800ae76:	f0c0 808d 	bcc.w	800af94 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	2200      	movs	r2, #0
 800ae7e:	61da      	str	r2, [r3, #28]
 800ae80:	2304      	movs	r3, #4
 800ae82:	e09a      	b.n	800afba <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800ae84:	68fb      	ldr	r3, [r7, #12]
 800ae86:	899b      	ldrh	r3, [r3, #12]
 800ae88:	461a      	mov	r2, r3
 800ae8a:	68bb      	ldr	r3, [r7, #8]
 800ae8c:	fbb3 f3f2 	udiv	r3, r3, r2
 800ae90:	68fa      	ldr	r2, [r7, #12]
 800ae92:	8952      	ldrh	r2, [r2, #10]
 800ae94:	3a01      	subs	r2, #1
 800ae96:	4013      	ands	r3, r2
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	d17b      	bne.n	800af94 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800ae9c:	687a      	ldr	r2, [r7, #4]
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	699b      	ldr	r3, [r3, #24]
 800aea2:	4619      	mov	r1, r3
 800aea4:	4610      	mov	r0, r2
 800aea6:	f7ff fc08 	bl	800a6ba <get_fat>
 800aeaa:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800aeac:	697b      	ldr	r3, [r7, #20]
 800aeae:	2b01      	cmp	r3, #1
 800aeb0:	d801      	bhi.n	800aeb6 <dir_next+0xa0>
 800aeb2:	2302      	movs	r3, #2
 800aeb4:	e081      	b.n	800afba <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800aeb6:	697b      	ldr	r3, [r7, #20]
 800aeb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aebc:	d101      	bne.n	800aec2 <dir_next+0xac>
 800aebe:	2301      	movs	r3, #1
 800aec0:	e07b      	b.n	800afba <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800aec2:	68fb      	ldr	r3, [r7, #12]
 800aec4:	69db      	ldr	r3, [r3, #28]
 800aec6:	697a      	ldr	r2, [r7, #20]
 800aec8:	429a      	cmp	r2, r3
 800aeca:	d359      	bcc.n	800af80 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800aecc:	683b      	ldr	r3, [r7, #0]
 800aece:	2b00      	cmp	r3, #0
 800aed0:	d104      	bne.n	800aedc <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	2200      	movs	r2, #0
 800aed6:	61da      	str	r2, [r3, #28]
 800aed8:	2304      	movs	r3, #4
 800aeda:	e06e      	b.n	800afba <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800aedc:	687a      	ldr	r2, [r7, #4]
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	699b      	ldr	r3, [r3, #24]
 800aee2:	4619      	mov	r1, r3
 800aee4:	4610      	mov	r0, r2
 800aee6:	f7ff fe3d 	bl	800ab64 <create_chain>
 800aeea:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800aeec:	697b      	ldr	r3, [r7, #20]
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d101      	bne.n	800aef6 <dir_next+0xe0>
 800aef2:	2307      	movs	r3, #7
 800aef4:	e061      	b.n	800afba <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800aef6:	697b      	ldr	r3, [r7, #20]
 800aef8:	2b01      	cmp	r3, #1
 800aefa:	d101      	bne.n	800af00 <dir_next+0xea>
 800aefc:	2302      	movs	r3, #2
 800aefe:	e05c      	b.n	800afba <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800af00:	697b      	ldr	r3, [r7, #20]
 800af02:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af06:	d101      	bne.n	800af0c <dir_next+0xf6>
 800af08:	2301      	movs	r3, #1
 800af0a:	e056      	b.n	800afba <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800af0c:	68f8      	ldr	r0, [r7, #12]
 800af0e:	f7ff fad3 	bl	800a4b8 <sync_window>
 800af12:	4603      	mov	r3, r0
 800af14:	2b00      	cmp	r3, #0
 800af16:	d001      	beq.n	800af1c <dir_next+0x106>
 800af18:	2301      	movs	r3, #1
 800af1a:	e04e      	b.n	800afba <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800af1c:	68fb      	ldr	r3, [r7, #12]
 800af1e:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800af22:	68fb      	ldr	r3, [r7, #12]
 800af24:	899b      	ldrh	r3, [r3, #12]
 800af26:	461a      	mov	r2, r3
 800af28:	2100      	movs	r1, #0
 800af2a:	f7ff f938 	bl	800a19e <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800af2e:	2300      	movs	r3, #0
 800af30:	613b      	str	r3, [r7, #16]
 800af32:	6979      	ldr	r1, [r7, #20]
 800af34:	68f8      	ldr	r0, [r7, #12]
 800af36:	f7ff fba1 	bl	800a67c <clust2sect>
 800af3a:	4602      	mov	r2, r0
 800af3c:	68fb      	ldr	r3, [r7, #12]
 800af3e:	635a      	str	r2, [r3, #52]	; 0x34
 800af40:	e012      	b.n	800af68 <dir_next+0x152>
						fs->wflag = 1;
 800af42:	68fb      	ldr	r3, [r7, #12]
 800af44:	2201      	movs	r2, #1
 800af46:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800af48:	68f8      	ldr	r0, [r7, #12]
 800af4a:	f7ff fab5 	bl	800a4b8 <sync_window>
 800af4e:	4603      	mov	r3, r0
 800af50:	2b00      	cmp	r3, #0
 800af52:	d001      	beq.n	800af58 <dir_next+0x142>
 800af54:	2301      	movs	r3, #1
 800af56:	e030      	b.n	800afba <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800af58:	693b      	ldr	r3, [r7, #16]
 800af5a:	3301      	adds	r3, #1
 800af5c:	613b      	str	r3, [r7, #16]
 800af5e:	68fb      	ldr	r3, [r7, #12]
 800af60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800af62:	1c5a      	adds	r2, r3, #1
 800af64:	68fb      	ldr	r3, [r7, #12]
 800af66:	635a      	str	r2, [r3, #52]	; 0x34
 800af68:	68fb      	ldr	r3, [r7, #12]
 800af6a:	895b      	ldrh	r3, [r3, #10]
 800af6c:	461a      	mov	r2, r3
 800af6e:	693b      	ldr	r3, [r7, #16]
 800af70:	4293      	cmp	r3, r2
 800af72:	d3e6      	bcc.n	800af42 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800af74:	68fb      	ldr	r3, [r7, #12]
 800af76:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800af78:	693b      	ldr	r3, [r7, #16]
 800af7a:	1ad2      	subs	r2, r2, r3
 800af7c:	68fb      	ldr	r3, [r7, #12]
 800af7e:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	697a      	ldr	r2, [r7, #20]
 800af84:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800af86:	6979      	ldr	r1, [r7, #20]
 800af88:	68f8      	ldr	r0, [r7, #12]
 800af8a:	f7ff fb77 	bl	800a67c <clust2sect>
 800af8e:	4602      	mov	r2, r0
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	68ba      	ldr	r2, [r7, #8]
 800af98:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800af9a:	68fb      	ldr	r3, [r7, #12]
 800af9c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800afa0:	68fb      	ldr	r3, [r7, #12]
 800afa2:	899b      	ldrh	r3, [r3, #12]
 800afa4:	461a      	mov	r2, r3
 800afa6:	68bb      	ldr	r3, [r7, #8]
 800afa8:	fbb3 f0f2 	udiv	r0, r3, r2
 800afac:	fb00 f202 	mul.w	r2, r0, r2
 800afb0:	1a9b      	subs	r3, r3, r2
 800afb2:	18ca      	adds	r2, r1, r3
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800afb8:	2300      	movs	r3, #0
}
 800afba:	4618      	mov	r0, r3
 800afbc:	3718      	adds	r7, #24
 800afbe:	46bd      	mov	sp, r7
 800afc0:	bd80      	pop	{r7, pc}

0800afc2 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800afc2:	b580      	push	{r7, lr}
 800afc4:	b086      	sub	sp, #24
 800afc6:	af00      	add	r7, sp, #0
 800afc8:	6078      	str	r0, [r7, #4]
 800afca:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800afd2:	2100      	movs	r1, #0
 800afd4:	6878      	ldr	r0, [r7, #4]
 800afd6:	f7ff fe95 	bl	800ad04 <dir_sdi>
 800afda:	4603      	mov	r3, r0
 800afdc:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800afde:	7dfb      	ldrb	r3, [r7, #23]
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	d12b      	bne.n	800b03c <dir_alloc+0x7a>
		n = 0;
 800afe4:	2300      	movs	r3, #0
 800afe6:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	69db      	ldr	r3, [r3, #28]
 800afec:	4619      	mov	r1, r3
 800afee:	68f8      	ldr	r0, [r7, #12]
 800aff0:	f7ff faa6 	bl	800a540 <move_window>
 800aff4:	4603      	mov	r3, r0
 800aff6:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800aff8:	7dfb      	ldrb	r3, [r7, #23]
 800affa:	2b00      	cmp	r3, #0
 800affc:	d11d      	bne.n	800b03a <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	6a1b      	ldr	r3, [r3, #32]
 800b002:	781b      	ldrb	r3, [r3, #0]
 800b004:	2be5      	cmp	r3, #229	; 0xe5
 800b006:	d004      	beq.n	800b012 <dir_alloc+0x50>
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	6a1b      	ldr	r3, [r3, #32]
 800b00c:	781b      	ldrb	r3, [r3, #0]
 800b00e:	2b00      	cmp	r3, #0
 800b010:	d107      	bne.n	800b022 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800b012:	693b      	ldr	r3, [r7, #16]
 800b014:	3301      	adds	r3, #1
 800b016:	613b      	str	r3, [r7, #16]
 800b018:	693a      	ldr	r2, [r7, #16]
 800b01a:	683b      	ldr	r3, [r7, #0]
 800b01c:	429a      	cmp	r2, r3
 800b01e:	d102      	bne.n	800b026 <dir_alloc+0x64>
 800b020:	e00c      	b.n	800b03c <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800b022:	2300      	movs	r3, #0
 800b024:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800b026:	2101      	movs	r1, #1
 800b028:	6878      	ldr	r0, [r7, #4]
 800b02a:	f7ff fef4 	bl	800ae16 <dir_next>
 800b02e:	4603      	mov	r3, r0
 800b030:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800b032:	7dfb      	ldrb	r3, [r7, #23]
 800b034:	2b00      	cmp	r3, #0
 800b036:	d0d7      	beq.n	800afe8 <dir_alloc+0x26>
 800b038:	e000      	b.n	800b03c <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800b03a:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800b03c:	7dfb      	ldrb	r3, [r7, #23]
 800b03e:	2b04      	cmp	r3, #4
 800b040:	d101      	bne.n	800b046 <dir_alloc+0x84>
 800b042:	2307      	movs	r3, #7
 800b044:	75fb      	strb	r3, [r7, #23]
	return res;
 800b046:	7dfb      	ldrb	r3, [r7, #23]
}
 800b048:	4618      	mov	r0, r3
 800b04a:	3718      	adds	r7, #24
 800b04c:	46bd      	mov	sp, r7
 800b04e:	bd80      	pop	{r7, pc}

0800b050 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800b050:	b580      	push	{r7, lr}
 800b052:	b084      	sub	sp, #16
 800b054:	af00      	add	r7, sp, #0
 800b056:	6078      	str	r0, [r7, #4]
 800b058:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800b05a:	683b      	ldr	r3, [r7, #0]
 800b05c:	331a      	adds	r3, #26
 800b05e:	4618      	mov	r0, r3
 800b060:	f7fe fffa 	bl	800a058 <ld_word>
 800b064:	4603      	mov	r3, r0
 800b066:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	781b      	ldrb	r3, [r3, #0]
 800b06c:	2b03      	cmp	r3, #3
 800b06e:	d109      	bne.n	800b084 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800b070:	683b      	ldr	r3, [r7, #0]
 800b072:	3314      	adds	r3, #20
 800b074:	4618      	mov	r0, r3
 800b076:	f7fe ffef 	bl	800a058 <ld_word>
 800b07a:	4603      	mov	r3, r0
 800b07c:	041b      	lsls	r3, r3, #16
 800b07e:	68fa      	ldr	r2, [r7, #12]
 800b080:	4313      	orrs	r3, r2
 800b082:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800b084:	68fb      	ldr	r3, [r7, #12]
}
 800b086:	4618      	mov	r0, r3
 800b088:	3710      	adds	r7, #16
 800b08a:	46bd      	mov	sp, r7
 800b08c:	bd80      	pop	{r7, pc}

0800b08e <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800b08e:	b580      	push	{r7, lr}
 800b090:	b084      	sub	sp, #16
 800b092:	af00      	add	r7, sp, #0
 800b094:	60f8      	str	r0, [r7, #12]
 800b096:	60b9      	str	r1, [r7, #8]
 800b098:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800b09a:	68bb      	ldr	r3, [r7, #8]
 800b09c:	331a      	adds	r3, #26
 800b09e:	687a      	ldr	r2, [r7, #4]
 800b0a0:	b292      	uxth	r2, r2
 800b0a2:	4611      	mov	r1, r2
 800b0a4:	4618      	mov	r0, r3
 800b0a6:	f7ff f812 	bl	800a0ce <st_word>
	if (fs->fs_type == FS_FAT32) {
 800b0aa:	68fb      	ldr	r3, [r7, #12]
 800b0ac:	781b      	ldrb	r3, [r3, #0]
 800b0ae:	2b03      	cmp	r3, #3
 800b0b0:	d109      	bne.n	800b0c6 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800b0b2:	68bb      	ldr	r3, [r7, #8]
 800b0b4:	f103 0214 	add.w	r2, r3, #20
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	0c1b      	lsrs	r3, r3, #16
 800b0bc:	b29b      	uxth	r3, r3
 800b0be:	4619      	mov	r1, r3
 800b0c0:	4610      	mov	r0, r2
 800b0c2:	f7ff f804 	bl	800a0ce <st_word>
	}
}
 800b0c6:	bf00      	nop
 800b0c8:	3710      	adds	r7, #16
 800b0ca:	46bd      	mov	sp, r7
 800b0cc:	bd80      	pop	{r7, pc}
	...

0800b0d0 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800b0d0:	b590      	push	{r4, r7, lr}
 800b0d2:	b087      	sub	sp, #28
 800b0d4:	af00      	add	r7, sp, #0
 800b0d6:	6078      	str	r0, [r7, #4]
 800b0d8:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800b0da:	683b      	ldr	r3, [r7, #0]
 800b0dc:	331a      	adds	r3, #26
 800b0de:	4618      	mov	r0, r3
 800b0e0:	f7fe ffba 	bl	800a058 <ld_word>
 800b0e4:	4603      	mov	r3, r0
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	d001      	beq.n	800b0ee <cmp_lfn+0x1e>
 800b0ea:	2300      	movs	r3, #0
 800b0ec:	e059      	b.n	800b1a2 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800b0ee:	683b      	ldr	r3, [r7, #0]
 800b0f0:	781b      	ldrb	r3, [r3, #0]
 800b0f2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b0f6:	1e5a      	subs	r2, r3, #1
 800b0f8:	4613      	mov	r3, r2
 800b0fa:	005b      	lsls	r3, r3, #1
 800b0fc:	4413      	add	r3, r2
 800b0fe:	009b      	lsls	r3, r3, #2
 800b100:	4413      	add	r3, r2
 800b102:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800b104:	2301      	movs	r3, #1
 800b106:	81fb      	strh	r3, [r7, #14]
 800b108:	2300      	movs	r3, #0
 800b10a:	613b      	str	r3, [r7, #16]
 800b10c:	e033      	b.n	800b176 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800b10e:	4a27      	ldr	r2, [pc, #156]	; (800b1ac <cmp_lfn+0xdc>)
 800b110:	693b      	ldr	r3, [r7, #16]
 800b112:	4413      	add	r3, r2
 800b114:	781b      	ldrb	r3, [r3, #0]
 800b116:	461a      	mov	r2, r3
 800b118:	683b      	ldr	r3, [r7, #0]
 800b11a:	4413      	add	r3, r2
 800b11c:	4618      	mov	r0, r3
 800b11e:	f7fe ff9b 	bl	800a058 <ld_word>
 800b122:	4603      	mov	r3, r0
 800b124:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800b126:	89fb      	ldrh	r3, [r7, #14]
 800b128:	2b00      	cmp	r3, #0
 800b12a:	d01a      	beq.n	800b162 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800b12c:	697b      	ldr	r3, [r7, #20]
 800b12e:	2bfe      	cmp	r3, #254	; 0xfe
 800b130:	d812      	bhi.n	800b158 <cmp_lfn+0x88>
 800b132:	89bb      	ldrh	r3, [r7, #12]
 800b134:	4618      	mov	r0, r3
 800b136:	f001 fd4b 	bl	800cbd0 <ff_wtoupper>
 800b13a:	4603      	mov	r3, r0
 800b13c:	461c      	mov	r4, r3
 800b13e:	697b      	ldr	r3, [r7, #20]
 800b140:	1c5a      	adds	r2, r3, #1
 800b142:	617a      	str	r2, [r7, #20]
 800b144:	005b      	lsls	r3, r3, #1
 800b146:	687a      	ldr	r2, [r7, #4]
 800b148:	4413      	add	r3, r2
 800b14a:	881b      	ldrh	r3, [r3, #0]
 800b14c:	4618      	mov	r0, r3
 800b14e:	f001 fd3f 	bl	800cbd0 <ff_wtoupper>
 800b152:	4603      	mov	r3, r0
 800b154:	429c      	cmp	r4, r3
 800b156:	d001      	beq.n	800b15c <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800b158:	2300      	movs	r3, #0
 800b15a:	e022      	b.n	800b1a2 <cmp_lfn+0xd2>
			}
			wc = uc;
 800b15c:	89bb      	ldrh	r3, [r7, #12]
 800b15e:	81fb      	strh	r3, [r7, #14]
 800b160:	e006      	b.n	800b170 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800b162:	89bb      	ldrh	r3, [r7, #12]
 800b164:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b168:	4293      	cmp	r3, r2
 800b16a:	d001      	beq.n	800b170 <cmp_lfn+0xa0>
 800b16c:	2300      	movs	r3, #0
 800b16e:	e018      	b.n	800b1a2 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800b170:	693b      	ldr	r3, [r7, #16]
 800b172:	3301      	adds	r3, #1
 800b174:	613b      	str	r3, [r7, #16]
 800b176:	693b      	ldr	r3, [r7, #16]
 800b178:	2b0c      	cmp	r3, #12
 800b17a:	d9c8      	bls.n	800b10e <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800b17c:	683b      	ldr	r3, [r7, #0]
 800b17e:	781b      	ldrb	r3, [r3, #0]
 800b180:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b184:	2b00      	cmp	r3, #0
 800b186:	d00b      	beq.n	800b1a0 <cmp_lfn+0xd0>
 800b188:	89fb      	ldrh	r3, [r7, #14]
 800b18a:	2b00      	cmp	r3, #0
 800b18c:	d008      	beq.n	800b1a0 <cmp_lfn+0xd0>
 800b18e:	697b      	ldr	r3, [r7, #20]
 800b190:	005b      	lsls	r3, r3, #1
 800b192:	687a      	ldr	r2, [r7, #4]
 800b194:	4413      	add	r3, r2
 800b196:	881b      	ldrh	r3, [r3, #0]
 800b198:	2b00      	cmp	r3, #0
 800b19a:	d001      	beq.n	800b1a0 <cmp_lfn+0xd0>
 800b19c:	2300      	movs	r3, #0
 800b19e:	e000      	b.n	800b1a2 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800b1a0:	2301      	movs	r3, #1
}
 800b1a2:	4618      	mov	r0, r3
 800b1a4:	371c      	adds	r7, #28
 800b1a6:	46bd      	mov	sp, r7
 800b1a8:	bd90      	pop	{r4, r7, pc}
 800b1aa:	bf00      	nop
 800b1ac:	0800e2a0 	.word	0x0800e2a0

0800b1b0 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800b1b0:	b580      	push	{r7, lr}
 800b1b2:	b088      	sub	sp, #32
 800b1b4:	af00      	add	r7, sp, #0
 800b1b6:	60f8      	str	r0, [r7, #12]
 800b1b8:	60b9      	str	r1, [r7, #8]
 800b1ba:	4611      	mov	r1, r2
 800b1bc:	461a      	mov	r2, r3
 800b1be:	460b      	mov	r3, r1
 800b1c0:	71fb      	strb	r3, [r7, #7]
 800b1c2:	4613      	mov	r3, r2
 800b1c4:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800b1c6:	68bb      	ldr	r3, [r7, #8]
 800b1c8:	330d      	adds	r3, #13
 800b1ca:	79ba      	ldrb	r2, [r7, #6]
 800b1cc:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800b1ce:	68bb      	ldr	r3, [r7, #8]
 800b1d0:	330b      	adds	r3, #11
 800b1d2:	220f      	movs	r2, #15
 800b1d4:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800b1d6:	68bb      	ldr	r3, [r7, #8]
 800b1d8:	330c      	adds	r3, #12
 800b1da:	2200      	movs	r2, #0
 800b1dc:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800b1de:	68bb      	ldr	r3, [r7, #8]
 800b1e0:	331a      	adds	r3, #26
 800b1e2:	2100      	movs	r1, #0
 800b1e4:	4618      	mov	r0, r3
 800b1e6:	f7fe ff72 	bl	800a0ce <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800b1ea:	79fb      	ldrb	r3, [r7, #7]
 800b1ec:	1e5a      	subs	r2, r3, #1
 800b1ee:	4613      	mov	r3, r2
 800b1f0:	005b      	lsls	r3, r3, #1
 800b1f2:	4413      	add	r3, r2
 800b1f4:	009b      	lsls	r3, r3, #2
 800b1f6:	4413      	add	r3, r2
 800b1f8:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800b1fa:	2300      	movs	r3, #0
 800b1fc:	82fb      	strh	r3, [r7, #22]
 800b1fe:	2300      	movs	r3, #0
 800b200:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800b202:	8afb      	ldrh	r3, [r7, #22]
 800b204:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b208:	4293      	cmp	r3, r2
 800b20a:	d007      	beq.n	800b21c <put_lfn+0x6c>
 800b20c:	69fb      	ldr	r3, [r7, #28]
 800b20e:	1c5a      	adds	r2, r3, #1
 800b210:	61fa      	str	r2, [r7, #28]
 800b212:	005b      	lsls	r3, r3, #1
 800b214:	68fa      	ldr	r2, [r7, #12]
 800b216:	4413      	add	r3, r2
 800b218:	881b      	ldrh	r3, [r3, #0]
 800b21a:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800b21c:	4a17      	ldr	r2, [pc, #92]	; (800b27c <put_lfn+0xcc>)
 800b21e:	69bb      	ldr	r3, [r7, #24]
 800b220:	4413      	add	r3, r2
 800b222:	781b      	ldrb	r3, [r3, #0]
 800b224:	461a      	mov	r2, r3
 800b226:	68bb      	ldr	r3, [r7, #8]
 800b228:	4413      	add	r3, r2
 800b22a:	8afa      	ldrh	r2, [r7, #22]
 800b22c:	4611      	mov	r1, r2
 800b22e:	4618      	mov	r0, r3
 800b230:	f7fe ff4d 	bl	800a0ce <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800b234:	8afb      	ldrh	r3, [r7, #22]
 800b236:	2b00      	cmp	r3, #0
 800b238:	d102      	bne.n	800b240 <put_lfn+0x90>
 800b23a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b23e:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800b240:	69bb      	ldr	r3, [r7, #24]
 800b242:	3301      	adds	r3, #1
 800b244:	61bb      	str	r3, [r7, #24]
 800b246:	69bb      	ldr	r3, [r7, #24]
 800b248:	2b0c      	cmp	r3, #12
 800b24a:	d9da      	bls.n	800b202 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800b24c:	8afb      	ldrh	r3, [r7, #22]
 800b24e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b252:	4293      	cmp	r3, r2
 800b254:	d006      	beq.n	800b264 <put_lfn+0xb4>
 800b256:	69fb      	ldr	r3, [r7, #28]
 800b258:	005b      	lsls	r3, r3, #1
 800b25a:	68fa      	ldr	r2, [r7, #12]
 800b25c:	4413      	add	r3, r2
 800b25e:	881b      	ldrh	r3, [r3, #0]
 800b260:	2b00      	cmp	r3, #0
 800b262:	d103      	bne.n	800b26c <put_lfn+0xbc>
 800b264:	79fb      	ldrb	r3, [r7, #7]
 800b266:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b26a:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800b26c:	68bb      	ldr	r3, [r7, #8]
 800b26e:	79fa      	ldrb	r2, [r7, #7]
 800b270:	701a      	strb	r2, [r3, #0]
}
 800b272:	bf00      	nop
 800b274:	3720      	adds	r7, #32
 800b276:	46bd      	mov	sp, r7
 800b278:	bd80      	pop	{r7, pc}
 800b27a:	bf00      	nop
 800b27c:	0800e2a0 	.word	0x0800e2a0

0800b280 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800b280:	b580      	push	{r7, lr}
 800b282:	b08c      	sub	sp, #48	; 0x30
 800b284:	af00      	add	r7, sp, #0
 800b286:	60f8      	str	r0, [r7, #12]
 800b288:	60b9      	str	r1, [r7, #8]
 800b28a:	607a      	str	r2, [r7, #4]
 800b28c:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800b28e:	220b      	movs	r2, #11
 800b290:	68b9      	ldr	r1, [r7, #8]
 800b292:	68f8      	ldr	r0, [r7, #12]
 800b294:	f7fe ff62 	bl	800a15c <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800b298:	683b      	ldr	r3, [r7, #0]
 800b29a:	2b05      	cmp	r3, #5
 800b29c:	d92b      	bls.n	800b2f6 <gen_numname+0x76>
		sr = seq;
 800b29e:	683b      	ldr	r3, [r7, #0]
 800b2a0:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800b2a2:	e022      	b.n	800b2ea <gen_numname+0x6a>
			wc = *lfn++;
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	1c9a      	adds	r2, r3, #2
 800b2a8:	607a      	str	r2, [r7, #4]
 800b2aa:	881b      	ldrh	r3, [r3, #0]
 800b2ac:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800b2ae:	2300      	movs	r3, #0
 800b2b0:	62bb      	str	r3, [r7, #40]	; 0x28
 800b2b2:	e017      	b.n	800b2e4 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800b2b4:	69fb      	ldr	r3, [r7, #28]
 800b2b6:	005a      	lsls	r2, r3, #1
 800b2b8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b2ba:	f003 0301 	and.w	r3, r3, #1
 800b2be:	4413      	add	r3, r2
 800b2c0:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800b2c2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b2c4:	085b      	lsrs	r3, r3, #1
 800b2c6:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800b2c8:	69fb      	ldr	r3, [r7, #28]
 800b2ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	d005      	beq.n	800b2de <gen_numname+0x5e>
 800b2d2:	69fb      	ldr	r3, [r7, #28]
 800b2d4:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 800b2d8:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 800b2dc:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800b2de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2e0:	3301      	adds	r3, #1
 800b2e2:	62bb      	str	r3, [r7, #40]	; 0x28
 800b2e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2e6:	2b0f      	cmp	r3, #15
 800b2e8:	d9e4      	bls.n	800b2b4 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	881b      	ldrh	r3, [r3, #0]
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	d1d8      	bne.n	800b2a4 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800b2f2:	69fb      	ldr	r3, [r7, #28]
 800b2f4:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800b2f6:	2307      	movs	r3, #7
 800b2f8:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800b2fa:	683b      	ldr	r3, [r7, #0]
 800b2fc:	b2db      	uxtb	r3, r3
 800b2fe:	f003 030f 	and.w	r3, r3, #15
 800b302:	b2db      	uxtb	r3, r3
 800b304:	3330      	adds	r3, #48	; 0x30
 800b306:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800b30a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b30e:	2b39      	cmp	r3, #57	; 0x39
 800b310:	d904      	bls.n	800b31c <gen_numname+0x9c>
 800b312:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b316:	3307      	adds	r3, #7
 800b318:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800b31c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b31e:	1e5a      	subs	r2, r3, #1
 800b320:	62ba      	str	r2, [r7, #40]	; 0x28
 800b322:	3330      	adds	r3, #48	; 0x30
 800b324:	443b      	add	r3, r7
 800b326:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800b32a:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800b32e:	683b      	ldr	r3, [r7, #0]
 800b330:	091b      	lsrs	r3, r3, #4
 800b332:	603b      	str	r3, [r7, #0]
	} while (seq);
 800b334:	683b      	ldr	r3, [r7, #0]
 800b336:	2b00      	cmp	r3, #0
 800b338:	d1df      	bne.n	800b2fa <gen_numname+0x7a>
	ns[i] = '~';
 800b33a:	f107 0214 	add.w	r2, r7, #20
 800b33e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b340:	4413      	add	r3, r2
 800b342:	227e      	movs	r2, #126	; 0x7e
 800b344:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800b346:	2300      	movs	r3, #0
 800b348:	627b      	str	r3, [r7, #36]	; 0x24
 800b34a:	e002      	b.n	800b352 <gen_numname+0xd2>
 800b34c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b34e:	3301      	adds	r3, #1
 800b350:	627b      	str	r3, [r7, #36]	; 0x24
 800b352:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b354:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b356:	429a      	cmp	r2, r3
 800b358:	d205      	bcs.n	800b366 <gen_numname+0xe6>
 800b35a:	68fa      	ldr	r2, [r7, #12]
 800b35c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b35e:	4413      	add	r3, r2
 800b360:	781b      	ldrb	r3, [r3, #0]
 800b362:	2b20      	cmp	r3, #32
 800b364:	d1f2      	bne.n	800b34c <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800b366:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b368:	2b07      	cmp	r3, #7
 800b36a:	d807      	bhi.n	800b37c <gen_numname+0xfc>
 800b36c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b36e:	1c5a      	adds	r2, r3, #1
 800b370:	62ba      	str	r2, [r7, #40]	; 0x28
 800b372:	3330      	adds	r3, #48	; 0x30
 800b374:	443b      	add	r3, r7
 800b376:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800b37a:	e000      	b.n	800b37e <gen_numname+0xfe>
 800b37c:	2120      	movs	r1, #32
 800b37e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b380:	1c5a      	adds	r2, r3, #1
 800b382:	627a      	str	r2, [r7, #36]	; 0x24
 800b384:	68fa      	ldr	r2, [r7, #12]
 800b386:	4413      	add	r3, r2
 800b388:	460a      	mov	r2, r1
 800b38a:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800b38c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b38e:	2b07      	cmp	r3, #7
 800b390:	d9e9      	bls.n	800b366 <gen_numname+0xe6>
}
 800b392:	bf00      	nop
 800b394:	bf00      	nop
 800b396:	3730      	adds	r7, #48	; 0x30
 800b398:	46bd      	mov	sp, r7
 800b39a:	bd80      	pop	{r7, pc}

0800b39c <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800b39c:	b480      	push	{r7}
 800b39e:	b085      	sub	sp, #20
 800b3a0:	af00      	add	r7, sp, #0
 800b3a2:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800b3a4:	2300      	movs	r3, #0
 800b3a6:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800b3a8:	230b      	movs	r3, #11
 800b3aa:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800b3ac:	7bfb      	ldrb	r3, [r7, #15]
 800b3ae:	b2da      	uxtb	r2, r3
 800b3b0:	0852      	lsrs	r2, r2, #1
 800b3b2:	01db      	lsls	r3, r3, #7
 800b3b4:	4313      	orrs	r3, r2
 800b3b6:	b2da      	uxtb	r2, r3
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	1c59      	adds	r1, r3, #1
 800b3bc:	6079      	str	r1, [r7, #4]
 800b3be:	781b      	ldrb	r3, [r3, #0]
 800b3c0:	4413      	add	r3, r2
 800b3c2:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800b3c4:	68bb      	ldr	r3, [r7, #8]
 800b3c6:	3b01      	subs	r3, #1
 800b3c8:	60bb      	str	r3, [r7, #8]
 800b3ca:	68bb      	ldr	r3, [r7, #8]
 800b3cc:	2b00      	cmp	r3, #0
 800b3ce:	d1ed      	bne.n	800b3ac <sum_sfn+0x10>
	return sum;
 800b3d0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b3d2:	4618      	mov	r0, r3
 800b3d4:	3714      	adds	r7, #20
 800b3d6:	46bd      	mov	sp, r7
 800b3d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3dc:	4770      	bx	lr

0800b3de <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800b3de:	b580      	push	{r7, lr}
 800b3e0:	b086      	sub	sp, #24
 800b3e2:	af00      	add	r7, sp, #0
 800b3e4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	681b      	ldr	r3, [r3, #0]
 800b3ea:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800b3ec:	2100      	movs	r1, #0
 800b3ee:	6878      	ldr	r0, [r7, #4]
 800b3f0:	f7ff fc88 	bl	800ad04 <dir_sdi>
 800b3f4:	4603      	mov	r3, r0
 800b3f6:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800b3f8:	7dfb      	ldrb	r3, [r7, #23]
 800b3fa:	2b00      	cmp	r3, #0
 800b3fc:	d001      	beq.n	800b402 <dir_find+0x24>
 800b3fe:	7dfb      	ldrb	r3, [r7, #23]
 800b400:	e0a9      	b.n	800b556 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800b402:	23ff      	movs	r3, #255	; 0xff
 800b404:	753b      	strb	r3, [r7, #20]
 800b406:	7d3b      	ldrb	r3, [r7, #20]
 800b408:	757b      	strb	r3, [r7, #21]
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	f04f 32ff 	mov.w	r2, #4294967295
 800b410:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	69db      	ldr	r3, [r3, #28]
 800b416:	4619      	mov	r1, r3
 800b418:	6938      	ldr	r0, [r7, #16]
 800b41a:	f7ff f891 	bl	800a540 <move_window>
 800b41e:	4603      	mov	r3, r0
 800b420:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800b422:	7dfb      	ldrb	r3, [r7, #23]
 800b424:	2b00      	cmp	r3, #0
 800b426:	f040 8090 	bne.w	800b54a <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	6a1b      	ldr	r3, [r3, #32]
 800b42e:	781b      	ldrb	r3, [r3, #0]
 800b430:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800b432:	7dbb      	ldrb	r3, [r7, #22]
 800b434:	2b00      	cmp	r3, #0
 800b436:	d102      	bne.n	800b43e <dir_find+0x60>
 800b438:	2304      	movs	r3, #4
 800b43a:	75fb      	strb	r3, [r7, #23]
 800b43c:	e08a      	b.n	800b554 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	6a1b      	ldr	r3, [r3, #32]
 800b442:	330b      	adds	r3, #11
 800b444:	781b      	ldrb	r3, [r3, #0]
 800b446:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b44a:	73fb      	strb	r3, [r7, #15]
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	7bfa      	ldrb	r2, [r7, #15]
 800b450:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800b452:	7dbb      	ldrb	r3, [r7, #22]
 800b454:	2be5      	cmp	r3, #229	; 0xe5
 800b456:	d007      	beq.n	800b468 <dir_find+0x8a>
 800b458:	7bfb      	ldrb	r3, [r7, #15]
 800b45a:	f003 0308 	and.w	r3, r3, #8
 800b45e:	2b00      	cmp	r3, #0
 800b460:	d009      	beq.n	800b476 <dir_find+0x98>
 800b462:	7bfb      	ldrb	r3, [r7, #15]
 800b464:	2b0f      	cmp	r3, #15
 800b466:	d006      	beq.n	800b476 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800b468:	23ff      	movs	r3, #255	; 0xff
 800b46a:	757b      	strb	r3, [r7, #21]
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	f04f 32ff 	mov.w	r2, #4294967295
 800b472:	631a      	str	r2, [r3, #48]	; 0x30
 800b474:	e05e      	b.n	800b534 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800b476:	7bfb      	ldrb	r3, [r7, #15]
 800b478:	2b0f      	cmp	r3, #15
 800b47a:	d136      	bne.n	800b4ea <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800b482:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b486:	2b00      	cmp	r3, #0
 800b488:	d154      	bne.n	800b534 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800b48a:	7dbb      	ldrb	r3, [r7, #22]
 800b48c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b490:	2b00      	cmp	r3, #0
 800b492:	d00d      	beq.n	800b4b0 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	6a1b      	ldr	r3, [r3, #32]
 800b498:	7b5b      	ldrb	r3, [r3, #13]
 800b49a:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800b49c:	7dbb      	ldrb	r3, [r7, #22]
 800b49e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b4a2:	75bb      	strb	r3, [r7, #22]
 800b4a4:	7dbb      	ldrb	r3, [r7, #22]
 800b4a6:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	695a      	ldr	r2, [r3, #20]
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800b4b0:	7dba      	ldrb	r2, [r7, #22]
 800b4b2:	7d7b      	ldrb	r3, [r7, #21]
 800b4b4:	429a      	cmp	r2, r3
 800b4b6:	d115      	bne.n	800b4e4 <dir_find+0x106>
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	6a1b      	ldr	r3, [r3, #32]
 800b4bc:	330d      	adds	r3, #13
 800b4be:	781b      	ldrb	r3, [r3, #0]
 800b4c0:	7d3a      	ldrb	r2, [r7, #20]
 800b4c2:	429a      	cmp	r2, r3
 800b4c4:	d10e      	bne.n	800b4e4 <dir_find+0x106>
 800b4c6:	693b      	ldr	r3, [r7, #16]
 800b4c8:	691a      	ldr	r2, [r3, #16]
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	6a1b      	ldr	r3, [r3, #32]
 800b4ce:	4619      	mov	r1, r3
 800b4d0:	4610      	mov	r0, r2
 800b4d2:	f7ff fdfd 	bl	800b0d0 <cmp_lfn>
 800b4d6:	4603      	mov	r3, r0
 800b4d8:	2b00      	cmp	r3, #0
 800b4da:	d003      	beq.n	800b4e4 <dir_find+0x106>
 800b4dc:	7d7b      	ldrb	r3, [r7, #21]
 800b4de:	3b01      	subs	r3, #1
 800b4e0:	b2db      	uxtb	r3, r3
 800b4e2:	e000      	b.n	800b4e6 <dir_find+0x108>
 800b4e4:	23ff      	movs	r3, #255	; 0xff
 800b4e6:	757b      	strb	r3, [r7, #21]
 800b4e8:	e024      	b.n	800b534 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800b4ea:	7d7b      	ldrb	r3, [r7, #21]
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	d109      	bne.n	800b504 <dir_find+0x126>
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	6a1b      	ldr	r3, [r3, #32]
 800b4f4:	4618      	mov	r0, r3
 800b4f6:	f7ff ff51 	bl	800b39c <sum_sfn>
 800b4fa:	4603      	mov	r3, r0
 800b4fc:	461a      	mov	r2, r3
 800b4fe:	7d3b      	ldrb	r3, [r7, #20]
 800b500:	4293      	cmp	r3, r2
 800b502:	d024      	beq.n	800b54e <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800b50a:	f003 0301 	and.w	r3, r3, #1
 800b50e:	2b00      	cmp	r3, #0
 800b510:	d10a      	bne.n	800b528 <dir_find+0x14a>
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	6a18      	ldr	r0, [r3, #32]
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	3324      	adds	r3, #36	; 0x24
 800b51a:	220b      	movs	r2, #11
 800b51c:	4619      	mov	r1, r3
 800b51e:	f7fe fe59 	bl	800a1d4 <mem_cmp>
 800b522:	4603      	mov	r3, r0
 800b524:	2b00      	cmp	r3, #0
 800b526:	d014      	beq.n	800b552 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800b528:	23ff      	movs	r3, #255	; 0xff
 800b52a:	757b      	strb	r3, [r7, #21]
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	f04f 32ff 	mov.w	r2, #4294967295
 800b532:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800b534:	2100      	movs	r1, #0
 800b536:	6878      	ldr	r0, [r7, #4]
 800b538:	f7ff fc6d 	bl	800ae16 <dir_next>
 800b53c:	4603      	mov	r3, r0
 800b53e:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800b540:	7dfb      	ldrb	r3, [r7, #23]
 800b542:	2b00      	cmp	r3, #0
 800b544:	f43f af65 	beq.w	800b412 <dir_find+0x34>
 800b548:	e004      	b.n	800b554 <dir_find+0x176>
		if (res != FR_OK) break;
 800b54a:	bf00      	nop
 800b54c:	e002      	b.n	800b554 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800b54e:	bf00      	nop
 800b550:	e000      	b.n	800b554 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800b552:	bf00      	nop

	return res;
 800b554:	7dfb      	ldrb	r3, [r7, #23]
}
 800b556:	4618      	mov	r0, r3
 800b558:	3718      	adds	r7, #24
 800b55a:	46bd      	mov	sp, r7
 800b55c:	bd80      	pop	{r7, pc}
	...

0800b560 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800b560:	b580      	push	{r7, lr}
 800b562:	b08c      	sub	sp, #48	; 0x30
 800b564:	af00      	add	r7, sp, #0
 800b566:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	681b      	ldr	r3, [r3, #0]
 800b56c:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800b574:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800b578:	2b00      	cmp	r3, #0
 800b57a:	d001      	beq.n	800b580 <dir_register+0x20>
 800b57c:	2306      	movs	r3, #6
 800b57e:	e0e0      	b.n	800b742 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800b580:	2300      	movs	r3, #0
 800b582:	627b      	str	r3, [r7, #36]	; 0x24
 800b584:	e002      	b.n	800b58c <dir_register+0x2c>
 800b586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b588:	3301      	adds	r3, #1
 800b58a:	627b      	str	r3, [r7, #36]	; 0x24
 800b58c:	69fb      	ldr	r3, [r7, #28]
 800b58e:	691a      	ldr	r2, [r3, #16]
 800b590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b592:	005b      	lsls	r3, r3, #1
 800b594:	4413      	add	r3, r2
 800b596:	881b      	ldrh	r3, [r3, #0]
 800b598:	2b00      	cmp	r3, #0
 800b59a:	d1f4      	bne.n	800b586 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800b5a2:	f107 030c 	add.w	r3, r7, #12
 800b5a6:	220c      	movs	r2, #12
 800b5a8:	4618      	mov	r0, r3
 800b5aa:	f7fe fdd7 	bl	800a15c <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800b5ae:	7dfb      	ldrb	r3, [r7, #23]
 800b5b0:	f003 0301 	and.w	r3, r3, #1
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	d032      	beq.n	800b61e <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	2240      	movs	r2, #64	; 0x40
 800b5bc:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 800b5c0:	2301      	movs	r3, #1
 800b5c2:	62bb      	str	r3, [r7, #40]	; 0x28
 800b5c4:	e016      	b.n	800b5f4 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	f103 0024 	add.w	r0, r3, #36	; 0x24
 800b5cc:	69fb      	ldr	r3, [r7, #28]
 800b5ce:	691a      	ldr	r2, [r3, #16]
 800b5d0:	f107 010c 	add.w	r1, r7, #12
 800b5d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5d6:	f7ff fe53 	bl	800b280 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800b5da:	6878      	ldr	r0, [r7, #4]
 800b5dc:	f7ff feff 	bl	800b3de <dir_find>
 800b5e0:	4603      	mov	r3, r0
 800b5e2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 800b5e6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b5ea:	2b00      	cmp	r3, #0
 800b5ec:	d106      	bne.n	800b5fc <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800b5ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5f0:	3301      	adds	r3, #1
 800b5f2:	62bb      	str	r3, [r7, #40]	; 0x28
 800b5f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5f6:	2b63      	cmp	r3, #99	; 0x63
 800b5f8:	d9e5      	bls.n	800b5c6 <dir_register+0x66>
 800b5fa:	e000      	b.n	800b5fe <dir_register+0x9e>
			if (res != FR_OK) break;
 800b5fc:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800b5fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b600:	2b64      	cmp	r3, #100	; 0x64
 800b602:	d101      	bne.n	800b608 <dir_register+0xa8>
 800b604:	2307      	movs	r3, #7
 800b606:	e09c      	b.n	800b742 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800b608:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b60c:	2b04      	cmp	r3, #4
 800b60e:	d002      	beq.n	800b616 <dir_register+0xb6>
 800b610:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b614:	e095      	b.n	800b742 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800b616:	7dfa      	ldrb	r2, [r7, #23]
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800b61e:	7dfb      	ldrb	r3, [r7, #23]
 800b620:	f003 0302 	and.w	r3, r3, #2
 800b624:	2b00      	cmp	r3, #0
 800b626:	d007      	beq.n	800b638 <dir_register+0xd8>
 800b628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b62a:	330c      	adds	r3, #12
 800b62c:	4a47      	ldr	r2, [pc, #284]	; (800b74c <dir_register+0x1ec>)
 800b62e:	fba2 2303 	umull	r2, r3, r2, r3
 800b632:	089b      	lsrs	r3, r3, #2
 800b634:	3301      	adds	r3, #1
 800b636:	e000      	b.n	800b63a <dir_register+0xda>
 800b638:	2301      	movs	r3, #1
 800b63a:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800b63c:	6a39      	ldr	r1, [r7, #32]
 800b63e:	6878      	ldr	r0, [r7, #4]
 800b640:	f7ff fcbf 	bl	800afc2 <dir_alloc>
 800b644:	4603      	mov	r3, r0
 800b646:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800b64a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b64e:	2b00      	cmp	r3, #0
 800b650:	d148      	bne.n	800b6e4 <dir_register+0x184>
 800b652:	6a3b      	ldr	r3, [r7, #32]
 800b654:	3b01      	subs	r3, #1
 800b656:	623b      	str	r3, [r7, #32]
 800b658:	6a3b      	ldr	r3, [r7, #32]
 800b65a:	2b00      	cmp	r3, #0
 800b65c:	d042      	beq.n	800b6e4 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	695a      	ldr	r2, [r3, #20]
 800b662:	6a3b      	ldr	r3, [r7, #32]
 800b664:	015b      	lsls	r3, r3, #5
 800b666:	1ad3      	subs	r3, r2, r3
 800b668:	4619      	mov	r1, r3
 800b66a:	6878      	ldr	r0, [r7, #4]
 800b66c:	f7ff fb4a 	bl	800ad04 <dir_sdi>
 800b670:	4603      	mov	r3, r0
 800b672:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800b676:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	d132      	bne.n	800b6e4 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	3324      	adds	r3, #36	; 0x24
 800b682:	4618      	mov	r0, r3
 800b684:	f7ff fe8a 	bl	800b39c <sum_sfn>
 800b688:	4603      	mov	r3, r0
 800b68a:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	69db      	ldr	r3, [r3, #28]
 800b690:	4619      	mov	r1, r3
 800b692:	69f8      	ldr	r0, [r7, #28]
 800b694:	f7fe ff54 	bl	800a540 <move_window>
 800b698:	4603      	mov	r3, r0
 800b69a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 800b69e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b6a2:	2b00      	cmp	r3, #0
 800b6a4:	d11d      	bne.n	800b6e2 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800b6a6:	69fb      	ldr	r3, [r7, #28]
 800b6a8:	6918      	ldr	r0, [r3, #16]
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	6a19      	ldr	r1, [r3, #32]
 800b6ae:	6a3b      	ldr	r3, [r7, #32]
 800b6b0:	b2da      	uxtb	r2, r3
 800b6b2:	7efb      	ldrb	r3, [r7, #27]
 800b6b4:	f7ff fd7c 	bl	800b1b0 <put_lfn>
				fs->wflag = 1;
 800b6b8:	69fb      	ldr	r3, [r7, #28]
 800b6ba:	2201      	movs	r2, #1
 800b6bc:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800b6be:	2100      	movs	r1, #0
 800b6c0:	6878      	ldr	r0, [r7, #4]
 800b6c2:	f7ff fba8 	bl	800ae16 <dir_next>
 800b6c6:	4603      	mov	r3, r0
 800b6c8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 800b6cc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b6d0:	2b00      	cmp	r3, #0
 800b6d2:	d107      	bne.n	800b6e4 <dir_register+0x184>
 800b6d4:	6a3b      	ldr	r3, [r7, #32]
 800b6d6:	3b01      	subs	r3, #1
 800b6d8:	623b      	str	r3, [r7, #32]
 800b6da:	6a3b      	ldr	r3, [r7, #32]
 800b6dc:	2b00      	cmp	r3, #0
 800b6de:	d1d5      	bne.n	800b68c <dir_register+0x12c>
 800b6e0:	e000      	b.n	800b6e4 <dir_register+0x184>
				if (res != FR_OK) break;
 800b6e2:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800b6e4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b6e8:	2b00      	cmp	r3, #0
 800b6ea:	d128      	bne.n	800b73e <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	69db      	ldr	r3, [r3, #28]
 800b6f0:	4619      	mov	r1, r3
 800b6f2:	69f8      	ldr	r0, [r7, #28]
 800b6f4:	f7fe ff24 	bl	800a540 <move_window>
 800b6f8:	4603      	mov	r3, r0
 800b6fa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800b6fe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b702:	2b00      	cmp	r3, #0
 800b704:	d11b      	bne.n	800b73e <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	6a1b      	ldr	r3, [r3, #32]
 800b70a:	2220      	movs	r2, #32
 800b70c:	2100      	movs	r1, #0
 800b70e:	4618      	mov	r0, r3
 800b710:	f7fe fd45 	bl	800a19e <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	6a18      	ldr	r0, [r3, #32]
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	3324      	adds	r3, #36	; 0x24
 800b71c:	220b      	movs	r2, #11
 800b71e:	4619      	mov	r1, r3
 800b720:	f7fe fd1c 	bl	800a15c <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	6a1b      	ldr	r3, [r3, #32]
 800b72e:	330c      	adds	r3, #12
 800b730:	f002 0218 	and.w	r2, r2, #24
 800b734:	b2d2      	uxtb	r2, r2
 800b736:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800b738:	69fb      	ldr	r3, [r7, #28]
 800b73a:	2201      	movs	r2, #1
 800b73c:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800b73e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800b742:	4618      	mov	r0, r3
 800b744:	3730      	adds	r7, #48	; 0x30
 800b746:	46bd      	mov	sp, r7
 800b748:	bd80      	pop	{r7, pc}
 800b74a:	bf00      	nop
 800b74c:	4ec4ec4f 	.word	0x4ec4ec4f

0800b750 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800b750:	b580      	push	{r7, lr}
 800b752:	b08a      	sub	sp, #40	; 0x28
 800b754:	af00      	add	r7, sp, #0
 800b756:	6078      	str	r0, [r7, #4]
 800b758:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800b75a:	683b      	ldr	r3, [r7, #0]
 800b75c:	681b      	ldr	r3, [r3, #0]
 800b75e:	613b      	str	r3, [r7, #16]
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	681b      	ldr	r3, [r3, #0]
 800b764:	691b      	ldr	r3, [r3, #16]
 800b766:	60fb      	str	r3, [r7, #12]
 800b768:	2300      	movs	r3, #0
 800b76a:	617b      	str	r3, [r7, #20]
 800b76c:	697b      	ldr	r3, [r7, #20]
 800b76e:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800b770:	69bb      	ldr	r3, [r7, #24]
 800b772:	1c5a      	adds	r2, r3, #1
 800b774:	61ba      	str	r2, [r7, #24]
 800b776:	693a      	ldr	r2, [r7, #16]
 800b778:	4413      	add	r3, r2
 800b77a:	781b      	ldrb	r3, [r3, #0]
 800b77c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800b77e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b780:	2b1f      	cmp	r3, #31
 800b782:	d940      	bls.n	800b806 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800b784:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b786:	2b2f      	cmp	r3, #47	; 0x2f
 800b788:	d006      	beq.n	800b798 <create_name+0x48>
 800b78a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b78c:	2b5c      	cmp	r3, #92	; 0x5c
 800b78e:	d110      	bne.n	800b7b2 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800b790:	e002      	b.n	800b798 <create_name+0x48>
 800b792:	69bb      	ldr	r3, [r7, #24]
 800b794:	3301      	adds	r3, #1
 800b796:	61bb      	str	r3, [r7, #24]
 800b798:	693a      	ldr	r2, [r7, #16]
 800b79a:	69bb      	ldr	r3, [r7, #24]
 800b79c:	4413      	add	r3, r2
 800b79e:	781b      	ldrb	r3, [r3, #0]
 800b7a0:	2b2f      	cmp	r3, #47	; 0x2f
 800b7a2:	d0f6      	beq.n	800b792 <create_name+0x42>
 800b7a4:	693a      	ldr	r2, [r7, #16]
 800b7a6:	69bb      	ldr	r3, [r7, #24]
 800b7a8:	4413      	add	r3, r2
 800b7aa:	781b      	ldrb	r3, [r3, #0]
 800b7ac:	2b5c      	cmp	r3, #92	; 0x5c
 800b7ae:	d0f0      	beq.n	800b792 <create_name+0x42>
			break;
 800b7b0:	e02a      	b.n	800b808 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800b7b2:	697b      	ldr	r3, [r7, #20]
 800b7b4:	2bfe      	cmp	r3, #254	; 0xfe
 800b7b6:	d901      	bls.n	800b7bc <create_name+0x6c>
 800b7b8:	2306      	movs	r3, #6
 800b7ba:	e17d      	b.n	800bab8 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 800b7bc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b7be:	b2db      	uxtb	r3, r3
 800b7c0:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800b7c2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b7c4:	2101      	movs	r1, #1
 800b7c6:	4618      	mov	r0, r3
 800b7c8:	f001 f9c6 	bl	800cb58 <ff_convert>
 800b7cc:	4603      	mov	r3, r0
 800b7ce:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800b7d0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b7d2:	2b00      	cmp	r3, #0
 800b7d4:	d101      	bne.n	800b7da <create_name+0x8a>
 800b7d6:	2306      	movs	r3, #6
 800b7d8:	e16e      	b.n	800bab8 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800b7da:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b7dc:	2b7f      	cmp	r3, #127	; 0x7f
 800b7de:	d809      	bhi.n	800b7f4 <create_name+0xa4>
 800b7e0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b7e2:	4619      	mov	r1, r3
 800b7e4:	488d      	ldr	r0, [pc, #564]	; (800ba1c <create_name+0x2cc>)
 800b7e6:	f7fe fd1c 	bl	800a222 <chk_chr>
 800b7ea:	4603      	mov	r3, r0
 800b7ec:	2b00      	cmp	r3, #0
 800b7ee:	d001      	beq.n	800b7f4 <create_name+0xa4>
 800b7f0:	2306      	movs	r3, #6
 800b7f2:	e161      	b.n	800bab8 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 800b7f4:	697b      	ldr	r3, [r7, #20]
 800b7f6:	1c5a      	adds	r2, r3, #1
 800b7f8:	617a      	str	r2, [r7, #20]
 800b7fa:	005b      	lsls	r3, r3, #1
 800b7fc:	68fa      	ldr	r2, [r7, #12]
 800b7fe:	4413      	add	r3, r2
 800b800:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800b802:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800b804:	e7b4      	b.n	800b770 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800b806:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800b808:	693a      	ldr	r2, [r7, #16]
 800b80a:	69bb      	ldr	r3, [r7, #24]
 800b80c:	441a      	add	r2, r3
 800b80e:	683b      	ldr	r3, [r7, #0]
 800b810:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800b812:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b814:	2b1f      	cmp	r3, #31
 800b816:	d801      	bhi.n	800b81c <create_name+0xcc>
 800b818:	2304      	movs	r3, #4
 800b81a:	e000      	b.n	800b81e <create_name+0xce>
 800b81c:	2300      	movs	r3, #0
 800b81e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800b822:	e011      	b.n	800b848 <create_name+0xf8>
		w = lfn[di - 1];
 800b824:	697b      	ldr	r3, [r7, #20]
 800b826:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800b82a:	3b01      	subs	r3, #1
 800b82c:	005b      	lsls	r3, r3, #1
 800b82e:	68fa      	ldr	r2, [r7, #12]
 800b830:	4413      	add	r3, r2
 800b832:	881b      	ldrh	r3, [r3, #0]
 800b834:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800b836:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b838:	2b20      	cmp	r3, #32
 800b83a:	d002      	beq.n	800b842 <create_name+0xf2>
 800b83c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b83e:	2b2e      	cmp	r3, #46	; 0x2e
 800b840:	d106      	bne.n	800b850 <create_name+0x100>
		di--;
 800b842:	697b      	ldr	r3, [r7, #20]
 800b844:	3b01      	subs	r3, #1
 800b846:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800b848:	697b      	ldr	r3, [r7, #20]
 800b84a:	2b00      	cmp	r3, #0
 800b84c:	d1ea      	bne.n	800b824 <create_name+0xd4>
 800b84e:	e000      	b.n	800b852 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800b850:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800b852:	697b      	ldr	r3, [r7, #20]
 800b854:	005b      	lsls	r3, r3, #1
 800b856:	68fa      	ldr	r2, [r7, #12]
 800b858:	4413      	add	r3, r2
 800b85a:	2200      	movs	r2, #0
 800b85c:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800b85e:	697b      	ldr	r3, [r7, #20]
 800b860:	2b00      	cmp	r3, #0
 800b862:	d101      	bne.n	800b868 <create_name+0x118>
 800b864:	2306      	movs	r3, #6
 800b866:	e127      	b.n	800bab8 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	3324      	adds	r3, #36	; 0x24
 800b86c:	220b      	movs	r2, #11
 800b86e:	2120      	movs	r1, #32
 800b870:	4618      	mov	r0, r3
 800b872:	f7fe fc94 	bl	800a19e <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800b876:	2300      	movs	r3, #0
 800b878:	61bb      	str	r3, [r7, #24]
 800b87a:	e002      	b.n	800b882 <create_name+0x132>
 800b87c:	69bb      	ldr	r3, [r7, #24]
 800b87e:	3301      	adds	r3, #1
 800b880:	61bb      	str	r3, [r7, #24]
 800b882:	69bb      	ldr	r3, [r7, #24]
 800b884:	005b      	lsls	r3, r3, #1
 800b886:	68fa      	ldr	r2, [r7, #12]
 800b888:	4413      	add	r3, r2
 800b88a:	881b      	ldrh	r3, [r3, #0]
 800b88c:	2b20      	cmp	r3, #32
 800b88e:	d0f5      	beq.n	800b87c <create_name+0x12c>
 800b890:	69bb      	ldr	r3, [r7, #24]
 800b892:	005b      	lsls	r3, r3, #1
 800b894:	68fa      	ldr	r2, [r7, #12]
 800b896:	4413      	add	r3, r2
 800b898:	881b      	ldrh	r3, [r3, #0]
 800b89a:	2b2e      	cmp	r3, #46	; 0x2e
 800b89c:	d0ee      	beq.n	800b87c <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800b89e:	69bb      	ldr	r3, [r7, #24]
 800b8a0:	2b00      	cmp	r3, #0
 800b8a2:	d009      	beq.n	800b8b8 <create_name+0x168>
 800b8a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b8a8:	f043 0303 	orr.w	r3, r3, #3
 800b8ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800b8b0:	e002      	b.n	800b8b8 <create_name+0x168>
 800b8b2:	697b      	ldr	r3, [r7, #20]
 800b8b4:	3b01      	subs	r3, #1
 800b8b6:	617b      	str	r3, [r7, #20]
 800b8b8:	697b      	ldr	r3, [r7, #20]
 800b8ba:	2b00      	cmp	r3, #0
 800b8bc:	d009      	beq.n	800b8d2 <create_name+0x182>
 800b8be:	697b      	ldr	r3, [r7, #20]
 800b8c0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800b8c4:	3b01      	subs	r3, #1
 800b8c6:	005b      	lsls	r3, r3, #1
 800b8c8:	68fa      	ldr	r2, [r7, #12]
 800b8ca:	4413      	add	r3, r2
 800b8cc:	881b      	ldrh	r3, [r3, #0]
 800b8ce:	2b2e      	cmp	r3, #46	; 0x2e
 800b8d0:	d1ef      	bne.n	800b8b2 <create_name+0x162>

	i = b = 0; ni = 8;
 800b8d2:	2300      	movs	r3, #0
 800b8d4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800b8d8:	2300      	movs	r3, #0
 800b8da:	623b      	str	r3, [r7, #32]
 800b8dc:	2308      	movs	r3, #8
 800b8de:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800b8e0:	69bb      	ldr	r3, [r7, #24]
 800b8e2:	1c5a      	adds	r2, r3, #1
 800b8e4:	61ba      	str	r2, [r7, #24]
 800b8e6:	005b      	lsls	r3, r3, #1
 800b8e8:	68fa      	ldr	r2, [r7, #12]
 800b8ea:	4413      	add	r3, r2
 800b8ec:	881b      	ldrh	r3, [r3, #0]
 800b8ee:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800b8f0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b8f2:	2b00      	cmp	r3, #0
 800b8f4:	f000 8090 	beq.w	800ba18 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800b8f8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b8fa:	2b20      	cmp	r3, #32
 800b8fc:	d006      	beq.n	800b90c <create_name+0x1bc>
 800b8fe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b900:	2b2e      	cmp	r3, #46	; 0x2e
 800b902:	d10a      	bne.n	800b91a <create_name+0x1ca>
 800b904:	69ba      	ldr	r2, [r7, #24]
 800b906:	697b      	ldr	r3, [r7, #20]
 800b908:	429a      	cmp	r2, r3
 800b90a:	d006      	beq.n	800b91a <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800b90c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b910:	f043 0303 	orr.w	r3, r3, #3
 800b914:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b918:	e07d      	b.n	800ba16 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800b91a:	6a3a      	ldr	r2, [r7, #32]
 800b91c:	69fb      	ldr	r3, [r7, #28]
 800b91e:	429a      	cmp	r2, r3
 800b920:	d203      	bcs.n	800b92a <create_name+0x1da>
 800b922:	69ba      	ldr	r2, [r7, #24]
 800b924:	697b      	ldr	r3, [r7, #20]
 800b926:	429a      	cmp	r2, r3
 800b928:	d123      	bne.n	800b972 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800b92a:	69fb      	ldr	r3, [r7, #28]
 800b92c:	2b0b      	cmp	r3, #11
 800b92e:	d106      	bne.n	800b93e <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800b930:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b934:	f043 0303 	orr.w	r3, r3, #3
 800b938:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b93c:	e075      	b.n	800ba2a <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800b93e:	69ba      	ldr	r2, [r7, #24]
 800b940:	697b      	ldr	r3, [r7, #20]
 800b942:	429a      	cmp	r2, r3
 800b944:	d005      	beq.n	800b952 <create_name+0x202>
 800b946:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b94a:	f043 0303 	orr.w	r3, r3, #3
 800b94e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800b952:	69ba      	ldr	r2, [r7, #24]
 800b954:	697b      	ldr	r3, [r7, #20]
 800b956:	429a      	cmp	r2, r3
 800b958:	d866      	bhi.n	800ba28 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800b95a:	697b      	ldr	r3, [r7, #20]
 800b95c:	61bb      	str	r3, [r7, #24]
 800b95e:	2308      	movs	r3, #8
 800b960:	623b      	str	r3, [r7, #32]
 800b962:	230b      	movs	r3, #11
 800b964:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800b966:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b96a:	009b      	lsls	r3, r3, #2
 800b96c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800b970:	e051      	b.n	800ba16 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800b972:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b974:	2b7f      	cmp	r3, #127	; 0x7f
 800b976:	d914      	bls.n	800b9a2 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800b978:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b97a:	2100      	movs	r1, #0
 800b97c:	4618      	mov	r0, r3
 800b97e:	f001 f8eb 	bl	800cb58 <ff_convert>
 800b982:	4603      	mov	r3, r0
 800b984:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800b986:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b988:	2b00      	cmp	r3, #0
 800b98a:	d004      	beq.n	800b996 <create_name+0x246>
 800b98c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b98e:	3b80      	subs	r3, #128	; 0x80
 800b990:	4a23      	ldr	r2, [pc, #140]	; (800ba20 <create_name+0x2d0>)
 800b992:	5cd3      	ldrb	r3, [r2, r3]
 800b994:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800b996:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b99a:	f043 0302 	orr.w	r3, r3, #2
 800b99e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800b9a2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b9a4:	2b00      	cmp	r3, #0
 800b9a6:	d007      	beq.n	800b9b8 <create_name+0x268>
 800b9a8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b9aa:	4619      	mov	r1, r3
 800b9ac:	481d      	ldr	r0, [pc, #116]	; (800ba24 <create_name+0x2d4>)
 800b9ae:	f7fe fc38 	bl	800a222 <chk_chr>
 800b9b2:	4603      	mov	r3, r0
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	d008      	beq.n	800b9ca <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800b9b8:	235f      	movs	r3, #95	; 0x5f
 800b9ba:	84bb      	strh	r3, [r7, #36]	; 0x24
 800b9bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b9c0:	f043 0303 	orr.w	r3, r3, #3
 800b9c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b9c8:	e01b      	b.n	800ba02 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800b9ca:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b9cc:	2b40      	cmp	r3, #64	; 0x40
 800b9ce:	d909      	bls.n	800b9e4 <create_name+0x294>
 800b9d0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b9d2:	2b5a      	cmp	r3, #90	; 0x5a
 800b9d4:	d806      	bhi.n	800b9e4 <create_name+0x294>
					b |= 2;
 800b9d6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b9da:	f043 0302 	orr.w	r3, r3, #2
 800b9de:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800b9e2:	e00e      	b.n	800ba02 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800b9e4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b9e6:	2b60      	cmp	r3, #96	; 0x60
 800b9e8:	d90b      	bls.n	800ba02 <create_name+0x2b2>
 800b9ea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b9ec:	2b7a      	cmp	r3, #122	; 0x7a
 800b9ee:	d808      	bhi.n	800ba02 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800b9f0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b9f4:	f043 0301 	orr.w	r3, r3, #1
 800b9f8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800b9fc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b9fe:	3b20      	subs	r3, #32
 800ba00:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800ba02:	6a3b      	ldr	r3, [r7, #32]
 800ba04:	1c5a      	adds	r2, r3, #1
 800ba06:	623a      	str	r2, [r7, #32]
 800ba08:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800ba0a:	b2d1      	uxtb	r1, r2
 800ba0c:	687a      	ldr	r2, [r7, #4]
 800ba0e:	4413      	add	r3, r2
 800ba10:	460a      	mov	r2, r1
 800ba12:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 800ba16:	e763      	b.n	800b8e0 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800ba18:	bf00      	nop
 800ba1a:	e006      	b.n	800ba2a <create_name+0x2da>
 800ba1c:	0800e1a4 	.word	0x0800e1a4
 800ba20:	0800e220 	.word	0x0800e220
 800ba24:	0800e1b0 	.word	0x0800e1b0
			if (si > di) break;			/* No extension */
 800ba28:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800ba30:	2be5      	cmp	r3, #229	; 0xe5
 800ba32:	d103      	bne.n	800ba3c <create_name+0x2ec>
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	2205      	movs	r2, #5
 800ba38:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 800ba3c:	69fb      	ldr	r3, [r7, #28]
 800ba3e:	2b08      	cmp	r3, #8
 800ba40:	d104      	bne.n	800ba4c <create_name+0x2fc>
 800ba42:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ba46:	009b      	lsls	r3, r3, #2
 800ba48:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800ba4c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ba50:	f003 030c 	and.w	r3, r3, #12
 800ba54:	2b0c      	cmp	r3, #12
 800ba56:	d005      	beq.n	800ba64 <create_name+0x314>
 800ba58:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ba5c:	f003 0303 	and.w	r3, r3, #3
 800ba60:	2b03      	cmp	r3, #3
 800ba62:	d105      	bne.n	800ba70 <create_name+0x320>
 800ba64:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ba68:	f043 0302 	orr.w	r3, r3, #2
 800ba6c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800ba70:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ba74:	f003 0302 	and.w	r3, r3, #2
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	d117      	bne.n	800baac <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800ba7c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ba80:	f003 0303 	and.w	r3, r3, #3
 800ba84:	2b01      	cmp	r3, #1
 800ba86:	d105      	bne.n	800ba94 <create_name+0x344>
 800ba88:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ba8c:	f043 0310 	orr.w	r3, r3, #16
 800ba90:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800ba94:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ba98:	f003 030c 	and.w	r3, r3, #12
 800ba9c:	2b04      	cmp	r3, #4
 800ba9e:	d105      	bne.n	800baac <create_name+0x35c>
 800baa0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800baa4:	f043 0308 	orr.w	r3, r3, #8
 800baa8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800bab2:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 800bab6:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800bab8:	4618      	mov	r0, r3
 800baba:	3728      	adds	r7, #40	; 0x28
 800babc:	46bd      	mov	sp, r7
 800babe:	bd80      	pop	{r7, pc}

0800bac0 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800bac0:	b580      	push	{r7, lr}
 800bac2:	b086      	sub	sp, #24
 800bac4:	af00      	add	r7, sp, #0
 800bac6:	6078      	str	r0, [r7, #4]
 800bac8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800bace:	693b      	ldr	r3, [r7, #16]
 800bad0:	681b      	ldr	r3, [r3, #0]
 800bad2:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800bad4:	e002      	b.n	800badc <follow_path+0x1c>
 800bad6:	683b      	ldr	r3, [r7, #0]
 800bad8:	3301      	adds	r3, #1
 800bada:	603b      	str	r3, [r7, #0]
 800badc:	683b      	ldr	r3, [r7, #0]
 800bade:	781b      	ldrb	r3, [r3, #0]
 800bae0:	2b2f      	cmp	r3, #47	; 0x2f
 800bae2:	d0f8      	beq.n	800bad6 <follow_path+0x16>
 800bae4:	683b      	ldr	r3, [r7, #0]
 800bae6:	781b      	ldrb	r3, [r3, #0]
 800bae8:	2b5c      	cmp	r3, #92	; 0x5c
 800baea:	d0f4      	beq.n	800bad6 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800baec:	693b      	ldr	r3, [r7, #16]
 800baee:	2200      	movs	r2, #0
 800baf0:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800baf2:	683b      	ldr	r3, [r7, #0]
 800baf4:	781b      	ldrb	r3, [r3, #0]
 800baf6:	2b1f      	cmp	r3, #31
 800baf8:	d80a      	bhi.n	800bb10 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	2280      	movs	r2, #128	; 0x80
 800bafe:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800bb02:	2100      	movs	r1, #0
 800bb04:	6878      	ldr	r0, [r7, #4]
 800bb06:	f7ff f8fd 	bl	800ad04 <dir_sdi>
 800bb0a:	4603      	mov	r3, r0
 800bb0c:	75fb      	strb	r3, [r7, #23]
 800bb0e:	e048      	b.n	800bba2 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800bb10:	463b      	mov	r3, r7
 800bb12:	4619      	mov	r1, r3
 800bb14:	6878      	ldr	r0, [r7, #4]
 800bb16:	f7ff fe1b 	bl	800b750 <create_name>
 800bb1a:	4603      	mov	r3, r0
 800bb1c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800bb1e:	7dfb      	ldrb	r3, [r7, #23]
 800bb20:	2b00      	cmp	r3, #0
 800bb22:	d139      	bne.n	800bb98 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 800bb24:	6878      	ldr	r0, [r7, #4]
 800bb26:	f7ff fc5a 	bl	800b3de <dir_find>
 800bb2a:	4603      	mov	r3, r0
 800bb2c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800bb34:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800bb36:	7dfb      	ldrb	r3, [r7, #23]
 800bb38:	2b00      	cmp	r3, #0
 800bb3a:	d00a      	beq.n	800bb52 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800bb3c:	7dfb      	ldrb	r3, [r7, #23]
 800bb3e:	2b04      	cmp	r3, #4
 800bb40:	d12c      	bne.n	800bb9c <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800bb42:	7afb      	ldrb	r3, [r7, #11]
 800bb44:	f003 0304 	and.w	r3, r3, #4
 800bb48:	2b00      	cmp	r3, #0
 800bb4a:	d127      	bne.n	800bb9c <follow_path+0xdc>
 800bb4c:	2305      	movs	r3, #5
 800bb4e:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800bb50:	e024      	b.n	800bb9c <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800bb52:	7afb      	ldrb	r3, [r7, #11]
 800bb54:	f003 0304 	and.w	r3, r3, #4
 800bb58:	2b00      	cmp	r3, #0
 800bb5a:	d121      	bne.n	800bba0 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800bb5c:	693b      	ldr	r3, [r7, #16]
 800bb5e:	799b      	ldrb	r3, [r3, #6]
 800bb60:	f003 0310 	and.w	r3, r3, #16
 800bb64:	2b00      	cmp	r3, #0
 800bb66:	d102      	bne.n	800bb6e <follow_path+0xae>
				res = FR_NO_PATH; break;
 800bb68:	2305      	movs	r3, #5
 800bb6a:	75fb      	strb	r3, [r7, #23]
 800bb6c:	e019      	b.n	800bba2 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800bb6e:	68fb      	ldr	r3, [r7, #12]
 800bb70:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	695b      	ldr	r3, [r3, #20]
 800bb78:	68fa      	ldr	r2, [r7, #12]
 800bb7a:	8992      	ldrh	r2, [r2, #12]
 800bb7c:	fbb3 f0f2 	udiv	r0, r3, r2
 800bb80:	fb00 f202 	mul.w	r2, r0, r2
 800bb84:	1a9b      	subs	r3, r3, r2
 800bb86:	440b      	add	r3, r1
 800bb88:	4619      	mov	r1, r3
 800bb8a:	68f8      	ldr	r0, [r7, #12]
 800bb8c:	f7ff fa60 	bl	800b050 <ld_clust>
 800bb90:	4602      	mov	r2, r0
 800bb92:	693b      	ldr	r3, [r7, #16]
 800bb94:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800bb96:	e7bb      	b.n	800bb10 <follow_path+0x50>
			if (res != FR_OK) break;
 800bb98:	bf00      	nop
 800bb9a:	e002      	b.n	800bba2 <follow_path+0xe2>
				break;
 800bb9c:	bf00      	nop
 800bb9e:	e000      	b.n	800bba2 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800bba0:	bf00      	nop
			}
		}
	}

	return res;
 800bba2:	7dfb      	ldrb	r3, [r7, #23]
}
 800bba4:	4618      	mov	r0, r3
 800bba6:	3718      	adds	r7, #24
 800bba8:	46bd      	mov	sp, r7
 800bbaa:	bd80      	pop	{r7, pc}

0800bbac <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800bbac:	b480      	push	{r7}
 800bbae:	b087      	sub	sp, #28
 800bbb0:	af00      	add	r7, sp, #0
 800bbb2:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800bbb4:	f04f 33ff 	mov.w	r3, #4294967295
 800bbb8:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	681b      	ldr	r3, [r3, #0]
 800bbbe:	2b00      	cmp	r3, #0
 800bbc0:	d031      	beq.n	800bc26 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	681b      	ldr	r3, [r3, #0]
 800bbc6:	617b      	str	r3, [r7, #20]
 800bbc8:	e002      	b.n	800bbd0 <get_ldnumber+0x24>
 800bbca:	697b      	ldr	r3, [r7, #20]
 800bbcc:	3301      	adds	r3, #1
 800bbce:	617b      	str	r3, [r7, #20]
 800bbd0:	697b      	ldr	r3, [r7, #20]
 800bbd2:	781b      	ldrb	r3, [r3, #0]
 800bbd4:	2b1f      	cmp	r3, #31
 800bbd6:	d903      	bls.n	800bbe0 <get_ldnumber+0x34>
 800bbd8:	697b      	ldr	r3, [r7, #20]
 800bbda:	781b      	ldrb	r3, [r3, #0]
 800bbdc:	2b3a      	cmp	r3, #58	; 0x3a
 800bbde:	d1f4      	bne.n	800bbca <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800bbe0:	697b      	ldr	r3, [r7, #20]
 800bbe2:	781b      	ldrb	r3, [r3, #0]
 800bbe4:	2b3a      	cmp	r3, #58	; 0x3a
 800bbe6:	d11c      	bne.n	800bc22 <get_ldnumber+0x76>
			tp = *path;
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	681b      	ldr	r3, [r3, #0]
 800bbec:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800bbee:	68fb      	ldr	r3, [r7, #12]
 800bbf0:	1c5a      	adds	r2, r3, #1
 800bbf2:	60fa      	str	r2, [r7, #12]
 800bbf4:	781b      	ldrb	r3, [r3, #0]
 800bbf6:	3b30      	subs	r3, #48	; 0x30
 800bbf8:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800bbfa:	68bb      	ldr	r3, [r7, #8]
 800bbfc:	2b09      	cmp	r3, #9
 800bbfe:	d80e      	bhi.n	800bc1e <get_ldnumber+0x72>
 800bc00:	68fa      	ldr	r2, [r7, #12]
 800bc02:	697b      	ldr	r3, [r7, #20]
 800bc04:	429a      	cmp	r2, r3
 800bc06:	d10a      	bne.n	800bc1e <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800bc08:	68bb      	ldr	r3, [r7, #8]
 800bc0a:	2b00      	cmp	r3, #0
 800bc0c:	d107      	bne.n	800bc1e <get_ldnumber+0x72>
					vol = (int)i;
 800bc0e:	68bb      	ldr	r3, [r7, #8]
 800bc10:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800bc12:	697b      	ldr	r3, [r7, #20]
 800bc14:	3301      	adds	r3, #1
 800bc16:	617b      	str	r3, [r7, #20]
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	697a      	ldr	r2, [r7, #20]
 800bc1c:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800bc1e:	693b      	ldr	r3, [r7, #16]
 800bc20:	e002      	b.n	800bc28 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800bc22:	2300      	movs	r3, #0
 800bc24:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800bc26:	693b      	ldr	r3, [r7, #16]
}
 800bc28:	4618      	mov	r0, r3
 800bc2a:	371c      	adds	r7, #28
 800bc2c:	46bd      	mov	sp, r7
 800bc2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc32:	4770      	bx	lr

0800bc34 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800bc34:	b580      	push	{r7, lr}
 800bc36:	b082      	sub	sp, #8
 800bc38:	af00      	add	r7, sp, #0
 800bc3a:	6078      	str	r0, [r7, #4]
 800bc3c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	2200      	movs	r2, #0
 800bc42:	70da      	strb	r2, [r3, #3]
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	f04f 32ff 	mov.w	r2, #4294967295
 800bc4a:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800bc4c:	6839      	ldr	r1, [r7, #0]
 800bc4e:	6878      	ldr	r0, [r7, #4]
 800bc50:	f7fe fc76 	bl	800a540 <move_window>
 800bc54:	4603      	mov	r3, r0
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	d001      	beq.n	800bc5e <check_fs+0x2a>
 800bc5a:	2304      	movs	r3, #4
 800bc5c:	e038      	b.n	800bcd0 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	3338      	adds	r3, #56	; 0x38
 800bc62:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800bc66:	4618      	mov	r0, r3
 800bc68:	f7fe f9f6 	bl	800a058 <ld_word>
 800bc6c:	4603      	mov	r3, r0
 800bc6e:	461a      	mov	r2, r3
 800bc70:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800bc74:	429a      	cmp	r2, r3
 800bc76:	d001      	beq.n	800bc7c <check_fs+0x48>
 800bc78:	2303      	movs	r3, #3
 800bc7a:	e029      	b.n	800bcd0 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800bc82:	2be9      	cmp	r3, #233	; 0xe9
 800bc84:	d009      	beq.n	800bc9a <check_fs+0x66>
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800bc8c:	2beb      	cmp	r3, #235	; 0xeb
 800bc8e:	d11e      	bne.n	800bcce <check_fs+0x9a>
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800bc96:	2b90      	cmp	r3, #144	; 0x90
 800bc98:	d119      	bne.n	800bcce <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	3338      	adds	r3, #56	; 0x38
 800bc9e:	3336      	adds	r3, #54	; 0x36
 800bca0:	4618      	mov	r0, r3
 800bca2:	f7fe f9f1 	bl	800a088 <ld_dword>
 800bca6:	4603      	mov	r3, r0
 800bca8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800bcac:	4a0a      	ldr	r2, [pc, #40]	; (800bcd8 <check_fs+0xa4>)
 800bcae:	4293      	cmp	r3, r2
 800bcb0:	d101      	bne.n	800bcb6 <check_fs+0x82>
 800bcb2:	2300      	movs	r3, #0
 800bcb4:	e00c      	b.n	800bcd0 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	3338      	adds	r3, #56	; 0x38
 800bcba:	3352      	adds	r3, #82	; 0x52
 800bcbc:	4618      	mov	r0, r3
 800bcbe:	f7fe f9e3 	bl	800a088 <ld_dword>
 800bcc2:	4603      	mov	r3, r0
 800bcc4:	4a05      	ldr	r2, [pc, #20]	; (800bcdc <check_fs+0xa8>)
 800bcc6:	4293      	cmp	r3, r2
 800bcc8:	d101      	bne.n	800bcce <check_fs+0x9a>
 800bcca:	2300      	movs	r3, #0
 800bccc:	e000      	b.n	800bcd0 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800bcce:	2302      	movs	r3, #2
}
 800bcd0:	4618      	mov	r0, r3
 800bcd2:	3708      	adds	r7, #8
 800bcd4:	46bd      	mov	sp, r7
 800bcd6:	bd80      	pop	{r7, pc}
 800bcd8:	00544146 	.word	0x00544146
 800bcdc:	33544146 	.word	0x33544146

0800bce0 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800bce0:	b580      	push	{r7, lr}
 800bce2:	b096      	sub	sp, #88	; 0x58
 800bce4:	af00      	add	r7, sp, #0
 800bce6:	60f8      	str	r0, [r7, #12]
 800bce8:	60b9      	str	r1, [r7, #8]
 800bcea:	4613      	mov	r3, r2
 800bcec:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800bcee:	68bb      	ldr	r3, [r7, #8]
 800bcf0:	2200      	movs	r2, #0
 800bcf2:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800bcf4:	68f8      	ldr	r0, [r7, #12]
 800bcf6:	f7ff ff59 	bl	800bbac <get_ldnumber>
 800bcfa:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800bcfc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bcfe:	2b00      	cmp	r3, #0
 800bd00:	da01      	bge.n	800bd06 <find_volume+0x26>
 800bd02:	230b      	movs	r3, #11
 800bd04:	e265      	b.n	800c1d2 <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800bd06:	4a9f      	ldr	r2, [pc, #636]	; (800bf84 <find_volume+0x2a4>)
 800bd08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bd0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bd0e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800bd10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd12:	2b00      	cmp	r3, #0
 800bd14:	d101      	bne.n	800bd1a <find_volume+0x3a>
 800bd16:	230c      	movs	r3, #12
 800bd18:	e25b      	b.n	800c1d2 <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800bd1a:	68bb      	ldr	r3, [r7, #8]
 800bd1c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bd1e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800bd20:	79fb      	ldrb	r3, [r7, #7]
 800bd22:	f023 0301 	bic.w	r3, r3, #1
 800bd26:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800bd28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd2a:	781b      	ldrb	r3, [r3, #0]
 800bd2c:	2b00      	cmp	r3, #0
 800bd2e:	d01a      	beq.n	800bd66 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800bd30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd32:	785b      	ldrb	r3, [r3, #1]
 800bd34:	4618      	mov	r0, r3
 800bd36:	f7fe f8f1 	bl	8009f1c <disk_status>
 800bd3a:	4603      	mov	r3, r0
 800bd3c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800bd40:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800bd44:	f003 0301 	and.w	r3, r3, #1
 800bd48:	2b00      	cmp	r3, #0
 800bd4a:	d10c      	bne.n	800bd66 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800bd4c:	79fb      	ldrb	r3, [r7, #7]
 800bd4e:	2b00      	cmp	r3, #0
 800bd50:	d007      	beq.n	800bd62 <find_volume+0x82>
 800bd52:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800bd56:	f003 0304 	and.w	r3, r3, #4
 800bd5a:	2b00      	cmp	r3, #0
 800bd5c:	d001      	beq.n	800bd62 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800bd5e:	230a      	movs	r3, #10
 800bd60:	e237      	b.n	800c1d2 <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 800bd62:	2300      	movs	r3, #0
 800bd64:	e235      	b.n	800c1d2 <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800bd66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd68:	2200      	movs	r2, #0
 800bd6a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800bd6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bd6e:	b2da      	uxtb	r2, r3
 800bd70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd72:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800bd74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd76:	785b      	ldrb	r3, [r3, #1]
 800bd78:	4618      	mov	r0, r3
 800bd7a:	f7fe f8e9 	bl	8009f50 <disk_initialize>
 800bd7e:	4603      	mov	r3, r0
 800bd80:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800bd84:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800bd88:	f003 0301 	and.w	r3, r3, #1
 800bd8c:	2b00      	cmp	r3, #0
 800bd8e:	d001      	beq.n	800bd94 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800bd90:	2303      	movs	r3, #3
 800bd92:	e21e      	b.n	800c1d2 <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800bd94:	79fb      	ldrb	r3, [r7, #7]
 800bd96:	2b00      	cmp	r3, #0
 800bd98:	d007      	beq.n	800bdaa <find_volume+0xca>
 800bd9a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800bd9e:	f003 0304 	and.w	r3, r3, #4
 800bda2:	2b00      	cmp	r3, #0
 800bda4:	d001      	beq.n	800bdaa <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800bda6:	230a      	movs	r3, #10
 800bda8:	e213      	b.n	800c1d2 <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800bdaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdac:	7858      	ldrb	r0, [r3, #1]
 800bdae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdb0:	330c      	adds	r3, #12
 800bdb2:	461a      	mov	r2, r3
 800bdb4:	2102      	movs	r1, #2
 800bdb6:	f7fe f931 	bl	800a01c <disk_ioctl>
 800bdba:	4603      	mov	r3, r0
 800bdbc:	2b00      	cmp	r3, #0
 800bdbe:	d001      	beq.n	800bdc4 <find_volume+0xe4>
 800bdc0:	2301      	movs	r3, #1
 800bdc2:	e206      	b.n	800c1d2 <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800bdc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdc6:	899b      	ldrh	r3, [r3, #12]
 800bdc8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bdcc:	d80d      	bhi.n	800bdea <find_volume+0x10a>
 800bdce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdd0:	899b      	ldrh	r3, [r3, #12]
 800bdd2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bdd6:	d308      	bcc.n	800bdea <find_volume+0x10a>
 800bdd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdda:	899b      	ldrh	r3, [r3, #12]
 800bddc:	461a      	mov	r2, r3
 800bdde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bde0:	899b      	ldrh	r3, [r3, #12]
 800bde2:	3b01      	subs	r3, #1
 800bde4:	4013      	ands	r3, r2
 800bde6:	2b00      	cmp	r3, #0
 800bde8:	d001      	beq.n	800bdee <find_volume+0x10e>
 800bdea:	2301      	movs	r3, #1
 800bdec:	e1f1      	b.n	800c1d2 <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800bdee:	2300      	movs	r3, #0
 800bdf0:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800bdf2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800bdf4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800bdf6:	f7ff ff1d 	bl	800bc34 <check_fs>
 800bdfa:	4603      	mov	r3, r0
 800bdfc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800be00:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800be04:	2b02      	cmp	r3, #2
 800be06:	d149      	bne.n	800be9c <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800be08:	2300      	movs	r3, #0
 800be0a:	643b      	str	r3, [r7, #64]	; 0x40
 800be0c:	e01e      	b.n	800be4c <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800be0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be10:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800be14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800be16:	011b      	lsls	r3, r3, #4
 800be18:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800be1c:	4413      	add	r3, r2
 800be1e:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800be20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be22:	3304      	adds	r3, #4
 800be24:	781b      	ldrb	r3, [r3, #0]
 800be26:	2b00      	cmp	r3, #0
 800be28:	d006      	beq.n	800be38 <find_volume+0x158>
 800be2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be2c:	3308      	adds	r3, #8
 800be2e:	4618      	mov	r0, r3
 800be30:	f7fe f92a 	bl	800a088 <ld_dword>
 800be34:	4602      	mov	r2, r0
 800be36:	e000      	b.n	800be3a <find_volume+0x15a>
 800be38:	2200      	movs	r2, #0
 800be3a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800be3c:	009b      	lsls	r3, r3, #2
 800be3e:	3358      	adds	r3, #88	; 0x58
 800be40:	443b      	add	r3, r7
 800be42:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800be46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800be48:	3301      	adds	r3, #1
 800be4a:	643b      	str	r3, [r7, #64]	; 0x40
 800be4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800be4e:	2b03      	cmp	r3, #3
 800be50:	d9dd      	bls.n	800be0e <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800be52:	2300      	movs	r3, #0
 800be54:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800be56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800be58:	2b00      	cmp	r3, #0
 800be5a:	d002      	beq.n	800be62 <find_volume+0x182>
 800be5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800be5e:	3b01      	subs	r3, #1
 800be60:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800be62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800be64:	009b      	lsls	r3, r3, #2
 800be66:	3358      	adds	r3, #88	; 0x58
 800be68:	443b      	add	r3, r7
 800be6a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800be6e:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800be70:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800be72:	2b00      	cmp	r3, #0
 800be74:	d005      	beq.n	800be82 <find_volume+0x1a2>
 800be76:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800be78:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800be7a:	f7ff fedb 	bl	800bc34 <check_fs>
 800be7e:	4603      	mov	r3, r0
 800be80:	e000      	b.n	800be84 <find_volume+0x1a4>
 800be82:	2303      	movs	r3, #3
 800be84:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800be88:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800be8c:	2b01      	cmp	r3, #1
 800be8e:	d905      	bls.n	800be9c <find_volume+0x1bc>
 800be90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800be92:	3301      	adds	r3, #1
 800be94:	643b      	str	r3, [r7, #64]	; 0x40
 800be96:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800be98:	2b03      	cmp	r3, #3
 800be9a:	d9e2      	bls.n	800be62 <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800be9c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800bea0:	2b04      	cmp	r3, #4
 800bea2:	d101      	bne.n	800bea8 <find_volume+0x1c8>
 800bea4:	2301      	movs	r3, #1
 800bea6:	e194      	b.n	800c1d2 <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800bea8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800beac:	2b01      	cmp	r3, #1
 800beae:	d901      	bls.n	800beb4 <find_volume+0x1d4>
 800beb0:	230d      	movs	r3, #13
 800beb2:	e18e      	b.n	800c1d2 <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800beb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800beb6:	3338      	adds	r3, #56	; 0x38
 800beb8:	330b      	adds	r3, #11
 800beba:	4618      	mov	r0, r3
 800bebc:	f7fe f8cc 	bl	800a058 <ld_word>
 800bec0:	4603      	mov	r3, r0
 800bec2:	461a      	mov	r2, r3
 800bec4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bec6:	899b      	ldrh	r3, [r3, #12]
 800bec8:	429a      	cmp	r2, r3
 800beca:	d001      	beq.n	800bed0 <find_volume+0x1f0>
 800becc:	230d      	movs	r3, #13
 800bece:	e180      	b.n	800c1d2 <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800bed0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bed2:	3338      	adds	r3, #56	; 0x38
 800bed4:	3316      	adds	r3, #22
 800bed6:	4618      	mov	r0, r3
 800bed8:	f7fe f8be 	bl	800a058 <ld_word>
 800bedc:	4603      	mov	r3, r0
 800bede:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800bee0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bee2:	2b00      	cmp	r3, #0
 800bee4:	d106      	bne.n	800bef4 <find_volume+0x214>
 800bee6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bee8:	3338      	adds	r3, #56	; 0x38
 800beea:	3324      	adds	r3, #36	; 0x24
 800beec:	4618      	mov	r0, r3
 800beee:	f7fe f8cb 	bl	800a088 <ld_dword>
 800bef2:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800bef4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bef6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800bef8:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800befa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800befc:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800bf00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf02:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800bf04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf06:	789b      	ldrb	r3, [r3, #2]
 800bf08:	2b01      	cmp	r3, #1
 800bf0a:	d005      	beq.n	800bf18 <find_volume+0x238>
 800bf0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf0e:	789b      	ldrb	r3, [r3, #2]
 800bf10:	2b02      	cmp	r3, #2
 800bf12:	d001      	beq.n	800bf18 <find_volume+0x238>
 800bf14:	230d      	movs	r3, #13
 800bf16:	e15c      	b.n	800c1d2 <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800bf18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf1a:	789b      	ldrb	r3, [r3, #2]
 800bf1c:	461a      	mov	r2, r3
 800bf1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bf20:	fb02 f303 	mul.w	r3, r2, r3
 800bf24:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800bf26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf28:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bf2c:	b29a      	uxth	r2, r3
 800bf2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf30:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800bf32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf34:	895b      	ldrh	r3, [r3, #10]
 800bf36:	2b00      	cmp	r3, #0
 800bf38:	d008      	beq.n	800bf4c <find_volume+0x26c>
 800bf3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf3c:	895b      	ldrh	r3, [r3, #10]
 800bf3e:	461a      	mov	r2, r3
 800bf40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf42:	895b      	ldrh	r3, [r3, #10]
 800bf44:	3b01      	subs	r3, #1
 800bf46:	4013      	ands	r3, r2
 800bf48:	2b00      	cmp	r3, #0
 800bf4a:	d001      	beq.n	800bf50 <find_volume+0x270>
 800bf4c:	230d      	movs	r3, #13
 800bf4e:	e140      	b.n	800c1d2 <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800bf50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf52:	3338      	adds	r3, #56	; 0x38
 800bf54:	3311      	adds	r3, #17
 800bf56:	4618      	mov	r0, r3
 800bf58:	f7fe f87e 	bl	800a058 <ld_word>
 800bf5c:	4603      	mov	r3, r0
 800bf5e:	461a      	mov	r2, r3
 800bf60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf62:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800bf64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf66:	891b      	ldrh	r3, [r3, #8]
 800bf68:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bf6a:	8992      	ldrh	r2, [r2, #12]
 800bf6c:	0952      	lsrs	r2, r2, #5
 800bf6e:	b292      	uxth	r2, r2
 800bf70:	fbb3 f1f2 	udiv	r1, r3, r2
 800bf74:	fb01 f202 	mul.w	r2, r1, r2
 800bf78:	1a9b      	subs	r3, r3, r2
 800bf7a:	b29b      	uxth	r3, r3
 800bf7c:	2b00      	cmp	r3, #0
 800bf7e:	d003      	beq.n	800bf88 <find_volume+0x2a8>
 800bf80:	230d      	movs	r3, #13
 800bf82:	e126      	b.n	800c1d2 <find_volume+0x4f2>
 800bf84:	20001504 	.word	0x20001504

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800bf88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf8a:	3338      	adds	r3, #56	; 0x38
 800bf8c:	3313      	adds	r3, #19
 800bf8e:	4618      	mov	r0, r3
 800bf90:	f7fe f862 	bl	800a058 <ld_word>
 800bf94:	4603      	mov	r3, r0
 800bf96:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800bf98:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bf9a:	2b00      	cmp	r3, #0
 800bf9c:	d106      	bne.n	800bfac <find_volume+0x2cc>
 800bf9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfa0:	3338      	adds	r3, #56	; 0x38
 800bfa2:	3320      	adds	r3, #32
 800bfa4:	4618      	mov	r0, r3
 800bfa6:	f7fe f86f 	bl	800a088 <ld_dword>
 800bfaa:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800bfac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfae:	3338      	adds	r3, #56	; 0x38
 800bfb0:	330e      	adds	r3, #14
 800bfb2:	4618      	mov	r0, r3
 800bfb4:	f7fe f850 	bl	800a058 <ld_word>
 800bfb8:	4603      	mov	r3, r0
 800bfba:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800bfbc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800bfbe:	2b00      	cmp	r3, #0
 800bfc0:	d101      	bne.n	800bfc6 <find_volume+0x2e6>
 800bfc2:	230d      	movs	r3, #13
 800bfc4:	e105      	b.n	800c1d2 <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800bfc6:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800bfc8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bfca:	4413      	add	r3, r2
 800bfcc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bfce:	8911      	ldrh	r1, [r2, #8]
 800bfd0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bfd2:	8992      	ldrh	r2, [r2, #12]
 800bfd4:	0952      	lsrs	r2, r2, #5
 800bfd6:	b292      	uxth	r2, r2
 800bfd8:	fbb1 f2f2 	udiv	r2, r1, r2
 800bfdc:	b292      	uxth	r2, r2
 800bfde:	4413      	add	r3, r2
 800bfe0:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800bfe2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bfe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfe6:	429a      	cmp	r2, r3
 800bfe8:	d201      	bcs.n	800bfee <find_volume+0x30e>
 800bfea:	230d      	movs	r3, #13
 800bfec:	e0f1      	b.n	800c1d2 <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800bfee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bff0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bff2:	1ad3      	subs	r3, r2, r3
 800bff4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bff6:	8952      	ldrh	r2, [r2, #10]
 800bff8:	fbb3 f3f2 	udiv	r3, r3, r2
 800bffc:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800bffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c000:	2b00      	cmp	r3, #0
 800c002:	d101      	bne.n	800c008 <find_volume+0x328>
 800c004:	230d      	movs	r3, #13
 800c006:	e0e4      	b.n	800c1d2 <find_volume+0x4f2>
		fmt = FS_FAT32;
 800c008:	2303      	movs	r3, #3
 800c00a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800c00e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c010:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800c014:	4293      	cmp	r3, r2
 800c016:	d802      	bhi.n	800c01e <find_volume+0x33e>
 800c018:	2302      	movs	r3, #2
 800c01a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800c01e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c020:	f640 72f5 	movw	r2, #4085	; 0xff5
 800c024:	4293      	cmp	r3, r2
 800c026:	d802      	bhi.n	800c02e <find_volume+0x34e>
 800c028:	2301      	movs	r3, #1
 800c02a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800c02e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c030:	1c9a      	adds	r2, r3, #2
 800c032:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c034:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 800c036:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c038:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c03a:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800c03c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800c03e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c040:	441a      	add	r2, r3
 800c042:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c044:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 800c046:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c048:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c04a:	441a      	add	r2, r3
 800c04c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c04e:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 800c050:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c054:	2b03      	cmp	r3, #3
 800c056:	d11e      	bne.n	800c096 <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800c058:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c05a:	3338      	adds	r3, #56	; 0x38
 800c05c:	332a      	adds	r3, #42	; 0x2a
 800c05e:	4618      	mov	r0, r3
 800c060:	f7fd fffa 	bl	800a058 <ld_word>
 800c064:	4603      	mov	r3, r0
 800c066:	2b00      	cmp	r3, #0
 800c068:	d001      	beq.n	800c06e <find_volume+0x38e>
 800c06a:	230d      	movs	r3, #13
 800c06c:	e0b1      	b.n	800c1d2 <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800c06e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c070:	891b      	ldrh	r3, [r3, #8]
 800c072:	2b00      	cmp	r3, #0
 800c074:	d001      	beq.n	800c07a <find_volume+0x39a>
 800c076:	230d      	movs	r3, #13
 800c078:	e0ab      	b.n	800c1d2 <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800c07a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c07c:	3338      	adds	r3, #56	; 0x38
 800c07e:	332c      	adds	r3, #44	; 0x2c
 800c080:	4618      	mov	r0, r3
 800c082:	f7fe f801 	bl	800a088 <ld_dword>
 800c086:	4602      	mov	r2, r0
 800c088:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c08a:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800c08c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c08e:	69db      	ldr	r3, [r3, #28]
 800c090:	009b      	lsls	r3, r3, #2
 800c092:	647b      	str	r3, [r7, #68]	; 0x44
 800c094:	e01f      	b.n	800c0d6 <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800c096:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c098:	891b      	ldrh	r3, [r3, #8]
 800c09a:	2b00      	cmp	r3, #0
 800c09c:	d101      	bne.n	800c0a2 <find_volume+0x3c2>
 800c09e:	230d      	movs	r3, #13
 800c0a0:	e097      	b.n	800c1d2 <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800c0a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c0a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c0a8:	441a      	add	r2, r3
 800c0aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0ac:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800c0ae:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c0b2:	2b02      	cmp	r3, #2
 800c0b4:	d103      	bne.n	800c0be <find_volume+0x3de>
 800c0b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0b8:	69db      	ldr	r3, [r3, #28]
 800c0ba:	005b      	lsls	r3, r3, #1
 800c0bc:	e00a      	b.n	800c0d4 <find_volume+0x3f4>
 800c0be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0c0:	69da      	ldr	r2, [r3, #28]
 800c0c2:	4613      	mov	r3, r2
 800c0c4:	005b      	lsls	r3, r3, #1
 800c0c6:	4413      	add	r3, r2
 800c0c8:	085a      	lsrs	r2, r3, #1
 800c0ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0cc:	69db      	ldr	r3, [r3, #28]
 800c0ce:	f003 0301 	and.w	r3, r3, #1
 800c0d2:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800c0d4:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800c0d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0d8:	6a1a      	ldr	r2, [r3, #32]
 800c0da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0dc:	899b      	ldrh	r3, [r3, #12]
 800c0de:	4619      	mov	r1, r3
 800c0e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c0e2:	440b      	add	r3, r1
 800c0e4:	3b01      	subs	r3, #1
 800c0e6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c0e8:	8989      	ldrh	r1, [r1, #12]
 800c0ea:	fbb3 f3f1 	udiv	r3, r3, r1
 800c0ee:	429a      	cmp	r2, r3
 800c0f0:	d201      	bcs.n	800c0f6 <find_volume+0x416>
 800c0f2:	230d      	movs	r3, #13
 800c0f4:	e06d      	b.n	800c1d2 <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800c0f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0f8:	f04f 32ff 	mov.w	r2, #4294967295
 800c0fc:	619a      	str	r2, [r3, #24]
 800c0fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c100:	699a      	ldr	r2, [r3, #24]
 800c102:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c104:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 800c106:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c108:	2280      	movs	r2, #128	; 0x80
 800c10a:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800c10c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c110:	2b03      	cmp	r3, #3
 800c112:	d149      	bne.n	800c1a8 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800c114:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c116:	3338      	adds	r3, #56	; 0x38
 800c118:	3330      	adds	r3, #48	; 0x30
 800c11a:	4618      	mov	r0, r3
 800c11c:	f7fd ff9c 	bl	800a058 <ld_word>
 800c120:	4603      	mov	r3, r0
 800c122:	2b01      	cmp	r3, #1
 800c124:	d140      	bne.n	800c1a8 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 800c126:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c128:	3301      	adds	r3, #1
 800c12a:	4619      	mov	r1, r3
 800c12c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c12e:	f7fe fa07 	bl	800a540 <move_window>
 800c132:	4603      	mov	r3, r0
 800c134:	2b00      	cmp	r3, #0
 800c136:	d137      	bne.n	800c1a8 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 800c138:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c13a:	2200      	movs	r2, #0
 800c13c:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800c13e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c140:	3338      	adds	r3, #56	; 0x38
 800c142:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800c146:	4618      	mov	r0, r3
 800c148:	f7fd ff86 	bl	800a058 <ld_word>
 800c14c:	4603      	mov	r3, r0
 800c14e:	461a      	mov	r2, r3
 800c150:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800c154:	429a      	cmp	r2, r3
 800c156:	d127      	bne.n	800c1a8 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800c158:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c15a:	3338      	adds	r3, #56	; 0x38
 800c15c:	4618      	mov	r0, r3
 800c15e:	f7fd ff93 	bl	800a088 <ld_dword>
 800c162:	4603      	mov	r3, r0
 800c164:	4a1d      	ldr	r2, [pc, #116]	; (800c1dc <find_volume+0x4fc>)
 800c166:	4293      	cmp	r3, r2
 800c168:	d11e      	bne.n	800c1a8 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800c16a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c16c:	3338      	adds	r3, #56	; 0x38
 800c16e:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800c172:	4618      	mov	r0, r3
 800c174:	f7fd ff88 	bl	800a088 <ld_dword>
 800c178:	4603      	mov	r3, r0
 800c17a:	4a19      	ldr	r2, [pc, #100]	; (800c1e0 <find_volume+0x500>)
 800c17c:	4293      	cmp	r3, r2
 800c17e:	d113      	bne.n	800c1a8 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800c180:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c182:	3338      	adds	r3, #56	; 0x38
 800c184:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800c188:	4618      	mov	r0, r3
 800c18a:	f7fd ff7d 	bl	800a088 <ld_dword>
 800c18e:	4602      	mov	r2, r0
 800c190:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c192:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800c194:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c196:	3338      	adds	r3, #56	; 0x38
 800c198:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800c19c:	4618      	mov	r0, r3
 800c19e:	f7fd ff73 	bl	800a088 <ld_dword>
 800c1a2:	4602      	mov	r2, r0
 800c1a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1a6:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800c1a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1aa:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800c1ae:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800c1b0:	4b0c      	ldr	r3, [pc, #48]	; (800c1e4 <find_volume+0x504>)
 800c1b2:	881b      	ldrh	r3, [r3, #0]
 800c1b4:	3301      	adds	r3, #1
 800c1b6:	b29a      	uxth	r2, r3
 800c1b8:	4b0a      	ldr	r3, [pc, #40]	; (800c1e4 <find_volume+0x504>)
 800c1ba:	801a      	strh	r2, [r3, #0]
 800c1bc:	4b09      	ldr	r3, [pc, #36]	; (800c1e4 <find_volume+0x504>)
 800c1be:	881a      	ldrh	r2, [r3, #0]
 800c1c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1c2:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800c1c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1c6:	4a08      	ldr	r2, [pc, #32]	; (800c1e8 <find_volume+0x508>)
 800c1c8:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800c1ca:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c1cc:	f7fe f950 	bl	800a470 <clear_lock>
#endif
	return FR_OK;
 800c1d0:	2300      	movs	r3, #0
}
 800c1d2:	4618      	mov	r0, r3
 800c1d4:	3758      	adds	r7, #88	; 0x58
 800c1d6:	46bd      	mov	sp, r7
 800c1d8:	bd80      	pop	{r7, pc}
 800c1da:	bf00      	nop
 800c1dc:	41615252 	.word	0x41615252
 800c1e0:	61417272 	.word	0x61417272
 800c1e4:	20001508 	.word	0x20001508
 800c1e8:	2000152c 	.word	0x2000152c

0800c1ec <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800c1ec:	b580      	push	{r7, lr}
 800c1ee:	b084      	sub	sp, #16
 800c1f0:	af00      	add	r7, sp, #0
 800c1f2:	6078      	str	r0, [r7, #4]
 800c1f4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800c1f6:	2309      	movs	r3, #9
 800c1f8:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	2b00      	cmp	r3, #0
 800c1fe:	d01c      	beq.n	800c23a <validate+0x4e>
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	681b      	ldr	r3, [r3, #0]
 800c204:	2b00      	cmp	r3, #0
 800c206:	d018      	beq.n	800c23a <validate+0x4e>
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	681b      	ldr	r3, [r3, #0]
 800c20c:	781b      	ldrb	r3, [r3, #0]
 800c20e:	2b00      	cmp	r3, #0
 800c210:	d013      	beq.n	800c23a <validate+0x4e>
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	889a      	ldrh	r2, [r3, #4]
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	681b      	ldr	r3, [r3, #0]
 800c21a:	88db      	ldrh	r3, [r3, #6]
 800c21c:	429a      	cmp	r2, r3
 800c21e:	d10c      	bne.n	800c23a <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	681b      	ldr	r3, [r3, #0]
 800c224:	785b      	ldrb	r3, [r3, #1]
 800c226:	4618      	mov	r0, r3
 800c228:	f7fd fe78 	bl	8009f1c <disk_status>
 800c22c:	4603      	mov	r3, r0
 800c22e:	f003 0301 	and.w	r3, r3, #1
 800c232:	2b00      	cmp	r3, #0
 800c234:	d101      	bne.n	800c23a <validate+0x4e>
			res = FR_OK;
 800c236:	2300      	movs	r3, #0
 800c238:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800c23a:	7bfb      	ldrb	r3, [r7, #15]
 800c23c:	2b00      	cmp	r3, #0
 800c23e:	d102      	bne.n	800c246 <validate+0x5a>
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	681b      	ldr	r3, [r3, #0]
 800c244:	e000      	b.n	800c248 <validate+0x5c>
 800c246:	2300      	movs	r3, #0
 800c248:	683a      	ldr	r2, [r7, #0]
 800c24a:	6013      	str	r3, [r2, #0]
	return res;
 800c24c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c24e:	4618      	mov	r0, r3
 800c250:	3710      	adds	r7, #16
 800c252:	46bd      	mov	sp, r7
 800c254:	bd80      	pop	{r7, pc}
	...

0800c258 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800c258:	b580      	push	{r7, lr}
 800c25a:	b088      	sub	sp, #32
 800c25c:	af00      	add	r7, sp, #0
 800c25e:	60f8      	str	r0, [r7, #12]
 800c260:	60b9      	str	r1, [r7, #8]
 800c262:	4613      	mov	r3, r2
 800c264:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800c266:	68bb      	ldr	r3, [r7, #8]
 800c268:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800c26a:	f107 0310 	add.w	r3, r7, #16
 800c26e:	4618      	mov	r0, r3
 800c270:	f7ff fc9c 	bl	800bbac <get_ldnumber>
 800c274:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800c276:	69fb      	ldr	r3, [r7, #28]
 800c278:	2b00      	cmp	r3, #0
 800c27a:	da01      	bge.n	800c280 <f_mount+0x28>
 800c27c:	230b      	movs	r3, #11
 800c27e:	e02b      	b.n	800c2d8 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800c280:	4a17      	ldr	r2, [pc, #92]	; (800c2e0 <f_mount+0x88>)
 800c282:	69fb      	ldr	r3, [r7, #28]
 800c284:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c288:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800c28a:	69bb      	ldr	r3, [r7, #24]
 800c28c:	2b00      	cmp	r3, #0
 800c28e:	d005      	beq.n	800c29c <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800c290:	69b8      	ldr	r0, [r7, #24]
 800c292:	f7fe f8ed 	bl	800a470 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800c296:	69bb      	ldr	r3, [r7, #24]
 800c298:	2200      	movs	r2, #0
 800c29a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800c29c:	68fb      	ldr	r3, [r7, #12]
 800c29e:	2b00      	cmp	r3, #0
 800c2a0:	d002      	beq.n	800c2a8 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800c2a2:	68fb      	ldr	r3, [r7, #12]
 800c2a4:	2200      	movs	r2, #0
 800c2a6:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800c2a8:	68fa      	ldr	r2, [r7, #12]
 800c2aa:	490d      	ldr	r1, [pc, #52]	; (800c2e0 <f_mount+0x88>)
 800c2ac:	69fb      	ldr	r3, [r7, #28]
 800c2ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800c2b2:	68fb      	ldr	r3, [r7, #12]
 800c2b4:	2b00      	cmp	r3, #0
 800c2b6:	d002      	beq.n	800c2be <f_mount+0x66>
 800c2b8:	79fb      	ldrb	r3, [r7, #7]
 800c2ba:	2b01      	cmp	r3, #1
 800c2bc:	d001      	beq.n	800c2c2 <f_mount+0x6a>
 800c2be:	2300      	movs	r3, #0
 800c2c0:	e00a      	b.n	800c2d8 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800c2c2:	f107 010c 	add.w	r1, r7, #12
 800c2c6:	f107 0308 	add.w	r3, r7, #8
 800c2ca:	2200      	movs	r2, #0
 800c2cc:	4618      	mov	r0, r3
 800c2ce:	f7ff fd07 	bl	800bce0 <find_volume>
 800c2d2:	4603      	mov	r3, r0
 800c2d4:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800c2d6:	7dfb      	ldrb	r3, [r7, #23]
}
 800c2d8:	4618      	mov	r0, r3
 800c2da:	3720      	adds	r7, #32
 800c2dc:	46bd      	mov	sp, r7
 800c2de:	bd80      	pop	{r7, pc}
 800c2e0:	20001504 	.word	0x20001504

0800c2e4 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800c2e4:	b580      	push	{r7, lr}
 800c2e6:	b09a      	sub	sp, #104	; 0x68
 800c2e8:	af00      	add	r7, sp, #0
 800c2ea:	60f8      	str	r0, [r7, #12]
 800c2ec:	60b9      	str	r1, [r7, #8]
 800c2ee:	4613      	mov	r3, r2
 800c2f0:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800c2f2:	68fb      	ldr	r3, [r7, #12]
 800c2f4:	2b00      	cmp	r3, #0
 800c2f6:	d101      	bne.n	800c2fc <f_open+0x18>
 800c2f8:	2309      	movs	r3, #9
 800c2fa:	e1bb      	b.n	800c674 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800c2fc:	79fb      	ldrb	r3, [r7, #7]
 800c2fe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c302:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800c304:	79fa      	ldrb	r2, [r7, #7]
 800c306:	f107 0114 	add.w	r1, r7, #20
 800c30a:	f107 0308 	add.w	r3, r7, #8
 800c30e:	4618      	mov	r0, r3
 800c310:	f7ff fce6 	bl	800bce0 <find_volume>
 800c314:	4603      	mov	r3, r0
 800c316:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 800c31a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800c31e:	2b00      	cmp	r3, #0
 800c320:	f040 819f 	bne.w	800c662 <f_open+0x37e>
		dj.obj.fs = fs;
 800c324:	697b      	ldr	r3, [r7, #20]
 800c326:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800c328:	68ba      	ldr	r2, [r7, #8]
 800c32a:	f107 0318 	add.w	r3, r7, #24
 800c32e:	4611      	mov	r1, r2
 800c330:	4618      	mov	r0, r3
 800c332:	f7ff fbc5 	bl	800bac0 <follow_path>
 800c336:	4603      	mov	r3, r0
 800c338:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800c33c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800c340:	2b00      	cmp	r3, #0
 800c342:	d11a      	bne.n	800c37a <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800c344:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800c348:	b25b      	sxtb	r3, r3
 800c34a:	2b00      	cmp	r3, #0
 800c34c:	da03      	bge.n	800c356 <f_open+0x72>
				res = FR_INVALID_NAME;
 800c34e:	2306      	movs	r3, #6
 800c350:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800c354:	e011      	b.n	800c37a <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800c356:	79fb      	ldrb	r3, [r7, #7]
 800c358:	f023 0301 	bic.w	r3, r3, #1
 800c35c:	2b00      	cmp	r3, #0
 800c35e:	bf14      	ite	ne
 800c360:	2301      	movne	r3, #1
 800c362:	2300      	moveq	r3, #0
 800c364:	b2db      	uxtb	r3, r3
 800c366:	461a      	mov	r2, r3
 800c368:	f107 0318 	add.w	r3, r7, #24
 800c36c:	4611      	mov	r1, r2
 800c36e:	4618      	mov	r0, r3
 800c370:	f7fd ff72 	bl	800a258 <chk_lock>
 800c374:	4603      	mov	r3, r0
 800c376:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800c37a:	79fb      	ldrb	r3, [r7, #7]
 800c37c:	f003 031c 	and.w	r3, r3, #28
 800c380:	2b00      	cmp	r3, #0
 800c382:	d07f      	beq.n	800c484 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800c384:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800c388:	2b00      	cmp	r3, #0
 800c38a:	d017      	beq.n	800c3bc <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800c38c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800c390:	2b04      	cmp	r3, #4
 800c392:	d10e      	bne.n	800c3b2 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800c394:	f7fd ffbc 	bl	800a310 <enq_lock>
 800c398:	4603      	mov	r3, r0
 800c39a:	2b00      	cmp	r3, #0
 800c39c:	d006      	beq.n	800c3ac <f_open+0xc8>
 800c39e:	f107 0318 	add.w	r3, r7, #24
 800c3a2:	4618      	mov	r0, r3
 800c3a4:	f7ff f8dc 	bl	800b560 <dir_register>
 800c3a8:	4603      	mov	r3, r0
 800c3aa:	e000      	b.n	800c3ae <f_open+0xca>
 800c3ac:	2312      	movs	r3, #18
 800c3ae:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800c3b2:	79fb      	ldrb	r3, [r7, #7]
 800c3b4:	f043 0308 	orr.w	r3, r3, #8
 800c3b8:	71fb      	strb	r3, [r7, #7]
 800c3ba:	e010      	b.n	800c3de <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800c3bc:	7fbb      	ldrb	r3, [r7, #30]
 800c3be:	f003 0311 	and.w	r3, r3, #17
 800c3c2:	2b00      	cmp	r3, #0
 800c3c4:	d003      	beq.n	800c3ce <f_open+0xea>
					res = FR_DENIED;
 800c3c6:	2307      	movs	r3, #7
 800c3c8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800c3cc:	e007      	b.n	800c3de <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800c3ce:	79fb      	ldrb	r3, [r7, #7]
 800c3d0:	f003 0304 	and.w	r3, r3, #4
 800c3d4:	2b00      	cmp	r3, #0
 800c3d6:	d002      	beq.n	800c3de <f_open+0xfa>
 800c3d8:	2308      	movs	r3, #8
 800c3da:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800c3de:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800c3e2:	2b00      	cmp	r3, #0
 800c3e4:	d168      	bne.n	800c4b8 <f_open+0x1d4>
 800c3e6:	79fb      	ldrb	r3, [r7, #7]
 800c3e8:	f003 0308 	and.w	r3, r3, #8
 800c3ec:	2b00      	cmp	r3, #0
 800c3ee:	d063      	beq.n	800c4b8 <f_open+0x1d4>
				dw = GET_FATTIME();
 800c3f0:	f7fd fb52 	bl	8009a98 <get_fattime>
 800c3f4:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800c3f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3f8:	330e      	adds	r3, #14
 800c3fa:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800c3fc:	4618      	mov	r0, r3
 800c3fe:	f7fd fe81 	bl	800a104 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800c402:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c404:	3316      	adds	r3, #22
 800c406:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800c408:	4618      	mov	r0, r3
 800c40a:	f7fd fe7b 	bl	800a104 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800c40e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c410:	330b      	adds	r3, #11
 800c412:	2220      	movs	r2, #32
 800c414:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800c416:	697b      	ldr	r3, [r7, #20]
 800c418:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c41a:	4611      	mov	r1, r2
 800c41c:	4618      	mov	r0, r3
 800c41e:	f7fe fe17 	bl	800b050 <ld_clust>
 800c422:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800c424:	697b      	ldr	r3, [r7, #20]
 800c426:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c428:	2200      	movs	r2, #0
 800c42a:	4618      	mov	r0, r3
 800c42c:	f7fe fe2f 	bl	800b08e <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800c430:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c432:	331c      	adds	r3, #28
 800c434:	2100      	movs	r1, #0
 800c436:	4618      	mov	r0, r3
 800c438:	f7fd fe64 	bl	800a104 <st_dword>
					fs->wflag = 1;
 800c43c:	697b      	ldr	r3, [r7, #20]
 800c43e:	2201      	movs	r2, #1
 800c440:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800c442:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c444:	2b00      	cmp	r3, #0
 800c446:	d037      	beq.n	800c4b8 <f_open+0x1d4>
						dw = fs->winsect;
 800c448:	697b      	ldr	r3, [r7, #20]
 800c44a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c44c:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 800c44e:	f107 0318 	add.w	r3, r7, #24
 800c452:	2200      	movs	r2, #0
 800c454:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c456:	4618      	mov	r0, r3
 800c458:	f7fe fb1f 	bl	800aa9a <remove_chain>
 800c45c:	4603      	mov	r3, r0
 800c45e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 800c462:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800c466:	2b00      	cmp	r3, #0
 800c468:	d126      	bne.n	800c4b8 <f_open+0x1d4>
							res = move_window(fs, dw);
 800c46a:	697b      	ldr	r3, [r7, #20]
 800c46c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800c46e:	4618      	mov	r0, r3
 800c470:	f7fe f866 	bl	800a540 <move_window>
 800c474:	4603      	mov	r3, r0
 800c476:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800c47a:	697b      	ldr	r3, [r7, #20]
 800c47c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c47e:	3a01      	subs	r2, #1
 800c480:	615a      	str	r2, [r3, #20]
 800c482:	e019      	b.n	800c4b8 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800c484:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800c488:	2b00      	cmp	r3, #0
 800c48a:	d115      	bne.n	800c4b8 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800c48c:	7fbb      	ldrb	r3, [r7, #30]
 800c48e:	f003 0310 	and.w	r3, r3, #16
 800c492:	2b00      	cmp	r3, #0
 800c494:	d003      	beq.n	800c49e <f_open+0x1ba>
					res = FR_NO_FILE;
 800c496:	2304      	movs	r3, #4
 800c498:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800c49c:	e00c      	b.n	800c4b8 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800c49e:	79fb      	ldrb	r3, [r7, #7]
 800c4a0:	f003 0302 	and.w	r3, r3, #2
 800c4a4:	2b00      	cmp	r3, #0
 800c4a6:	d007      	beq.n	800c4b8 <f_open+0x1d4>
 800c4a8:	7fbb      	ldrb	r3, [r7, #30]
 800c4aa:	f003 0301 	and.w	r3, r3, #1
 800c4ae:	2b00      	cmp	r3, #0
 800c4b0:	d002      	beq.n	800c4b8 <f_open+0x1d4>
						res = FR_DENIED;
 800c4b2:	2307      	movs	r3, #7
 800c4b4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 800c4b8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800c4bc:	2b00      	cmp	r3, #0
 800c4be:	d128      	bne.n	800c512 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800c4c0:	79fb      	ldrb	r3, [r7, #7]
 800c4c2:	f003 0308 	and.w	r3, r3, #8
 800c4c6:	2b00      	cmp	r3, #0
 800c4c8:	d003      	beq.n	800c4d2 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800c4ca:	79fb      	ldrb	r3, [r7, #7]
 800c4cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c4d0:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800c4d2:	697b      	ldr	r3, [r7, #20]
 800c4d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c4d6:	68fb      	ldr	r3, [r7, #12]
 800c4d8:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800c4da:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c4dc:	68fb      	ldr	r3, [r7, #12]
 800c4de:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800c4e0:	79fb      	ldrb	r3, [r7, #7]
 800c4e2:	f023 0301 	bic.w	r3, r3, #1
 800c4e6:	2b00      	cmp	r3, #0
 800c4e8:	bf14      	ite	ne
 800c4ea:	2301      	movne	r3, #1
 800c4ec:	2300      	moveq	r3, #0
 800c4ee:	b2db      	uxtb	r3, r3
 800c4f0:	461a      	mov	r2, r3
 800c4f2:	f107 0318 	add.w	r3, r7, #24
 800c4f6:	4611      	mov	r1, r2
 800c4f8:	4618      	mov	r0, r3
 800c4fa:	f7fd ff2b 	bl	800a354 <inc_lock>
 800c4fe:	4602      	mov	r2, r0
 800c500:	68fb      	ldr	r3, [r7, #12]
 800c502:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800c504:	68fb      	ldr	r3, [r7, #12]
 800c506:	691b      	ldr	r3, [r3, #16]
 800c508:	2b00      	cmp	r3, #0
 800c50a:	d102      	bne.n	800c512 <f_open+0x22e>
 800c50c:	2302      	movs	r3, #2
 800c50e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800c512:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800c516:	2b00      	cmp	r3, #0
 800c518:	f040 80a3 	bne.w	800c662 <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800c51c:	697b      	ldr	r3, [r7, #20]
 800c51e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c520:	4611      	mov	r1, r2
 800c522:	4618      	mov	r0, r3
 800c524:	f7fe fd94 	bl	800b050 <ld_clust>
 800c528:	4602      	mov	r2, r0
 800c52a:	68fb      	ldr	r3, [r7, #12]
 800c52c:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800c52e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c530:	331c      	adds	r3, #28
 800c532:	4618      	mov	r0, r3
 800c534:	f7fd fda8 	bl	800a088 <ld_dword>
 800c538:	4602      	mov	r2, r0
 800c53a:	68fb      	ldr	r3, [r7, #12]
 800c53c:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800c53e:	68fb      	ldr	r3, [r7, #12]
 800c540:	2200      	movs	r2, #0
 800c542:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800c544:	697a      	ldr	r2, [r7, #20]
 800c546:	68fb      	ldr	r3, [r7, #12]
 800c548:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800c54a:	697b      	ldr	r3, [r7, #20]
 800c54c:	88da      	ldrh	r2, [r3, #6]
 800c54e:	68fb      	ldr	r3, [r7, #12]
 800c550:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800c552:	68fb      	ldr	r3, [r7, #12]
 800c554:	79fa      	ldrb	r2, [r7, #7]
 800c556:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800c558:	68fb      	ldr	r3, [r7, #12]
 800c55a:	2200      	movs	r2, #0
 800c55c:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800c55e:	68fb      	ldr	r3, [r7, #12]
 800c560:	2200      	movs	r2, #0
 800c562:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800c564:	68fb      	ldr	r3, [r7, #12]
 800c566:	2200      	movs	r2, #0
 800c568:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800c56a:	68fb      	ldr	r3, [r7, #12]
 800c56c:	3330      	adds	r3, #48	; 0x30
 800c56e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800c572:	2100      	movs	r1, #0
 800c574:	4618      	mov	r0, r3
 800c576:	f7fd fe12 	bl	800a19e <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800c57a:	79fb      	ldrb	r3, [r7, #7]
 800c57c:	f003 0320 	and.w	r3, r3, #32
 800c580:	2b00      	cmp	r3, #0
 800c582:	d06e      	beq.n	800c662 <f_open+0x37e>
 800c584:	68fb      	ldr	r3, [r7, #12]
 800c586:	68db      	ldr	r3, [r3, #12]
 800c588:	2b00      	cmp	r3, #0
 800c58a:	d06a      	beq.n	800c662 <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800c58c:	68fb      	ldr	r3, [r7, #12]
 800c58e:	68da      	ldr	r2, [r3, #12]
 800c590:	68fb      	ldr	r3, [r7, #12]
 800c592:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800c594:	697b      	ldr	r3, [r7, #20]
 800c596:	895b      	ldrh	r3, [r3, #10]
 800c598:	461a      	mov	r2, r3
 800c59a:	697b      	ldr	r3, [r7, #20]
 800c59c:	899b      	ldrh	r3, [r3, #12]
 800c59e:	fb02 f303 	mul.w	r3, r2, r3
 800c5a2:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800c5a4:	68fb      	ldr	r3, [r7, #12]
 800c5a6:	689b      	ldr	r3, [r3, #8]
 800c5a8:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800c5aa:	68fb      	ldr	r3, [r7, #12]
 800c5ac:	68db      	ldr	r3, [r3, #12]
 800c5ae:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c5b0:	e016      	b.n	800c5e0 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 800c5b2:	68fb      	ldr	r3, [r7, #12]
 800c5b4:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800c5b6:	4618      	mov	r0, r3
 800c5b8:	f7fe f87f 	bl	800a6ba <get_fat>
 800c5bc:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800c5be:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c5c0:	2b01      	cmp	r3, #1
 800c5c2:	d802      	bhi.n	800c5ca <f_open+0x2e6>
 800c5c4:	2302      	movs	r3, #2
 800c5c6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800c5ca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c5cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c5d0:	d102      	bne.n	800c5d8 <f_open+0x2f4>
 800c5d2:	2301      	movs	r3, #1
 800c5d4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800c5d8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800c5da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c5dc:	1ad3      	subs	r3, r2, r3
 800c5de:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c5e0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800c5e4:	2b00      	cmp	r3, #0
 800c5e6:	d103      	bne.n	800c5f0 <f_open+0x30c>
 800c5e8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800c5ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c5ec:	429a      	cmp	r2, r3
 800c5ee:	d8e0      	bhi.n	800c5b2 <f_open+0x2ce>
				}
				fp->clust = clst;
 800c5f0:	68fb      	ldr	r3, [r7, #12]
 800c5f2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c5f4:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800c5f6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800c5fa:	2b00      	cmp	r3, #0
 800c5fc:	d131      	bne.n	800c662 <f_open+0x37e>
 800c5fe:	697b      	ldr	r3, [r7, #20]
 800c600:	899b      	ldrh	r3, [r3, #12]
 800c602:	461a      	mov	r2, r3
 800c604:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c606:	fbb3 f1f2 	udiv	r1, r3, r2
 800c60a:	fb01 f202 	mul.w	r2, r1, r2
 800c60e:	1a9b      	subs	r3, r3, r2
 800c610:	2b00      	cmp	r3, #0
 800c612:	d026      	beq.n	800c662 <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800c614:	697b      	ldr	r3, [r7, #20]
 800c616:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800c618:	4618      	mov	r0, r3
 800c61a:	f7fe f82f 	bl	800a67c <clust2sect>
 800c61e:	64f8      	str	r0, [r7, #76]	; 0x4c
 800c620:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c622:	2b00      	cmp	r3, #0
 800c624:	d103      	bne.n	800c62e <f_open+0x34a>
						res = FR_INT_ERR;
 800c626:	2302      	movs	r3, #2
 800c628:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800c62c:	e019      	b.n	800c662 <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800c62e:	697b      	ldr	r3, [r7, #20]
 800c630:	899b      	ldrh	r3, [r3, #12]
 800c632:	461a      	mov	r2, r3
 800c634:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c636:	fbb3 f2f2 	udiv	r2, r3, r2
 800c63a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c63c:	441a      	add	r2, r3
 800c63e:	68fb      	ldr	r3, [r7, #12]
 800c640:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800c642:	697b      	ldr	r3, [r7, #20]
 800c644:	7858      	ldrb	r0, [r3, #1]
 800c646:	68fb      	ldr	r3, [r7, #12]
 800c648:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c64c:	68fb      	ldr	r3, [r7, #12]
 800c64e:	6a1a      	ldr	r2, [r3, #32]
 800c650:	2301      	movs	r3, #1
 800c652:	f7fd fca3 	bl	8009f9c <disk_read>
 800c656:	4603      	mov	r3, r0
 800c658:	2b00      	cmp	r3, #0
 800c65a:	d002      	beq.n	800c662 <f_open+0x37e>
 800c65c:	2301      	movs	r3, #1
 800c65e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800c662:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800c666:	2b00      	cmp	r3, #0
 800c668:	d002      	beq.n	800c670 <f_open+0x38c>
 800c66a:	68fb      	ldr	r3, [r7, #12]
 800c66c:	2200      	movs	r2, #0
 800c66e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800c670:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800c674:	4618      	mov	r0, r3
 800c676:	3768      	adds	r7, #104	; 0x68
 800c678:	46bd      	mov	sp, r7
 800c67a:	bd80      	pop	{r7, pc}

0800c67c <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800c67c:	b580      	push	{r7, lr}
 800c67e:	b08c      	sub	sp, #48	; 0x30
 800c680:	af00      	add	r7, sp, #0
 800c682:	60f8      	str	r0, [r7, #12]
 800c684:	60b9      	str	r1, [r7, #8]
 800c686:	607a      	str	r2, [r7, #4]
 800c688:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800c68a:	68bb      	ldr	r3, [r7, #8]
 800c68c:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800c68e:	683b      	ldr	r3, [r7, #0]
 800c690:	2200      	movs	r2, #0
 800c692:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800c694:	68fb      	ldr	r3, [r7, #12]
 800c696:	f107 0210 	add.w	r2, r7, #16
 800c69a:	4611      	mov	r1, r2
 800c69c:	4618      	mov	r0, r3
 800c69e:	f7ff fda5 	bl	800c1ec <validate>
 800c6a2:	4603      	mov	r3, r0
 800c6a4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800c6a8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c6ac:	2b00      	cmp	r3, #0
 800c6ae:	d107      	bne.n	800c6c0 <f_write+0x44>
 800c6b0:	68fb      	ldr	r3, [r7, #12]
 800c6b2:	7d5b      	ldrb	r3, [r3, #21]
 800c6b4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800c6b8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c6bc:	2b00      	cmp	r3, #0
 800c6be:	d002      	beq.n	800c6c6 <f_write+0x4a>
 800c6c0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c6c4:	e16a      	b.n	800c99c <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800c6c6:	68fb      	ldr	r3, [r7, #12]
 800c6c8:	7d1b      	ldrb	r3, [r3, #20]
 800c6ca:	f003 0302 	and.w	r3, r3, #2
 800c6ce:	2b00      	cmp	r3, #0
 800c6d0:	d101      	bne.n	800c6d6 <f_write+0x5a>
 800c6d2:	2307      	movs	r3, #7
 800c6d4:	e162      	b.n	800c99c <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800c6d6:	68fb      	ldr	r3, [r7, #12]
 800c6d8:	699a      	ldr	r2, [r3, #24]
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	441a      	add	r2, r3
 800c6de:	68fb      	ldr	r3, [r7, #12]
 800c6e0:	699b      	ldr	r3, [r3, #24]
 800c6e2:	429a      	cmp	r2, r3
 800c6e4:	f080 814c 	bcs.w	800c980 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800c6e8:	68fb      	ldr	r3, [r7, #12]
 800c6ea:	699b      	ldr	r3, [r3, #24]
 800c6ec:	43db      	mvns	r3, r3
 800c6ee:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800c6f0:	e146      	b.n	800c980 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800c6f2:	68fb      	ldr	r3, [r7, #12]
 800c6f4:	699b      	ldr	r3, [r3, #24]
 800c6f6:	693a      	ldr	r2, [r7, #16]
 800c6f8:	8992      	ldrh	r2, [r2, #12]
 800c6fa:	fbb3 f1f2 	udiv	r1, r3, r2
 800c6fe:	fb01 f202 	mul.w	r2, r1, r2
 800c702:	1a9b      	subs	r3, r3, r2
 800c704:	2b00      	cmp	r3, #0
 800c706:	f040 80f1 	bne.w	800c8ec <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800c70a:	68fb      	ldr	r3, [r7, #12]
 800c70c:	699b      	ldr	r3, [r3, #24]
 800c70e:	693a      	ldr	r2, [r7, #16]
 800c710:	8992      	ldrh	r2, [r2, #12]
 800c712:	fbb3 f3f2 	udiv	r3, r3, r2
 800c716:	693a      	ldr	r2, [r7, #16]
 800c718:	8952      	ldrh	r2, [r2, #10]
 800c71a:	3a01      	subs	r2, #1
 800c71c:	4013      	ands	r3, r2
 800c71e:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800c720:	69bb      	ldr	r3, [r7, #24]
 800c722:	2b00      	cmp	r3, #0
 800c724:	d143      	bne.n	800c7ae <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800c726:	68fb      	ldr	r3, [r7, #12]
 800c728:	699b      	ldr	r3, [r3, #24]
 800c72a:	2b00      	cmp	r3, #0
 800c72c:	d10c      	bne.n	800c748 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800c72e:	68fb      	ldr	r3, [r7, #12]
 800c730:	689b      	ldr	r3, [r3, #8]
 800c732:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800c734:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c736:	2b00      	cmp	r3, #0
 800c738:	d11a      	bne.n	800c770 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800c73a:	68fb      	ldr	r3, [r7, #12]
 800c73c:	2100      	movs	r1, #0
 800c73e:	4618      	mov	r0, r3
 800c740:	f7fe fa10 	bl	800ab64 <create_chain>
 800c744:	62b8      	str	r0, [r7, #40]	; 0x28
 800c746:	e013      	b.n	800c770 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800c748:	68fb      	ldr	r3, [r7, #12]
 800c74a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c74c:	2b00      	cmp	r3, #0
 800c74e:	d007      	beq.n	800c760 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800c750:	68fb      	ldr	r3, [r7, #12]
 800c752:	699b      	ldr	r3, [r3, #24]
 800c754:	4619      	mov	r1, r3
 800c756:	68f8      	ldr	r0, [r7, #12]
 800c758:	f7fe fa9c 	bl	800ac94 <clmt_clust>
 800c75c:	62b8      	str	r0, [r7, #40]	; 0x28
 800c75e:	e007      	b.n	800c770 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800c760:	68fa      	ldr	r2, [r7, #12]
 800c762:	68fb      	ldr	r3, [r7, #12]
 800c764:	69db      	ldr	r3, [r3, #28]
 800c766:	4619      	mov	r1, r3
 800c768:	4610      	mov	r0, r2
 800c76a:	f7fe f9fb 	bl	800ab64 <create_chain>
 800c76e:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800c770:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c772:	2b00      	cmp	r3, #0
 800c774:	f000 8109 	beq.w	800c98a <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800c778:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c77a:	2b01      	cmp	r3, #1
 800c77c:	d104      	bne.n	800c788 <f_write+0x10c>
 800c77e:	68fb      	ldr	r3, [r7, #12]
 800c780:	2202      	movs	r2, #2
 800c782:	755a      	strb	r2, [r3, #21]
 800c784:	2302      	movs	r3, #2
 800c786:	e109      	b.n	800c99c <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800c788:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c78a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c78e:	d104      	bne.n	800c79a <f_write+0x11e>
 800c790:	68fb      	ldr	r3, [r7, #12]
 800c792:	2201      	movs	r2, #1
 800c794:	755a      	strb	r2, [r3, #21]
 800c796:	2301      	movs	r3, #1
 800c798:	e100      	b.n	800c99c <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 800c79a:	68fb      	ldr	r3, [r7, #12]
 800c79c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c79e:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800c7a0:	68fb      	ldr	r3, [r7, #12]
 800c7a2:	689b      	ldr	r3, [r3, #8]
 800c7a4:	2b00      	cmp	r3, #0
 800c7a6:	d102      	bne.n	800c7ae <f_write+0x132>
 800c7a8:	68fb      	ldr	r3, [r7, #12]
 800c7aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c7ac:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800c7ae:	68fb      	ldr	r3, [r7, #12]
 800c7b0:	7d1b      	ldrb	r3, [r3, #20]
 800c7b2:	b25b      	sxtb	r3, r3
 800c7b4:	2b00      	cmp	r3, #0
 800c7b6:	da18      	bge.n	800c7ea <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c7b8:	693b      	ldr	r3, [r7, #16]
 800c7ba:	7858      	ldrb	r0, [r3, #1]
 800c7bc:	68fb      	ldr	r3, [r7, #12]
 800c7be:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c7c2:	68fb      	ldr	r3, [r7, #12]
 800c7c4:	6a1a      	ldr	r2, [r3, #32]
 800c7c6:	2301      	movs	r3, #1
 800c7c8:	f7fd fc08 	bl	8009fdc <disk_write>
 800c7cc:	4603      	mov	r3, r0
 800c7ce:	2b00      	cmp	r3, #0
 800c7d0:	d004      	beq.n	800c7dc <f_write+0x160>
 800c7d2:	68fb      	ldr	r3, [r7, #12]
 800c7d4:	2201      	movs	r2, #1
 800c7d6:	755a      	strb	r2, [r3, #21]
 800c7d8:	2301      	movs	r3, #1
 800c7da:	e0df      	b.n	800c99c <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 800c7dc:	68fb      	ldr	r3, [r7, #12]
 800c7de:	7d1b      	ldrb	r3, [r3, #20]
 800c7e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c7e4:	b2da      	uxtb	r2, r3
 800c7e6:	68fb      	ldr	r3, [r7, #12]
 800c7e8:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800c7ea:	693a      	ldr	r2, [r7, #16]
 800c7ec:	68fb      	ldr	r3, [r7, #12]
 800c7ee:	69db      	ldr	r3, [r3, #28]
 800c7f0:	4619      	mov	r1, r3
 800c7f2:	4610      	mov	r0, r2
 800c7f4:	f7fd ff42 	bl	800a67c <clust2sect>
 800c7f8:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800c7fa:	697b      	ldr	r3, [r7, #20]
 800c7fc:	2b00      	cmp	r3, #0
 800c7fe:	d104      	bne.n	800c80a <f_write+0x18e>
 800c800:	68fb      	ldr	r3, [r7, #12]
 800c802:	2202      	movs	r2, #2
 800c804:	755a      	strb	r2, [r3, #21]
 800c806:	2302      	movs	r3, #2
 800c808:	e0c8      	b.n	800c99c <f_write+0x320>
			sect += csect;
 800c80a:	697a      	ldr	r2, [r7, #20]
 800c80c:	69bb      	ldr	r3, [r7, #24]
 800c80e:	4413      	add	r3, r2
 800c810:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800c812:	693b      	ldr	r3, [r7, #16]
 800c814:	899b      	ldrh	r3, [r3, #12]
 800c816:	461a      	mov	r2, r3
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	fbb3 f3f2 	udiv	r3, r3, r2
 800c81e:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800c820:	6a3b      	ldr	r3, [r7, #32]
 800c822:	2b00      	cmp	r3, #0
 800c824:	d043      	beq.n	800c8ae <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800c826:	69ba      	ldr	r2, [r7, #24]
 800c828:	6a3b      	ldr	r3, [r7, #32]
 800c82a:	4413      	add	r3, r2
 800c82c:	693a      	ldr	r2, [r7, #16]
 800c82e:	8952      	ldrh	r2, [r2, #10]
 800c830:	4293      	cmp	r3, r2
 800c832:	d905      	bls.n	800c840 <f_write+0x1c4>
					cc = fs->csize - csect;
 800c834:	693b      	ldr	r3, [r7, #16]
 800c836:	895b      	ldrh	r3, [r3, #10]
 800c838:	461a      	mov	r2, r3
 800c83a:	69bb      	ldr	r3, [r7, #24]
 800c83c:	1ad3      	subs	r3, r2, r3
 800c83e:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c840:	693b      	ldr	r3, [r7, #16]
 800c842:	7858      	ldrb	r0, [r3, #1]
 800c844:	6a3b      	ldr	r3, [r7, #32]
 800c846:	697a      	ldr	r2, [r7, #20]
 800c848:	69f9      	ldr	r1, [r7, #28]
 800c84a:	f7fd fbc7 	bl	8009fdc <disk_write>
 800c84e:	4603      	mov	r3, r0
 800c850:	2b00      	cmp	r3, #0
 800c852:	d004      	beq.n	800c85e <f_write+0x1e2>
 800c854:	68fb      	ldr	r3, [r7, #12]
 800c856:	2201      	movs	r2, #1
 800c858:	755a      	strb	r2, [r3, #21]
 800c85a:	2301      	movs	r3, #1
 800c85c:	e09e      	b.n	800c99c <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800c85e:	68fb      	ldr	r3, [r7, #12]
 800c860:	6a1a      	ldr	r2, [r3, #32]
 800c862:	697b      	ldr	r3, [r7, #20]
 800c864:	1ad3      	subs	r3, r2, r3
 800c866:	6a3a      	ldr	r2, [r7, #32]
 800c868:	429a      	cmp	r2, r3
 800c86a:	d918      	bls.n	800c89e <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800c86c:	68fb      	ldr	r3, [r7, #12]
 800c86e:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800c872:	68fb      	ldr	r3, [r7, #12]
 800c874:	6a1a      	ldr	r2, [r3, #32]
 800c876:	697b      	ldr	r3, [r7, #20]
 800c878:	1ad3      	subs	r3, r2, r3
 800c87a:	693a      	ldr	r2, [r7, #16]
 800c87c:	8992      	ldrh	r2, [r2, #12]
 800c87e:	fb02 f303 	mul.w	r3, r2, r3
 800c882:	69fa      	ldr	r2, [r7, #28]
 800c884:	18d1      	adds	r1, r2, r3
 800c886:	693b      	ldr	r3, [r7, #16]
 800c888:	899b      	ldrh	r3, [r3, #12]
 800c88a:	461a      	mov	r2, r3
 800c88c:	f7fd fc66 	bl	800a15c <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800c890:	68fb      	ldr	r3, [r7, #12]
 800c892:	7d1b      	ldrb	r3, [r3, #20]
 800c894:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c898:	b2da      	uxtb	r2, r3
 800c89a:	68fb      	ldr	r3, [r7, #12]
 800c89c:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800c89e:	693b      	ldr	r3, [r7, #16]
 800c8a0:	899b      	ldrh	r3, [r3, #12]
 800c8a2:	461a      	mov	r2, r3
 800c8a4:	6a3b      	ldr	r3, [r7, #32]
 800c8a6:	fb02 f303 	mul.w	r3, r2, r3
 800c8aa:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800c8ac:	e04b      	b.n	800c946 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800c8ae:	68fb      	ldr	r3, [r7, #12]
 800c8b0:	6a1b      	ldr	r3, [r3, #32]
 800c8b2:	697a      	ldr	r2, [r7, #20]
 800c8b4:	429a      	cmp	r2, r3
 800c8b6:	d016      	beq.n	800c8e6 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 800c8b8:	68fb      	ldr	r3, [r7, #12]
 800c8ba:	699a      	ldr	r2, [r3, #24]
 800c8bc:	68fb      	ldr	r3, [r7, #12]
 800c8be:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800c8c0:	429a      	cmp	r2, r3
 800c8c2:	d210      	bcs.n	800c8e6 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800c8c4:	693b      	ldr	r3, [r7, #16]
 800c8c6:	7858      	ldrb	r0, [r3, #1]
 800c8c8:	68fb      	ldr	r3, [r7, #12]
 800c8ca:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c8ce:	2301      	movs	r3, #1
 800c8d0:	697a      	ldr	r2, [r7, #20]
 800c8d2:	f7fd fb63 	bl	8009f9c <disk_read>
 800c8d6:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800c8d8:	2b00      	cmp	r3, #0
 800c8da:	d004      	beq.n	800c8e6 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 800c8dc:	68fb      	ldr	r3, [r7, #12]
 800c8de:	2201      	movs	r2, #1
 800c8e0:	755a      	strb	r2, [r3, #21]
 800c8e2:	2301      	movs	r3, #1
 800c8e4:	e05a      	b.n	800c99c <f_write+0x320>
			}
#endif
			fp->sect = sect;
 800c8e6:	68fb      	ldr	r3, [r7, #12]
 800c8e8:	697a      	ldr	r2, [r7, #20]
 800c8ea:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800c8ec:	693b      	ldr	r3, [r7, #16]
 800c8ee:	899b      	ldrh	r3, [r3, #12]
 800c8f0:	4618      	mov	r0, r3
 800c8f2:	68fb      	ldr	r3, [r7, #12]
 800c8f4:	699b      	ldr	r3, [r3, #24]
 800c8f6:	693a      	ldr	r2, [r7, #16]
 800c8f8:	8992      	ldrh	r2, [r2, #12]
 800c8fa:	fbb3 f1f2 	udiv	r1, r3, r2
 800c8fe:	fb01 f202 	mul.w	r2, r1, r2
 800c902:	1a9b      	subs	r3, r3, r2
 800c904:	1ac3      	subs	r3, r0, r3
 800c906:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800c908:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	429a      	cmp	r2, r3
 800c90e:	d901      	bls.n	800c914 <f_write+0x298>
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800c914:	68fb      	ldr	r3, [r7, #12]
 800c916:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c91a:	68fb      	ldr	r3, [r7, #12]
 800c91c:	699b      	ldr	r3, [r3, #24]
 800c91e:	693a      	ldr	r2, [r7, #16]
 800c920:	8992      	ldrh	r2, [r2, #12]
 800c922:	fbb3 f0f2 	udiv	r0, r3, r2
 800c926:	fb00 f202 	mul.w	r2, r0, r2
 800c92a:	1a9b      	subs	r3, r3, r2
 800c92c:	440b      	add	r3, r1
 800c92e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c930:	69f9      	ldr	r1, [r7, #28]
 800c932:	4618      	mov	r0, r3
 800c934:	f7fd fc12 	bl	800a15c <mem_cpy>
		fp->flag |= FA_DIRTY;
 800c938:	68fb      	ldr	r3, [r7, #12]
 800c93a:	7d1b      	ldrb	r3, [r3, #20]
 800c93c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800c940:	b2da      	uxtb	r2, r3
 800c942:	68fb      	ldr	r3, [r7, #12]
 800c944:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800c946:	69fa      	ldr	r2, [r7, #28]
 800c948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c94a:	4413      	add	r3, r2
 800c94c:	61fb      	str	r3, [r7, #28]
 800c94e:	68fb      	ldr	r3, [r7, #12]
 800c950:	699a      	ldr	r2, [r3, #24]
 800c952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c954:	441a      	add	r2, r3
 800c956:	68fb      	ldr	r3, [r7, #12]
 800c958:	619a      	str	r2, [r3, #24]
 800c95a:	68fb      	ldr	r3, [r7, #12]
 800c95c:	68da      	ldr	r2, [r3, #12]
 800c95e:	68fb      	ldr	r3, [r7, #12]
 800c960:	699b      	ldr	r3, [r3, #24]
 800c962:	429a      	cmp	r2, r3
 800c964:	bf38      	it	cc
 800c966:	461a      	movcc	r2, r3
 800c968:	68fb      	ldr	r3, [r7, #12]
 800c96a:	60da      	str	r2, [r3, #12]
 800c96c:	683b      	ldr	r3, [r7, #0]
 800c96e:	681a      	ldr	r2, [r3, #0]
 800c970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c972:	441a      	add	r2, r3
 800c974:	683b      	ldr	r3, [r7, #0]
 800c976:	601a      	str	r2, [r3, #0]
 800c978:	687a      	ldr	r2, [r7, #4]
 800c97a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c97c:	1ad3      	subs	r3, r2, r3
 800c97e:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	2b00      	cmp	r3, #0
 800c984:	f47f aeb5 	bne.w	800c6f2 <f_write+0x76>
 800c988:	e000      	b.n	800c98c <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800c98a:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800c98c:	68fb      	ldr	r3, [r7, #12]
 800c98e:	7d1b      	ldrb	r3, [r3, #20]
 800c990:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c994:	b2da      	uxtb	r2, r3
 800c996:	68fb      	ldr	r3, [r7, #12]
 800c998:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800c99a:	2300      	movs	r3, #0
}
 800c99c:	4618      	mov	r0, r3
 800c99e:	3730      	adds	r7, #48	; 0x30
 800c9a0:	46bd      	mov	sp, r7
 800c9a2:	bd80      	pop	{r7, pc}

0800c9a4 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800c9a4:	b580      	push	{r7, lr}
 800c9a6:	b086      	sub	sp, #24
 800c9a8:	af00      	add	r7, sp, #0
 800c9aa:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	f107 0208 	add.w	r2, r7, #8
 800c9b2:	4611      	mov	r1, r2
 800c9b4:	4618      	mov	r0, r3
 800c9b6:	f7ff fc19 	bl	800c1ec <validate>
 800c9ba:	4603      	mov	r3, r0
 800c9bc:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800c9be:	7dfb      	ldrb	r3, [r7, #23]
 800c9c0:	2b00      	cmp	r3, #0
 800c9c2:	d168      	bne.n	800ca96 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	7d1b      	ldrb	r3, [r3, #20]
 800c9c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c9cc:	2b00      	cmp	r3, #0
 800c9ce:	d062      	beq.n	800ca96 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	7d1b      	ldrb	r3, [r3, #20]
 800c9d4:	b25b      	sxtb	r3, r3
 800c9d6:	2b00      	cmp	r3, #0
 800c9d8:	da15      	bge.n	800ca06 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800c9da:	68bb      	ldr	r3, [r7, #8]
 800c9dc:	7858      	ldrb	r0, [r3, #1]
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	6a1a      	ldr	r2, [r3, #32]
 800c9e8:	2301      	movs	r3, #1
 800c9ea:	f7fd faf7 	bl	8009fdc <disk_write>
 800c9ee:	4603      	mov	r3, r0
 800c9f0:	2b00      	cmp	r3, #0
 800c9f2:	d001      	beq.n	800c9f8 <f_sync+0x54>
 800c9f4:	2301      	movs	r3, #1
 800c9f6:	e04f      	b.n	800ca98 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	7d1b      	ldrb	r3, [r3, #20]
 800c9fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ca00:	b2da      	uxtb	r2, r3
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800ca06:	f7fd f847 	bl	8009a98 <get_fattime>
 800ca0a:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800ca0c:	68ba      	ldr	r2, [r7, #8]
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca12:	4619      	mov	r1, r3
 800ca14:	4610      	mov	r0, r2
 800ca16:	f7fd fd93 	bl	800a540 <move_window>
 800ca1a:	4603      	mov	r3, r0
 800ca1c:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800ca1e:	7dfb      	ldrb	r3, [r7, #23]
 800ca20:	2b00      	cmp	r3, #0
 800ca22:	d138      	bne.n	800ca96 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca28:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800ca2a:	68fb      	ldr	r3, [r7, #12]
 800ca2c:	330b      	adds	r3, #11
 800ca2e:	781a      	ldrb	r2, [r3, #0]
 800ca30:	68fb      	ldr	r3, [r7, #12]
 800ca32:	330b      	adds	r3, #11
 800ca34:	f042 0220 	orr.w	r2, r2, #32
 800ca38:	b2d2      	uxtb	r2, r2
 800ca3a:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	6818      	ldr	r0, [r3, #0]
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	689b      	ldr	r3, [r3, #8]
 800ca44:	461a      	mov	r2, r3
 800ca46:	68f9      	ldr	r1, [r7, #12]
 800ca48:	f7fe fb21 	bl	800b08e <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800ca4c:	68fb      	ldr	r3, [r7, #12]
 800ca4e:	f103 021c 	add.w	r2, r3, #28
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	68db      	ldr	r3, [r3, #12]
 800ca56:	4619      	mov	r1, r3
 800ca58:	4610      	mov	r0, r2
 800ca5a:	f7fd fb53 	bl	800a104 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800ca5e:	68fb      	ldr	r3, [r7, #12]
 800ca60:	3316      	adds	r3, #22
 800ca62:	6939      	ldr	r1, [r7, #16]
 800ca64:	4618      	mov	r0, r3
 800ca66:	f7fd fb4d 	bl	800a104 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800ca6a:	68fb      	ldr	r3, [r7, #12]
 800ca6c:	3312      	adds	r3, #18
 800ca6e:	2100      	movs	r1, #0
 800ca70:	4618      	mov	r0, r3
 800ca72:	f7fd fb2c 	bl	800a0ce <st_word>
					fs->wflag = 1;
 800ca76:	68bb      	ldr	r3, [r7, #8]
 800ca78:	2201      	movs	r2, #1
 800ca7a:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800ca7c:	68bb      	ldr	r3, [r7, #8]
 800ca7e:	4618      	mov	r0, r3
 800ca80:	f7fd fd8c 	bl	800a59c <sync_fs>
 800ca84:	4603      	mov	r3, r0
 800ca86:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	7d1b      	ldrb	r3, [r3, #20]
 800ca8c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ca90:	b2da      	uxtb	r2, r3
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800ca96:	7dfb      	ldrb	r3, [r7, #23]
}
 800ca98:	4618      	mov	r0, r3
 800ca9a:	3718      	adds	r7, #24
 800ca9c:	46bd      	mov	sp, r7
 800ca9e:	bd80      	pop	{r7, pc}

0800caa0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800caa0:	b480      	push	{r7}
 800caa2:	b087      	sub	sp, #28
 800caa4:	af00      	add	r7, sp, #0
 800caa6:	60f8      	str	r0, [r7, #12]
 800caa8:	60b9      	str	r1, [r7, #8]
 800caaa:	4613      	mov	r3, r2
 800caac:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800caae:	2301      	movs	r3, #1
 800cab0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800cab2:	2300      	movs	r3, #0
 800cab4:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800cab6:	4b1f      	ldr	r3, [pc, #124]	; (800cb34 <FATFS_LinkDriverEx+0x94>)
 800cab8:	7a5b      	ldrb	r3, [r3, #9]
 800caba:	b2db      	uxtb	r3, r3
 800cabc:	2b00      	cmp	r3, #0
 800cabe:	d131      	bne.n	800cb24 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800cac0:	4b1c      	ldr	r3, [pc, #112]	; (800cb34 <FATFS_LinkDriverEx+0x94>)
 800cac2:	7a5b      	ldrb	r3, [r3, #9]
 800cac4:	b2db      	uxtb	r3, r3
 800cac6:	461a      	mov	r2, r3
 800cac8:	4b1a      	ldr	r3, [pc, #104]	; (800cb34 <FATFS_LinkDriverEx+0x94>)
 800caca:	2100      	movs	r1, #0
 800cacc:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800cace:	4b19      	ldr	r3, [pc, #100]	; (800cb34 <FATFS_LinkDriverEx+0x94>)
 800cad0:	7a5b      	ldrb	r3, [r3, #9]
 800cad2:	b2db      	uxtb	r3, r3
 800cad4:	4a17      	ldr	r2, [pc, #92]	; (800cb34 <FATFS_LinkDriverEx+0x94>)
 800cad6:	009b      	lsls	r3, r3, #2
 800cad8:	4413      	add	r3, r2
 800cada:	68fa      	ldr	r2, [r7, #12]
 800cadc:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800cade:	4b15      	ldr	r3, [pc, #84]	; (800cb34 <FATFS_LinkDriverEx+0x94>)
 800cae0:	7a5b      	ldrb	r3, [r3, #9]
 800cae2:	b2db      	uxtb	r3, r3
 800cae4:	461a      	mov	r2, r3
 800cae6:	4b13      	ldr	r3, [pc, #76]	; (800cb34 <FATFS_LinkDriverEx+0x94>)
 800cae8:	4413      	add	r3, r2
 800caea:	79fa      	ldrb	r2, [r7, #7]
 800caec:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800caee:	4b11      	ldr	r3, [pc, #68]	; (800cb34 <FATFS_LinkDriverEx+0x94>)
 800caf0:	7a5b      	ldrb	r3, [r3, #9]
 800caf2:	b2db      	uxtb	r3, r3
 800caf4:	1c5a      	adds	r2, r3, #1
 800caf6:	b2d1      	uxtb	r1, r2
 800caf8:	4a0e      	ldr	r2, [pc, #56]	; (800cb34 <FATFS_LinkDriverEx+0x94>)
 800cafa:	7251      	strb	r1, [r2, #9]
 800cafc:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800cafe:	7dbb      	ldrb	r3, [r7, #22]
 800cb00:	3330      	adds	r3, #48	; 0x30
 800cb02:	b2da      	uxtb	r2, r3
 800cb04:	68bb      	ldr	r3, [r7, #8]
 800cb06:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800cb08:	68bb      	ldr	r3, [r7, #8]
 800cb0a:	3301      	adds	r3, #1
 800cb0c:	223a      	movs	r2, #58	; 0x3a
 800cb0e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800cb10:	68bb      	ldr	r3, [r7, #8]
 800cb12:	3302      	adds	r3, #2
 800cb14:	222f      	movs	r2, #47	; 0x2f
 800cb16:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800cb18:	68bb      	ldr	r3, [r7, #8]
 800cb1a:	3303      	adds	r3, #3
 800cb1c:	2200      	movs	r2, #0
 800cb1e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800cb20:	2300      	movs	r3, #0
 800cb22:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800cb24:	7dfb      	ldrb	r3, [r7, #23]
}
 800cb26:	4618      	mov	r0, r3
 800cb28:	371c      	adds	r7, #28
 800cb2a:	46bd      	mov	sp, r7
 800cb2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb30:	4770      	bx	lr
 800cb32:	bf00      	nop
 800cb34:	2000172c 	.word	0x2000172c

0800cb38 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800cb38:	b580      	push	{r7, lr}
 800cb3a:	b082      	sub	sp, #8
 800cb3c:	af00      	add	r7, sp, #0
 800cb3e:	6078      	str	r0, [r7, #4]
 800cb40:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800cb42:	2200      	movs	r2, #0
 800cb44:	6839      	ldr	r1, [r7, #0]
 800cb46:	6878      	ldr	r0, [r7, #4]
 800cb48:	f7ff ffaa 	bl	800caa0 <FATFS_LinkDriverEx>
 800cb4c:	4603      	mov	r3, r0
}
 800cb4e:	4618      	mov	r0, r3
 800cb50:	3708      	adds	r7, #8
 800cb52:	46bd      	mov	sp, r7
 800cb54:	bd80      	pop	{r7, pc}
	...

0800cb58 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800cb58:	b480      	push	{r7}
 800cb5a:	b085      	sub	sp, #20
 800cb5c:	af00      	add	r7, sp, #0
 800cb5e:	4603      	mov	r3, r0
 800cb60:	6039      	str	r1, [r7, #0]
 800cb62:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800cb64:	88fb      	ldrh	r3, [r7, #6]
 800cb66:	2b7f      	cmp	r3, #127	; 0x7f
 800cb68:	d802      	bhi.n	800cb70 <ff_convert+0x18>
		c = chr;
 800cb6a:	88fb      	ldrh	r3, [r7, #6]
 800cb6c:	81fb      	strh	r3, [r7, #14]
 800cb6e:	e025      	b.n	800cbbc <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800cb70:	683b      	ldr	r3, [r7, #0]
 800cb72:	2b00      	cmp	r3, #0
 800cb74:	d00b      	beq.n	800cb8e <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800cb76:	88fb      	ldrh	r3, [r7, #6]
 800cb78:	2bff      	cmp	r3, #255	; 0xff
 800cb7a:	d805      	bhi.n	800cb88 <ff_convert+0x30>
 800cb7c:	88fb      	ldrh	r3, [r7, #6]
 800cb7e:	3b80      	subs	r3, #128	; 0x80
 800cb80:	4a12      	ldr	r2, [pc, #72]	; (800cbcc <ff_convert+0x74>)
 800cb82:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cb86:	e000      	b.n	800cb8a <ff_convert+0x32>
 800cb88:	2300      	movs	r3, #0
 800cb8a:	81fb      	strh	r3, [r7, #14]
 800cb8c:	e016      	b.n	800cbbc <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800cb8e:	2300      	movs	r3, #0
 800cb90:	81fb      	strh	r3, [r7, #14]
 800cb92:	e009      	b.n	800cba8 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800cb94:	89fb      	ldrh	r3, [r7, #14]
 800cb96:	4a0d      	ldr	r2, [pc, #52]	; (800cbcc <ff_convert+0x74>)
 800cb98:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cb9c:	88fa      	ldrh	r2, [r7, #6]
 800cb9e:	429a      	cmp	r2, r3
 800cba0:	d006      	beq.n	800cbb0 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800cba2:	89fb      	ldrh	r3, [r7, #14]
 800cba4:	3301      	adds	r3, #1
 800cba6:	81fb      	strh	r3, [r7, #14]
 800cba8:	89fb      	ldrh	r3, [r7, #14]
 800cbaa:	2b7f      	cmp	r3, #127	; 0x7f
 800cbac:	d9f2      	bls.n	800cb94 <ff_convert+0x3c>
 800cbae:	e000      	b.n	800cbb2 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800cbb0:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800cbb2:	89fb      	ldrh	r3, [r7, #14]
 800cbb4:	3380      	adds	r3, #128	; 0x80
 800cbb6:	b29b      	uxth	r3, r3
 800cbb8:	b2db      	uxtb	r3, r3
 800cbba:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800cbbc:	89fb      	ldrh	r3, [r7, #14]
}
 800cbbe:	4618      	mov	r0, r3
 800cbc0:	3714      	adds	r7, #20
 800cbc2:	46bd      	mov	sp, r7
 800cbc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbc8:	4770      	bx	lr
 800cbca:	bf00      	nop
 800cbcc:	0800e2b0 	.word	0x0800e2b0

0800cbd0 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800cbd0:	b480      	push	{r7}
 800cbd2:	b087      	sub	sp, #28
 800cbd4:	af00      	add	r7, sp, #0
 800cbd6:	4603      	mov	r3, r0
 800cbd8:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800cbda:	88fb      	ldrh	r3, [r7, #6]
 800cbdc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cbe0:	d201      	bcs.n	800cbe6 <ff_wtoupper+0x16>
 800cbe2:	4b3e      	ldr	r3, [pc, #248]	; (800ccdc <ff_wtoupper+0x10c>)
 800cbe4:	e000      	b.n	800cbe8 <ff_wtoupper+0x18>
 800cbe6:	4b3e      	ldr	r3, [pc, #248]	; (800cce0 <ff_wtoupper+0x110>)
 800cbe8:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800cbea:	697b      	ldr	r3, [r7, #20]
 800cbec:	1c9a      	adds	r2, r3, #2
 800cbee:	617a      	str	r2, [r7, #20]
 800cbf0:	881b      	ldrh	r3, [r3, #0]
 800cbf2:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800cbf4:	8a7b      	ldrh	r3, [r7, #18]
 800cbf6:	2b00      	cmp	r3, #0
 800cbf8:	d068      	beq.n	800cccc <ff_wtoupper+0xfc>
 800cbfa:	88fa      	ldrh	r2, [r7, #6]
 800cbfc:	8a7b      	ldrh	r3, [r7, #18]
 800cbfe:	429a      	cmp	r2, r3
 800cc00:	d364      	bcc.n	800cccc <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800cc02:	697b      	ldr	r3, [r7, #20]
 800cc04:	1c9a      	adds	r2, r3, #2
 800cc06:	617a      	str	r2, [r7, #20]
 800cc08:	881b      	ldrh	r3, [r3, #0]
 800cc0a:	823b      	strh	r3, [r7, #16]
 800cc0c:	8a3b      	ldrh	r3, [r7, #16]
 800cc0e:	0a1b      	lsrs	r3, r3, #8
 800cc10:	81fb      	strh	r3, [r7, #14]
 800cc12:	8a3b      	ldrh	r3, [r7, #16]
 800cc14:	b2db      	uxtb	r3, r3
 800cc16:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800cc18:	88fa      	ldrh	r2, [r7, #6]
 800cc1a:	8a79      	ldrh	r1, [r7, #18]
 800cc1c:	8a3b      	ldrh	r3, [r7, #16]
 800cc1e:	440b      	add	r3, r1
 800cc20:	429a      	cmp	r2, r3
 800cc22:	da49      	bge.n	800ccb8 <ff_wtoupper+0xe8>
			switch (cmd) {
 800cc24:	89fb      	ldrh	r3, [r7, #14]
 800cc26:	2b08      	cmp	r3, #8
 800cc28:	d84f      	bhi.n	800ccca <ff_wtoupper+0xfa>
 800cc2a:	a201      	add	r2, pc, #4	; (adr r2, 800cc30 <ff_wtoupper+0x60>)
 800cc2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc30:	0800cc55 	.word	0x0800cc55
 800cc34:	0800cc67 	.word	0x0800cc67
 800cc38:	0800cc7d 	.word	0x0800cc7d
 800cc3c:	0800cc85 	.word	0x0800cc85
 800cc40:	0800cc8d 	.word	0x0800cc8d
 800cc44:	0800cc95 	.word	0x0800cc95
 800cc48:	0800cc9d 	.word	0x0800cc9d
 800cc4c:	0800cca5 	.word	0x0800cca5
 800cc50:	0800ccad 	.word	0x0800ccad
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800cc54:	88fa      	ldrh	r2, [r7, #6]
 800cc56:	8a7b      	ldrh	r3, [r7, #18]
 800cc58:	1ad3      	subs	r3, r2, r3
 800cc5a:	005b      	lsls	r3, r3, #1
 800cc5c:	697a      	ldr	r2, [r7, #20]
 800cc5e:	4413      	add	r3, r2
 800cc60:	881b      	ldrh	r3, [r3, #0]
 800cc62:	80fb      	strh	r3, [r7, #6]
 800cc64:	e027      	b.n	800ccb6 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800cc66:	88fa      	ldrh	r2, [r7, #6]
 800cc68:	8a7b      	ldrh	r3, [r7, #18]
 800cc6a:	1ad3      	subs	r3, r2, r3
 800cc6c:	b29b      	uxth	r3, r3
 800cc6e:	f003 0301 	and.w	r3, r3, #1
 800cc72:	b29b      	uxth	r3, r3
 800cc74:	88fa      	ldrh	r2, [r7, #6]
 800cc76:	1ad3      	subs	r3, r2, r3
 800cc78:	80fb      	strh	r3, [r7, #6]
 800cc7a:	e01c      	b.n	800ccb6 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800cc7c:	88fb      	ldrh	r3, [r7, #6]
 800cc7e:	3b10      	subs	r3, #16
 800cc80:	80fb      	strh	r3, [r7, #6]
 800cc82:	e018      	b.n	800ccb6 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800cc84:	88fb      	ldrh	r3, [r7, #6]
 800cc86:	3b20      	subs	r3, #32
 800cc88:	80fb      	strh	r3, [r7, #6]
 800cc8a:	e014      	b.n	800ccb6 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800cc8c:	88fb      	ldrh	r3, [r7, #6]
 800cc8e:	3b30      	subs	r3, #48	; 0x30
 800cc90:	80fb      	strh	r3, [r7, #6]
 800cc92:	e010      	b.n	800ccb6 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800cc94:	88fb      	ldrh	r3, [r7, #6]
 800cc96:	3b1a      	subs	r3, #26
 800cc98:	80fb      	strh	r3, [r7, #6]
 800cc9a:	e00c      	b.n	800ccb6 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800cc9c:	88fb      	ldrh	r3, [r7, #6]
 800cc9e:	3308      	adds	r3, #8
 800cca0:	80fb      	strh	r3, [r7, #6]
 800cca2:	e008      	b.n	800ccb6 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800cca4:	88fb      	ldrh	r3, [r7, #6]
 800cca6:	3b50      	subs	r3, #80	; 0x50
 800cca8:	80fb      	strh	r3, [r7, #6]
 800ccaa:	e004      	b.n	800ccb6 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800ccac:	88fb      	ldrh	r3, [r7, #6]
 800ccae:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 800ccb2:	80fb      	strh	r3, [r7, #6]
 800ccb4:	bf00      	nop
			}
			break;
 800ccb6:	e008      	b.n	800ccca <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800ccb8:	89fb      	ldrh	r3, [r7, #14]
 800ccba:	2b00      	cmp	r3, #0
 800ccbc:	d195      	bne.n	800cbea <ff_wtoupper+0x1a>
 800ccbe:	8a3b      	ldrh	r3, [r7, #16]
 800ccc0:	005b      	lsls	r3, r3, #1
 800ccc2:	697a      	ldr	r2, [r7, #20]
 800ccc4:	4413      	add	r3, r2
 800ccc6:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800ccc8:	e78f      	b.n	800cbea <ff_wtoupper+0x1a>
			break;
 800ccca:	bf00      	nop
	}

	return chr;
 800cccc:	88fb      	ldrh	r3, [r7, #6]
}
 800ccce:	4618      	mov	r0, r3
 800ccd0:	371c      	adds	r7, #28
 800ccd2:	46bd      	mov	sp, r7
 800ccd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccd8:	4770      	bx	lr
 800ccda:	bf00      	nop
 800ccdc:	0800e3b0 	.word	0x0800e3b0
 800cce0:	0800e5a4 	.word	0x0800e5a4

0800cce4 <__errno>:
 800cce4:	4b01      	ldr	r3, [pc, #4]	; (800ccec <__errno+0x8>)
 800cce6:	6818      	ldr	r0, [r3, #0]
 800cce8:	4770      	bx	lr
 800ccea:	bf00      	nop
 800ccec:	2000000c 	.word	0x2000000c

0800ccf0 <__libc_init_array>:
 800ccf0:	b570      	push	{r4, r5, r6, lr}
 800ccf2:	4d0d      	ldr	r5, [pc, #52]	; (800cd28 <__libc_init_array+0x38>)
 800ccf4:	4c0d      	ldr	r4, [pc, #52]	; (800cd2c <__libc_init_array+0x3c>)
 800ccf6:	1b64      	subs	r4, r4, r5
 800ccf8:	10a4      	asrs	r4, r4, #2
 800ccfa:	2600      	movs	r6, #0
 800ccfc:	42a6      	cmp	r6, r4
 800ccfe:	d109      	bne.n	800cd14 <__libc_init_array+0x24>
 800cd00:	4d0b      	ldr	r5, [pc, #44]	; (800cd30 <__libc_init_array+0x40>)
 800cd02:	4c0c      	ldr	r4, [pc, #48]	; (800cd34 <__libc_init_array+0x44>)
 800cd04:	f001 f98a 	bl	800e01c <_init>
 800cd08:	1b64      	subs	r4, r4, r5
 800cd0a:	10a4      	asrs	r4, r4, #2
 800cd0c:	2600      	movs	r6, #0
 800cd0e:	42a6      	cmp	r6, r4
 800cd10:	d105      	bne.n	800cd1e <__libc_init_array+0x2e>
 800cd12:	bd70      	pop	{r4, r5, r6, pc}
 800cd14:	f855 3b04 	ldr.w	r3, [r5], #4
 800cd18:	4798      	blx	r3
 800cd1a:	3601      	adds	r6, #1
 800cd1c:	e7ee      	b.n	800ccfc <__libc_init_array+0xc>
 800cd1e:	f855 3b04 	ldr.w	r3, [r5], #4
 800cd22:	4798      	blx	r3
 800cd24:	3601      	adds	r6, #1
 800cd26:	e7f2      	b.n	800cd0e <__libc_init_array+0x1e>
 800cd28:	0800e700 	.word	0x0800e700
 800cd2c:	0800e700 	.word	0x0800e700
 800cd30:	0800e700 	.word	0x0800e700
 800cd34:	0800e704 	.word	0x0800e704

0800cd38 <memset>:
 800cd38:	4402      	add	r2, r0
 800cd3a:	4603      	mov	r3, r0
 800cd3c:	4293      	cmp	r3, r2
 800cd3e:	d100      	bne.n	800cd42 <memset+0xa>
 800cd40:	4770      	bx	lr
 800cd42:	f803 1b01 	strb.w	r1, [r3], #1
 800cd46:	e7f9      	b.n	800cd3c <memset+0x4>

0800cd48 <iprintf>:
 800cd48:	b40f      	push	{r0, r1, r2, r3}
 800cd4a:	4b0a      	ldr	r3, [pc, #40]	; (800cd74 <iprintf+0x2c>)
 800cd4c:	b513      	push	{r0, r1, r4, lr}
 800cd4e:	681c      	ldr	r4, [r3, #0]
 800cd50:	b124      	cbz	r4, 800cd5c <iprintf+0x14>
 800cd52:	69a3      	ldr	r3, [r4, #24]
 800cd54:	b913      	cbnz	r3, 800cd5c <iprintf+0x14>
 800cd56:	4620      	mov	r0, r4
 800cd58:	f000 f886 	bl	800ce68 <__sinit>
 800cd5c:	ab05      	add	r3, sp, #20
 800cd5e:	9a04      	ldr	r2, [sp, #16]
 800cd60:	68a1      	ldr	r1, [r4, #8]
 800cd62:	9301      	str	r3, [sp, #4]
 800cd64:	4620      	mov	r0, r4
 800cd66:	f000 fb39 	bl	800d3dc <_vfiprintf_r>
 800cd6a:	b002      	add	sp, #8
 800cd6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cd70:	b004      	add	sp, #16
 800cd72:	4770      	bx	lr
 800cd74:	2000000c 	.word	0x2000000c

0800cd78 <siprintf>:
 800cd78:	b40e      	push	{r1, r2, r3}
 800cd7a:	b500      	push	{lr}
 800cd7c:	b09c      	sub	sp, #112	; 0x70
 800cd7e:	ab1d      	add	r3, sp, #116	; 0x74
 800cd80:	9002      	str	r0, [sp, #8]
 800cd82:	9006      	str	r0, [sp, #24]
 800cd84:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800cd88:	4809      	ldr	r0, [pc, #36]	; (800cdb0 <siprintf+0x38>)
 800cd8a:	9107      	str	r1, [sp, #28]
 800cd8c:	9104      	str	r1, [sp, #16]
 800cd8e:	4909      	ldr	r1, [pc, #36]	; (800cdb4 <siprintf+0x3c>)
 800cd90:	f853 2b04 	ldr.w	r2, [r3], #4
 800cd94:	9105      	str	r1, [sp, #20]
 800cd96:	6800      	ldr	r0, [r0, #0]
 800cd98:	9301      	str	r3, [sp, #4]
 800cd9a:	a902      	add	r1, sp, #8
 800cd9c:	f000 f9f4 	bl	800d188 <_svfiprintf_r>
 800cda0:	9b02      	ldr	r3, [sp, #8]
 800cda2:	2200      	movs	r2, #0
 800cda4:	701a      	strb	r2, [r3, #0]
 800cda6:	b01c      	add	sp, #112	; 0x70
 800cda8:	f85d eb04 	ldr.w	lr, [sp], #4
 800cdac:	b003      	add	sp, #12
 800cdae:	4770      	bx	lr
 800cdb0:	2000000c 	.word	0x2000000c
 800cdb4:	ffff0208 	.word	0xffff0208

0800cdb8 <std>:
 800cdb8:	2300      	movs	r3, #0
 800cdba:	b510      	push	{r4, lr}
 800cdbc:	4604      	mov	r4, r0
 800cdbe:	e9c0 3300 	strd	r3, r3, [r0]
 800cdc2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800cdc6:	6083      	str	r3, [r0, #8]
 800cdc8:	8181      	strh	r1, [r0, #12]
 800cdca:	6643      	str	r3, [r0, #100]	; 0x64
 800cdcc:	81c2      	strh	r2, [r0, #14]
 800cdce:	6183      	str	r3, [r0, #24]
 800cdd0:	4619      	mov	r1, r3
 800cdd2:	2208      	movs	r2, #8
 800cdd4:	305c      	adds	r0, #92	; 0x5c
 800cdd6:	f7ff ffaf 	bl	800cd38 <memset>
 800cdda:	4b05      	ldr	r3, [pc, #20]	; (800cdf0 <std+0x38>)
 800cddc:	6263      	str	r3, [r4, #36]	; 0x24
 800cdde:	4b05      	ldr	r3, [pc, #20]	; (800cdf4 <std+0x3c>)
 800cde0:	62a3      	str	r3, [r4, #40]	; 0x28
 800cde2:	4b05      	ldr	r3, [pc, #20]	; (800cdf8 <std+0x40>)
 800cde4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800cde6:	4b05      	ldr	r3, [pc, #20]	; (800cdfc <std+0x44>)
 800cde8:	6224      	str	r4, [r4, #32]
 800cdea:	6323      	str	r3, [r4, #48]	; 0x30
 800cdec:	bd10      	pop	{r4, pc}
 800cdee:	bf00      	nop
 800cdf0:	0800d985 	.word	0x0800d985
 800cdf4:	0800d9a7 	.word	0x0800d9a7
 800cdf8:	0800d9df 	.word	0x0800d9df
 800cdfc:	0800da03 	.word	0x0800da03

0800ce00 <_cleanup_r>:
 800ce00:	4901      	ldr	r1, [pc, #4]	; (800ce08 <_cleanup_r+0x8>)
 800ce02:	f000 b8af 	b.w	800cf64 <_fwalk_reent>
 800ce06:	bf00      	nop
 800ce08:	0800dcdd 	.word	0x0800dcdd

0800ce0c <__sfmoreglue>:
 800ce0c:	b570      	push	{r4, r5, r6, lr}
 800ce0e:	2268      	movs	r2, #104	; 0x68
 800ce10:	1e4d      	subs	r5, r1, #1
 800ce12:	4355      	muls	r5, r2
 800ce14:	460e      	mov	r6, r1
 800ce16:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ce1a:	f000 f8e5 	bl	800cfe8 <_malloc_r>
 800ce1e:	4604      	mov	r4, r0
 800ce20:	b140      	cbz	r0, 800ce34 <__sfmoreglue+0x28>
 800ce22:	2100      	movs	r1, #0
 800ce24:	e9c0 1600 	strd	r1, r6, [r0]
 800ce28:	300c      	adds	r0, #12
 800ce2a:	60a0      	str	r0, [r4, #8]
 800ce2c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ce30:	f7ff ff82 	bl	800cd38 <memset>
 800ce34:	4620      	mov	r0, r4
 800ce36:	bd70      	pop	{r4, r5, r6, pc}

0800ce38 <__sfp_lock_acquire>:
 800ce38:	4801      	ldr	r0, [pc, #4]	; (800ce40 <__sfp_lock_acquire+0x8>)
 800ce3a:	f000 b8b3 	b.w	800cfa4 <__retarget_lock_acquire_recursive>
 800ce3e:	bf00      	nop
 800ce40:	20001739 	.word	0x20001739

0800ce44 <__sfp_lock_release>:
 800ce44:	4801      	ldr	r0, [pc, #4]	; (800ce4c <__sfp_lock_release+0x8>)
 800ce46:	f000 b8ae 	b.w	800cfa6 <__retarget_lock_release_recursive>
 800ce4a:	bf00      	nop
 800ce4c:	20001739 	.word	0x20001739

0800ce50 <__sinit_lock_acquire>:
 800ce50:	4801      	ldr	r0, [pc, #4]	; (800ce58 <__sinit_lock_acquire+0x8>)
 800ce52:	f000 b8a7 	b.w	800cfa4 <__retarget_lock_acquire_recursive>
 800ce56:	bf00      	nop
 800ce58:	2000173a 	.word	0x2000173a

0800ce5c <__sinit_lock_release>:
 800ce5c:	4801      	ldr	r0, [pc, #4]	; (800ce64 <__sinit_lock_release+0x8>)
 800ce5e:	f000 b8a2 	b.w	800cfa6 <__retarget_lock_release_recursive>
 800ce62:	bf00      	nop
 800ce64:	2000173a 	.word	0x2000173a

0800ce68 <__sinit>:
 800ce68:	b510      	push	{r4, lr}
 800ce6a:	4604      	mov	r4, r0
 800ce6c:	f7ff fff0 	bl	800ce50 <__sinit_lock_acquire>
 800ce70:	69a3      	ldr	r3, [r4, #24]
 800ce72:	b11b      	cbz	r3, 800ce7c <__sinit+0x14>
 800ce74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ce78:	f7ff bff0 	b.w	800ce5c <__sinit_lock_release>
 800ce7c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ce80:	6523      	str	r3, [r4, #80]	; 0x50
 800ce82:	4b13      	ldr	r3, [pc, #76]	; (800ced0 <__sinit+0x68>)
 800ce84:	4a13      	ldr	r2, [pc, #76]	; (800ced4 <__sinit+0x6c>)
 800ce86:	681b      	ldr	r3, [r3, #0]
 800ce88:	62a2      	str	r2, [r4, #40]	; 0x28
 800ce8a:	42a3      	cmp	r3, r4
 800ce8c:	bf04      	itt	eq
 800ce8e:	2301      	moveq	r3, #1
 800ce90:	61a3      	streq	r3, [r4, #24]
 800ce92:	4620      	mov	r0, r4
 800ce94:	f000 f820 	bl	800ced8 <__sfp>
 800ce98:	6060      	str	r0, [r4, #4]
 800ce9a:	4620      	mov	r0, r4
 800ce9c:	f000 f81c 	bl	800ced8 <__sfp>
 800cea0:	60a0      	str	r0, [r4, #8]
 800cea2:	4620      	mov	r0, r4
 800cea4:	f000 f818 	bl	800ced8 <__sfp>
 800cea8:	2200      	movs	r2, #0
 800ceaa:	60e0      	str	r0, [r4, #12]
 800ceac:	2104      	movs	r1, #4
 800ceae:	6860      	ldr	r0, [r4, #4]
 800ceb0:	f7ff ff82 	bl	800cdb8 <std>
 800ceb4:	68a0      	ldr	r0, [r4, #8]
 800ceb6:	2201      	movs	r2, #1
 800ceb8:	2109      	movs	r1, #9
 800ceba:	f7ff ff7d 	bl	800cdb8 <std>
 800cebe:	68e0      	ldr	r0, [r4, #12]
 800cec0:	2202      	movs	r2, #2
 800cec2:	2112      	movs	r1, #18
 800cec4:	f7ff ff78 	bl	800cdb8 <std>
 800cec8:	2301      	movs	r3, #1
 800ceca:	61a3      	str	r3, [r4, #24]
 800cecc:	e7d2      	b.n	800ce74 <__sinit+0xc>
 800cece:	bf00      	nop
 800ced0:	0800e660 	.word	0x0800e660
 800ced4:	0800ce01 	.word	0x0800ce01

0800ced8 <__sfp>:
 800ced8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ceda:	4607      	mov	r7, r0
 800cedc:	f7ff ffac 	bl	800ce38 <__sfp_lock_acquire>
 800cee0:	4b1e      	ldr	r3, [pc, #120]	; (800cf5c <__sfp+0x84>)
 800cee2:	681e      	ldr	r6, [r3, #0]
 800cee4:	69b3      	ldr	r3, [r6, #24]
 800cee6:	b913      	cbnz	r3, 800ceee <__sfp+0x16>
 800cee8:	4630      	mov	r0, r6
 800ceea:	f7ff ffbd 	bl	800ce68 <__sinit>
 800ceee:	3648      	adds	r6, #72	; 0x48
 800cef0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800cef4:	3b01      	subs	r3, #1
 800cef6:	d503      	bpl.n	800cf00 <__sfp+0x28>
 800cef8:	6833      	ldr	r3, [r6, #0]
 800cefa:	b30b      	cbz	r3, 800cf40 <__sfp+0x68>
 800cefc:	6836      	ldr	r6, [r6, #0]
 800cefe:	e7f7      	b.n	800cef0 <__sfp+0x18>
 800cf00:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800cf04:	b9d5      	cbnz	r5, 800cf3c <__sfp+0x64>
 800cf06:	4b16      	ldr	r3, [pc, #88]	; (800cf60 <__sfp+0x88>)
 800cf08:	60e3      	str	r3, [r4, #12]
 800cf0a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800cf0e:	6665      	str	r5, [r4, #100]	; 0x64
 800cf10:	f000 f847 	bl	800cfa2 <__retarget_lock_init_recursive>
 800cf14:	f7ff ff96 	bl	800ce44 <__sfp_lock_release>
 800cf18:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800cf1c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800cf20:	6025      	str	r5, [r4, #0]
 800cf22:	61a5      	str	r5, [r4, #24]
 800cf24:	2208      	movs	r2, #8
 800cf26:	4629      	mov	r1, r5
 800cf28:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800cf2c:	f7ff ff04 	bl	800cd38 <memset>
 800cf30:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800cf34:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800cf38:	4620      	mov	r0, r4
 800cf3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cf3c:	3468      	adds	r4, #104	; 0x68
 800cf3e:	e7d9      	b.n	800cef4 <__sfp+0x1c>
 800cf40:	2104      	movs	r1, #4
 800cf42:	4638      	mov	r0, r7
 800cf44:	f7ff ff62 	bl	800ce0c <__sfmoreglue>
 800cf48:	4604      	mov	r4, r0
 800cf4a:	6030      	str	r0, [r6, #0]
 800cf4c:	2800      	cmp	r0, #0
 800cf4e:	d1d5      	bne.n	800cefc <__sfp+0x24>
 800cf50:	f7ff ff78 	bl	800ce44 <__sfp_lock_release>
 800cf54:	230c      	movs	r3, #12
 800cf56:	603b      	str	r3, [r7, #0]
 800cf58:	e7ee      	b.n	800cf38 <__sfp+0x60>
 800cf5a:	bf00      	nop
 800cf5c:	0800e660 	.word	0x0800e660
 800cf60:	ffff0001 	.word	0xffff0001

0800cf64 <_fwalk_reent>:
 800cf64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cf68:	4606      	mov	r6, r0
 800cf6a:	4688      	mov	r8, r1
 800cf6c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800cf70:	2700      	movs	r7, #0
 800cf72:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800cf76:	f1b9 0901 	subs.w	r9, r9, #1
 800cf7a:	d505      	bpl.n	800cf88 <_fwalk_reent+0x24>
 800cf7c:	6824      	ldr	r4, [r4, #0]
 800cf7e:	2c00      	cmp	r4, #0
 800cf80:	d1f7      	bne.n	800cf72 <_fwalk_reent+0xe>
 800cf82:	4638      	mov	r0, r7
 800cf84:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cf88:	89ab      	ldrh	r3, [r5, #12]
 800cf8a:	2b01      	cmp	r3, #1
 800cf8c:	d907      	bls.n	800cf9e <_fwalk_reent+0x3a>
 800cf8e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800cf92:	3301      	adds	r3, #1
 800cf94:	d003      	beq.n	800cf9e <_fwalk_reent+0x3a>
 800cf96:	4629      	mov	r1, r5
 800cf98:	4630      	mov	r0, r6
 800cf9a:	47c0      	blx	r8
 800cf9c:	4307      	orrs	r7, r0
 800cf9e:	3568      	adds	r5, #104	; 0x68
 800cfa0:	e7e9      	b.n	800cf76 <_fwalk_reent+0x12>

0800cfa2 <__retarget_lock_init_recursive>:
 800cfa2:	4770      	bx	lr

0800cfa4 <__retarget_lock_acquire_recursive>:
 800cfa4:	4770      	bx	lr

0800cfa6 <__retarget_lock_release_recursive>:
 800cfa6:	4770      	bx	lr

0800cfa8 <sbrk_aligned>:
 800cfa8:	b570      	push	{r4, r5, r6, lr}
 800cfaa:	4e0e      	ldr	r6, [pc, #56]	; (800cfe4 <sbrk_aligned+0x3c>)
 800cfac:	460c      	mov	r4, r1
 800cfae:	6831      	ldr	r1, [r6, #0]
 800cfb0:	4605      	mov	r5, r0
 800cfb2:	b911      	cbnz	r1, 800cfba <sbrk_aligned+0x12>
 800cfb4:	f000 fcd6 	bl	800d964 <_sbrk_r>
 800cfb8:	6030      	str	r0, [r6, #0]
 800cfba:	4621      	mov	r1, r4
 800cfbc:	4628      	mov	r0, r5
 800cfbe:	f000 fcd1 	bl	800d964 <_sbrk_r>
 800cfc2:	1c43      	adds	r3, r0, #1
 800cfc4:	d00a      	beq.n	800cfdc <sbrk_aligned+0x34>
 800cfc6:	1cc4      	adds	r4, r0, #3
 800cfc8:	f024 0403 	bic.w	r4, r4, #3
 800cfcc:	42a0      	cmp	r0, r4
 800cfce:	d007      	beq.n	800cfe0 <sbrk_aligned+0x38>
 800cfd0:	1a21      	subs	r1, r4, r0
 800cfd2:	4628      	mov	r0, r5
 800cfd4:	f000 fcc6 	bl	800d964 <_sbrk_r>
 800cfd8:	3001      	adds	r0, #1
 800cfda:	d101      	bne.n	800cfe0 <sbrk_aligned+0x38>
 800cfdc:	f04f 34ff 	mov.w	r4, #4294967295
 800cfe0:	4620      	mov	r0, r4
 800cfe2:	bd70      	pop	{r4, r5, r6, pc}
 800cfe4:	20001740 	.word	0x20001740

0800cfe8 <_malloc_r>:
 800cfe8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cfec:	1ccd      	adds	r5, r1, #3
 800cfee:	f025 0503 	bic.w	r5, r5, #3
 800cff2:	3508      	adds	r5, #8
 800cff4:	2d0c      	cmp	r5, #12
 800cff6:	bf38      	it	cc
 800cff8:	250c      	movcc	r5, #12
 800cffa:	2d00      	cmp	r5, #0
 800cffc:	4607      	mov	r7, r0
 800cffe:	db01      	blt.n	800d004 <_malloc_r+0x1c>
 800d000:	42a9      	cmp	r1, r5
 800d002:	d905      	bls.n	800d010 <_malloc_r+0x28>
 800d004:	230c      	movs	r3, #12
 800d006:	603b      	str	r3, [r7, #0]
 800d008:	2600      	movs	r6, #0
 800d00a:	4630      	mov	r0, r6
 800d00c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d010:	4e2e      	ldr	r6, [pc, #184]	; (800d0cc <_malloc_r+0xe4>)
 800d012:	f000 ff3f 	bl	800de94 <__malloc_lock>
 800d016:	6833      	ldr	r3, [r6, #0]
 800d018:	461c      	mov	r4, r3
 800d01a:	bb34      	cbnz	r4, 800d06a <_malloc_r+0x82>
 800d01c:	4629      	mov	r1, r5
 800d01e:	4638      	mov	r0, r7
 800d020:	f7ff ffc2 	bl	800cfa8 <sbrk_aligned>
 800d024:	1c43      	adds	r3, r0, #1
 800d026:	4604      	mov	r4, r0
 800d028:	d14d      	bne.n	800d0c6 <_malloc_r+0xde>
 800d02a:	6834      	ldr	r4, [r6, #0]
 800d02c:	4626      	mov	r6, r4
 800d02e:	2e00      	cmp	r6, #0
 800d030:	d140      	bne.n	800d0b4 <_malloc_r+0xcc>
 800d032:	6823      	ldr	r3, [r4, #0]
 800d034:	4631      	mov	r1, r6
 800d036:	4638      	mov	r0, r7
 800d038:	eb04 0803 	add.w	r8, r4, r3
 800d03c:	f000 fc92 	bl	800d964 <_sbrk_r>
 800d040:	4580      	cmp	r8, r0
 800d042:	d13a      	bne.n	800d0ba <_malloc_r+0xd2>
 800d044:	6821      	ldr	r1, [r4, #0]
 800d046:	3503      	adds	r5, #3
 800d048:	1a6d      	subs	r5, r5, r1
 800d04a:	f025 0503 	bic.w	r5, r5, #3
 800d04e:	3508      	adds	r5, #8
 800d050:	2d0c      	cmp	r5, #12
 800d052:	bf38      	it	cc
 800d054:	250c      	movcc	r5, #12
 800d056:	4629      	mov	r1, r5
 800d058:	4638      	mov	r0, r7
 800d05a:	f7ff ffa5 	bl	800cfa8 <sbrk_aligned>
 800d05e:	3001      	adds	r0, #1
 800d060:	d02b      	beq.n	800d0ba <_malloc_r+0xd2>
 800d062:	6823      	ldr	r3, [r4, #0]
 800d064:	442b      	add	r3, r5
 800d066:	6023      	str	r3, [r4, #0]
 800d068:	e00e      	b.n	800d088 <_malloc_r+0xa0>
 800d06a:	6822      	ldr	r2, [r4, #0]
 800d06c:	1b52      	subs	r2, r2, r5
 800d06e:	d41e      	bmi.n	800d0ae <_malloc_r+0xc6>
 800d070:	2a0b      	cmp	r2, #11
 800d072:	d916      	bls.n	800d0a2 <_malloc_r+0xba>
 800d074:	1961      	adds	r1, r4, r5
 800d076:	42a3      	cmp	r3, r4
 800d078:	6025      	str	r5, [r4, #0]
 800d07a:	bf18      	it	ne
 800d07c:	6059      	strne	r1, [r3, #4]
 800d07e:	6863      	ldr	r3, [r4, #4]
 800d080:	bf08      	it	eq
 800d082:	6031      	streq	r1, [r6, #0]
 800d084:	5162      	str	r2, [r4, r5]
 800d086:	604b      	str	r3, [r1, #4]
 800d088:	4638      	mov	r0, r7
 800d08a:	f104 060b 	add.w	r6, r4, #11
 800d08e:	f000 ff07 	bl	800dea0 <__malloc_unlock>
 800d092:	f026 0607 	bic.w	r6, r6, #7
 800d096:	1d23      	adds	r3, r4, #4
 800d098:	1af2      	subs	r2, r6, r3
 800d09a:	d0b6      	beq.n	800d00a <_malloc_r+0x22>
 800d09c:	1b9b      	subs	r3, r3, r6
 800d09e:	50a3      	str	r3, [r4, r2]
 800d0a0:	e7b3      	b.n	800d00a <_malloc_r+0x22>
 800d0a2:	6862      	ldr	r2, [r4, #4]
 800d0a4:	42a3      	cmp	r3, r4
 800d0a6:	bf0c      	ite	eq
 800d0a8:	6032      	streq	r2, [r6, #0]
 800d0aa:	605a      	strne	r2, [r3, #4]
 800d0ac:	e7ec      	b.n	800d088 <_malloc_r+0xa0>
 800d0ae:	4623      	mov	r3, r4
 800d0b0:	6864      	ldr	r4, [r4, #4]
 800d0b2:	e7b2      	b.n	800d01a <_malloc_r+0x32>
 800d0b4:	4634      	mov	r4, r6
 800d0b6:	6876      	ldr	r6, [r6, #4]
 800d0b8:	e7b9      	b.n	800d02e <_malloc_r+0x46>
 800d0ba:	230c      	movs	r3, #12
 800d0bc:	603b      	str	r3, [r7, #0]
 800d0be:	4638      	mov	r0, r7
 800d0c0:	f000 feee 	bl	800dea0 <__malloc_unlock>
 800d0c4:	e7a1      	b.n	800d00a <_malloc_r+0x22>
 800d0c6:	6025      	str	r5, [r4, #0]
 800d0c8:	e7de      	b.n	800d088 <_malloc_r+0xa0>
 800d0ca:	bf00      	nop
 800d0cc:	2000173c 	.word	0x2000173c

0800d0d0 <__ssputs_r>:
 800d0d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d0d4:	688e      	ldr	r6, [r1, #8]
 800d0d6:	429e      	cmp	r6, r3
 800d0d8:	4682      	mov	sl, r0
 800d0da:	460c      	mov	r4, r1
 800d0dc:	4690      	mov	r8, r2
 800d0de:	461f      	mov	r7, r3
 800d0e0:	d838      	bhi.n	800d154 <__ssputs_r+0x84>
 800d0e2:	898a      	ldrh	r2, [r1, #12]
 800d0e4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d0e8:	d032      	beq.n	800d150 <__ssputs_r+0x80>
 800d0ea:	6825      	ldr	r5, [r4, #0]
 800d0ec:	6909      	ldr	r1, [r1, #16]
 800d0ee:	eba5 0901 	sub.w	r9, r5, r1
 800d0f2:	6965      	ldr	r5, [r4, #20]
 800d0f4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d0f8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d0fc:	3301      	adds	r3, #1
 800d0fe:	444b      	add	r3, r9
 800d100:	106d      	asrs	r5, r5, #1
 800d102:	429d      	cmp	r5, r3
 800d104:	bf38      	it	cc
 800d106:	461d      	movcc	r5, r3
 800d108:	0553      	lsls	r3, r2, #21
 800d10a:	d531      	bpl.n	800d170 <__ssputs_r+0xa0>
 800d10c:	4629      	mov	r1, r5
 800d10e:	f7ff ff6b 	bl	800cfe8 <_malloc_r>
 800d112:	4606      	mov	r6, r0
 800d114:	b950      	cbnz	r0, 800d12c <__ssputs_r+0x5c>
 800d116:	230c      	movs	r3, #12
 800d118:	f8ca 3000 	str.w	r3, [sl]
 800d11c:	89a3      	ldrh	r3, [r4, #12]
 800d11e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d122:	81a3      	strh	r3, [r4, #12]
 800d124:	f04f 30ff 	mov.w	r0, #4294967295
 800d128:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d12c:	6921      	ldr	r1, [r4, #16]
 800d12e:	464a      	mov	r2, r9
 800d130:	f000 fe88 	bl	800de44 <memcpy>
 800d134:	89a3      	ldrh	r3, [r4, #12]
 800d136:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d13a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d13e:	81a3      	strh	r3, [r4, #12]
 800d140:	6126      	str	r6, [r4, #16]
 800d142:	6165      	str	r5, [r4, #20]
 800d144:	444e      	add	r6, r9
 800d146:	eba5 0509 	sub.w	r5, r5, r9
 800d14a:	6026      	str	r6, [r4, #0]
 800d14c:	60a5      	str	r5, [r4, #8]
 800d14e:	463e      	mov	r6, r7
 800d150:	42be      	cmp	r6, r7
 800d152:	d900      	bls.n	800d156 <__ssputs_r+0x86>
 800d154:	463e      	mov	r6, r7
 800d156:	6820      	ldr	r0, [r4, #0]
 800d158:	4632      	mov	r2, r6
 800d15a:	4641      	mov	r1, r8
 800d15c:	f000 fe80 	bl	800de60 <memmove>
 800d160:	68a3      	ldr	r3, [r4, #8]
 800d162:	1b9b      	subs	r3, r3, r6
 800d164:	60a3      	str	r3, [r4, #8]
 800d166:	6823      	ldr	r3, [r4, #0]
 800d168:	4433      	add	r3, r6
 800d16a:	6023      	str	r3, [r4, #0]
 800d16c:	2000      	movs	r0, #0
 800d16e:	e7db      	b.n	800d128 <__ssputs_r+0x58>
 800d170:	462a      	mov	r2, r5
 800d172:	f000 fee7 	bl	800df44 <_realloc_r>
 800d176:	4606      	mov	r6, r0
 800d178:	2800      	cmp	r0, #0
 800d17a:	d1e1      	bne.n	800d140 <__ssputs_r+0x70>
 800d17c:	6921      	ldr	r1, [r4, #16]
 800d17e:	4650      	mov	r0, sl
 800d180:	f000 fe94 	bl	800deac <_free_r>
 800d184:	e7c7      	b.n	800d116 <__ssputs_r+0x46>
	...

0800d188 <_svfiprintf_r>:
 800d188:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d18c:	4698      	mov	r8, r3
 800d18e:	898b      	ldrh	r3, [r1, #12]
 800d190:	061b      	lsls	r3, r3, #24
 800d192:	b09d      	sub	sp, #116	; 0x74
 800d194:	4607      	mov	r7, r0
 800d196:	460d      	mov	r5, r1
 800d198:	4614      	mov	r4, r2
 800d19a:	d50e      	bpl.n	800d1ba <_svfiprintf_r+0x32>
 800d19c:	690b      	ldr	r3, [r1, #16]
 800d19e:	b963      	cbnz	r3, 800d1ba <_svfiprintf_r+0x32>
 800d1a0:	2140      	movs	r1, #64	; 0x40
 800d1a2:	f7ff ff21 	bl	800cfe8 <_malloc_r>
 800d1a6:	6028      	str	r0, [r5, #0]
 800d1a8:	6128      	str	r0, [r5, #16]
 800d1aa:	b920      	cbnz	r0, 800d1b6 <_svfiprintf_r+0x2e>
 800d1ac:	230c      	movs	r3, #12
 800d1ae:	603b      	str	r3, [r7, #0]
 800d1b0:	f04f 30ff 	mov.w	r0, #4294967295
 800d1b4:	e0d1      	b.n	800d35a <_svfiprintf_r+0x1d2>
 800d1b6:	2340      	movs	r3, #64	; 0x40
 800d1b8:	616b      	str	r3, [r5, #20]
 800d1ba:	2300      	movs	r3, #0
 800d1bc:	9309      	str	r3, [sp, #36]	; 0x24
 800d1be:	2320      	movs	r3, #32
 800d1c0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d1c4:	f8cd 800c 	str.w	r8, [sp, #12]
 800d1c8:	2330      	movs	r3, #48	; 0x30
 800d1ca:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800d374 <_svfiprintf_r+0x1ec>
 800d1ce:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d1d2:	f04f 0901 	mov.w	r9, #1
 800d1d6:	4623      	mov	r3, r4
 800d1d8:	469a      	mov	sl, r3
 800d1da:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d1de:	b10a      	cbz	r2, 800d1e4 <_svfiprintf_r+0x5c>
 800d1e0:	2a25      	cmp	r2, #37	; 0x25
 800d1e2:	d1f9      	bne.n	800d1d8 <_svfiprintf_r+0x50>
 800d1e4:	ebba 0b04 	subs.w	fp, sl, r4
 800d1e8:	d00b      	beq.n	800d202 <_svfiprintf_r+0x7a>
 800d1ea:	465b      	mov	r3, fp
 800d1ec:	4622      	mov	r2, r4
 800d1ee:	4629      	mov	r1, r5
 800d1f0:	4638      	mov	r0, r7
 800d1f2:	f7ff ff6d 	bl	800d0d0 <__ssputs_r>
 800d1f6:	3001      	adds	r0, #1
 800d1f8:	f000 80aa 	beq.w	800d350 <_svfiprintf_r+0x1c8>
 800d1fc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d1fe:	445a      	add	r2, fp
 800d200:	9209      	str	r2, [sp, #36]	; 0x24
 800d202:	f89a 3000 	ldrb.w	r3, [sl]
 800d206:	2b00      	cmp	r3, #0
 800d208:	f000 80a2 	beq.w	800d350 <_svfiprintf_r+0x1c8>
 800d20c:	2300      	movs	r3, #0
 800d20e:	f04f 32ff 	mov.w	r2, #4294967295
 800d212:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d216:	f10a 0a01 	add.w	sl, sl, #1
 800d21a:	9304      	str	r3, [sp, #16]
 800d21c:	9307      	str	r3, [sp, #28]
 800d21e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d222:	931a      	str	r3, [sp, #104]	; 0x68
 800d224:	4654      	mov	r4, sl
 800d226:	2205      	movs	r2, #5
 800d228:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d22c:	4851      	ldr	r0, [pc, #324]	; (800d374 <_svfiprintf_r+0x1ec>)
 800d22e:	f7f2 ffcf 	bl	80001d0 <memchr>
 800d232:	9a04      	ldr	r2, [sp, #16]
 800d234:	b9d8      	cbnz	r0, 800d26e <_svfiprintf_r+0xe6>
 800d236:	06d0      	lsls	r0, r2, #27
 800d238:	bf44      	itt	mi
 800d23a:	2320      	movmi	r3, #32
 800d23c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d240:	0711      	lsls	r1, r2, #28
 800d242:	bf44      	itt	mi
 800d244:	232b      	movmi	r3, #43	; 0x2b
 800d246:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d24a:	f89a 3000 	ldrb.w	r3, [sl]
 800d24e:	2b2a      	cmp	r3, #42	; 0x2a
 800d250:	d015      	beq.n	800d27e <_svfiprintf_r+0xf6>
 800d252:	9a07      	ldr	r2, [sp, #28]
 800d254:	4654      	mov	r4, sl
 800d256:	2000      	movs	r0, #0
 800d258:	f04f 0c0a 	mov.w	ip, #10
 800d25c:	4621      	mov	r1, r4
 800d25e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d262:	3b30      	subs	r3, #48	; 0x30
 800d264:	2b09      	cmp	r3, #9
 800d266:	d94e      	bls.n	800d306 <_svfiprintf_r+0x17e>
 800d268:	b1b0      	cbz	r0, 800d298 <_svfiprintf_r+0x110>
 800d26a:	9207      	str	r2, [sp, #28]
 800d26c:	e014      	b.n	800d298 <_svfiprintf_r+0x110>
 800d26e:	eba0 0308 	sub.w	r3, r0, r8
 800d272:	fa09 f303 	lsl.w	r3, r9, r3
 800d276:	4313      	orrs	r3, r2
 800d278:	9304      	str	r3, [sp, #16]
 800d27a:	46a2      	mov	sl, r4
 800d27c:	e7d2      	b.n	800d224 <_svfiprintf_r+0x9c>
 800d27e:	9b03      	ldr	r3, [sp, #12]
 800d280:	1d19      	adds	r1, r3, #4
 800d282:	681b      	ldr	r3, [r3, #0]
 800d284:	9103      	str	r1, [sp, #12]
 800d286:	2b00      	cmp	r3, #0
 800d288:	bfbb      	ittet	lt
 800d28a:	425b      	neglt	r3, r3
 800d28c:	f042 0202 	orrlt.w	r2, r2, #2
 800d290:	9307      	strge	r3, [sp, #28]
 800d292:	9307      	strlt	r3, [sp, #28]
 800d294:	bfb8      	it	lt
 800d296:	9204      	strlt	r2, [sp, #16]
 800d298:	7823      	ldrb	r3, [r4, #0]
 800d29a:	2b2e      	cmp	r3, #46	; 0x2e
 800d29c:	d10c      	bne.n	800d2b8 <_svfiprintf_r+0x130>
 800d29e:	7863      	ldrb	r3, [r4, #1]
 800d2a0:	2b2a      	cmp	r3, #42	; 0x2a
 800d2a2:	d135      	bne.n	800d310 <_svfiprintf_r+0x188>
 800d2a4:	9b03      	ldr	r3, [sp, #12]
 800d2a6:	1d1a      	adds	r2, r3, #4
 800d2a8:	681b      	ldr	r3, [r3, #0]
 800d2aa:	9203      	str	r2, [sp, #12]
 800d2ac:	2b00      	cmp	r3, #0
 800d2ae:	bfb8      	it	lt
 800d2b0:	f04f 33ff 	movlt.w	r3, #4294967295
 800d2b4:	3402      	adds	r4, #2
 800d2b6:	9305      	str	r3, [sp, #20]
 800d2b8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800d384 <_svfiprintf_r+0x1fc>
 800d2bc:	7821      	ldrb	r1, [r4, #0]
 800d2be:	2203      	movs	r2, #3
 800d2c0:	4650      	mov	r0, sl
 800d2c2:	f7f2 ff85 	bl	80001d0 <memchr>
 800d2c6:	b140      	cbz	r0, 800d2da <_svfiprintf_r+0x152>
 800d2c8:	2340      	movs	r3, #64	; 0x40
 800d2ca:	eba0 000a 	sub.w	r0, r0, sl
 800d2ce:	fa03 f000 	lsl.w	r0, r3, r0
 800d2d2:	9b04      	ldr	r3, [sp, #16]
 800d2d4:	4303      	orrs	r3, r0
 800d2d6:	3401      	adds	r4, #1
 800d2d8:	9304      	str	r3, [sp, #16]
 800d2da:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d2de:	4826      	ldr	r0, [pc, #152]	; (800d378 <_svfiprintf_r+0x1f0>)
 800d2e0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d2e4:	2206      	movs	r2, #6
 800d2e6:	f7f2 ff73 	bl	80001d0 <memchr>
 800d2ea:	2800      	cmp	r0, #0
 800d2ec:	d038      	beq.n	800d360 <_svfiprintf_r+0x1d8>
 800d2ee:	4b23      	ldr	r3, [pc, #140]	; (800d37c <_svfiprintf_r+0x1f4>)
 800d2f0:	bb1b      	cbnz	r3, 800d33a <_svfiprintf_r+0x1b2>
 800d2f2:	9b03      	ldr	r3, [sp, #12]
 800d2f4:	3307      	adds	r3, #7
 800d2f6:	f023 0307 	bic.w	r3, r3, #7
 800d2fa:	3308      	adds	r3, #8
 800d2fc:	9303      	str	r3, [sp, #12]
 800d2fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d300:	4433      	add	r3, r6
 800d302:	9309      	str	r3, [sp, #36]	; 0x24
 800d304:	e767      	b.n	800d1d6 <_svfiprintf_r+0x4e>
 800d306:	fb0c 3202 	mla	r2, ip, r2, r3
 800d30a:	460c      	mov	r4, r1
 800d30c:	2001      	movs	r0, #1
 800d30e:	e7a5      	b.n	800d25c <_svfiprintf_r+0xd4>
 800d310:	2300      	movs	r3, #0
 800d312:	3401      	adds	r4, #1
 800d314:	9305      	str	r3, [sp, #20]
 800d316:	4619      	mov	r1, r3
 800d318:	f04f 0c0a 	mov.w	ip, #10
 800d31c:	4620      	mov	r0, r4
 800d31e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d322:	3a30      	subs	r2, #48	; 0x30
 800d324:	2a09      	cmp	r2, #9
 800d326:	d903      	bls.n	800d330 <_svfiprintf_r+0x1a8>
 800d328:	2b00      	cmp	r3, #0
 800d32a:	d0c5      	beq.n	800d2b8 <_svfiprintf_r+0x130>
 800d32c:	9105      	str	r1, [sp, #20]
 800d32e:	e7c3      	b.n	800d2b8 <_svfiprintf_r+0x130>
 800d330:	fb0c 2101 	mla	r1, ip, r1, r2
 800d334:	4604      	mov	r4, r0
 800d336:	2301      	movs	r3, #1
 800d338:	e7f0      	b.n	800d31c <_svfiprintf_r+0x194>
 800d33a:	ab03      	add	r3, sp, #12
 800d33c:	9300      	str	r3, [sp, #0]
 800d33e:	462a      	mov	r2, r5
 800d340:	4b0f      	ldr	r3, [pc, #60]	; (800d380 <_svfiprintf_r+0x1f8>)
 800d342:	a904      	add	r1, sp, #16
 800d344:	4638      	mov	r0, r7
 800d346:	f3af 8000 	nop.w
 800d34a:	1c42      	adds	r2, r0, #1
 800d34c:	4606      	mov	r6, r0
 800d34e:	d1d6      	bne.n	800d2fe <_svfiprintf_r+0x176>
 800d350:	89ab      	ldrh	r3, [r5, #12]
 800d352:	065b      	lsls	r3, r3, #25
 800d354:	f53f af2c 	bmi.w	800d1b0 <_svfiprintf_r+0x28>
 800d358:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d35a:	b01d      	add	sp, #116	; 0x74
 800d35c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d360:	ab03      	add	r3, sp, #12
 800d362:	9300      	str	r3, [sp, #0]
 800d364:	462a      	mov	r2, r5
 800d366:	4b06      	ldr	r3, [pc, #24]	; (800d380 <_svfiprintf_r+0x1f8>)
 800d368:	a904      	add	r1, sp, #16
 800d36a:	4638      	mov	r0, r7
 800d36c:	f000 f9d4 	bl	800d718 <_printf_i>
 800d370:	e7eb      	b.n	800d34a <_svfiprintf_r+0x1c2>
 800d372:	bf00      	nop
 800d374:	0800e6c4 	.word	0x0800e6c4
 800d378:	0800e6ce 	.word	0x0800e6ce
 800d37c:	00000000 	.word	0x00000000
 800d380:	0800d0d1 	.word	0x0800d0d1
 800d384:	0800e6ca 	.word	0x0800e6ca

0800d388 <__sfputc_r>:
 800d388:	6893      	ldr	r3, [r2, #8]
 800d38a:	3b01      	subs	r3, #1
 800d38c:	2b00      	cmp	r3, #0
 800d38e:	b410      	push	{r4}
 800d390:	6093      	str	r3, [r2, #8]
 800d392:	da08      	bge.n	800d3a6 <__sfputc_r+0x1e>
 800d394:	6994      	ldr	r4, [r2, #24]
 800d396:	42a3      	cmp	r3, r4
 800d398:	db01      	blt.n	800d39e <__sfputc_r+0x16>
 800d39a:	290a      	cmp	r1, #10
 800d39c:	d103      	bne.n	800d3a6 <__sfputc_r+0x1e>
 800d39e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d3a2:	f000 bb33 	b.w	800da0c <__swbuf_r>
 800d3a6:	6813      	ldr	r3, [r2, #0]
 800d3a8:	1c58      	adds	r0, r3, #1
 800d3aa:	6010      	str	r0, [r2, #0]
 800d3ac:	7019      	strb	r1, [r3, #0]
 800d3ae:	4608      	mov	r0, r1
 800d3b0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d3b4:	4770      	bx	lr

0800d3b6 <__sfputs_r>:
 800d3b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d3b8:	4606      	mov	r6, r0
 800d3ba:	460f      	mov	r7, r1
 800d3bc:	4614      	mov	r4, r2
 800d3be:	18d5      	adds	r5, r2, r3
 800d3c0:	42ac      	cmp	r4, r5
 800d3c2:	d101      	bne.n	800d3c8 <__sfputs_r+0x12>
 800d3c4:	2000      	movs	r0, #0
 800d3c6:	e007      	b.n	800d3d8 <__sfputs_r+0x22>
 800d3c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d3cc:	463a      	mov	r2, r7
 800d3ce:	4630      	mov	r0, r6
 800d3d0:	f7ff ffda 	bl	800d388 <__sfputc_r>
 800d3d4:	1c43      	adds	r3, r0, #1
 800d3d6:	d1f3      	bne.n	800d3c0 <__sfputs_r+0xa>
 800d3d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d3dc <_vfiprintf_r>:
 800d3dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d3e0:	460d      	mov	r5, r1
 800d3e2:	b09d      	sub	sp, #116	; 0x74
 800d3e4:	4614      	mov	r4, r2
 800d3e6:	4698      	mov	r8, r3
 800d3e8:	4606      	mov	r6, r0
 800d3ea:	b118      	cbz	r0, 800d3f4 <_vfiprintf_r+0x18>
 800d3ec:	6983      	ldr	r3, [r0, #24]
 800d3ee:	b90b      	cbnz	r3, 800d3f4 <_vfiprintf_r+0x18>
 800d3f0:	f7ff fd3a 	bl	800ce68 <__sinit>
 800d3f4:	4b89      	ldr	r3, [pc, #548]	; (800d61c <_vfiprintf_r+0x240>)
 800d3f6:	429d      	cmp	r5, r3
 800d3f8:	d11b      	bne.n	800d432 <_vfiprintf_r+0x56>
 800d3fa:	6875      	ldr	r5, [r6, #4]
 800d3fc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d3fe:	07d9      	lsls	r1, r3, #31
 800d400:	d405      	bmi.n	800d40e <_vfiprintf_r+0x32>
 800d402:	89ab      	ldrh	r3, [r5, #12]
 800d404:	059a      	lsls	r2, r3, #22
 800d406:	d402      	bmi.n	800d40e <_vfiprintf_r+0x32>
 800d408:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d40a:	f7ff fdcb 	bl	800cfa4 <__retarget_lock_acquire_recursive>
 800d40e:	89ab      	ldrh	r3, [r5, #12]
 800d410:	071b      	lsls	r3, r3, #28
 800d412:	d501      	bpl.n	800d418 <_vfiprintf_r+0x3c>
 800d414:	692b      	ldr	r3, [r5, #16]
 800d416:	b9eb      	cbnz	r3, 800d454 <_vfiprintf_r+0x78>
 800d418:	4629      	mov	r1, r5
 800d41a:	4630      	mov	r0, r6
 800d41c:	f000 fb5a 	bl	800dad4 <__swsetup_r>
 800d420:	b1c0      	cbz	r0, 800d454 <_vfiprintf_r+0x78>
 800d422:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d424:	07dc      	lsls	r4, r3, #31
 800d426:	d50e      	bpl.n	800d446 <_vfiprintf_r+0x6a>
 800d428:	f04f 30ff 	mov.w	r0, #4294967295
 800d42c:	b01d      	add	sp, #116	; 0x74
 800d42e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d432:	4b7b      	ldr	r3, [pc, #492]	; (800d620 <_vfiprintf_r+0x244>)
 800d434:	429d      	cmp	r5, r3
 800d436:	d101      	bne.n	800d43c <_vfiprintf_r+0x60>
 800d438:	68b5      	ldr	r5, [r6, #8]
 800d43a:	e7df      	b.n	800d3fc <_vfiprintf_r+0x20>
 800d43c:	4b79      	ldr	r3, [pc, #484]	; (800d624 <_vfiprintf_r+0x248>)
 800d43e:	429d      	cmp	r5, r3
 800d440:	bf08      	it	eq
 800d442:	68f5      	ldreq	r5, [r6, #12]
 800d444:	e7da      	b.n	800d3fc <_vfiprintf_r+0x20>
 800d446:	89ab      	ldrh	r3, [r5, #12]
 800d448:	0598      	lsls	r0, r3, #22
 800d44a:	d4ed      	bmi.n	800d428 <_vfiprintf_r+0x4c>
 800d44c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d44e:	f7ff fdaa 	bl	800cfa6 <__retarget_lock_release_recursive>
 800d452:	e7e9      	b.n	800d428 <_vfiprintf_r+0x4c>
 800d454:	2300      	movs	r3, #0
 800d456:	9309      	str	r3, [sp, #36]	; 0x24
 800d458:	2320      	movs	r3, #32
 800d45a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d45e:	f8cd 800c 	str.w	r8, [sp, #12]
 800d462:	2330      	movs	r3, #48	; 0x30
 800d464:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800d628 <_vfiprintf_r+0x24c>
 800d468:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d46c:	f04f 0901 	mov.w	r9, #1
 800d470:	4623      	mov	r3, r4
 800d472:	469a      	mov	sl, r3
 800d474:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d478:	b10a      	cbz	r2, 800d47e <_vfiprintf_r+0xa2>
 800d47a:	2a25      	cmp	r2, #37	; 0x25
 800d47c:	d1f9      	bne.n	800d472 <_vfiprintf_r+0x96>
 800d47e:	ebba 0b04 	subs.w	fp, sl, r4
 800d482:	d00b      	beq.n	800d49c <_vfiprintf_r+0xc0>
 800d484:	465b      	mov	r3, fp
 800d486:	4622      	mov	r2, r4
 800d488:	4629      	mov	r1, r5
 800d48a:	4630      	mov	r0, r6
 800d48c:	f7ff ff93 	bl	800d3b6 <__sfputs_r>
 800d490:	3001      	adds	r0, #1
 800d492:	f000 80aa 	beq.w	800d5ea <_vfiprintf_r+0x20e>
 800d496:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d498:	445a      	add	r2, fp
 800d49a:	9209      	str	r2, [sp, #36]	; 0x24
 800d49c:	f89a 3000 	ldrb.w	r3, [sl]
 800d4a0:	2b00      	cmp	r3, #0
 800d4a2:	f000 80a2 	beq.w	800d5ea <_vfiprintf_r+0x20e>
 800d4a6:	2300      	movs	r3, #0
 800d4a8:	f04f 32ff 	mov.w	r2, #4294967295
 800d4ac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d4b0:	f10a 0a01 	add.w	sl, sl, #1
 800d4b4:	9304      	str	r3, [sp, #16]
 800d4b6:	9307      	str	r3, [sp, #28]
 800d4b8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d4bc:	931a      	str	r3, [sp, #104]	; 0x68
 800d4be:	4654      	mov	r4, sl
 800d4c0:	2205      	movs	r2, #5
 800d4c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d4c6:	4858      	ldr	r0, [pc, #352]	; (800d628 <_vfiprintf_r+0x24c>)
 800d4c8:	f7f2 fe82 	bl	80001d0 <memchr>
 800d4cc:	9a04      	ldr	r2, [sp, #16]
 800d4ce:	b9d8      	cbnz	r0, 800d508 <_vfiprintf_r+0x12c>
 800d4d0:	06d1      	lsls	r1, r2, #27
 800d4d2:	bf44      	itt	mi
 800d4d4:	2320      	movmi	r3, #32
 800d4d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d4da:	0713      	lsls	r3, r2, #28
 800d4dc:	bf44      	itt	mi
 800d4de:	232b      	movmi	r3, #43	; 0x2b
 800d4e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d4e4:	f89a 3000 	ldrb.w	r3, [sl]
 800d4e8:	2b2a      	cmp	r3, #42	; 0x2a
 800d4ea:	d015      	beq.n	800d518 <_vfiprintf_r+0x13c>
 800d4ec:	9a07      	ldr	r2, [sp, #28]
 800d4ee:	4654      	mov	r4, sl
 800d4f0:	2000      	movs	r0, #0
 800d4f2:	f04f 0c0a 	mov.w	ip, #10
 800d4f6:	4621      	mov	r1, r4
 800d4f8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d4fc:	3b30      	subs	r3, #48	; 0x30
 800d4fe:	2b09      	cmp	r3, #9
 800d500:	d94e      	bls.n	800d5a0 <_vfiprintf_r+0x1c4>
 800d502:	b1b0      	cbz	r0, 800d532 <_vfiprintf_r+0x156>
 800d504:	9207      	str	r2, [sp, #28]
 800d506:	e014      	b.n	800d532 <_vfiprintf_r+0x156>
 800d508:	eba0 0308 	sub.w	r3, r0, r8
 800d50c:	fa09 f303 	lsl.w	r3, r9, r3
 800d510:	4313      	orrs	r3, r2
 800d512:	9304      	str	r3, [sp, #16]
 800d514:	46a2      	mov	sl, r4
 800d516:	e7d2      	b.n	800d4be <_vfiprintf_r+0xe2>
 800d518:	9b03      	ldr	r3, [sp, #12]
 800d51a:	1d19      	adds	r1, r3, #4
 800d51c:	681b      	ldr	r3, [r3, #0]
 800d51e:	9103      	str	r1, [sp, #12]
 800d520:	2b00      	cmp	r3, #0
 800d522:	bfbb      	ittet	lt
 800d524:	425b      	neglt	r3, r3
 800d526:	f042 0202 	orrlt.w	r2, r2, #2
 800d52a:	9307      	strge	r3, [sp, #28]
 800d52c:	9307      	strlt	r3, [sp, #28]
 800d52e:	bfb8      	it	lt
 800d530:	9204      	strlt	r2, [sp, #16]
 800d532:	7823      	ldrb	r3, [r4, #0]
 800d534:	2b2e      	cmp	r3, #46	; 0x2e
 800d536:	d10c      	bne.n	800d552 <_vfiprintf_r+0x176>
 800d538:	7863      	ldrb	r3, [r4, #1]
 800d53a:	2b2a      	cmp	r3, #42	; 0x2a
 800d53c:	d135      	bne.n	800d5aa <_vfiprintf_r+0x1ce>
 800d53e:	9b03      	ldr	r3, [sp, #12]
 800d540:	1d1a      	adds	r2, r3, #4
 800d542:	681b      	ldr	r3, [r3, #0]
 800d544:	9203      	str	r2, [sp, #12]
 800d546:	2b00      	cmp	r3, #0
 800d548:	bfb8      	it	lt
 800d54a:	f04f 33ff 	movlt.w	r3, #4294967295
 800d54e:	3402      	adds	r4, #2
 800d550:	9305      	str	r3, [sp, #20]
 800d552:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800d638 <_vfiprintf_r+0x25c>
 800d556:	7821      	ldrb	r1, [r4, #0]
 800d558:	2203      	movs	r2, #3
 800d55a:	4650      	mov	r0, sl
 800d55c:	f7f2 fe38 	bl	80001d0 <memchr>
 800d560:	b140      	cbz	r0, 800d574 <_vfiprintf_r+0x198>
 800d562:	2340      	movs	r3, #64	; 0x40
 800d564:	eba0 000a 	sub.w	r0, r0, sl
 800d568:	fa03 f000 	lsl.w	r0, r3, r0
 800d56c:	9b04      	ldr	r3, [sp, #16]
 800d56e:	4303      	orrs	r3, r0
 800d570:	3401      	adds	r4, #1
 800d572:	9304      	str	r3, [sp, #16]
 800d574:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d578:	482c      	ldr	r0, [pc, #176]	; (800d62c <_vfiprintf_r+0x250>)
 800d57a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d57e:	2206      	movs	r2, #6
 800d580:	f7f2 fe26 	bl	80001d0 <memchr>
 800d584:	2800      	cmp	r0, #0
 800d586:	d03f      	beq.n	800d608 <_vfiprintf_r+0x22c>
 800d588:	4b29      	ldr	r3, [pc, #164]	; (800d630 <_vfiprintf_r+0x254>)
 800d58a:	bb1b      	cbnz	r3, 800d5d4 <_vfiprintf_r+0x1f8>
 800d58c:	9b03      	ldr	r3, [sp, #12]
 800d58e:	3307      	adds	r3, #7
 800d590:	f023 0307 	bic.w	r3, r3, #7
 800d594:	3308      	adds	r3, #8
 800d596:	9303      	str	r3, [sp, #12]
 800d598:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d59a:	443b      	add	r3, r7
 800d59c:	9309      	str	r3, [sp, #36]	; 0x24
 800d59e:	e767      	b.n	800d470 <_vfiprintf_r+0x94>
 800d5a0:	fb0c 3202 	mla	r2, ip, r2, r3
 800d5a4:	460c      	mov	r4, r1
 800d5a6:	2001      	movs	r0, #1
 800d5a8:	e7a5      	b.n	800d4f6 <_vfiprintf_r+0x11a>
 800d5aa:	2300      	movs	r3, #0
 800d5ac:	3401      	adds	r4, #1
 800d5ae:	9305      	str	r3, [sp, #20]
 800d5b0:	4619      	mov	r1, r3
 800d5b2:	f04f 0c0a 	mov.w	ip, #10
 800d5b6:	4620      	mov	r0, r4
 800d5b8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d5bc:	3a30      	subs	r2, #48	; 0x30
 800d5be:	2a09      	cmp	r2, #9
 800d5c0:	d903      	bls.n	800d5ca <_vfiprintf_r+0x1ee>
 800d5c2:	2b00      	cmp	r3, #0
 800d5c4:	d0c5      	beq.n	800d552 <_vfiprintf_r+0x176>
 800d5c6:	9105      	str	r1, [sp, #20]
 800d5c8:	e7c3      	b.n	800d552 <_vfiprintf_r+0x176>
 800d5ca:	fb0c 2101 	mla	r1, ip, r1, r2
 800d5ce:	4604      	mov	r4, r0
 800d5d0:	2301      	movs	r3, #1
 800d5d2:	e7f0      	b.n	800d5b6 <_vfiprintf_r+0x1da>
 800d5d4:	ab03      	add	r3, sp, #12
 800d5d6:	9300      	str	r3, [sp, #0]
 800d5d8:	462a      	mov	r2, r5
 800d5da:	4b16      	ldr	r3, [pc, #88]	; (800d634 <_vfiprintf_r+0x258>)
 800d5dc:	a904      	add	r1, sp, #16
 800d5de:	4630      	mov	r0, r6
 800d5e0:	f3af 8000 	nop.w
 800d5e4:	4607      	mov	r7, r0
 800d5e6:	1c78      	adds	r0, r7, #1
 800d5e8:	d1d6      	bne.n	800d598 <_vfiprintf_r+0x1bc>
 800d5ea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d5ec:	07d9      	lsls	r1, r3, #31
 800d5ee:	d405      	bmi.n	800d5fc <_vfiprintf_r+0x220>
 800d5f0:	89ab      	ldrh	r3, [r5, #12]
 800d5f2:	059a      	lsls	r2, r3, #22
 800d5f4:	d402      	bmi.n	800d5fc <_vfiprintf_r+0x220>
 800d5f6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d5f8:	f7ff fcd5 	bl	800cfa6 <__retarget_lock_release_recursive>
 800d5fc:	89ab      	ldrh	r3, [r5, #12]
 800d5fe:	065b      	lsls	r3, r3, #25
 800d600:	f53f af12 	bmi.w	800d428 <_vfiprintf_r+0x4c>
 800d604:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d606:	e711      	b.n	800d42c <_vfiprintf_r+0x50>
 800d608:	ab03      	add	r3, sp, #12
 800d60a:	9300      	str	r3, [sp, #0]
 800d60c:	462a      	mov	r2, r5
 800d60e:	4b09      	ldr	r3, [pc, #36]	; (800d634 <_vfiprintf_r+0x258>)
 800d610:	a904      	add	r1, sp, #16
 800d612:	4630      	mov	r0, r6
 800d614:	f000 f880 	bl	800d718 <_printf_i>
 800d618:	e7e4      	b.n	800d5e4 <_vfiprintf_r+0x208>
 800d61a:	bf00      	nop
 800d61c:	0800e684 	.word	0x0800e684
 800d620:	0800e6a4 	.word	0x0800e6a4
 800d624:	0800e664 	.word	0x0800e664
 800d628:	0800e6c4 	.word	0x0800e6c4
 800d62c:	0800e6ce 	.word	0x0800e6ce
 800d630:	00000000 	.word	0x00000000
 800d634:	0800d3b7 	.word	0x0800d3b7
 800d638:	0800e6ca 	.word	0x0800e6ca

0800d63c <_printf_common>:
 800d63c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d640:	4616      	mov	r6, r2
 800d642:	4699      	mov	r9, r3
 800d644:	688a      	ldr	r2, [r1, #8]
 800d646:	690b      	ldr	r3, [r1, #16]
 800d648:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d64c:	4293      	cmp	r3, r2
 800d64e:	bfb8      	it	lt
 800d650:	4613      	movlt	r3, r2
 800d652:	6033      	str	r3, [r6, #0]
 800d654:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d658:	4607      	mov	r7, r0
 800d65a:	460c      	mov	r4, r1
 800d65c:	b10a      	cbz	r2, 800d662 <_printf_common+0x26>
 800d65e:	3301      	adds	r3, #1
 800d660:	6033      	str	r3, [r6, #0]
 800d662:	6823      	ldr	r3, [r4, #0]
 800d664:	0699      	lsls	r1, r3, #26
 800d666:	bf42      	ittt	mi
 800d668:	6833      	ldrmi	r3, [r6, #0]
 800d66a:	3302      	addmi	r3, #2
 800d66c:	6033      	strmi	r3, [r6, #0]
 800d66e:	6825      	ldr	r5, [r4, #0]
 800d670:	f015 0506 	ands.w	r5, r5, #6
 800d674:	d106      	bne.n	800d684 <_printf_common+0x48>
 800d676:	f104 0a19 	add.w	sl, r4, #25
 800d67a:	68e3      	ldr	r3, [r4, #12]
 800d67c:	6832      	ldr	r2, [r6, #0]
 800d67e:	1a9b      	subs	r3, r3, r2
 800d680:	42ab      	cmp	r3, r5
 800d682:	dc26      	bgt.n	800d6d2 <_printf_common+0x96>
 800d684:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d688:	1e13      	subs	r3, r2, #0
 800d68a:	6822      	ldr	r2, [r4, #0]
 800d68c:	bf18      	it	ne
 800d68e:	2301      	movne	r3, #1
 800d690:	0692      	lsls	r2, r2, #26
 800d692:	d42b      	bmi.n	800d6ec <_printf_common+0xb0>
 800d694:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d698:	4649      	mov	r1, r9
 800d69a:	4638      	mov	r0, r7
 800d69c:	47c0      	blx	r8
 800d69e:	3001      	adds	r0, #1
 800d6a0:	d01e      	beq.n	800d6e0 <_printf_common+0xa4>
 800d6a2:	6823      	ldr	r3, [r4, #0]
 800d6a4:	68e5      	ldr	r5, [r4, #12]
 800d6a6:	6832      	ldr	r2, [r6, #0]
 800d6a8:	f003 0306 	and.w	r3, r3, #6
 800d6ac:	2b04      	cmp	r3, #4
 800d6ae:	bf08      	it	eq
 800d6b0:	1aad      	subeq	r5, r5, r2
 800d6b2:	68a3      	ldr	r3, [r4, #8]
 800d6b4:	6922      	ldr	r2, [r4, #16]
 800d6b6:	bf0c      	ite	eq
 800d6b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d6bc:	2500      	movne	r5, #0
 800d6be:	4293      	cmp	r3, r2
 800d6c0:	bfc4      	itt	gt
 800d6c2:	1a9b      	subgt	r3, r3, r2
 800d6c4:	18ed      	addgt	r5, r5, r3
 800d6c6:	2600      	movs	r6, #0
 800d6c8:	341a      	adds	r4, #26
 800d6ca:	42b5      	cmp	r5, r6
 800d6cc:	d11a      	bne.n	800d704 <_printf_common+0xc8>
 800d6ce:	2000      	movs	r0, #0
 800d6d0:	e008      	b.n	800d6e4 <_printf_common+0xa8>
 800d6d2:	2301      	movs	r3, #1
 800d6d4:	4652      	mov	r2, sl
 800d6d6:	4649      	mov	r1, r9
 800d6d8:	4638      	mov	r0, r7
 800d6da:	47c0      	blx	r8
 800d6dc:	3001      	adds	r0, #1
 800d6de:	d103      	bne.n	800d6e8 <_printf_common+0xac>
 800d6e0:	f04f 30ff 	mov.w	r0, #4294967295
 800d6e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d6e8:	3501      	adds	r5, #1
 800d6ea:	e7c6      	b.n	800d67a <_printf_common+0x3e>
 800d6ec:	18e1      	adds	r1, r4, r3
 800d6ee:	1c5a      	adds	r2, r3, #1
 800d6f0:	2030      	movs	r0, #48	; 0x30
 800d6f2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d6f6:	4422      	add	r2, r4
 800d6f8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d6fc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d700:	3302      	adds	r3, #2
 800d702:	e7c7      	b.n	800d694 <_printf_common+0x58>
 800d704:	2301      	movs	r3, #1
 800d706:	4622      	mov	r2, r4
 800d708:	4649      	mov	r1, r9
 800d70a:	4638      	mov	r0, r7
 800d70c:	47c0      	blx	r8
 800d70e:	3001      	adds	r0, #1
 800d710:	d0e6      	beq.n	800d6e0 <_printf_common+0xa4>
 800d712:	3601      	adds	r6, #1
 800d714:	e7d9      	b.n	800d6ca <_printf_common+0x8e>
	...

0800d718 <_printf_i>:
 800d718:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d71c:	7e0f      	ldrb	r7, [r1, #24]
 800d71e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d720:	2f78      	cmp	r7, #120	; 0x78
 800d722:	4691      	mov	r9, r2
 800d724:	4680      	mov	r8, r0
 800d726:	460c      	mov	r4, r1
 800d728:	469a      	mov	sl, r3
 800d72a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800d72e:	d807      	bhi.n	800d740 <_printf_i+0x28>
 800d730:	2f62      	cmp	r7, #98	; 0x62
 800d732:	d80a      	bhi.n	800d74a <_printf_i+0x32>
 800d734:	2f00      	cmp	r7, #0
 800d736:	f000 80d8 	beq.w	800d8ea <_printf_i+0x1d2>
 800d73a:	2f58      	cmp	r7, #88	; 0x58
 800d73c:	f000 80a3 	beq.w	800d886 <_printf_i+0x16e>
 800d740:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d744:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d748:	e03a      	b.n	800d7c0 <_printf_i+0xa8>
 800d74a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d74e:	2b15      	cmp	r3, #21
 800d750:	d8f6      	bhi.n	800d740 <_printf_i+0x28>
 800d752:	a101      	add	r1, pc, #4	; (adr r1, 800d758 <_printf_i+0x40>)
 800d754:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d758:	0800d7b1 	.word	0x0800d7b1
 800d75c:	0800d7c5 	.word	0x0800d7c5
 800d760:	0800d741 	.word	0x0800d741
 800d764:	0800d741 	.word	0x0800d741
 800d768:	0800d741 	.word	0x0800d741
 800d76c:	0800d741 	.word	0x0800d741
 800d770:	0800d7c5 	.word	0x0800d7c5
 800d774:	0800d741 	.word	0x0800d741
 800d778:	0800d741 	.word	0x0800d741
 800d77c:	0800d741 	.word	0x0800d741
 800d780:	0800d741 	.word	0x0800d741
 800d784:	0800d8d1 	.word	0x0800d8d1
 800d788:	0800d7f5 	.word	0x0800d7f5
 800d78c:	0800d8b3 	.word	0x0800d8b3
 800d790:	0800d741 	.word	0x0800d741
 800d794:	0800d741 	.word	0x0800d741
 800d798:	0800d8f3 	.word	0x0800d8f3
 800d79c:	0800d741 	.word	0x0800d741
 800d7a0:	0800d7f5 	.word	0x0800d7f5
 800d7a4:	0800d741 	.word	0x0800d741
 800d7a8:	0800d741 	.word	0x0800d741
 800d7ac:	0800d8bb 	.word	0x0800d8bb
 800d7b0:	682b      	ldr	r3, [r5, #0]
 800d7b2:	1d1a      	adds	r2, r3, #4
 800d7b4:	681b      	ldr	r3, [r3, #0]
 800d7b6:	602a      	str	r2, [r5, #0]
 800d7b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d7bc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d7c0:	2301      	movs	r3, #1
 800d7c2:	e0a3      	b.n	800d90c <_printf_i+0x1f4>
 800d7c4:	6820      	ldr	r0, [r4, #0]
 800d7c6:	6829      	ldr	r1, [r5, #0]
 800d7c8:	0606      	lsls	r6, r0, #24
 800d7ca:	f101 0304 	add.w	r3, r1, #4
 800d7ce:	d50a      	bpl.n	800d7e6 <_printf_i+0xce>
 800d7d0:	680e      	ldr	r6, [r1, #0]
 800d7d2:	602b      	str	r3, [r5, #0]
 800d7d4:	2e00      	cmp	r6, #0
 800d7d6:	da03      	bge.n	800d7e0 <_printf_i+0xc8>
 800d7d8:	232d      	movs	r3, #45	; 0x2d
 800d7da:	4276      	negs	r6, r6
 800d7dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d7e0:	485e      	ldr	r0, [pc, #376]	; (800d95c <_printf_i+0x244>)
 800d7e2:	230a      	movs	r3, #10
 800d7e4:	e019      	b.n	800d81a <_printf_i+0x102>
 800d7e6:	680e      	ldr	r6, [r1, #0]
 800d7e8:	602b      	str	r3, [r5, #0]
 800d7ea:	f010 0f40 	tst.w	r0, #64	; 0x40
 800d7ee:	bf18      	it	ne
 800d7f0:	b236      	sxthne	r6, r6
 800d7f2:	e7ef      	b.n	800d7d4 <_printf_i+0xbc>
 800d7f4:	682b      	ldr	r3, [r5, #0]
 800d7f6:	6820      	ldr	r0, [r4, #0]
 800d7f8:	1d19      	adds	r1, r3, #4
 800d7fa:	6029      	str	r1, [r5, #0]
 800d7fc:	0601      	lsls	r1, r0, #24
 800d7fe:	d501      	bpl.n	800d804 <_printf_i+0xec>
 800d800:	681e      	ldr	r6, [r3, #0]
 800d802:	e002      	b.n	800d80a <_printf_i+0xf2>
 800d804:	0646      	lsls	r6, r0, #25
 800d806:	d5fb      	bpl.n	800d800 <_printf_i+0xe8>
 800d808:	881e      	ldrh	r6, [r3, #0]
 800d80a:	4854      	ldr	r0, [pc, #336]	; (800d95c <_printf_i+0x244>)
 800d80c:	2f6f      	cmp	r7, #111	; 0x6f
 800d80e:	bf0c      	ite	eq
 800d810:	2308      	moveq	r3, #8
 800d812:	230a      	movne	r3, #10
 800d814:	2100      	movs	r1, #0
 800d816:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d81a:	6865      	ldr	r5, [r4, #4]
 800d81c:	60a5      	str	r5, [r4, #8]
 800d81e:	2d00      	cmp	r5, #0
 800d820:	bfa2      	ittt	ge
 800d822:	6821      	ldrge	r1, [r4, #0]
 800d824:	f021 0104 	bicge.w	r1, r1, #4
 800d828:	6021      	strge	r1, [r4, #0]
 800d82a:	b90e      	cbnz	r6, 800d830 <_printf_i+0x118>
 800d82c:	2d00      	cmp	r5, #0
 800d82e:	d04d      	beq.n	800d8cc <_printf_i+0x1b4>
 800d830:	4615      	mov	r5, r2
 800d832:	fbb6 f1f3 	udiv	r1, r6, r3
 800d836:	fb03 6711 	mls	r7, r3, r1, r6
 800d83a:	5dc7      	ldrb	r7, [r0, r7]
 800d83c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800d840:	4637      	mov	r7, r6
 800d842:	42bb      	cmp	r3, r7
 800d844:	460e      	mov	r6, r1
 800d846:	d9f4      	bls.n	800d832 <_printf_i+0x11a>
 800d848:	2b08      	cmp	r3, #8
 800d84a:	d10b      	bne.n	800d864 <_printf_i+0x14c>
 800d84c:	6823      	ldr	r3, [r4, #0]
 800d84e:	07de      	lsls	r6, r3, #31
 800d850:	d508      	bpl.n	800d864 <_printf_i+0x14c>
 800d852:	6923      	ldr	r3, [r4, #16]
 800d854:	6861      	ldr	r1, [r4, #4]
 800d856:	4299      	cmp	r1, r3
 800d858:	bfde      	ittt	le
 800d85a:	2330      	movle	r3, #48	; 0x30
 800d85c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d860:	f105 35ff 	addle.w	r5, r5, #4294967295
 800d864:	1b52      	subs	r2, r2, r5
 800d866:	6122      	str	r2, [r4, #16]
 800d868:	f8cd a000 	str.w	sl, [sp]
 800d86c:	464b      	mov	r3, r9
 800d86e:	aa03      	add	r2, sp, #12
 800d870:	4621      	mov	r1, r4
 800d872:	4640      	mov	r0, r8
 800d874:	f7ff fee2 	bl	800d63c <_printf_common>
 800d878:	3001      	adds	r0, #1
 800d87a:	d14c      	bne.n	800d916 <_printf_i+0x1fe>
 800d87c:	f04f 30ff 	mov.w	r0, #4294967295
 800d880:	b004      	add	sp, #16
 800d882:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d886:	4835      	ldr	r0, [pc, #212]	; (800d95c <_printf_i+0x244>)
 800d888:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800d88c:	6829      	ldr	r1, [r5, #0]
 800d88e:	6823      	ldr	r3, [r4, #0]
 800d890:	f851 6b04 	ldr.w	r6, [r1], #4
 800d894:	6029      	str	r1, [r5, #0]
 800d896:	061d      	lsls	r5, r3, #24
 800d898:	d514      	bpl.n	800d8c4 <_printf_i+0x1ac>
 800d89a:	07df      	lsls	r7, r3, #31
 800d89c:	bf44      	itt	mi
 800d89e:	f043 0320 	orrmi.w	r3, r3, #32
 800d8a2:	6023      	strmi	r3, [r4, #0]
 800d8a4:	b91e      	cbnz	r6, 800d8ae <_printf_i+0x196>
 800d8a6:	6823      	ldr	r3, [r4, #0]
 800d8a8:	f023 0320 	bic.w	r3, r3, #32
 800d8ac:	6023      	str	r3, [r4, #0]
 800d8ae:	2310      	movs	r3, #16
 800d8b0:	e7b0      	b.n	800d814 <_printf_i+0xfc>
 800d8b2:	6823      	ldr	r3, [r4, #0]
 800d8b4:	f043 0320 	orr.w	r3, r3, #32
 800d8b8:	6023      	str	r3, [r4, #0]
 800d8ba:	2378      	movs	r3, #120	; 0x78
 800d8bc:	4828      	ldr	r0, [pc, #160]	; (800d960 <_printf_i+0x248>)
 800d8be:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d8c2:	e7e3      	b.n	800d88c <_printf_i+0x174>
 800d8c4:	0659      	lsls	r1, r3, #25
 800d8c6:	bf48      	it	mi
 800d8c8:	b2b6      	uxthmi	r6, r6
 800d8ca:	e7e6      	b.n	800d89a <_printf_i+0x182>
 800d8cc:	4615      	mov	r5, r2
 800d8ce:	e7bb      	b.n	800d848 <_printf_i+0x130>
 800d8d0:	682b      	ldr	r3, [r5, #0]
 800d8d2:	6826      	ldr	r6, [r4, #0]
 800d8d4:	6961      	ldr	r1, [r4, #20]
 800d8d6:	1d18      	adds	r0, r3, #4
 800d8d8:	6028      	str	r0, [r5, #0]
 800d8da:	0635      	lsls	r5, r6, #24
 800d8dc:	681b      	ldr	r3, [r3, #0]
 800d8de:	d501      	bpl.n	800d8e4 <_printf_i+0x1cc>
 800d8e0:	6019      	str	r1, [r3, #0]
 800d8e2:	e002      	b.n	800d8ea <_printf_i+0x1d2>
 800d8e4:	0670      	lsls	r0, r6, #25
 800d8e6:	d5fb      	bpl.n	800d8e0 <_printf_i+0x1c8>
 800d8e8:	8019      	strh	r1, [r3, #0]
 800d8ea:	2300      	movs	r3, #0
 800d8ec:	6123      	str	r3, [r4, #16]
 800d8ee:	4615      	mov	r5, r2
 800d8f0:	e7ba      	b.n	800d868 <_printf_i+0x150>
 800d8f2:	682b      	ldr	r3, [r5, #0]
 800d8f4:	1d1a      	adds	r2, r3, #4
 800d8f6:	602a      	str	r2, [r5, #0]
 800d8f8:	681d      	ldr	r5, [r3, #0]
 800d8fa:	6862      	ldr	r2, [r4, #4]
 800d8fc:	2100      	movs	r1, #0
 800d8fe:	4628      	mov	r0, r5
 800d900:	f7f2 fc66 	bl	80001d0 <memchr>
 800d904:	b108      	cbz	r0, 800d90a <_printf_i+0x1f2>
 800d906:	1b40      	subs	r0, r0, r5
 800d908:	6060      	str	r0, [r4, #4]
 800d90a:	6863      	ldr	r3, [r4, #4]
 800d90c:	6123      	str	r3, [r4, #16]
 800d90e:	2300      	movs	r3, #0
 800d910:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d914:	e7a8      	b.n	800d868 <_printf_i+0x150>
 800d916:	6923      	ldr	r3, [r4, #16]
 800d918:	462a      	mov	r2, r5
 800d91a:	4649      	mov	r1, r9
 800d91c:	4640      	mov	r0, r8
 800d91e:	47d0      	blx	sl
 800d920:	3001      	adds	r0, #1
 800d922:	d0ab      	beq.n	800d87c <_printf_i+0x164>
 800d924:	6823      	ldr	r3, [r4, #0]
 800d926:	079b      	lsls	r3, r3, #30
 800d928:	d413      	bmi.n	800d952 <_printf_i+0x23a>
 800d92a:	68e0      	ldr	r0, [r4, #12]
 800d92c:	9b03      	ldr	r3, [sp, #12]
 800d92e:	4298      	cmp	r0, r3
 800d930:	bfb8      	it	lt
 800d932:	4618      	movlt	r0, r3
 800d934:	e7a4      	b.n	800d880 <_printf_i+0x168>
 800d936:	2301      	movs	r3, #1
 800d938:	4632      	mov	r2, r6
 800d93a:	4649      	mov	r1, r9
 800d93c:	4640      	mov	r0, r8
 800d93e:	47d0      	blx	sl
 800d940:	3001      	adds	r0, #1
 800d942:	d09b      	beq.n	800d87c <_printf_i+0x164>
 800d944:	3501      	adds	r5, #1
 800d946:	68e3      	ldr	r3, [r4, #12]
 800d948:	9903      	ldr	r1, [sp, #12]
 800d94a:	1a5b      	subs	r3, r3, r1
 800d94c:	42ab      	cmp	r3, r5
 800d94e:	dcf2      	bgt.n	800d936 <_printf_i+0x21e>
 800d950:	e7eb      	b.n	800d92a <_printf_i+0x212>
 800d952:	2500      	movs	r5, #0
 800d954:	f104 0619 	add.w	r6, r4, #25
 800d958:	e7f5      	b.n	800d946 <_printf_i+0x22e>
 800d95a:	bf00      	nop
 800d95c:	0800e6d5 	.word	0x0800e6d5
 800d960:	0800e6e6 	.word	0x0800e6e6

0800d964 <_sbrk_r>:
 800d964:	b538      	push	{r3, r4, r5, lr}
 800d966:	4d06      	ldr	r5, [pc, #24]	; (800d980 <_sbrk_r+0x1c>)
 800d968:	2300      	movs	r3, #0
 800d96a:	4604      	mov	r4, r0
 800d96c:	4608      	mov	r0, r1
 800d96e:	602b      	str	r3, [r5, #0]
 800d970:	f7f3 ff9a 	bl	80018a8 <_sbrk>
 800d974:	1c43      	adds	r3, r0, #1
 800d976:	d102      	bne.n	800d97e <_sbrk_r+0x1a>
 800d978:	682b      	ldr	r3, [r5, #0]
 800d97a:	b103      	cbz	r3, 800d97e <_sbrk_r+0x1a>
 800d97c:	6023      	str	r3, [r4, #0]
 800d97e:	bd38      	pop	{r3, r4, r5, pc}
 800d980:	20001744 	.word	0x20001744

0800d984 <__sread>:
 800d984:	b510      	push	{r4, lr}
 800d986:	460c      	mov	r4, r1
 800d988:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d98c:	f000 fb0a 	bl	800dfa4 <_read_r>
 800d990:	2800      	cmp	r0, #0
 800d992:	bfab      	itete	ge
 800d994:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d996:	89a3      	ldrhlt	r3, [r4, #12]
 800d998:	181b      	addge	r3, r3, r0
 800d99a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d99e:	bfac      	ite	ge
 800d9a0:	6563      	strge	r3, [r4, #84]	; 0x54
 800d9a2:	81a3      	strhlt	r3, [r4, #12]
 800d9a4:	bd10      	pop	{r4, pc}

0800d9a6 <__swrite>:
 800d9a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d9aa:	461f      	mov	r7, r3
 800d9ac:	898b      	ldrh	r3, [r1, #12]
 800d9ae:	05db      	lsls	r3, r3, #23
 800d9b0:	4605      	mov	r5, r0
 800d9b2:	460c      	mov	r4, r1
 800d9b4:	4616      	mov	r6, r2
 800d9b6:	d505      	bpl.n	800d9c4 <__swrite+0x1e>
 800d9b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d9bc:	2302      	movs	r3, #2
 800d9be:	2200      	movs	r2, #0
 800d9c0:	f000 f9c8 	bl	800dd54 <_lseek_r>
 800d9c4:	89a3      	ldrh	r3, [r4, #12]
 800d9c6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d9ca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d9ce:	81a3      	strh	r3, [r4, #12]
 800d9d0:	4632      	mov	r2, r6
 800d9d2:	463b      	mov	r3, r7
 800d9d4:	4628      	mov	r0, r5
 800d9d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d9da:	f000 b869 	b.w	800dab0 <_write_r>

0800d9de <__sseek>:
 800d9de:	b510      	push	{r4, lr}
 800d9e0:	460c      	mov	r4, r1
 800d9e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d9e6:	f000 f9b5 	bl	800dd54 <_lseek_r>
 800d9ea:	1c43      	adds	r3, r0, #1
 800d9ec:	89a3      	ldrh	r3, [r4, #12]
 800d9ee:	bf15      	itete	ne
 800d9f0:	6560      	strne	r0, [r4, #84]	; 0x54
 800d9f2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d9f6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d9fa:	81a3      	strheq	r3, [r4, #12]
 800d9fc:	bf18      	it	ne
 800d9fe:	81a3      	strhne	r3, [r4, #12]
 800da00:	bd10      	pop	{r4, pc}

0800da02 <__sclose>:
 800da02:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800da06:	f000 b8d3 	b.w	800dbb0 <_close_r>
	...

0800da0c <__swbuf_r>:
 800da0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da0e:	460e      	mov	r6, r1
 800da10:	4614      	mov	r4, r2
 800da12:	4605      	mov	r5, r0
 800da14:	b118      	cbz	r0, 800da1e <__swbuf_r+0x12>
 800da16:	6983      	ldr	r3, [r0, #24]
 800da18:	b90b      	cbnz	r3, 800da1e <__swbuf_r+0x12>
 800da1a:	f7ff fa25 	bl	800ce68 <__sinit>
 800da1e:	4b21      	ldr	r3, [pc, #132]	; (800daa4 <__swbuf_r+0x98>)
 800da20:	429c      	cmp	r4, r3
 800da22:	d12b      	bne.n	800da7c <__swbuf_r+0x70>
 800da24:	686c      	ldr	r4, [r5, #4]
 800da26:	69a3      	ldr	r3, [r4, #24]
 800da28:	60a3      	str	r3, [r4, #8]
 800da2a:	89a3      	ldrh	r3, [r4, #12]
 800da2c:	071a      	lsls	r2, r3, #28
 800da2e:	d52f      	bpl.n	800da90 <__swbuf_r+0x84>
 800da30:	6923      	ldr	r3, [r4, #16]
 800da32:	b36b      	cbz	r3, 800da90 <__swbuf_r+0x84>
 800da34:	6923      	ldr	r3, [r4, #16]
 800da36:	6820      	ldr	r0, [r4, #0]
 800da38:	1ac0      	subs	r0, r0, r3
 800da3a:	6963      	ldr	r3, [r4, #20]
 800da3c:	b2f6      	uxtb	r6, r6
 800da3e:	4283      	cmp	r3, r0
 800da40:	4637      	mov	r7, r6
 800da42:	dc04      	bgt.n	800da4e <__swbuf_r+0x42>
 800da44:	4621      	mov	r1, r4
 800da46:	4628      	mov	r0, r5
 800da48:	f000 f948 	bl	800dcdc <_fflush_r>
 800da4c:	bb30      	cbnz	r0, 800da9c <__swbuf_r+0x90>
 800da4e:	68a3      	ldr	r3, [r4, #8]
 800da50:	3b01      	subs	r3, #1
 800da52:	60a3      	str	r3, [r4, #8]
 800da54:	6823      	ldr	r3, [r4, #0]
 800da56:	1c5a      	adds	r2, r3, #1
 800da58:	6022      	str	r2, [r4, #0]
 800da5a:	701e      	strb	r6, [r3, #0]
 800da5c:	6963      	ldr	r3, [r4, #20]
 800da5e:	3001      	adds	r0, #1
 800da60:	4283      	cmp	r3, r0
 800da62:	d004      	beq.n	800da6e <__swbuf_r+0x62>
 800da64:	89a3      	ldrh	r3, [r4, #12]
 800da66:	07db      	lsls	r3, r3, #31
 800da68:	d506      	bpl.n	800da78 <__swbuf_r+0x6c>
 800da6a:	2e0a      	cmp	r6, #10
 800da6c:	d104      	bne.n	800da78 <__swbuf_r+0x6c>
 800da6e:	4621      	mov	r1, r4
 800da70:	4628      	mov	r0, r5
 800da72:	f000 f933 	bl	800dcdc <_fflush_r>
 800da76:	b988      	cbnz	r0, 800da9c <__swbuf_r+0x90>
 800da78:	4638      	mov	r0, r7
 800da7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800da7c:	4b0a      	ldr	r3, [pc, #40]	; (800daa8 <__swbuf_r+0x9c>)
 800da7e:	429c      	cmp	r4, r3
 800da80:	d101      	bne.n	800da86 <__swbuf_r+0x7a>
 800da82:	68ac      	ldr	r4, [r5, #8]
 800da84:	e7cf      	b.n	800da26 <__swbuf_r+0x1a>
 800da86:	4b09      	ldr	r3, [pc, #36]	; (800daac <__swbuf_r+0xa0>)
 800da88:	429c      	cmp	r4, r3
 800da8a:	bf08      	it	eq
 800da8c:	68ec      	ldreq	r4, [r5, #12]
 800da8e:	e7ca      	b.n	800da26 <__swbuf_r+0x1a>
 800da90:	4621      	mov	r1, r4
 800da92:	4628      	mov	r0, r5
 800da94:	f000 f81e 	bl	800dad4 <__swsetup_r>
 800da98:	2800      	cmp	r0, #0
 800da9a:	d0cb      	beq.n	800da34 <__swbuf_r+0x28>
 800da9c:	f04f 37ff 	mov.w	r7, #4294967295
 800daa0:	e7ea      	b.n	800da78 <__swbuf_r+0x6c>
 800daa2:	bf00      	nop
 800daa4:	0800e684 	.word	0x0800e684
 800daa8:	0800e6a4 	.word	0x0800e6a4
 800daac:	0800e664 	.word	0x0800e664

0800dab0 <_write_r>:
 800dab0:	b538      	push	{r3, r4, r5, lr}
 800dab2:	4d07      	ldr	r5, [pc, #28]	; (800dad0 <_write_r+0x20>)
 800dab4:	4604      	mov	r4, r0
 800dab6:	4608      	mov	r0, r1
 800dab8:	4611      	mov	r1, r2
 800daba:	2200      	movs	r2, #0
 800dabc:	602a      	str	r2, [r5, #0]
 800dabe:	461a      	mov	r2, r3
 800dac0:	f7f3 f91c 	bl	8000cfc <_write>
 800dac4:	1c43      	adds	r3, r0, #1
 800dac6:	d102      	bne.n	800dace <_write_r+0x1e>
 800dac8:	682b      	ldr	r3, [r5, #0]
 800daca:	b103      	cbz	r3, 800dace <_write_r+0x1e>
 800dacc:	6023      	str	r3, [r4, #0]
 800dace:	bd38      	pop	{r3, r4, r5, pc}
 800dad0:	20001744 	.word	0x20001744

0800dad4 <__swsetup_r>:
 800dad4:	4b32      	ldr	r3, [pc, #200]	; (800dba0 <__swsetup_r+0xcc>)
 800dad6:	b570      	push	{r4, r5, r6, lr}
 800dad8:	681d      	ldr	r5, [r3, #0]
 800dada:	4606      	mov	r6, r0
 800dadc:	460c      	mov	r4, r1
 800dade:	b125      	cbz	r5, 800daea <__swsetup_r+0x16>
 800dae0:	69ab      	ldr	r3, [r5, #24]
 800dae2:	b913      	cbnz	r3, 800daea <__swsetup_r+0x16>
 800dae4:	4628      	mov	r0, r5
 800dae6:	f7ff f9bf 	bl	800ce68 <__sinit>
 800daea:	4b2e      	ldr	r3, [pc, #184]	; (800dba4 <__swsetup_r+0xd0>)
 800daec:	429c      	cmp	r4, r3
 800daee:	d10f      	bne.n	800db10 <__swsetup_r+0x3c>
 800daf0:	686c      	ldr	r4, [r5, #4]
 800daf2:	89a3      	ldrh	r3, [r4, #12]
 800daf4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800daf8:	0719      	lsls	r1, r3, #28
 800dafa:	d42c      	bmi.n	800db56 <__swsetup_r+0x82>
 800dafc:	06dd      	lsls	r5, r3, #27
 800dafe:	d411      	bmi.n	800db24 <__swsetup_r+0x50>
 800db00:	2309      	movs	r3, #9
 800db02:	6033      	str	r3, [r6, #0]
 800db04:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800db08:	81a3      	strh	r3, [r4, #12]
 800db0a:	f04f 30ff 	mov.w	r0, #4294967295
 800db0e:	e03e      	b.n	800db8e <__swsetup_r+0xba>
 800db10:	4b25      	ldr	r3, [pc, #148]	; (800dba8 <__swsetup_r+0xd4>)
 800db12:	429c      	cmp	r4, r3
 800db14:	d101      	bne.n	800db1a <__swsetup_r+0x46>
 800db16:	68ac      	ldr	r4, [r5, #8]
 800db18:	e7eb      	b.n	800daf2 <__swsetup_r+0x1e>
 800db1a:	4b24      	ldr	r3, [pc, #144]	; (800dbac <__swsetup_r+0xd8>)
 800db1c:	429c      	cmp	r4, r3
 800db1e:	bf08      	it	eq
 800db20:	68ec      	ldreq	r4, [r5, #12]
 800db22:	e7e6      	b.n	800daf2 <__swsetup_r+0x1e>
 800db24:	0758      	lsls	r0, r3, #29
 800db26:	d512      	bpl.n	800db4e <__swsetup_r+0x7a>
 800db28:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800db2a:	b141      	cbz	r1, 800db3e <__swsetup_r+0x6a>
 800db2c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800db30:	4299      	cmp	r1, r3
 800db32:	d002      	beq.n	800db3a <__swsetup_r+0x66>
 800db34:	4630      	mov	r0, r6
 800db36:	f000 f9b9 	bl	800deac <_free_r>
 800db3a:	2300      	movs	r3, #0
 800db3c:	6363      	str	r3, [r4, #52]	; 0x34
 800db3e:	89a3      	ldrh	r3, [r4, #12]
 800db40:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800db44:	81a3      	strh	r3, [r4, #12]
 800db46:	2300      	movs	r3, #0
 800db48:	6063      	str	r3, [r4, #4]
 800db4a:	6923      	ldr	r3, [r4, #16]
 800db4c:	6023      	str	r3, [r4, #0]
 800db4e:	89a3      	ldrh	r3, [r4, #12]
 800db50:	f043 0308 	orr.w	r3, r3, #8
 800db54:	81a3      	strh	r3, [r4, #12]
 800db56:	6923      	ldr	r3, [r4, #16]
 800db58:	b94b      	cbnz	r3, 800db6e <__swsetup_r+0x9a>
 800db5a:	89a3      	ldrh	r3, [r4, #12]
 800db5c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800db60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800db64:	d003      	beq.n	800db6e <__swsetup_r+0x9a>
 800db66:	4621      	mov	r1, r4
 800db68:	4630      	mov	r0, r6
 800db6a:	f000 f92b 	bl	800ddc4 <__smakebuf_r>
 800db6e:	89a0      	ldrh	r0, [r4, #12]
 800db70:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800db74:	f010 0301 	ands.w	r3, r0, #1
 800db78:	d00a      	beq.n	800db90 <__swsetup_r+0xbc>
 800db7a:	2300      	movs	r3, #0
 800db7c:	60a3      	str	r3, [r4, #8]
 800db7e:	6963      	ldr	r3, [r4, #20]
 800db80:	425b      	negs	r3, r3
 800db82:	61a3      	str	r3, [r4, #24]
 800db84:	6923      	ldr	r3, [r4, #16]
 800db86:	b943      	cbnz	r3, 800db9a <__swsetup_r+0xc6>
 800db88:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800db8c:	d1ba      	bne.n	800db04 <__swsetup_r+0x30>
 800db8e:	bd70      	pop	{r4, r5, r6, pc}
 800db90:	0781      	lsls	r1, r0, #30
 800db92:	bf58      	it	pl
 800db94:	6963      	ldrpl	r3, [r4, #20]
 800db96:	60a3      	str	r3, [r4, #8]
 800db98:	e7f4      	b.n	800db84 <__swsetup_r+0xb0>
 800db9a:	2000      	movs	r0, #0
 800db9c:	e7f7      	b.n	800db8e <__swsetup_r+0xba>
 800db9e:	bf00      	nop
 800dba0:	2000000c 	.word	0x2000000c
 800dba4:	0800e684 	.word	0x0800e684
 800dba8:	0800e6a4 	.word	0x0800e6a4
 800dbac:	0800e664 	.word	0x0800e664

0800dbb0 <_close_r>:
 800dbb0:	b538      	push	{r3, r4, r5, lr}
 800dbb2:	4d06      	ldr	r5, [pc, #24]	; (800dbcc <_close_r+0x1c>)
 800dbb4:	2300      	movs	r3, #0
 800dbb6:	4604      	mov	r4, r0
 800dbb8:	4608      	mov	r0, r1
 800dbba:	602b      	str	r3, [r5, #0]
 800dbbc:	f7f3 fe3f 	bl	800183e <_close>
 800dbc0:	1c43      	adds	r3, r0, #1
 800dbc2:	d102      	bne.n	800dbca <_close_r+0x1a>
 800dbc4:	682b      	ldr	r3, [r5, #0]
 800dbc6:	b103      	cbz	r3, 800dbca <_close_r+0x1a>
 800dbc8:	6023      	str	r3, [r4, #0]
 800dbca:	bd38      	pop	{r3, r4, r5, pc}
 800dbcc:	20001744 	.word	0x20001744

0800dbd0 <__sflush_r>:
 800dbd0:	898a      	ldrh	r2, [r1, #12]
 800dbd2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dbd6:	4605      	mov	r5, r0
 800dbd8:	0710      	lsls	r0, r2, #28
 800dbda:	460c      	mov	r4, r1
 800dbdc:	d458      	bmi.n	800dc90 <__sflush_r+0xc0>
 800dbde:	684b      	ldr	r3, [r1, #4]
 800dbe0:	2b00      	cmp	r3, #0
 800dbe2:	dc05      	bgt.n	800dbf0 <__sflush_r+0x20>
 800dbe4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800dbe6:	2b00      	cmp	r3, #0
 800dbe8:	dc02      	bgt.n	800dbf0 <__sflush_r+0x20>
 800dbea:	2000      	movs	r0, #0
 800dbec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dbf0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800dbf2:	2e00      	cmp	r6, #0
 800dbf4:	d0f9      	beq.n	800dbea <__sflush_r+0x1a>
 800dbf6:	2300      	movs	r3, #0
 800dbf8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800dbfc:	682f      	ldr	r7, [r5, #0]
 800dbfe:	602b      	str	r3, [r5, #0]
 800dc00:	d032      	beq.n	800dc68 <__sflush_r+0x98>
 800dc02:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800dc04:	89a3      	ldrh	r3, [r4, #12]
 800dc06:	075a      	lsls	r2, r3, #29
 800dc08:	d505      	bpl.n	800dc16 <__sflush_r+0x46>
 800dc0a:	6863      	ldr	r3, [r4, #4]
 800dc0c:	1ac0      	subs	r0, r0, r3
 800dc0e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800dc10:	b10b      	cbz	r3, 800dc16 <__sflush_r+0x46>
 800dc12:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800dc14:	1ac0      	subs	r0, r0, r3
 800dc16:	2300      	movs	r3, #0
 800dc18:	4602      	mov	r2, r0
 800dc1a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800dc1c:	6a21      	ldr	r1, [r4, #32]
 800dc1e:	4628      	mov	r0, r5
 800dc20:	47b0      	blx	r6
 800dc22:	1c43      	adds	r3, r0, #1
 800dc24:	89a3      	ldrh	r3, [r4, #12]
 800dc26:	d106      	bne.n	800dc36 <__sflush_r+0x66>
 800dc28:	6829      	ldr	r1, [r5, #0]
 800dc2a:	291d      	cmp	r1, #29
 800dc2c:	d82c      	bhi.n	800dc88 <__sflush_r+0xb8>
 800dc2e:	4a2a      	ldr	r2, [pc, #168]	; (800dcd8 <__sflush_r+0x108>)
 800dc30:	40ca      	lsrs	r2, r1
 800dc32:	07d6      	lsls	r6, r2, #31
 800dc34:	d528      	bpl.n	800dc88 <__sflush_r+0xb8>
 800dc36:	2200      	movs	r2, #0
 800dc38:	6062      	str	r2, [r4, #4]
 800dc3a:	04d9      	lsls	r1, r3, #19
 800dc3c:	6922      	ldr	r2, [r4, #16]
 800dc3e:	6022      	str	r2, [r4, #0]
 800dc40:	d504      	bpl.n	800dc4c <__sflush_r+0x7c>
 800dc42:	1c42      	adds	r2, r0, #1
 800dc44:	d101      	bne.n	800dc4a <__sflush_r+0x7a>
 800dc46:	682b      	ldr	r3, [r5, #0]
 800dc48:	b903      	cbnz	r3, 800dc4c <__sflush_r+0x7c>
 800dc4a:	6560      	str	r0, [r4, #84]	; 0x54
 800dc4c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800dc4e:	602f      	str	r7, [r5, #0]
 800dc50:	2900      	cmp	r1, #0
 800dc52:	d0ca      	beq.n	800dbea <__sflush_r+0x1a>
 800dc54:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800dc58:	4299      	cmp	r1, r3
 800dc5a:	d002      	beq.n	800dc62 <__sflush_r+0x92>
 800dc5c:	4628      	mov	r0, r5
 800dc5e:	f000 f925 	bl	800deac <_free_r>
 800dc62:	2000      	movs	r0, #0
 800dc64:	6360      	str	r0, [r4, #52]	; 0x34
 800dc66:	e7c1      	b.n	800dbec <__sflush_r+0x1c>
 800dc68:	6a21      	ldr	r1, [r4, #32]
 800dc6a:	2301      	movs	r3, #1
 800dc6c:	4628      	mov	r0, r5
 800dc6e:	47b0      	blx	r6
 800dc70:	1c41      	adds	r1, r0, #1
 800dc72:	d1c7      	bne.n	800dc04 <__sflush_r+0x34>
 800dc74:	682b      	ldr	r3, [r5, #0]
 800dc76:	2b00      	cmp	r3, #0
 800dc78:	d0c4      	beq.n	800dc04 <__sflush_r+0x34>
 800dc7a:	2b1d      	cmp	r3, #29
 800dc7c:	d001      	beq.n	800dc82 <__sflush_r+0xb2>
 800dc7e:	2b16      	cmp	r3, #22
 800dc80:	d101      	bne.n	800dc86 <__sflush_r+0xb6>
 800dc82:	602f      	str	r7, [r5, #0]
 800dc84:	e7b1      	b.n	800dbea <__sflush_r+0x1a>
 800dc86:	89a3      	ldrh	r3, [r4, #12]
 800dc88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dc8c:	81a3      	strh	r3, [r4, #12]
 800dc8e:	e7ad      	b.n	800dbec <__sflush_r+0x1c>
 800dc90:	690f      	ldr	r7, [r1, #16]
 800dc92:	2f00      	cmp	r7, #0
 800dc94:	d0a9      	beq.n	800dbea <__sflush_r+0x1a>
 800dc96:	0793      	lsls	r3, r2, #30
 800dc98:	680e      	ldr	r6, [r1, #0]
 800dc9a:	bf08      	it	eq
 800dc9c:	694b      	ldreq	r3, [r1, #20]
 800dc9e:	600f      	str	r7, [r1, #0]
 800dca0:	bf18      	it	ne
 800dca2:	2300      	movne	r3, #0
 800dca4:	eba6 0807 	sub.w	r8, r6, r7
 800dca8:	608b      	str	r3, [r1, #8]
 800dcaa:	f1b8 0f00 	cmp.w	r8, #0
 800dcae:	dd9c      	ble.n	800dbea <__sflush_r+0x1a>
 800dcb0:	6a21      	ldr	r1, [r4, #32]
 800dcb2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800dcb4:	4643      	mov	r3, r8
 800dcb6:	463a      	mov	r2, r7
 800dcb8:	4628      	mov	r0, r5
 800dcba:	47b0      	blx	r6
 800dcbc:	2800      	cmp	r0, #0
 800dcbe:	dc06      	bgt.n	800dcce <__sflush_r+0xfe>
 800dcc0:	89a3      	ldrh	r3, [r4, #12]
 800dcc2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dcc6:	81a3      	strh	r3, [r4, #12]
 800dcc8:	f04f 30ff 	mov.w	r0, #4294967295
 800dccc:	e78e      	b.n	800dbec <__sflush_r+0x1c>
 800dcce:	4407      	add	r7, r0
 800dcd0:	eba8 0800 	sub.w	r8, r8, r0
 800dcd4:	e7e9      	b.n	800dcaa <__sflush_r+0xda>
 800dcd6:	bf00      	nop
 800dcd8:	20400001 	.word	0x20400001

0800dcdc <_fflush_r>:
 800dcdc:	b538      	push	{r3, r4, r5, lr}
 800dcde:	690b      	ldr	r3, [r1, #16]
 800dce0:	4605      	mov	r5, r0
 800dce2:	460c      	mov	r4, r1
 800dce4:	b913      	cbnz	r3, 800dcec <_fflush_r+0x10>
 800dce6:	2500      	movs	r5, #0
 800dce8:	4628      	mov	r0, r5
 800dcea:	bd38      	pop	{r3, r4, r5, pc}
 800dcec:	b118      	cbz	r0, 800dcf6 <_fflush_r+0x1a>
 800dcee:	6983      	ldr	r3, [r0, #24]
 800dcf0:	b90b      	cbnz	r3, 800dcf6 <_fflush_r+0x1a>
 800dcf2:	f7ff f8b9 	bl	800ce68 <__sinit>
 800dcf6:	4b14      	ldr	r3, [pc, #80]	; (800dd48 <_fflush_r+0x6c>)
 800dcf8:	429c      	cmp	r4, r3
 800dcfa:	d11b      	bne.n	800dd34 <_fflush_r+0x58>
 800dcfc:	686c      	ldr	r4, [r5, #4]
 800dcfe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dd02:	2b00      	cmp	r3, #0
 800dd04:	d0ef      	beq.n	800dce6 <_fflush_r+0xa>
 800dd06:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800dd08:	07d0      	lsls	r0, r2, #31
 800dd0a:	d404      	bmi.n	800dd16 <_fflush_r+0x3a>
 800dd0c:	0599      	lsls	r1, r3, #22
 800dd0e:	d402      	bmi.n	800dd16 <_fflush_r+0x3a>
 800dd10:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800dd12:	f7ff f947 	bl	800cfa4 <__retarget_lock_acquire_recursive>
 800dd16:	4628      	mov	r0, r5
 800dd18:	4621      	mov	r1, r4
 800dd1a:	f7ff ff59 	bl	800dbd0 <__sflush_r>
 800dd1e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800dd20:	07da      	lsls	r2, r3, #31
 800dd22:	4605      	mov	r5, r0
 800dd24:	d4e0      	bmi.n	800dce8 <_fflush_r+0xc>
 800dd26:	89a3      	ldrh	r3, [r4, #12]
 800dd28:	059b      	lsls	r3, r3, #22
 800dd2a:	d4dd      	bmi.n	800dce8 <_fflush_r+0xc>
 800dd2c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800dd2e:	f7ff f93a 	bl	800cfa6 <__retarget_lock_release_recursive>
 800dd32:	e7d9      	b.n	800dce8 <_fflush_r+0xc>
 800dd34:	4b05      	ldr	r3, [pc, #20]	; (800dd4c <_fflush_r+0x70>)
 800dd36:	429c      	cmp	r4, r3
 800dd38:	d101      	bne.n	800dd3e <_fflush_r+0x62>
 800dd3a:	68ac      	ldr	r4, [r5, #8]
 800dd3c:	e7df      	b.n	800dcfe <_fflush_r+0x22>
 800dd3e:	4b04      	ldr	r3, [pc, #16]	; (800dd50 <_fflush_r+0x74>)
 800dd40:	429c      	cmp	r4, r3
 800dd42:	bf08      	it	eq
 800dd44:	68ec      	ldreq	r4, [r5, #12]
 800dd46:	e7da      	b.n	800dcfe <_fflush_r+0x22>
 800dd48:	0800e684 	.word	0x0800e684
 800dd4c:	0800e6a4 	.word	0x0800e6a4
 800dd50:	0800e664 	.word	0x0800e664

0800dd54 <_lseek_r>:
 800dd54:	b538      	push	{r3, r4, r5, lr}
 800dd56:	4d07      	ldr	r5, [pc, #28]	; (800dd74 <_lseek_r+0x20>)
 800dd58:	4604      	mov	r4, r0
 800dd5a:	4608      	mov	r0, r1
 800dd5c:	4611      	mov	r1, r2
 800dd5e:	2200      	movs	r2, #0
 800dd60:	602a      	str	r2, [r5, #0]
 800dd62:	461a      	mov	r2, r3
 800dd64:	f7f3 fd92 	bl	800188c <_lseek>
 800dd68:	1c43      	adds	r3, r0, #1
 800dd6a:	d102      	bne.n	800dd72 <_lseek_r+0x1e>
 800dd6c:	682b      	ldr	r3, [r5, #0]
 800dd6e:	b103      	cbz	r3, 800dd72 <_lseek_r+0x1e>
 800dd70:	6023      	str	r3, [r4, #0]
 800dd72:	bd38      	pop	{r3, r4, r5, pc}
 800dd74:	20001744 	.word	0x20001744

0800dd78 <__swhatbuf_r>:
 800dd78:	b570      	push	{r4, r5, r6, lr}
 800dd7a:	460e      	mov	r6, r1
 800dd7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dd80:	2900      	cmp	r1, #0
 800dd82:	b096      	sub	sp, #88	; 0x58
 800dd84:	4614      	mov	r4, r2
 800dd86:	461d      	mov	r5, r3
 800dd88:	da08      	bge.n	800dd9c <__swhatbuf_r+0x24>
 800dd8a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800dd8e:	2200      	movs	r2, #0
 800dd90:	602a      	str	r2, [r5, #0]
 800dd92:	061a      	lsls	r2, r3, #24
 800dd94:	d410      	bmi.n	800ddb8 <__swhatbuf_r+0x40>
 800dd96:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dd9a:	e00e      	b.n	800ddba <__swhatbuf_r+0x42>
 800dd9c:	466a      	mov	r2, sp
 800dd9e:	f000 f913 	bl	800dfc8 <_fstat_r>
 800dda2:	2800      	cmp	r0, #0
 800dda4:	dbf1      	blt.n	800dd8a <__swhatbuf_r+0x12>
 800dda6:	9a01      	ldr	r2, [sp, #4]
 800dda8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ddac:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ddb0:	425a      	negs	r2, r3
 800ddb2:	415a      	adcs	r2, r3
 800ddb4:	602a      	str	r2, [r5, #0]
 800ddb6:	e7ee      	b.n	800dd96 <__swhatbuf_r+0x1e>
 800ddb8:	2340      	movs	r3, #64	; 0x40
 800ddba:	2000      	movs	r0, #0
 800ddbc:	6023      	str	r3, [r4, #0]
 800ddbe:	b016      	add	sp, #88	; 0x58
 800ddc0:	bd70      	pop	{r4, r5, r6, pc}
	...

0800ddc4 <__smakebuf_r>:
 800ddc4:	898b      	ldrh	r3, [r1, #12]
 800ddc6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ddc8:	079d      	lsls	r5, r3, #30
 800ddca:	4606      	mov	r6, r0
 800ddcc:	460c      	mov	r4, r1
 800ddce:	d507      	bpl.n	800dde0 <__smakebuf_r+0x1c>
 800ddd0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ddd4:	6023      	str	r3, [r4, #0]
 800ddd6:	6123      	str	r3, [r4, #16]
 800ddd8:	2301      	movs	r3, #1
 800ddda:	6163      	str	r3, [r4, #20]
 800dddc:	b002      	add	sp, #8
 800ddde:	bd70      	pop	{r4, r5, r6, pc}
 800dde0:	ab01      	add	r3, sp, #4
 800dde2:	466a      	mov	r2, sp
 800dde4:	f7ff ffc8 	bl	800dd78 <__swhatbuf_r>
 800dde8:	9900      	ldr	r1, [sp, #0]
 800ddea:	4605      	mov	r5, r0
 800ddec:	4630      	mov	r0, r6
 800ddee:	f7ff f8fb 	bl	800cfe8 <_malloc_r>
 800ddf2:	b948      	cbnz	r0, 800de08 <__smakebuf_r+0x44>
 800ddf4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ddf8:	059a      	lsls	r2, r3, #22
 800ddfa:	d4ef      	bmi.n	800dddc <__smakebuf_r+0x18>
 800ddfc:	f023 0303 	bic.w	r3, r3, #3
 800de00:	f043 0302 	orr.w	r3, r3, #2
 800de04:	81a3      	strh	r3, [r4, #12]
 800de06:	e7e3      	b.n	800ddd0 <__smakebuf_r+0xc>
 800de08:	4b0d      	ldr	r3, [pc, #52]	; (800de40 <__smakebuf_r+0x7c>)
 800de0a:	62b3      	str	r3, [r6, #40]	; 0x28
 800de0c:	89a3      	ldrh	r3, [r4, #12]
 800de0e:	6020      	str	r0, [r4, #0]
 800de10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800de14:	81a3      	strh	r3, [r4, #12]
 800de16:	9b00      	ldr	r3, [sp, #0]
 800de18:	6163      	str	r3, [r4, #20]
 800de1a:	9b01      	ldr	r3, [sp, #4]
 800de1c:	6120      	str	r0, [r4, #16]
 800de1e:	b15b      	cbz	r3, 800de38 <__smakebuf_r+0x74>
 800de20:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800de24:	4630      	mov	r0, r6
 800de26:	f000 f8e1 	bl	800dfec <_isatty_r>
 800de2a:	b128      	cbz	r0, 800de38 <__smakebuf_r+0x74>
 800de2c:	89a3      	ldrh	r3, [r4, #12]
 800de2e:	f023 0303 	bic.w	r3, r3, #3
 800de32:	f043 0301 	orr.w	r3, r3, #1
 800de36:	81a3      	strh	r3, [r4, #12]
 800de38:	89a0      	ldrh	r0, [r4, #12]
 800de3a:	4305      	orrs	r5, r0
 800de3c:	81a5      	strh	r5, [r4, #12]
 800de3e:	e7cd      	b.n	800dddc <__smakebuf_r+0x18>
 800de40:	0800ce01 	.word	0x0800ce01

0800de44 <memcpy>:
 800de44:	440a      	add	r2, r1
 800de46:	4291      	cmp	r1, r2
 800de48:	f100 33ff 	add.w	r3, r0, #4294967295
 800de4c:	d100      	bne.n	800de50 <memcpy+0xc>
 800de4e:	4770      	bx	lr
 800de50:	b510      	push	{r4, lr}
 800de52:	f811 4b01 	ldrb.w	r4, [r1], #1
 800de56:	f803 4f01 	strb.w	r4, [r3, #1]!
 800de5a:	4291      	cmp	r1, r2
 800de5c:	d1f9      	bne.n	800de52 <memcpy+0xe>
 800de5e:	bd10      	pop	{r4, pc}

0800de60 <memmove>:
 800de60:	4288      	cmp	r0, r1
 800de62:	b510      	push	{r4, lr}
 800de64:	eb01 0402 	add.w	r4, r1, r2
 800de68:	d902      	bls.n	800de70 <memmove+0x10>
 800de6a:	4284      	cmp	r4, r0
 800de6c:	4623      	mov	r3, r4
 800de6e:	d807      	bhi.n	800de80 <memmove+0x20>
 800de70:	1e43      	subs	r3, r0, #1
 800de72:	42a1      	cmp	r1, r4
 800de74:	d008      	beq.n	800de88 <memmove+0x28>
 800de76:	f811 2b01 	ldrb.w	r2, [r1], #1
 800de7a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800de7e:	e7f8      	b.n	800de72 <memmove+0x12>
 800de80:	4402      	add	r2, r0
 800de82:	4601      	mov	r1, r0
 800de84:	428a      	cmp	r2, r1
 800de86:	d100      	bne.n	800de8a <memmove+0x2a>
 800de88:	bd10      	pop	{r4, pc}
 800de8a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800de8e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800de92:	e7f7      	b.n	800de84 <memmove+0x24>

0800de94 <__malloc_lock>:
 800de94:	4801      	ldr	r0, [pc, #4]	; (800de9c <__malloc_lock+0x8>)
 800de96:	f7ff b885 	b.w	800cfa4 <__retarget_lock_acquire_recursive>
 800de9a:	bf00      	nop
 800de9c:	20001738 	.word	0x20001738

0800dea0 <__malloc_unlock>:
 800dea0:	4801      	ldr	r0, [pc, #4]	; (800dea8 <__malloc_unlock+0x8>)
 800dea2:	f7ff b880 	b.w	800cfa6 <__retarget_lock_release_recursive>
 800dea6:	bf00      	nop
 800dea8:	20001738 	.word	0x20001738

0800deac <_free_r>:
 800deac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800deae:	2900      	cmp	r1, #0
 800deb0:	d044      	beq.n	800df3c <_free_r+0x90>
 800deb2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800deb6:	9001      	str	r0, [sp, #4]
 800deb8:	2b00      	cmp	r3, #0
 800deba:	f1a1 0404 	sub.w	r4, r1, #4
 800debe:	bfb8      	it	lt
 800dec0:	18e4      	addlt	r4, r4, r3
 800dec2:	f7ff ffe7 	bl	800de94 <__malloc_lock>
 800dec6:	4a1e      	ldr	r2, [pc, #120]	; (800df40 <_free_r+0x94>)
 800dec8:	9801      	ldr	r0, [sp, #4]
 800deca:	6813      	ldr	r3, [r2, #0]
 800decc:	b933      	cbnz	r3, 800dedc <_free_r+0x30>
 800dece:	6063      	str	r3, [r4, #4]
 800ded0:	6014      	str	r4, [r2, #0]
 800ded2:	b003      	add	sp, #12
 800ded4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ded8:	f7ff bfe2 	b.w	800dea0 <__malloc_unlock>
 800dedc:	42a3      	cmp	r3, r4
 800dede:	d908      	bls.n	800def2 <_free_r+0x46>
 800dee0:	6825      	ldr	r5, [r4, #0]
 800dee2:	1961      	adds	r1, r4, r5
 800dee4:	428b      	cmp	r3, r1
 800dee6:	bf01      	itttt	eq
 800dee8:	6819      	ldreq	r1, [r3, #0]
 800deea:	685b      	ldreq	r3, [r3, #4]
 800deec:	1949      	addeq	r1, r1, r5
 800deee:	6021      	streq	r1, [r4, #0]
 800def0:	e7ed      	b.n	800dece <_free_r+0x22>
 800def2:	461a      	mov	r2, r3
 800def4:	685b      	ldr	r3, [r3, #4]
 800def6:	b10b      	cbz	r3, 800defc <_free_r+0x50>
 800def8:	42a3      	cmp	r3, r4
 800defa:	d9fa      	bls.n	800def2 <_free_r+0x46>
 800defc:	6811      	ldr	r1, [r2, #0]
 800defe:	1855      	adds	r5, r2, r1
 800df00:	42a5      	cmp	r5, r4
 800df02:	d10b      	bne.n	800df1c <_free_r+0x70>
 800df04:	6824      	ldr	r4, [r4, #0]
 800df06:	4421      	add	r1, r4
 800df08:	1854      	adds	r4, r2, r1
 800df0a:	42a3      	cmp	r3, r4
 800df0c:	6011      	str	r1, [r2, #0]
 800df0e:	d1e0      	bne.n	800ded2 <_free_r+0x26>
 800df10:	681c      	ldr	r4, [r3, #0]
 800df12:	685b      	ldr	r3, [r3, #4]
 800df14:	6053      	str	r3, [r2, #4]
 800df16:	4421      	add	r1, r4
 800df18:	6011      	str	r1, [r2, #0]
 800df1a:	e7da      	b.n	800ded2 <_free_r+0x26>
 800df1c:	d902      	bls.n	800df24 <_free_r+0x78>
 800df1e:	230c      	movs	r3, #12
 800df20:	6003      	str	r3, [r0, #0]
 800df22:	e7d6      	b.n	800ded2 <_free_r+0x26>
 800df24:	6825      	ldr	r5, [r4, #0]
 800df26:	1961      	adds	r1, r4, r5
 800df28:	428b      	cmp	r3, r1
 800df2a:	bf04      	itt	eq
 800df2c:	6819      	ldreq	r1, [r3, #0]
 800df2e:	685b      	ldreq	r3, [r3, #4]
 800df30:	6063      	str	r3, [r4, #4]
 800df32:	bf04      	itt	eq
 800df34:	1949      	addeq	r1, r1, r5
 800df36:	6021      	streq	r1, [r4, #0]
 800df38:	6054      	str	r4, [r2, #4]
 800df3a:	e7ca      	b.n	800ded2 <_free_r+0x26>
 800df3c:	b003      	add	sp, #12
 800df3e:	bd30      	pop	{r4, r5, pc}
 800df40:	2000173c 	.word	0x2000173c

0800df44 <_realloc_r>:
 800df44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800df48:	4680      	mov	r8, r0
 800df4a:	4614      	mov	r4, r2
 800df4c:	460e      	mov	r6, r1
 800df4e:	b921      	cbnz	r1, 800df5a <_realloc_r+0x16>
 800df50:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800df54:	4611      	mov	r1, r2
 800df56:	f7ff b847 	b.w	800cfe8 <_malloc_r>
 800df5a:	b92a      	cbnz	r2, 800df68 <_realloc_r+0x24>
 800df5c:	f7ff ffa6 	bl	800deac <_free_r>
 800df60:	4625      	mov	r5, r4
 800df62:	4628      	mov	r0, r5
 800df64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800df68:	f000 f850 	bl	800e00c <_malloc_usable_size_r>
 800df6c:	4284      	cmp	r4, r0
 800df6e:	4607      	mov	r7, r0
 800df70:	d802      	bhi.n	800df78 <_realloc_r+0x34>
 800df72:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800df76:	d812      	bhi.n	800df9e <_realloc_r+0x5a>
 800df78:	4621      	mov	r1, r4
 800df7a:	4640      	mov	r0, r8
 800df7c:	f7ff f834 	bl	800cfe8 <_malloc_r>
 800df80:	4605      	mov	r5, r0
 800df82:	2800      	cmp	r0, #0
 800df84:	d0ed      	beq.n	800df62 <_realloc_r+0x1e>
 800df86:	42bc      	cmp	r4, r7
 800df88:	4622      	mov	r2, r4
 800df8a:	4631      	mov	r1, r6
 800df8c:	bf28      	it	cs
 800df8e:	463a      	movcs	r2, r7
 800df90:	f7ff ff58 	bl	800de44 <memcpy>
 800df94:	4631      	mov	r1, r6
 800df96:	4640      	mov	r0, r8
 800df98:	f7ff ff88 	bl	800deac <_free_r>
 800df9c:	e7e1      	b.n	800df62 <_realloc_r+0x1e>
 800df9e:	4635      	mov	r5, r6
 800dfa0:	e7df      	b.n	800df62 <_realloc_r+0x1e>
	...

0800dfa4 <_read_r>:
 800dfa4:	b538      	push	{r3, r4, r5, lr}
 800dfa6:	4d07      	ldr	r5, [pc, #28]	; (800dfc4 <_read_r+0x20>)
 800dfa8:	4604      	mov	r4, r0
 800dfaa:	4608      	mov	r0, r1
 800dfac:	4611      	mov	r1, r2
 800dfae:	2200      	movs	r2, #0
 800dfb0:	602a      	str	r2, [r5, #0]
 800dfb2:	461a      	mov	r2, r3
 800dfb4:	f7f3 fc26 	bl	8001804 <_read>
 800dfb8:	1c43      	adds	r3, r0, #1
 800dfba:	d102      	bne.n	800dfc2 <_read_r+0x1e>
 800dfbc:	682b      	ldr	r3, [r5, #0]
 800dfbe:	b103      	cbz	r3, 800dfc2 <_read_r+0x1e>
 800dfc0:	6023      	str	r3, [r4, #0]
 800dfc2:	bd38      	pop	{r3, r4, r5, pc}
 800dfc4:	20001744 	.word	0x20001744

0800dfc8 <_fstat_r>:
 800dfc8:	b538      	push	{r3, r4, r5, lr}
 800dfca:	4d07      	ldr	r5, [pc, #28]	; (800dfe8 <_fstat_r+0x20>)
 800dfcc:	2300      	movs	r3, #0
 800dfce:	4604      	mov	r4, r0
 800dfd0:	4608      	mov	r0, r1
 800dfd2:	4611      	mov	r1, r2
 800dfd4:	602b      	str	r3, [r5, #0]
 800dfd6:	f7f3 fc3e 	bl	8001856 <_fstat>
 800dfda:	1c43      	adds	r3, r0, #1
 800dfdc:	d102      	bne.n	800dfe4 <_fstat_r+0x1c>
 800dfde:	682b      	ldr	r3, [r5, #0]
 800dfe0:	b103      	cbz	r3, 800dfe4 <_fstat_r+0x1c>
 800dfe2:	6023      	str	r3, [r4, #0]
 800dfe4:	bd38      	pop	{r3, r4, r5, pc}
 800dfe6:	bf00      	nop
 800dfe8:	20001744 	.word	0x20001744

0800dfec <_isatty_r>:
 800dfec:	b538      	push	{r3, r4, r5, lr}
 800dfee:	4d06      	ldr	r5, [pc, #24]	; (800e008 <_isatty_r+0x1c>)
 800dff0:	2300      	movs	r3, #0
 800dff2:	4604      	mov	r4, r0
 800dff4:	4608      	mov	r0, r1
 800dff6:	602b      	str	r3, [r5, #0]
 800dff8:	f7f3 fc3d 	bl	8001876 <_isatty>
 800dffc:	1c43      	adds	r3, r0, #1
 800dffe:	d102      	bne.n	800e006 <_isatty_r+0x1a>
 800e000:	682b      	ldr	r3, [r5, #0]
 800e002:	b103      	cbz	r3, 800e006 <_isatty_r+0x1a>
 800e004:	6023      	str	r3, [r4, #0]
 800e006:	bd38      	pop	{r3, r4, r5, pc}
 800e008:	20001744 	.word	0x20001744

0800e00c <_malloc_usable_size_r>:
 800e00c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e010:	1f18      	subs	r0, r3, #4
 800e012:	2b00      	cmp	r3, #0
 800e014:	bfbc      	itt	lt
 800e016:	580b      	ldrlt	r3, [r1, r0]
 800e018:	18c0      	addlt	r0, r0, r3
 800e01a:	4770      	bx	lr

0800e01c <_init>:
 800e01c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e01e:	bf00      	nop
 800e020:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e022:	bc08      	pop	{r3}
 800e024:	469e      	mov	lr, r3
 800e026:	4770      	bx	lr

0800e028 <_fini>:
 800e028:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e02a:	bf00      	nop
 800e02c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e02e:	bc08      	pop	{r3}
 800e030:	469e      	mov	lr, r3
 800e032:	4770      	bx	lr
