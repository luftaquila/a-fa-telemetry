
ECU v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000df78  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000070c  0800e108  0800e108  0001e108  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e814  0800e814  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  0800e814  0800e814  0001e814  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e81c  0800e81c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e81c  0800e81c  0001e81c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e820  0800e820  0001e820  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800e824  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          000016d8  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20001748  20001748  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   00021f70  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004ce7  00000000  00000000  00042010  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001c60  00000000  00000000  00046cf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001a30  00000000  00000000  00048958  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00028de4  00000000  00000000  0004a388  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000283d4  00000000  00000000  0007316c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000eb9a5  00000000  00000000  0009b540  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00186ee5  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007f30  00000000  00000000  00186f38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800e0f0 	.word	0x0800e0f0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	0800e0f0 	.word	0x0800e0f0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b974 	b.w	8000570 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468e      	mov	lr, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14d      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4694      	mov	ip, r2
 80002b2:	d969      	bls.n	8000388 <__udivmoddi4+0xe8>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b152      	cbz	r2, 80002d0 <__udivmoddi4+0x30>
 80002ba:	fa01 f302 	lsl.w	r3, r1, r2
 80002be:	f1c2 0120 	rsb	r1, r2, #32
 80002c2:	fa20 f101 	lsr.w	r1, r0, r1
 80002c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ca:	ea41 0e03 	orr.w	lr, r1, r3
 80002ce:	4094      	lsls	r4, r2
 80002d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d4:	0c21      	lsrs	r1, r4, #16
 80002d6:	fbbe f6f8 	udiv	r6, lr, r8
 80002da:	fa1f f78c 	uxth.w	r7, ip
 80002de:	fb08 e316 	mls	r3, r8, r6, lr
 80002e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002e6:	fb06 f107 	mul.w	r1, r6, r7
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f6:	f080 811f 	bcs.w	8000538 <__udivmoddi4+0x298>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 811c 	bls.w	8000538 <__udivmoddi4+0x298>
 8000300:	3e02      	subs	r6, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 f707 	mul.w	r7, r0, r7
 8000318:	42a7      	cmp	r7, r4
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x92>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295
 8000324:	f080 810a 	bcs.w	800053c <__udivmoddi4+0x29c>
 8000328:	42a7      	cmp	r7, r4
 800032a:	f240 8107 	bls.w	800053c <__udivmoddi4+0x29c>
 800032e:	4464      	add	r4, ip
 8000330:	3802      	subs	r0, #2
 8000332:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000336:	1be4      	subs	r4, r4, r7
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa4>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0xc2>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80ef 	beq.w	8000532 <__udivmoddi4+0x292>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x160>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd4>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80f9 	bhi.w	8000566 <__udivmoddi4+0x2c6>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0303 	sbc.w	r3, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	469e      	mov	lr, r3
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0e0      	beq.n	8000344 <__udivmoddi4+0xa4>
 8000382:	e9c5 4e00 	strd	r4, lr, [r5]
 8000386:	e7dd      	b.n	8000344 <__udivmoddi4+0xa4>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xec>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 8092 	bne.w	80004ba <__udivmoddi4+0x21a>
 8000396:	eba1 010c 	sub.w	r1, r1, ip
 800039a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	2601      	movs	r6, #1
 80003a4:	0c20      	lsrs	r0, r4, #16
 80003a6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003aa:	fb07 1113 	mls	r1, r7, r3, r1
 80003ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b2:	fb0e f003 	mul.w	r0, lr, r3
 80003b6:	4288      	cmp	r0, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x12c>
 80003ba:	eb1c 0101 	adds.w	r1, ip, r1
 80003be:	f103 38ff 	add.w	r8, r3, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x12a>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f200 80cb 	bhi.w	8000560 <__udivmoddi4+0x2c0>
 80003ca:	4643      	mov	r3, r8
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d4:	fb07 1110 	mls	r1, r7, r0, r1
 80003d8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003dc:	fb0e fe00 	mul.w	lr, lr, r0
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x156>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x154>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f200 80bb 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003f4:	4608      	mov	r0, r1
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	e79c      	b.n	800033a <__udivmoddi4+0x9a>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	ea4c 0c03 	orr.w	ip, ip, r3
 800040e:	fa20 f407 	lsr.w	r4, r0, r7
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	431c      	orrs	r4, r3
 8000418:	40f9      	lsrs	r1, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	fa00 f306 	lsl.w	r3, r0, r6
 8000422:	fbb1 f8f9 	udiv	r8, r1, r9
 8000426:	0c20      	lsrs	r0, r4, #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fb09 1118 	mls	r1, r9, r8, r1
 8000430:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000434:	fb08 f00e 	mul.w	r0, r8, lr
 8000438:	4288      	cmp	r0, r1
 800043a:	fa02 f206 	lsl.w	r2, r2, r6
 800043e:	d90b      	bls.n	8000458 <__udivmoddi4+0x1b8>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f108 3aff 	add.w	sl, r8, #4294967295
 8000448:	f080 8088 	bcs.w	800055c <__udivmoddi4+0x2bc>
 800044c:	4288      	cmp	r0, r1
 800044e:	f240 8085 	bls.w	800055c <__udivmoddi4+0x2bc>
 8000452:	f1a8 0802 	sub.w	r8, r8, #2
 8000456:	4461      	add	r1, ip
 8000458:	1a09      	subs	r1, r1, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000460:	fb09 1110 	mls	r1, r9, r0, r1
 8000464:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000468:	fb00 fe0e 	mul.w	lr, r0, lr
 800046c:	458e      	cmp	lr, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x1e2>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f100 34ff 	add.w	r4, r0, #4294967295
 8000478:	d26c      	bcs.n	8000554 <__udivmoddi4+0x2b4>
 800047a:	458e      	cmp	lr, r1
 800047c:	d96a      	bls.n	8000554 <__udivmoddi4+0x2b4>
 800047e:	3802      	subs	r0, #2
 8000480:	4461      	add	r1, ip
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	fba0 9402 	umull	r9, r4, r0, r2
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	42a1      	cmp	r1, r4
 8000490:	46c8      	mov	r8, r9
 8000492:	46a6      	mov	lr, r4
 8000494:	d356      	bcc.n	8000544 <__udivmoddi4+0x2a4>
 8000496:	d053      	beq.n	8000540 <__udivmoddi4+0x2a0>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x212>
 800049a:	ebb3 0208 	subs.w	r2, r3, r8
 800049e:	eb61 010e 	sbc.w	r1, r1, lr
 80004a2:	fa01 f707 	lsl.w	r7, r1, r7
 80004a6:	fa22 f306 	lsr.w	r3, r2, r6
 80004aa:	40f1      	lsrs	r1, r6
 80004ac:	431f      	orrs	r7, r3
 80004ae:	e9c5 7100 	strd	r7, r1, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	40d8      	lsrs	r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa21 f303 	lsr.w	r3, r1, r3
 80004c8:	4091      	lsls	r1, r2
 80004ca:	4301      	orrs	r1, r0
 80004cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d0:	fa1f fe8c 	uxth.w	lr, ip
 80004d4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004d8:	fb07 3610 	mls	r6, r7, r0, r3
 80004dc:	0c0b      	lsrs	r3, r1, #16
 80004de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e2:	fb00 f60e 	mul.w	r6, r0, lr
 80004e6:	429e      	cmp	r6, r3
 80004e8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x260>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004f6:	d22f      	bcs.n	8000558 <__udivmoddi4+0x2b8>
 80004f8:	429e      	cmp	r6, r3
 80004fa:	d92d      	bls.n	8000558 <__udivmoddi4+0x2b8>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1b9b      	subs	r3, r3, r6
 8000502:	b289      	uxth	r1, r1
 8000504:	fbb3 f6f7 	udiv	r6, r3, r7
 8000508:	fb07 3316 	mls	r3, r7, r6, r3
 800050c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000510:	fb06 f30e 	mul.w	r3, r6, lr
 8000514:	428b      	cmp	r3, r1
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x28a>
 8000518:	eb1c 0101 	adds.w	r1, ip, r1
 800051c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000520:	d216      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 8000522:	428b      	cmp	r3, r1
 8000524:	d914      	bls.n	8000550 <__udivmoddi4+0x2b0>
 8000526:	3e02      	subs	r6, #2
 8000528:	4461      	add	r1, ip
 800052a:	1ac9      	subs	r1, r1, r3
 800052c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000530:	e738      	b.n	80003a4 <__udivmoddi4+0x104>
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e705      	b.n	8000344 <__udivmoddi4+0xa4>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e3      	b.n	8000304 <__udivmoddi4+0x64>
 800053c:	4618      	mov	r0, r3
 800053e:	e6f8      	b.n	8000332 <__udivmoddi4+0x92>
 8000540:	454b      	cmp	r3, r9
 8000542:	d2a9      	bcs.n	8000498 <__udivmoddi4+0x1f8>
 8000544:	ebb9 0802 	subs.w	r8, r9, r2
 8000548:	eb64 0e0c 	sbc.w	lr, r4, ip
 800054c:	3801      	subs	r0, #1
 800054e:	e7a3      	b.n	8000498 <__udivmoddi4+0x1f8>
 8000550:	4646      	mov	r6, r8
 8000552:	e7ea      	b.n	800052a <__udivmoddi4+0x28a>
 8000554:	4620      	mov	r0, r4
 8000556:	e794      	b.n	8000482 <__udivmoddi4+0x1e2>
 8000558:	4640      	mov	r0, r8
 800055a:	e7d1      	b.n	8000500 <__udivmoddi4+0x260>
 800055c:	46d0      	mov	r8, sl
 800055e:	e77b      	b.n	8000458 <__udivmoddi4+0x1b8>
 8000560:	3b02      	subs	r3, #2
 8000562:	4461      	add	r1, ip
 8000564:	e732      	b.n	80003cc <__udivmoddi4+0x12c>
 8000566:	4630      	mov	r0, r6
 8000568:	e709      	b.n	800037e <__udivmoddi4+0xde>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e742      	b.n	80003f6 <__udivmoddi4+0x156>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc2;
ADC_HandleTypeDef hadc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b084      	sub	sp, #16
 8000578:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800057a:	463b      	mov	r3, r7
 800057c:	2200      	movs	r2, #0
 800057e:	601a      	str	r2, [r3, #0]
 8000580:	605a      	str	r2, [r3, #4]
 8000582:	609a      	str	r2, [r3, #8]
 8000584:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000586:	4b21      	ldr	r3, [pc, #132]	; (800060c <MX_ADC1_Init+0x98>)
 8000588:	4a21      	ldr	r2, [pc, #132]	; (8000610 <MX_ADC1_Init+0x9c>)
 800058a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800058c:	4b1f      	ldr	r3, [pc, #124]	; (800060c <MX_ADC1_Init+0x98>)
 800058e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000592:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000594:	4b1d      	ldr	r3, [pc, #116]	; (800060c <MX_ADC1_Init+0x98>)
 8000596:	2200      	movs	r2, #0
 8000598:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800059a:	4b1c      	ldr	r3, [pc, #112]	; (800060c <MX_ADC1_Init+0x98>)
 800059c:	2200      	movs	r2, #0
 800059e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80005a0:	4b1a      	ldr	r3, [pc, #104]	; (800060c <MX_ADC1_Init+0x98>)
 80005a2:	2200      	movs	r2, #0
 80005a4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005a6:	4b19      	ldr	r3, [pc, #100]	; (800060c <MX_ADC1_Init+0x98>)
 80005a8:	2200      	movs	r2, #0
 80005aa:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005ae:	4b17      	ldr	r3, [pc, #92]	; (800060c <MX_ADC1_Init+0x98>)
 80005b0:	2200      	movs	r2, #0
 80005b2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005b4:	4b15      	ldr	r3, [pc, #84]	; (800060c <MX_ADC1_Init+0x98>)
 80005b6:	4a17      	ldr	r2, [pc, #92]	; (8000614 <MX_ADC1_Init+0xa0>)
 80005b8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005ba:	4b14      	ldr	r3, [pc, #80]	; (800060c <MX_ADC1_Init+0x98>)
 80005bc:	2200      	movs	r2, #0
 80005be:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80005c0:	4b12      	ldr	r3, [pc, #72]	; (800060c <MX_ADC1_Init+0x98>)
 80005c2:	2201      	movs	r2, #1
 80005c4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80005c6:	4b11      	ldr	r3, [pc, #68]	; (800060c <MX_ADC1_Init+0x98>)
 80005c8:	2200      	movs	r2, #0
 80005ca:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80005ce:	4b0f      	ldr	r3, [pc, #60]	; (800060c <MX_ADC1_Init+0x98>)
 80005d0:	2201      	movs	r2, #1
 80005d2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80005d4:	480d      	ldr	r0, [pc, #52]	; (800060c <MX_ADC1_Init+0x98>)
 80005d6:	f001 fc4b 	bl	8001e70 <HAL_ADC_Init>
 80005da:	4603      	mov	r3, r0
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d001      	beq.n	80005e4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80005e0:	f000 fcfc 	bl	8000fdc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80005e4:	2310      	movs	r3, #16
 80005e6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80005e8:	2301      	movs	r3, #1
 80005ea:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80005ec:	2300      	movs	r3, #0
 80005ee:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005f0:	463b      	mov	r3, r7
 80005f2:	4619      	mov	r1, r3
 80005f4:	4805      	ldr	r0, [pc, #20]	; (800060c <MX_ADC1_Init+0x98>)
 80005f6:	f001 fdad 	bl	8002154 <HAL_ADC_ConfigChannel>
 80005fa:	4603      	mov	r3, r0
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d001      	beq.n	8000604 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000600:	f000 fcec 	bl	8000fdc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000604:	bf00      	nop
 8000606:	3710      	adds	r7, #16
 8000608:	46bd      	mov	sp, r7
 800060a:	bd80      	pop	{r7, pc}
 800060c:	2000008c 	.word	0x2000008c
 8000610:	40012000 	.word	0x40012000
 8000614:	0f000001 	.word	0x0f000001

08000618 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b084      	sub	sp, #16
 800061c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800061e:	463b      	mov	r3, r7
 8000620:	2200      	movs	r2, #0
 8000622:	601a      	str	r2, [r3, #0]
 8000624:	605a      	str	r2, [r3, #4]
 8000626:	609a      	str	r2, [r3, #8]
 8000628:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 800062a:	4b21      	ldr	r3, [pc, #132]	; (80006b0 <MX_ADC2_Init+0x98>)
 800062c:	4a21      	ldr	r2, [pc, #132]	; (80006b4 <MX_ADC2_Init+0x9c>)
 800062e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000630:	4b1f      	ldr	r3, [pc, #124]	; (80006b0 <MX_ADC2_Init+0x98>)
 8000632:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000636:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000638:	4b1d      	ldr	r3, [pc, #116]	; (80006b0 <MX_ADC2_Init+0x98>)
 800063a:	2200      	movs	r2, #0
 800063c:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 800063e:	4b1c      	ldr	r3, [pc, #112]	; (80006b0 <MX_ADC2_Init+0x98>)
 8000640:	2200      	movs	r2, #0
 8000642:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000644:	4b1a      	ldr	r3, [pc, #104]	; (80006b0 <MX_ADC2_Init+0x98>)
 8000646:	2200      	movs	r2, #0
 8000648:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800064a:	4b19      	ldr	r3, [pc, #100]	; (80006b0 <MX_ADC2_Init+0x98>)
 800064c:	2200      	movs	r2, #0
 800064e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000652:	4b17      	ldr	r3, [pc, #92]	; (80006b0 <MX_ADC2_Init+0x98>)
 8000654:	2200      	movs	r2, #0
 8000656:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000658:	4b15      	ldr	r3, [pc, #84]	; (80006b0 <MX_ADC2_Init+0x98>)
 800065a:	4a17      	ldr	r2, [pc, #92]	; (80006b8 <MX_ADC2_Init+0xa0>)
 800065c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800065e:	4b14      	ldr	r3, [pc, #80]	; (80006b0 <MX_ADC2_Init+0x98>)
 8000660:	2200      	movs	r2, #0
 8000662:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8000664:	4b12      	ldr	r3, [pc, #72]	; (80006b0 <MX_ADC2_Init+0x98>)
 8000666:	2201      	movs	r2, #1
 8000668:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 800066a:	4b11      	ldr	r3, [pc, #68]	; (80006b0 <MX_ADC2_Init+0x98>)
 800066c:	2200      	movs	r2, #0
 800066e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000672:	4b0f      	ldr	r3, [pc, #60]	; (80006b0 <MX_ADC2_Init+0x98>)
 8000674:	2201      	movs	r2, #1
 8000676:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000678:	480d      	ldr	r0, [pc, #52]	; (80006b0 <MX_ADC2_Init+0x98>)
 800067a:	f001 fbf9 	bl	8001e70 <HAL_ADC_Init>
 800067e:	4603      	mov	r3, r0
 8000680:	2b00      	cmp	r3, #0
 8000682:	d001      	beq.n	8000688 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8000684:	f000 fcaa 	bl	8000fdc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000688:	2300      	movs	r3, #0
 800068a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800068c:	2301      	movs	r3, #1
 800068e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000690:	2300      	movs	r3, #0
 8000692:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000694:	463b      	mov	r3, r7
 8000696:	4619      	mov	r1, r3
 8000698:	4805      	ldr	r0, [pc, #20]	; (80006b0 <MX_ADC2_Init+0x98>)
 800069a:	f001 fd5b 	bl	8002154 <HAL_ADC_ConfigChannel>
 800069e:	4603      	mov	r3, r0
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d001      	beq.n	80006a8 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 80006a4:	f000 fc9a 	bl	8000fdc <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80006a8:	bf00      	nop
 80006aa:	3710      	adds	r7, #16
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bd80      	pop	{r7, pc}
 80006b0:	200000d4 	.word	0x200000d4
 80006b4:	40012100 	.word	0x40012100
 80006b8:	0f000001 	.word	0x0f000001

080006bc <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b084      	sub	sp, #16
 80006c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006c2:	463b      	mov	r3, r7
 80006c4:	2200      	movs	r2, #0
 80006c6:	601a      	str	r2, [r3, #0]
 80006c8:	605a      	str	r2, [r3, #4]
 80006ca:	609a      	str	r2, [r3, #8]
 80006cc:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 80006ce:	4b21      	ldr	r3, [pc, #132]	; (8000754 <MX_ADC3_Init+0x98>)
 80006d0:	4a21      	ldr	r2, [pc, #132]	; (8000758 <MX_ADC3_Init+0x9c>)
 80006d2:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80006d4:	4b1f      	ldr	r3, [pc, #124]	; (8000754 <MX_ADC3_Init+0x98>)
 80006d6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80006da:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80006dc:	4b1d      	ldr	r3, [pc, #116]	; (8000754 <MX_ADC3_Init+0x98>)
 80006de:	2200      	movs	r2, #0
 80006e0:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 80006e2:	4b1c      	ldr	r3, [pc, #112]	; (8000754 <MX_ADC3_Init+0x98>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80006e8:	4b1a      	ldr	r3, [pc, #104]	; (8000754 <MX_ADC3_Init+0x98>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80006ee:	4b19      	ldr	r3, [pc, #100]	; (8000754 <MX_ADC3_Init+0x98>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006f6:	4b17      	ldr	r3, [pc, #92]	; (8000754 <MX_ADC3_Init+0x98>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006fc:	4b15      	ldr	r3, [pc, #84]	; (8000754 <MX_ADC3_Init+0x98>)
 80006fe:	4a17      	ldr	r2, [pc, #92]	; (800075c <MX_ADC3_Init+0xa0>)
 8000700:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000702:	4b14      	ldr	r3, [pc, #80]	; (8000754 <MX_ADC3_Init+0x98>)
 8000704:	2200      	movs	r2, #0
 8000706:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8000708:	4b12      	ldr	r3, [pc, #72]	; (8000754 <MX_ADC3_Init+0x98>)
 800070a:	2201      	movs	r2, #1
 800070c:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 800070e:	4b11      	ldr	r3, [pc, #68]	; (8000754 <MX_ADC3_Init+0x98>)
 8000710:	2200      	movs	r2, #0
 8000712:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000716:	4b0f      	ldr	r3, [pc, #60]	; (8000754 <MX_ADC3_Init+0x98>)
 8000718:	2201      	movs	r2, #1
 800071a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800071c:	480d      	ldr	r0, [pc, #52]	; (8000754 <MX_ADC3_Init+0x98>)
 800071e:	f001 fba7 	bl	8001e70 <HAL_ADC_Init>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	d001      	beq.n	800072c <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8000728:	f000 fc58 	bl	8000fdc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 800072c:	230a      	movs	r3, #10
 800072e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000730:	2301      	movs	r3, #1
 8000732:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000734:	2300      	movs	r3, #0
 8000736:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000738:	463b      	mov	r3, r7
 800073a:	4619      	mov	r1, r3
 800073c:	4805      	ldr	r0, [pc, #20]	; (8000754 <MX_ADC3_Init+0x98>)
 800073e:	f001 fd09 	bl	8002154 <HAL_ADC_ConfigChannel>
 8000742:	4603      	mov	r3, r0
 8000744:	2b00      	cmp	r3, #0
 8000746:	d001      	beq.n	800074c <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8000748:	f000 fc48 	bl	8000fdc <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 800074c:	bf00      	nop
 800074e:	3710      	adds	r7, #16
 8000750:	46bd      	mov	sp, r7
 8000752:	bd80      	pop	{r7, pc}
 8000754:	2000011c 	.word	0x2000011c
 8000758:	40012200 	.word	0x40012200
 800075c:	0f000001 	.word	0x0f000001

08000760 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b08c      	sub	sp, #48	; 0x30
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000768:	f107 031c 	add.w	r3, r7, #28
 800076c:	2200      	movs	r2, #0
 800076e:	601a      	str	r2, [r3, #0]
 8000770:	605a      	str	r2, [r3, #4]
 8000772:	609a      	str	r2, [r3, #8]
 8000774:	60da      	str	r2, [r3, #12]
 8000776:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	4a44      	ldr	r2, [pc, #272]	; (8000890 <HAL_ADC_MspInit+0x130>)
 800077e:	4293      	cmp	r3, r2
 8000780:	d116      	bne.n	80007b0 <HAL_ADC_MspInit+0x50>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000782:	2300      	movs	r3, #0
 8000784:	61bb      	str	r3, [r7, #24]
 8000786:	4b43      	ldr	r3, [pc, #268]	; (8000894 <HAL_ADC_MspInit+0x134>)
 8000788:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800078a:	4a42      	ldr	r2, [pc, #264]	; (8000894 <HAL_ADC_MspInit+0x134>)
 800078c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000790:	6453      	str	r3, [r2, #68]	; 0x44
 8000792:	4b40      	ldr	r3, [pc, #256]	; (8000894 <HAL_ADC_MspInit+0x134>)
 8000794:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000796:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800079a:	61bb      	str	r3, [r7, #24]
 800079c:	69bb      	ldr	r3, [r7, #24]

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800079e:	2200      	movs	r2, #0
 80007a0:	2100      	movs	r1, #0
 80007a2:	2012      	movs	r0, #18
 80007a4:	f002 fb0d 	bl	8002dc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80007a8:	2012      	movs	r0, #18
 80007aa:	f002 fb26 	bl	8002dfa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 80007ae:	e06a      	b.n	8000886 <HAL_ADC_MspInit+0x126>
  else if(adcHandle->Instance==ADC2)
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	4a38      	ldr	r2, [pc, #224]	; (8000898 <HAL_ADC_MspInit+0x138>)
 80007b6:	4293      	cmp	r3, r2
 80007b8:	d130      	bne.n	800081c <HAL_ADC_MspInit+0xbc>
    __HAL_RCC_ADC2_CLK_ENABLE();
 80007ba:	2300      	movs	r3, #0
 80007bc:	617b      	str	r3, [r7, #20]
 80007be:	4b35      	ldr	r3, [pc, #212]	; (8000894 <HAL_ADC_MspInit+0x134>)
 80007c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007c2:	4a34      	ldr	r2, [pc, #208]	; (8000894 <HAL_ADC_MspInit+0x134>)
 80007c4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80007c8:	6453      	str	r3, [r2, #68]	; 0x44
 80007ca:	4b32      	ldr	r3, [pc, #200]	; (8000894 <HAL_ADC_MspInit+0x134>)
 80007cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007ce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80007d2:	617b      	str	r3, [r7, #20]
 80007d4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007d6:	2300      	movs	r3, #0
 80007d8:	613b      	str	r3, [r7, #16]
 80007da:	4b2e      	ldr	r3, [pc, #184]	; (8000894 <HAL_ADC_MspInit+0x134>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007de:	4a2d      	ldr	r2, [pc, #180]	; (8000894 <HAL_ADC_MspInit+0x134>)
 80007e0:	f043 0301 	orr.w	r3, r3, #1
 80007e4:	6313      	str	r3, [r2, #48]	; 0x30
 80007e6:	4b2b      	ldr	r3, [pc, #172]	; (8000894 <HAL_ADC_MspInit+0x134>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ea:	f003 0301 	and.w	r3, r3, #1
 80007ee:	613b      	str	r3, [r7, #16]
 80007f0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80007f2:	230f      	movs	r3, #15
 80007f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007f6:	2303      	movs	r3, #3
 80007f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fa:	2300      	movs	r3, #0
 80007fc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007fe:	f107 031c 	add.w	r3, r7, #28
 8000802:	4619      	mov	r1, r3
 8000804:	4825      	ldr	r0, [pc, #148]	; (800089c <HAL_ADC_MspInit+0x13c>)
 8000806:	f002 ff2f 	bl	8003668 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800080a:	2200      	movs	r2, #0
 800080c:	2100      	movs	r1, #0
 800080e:	2012      	movs	r0, #18
 8000810:	f002 fad7 	bl	8002dc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000814:	2012      	movs	r0, #18
 8000816:	f002 faf0 	bl	8002dfa <HAL_NVIC_EnableIRQ>
}
 800081a:	e034      	b.n	8000886 <HAL_ADC_MspInit+0x126>
  else if(adcHandle->Instance==ADC3)
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	4a1f      	ldr	r2, [pc, #124]	; (80008a0 <HAL_ADC_MspInit+0x140>)
 8000822:	4293      	cmp	r3, r2
 8000824:	d12f      	bne.n	8000886 <HAL_ADC_MspInit+0x126>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8000826:	2300      	movs	r3, #0
 8000828:	60fb      	str	r3, [r7, #12]
 800082a:	4b1a      	ldr	r3, [pc, #104]	; (8000894 <HAL_ADC_MspInit+0x134>)
 800082c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800082e:	4a19      	ldr	r2, [pc, #100]	; (8000894 <HAL_ADC_MspInit+0x134>)
 8000830:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000834:	6453      	str	r3, [r2, #68]	; 0x44
 8000836:	4b17      	ldr	r3, [pc, #92]	; (8000894 <HAL_ADC_MspInit+0x134>)
 8000838:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800083a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800083e:	60fb      	str	r3, [r7, #12]
 8000840:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000842:	2300      	movs	r3, #0
 8000844:	60bb      	str	r3, [r7, #8]
 8000846:	4b13      	ldr	r3, [pc, #76]	; (8000894 <HAL_ADC_MspInit+0x134>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084a:	4a12      	ldr	r2, [pc, #72]	; (8000894 <HAL_ADC_MspInit+0x134>)
 800084c:	f043 0304 	orr.w	r3, r3, #4
 8000850:	6313      	str	r3, [r2, #48]	; 0x30
 8000852:	4b10      	ldr	r3, [pc, #64]	; (8000894 <HAL_ADC_MspInit+0x134>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000856:	f003 0304 	and.w	r3, r3, #4
 800085a:	60bb      	str	r3, [r7, #8]
 800085c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 800085e:	230f      	movs	r3, #15
 8000860:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000862:	2303      	movs	r3, #3
 8000864:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000866:	2300      	movs	r3, #0
 8000868:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800086a:	f107 031c 	add.w	r3, r7, #28
 800086e:	4619      	mov	r1, r3
 8000870:	480c      	ldr	r0, [pc, #48]	; (80008a4 <HAL_ADC_MspInit+0x144>)
 8000872:	f002 fef9 	bl	8003668 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8000876:	2200      	movs	r2, #0
 8000878:	2100      	movs	r1, #0
 800087a:	2012      	movs	r0, #18
 800087c:	f002 faa1 	bl	8002dc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000880:	2012      	movs	r0, #18
 8000882:	f002 faba 	bl	8002dfa <HAL_NVIC_EnableIRQ>
}
 8000886:	bf00      	nop
 8000888:	3730      	adds	r7, #48	; 0x30
 800088a:	46bd      	mov	sp, r7
 800088c:	bd80      	pop	{r7, pc}
 800088e:	bf00      	nop
 8000890:	40012000 	.word	0x40012000
 8000894:	40023800 	.word	0x40023800
 8000898:	40012100 	.word	0x40012100
 800089c:	40020000 	.word	0x40020000
 80008a0:	40012200 	.word	0x40012200
 80008a4:	40020800 	.word	0x40020800

080008a8 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80008ac:	4b18      	ldr	r3, [pc, #96]	; (8000910 <MX_CAN1_Init+0x68>)
 80008ae:	4a19      	ldr	r2, [pc, #100]	; (8000914 <MX_CAN1_Init+0x6c>)
 80008b0:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 12;
 80008b2:	4b17      	ldr	r3, [pc, #92]	; (8000910 <MX_CAN1_Init+0x68>)
 80008b4:	220c      	movs	r2, #12
 80008b6:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_SILENT;
 80008b8:	4b15      	ldr	r3, [pc, #84]	; (8000910 <MX_CAN1_Init+0x68>)
 80008ba:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80008be:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80008c0:	4b13      	ldr	r3, [pc, #76]	; (8000910 <MX_CAN1_Init+0x68>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_11TQ;
 80008c6:	4b12      	ldr	r3, [pc, #72]	; (8000910 <MX_CAN1_Init+0x68>)
 80008c8:	f44f 2220 	mov.w	r2, #655360	; 0xa0000
 80008cc:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 80008ce:	4b10      	ldr	r3, [pc, #64]	; (8000910 <MX_CAN1_Init+0x68>)
 80008d0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80008d4:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80008d6:	4b0e      	ldr	r3, [pc, #56]	; (8000910 <MX_CAN1_Init+0x68>)
 80008d8:	2200      	movs	r2, #0
 80008da:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = ENABLE;
 80008dc:	4b0c      	ldr	r3, [pc, #48]	; (8000910 <MX_CAN1_Init+0x68>)
 80008de:	2201      	movs	r2, #1
 80008e0:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = ENABLE;
 80008e2:	4b0b      	ldr	r3, [pc, #44]	; (8000910 <MX_CAN1_Init+0x68>)
 80008e4:	2201      	movs	r2, #1
 80008e6:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80008e8:	4b09      	ldr	r3, [pc, #36]	; (8000910 <MX_CAN1_Init+0x68>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80008ee:	4b08      	ldr	r3, [pc, #32]	; (8000910 <MX_CAN1_Init+0x68>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80008f4:	4b06      	ldr	r3, [pc, #24]	; (8000910 <MX_CAN1_Init+0x68>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80008fa:	4805      	ldr	r0, [pc, #20]	; (8000910 <MX_CAN1_Init+0x68>)
 80008fc:	f001 fe52 	bl	80025a4 <HAL_CAN_Init>
 8000900:	4603      	mov	r3, r0
 8000902:	2b00      	cmp	r3, #0
 8000904:	d001      	beq.n	800090a <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 8000906:	f000 fb69 	bl	8000fdc <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 800090a:	bf00      	nop
 800090c:	bd80      	pop	{r7, pc}
 800090e:	bf00      	nop
 8000910:	20000164 	.word	0x20000164
 8000914:	40006400 	.word	0x40006400

08000918 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b08a      	sub	sp, #40	; 0x28
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000920:	f107 0314 	add.w	r3, r7, #20
 8000924:	2200      	movs	r2, #0
 8000926:	601a      	str	r2, [r3, #0]
 8000928:	605a      	str	r2, [r3, #4]
 800092a:	609a      	str	r2, [r3, #8]
 800092c:	60da      	str	r2, [r3, #12]
 800092e:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	4a21      	ldr	r2, [pc, #132]	; (80009bc <HAL_CAN_MspInit+0xa4>)
 8000936:	4293      	cmp	r3, r2
 8000938:	d13c      	bne.n	80009b4 <HAL_CAN_MspInit+0x9c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800093a:	2300      	movs	r3, #0
 800093c:	613b      	str	r3, [r7, #16]
 800093e:	4b20      	ldr	r3, [pc, #128]	; (80009c0 <HAL_CAN_MspInit+0xa8>)
 8000940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000942:	4a1f      	ldr	r2, [pc, #124]	; (80009c0 <HAL_CAN_MspInit+0xa8>)
 8000944:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000948:	6413      	str	r3, [r2, #64]	; 0x40
 800094a:	4b1d      	ldr	r3, [pc, #116]	; (80009c0 <HAL_CAN_MspInit+0xa8>)
 800094c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800094e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000952:	613b      	str	r3, [r7, #16]
 8000954:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000956:	2300      	movs	r3, #0
 8000958:	60fb      	str	r3, [r7, #12]
 800095a:	4b19      	ldr	r3, [pc, #100]	; (80009c0 <HAL_CAN_MspInit+0xa8>)
 800095c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095e:	4a18      	ldr	r2, [pc, #96]	; (80009c0 <HAL_CAN_MspInit+0xa8>)
 8000960:	f043 0301 	orr.w	r3, r3, #1
 8000964:	6313      	str	r3, [r2, #48]	; 0x30
 8000966:	4b16      	ldr	r3, [pc, #88]	; (80009c0 <HAL_CAN_MspInit+0xa8>)
 8000968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096a:	f003 0301 	and.w	r3, r3, #1
 800096e:	60fb      	str	r3, [r7, #12]
 8000970:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000972:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000976:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000978:	2302      	movs	r3, #2
 800097a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097c:	2300      	movs	r3, #0
 800097e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000980:	2303      	movs	r3, #3
 8000982:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000984:	2309      	movs	r3, #9
 8000986:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000988:	f107 0314 	add.w	r3, r7, #20
 800098c:	4619      	mov	r1, r3
 800098e:	480d      	ldr	r0, [pc, #52]	; (80009c4 <HAL_CAN_MspInit+0xac>)
 8000990:	f002 fe6a 	bl	8003668 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);
 8000994:	2200      	movs	r2, #0
 8000996:	2100      	movs	r1, #0
 8000998:	2013      	movs	r0, #19
 800099a:	f002 fa12 	bl	8002dc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 800099e:	2013      	movs	r0, #19
 80009a0:	f002 fa2b 	bl	8002dfa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 80009a4:	2200      	movs	r2, #0
 80009a6:	2100      	movs	r1, #0
 80009a8:	2014      	movs	r0, #20
 80009aa:	f002 fa0a 	bl	8002dc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80009ae:	2014      	movs	r0, #20
 80009b0:	f002 fa23 	bl	8002dfa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 80009b4:	bf00      	nop
 80009b6:	3728      	adds	r7, #40	; 0x28
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bd80      	pop	{r7, pc}
 80009bc:	40006400 	.word	0x40006400
 80009c0:	40023800 	.word	0x40023800
 80009c4:	40020000 	.word	0x40020000

080009c8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b082      	sub	sp, #8
 80009cc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80009ce:	2300      	movs	r3, #0
 80009d0:	607b      	str	r3, [r7, #4]
 80009d2:	4b10      	ldr	r3, [pc, #64]	; (8000a14 <MX_DMA_Init+0x4c>)
 80009d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d6:	4a0f      	ldr	r2, [pc, #60]	; (8000a14 <MX_DMA_Init+0x4c>)
 80009d8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80009dc:	6313      	str	r3, [r2, #48]	; 0x30
 80009de:	4b0d      	ldr	r3, [pc, #52]	; (8000a14 <MX_DMA_Init+0x4c>)
 80009e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80009e6:	607b      	str	r3, [r7, #4]
 80009e8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 80009ea:	2200      	movs	r2, #0
 80009ec:	2100      	movs	r1, #0
 80009ee:	203b      	movs	r0, #59	; 0x3b
 80009f0:	f002 f9e7 	bl	8002dc2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80009f4:	203b      	movs	r0, #59	; 0x3b
 80009f6:	f002 fa00 	bl	8002dfa <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 80009fa:	2200      	movs	r2, #0
 80009fc:	2100      	movs	r1, #0
 80009fe:	2045      	movs	r0, #69	; 0x45
 8000a00:	f002 f9df 	bl	8002dc2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8000a04:	2045      	movs	r0, #69	; 0x45
 8000a06:	f002 f9f8 	bl	8002dfa <HAL_NVIC_EnableIRQ>

}
 8000a0a:	bf00      	nop
 8000a0c:	3708      	adds	r7, #8
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	40023800 	.word	0x40023800

08000a18 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b08a      	sub	sp, #40	; 0x28
 8000a1c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a1e:	f107 0314 	add.w	r3, r7, #20
 8000a22:	2200      	movs	r2, #0
 8000a24:	601a      	str	r2, [r3, #0]
 8000a26:	605a      	str	r2, [r3, #4]
 8000a28:	609a      	str	r2, [r3, #8]
 8000a2a:	60da      	str	r2, [r3, #12]
 8000a2c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a2e:	2300      	movs	r3, #0
 8000a30:	613b      	str	r3, [r7, #16]
 8000a32:	4b3a      	ldr	r3, [pc, #232]	; (8000b1c <MX_GPIO_Init+0x104>)
 8000a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a36:	4a39      	ldr	r2, [pc, #228]	; (8000b1c <MX_GPIO_Init+0x104>)
 8000a38:	f043 0304 	orr.w	r3, r3, #4
 8000a3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a3e:	4b37      	ldr	r3, [pc, #220]	; (8000b1c <MX_GPIO_Init+0x104>)
 8000a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a42:	f003 0304 	and.w	r3, r3, #4
 8000a46:	613b      	str	r3, [r7, #16]
 8000a48:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	60fb      	str	r3, [r7, #12]
 8000a4e:	4b33      	ldr	r3, [pc, #204]	; (8000b1c <MX_GPIO_Init+0x104>)
 8000a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a52:	4a32      	ldr	r2, [pc, #200]	; (8000b1c <MX_GPIO_Init+0x104>)
 8000a54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a58:	6313      	str	r3, [r2, #48]	; 0x30
 8000a5a:	4b30      	ldr	r3, [pc, #192]	; (8000b1c <MX_GPIO_Init+0x104>)
 8000a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a62:	60fb      	str	r3, [r7, #12]
 8000a64:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a66:	2300      	movs	r3, #0
 8000a68:	60bb      	str	r3, [r7, #8]
 8000a6a:	4b2c      	ldr	r3, [pc, #176]	; (8000b1c <MX_GPIO_Init+0x104>)
 8000a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6e:	4a2b      	ldr	r2, [pc, #172]	; (8000b1c <MX_GPIO_Init+0x104>)
 8000a70:	f043 0301 	orr.w	r3, r3, #1
 8000a74:	6313      	str	r3, [r2, #48]	; 0x30
 8000a76:	4b29      	ldr	r3, [pc, #164]	; (8000b1c <MX_GPIO_Init+0x104>)
 8000a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7a:	f003 0301 	and.w	r3, r3, #1
 8000a7e:	60bb      	str	r3, [r7, #8]
 8000a80:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a82:	2300      	movs	r3, #0
 8000a84:	607b      	str	r3, [r7, #4]
 8000a86:	4b25      	ldr	r3, [pc, #148]	; (8000b1c <MX_GPIO_Init+0x104>)
 8000a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8a:	4a24      	ldr	r2, [pc, #144]	; (8000b1c <MX_GPIO_Init+0x104>)
 8000a8c:	f043 0302 	orr.w	r3, r3, #2
 8000a90:	6313      	str	r3, [r2, #48]	; 0x30
 8000a92:	4b22      	ldr	r3, [pc, #136]	; (8000b1c <MX_GPIO_Init+0x104>)
 8000a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a96:	f003 0302 	and.w	r3, r3, #2
 8000a9a:	607b      	str	r3, [r7, #4]
 8000a9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	603b      	str	r3, [r7, #0]
 8000aa2:	4b1e      	ldr	r3, [pc, #120]	; (8000b1c <MX_GPIO_Init+0x104>)
 8000aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa6:	4a1d      	ldr	r2, [pc, #116]	; (8000b1c <MX_GPIO_Init+0x104>)
 8000aa8:	f043 0308 	orr.w	r3, r3, #8
 8000aac:	6313      	str	r3, [r2, #48]	; 0x30
 8000aae:	4b1b      	ldr	r3, [pc, #108]	; (8000b1c <MX_GPIO_Init+0x104>)
 8000ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab2:	f003 0308 	and.w	r3, r3, #8
 8000ab6:	603b      	str	r3, [r7, #0]
 8000ab8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED1_Pin|LED2_Pin|LED3_Pin|LED4_Pin, GPIO_PIN_RESET);
 8000aba:	2200      	movs	r2, #0
 8000abc:	21f0      	movs	r1, #240	; 0xf0
 8000abe:	4818      	ldr	r0, [pc, #96]	; (8000b20 <MX_GPIO_Init+0x108>)
 8000ac0:	f002 ff86 	bl	80039d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin|LED4_Pin;
 8000ac4:	23f0      	movs	r3, #240	; 0xf0
 8000ac6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ac8:	2301      	movs	r3, #1
 8000aca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000acc:	2302      	movs	r3, #2
 8000ace:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ad4:	f107 0314 	add.w	r3, r7, #20
 8000ad8:	4619      	mov	r1, r3
 8000ada:	4811      	ldr	r0, [pc, #68]	; (8000b20 <MX_GPIO_Init+0x108>)
 8000adc:	f002 fdc4 	bl	8003668 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SDIO_DETECT_Pin;
 8000ae0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ae4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000aea:	2302      	movs	r3, #2
 8000aec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SDIO_DETECT_GPIO_Port, &GPIO_InitStruct);
 8000aee:	f107 0314 	add.w	r3, r7, #20
 8000af2:	4619      	mov	r1, r3
 8000af4:	480b      	ldr	r0, [pc, #44]	; (8000b24 <MX_GPIO_Init+0x10c>)
 8000af6:	f002 fdb7 	bl	8003668 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin */
  GPIO_InitStruct.Pin = RTD_ACTIVE_Pin|HV_ACTIVE_Pin|BMS_FAULT_Pin|IMD_FAULT_Pin
 8000afa:	f44f 43f8 	mov.w	r3, #31744	; 0x7c00
 8000afe:	617b      	str	r3, [r7, #20]
                          |BSPD_FAULT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b00:	2300      	movs	r3, #0
 8000b02:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b04:	2300      	movs	r3, #0
 8000b06:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b08:	f107 0314 	add.w	r3, r7, #20
 8000b0c:	4619      	mov	r1, r3
 8000b0e:	4806      	ldr	r0, [pc, #24]	; (8000b28 <MX_GPIO_Init+0x110>)
 8000b10:	f002 fdaa 	bl	8003668 <HAL_GPIO_Init>

}
 8000b14:	bf00      	nop
 8000b16:	3728      	adds	r7, #40	; 0x28
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bd80      	pop	{r7, pc}
 8000b1c:	40023800 	.word	0x40023800
 8000b20:	40020000 	.word	0x40020000
 8000b24:	40020400 	.word	0x40020400
 8000b28:	40020c00 	.word	0x40020c00

08000b2c <ESP_SETUP>:
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "i2c.h"

/* USER CODE BEGIN 0 */
int ESP_SETUP() {
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0
  // i2c init
  
  // RTC SYNC
  
  return 0;
 8000b30:	2300      	movs	r3, #0
}
 8000b32:	4618      	mov	r0, r3
 8000b34:	46bd      	mov	sp, r7
 8000b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3a:	4770      	bx	lr

08000b3c <LCD_SETUP>:

int LCD_SETUP() {
 8000b3c:	b480      	push	{r7}
 8000b3e:	af00      	add	r7, sp, #0
  // lcd init
  
  return 0;
 8000b40:	2300      	movs	r3, #0
}
 8000b42:	4618      	mov	r0, r3
 8000b44:	46bd      	mov	sp, r7
 8000b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4a:	4770      	bx	lr

08000b4c <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000b50:	4b12      	ldr	r3, [pc, #72]	; (8000b9c <MX_I2C1_Init+0x50>)
 8000b52:	4a13      	ldr	r2, [pc, #76]	; (8000ba0 <MX_I2C1_Init+0x54>)
 8000b54:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000b56:	4b11      	ldr	r3, [pc, #68]	; (8000b9c <MX_I2C1_Init+0x50>)
 8000b58:	4a12      	ldr	r2, [pc, #72]	; (8000ba4 <MX_I2C1_Init+0x58>)
 8000b5a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000b5c:	4b0f      	ldr	r3, [pc, #60]	; (8000b9c <MX_I2C1_Init+0x50>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000b62:	4b0e      	ldr	r3, [pc, #56]	; (8000b9c <MX_I2C1_Init+0x50>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b68:	4b0c      	ldr	r3, [pc, #48]	; (8000b9c <MX_I2C1_Init+0x50>)
 8000b6a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000b6e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b70:	4b0a      	ldr	r3, [pc, #40]	; (8000b9c <MX_I2C1_Init+0x50>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000b76:	4b09      	ldr	r3, [pc, #36]	; (8000b9c <MX_I2C1_Init+0x50>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b7c:	4b07      	ldr	r3, [pc, #28]	; (8000b9c <MX_I2C1_Init+0x50>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b82:	4b06      	ldr	r3, [pc, #24]	; (8000b9c <MX_I2C1_Init+0x50>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000b88:	4804      	ldr	r0, [pc, #16]	; (8000b9c <MX_I2C1_Init+0x50>)
 8000b8a:	f002 ff3b 	bl	8003a04 <HAL_I2C_Init>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d001      	beq.n	8000b98 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000b94:	f000 fa22 	bl	8000fdc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000b98:	bf00      	nop
 8000b9a:	bd80      	pop	{r7, pc}
 8000b9c:	2000018c 	.word	0x2000018c
 8000ba0:	40005400 	.word	0x40005400
 8000ba4:	00061a80 	.word	0x00061a80

08000ba8 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000bac:	4b12      	ldr	r3, [pc, #72]	; (8000bf8 <MX_I2C2_Init+0x50>)
 8000bae:	4a13      	ldr	r2, [pc, #76]	; (8000bfc <MX_I2C2_Init+0x54>)
 8000bb0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8000bb2:	4b11      	ldr	r3, [pc, #68]	; (8000bf8 <MX_I2C2_Init+0x50>)
 8000bb4:	4a12      	ldr	r2, [pc, #72]	; (8000c00 <MX_I2C2_Init+0x58>)
 8000bb6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000bb8:	4b0f      	ldr	r3, [pc, #60]	; (8000bf8 <MX_I2C2_Init+0x50>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000bbe:	4b0e      	ldr	r3, [pc, #56]	; (8000bf8 <MX_I2C2_Init+0x50>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000bc4:	4b0c      	ldr	r3, [pc, #48]	; (8000bf8 <MX_I2C2_Init+0x50>)
 8000bc6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000bca:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000bcc:	4b0a      	ldr	r3, [pc, #40]	; (8000bf8 <MX_I2C2_Init+0x50>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000bd2:	4b09      	ldr	r3, [pc, #36]	; (8000bf8 <MX_I2C2_Init+0x50>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000bd8:	4b07      	ldr	r3, [pc, #28]	; (8000bf8 <MX_I2C2_Init+0x50>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000bde:	4b06      	ldr	r3, [pc, #24]	; (8000bf8 <MX_I2C2_Init+0x50>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000be4:	4804      	ldr	r0, [pc, #16]	; (8000bf8 <MX_I2C2_Init+0x50>)
 8000be6:	f002 ff0d 	bl	8003a04 <HAL_I2C_Init>
 8000bea:	4603      	mov	r3, r0
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d001      	beq.n	8000bf4 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000bf0:	f000 f9f4 	bl	8000fdc <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000bf4:	bf00      	nop
 8000bf6:	bd80      	pop	{r7, pc}
 8000bf8:	200001e0 	.word	0x200001e0
 8000bfc:	40005800 	.word	0x40005800
 8000c00:	00061a80 	.word	0x00061a80

08000c04 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b08c      	sub	sp, #48	; 0x30
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c0c:	f107 031c 	add.w	r3, r7, #28
 8000c10:	2200      	movs	r2, #0
 8000c12:	601a      	str	r2, [r3, #0]
 8000c14:	605a      	str	r2, [r3, #4]
 8000c16:	609a      	str	r2, [r3, #8]
 8000c18:	60da      	str	r2, [r3, #12]
 8000c1a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	4a3a      	ldr	r2, [pc, #232]	; (8000d0c <HAL_I2C_MspInit+0x108>)
 8000c22:	4293      	cmp	r3, r2
 8000c24:	d134      	bne.n	8000c90 <HAL_I2C_MspInit+0x8c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c26:	2300      	movs	r3, #0
 8000c28:	61bb      	str	r3, [r7, #24]
 8000c2a:	4b39      	ldr	r3, [pc, #228]	; (8000d10 <HAL_I2C_MspInit+0x10c>)
 8000c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2e:	4a38      	ldr	r2, [pc, #224]	; (8000d10 <HAL_I2C_MspInit+0x10c>)
 8000c30:	f043 0302 	orr.w	r3, r3, #2
 8000c34:	6313      	str	r3, [r2, #48]	; 0x30
 8000c36:	4b36      	ldr	r3, [pc, #216]	; (8000d10 <HAL_I2C_MspInit+0x10c>)
 8000c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3a:	f003 0302 	and.w	r3, r3, #2
 8000c3e:	61bb      	str	r3, [r7, #24]
 8000c40:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000c42:	23c0      	movs	r3, #192	; 0xc0
 8000c44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c46:	2312      	movs	r3, #18
 8000c48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c4e:	2303      	movs	r3, #3
 8000c50:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c52:	2304      	movs	r3, #4
 8000c54:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c56:	f107 031c 	add.w	r3, r7, #28
 8000c5a:	4619      	mov	r1, r3
 8000c5c:	482d      	ldr	r0, [pc, #180]	; (8000d14 <HAL_I2C_MspInit+0x110>)
 8000c5e:	f002 fd03 	bl	8003668 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c62:	2300      	movs	r3, #0
 8000c64:	617b      	str	r3, [r7, #20]
 8000c66:	4b2a      	ldr	r3, [pc, #168]	; (8000d10 <HAL_I2C_MspInit+0x10c>)
 8000c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c6a:	4a29      	ldr	r2, [pc, #164]	; (8000d10 <HAL_I2C_MspInit+0x10c>)
 8000c6c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c70:	6413      	str	r3, [r2, #64]	; 0x40
 8000c72:	4b27      	ldr	r3, [pc, #156]	; (8000d10 <HAL_I2C_MspInit+0x10c>)
 8000c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c76:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c7a:	617b      	str	r3, [r7, #20]
 8000c7c:	697b      	ldr	r3, [r7, #20]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000c7e:	2200      	movs	r2, #0
 8000c80:	2100      	movs	r1, #0
 8000c82:	201f      	movs	r0, #31
 8000c84:	f002 f89d 	bl	8002dc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000c88:	201f      	movs	r0, #31
 8000c8a:	f002 f8b6 	bl	8002dfa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8000c8e:	e039      	b.n	8000d04 <HAL_I2C_MspInit+0x100>
  else if(i2cHandle->Instance==I2C2)
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	4a20      	ldr	r2, [pc, #128]	; (8000d18 <HAL_I2C_MspInit+0x114>)
 8000c96:	4293      	cmp	r3, r2
 8000c98:	d134      	bne.n	8000d04 <HAL_I2C_MspInit+0x100>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	613b      	str	r3, [r7, #16]
 8000c9e:	4b1c      	ldr	r3, [pc, #112]	; (8000d10 <HAL_I2C_MspInit+0x10c>)
 8000ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca2:	4a1b      	ldr	r2, [pc, #108]	; (8000d10 <HAL_I2C_MspInit+0x10c>)
 8000ca4:	f043 0302 	orr.w	r3, r3, #2
 8000ca8:	6313      	str	r3, [r2, #48]	; 0x30
 8000caa:	4b19      	ldr	r3, [pc, #100]	; (8000d10 <HAL_I2C_MspInit+0x10c>)
 8000cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cae:	f003 0302 	and.w	r3, r3, #2
 8000cb2:	613b      	str	r3, [r7, #16]
 8000cb4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000cb6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000cba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000cbc:	2312      	movs	r3, #18
 8000cbe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cc4:	2303      	movs	r3, #3
 8000cc6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000cc8:	2304      	movs	r3, #4
 8000cca:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ccc:	f107 031c 	add.w	r3, r7, #28
 8000cd0:	4619      	mov	r1, r3
 8000cd2:	4810      	ldr	r0, [pc, #64]	; (8000d14 <HAL_I2C_MspInit+0x110>)
 8000cd4:	f002 fcc8 	bl	8003668 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000cd8:	2300      	movs	r3, #0
 8000cda:	60fb      	str	r3, [r7, #12]
 8000cdc:	4b0c      	ldr	r3, [pc, #48]	; (8000d10 <HAL_I2C_MspInit+0x10c>)
 8000cde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ce0:	4a0b      	ldr	r2, [pc, #44]	; (8000d10 <HAL_I2C_MspInit+0x10c>)
 8000ce2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000ce6:	6413      	str	r3, [r2, #64]	; 0x40
 8000ce8:	4b09      	ldr	r3, [pc, #36]	; (8000d10 <HAL_I2C_MspInit+0x10c>)
 8000cea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000cf0:	60fb      	str	r3, [r7, #12]
 8000cf2:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	2100      	movs	r1, #0
 8000cf8:	2021      	movs	r0, #33	; 0x21
 8000cfa:	f002 f862 	bl	8002dc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8000cfe:	2021      	movs	r0, #33	; 0x21
 8000d00:	f002 f87b 	bl	8002dfa <HAL_NVIC_EnableIRQ>
}
 8000d04:	bf00      	nop
 8000d06:	3730      	adds	r7, #48	; 0x30
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bd80      	pop	{r7, pc}
 8000d0c:	40005400 	.word	0x40005400
 8000d10:	40023800 	.word	0x40023800
 8000d14:	40020400 	.word	0x40020400
 8000d18:	40005800 	.word	0x40005800

08000d1c <SYS_LOG>:
  LCD_DATA,
} LOG_KEY_LCD;

/* Prototypes */
extern LOG syslog;
inline int SYS_LOG(LOG_LEVEL level, LOG_SOURCE source, int key) {
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b082      	sub	sp, #8
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	4603      	mov	r3, r0
 8000d24:	603a      	str	r2, [r7, #0]
 8000d26:	71fb      	strb	r3, [r7, #7]
 8000d28:	460b      	mov	r3, r1
 8000d2a:	71bb      	strb	r3, [r7, #6]
  syslog.timestamp = HAL_GetTick();
 8000d2c:	f001 f870 	bl	8001e10 <HAL_GetTick>
 8000d30:	4603      	mov	r3, r0
 8000d32:	4a09      	ldr	r2, [pc, #36]	; (8000d58 <SYS_LOG+0x3c>)
 8000d34:	6013      	str	r3, [r2, #0]
  syslog.level = level;
 8000d36:	4a08      	ldr	r2, [pc, #32]	; (8000d58 <SYS_LOG+0x3c>)
 8000d38:	79fb      	ldrb	r3, [r7, #7]
 8000d3a:	7113      	strb	r3, [r2, #4]
  syslog.source = source;
 8000d3c:	4a06      	ldr	r2, [pc, #24]	; (8000d58 <SYS_LOG+0x3c>)
 8000d3e:	79bb      	ldrb	r3, [r7, #6]
 8000d40:	7153      	strb	r3, [r2, #5]
  syslog.key = key;
 8000d42:	683b      	ldr	r3, [r7, #0]
 8000d44:	b2da      	uxtb	r2, r3
 8000d46:	4b04      	ldr	r3, [pc, #16]	; (8000d58 <SYS_LOG+0x3c>)
 8000d48:	719a      	strb	r2, [r3, #6]

  SD_WRITE();
 8000d4a:	f000 fba3 	bl	8001494 <SD_WRITE>
  // HAL_I2C_Master_Transmit_IT(&hi2c1, ESP_I2C_ADDR, (uint8_t *)&syslog, 16 /* sizeof(LOG) */);

  return 0;
 8000d4e:	2300      	movs	r3, #0
}
 8000d50:	4618      	mov	r0, r3
 8000d52:	3708      	adds	r7, #8
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bd80      	pop	{r7, pc}
 8000d58:	20001268 	.word	0x20001268

08000d5c <_write>:
int ECU_SETUP(void);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, uint8_t *ptr, int len) {
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b084      	sub	sp, #16
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	60f8      	str	r0, [r7, #12]
 8000d64:	60b9      	str	r1, [r7, #8]
 8000d66:	607a      	str	r2, [r7, #4]
   HAL_UART_Transmit(&huart1, (uint8_t *)ptr, (uint16_t)len, 100);
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	b29a      	uxth	r2, r3
 8000d6c:	2364      	movs	r3, #100	; 0x64
 8000d6e:	68b9      	ldr	r1, [r7, #8]
 8000d70:	4803      	ldr	r0, [pc, #12]	; (8000d80 <_write+0x24>)
 8000d72:	f007 f9f0 	bl	8008156 <HAL_UART_Transmit>
   return (len);
 8000d76:	687b      	ldr	r3, [r7, #4]
}
 8000d78:	4618      	mov	r0, r3
 8000d7a:	3710      	adds	r7, #16
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bd80      	pop	{r7, pc}
 8000d80:	20001468 	.word	0x20001468

08000d84 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b084      	sub	sp, #16
 8000d88:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d8a:	f000 ffdb 	bl	8001d44 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d8e:	f000 f8a5 	bl	8000edc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d92:	f7ff fe41 	bl	8000a18 <MX_GPIO_Init>
  MX_DMA_Init();
 8000d96:	f7ff fe17 	bl	80009c8 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000d9a:	f000 fecf 	bl	8001b3c <MX_USART1_UART_Init>
  MX_I2C2_Init();
 8000d9e:	f7ff ff03 	bl	8000ba8 <MX_I2C2_Init>
  MX_SDIO_SD_Init();
 8000da2:	f000 fbb5 	bl	8001510 <MX_SDIO_SD_Init>
  MX_RTC_Init();
 8000da6:	f000 fa13 	bl	80011d0 <MX_RTC_Init>
  MX_FATFS_Init();
 8000daa:	f008 fecd 	bl	8009b48 <MX_FATFS_Init>
  MX_ADC1_Init();
 8000dae:	f7ff fbe1 	bl	8000574 <MX_ADC1_Init>
  MX_I2C1_Init();
 8000db2:	f7ff fecb 	bl	8000b4c <MX_I2C1_Init>
  MX_CAN1_Init();
 8000db6:	f7ff fd77 	bl	80008a8 <MX_CAN1_Init>
  MX_ADC2_Init();
 8000dba:	f7ff fc2d 	bl	8000618 <MX_ADC2_Init>
  MX_ADC3_Init();
 8000dbe:	f7ff fc7d 	bl	80006bc <MX_ADC3_Init>
  MX_USART2_UART_Init();
 8000dc2:	f000 fee5 	bl	8001b90 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8000dc6:	f000 fe3f 	bl	8001a48 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  uint64_t boot = RTC_read();
 8000dca:	f000 f935 	bl	8001038 <RTC_read>
 8000dce:	e9c7 0102 	strd	r0, r1, [r7, #8]

  int ret;
  ret = ECU_SETUP();
 8000dd2:	f000 f8f1 	bl	8000fb8 <ECU_SETUP>
 8000dd6:	6078      	str	r0, [r7, #4]
  if (ret != 0) {
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d00c      	beq.n	8000df8 <main+0x74>
    #ifdef DEBUG_MODE
      printf("[%8lu] [ERR] ECU setup failed: %d\n", HAL_GetTick(), ret);
 8000dde:	f001 f817 	bl	8001e10 <HAL_GetTick>
 8000de2:	4603      	mov	r3, r0
 8000de4:	687a      	ldr	r2, [r7, #4]
 8000de6:	4619      	mov	r1, r3
 8000de8:	4832      	ldr	r0, [pc, #200]	; (8000eb4 <main+0x130>)
 8000dea:	f00c f817 	bl	800ce1c <iprintf>
    #endif
    err = ERR_ECU;
 8000dee:	4b32      	ldr	r3, [pc, #200]	; (8000eb8 <main+0x134>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	701a      	strb	r2, [r3, #0]
    Error_Handler();
 8000df4:	f000 f8f2 	bl	8000fdc <Error_Handler>
  }

  ret = SD_SETUP(boot);
 8000df8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000dfc:	f000 fa6c 	bl	80012d8 <SD_SETUP>
 8000e00:	6078      	str	r0, [r7, #4]
  if (ret != 0) {
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d007      	beq.n	8000e18 <main+0x94>
    #ifdef DEBUG_MODE
      printf("[%8lu] [ERR] SD setup failed: %d\n", HAL_GetTick(), ret);
 8000e08:	f001 f802 	bl	8001e10 <HAL_GetTick>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	687a      	ldr	r2, [r7, #4]
 8000e10:	4619      	mov	r1, r3
 8000e12:	482a      	ldr	r0, [pc, #168]	; (8000ebc <main+0x138>)
 8000e14:	f00c f802 	bl	800ce1c <iprintf>
    #endif
  }

  syslog.value[0] = 1;
 8000e18:	4b29      	ldr	r3, [pc, #164]	; (8000ec0 <main+0x13c>)
 8000e1a:	2201      	movs	r2, #1
 8000e1c:	721a      	strb	r2, [r3, #8]
  SYS_LOG(LOG_INFO, ECU, ECU_BOOT);
 8000e1e:	2200      	movs	r2, #0
 8000e20:	2100      	movs	r1, #0
 8000e22:	2003      	movs	r0, #3
 8000e24:	f7ff ff7a 	bl	8000d1c <SYS_LOG>

  ret = ESP_SETUP();
 8000e28:	f7ff fe80 	bl	8000b2c <ESP_SETUP>
 8000e2c:	6078      	str	r0, [r7, #4]
  if (ret != 0) {
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d00f      	beq.n	8000e54 <main+0xd0>
    #ifdef DEBUG_MODE
      printf("[%8lu] [ERR] ESP setup failed: %d\n", HAL_GetTick(), ret);
 8000e34:	f000 ffec 	bl	8001e10 <HAL_GetTick>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	687a      	ldr	r2, [r7, #4]
 8000e3c:	4619      	mov	r1, r3
 8000e3e:	4821      	ldr	r0, [pc, #132]	; (8000ec4 <main+0x140>)
 8000e40:	f00b ffec 	bl	800ce1c <iprintf>
    #endif

    syslog.value[0] = 0;
 8000e44:	4b1e      	ldr	r3, [pc, #120]	; (8000ec0 <main+0x13c>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	721a      	strb	r2, [r3, #8]
    SYS_LOG(LOG_ERROR, ESP, ESP_INIT);
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	2101      	movs	r1, #1
 8000e4e:	2001      	movs	r0, #1
 8000e50:	f7ff ff64 	bl	8000d1c <SYS_LOG>
  }

  ret = LCD_SETUP();
 8000e54:	f7ff fe72 	bl	8000b3c <LCD_SETUP>
 8000e58:	6078      	str	r0, [r7, #4]
  if (ret != 0) {
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d00f      	beq.n	8000e80 <main+0xfc>
    #ifdef DEBUG_MODE
      printf("[%8lu] [ERR] LCD setup failed: %d\n", HAL_GetTick(), ret);
 8000e60:	f000 ffd6 	bl	8001e10 <HAL_GetTick>
 8000e64:	4603      	mov	r3, r0
 8000e66:	687a      	ldr	r2, [r7, #4]
 8000e68:	4619      	mov	r1, r3
 8000e6a:	4817      	ldr	r0, [pc, #92]	; (8000ec8 <main+0x144>)
 8000e6c:	f00b ffd6 	bl	800ce1c <iprintf>
    #endif

    syslog.value[0] = 0;
 8000e70:	4b13      	ldr	r3, [pc, #76]	; (8000ec0 <main+0x13c>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	721a      	strb	r2, [r3, #8]
    SYS_LOG(LOG_ERROR, LCD, LCD_INIT);
 8000e76:	2200      	movs	r2, #0
 8000e78:	2108      	movs	r1, #8
 8000e7a:	2001      	movs	r0, #1
 8000e7c:	f7ff ff4e 	bl	8000d1c <SYS_LOG>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1) {

    int ret = SD_WRITE(&logfile, "test");
 8000e80:	4912      	ldr	r1, [pc, #72]	; (8000ecc <main+0x148>)
 8000e82:	4813      	ldr	r0, [pc, #76]	; (8000ed0 <main+0x14c>)
 8000e84:	f000 fb06 	bl	8001494 <SD_WRITE>
 8000e88:	6038      	str	r0, [r7, #0]

    if (timer_flag[TIMER_SD]) {
 8000e8a:	4b12      	ldr	r3, [pc, #72]	; (8000ed4 <main+0x150>)
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d0f6      	beq.n	8000e80 <main+0xfc>
      timer_flag[TIMER_SD] = false;
 8000e92:	4b10      	ldr	r3, [pc, #64]	; (8000ed4 <main+0x150>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	601a      	str	r2, [r3, #0]
      ret = SD_SYNC(&logfile);
 8000e98:	480d      	ldr	r0, [pc, #52]	; (8000ed0 <main+0x14c>)
 8000e9a:	f000 fb1d 	bl	80014d8 <SD_SYNC>
 8000e9e:	6038      	str	r0, [r7, #0]
      #ifdef DEBUG_MODE
        printf("[%8lu] [INF] SD SYNC: %d\n", HAL_GetTick(), ret);
 8000ea0:	f000 ffb6 	bl	8001e10 <HAL_GetTick>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	683a      	ldr	r2, [r7, #0]
 8000ea8:	4619      	mov	r1, r3
 8000eaa:	480b      	ldr	r0, [pc, #44]	; (8000ed8 <main+0x154>)
 8000eac:	f00b ffb6 	bl	800ce1c <iprintf>
  while (1) {
 8000eb0:	e7e6      	b.n	8000e80 <main+0xfc>
 8000eb2:	bf00      	nop
 8000eb4:	0800e108 	.word	0x0800e108
 8000eb8:	20000234 	.word	0x20000234
 8000ebc:	0800e12c 	.word	0x0800e12c
 8000ec0:	20001268 	.word	0x20001268
 8000ec4:	0800e150 	.word	0x0800e150
 8000ec8:	0800e174 	.word	0x0800e174
 8000ecc:	0800e198 	.word	0x0800e198
 8000ed0:	20000238 	.word	0x20000238
 8000ed4:	20001278 	.word	0x20001278
 8000ed8:	0800e1a0 	.word	0x0800e1a0

08000edc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b094      	sub	sp, #80	; 0x50
 8000ee0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ee2:	f107 0320 	add.w	r3, r7, #32
 8000ee6:	2230      	movs	r2, #48	; 0x30
 8000ee8:	2100      	movs	r1, #0
 8000eea:	4618      	mov	r0, r3
 8000eec:	f00b ff8e 	bl	800ce0c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ef0:	f107 030c 	add.w	r3, r7, #12
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	601a      	str	r2, [r3, #0]
 8000ef8:	605a      	str	r2, [r3, #4]
 8000efa:	609a      	str	r2, [r3, #8]
 8000efc:	60da      	str	r2, [r3, #12]
 8000efe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f00:	2300      	movs	r3, #0
 8000f02:	60bb      	str	r3, [r7, #8]
 8000f04:	4b2a      	ldr	r3, [pc, #168]	; (8000fb0 <SystemClock_Config+0xd4>)
 8000f06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f08:	4a29      	ldr	r2, [pc, #164]	; (8000fb0 <SystemClock_Config+0xd4>)
 8000f0a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f0e:	6413      	str	r3, [r2, #64]	; 0x40
 8000f10:	4b27      	ldr	r3, [pc, #156]	; (8000fb0 <SystemClock_Config+0xd4>)
 8000f12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f18:	60bb      	str	r3, [r7, #8]
 8000f1a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	607b      	str	r3, [r7, #4]
 8000f20:	4b24      	ldr	r3, [pc, #144]	; (8000fb4 <SystemClock_Config+0xd8>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	4a23      	ldr	r2, [pc, #140]	; (8000fb4 <SystemClock_Config+0xd8>)
 8000f26:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f2a:	6013      	str	r3, [r2, #0]
 8000f2c:	4b21      	ldr	r3, [pc, #132]	; (8000fb4 <SystemClock_Config+0xd8>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f34:	607b      	str	r3, [r7, #4]
 8000f36:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8000f38:	2305      	movs	r3, #5
 8000f3a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f3c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f40:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000f42:	2301      	movs	r3, #1
 8000f44:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f46:	2302      	movs	r3, #2
 8000f48:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f4a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000f4e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000f50:	2304      	movs	r3, #4
 8000f52:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000f54:	23a8      	movs	r3, #168	; 0xa8
 8000f56:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f58:	2302      	movs	r3, #2
 8000f5a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000f5c:	2307      	movs	r3, #7
 8000f5e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f60:	f107 0320 	add.w	r3, r7, #32
 8000f64:	4618      	mov	r0, r3
 8000f66:	f004 fa57 	bl	8005418 <HAL_RCC_OscConfig>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d001      	beq.n	8000f74 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000f70:	f000 f834 	bl	8000fdc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f74:	230f      	movs	r3, #15
 8000f76:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f78:	2302      	movs	r3, #2
 8000f7a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000f80:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000f84:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000f86:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f8a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000f8c:	f107 030c 	add.w	r3, r7, #12
 8000f90:	2105      	movs	r1, #5
 8000f92:	4618      	mov	r0, r3
 8000f94:	f004 fcb8 	bl	8005908 <HAL_RCC_ClockConfig>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d001      	beq.n	8000fa2 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000f9e:	f000 f81d 	bl	8000fdc <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8000fa2:	f004 fd97 	bl	8005ad4 <HAL_RCC_EnableCSS>
}
 8000fa6:	bf00      	nop
 8000fa8:	3750      	adds	r7, #80	; 0x50
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	40023800 	.word	0x40023800
 8000fb4:	40007000 	.word	0x40007000

08000fb8 <ECU_SETUP>:

/* USER CODE BEGIN 4 */
int ECU_SETUP(void) {
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	af00      	add	r7, sp, #0

  HAL_GPIO_WritePin(GPIOA, LED3_Pin, GPIO_PIN_RESET);
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	2140      	movs	r1, #64	; 0x40
 8000fc0:	4805      	ldr	r0, [pc, #20]	; (8000fd8 <ECU_SETUP+0x20>)
 8000fc2:	f002 fd05 	bl	80039d0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, LED4_Pin, GPIO_PIN_SET);
 8000fc6:	2201      	movs	r2, #1
 8000fc8:	2180      	movs	r1, #128	; 0x80
 8000fca:	4803      	ldr	r0, [pc, #12]	; (8000fd8 <ECU_SETUP+0x20>)
 8000fcc:	f002 fd00 	bl	80039d0 <HAL_GPIO_WritePin>

  return 0;
 8000fd0:	2300      	movs	r3, #0
}
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	40020000 	.word	0x40020000

08000fdc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  // __disable_irq();

  printf("[%8lu] [ERR] Error Handler code: %d\n", HAL_GetTick(), err);
 8000fe0:	f000 ff16 	bl	8001e10 <HAL_GetTick>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	4a11      	ldr	r2, [pc, #68]	; (800102c <Error_Handler+0x50>)
 8000fe8:	7812      	ldrb	r2, [r2, #0]
 8000fea:	4619      	mov	r1, r3
 8000fec:	4810      	ldr	r0, [pc, #64]	; (8001030 <Error_Handler+0x54>)
 8000fee:	f00b ff15 	bl	800ce1c <iprintf>

  while (1) {
    HAL_GPIO_WritePin(GPIOA, LED3_Pin, GPIO_PIN_SET);
 8000ff2:	2201      	movs	r2, #1
 8000ff4:	2140      	movs	r1, #64	; 0x40
 8000ff6:	480f      	ldr	r0, [pc, #60]	; (8001034 <Error_Handler+0x58>)
 8000ff8:	f002 fcea 	bl	80039d0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, LED4_Pin, GPIO_PIN_RESET);
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	2180      	movs	r1, #128	; 0x80
 8001000:	480c      	ldr	r0, [pc, #48]	; (8001034 <Error_Handler+0x58>)
 8001002:	f002 fce5 	bl	80039d0 <HAL_GPIO_WritePin>
    HAL_Delay(500);
 8001006:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800100a:	f000 ff0d 	bl	8001e28 <HAL_Delay>
    HAL_GPIO_WritePin(GPIOA, LED3_Pin, GPIO_PIN_RESET);
 800100e:	2200      	movs	r2, #0
 8001010:	2140      	movs	r1, #64	; 0x40
 8001012:	4808      	ldr	r0, [pc, #32]	; (8001034 <Error_Handler+0x58>)
 8001014:	f002 fcdc 	bl	80039d0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, LED4_Pin, GPIO_PIN_SET);
 8001018:	2201      	movs	r2, #1
 800101a:	2180      	movs	r1, #128	; 0x80
 800101c:	4805      	ldr	r0, [pc, #20]	; (8001034 <Error_Handler+0x58>)
 800101e:	f002 fcd7 	bl	80039d0 <HAL_GPIO_WritePin>
    HAL_Delay(500);
 8001022:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001026:	f000 feff 	bl	8001e28 <HAL_Delay>
    HAL_GPIO_WritePin(GPIOA, LED3_Pin, GPIO_PIN_SET);
 800102a:	e7e2      	b.n	8000ff2 <Error_Handler+0x16>
 800102c:	20000234 	.word	0x20000234
 8001030:	0800e1bc 	.word	0x0800e1bc
 8001034:	40020000 	.word	0x40020000

08001038 <RTC_read>:
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "rtc.h"

/* USER CODE BEGIN 0 */
uint64_t RTC_read() {
 8001038:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800103c:	b0a0      	sub	sp, #128	; 0x80
 800103e:	af00      	add	r7, sp, #0
	uint64_t result = 0;
 8001040:	f04f 0200 	mov.w	r2, #0
 8001044:	f04f 0300 	mov.w	r3, #0
 8001048:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78

	RTC_DateTypeDef sDate;
	RTC_TimeTypeDef sTime;

	HAL_RTC_GetTime(&hrtc, &sTime, FORMAT_BIN);
 800104c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001050:	2200      	movs	r2, #0
 8001052:	4619      	mov	r1, r3
 8001054:	485d      	ldr	r0, [pc, #372]	; (80011cc <RTC_read+0x194>)
 8001056:	f005 f891 	bl	800617c <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &sDate, FORMAT_BIN);
 800105a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800105e:	2200      	movs	r2, #0
 8001060:	4619      	mov	r1, r3
 8001062:	485a      	ldr	r0, [pc, #360]	; (80011cc <RTC_read+0x194>)
 8001064:	f005 f96c 	bl	8006340 <HAL_RTC_GetDate>

	result |= (uint64_t)(sTime.SubSeconds);
 8001068:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800106a:	2200      	movs	r2, #0
 800106c:	461c      	mov	r4, r3
 800106e:	4615      	mov	r5, r2
 8001070:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8001074:	ea42 0a04 	orr.w	sl, r2, r4
 8001078:	ea43 0b05 	orr.w	fp, r3, r5
 800107c:	e9c7 ab1e 	strd	sl, fp, [r7, #120]	; 0x78
	result |= (uint64_t)(sTime.Seconds) << 8;
 8001080:	f897 3062 	ldrb.w	r3, [r7, #98]	; 0x62
 8001084:	b2db      	uxtb	r3, r3
 8001086:	2200      	movs	r2, #0
 8001088:	4698      	mov	r8, r3
 800108a:	4691      	mov	r9, r2
 800108c:	f04f 0000 	mov.w	r0, #0
 8001090:	f04f 0100 	mov.w	r1, #0
 8001094:	ea4f 2109 	mov.w	r1, r9, lsl #8
 8001098:	ea41 6118 	orr.w	r1, r1, r8, lsr #24
 800109c:	ea4f 2008 	mov.w	r0, r8, lsl #8
 80010a0:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 80010a4:	ea42 0400 	orr.w	r4, r2, r0
 80010a8:	62bc      	str	r4, [r7, #40]	; 0x28
 80010aa:	430b      	orrs	r3, r1
 80010ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80010ae:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 80010b2:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
	result |= (uint64_t)(sTime.Minutes) << 16;
 80010b6:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
 80010ba:	b2db      	uxtb	r3, r3
 80010bc:	2200      	movs	r2, #0
 80010be:	65bb      	str	r3, [r7, #88]	; 0x58
 80010c0:	65fa      	str	r2, [r7, #92]	; 0x5c
 80010c2:	f04f 0000 	mov.w	r0, #0
 80010c6:	f04f 0100 	mov.w	r1, #0
 80010ca:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 80010ce:	462b      	mov	r3, r5
 80010d0:	0419      	lsls	r1, r3, #16
 80010d2:	4623      	mov	r3, r4
 80010d4:	ea41 4113 	orr.w	r1, r1, r3, lsr #16
 80010d8:	4623      	mov	r3, r4
 80010da:	0418      	lsls	r0, r3, #16
 80010dc:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 80010e0:	ea42 0400 	orr.w	r4, r2, r0
 80010e4:	623c      	str	r4, [r7, #32]
 80010e6:	430b      	orrs	r3, r1
 80010e8:	627b      	str	r3, [r7, #36]	; 0x24
 80010ea:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80010ee:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
	result |= (uint64_t)(sTime.Hours) << 24;
 80010f2:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 80010f6:	b2db      	uxtb	r3, r3
 80010f8:	2200      	movs	r2, #0
 80010fa:	653b      	str	r3, [r7, #80]	; 0x50
 80010fc:	657a      	str	r2, [r7, #84]	; 0x54
 80010fe:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8001102:	460b      	mov	r3, r1
 8001104:	0a1b      	lsrs	r3, r3, #8
 8001106:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001108:	460b      	mov	r3, r1
 800110a:	061b      	lsls	r3, r3, #24
 800110c:	64bb      	str	r3, [r7, #72]	; 0x48
 800110e:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8001112:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8001116:	4621      	mov	r1, r4
 8001118:	4311      	orrs	r1, r2
 800111a:	61b9      	str	r1, [r7, #24]
 800111c:	4629      	mov	r1, r5
 800111e:	4319      	orrs	r1, r3
 8001120:	61f9      	str	r1, [r7, #28]
 8001122:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8001126:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
	result |= (uint64_t)(sDate.Date) << 32;
 800112a:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 800112e:	b2db      	uxtb	r3, r3
 8001130:	2200      	movs	r2, #0
 8001132:	643b      	str	r3, [r7, #64]	; 0x40
 8001134:	647a      	str	r2, [r7, #68]	; 0x44
 8001136:	f04f 0200 	mov.w	r2, #0
 800113a:	f04f 0300 	mov.w	r3, #0
 800113e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8001140:	000b      	movs	r3, r1
 8001142:	2200      	movs	r2, #0
 8001144:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8001148:	ea40 0402 	orr.w	r4, r0, r2
 800114c:	613c      	str	r4, [r7, #16]
 800114e:	430b      	orrs	r3, r1
 8001150:	617b      	str	r3, [r7, #20]
 8001152:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8001156:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
	result |= (uint64_t)(sDate.Month) << 40;
 800115a:	f897 3075 	ldrb.w	r3, [r7, #117]	; 0x75
 800115e:	b2db      	uxtb	r3, r3
 8001160:	2200      	movs	r2, #0
 8001162:	63bb      	str	r3, [r7, #56]	; 0x38
 8001164:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001166:	f04f 0200 	mov.w	r2, #0
 800116a:	f04f 0300 	mov.w	r3, #0
 800116e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001170:	020b      	lsls	r3, r1, #8
 8001172:	2200      	movs	r2, #0
 8001174:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8001178:	ea40 0402 	orr.w	r4, r0, r2
 800117c:	60bc      	str	r4, [r7, #8]
 800117e:	430b      	orrs	r3, r1
 8001180:	60fb      	str	r3, [r7, #12]
 8001182:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8001186:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
	result |= (uint64_t)(sDate.Year) << 48;
 800118a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800118e:	b2db      	uxtb	r3, r3
 8001190:	2200      	movs	r2, #0
 8001192:	633b      	str	r3, [r7, #48]	; 0x30
 8001194:	637a      	str	r2, [r7, #52]	; 0x34
 8001196:	f04f 0200 	mov.w	r2, #0
 800119a:	f04f 0300 	mov.w	r3, #0
 800119e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80011a0:	040b      	lsls	r3, r1, #16
 80011a2:	2200      	movs	r2, #0
 80011a4:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 80011a8:	ea40 0402 	orr.w	r4, r0, r2
 80011ac:	603c      	str	r4, [r7, #0]
 80011ae:	430b      	orrs	r3, r1
 80011b0:	607b      	str	r3, [r7, #4]
 80011b2:	e9d7 3400 	ldrd	r3, r4, [r7]
 80011b6:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78

	return result;
 80011ba:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
}
 80011be:	4610      	mov	r0, r2
 80011c0:	4619      	mov	r1, r3
 80011c2:	3780      	adds	r7, #128	; 0x80
 80011c4:	46bd      	mov	sp, r7
 80011c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80011ca:	bf00      	nop
 80011cc:	20001298 	.word	0x20001298

080011d0 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b086      	sub	sp, #24
 80011d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80011d6:	1d3b      	adds	r3, r7, #4
 80011d8:	2200      	movs	r2, #0
 80011da:	601a      	str	r2, [r3, #0]
 80011dc:	605a      	str	r2, [r3, #4]
 80011de:	609a      	str	r2, [r3, #8]
 80011e0:	60da      	str	r2, [r3, #12]
 80011e2:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80011e4:	2300      	movs	r3, #0
 80011e6:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80011e8:	4b24      	ldr	r3, [pc, #144]	; (800127c <MX_RTC_Init+0xac>)
 80011ea:	4a25      	ldr	r2, [pc, #148]	; (8001280 <MX_RTC_Init+0xb0>)
 80011ec:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80011ee:	4b23      	ldr	r3, [pc, #140]	; (800127c <MX_RTC_Init+0xac>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80011f4:	4b21      	ldr	r3, [pc, #132]	; (800127c <MX_RTC_Init+0xac>)
 80011f6:	227f      	movs	r2, #127	; 0x7f
 80011f8:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80011fa:	4b20      	ldr	r3, [pc, #128]	; (800127c <MX_RTC_Init+0xac>)
 80011fc:	22ff      	movs	r2, #255	; 0xff
 80011fe:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001200:	4b1e      	ldr	r3, [pc, #120]	; (800127c <MX_RTC_Init+0xac>)
 8001202:	2200      	movs	r2, #0
 8001204:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001206:	4b1d      	ldr	r3, [pc, #116]	; (800127c <MX_RTC_Init+0xac>)
 8001208:	2200      	movs	r2, #0
 800120a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800120c:	4b1b      	ldr	r3, [pc, #108]	; (800127c <MX_RTC_Init+0xac>)
 800120e:	2200      	movs	r2, #0
 8001210:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001212:	481a      	ldr	r0, [pc, #104]	; (800127c <MX_RTC_Init+0xac>)
 8001214:	f004 fea2 	bl	8005f5c <HAL_RTC_Init>
 8001218:	4603      	mov	r3, r0
 800121a:	2b00      	cmp	r3, #0
 800121c:	d001      	beq.n	8001222 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 800121e:	f7ff fedd 	bl	8000fdc <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8001222:	2300      	movs	r3, #0
 8001224:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8001226:	2300      	movs	r3, #0
 8001228:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 800122a:	2300      	movs	r3, #0
 800122c:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800122e:	2300      	movs	r3, #0
 8001230:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001232:	2300      	movs	r3, #0
 8001234:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001236:	1d3b      	adds	r3, r7, #4
 8001238:	2201      	movs	r2, #1
 800123a:	4619      	mov	r1, r3
 800123c:	480f      	ldr	r0, [pc, #60]	; (800127c <MX_RTC_Init+0xac>)
 800123e:	f004 ff03 	bl	8006048 <HAL_RTC_SetTime>
 8001242:	4603      	mov	r3, r0
 8001244:	2b00      	cmp	r3, #0
 8001246:	d001      	beq.n	800124c <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8001248:	f7ff fec8 	bl	8000fdc <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_SUNDAY;
 800124c:	2307      	movs	r3, #7
 800124e:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8001250:	2301      	movs	r3, #1
 8001252:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8001254:	2301      	movs	r3, #1
 8001256:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x23;
 8001258:	2323      	movs	r3, #35	; 0x23
 800125a:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800125c:	463b      	mov	r3, r7
 800125e:	2201      	movs	r2, #1
 8001260:	4619      	mov	r1, r3
 8001262:	4806      	ldr	r0, [pc, #24]	; (800127c <MX_RTC_Init+0xac>)
 8001264:	f004 ffe8 	bl	8006238 <HAL_RTC_SetDate>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	d001      	beq.n	8001272 <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 800126e:	f7ff feb5 	bl	8000fdc <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001272:	bf00      	nop
 8001274:	3718      	adds	r7, #24
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	20001298 	.word	0x20001298
 8001280:	40002800 	.word	0x40002800

08001284 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b086      	sub	sp, #24
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800128c:	f107 0308 	add.w	r3, r7, #8
 8001290:	2200      	movs	r2, #0
 8001292:	601a      	str	r2, [r3, #0]
 8001294:	605a      	str	r2, [r3, #4]
 8001296:	609a      	str	r2, [r3, #8]
 8001298:	60da      	str	r2, [r3, #12]
  if(rtcHandle->Instance==RTC)
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	4a0c      	ldr	r2, [pc, #48]	; (80012d0 <HAL_RTC_MspInit+0x4c>)
 80012a0:	4293      	cmp	r3, r2
 80012a2:	d111      	bne.n	80012c8 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80012a4:	2302      	movs	r3, #2
 80012a6:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80012a8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80012ac:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012ae:	f107 0308 	add.w	r3, r7, #8
 80012b2:	4618      	mov	r0, r3
 80012b4:	f004 fd70 	bl	8005d98 <HAL_RCCEx_PeriphCLKConfig>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d001      	beq.n	80012c2 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 80012be:	f7ff fe8d 	bl	8000fdc <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80012c2:	4b04      	ldr	r3, [pc, #16]	; (80012d4 <HAL_RTC_MspInit+0x50>)
 80012c4:	2201      	movs	r2, #1
 80012c6:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80012c8:	bf00      	nop
 80012ca:	3718      	adds	r7, #24
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}
 80012d0:	40002800 	.word	0x40002800
 80012d4:	42470e3c 	.word	0x42470e3c

080012d8 <SD_SETUP>:
/* USER CODE BEGIN 0 */
extern FIL logfile;
extern LOG syslog;
char logname[30];

int SD_SETUP(uint64_t boot) {
 80012d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012da:	f5ad 5d82 	sub.w	sp, sp, #4160	; 0x1040
 80012de:	b087      	sub	sp, #28
 80012e0:	af04      	add	r7, sp, #16
 80012e2:	f107 0308 	add.w	r3, r7, #8
 80012e6:	e943 0102 	strd	r0, r1, [r3, #-8]
  FATFS SD_FATFS;

  disk_initialize((BYTE) 0);
 80012ea:	2000      	movs	r0, #0
 80012ec:	f008 fe9a 	bl	800a024 <disk_initialize>
  int ret = f_mount(&SD_FATFS, "", 0);
 80012f0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80012f4:	3b1c      	subs	r3, #28
 80012f6:	2200      	movs	r2, #0
 80012f8:	495f      	ldr	r1, [pc, #380]	; (8001478 <SD_SETUP+0x1a0>)
 80012fa:	4618      	mov	r0, r3
 80012fc:	f00b f816 	bl	800c32c <f_mount>
 8001300:	4603      	mov	r3, r0
 8001302:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8001306:	f102 0204 	add.w	r2, r2, #4
 800130a:	6013      	str	r3, [r2, #0]
  if (ret != FR_OK) {
 800130c:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8001310:	f103 0304 	add.w	r3, r3, #4
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	2b00      	cmp	r3, #0
 8001318:	d00e      	beq.n	8001338 <SD_SETUP+0x60>
    #ifdef DEBUG_MODE
      printf("[%8lu] [ERR] SD mount failed: %d\n", HAL_GetTick(), ret);
 800131a:	f000 fd79 	bl	8001e10 <HAL_GetTick>
 800131e:	4603      	mov	r3, r0
 8001320:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8001324:	f102 0204 	add.w	r2, r2, #4
 8001328:	6812      	ldr	r2, [r2, #0]
 800132a:	4619      	mov	r1, r3
 800132c:	4853      	ldr	r0, [pc, #332]	; (800147c <SD_SETUP+0x1a4>)
 800132e:	f00b fd75 	bl	800ce1c <iprintf>
    #endif
    return -1;
 8001332:	f04f 33ff 	mov.w	r3, #4294967295
 8001336:	e099      	b.n	800146c <SD_SETUP+0x194>
  }

  sprintf(logname, "A-FA 20%02lu-%02lu-%02lu %02lu-%02lu-%02lu.log",
         (uint32_t)(boot >> 48), (uint32_t)(boot << 16 >> 56), (uint32_t)(boot << 24 >> 56),
 8001338:	f107 0308 	add.w	r3, r7, #8
 800133c:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8001340:	f04f 0200 	mov.w	r2, #0
 8001344:	f04f 0300 	mov.w	r3, #0
 8001348:	0c0a      	lsrs	r2, r1, #16
 800134a:	2300      	movs	r3, #0
  sprintf(logname, "A-FA 20%02lu-%02lu-%02lu %02lu-%02lu-%02lu.log",
 800134c:	4694      	mov	ip, r2
         (uint32_t)(boot >> 48), (uint32_t)(boot << 16 >> 56), (uint32_t)(boot << 24 >> 56),
 800134e:	f107 0308 	add.w	r3, r7, #8
 8001352:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8001356:	f04f 0200 	mov.w	r2, #0
 800135a:	f04f 0300 	mov.w	r3, #0
 800135e:	040b      	lsls	r3, r1, #16
 8001360:	ea43 4310 	orr.w	r3, r3, r0, lsr #16
 8001364:	0402      	lsls	r2, r0, #16
 8001366:	f04f 0000 	mov.w	r0, #0
 800136a:	f04f 0100 	mov.w	r1, #0
 800136e:	0e18      	lsrs	r0, r3, #24
 8001370:	2100      	movs	r1, #0
  sprintf(logname, "A-FA 20%02lu-%02lu-%02lu %02lu-%02lu-%02lu.log",
 8001372:	4686      	mov	lr, r0
         (uint32_t)(boot >> 48), (uint32_t)(boot << 16 >> 56), (uint32_t)(boot << 24 >> 56),
 8001374:	f107 0308 	add.w	r3, r7, #8
 8001378:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800137c:	f04f 0200 	mov.w	r2, #0
 8001380:	f04f 0300 	mov.w	r3, #0
 8001384:	060b      	lsls	r3, r1, #24
 8001386:	ea43 2310 	orr.w	r3, r3, r0, lsr #8
 800138a:	0602      	lsls	r2, r0, #24
 800138c:	f04f 0000 	mov.w	r0, #0
 8001390:	f04f 0100 	mov.w	r1, #0
 8001394:	0e18      	lsrs	r0, r3, #24
 8001396:	2100      	movs	r1, #0
  sprintf(logname, "A-FA 20%02lu-%02lu-%02lu %02lu-%02lu-%02lu.log",
 8001398:	4604      	mov	r4, r0
         (uint32_t)(boot << 32 >> 56), (uint32_t)(boot << 40 >> 56), (uint32_t)(boot << 48 >> 56));
 800139a:	f107 0308 	add.w	r3, r7, #8
 800139e:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 80013a2:	f04f 0200 	mov.w	r2, #0
 80013a6:	f04f 0300 	mov.w	r3, #0
 80013aa:	0003      	movs	r3, r0
 80013ac:	2200      	movs	r2, #0
 80013ae:	f04f 0000 	mov.w	r0, #0
 80013b2:	f04f 0100 	mov.w	r1, #0
 80013b6:	0e18      	lsrs	r0, r3, #24
 80013b8:	2100      	movs	r1, #0
  sprintf(logname, "A-FA 20%02lu-%02lu-%02lu %02lu-%02lu-%02lu.log",
 80013ba:	4605      	mov	r5, r0
         (uint32_t)(boot << 32 >> 56), (uint32_t)(boot << 40 >> 56), (uint32_t)(boot << 48 >> 56));
 80013bc:	f107 0308 	add.w	r3, r7, #8
 80013c0:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 80013c4:	f04f 0200 	mov.w	r2, #0
 80013c8:	f04f 0300 	mov.w	r3, #0
 80013cc:	0203      	lsls	r3, r0, #8
 80013ce:	2200      	movs	r2, #0
 80013d0:	f04f 0000 	mov.w	r0, #0
 80013d4:	f04f 0100 	mov.w	r1, #0
 80013d8:	0e18      	lsrs	r0, r3, #24
 80013da:	2100      	movs	r1, #0
  sprintf(logname, "A-FA 20%02lu-%02lu-%02lu %02lu-%02lu-%02lu.log",
 80013dc:	4606      	mov	r6, r0
         (uint32_t)(boot << 32 >> 56), (uint32_t)(boot << 40 >> 56), (uint32_t)(boot << 48 >> 56));
 80013de:	f107 0308 	add.w	r3, r7, #8
 80013e2:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 80013e6:	f04f 0200 	mov.w	r2, #0
 80013ea:	f04f 0300 	mov.w	r3, #0
 80013ee:	0403      	lsls	r3, r0, #16
 80013f0:	2200      	movs	r2, #0
 80013f2:	f04f 0000 	mov.w	r0, #0
 80013f6:	f04f 0100 	mov.w	r1, #0
 80013fa:	0e18      	lsrs	r0, r3, #24
 80013fc:	2100      	movs	r1, #0
  sprintf(logname, "A-FA 20%02lu-%02lu-%02lu %02lu-%02lu-%02lu.log",
 80013fe:	4603      	mov	r3, r0
 8001400:	9303      	str	r3, [sp, #12]
 8001402:	9602      	str	r6, [sp, #8]
 8001404:	9501      	str	r5, [sp, #4]
 8001406:	9400      	str	r4, [sp, #0]
 8001408:	4673      	mov	r3, lr
 800140a:	4662      	mov	r2, ip
 800140c:	491c      	ldr	r1, [pc, #112]	; (8001480 <SD_SETUP+0x1a8>)
 800140e:	481d      	ldr	r0, [pc, #116]	; (8001484 <SD_SETUP+0x1ac>)
 8001410:	f00b fd1c 	bl	800ce4c <siprintf>

  ret = f_open(&logfile, logname, FA_OPEN_APPEND | FA_WRITE);
 8001414:	2232      	movs	r2, #50	; 0x32
 8001416:	491b      	ldr	r1, [pc, #108]	; (8001484 <SD_SETUP+0x1ac>)
 8001418:	481b      	ldr	r0, [pc, #108]	; (8001488 <SD_SETUP+0x1b0>)
 800141a:	f00a ffcd 	bl	800c3b8 <f_open>
 800141e:	4603      	mov	r3, r0
 8001420:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8001424:	f102 0204 	add.w	r2, r2, #4
 8001428:	6013      	str	r3, [r2, #0]
  if (ret != FR_OK) {
 800142a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800142e:	f103 0304 	add.w	r3, r3, #4
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	2b00      	cmp	r3, #0
 8001436:	d011      	beq.n	800145c <SD_SETUP+0x184>
    #ifdef DEBUG_MODE
      printf("[%8lu] [ERR] SD open failed: %d\n", HAL_GetTick(), ret);
 8001438:	f000 fcea 	bl	8001e10 <HAL_GetTick>
 800143c:	4603      	mov	r3, r0
 800143e:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8001442:	f102 0204 	add.w	r2, r2, #4
 8001446:	6812      	ldr	r2, [r2, #0]
 8001448:	4619      	mov	r1, r3
 800144a:	4810      	ldr	r0, [pc, #64]	; (800148c <SD_SETUP+0x1b4>)
 800144c:	f00b fce6 	bl	800ce1c <iprintf>
    #endif
    return ret;
 8001450:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8001454:	f103 0304 	add.w	r3, r3, #4
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	e007      	b.n	800146c <SD_SETUP+0x194>
  }

  HAL_TIM_Base_Start_IT(&htim1);
 800145c:	480c      	ldr	r0, [pc, #48]	; (8001490 <SD_SETUP+0x1b8>)
 800145e:	f006 f9fb 	bl	8007858 <HAL_TIM_Base_Start_IT>

  return ret;
 8001462:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8001466:	f103 0304 	add.w	r3, r3, #4
 800146a:	681b      	ldr	r3, [r3, #0]
}
 800146c:	4618      	mov	r0, r3
 800146e:	f507 5782 	add.w	r7, r7, #4160	; 0x1040
 8001472:	370c      	adds	r7, #12
 8001474:	46bd      	mov	sp, r7
 8001476:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001478:	0800e1e4 	.word	0x0800e1e4
 800147c:	0800e1e8 	.word	0x0800e1e8
 8001480:	0800e20c 	.word	0x0800e20c
 8001484:	200012b8 	.word	0x200012b8
 8001488:	20000238 	.word	0x20000238
 800148c:	0800e23c 	.word	0x0800e23c
 8001490:	20001420 	.word	0x20001420

08001494 <SD_WRITE>:

int SD_WRITE() {
 8001494:	b580      	push	{r7, lr}
 8001496:	b082      	sub	sp, #8
 8001498:	af00      	add	r7, sp, #0
  uint32_t written_count;
  int ret = f_write(&logfile, &syslog, 16 /* sizeof(LOG) */, (void *)&written_count);
 800149a:	463b      	mov	r3, r7
 800149c:	2210      	movs	r2, #16
 800149e:	490b      	ldr	r1, [pc, #44]	; (80014cc <SD_WRITE+0x38>)
 80014a0:	480b      	ldr	r0, [pc, #44]	; (80014d0 <SD_WRITE+0x3c>)
 80014a2:	f00b f955 	bl	800c750 <f_write>
 80014a6:	4603      	mov	r3, r0
 80014a8:	607b      	str	r3, [r7, #4]
  if (ret != FR_OK) {
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d007      	beq.n	80014c0 <SD_WRITE+0x2c>
    #ifdef DEBUG_MODE
      printf("[%8lu] [ERR] SD write failed: %d\n", HAL_GetTick(), ret);
 80014b0:	f000 fcae 	bl	8001e10 <HAL_GetTick>
 80014b4:	4603      	mov	r3, r0
 80014b6:	687a      	ldr	r2, [r7, #4]
 80014b8:	4619      	mov	r1, r3
 80014ba:	4806      	ldr	r0, [pc, #24]	; (80014d4 <SD_WRITE+0x40>)
 80014bc:	f00b fcae 	bl	800ce1c <iprintf>
    #endif
  }

  return ret;
 80014c0:	687b      	ldr	r3, [r7, #4]
}
 80014c2:	4618      	mov	r0, r3
 80014c4:	3708      	adds	r7, #8
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	20001268 	.word	0x20001268
 80014d0:	20000238 	.word	0x20000238
 80014d4:	0800e260 	.word	0x0800e260

080014d8 <SD_SYNC>:

int SD_SYNC() {
 80014d8:	b580      	push	{r7, lr}
 80014da:	b082      	sub	sp, #8
 80014dc:	af00      	add	r7, sp, #0
  int ret = f_sync(&logfile);
 80014de:	480a      	ldr	r0, [pc, #40]	; (8001508 <SD_SYNC+0x30>)
 80014e0:	f00b faca 	bl	800ca78 <f_sync>
 80014e4:	4603      	mov	r3, r0
 80014e6:	607b      	str	r3, [r7, #4]
  if (ret != FR_OK) {
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d007      	beq.n	80014fe <SD_SYNC+0x26>
    #ifdef DEBUG_MODE
      printf("[%8lu] [ERR] SD sync failed: %d\n", HAL_GetTick(), ret);
 80014ee:	f000 fc8f 	bl	8001e10 <HAL_GetTick>
 80014f2:	4603      	mov	r3, r0
 80014f4:	687a      	ldr	r2, [r7, #4]
 80014f6:	4619      	mov	r1, r3
 80014f8:	4804      	ldr	r0, [pc, #16]	; (800150c <SD_SYNC+0x34>)
 80014fa:	f00b fc8f 	bl	800ce1c <iprintf>
    #endif
  }

  return ret;
 80014fe:	687b      	ldr	r3, [r7, #4]
}
 8001500:	4618      	mov	r0, r3
 8001502:	3708      	adds	r7, #8
 8001504:	46bd      	mov	sp, r7
 8001506:	bd80      	pop	{r7, pc}
 8001508:	20000238 	.word	0x20000238
 800150c:	0800e284 	.word	0x0800e284

08001510 <MX_SDIO_SD_Init>:
DMA_HandleTypeDef hdma_sdio_tx;

/* SDIO init function */

void MX_SDIO_SD_Init(void)
{
 8001510:	b480      	push	{r7}
 8001512:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8001514:	4b0d      	ldr	r3, [pc, #52]	; (800154c <MX_SDIO_SD_Init+0x3c>)
 8001516:	4a0e      	ldr	r2, [pc, #56]	; (8001550 <MX_SDIO_SD_Init+0x40>)
 8001518:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 800151a:	4b0c      	ldr	r3, [pc, #48]	; (800154c <MX_SDIO_SD_Init+0x3c>)
 800151c:	2200      	movs	r2, #0
 800151e:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8001520:	4b0a      	ldr	r3, [pc, #40]	; (800154c <MX_SDIO_SD_Init+0x3c>)
 8001522:	2200      	movs	r2, #0
 8001524:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8001526:	4b09      	ldr	r3, [pc, #36]	; (800154c <MX_SDIO_SD_Init+0x3c>)
 8001528:	2200      	movs	r2, #0
 800152a:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 800152c:	4b07      	ldr	r3, [pc, #28]	; (800154c <MX_SDIO_SD_Init+0x3c>)
 800152e:	2200      	movs	r2, #0
 8001530:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_ENABLE;
 8001532:	4b06      	ldr	r3, [pc, #24]	; (800154c <MX_SDIO_SD_Init+0x3c>)
 8001534:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001538:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 12;
 800153a:	4b04      	ldr	r3, [pc, #16]	; (800154c <MX_SDIO_SD_Init+0x3c>)
 800153c:	220c      	movs	r2, #12
 800153e:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8001540:	bf00      	nop
 8001542:	46bd      	mov	sp, r7
 8001544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001548:	4770      	bx	lr
 800154a:	bf00      	nop
 800154c:	200012d8 	.word	0x200012d8
 8001550:	40012c00 	.word	0x40012c00

08001554 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b08a      	sub	sp, #40	; 0x28
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800155c:	f107 0314 	add.w	r3, r7, #20
 8001560:	2200      	movs	r2, #0
 8001562:	601a      	str	r2, [r3, #0]
 8001564:	605a      	str	r2, [r3, #4]
 8001566:	609a      	str	r2, [r3, #8]
 8001568:	60da      	str	r2, [r3, #12]
 800156a:	611a      	str	r2, [r3, #16]
  if(sdHandle->Instance==SDIO)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	4a70      	ldr	r2, [pc, #448]	; (8001734 <HAL_SD_MspInit+0x1e0>)
 8001572:	4293      	cmp	r3, r2
 8001574:	f040 80da 	bne.w	800172c <HAL_SD_MspInit+0x1d8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* SDIO clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8001578:	2300      	movs	r3, #0
 800157a:	613b      	str	r3, [r7, #16]
 800157c:	4b6e      	ldr	r3, [pc, #440]	; (8001738 <HAL_SD_MspInit+0x1e4>)
 800157e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001580:	4a6d      	ldr	r2, [pc, #436]	; (8001738 <HAL_SD_MspInit+0x1e4>)
 8001582:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001586:	6453      	str	r3, [r2, #68]	; 0x44
 8001588:	4b6b      	ldr	r3, [pc, #428]	; (8001738 <HAL_SD_MspInit+0x1e4>)
 800158a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800158c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001590:	613b      	str	r3, [r7, #16]
 8001592:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001594:	2300      	movs	r3, #0
 8001596:	60fb      	str	r3, [r7, #12]
 8001598:	4b67      	ldr	r3, [pc, #412]	; (8001738 <HAL_SD_MspInit+0x1e4>)
 800159a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800159c:	4a66      	ldr	r2, [pc, #408]	; (8001738 <HAL_SD_MspInit+0x1e4>)
 800159e:	f043 0304 	orr.w	r3, r3, #4
 80015a2:	6313      	str	r3, [r2, #48]	; 0x30
 80015a4:	4b64      	ldr	r3, [pc, #400]	; (8001738 <HAL_SD_MspInit+0x1e4>)
 80015a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a8:	f003 0304 	and.w	r3, r3, #4
 80015ac:	60fb      	str	r3, [r7, #12]
 80015ae:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80015b0:	2300      	movs	r3, #0
 80015b2:	60bb      	str	r3, [r7, #8]
 80015b4:	4b60      	ldr	r3, [pc, #384]	; (8001738 <HAL_SD_MspInit+0x1e4>)
 80015b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b8:	4a5f      	ldr	r2, [pc, #380]	; (8001738 <HAL_SD_MspInit+0x1e4>)
 80015ba:	f043 0308 	orr.w	r3, r3, #8
 80015be:	6313      	str	r3, [r2, #48]	; 0x30
 80015c0:	4b5d      	ldr	r3, [pc, #372]	; (8001738 <HAL_SD_MspInit+0x1e4>)
 80015c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015c4:	f003 0308 	and.w	r3, r3, #8
 80015c8:	60bb      	str	r3, [r7, #8]
 80015ca:	68bb      	ldr	r3, [r7, #8]
    /**SDIO GPIO Configuration
    PC8     ------> SDIO_D0
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80015cc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80015d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015d2:	2302      	movs	r3, #2
 80015d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015d6:	2301      	movs	r3, #1
 80015d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015da:	2303      	movs	r3, #3
 80015dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80015de:	230c      	movs	r3, #12
 80015e0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015e2:	f107 0314 	add.w	r3, r7, #20
 80015e6:	4619      	mov	r1, r3
 80015e8:	4854      	ldr	r0, [pc, #336]	; (800173c <HAL_SD_MspInit+0x1e8>)
 80015ea:	f002 f83d 	bl	8003668 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80015ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015f4:	2302      	movs	r3, #2
 80015f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f8:	2300      	movs	r3, #0
 80015fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015fc:	2303      	movs	r3, #3
 80015fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001600:	230c      	movs	r3, #12
 8001602:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001604:	f107 0314 	add.w	r3, r7, #20
 8001608:	4619      	mov	r1, r3
 800160a:	484c      	ldr	r0, [pc, #304]	; (800173c <HAL_SD_MspInit+0x1e8>)
 800160c:	f002 f82c 	bl	8003668 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001610:	2304      	movs	r3, #4
 8001612:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001614:	2302      	movs	r3, #2
 8001616:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001618:	2301      	movs	r3, #1
 800161a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800161c:	2303      	movs	r3, #3
 800161e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001620:	230c      	movs	r3, #12
 8001622:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001624:	f107 0314 	add.w	r3, r7, #20
 8001628:	4619      	mov	r1, r3
 800162a:	4845      	ldr	r0, [pc, #276]	; (8001740 <HAL_SD_MspInit+0x1ec>)
 800162c:	f002 f81c 	bl	8003668 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 8001630:	4b44      	ldr	r3, [pc, #272]	; (8001744 <HAL_SD_MspInit+0x1f0>)
 8001632:	4a45      	ldr	r2, [pc, #276]	; (8001748 <HAL_SD_MspInit+0x1f4>)
 8001634:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 8001636:	4b43      	ldr	r3, [pc, #268]	; (8001744 <HAL_SD_MspInit+0x1f0>)
 8001638:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800163c:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800163e:	4b41      	ldr	r3, [pc, #260]	; (8001744 <HAL_SD_MspInit+0x1f0>)
 8001640:	2200      	movs	r2, #0
 8001642:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001644:	4b3f      	ldr	r3, [pc, #252]	; (8001744 <HAL_SD_MspInit+0x1f0>)
 8001646:	2200      	movs	r2, #0
 8001648:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 800164a:	4b3e      	ldr	r3, [pc, #248]	; (8001744 <HAL_SD_MspInit+0x1f0>)
 800164c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001650:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001652:	4b3c      	ldr	r3, [pc, #240]	; (8001744 <HAL_SD_MspInit+0x1f0>)
 8001654:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001658:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800165a:	4b3a      	ldr	r3, [pc, #232]	; (8001744 <HAL_SD_MspInit+0x1f0>)
 800165c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001660:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 8001662:	4b38      	ldr	r3, [pc, #224]	; (8001744 <HAL_SD_MspInit+0x1f0>)
 8001664:	2220      	movs	r2, #32
 8001666:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001668:	4b36      	ldr	r3, [pc, #216]	; (8001744 <HAL_SD_MspInit+0x1f0>)
 800166a:	2200      	movs	r2, #0
 800166c:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800166e:	4b35      	ldr	r3, [pc, #212]	; (8001744 <HAL_SD_MspInit+0x1f0>)
 8001670:	2204      	movs	r2, #4
 8001672:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001674:	4b33      	ldr	r3, [pc, #204]	; (8001744 <HAL_SD_MspInit+0x1f0>)
 8001676:	2203      	movs	r2, #3
 8001678:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 800167a:	4b32      	ldr	r3, [pc, #200]	; (8001744 <HAL_SD_MspInit+0x1f0>)
 800167c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001680:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8001682:	4b30      	ldr	r3, [pc, #192]	; (8001744 <HAL_SD_MspInit+0x1f0>)
 8001684:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001688:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 800168a:	482e      	ldr	r0, [pc, #184]	; (8001744 <HAL_SD_MspInit+0x1f0>)
 800168c:	f001 fbd0 	bl	8002e30 <HAL_DMA_Init>
 8001690:	4603      	mov	r3, r0
 8001692:	2b00      	cmp	r3, #0
 8001694:	d001      	beq.n	800169a <HAL_SD_MspInit+0x146>
    {
      Error_Handler();
 8001696:	f7ff fca1 	bl	8000fdc <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmarx,hdma_sdio_rx);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	4a29      	ldr	r2, [pc, #164]	; (8001744 <HAL_SD_MspInit+0x1f0>)
 800169e:	641a      	str	r2, [r3, #64]	; 0x40
 80016a0:	4a28      	ldr	r2, [pc, #160]	; (8001744 <HAL_SD_MspInit+0x1f0>)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 80016a6:	4b29      	ldr	r3, [pc, #164]	; (800174c <HAL_SD_MspInit+0x1f8>)
 80016a8:	4a29      	ldr	r2, [pc, #164]	; (8001750 <HAL_SD_MspInit+0x1fc>)
 80016aa:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 80016ac:	4b27      	ldr	r3, [pc, #156]	; (800174c <HAL_SD_MspInit+0x1f8>)
 80016ae:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80016b2:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80016b4:	4b25      	ldr	r3, [pc, #148]	; (800174c <HAL_SD_MspInit+0x1f8>)
 80016b6:	2240      	movs	r2, #64	; 0x40
 80016b8:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80016ba:	4b24      	ldr	r3, [pc, #144]	; (800174c <HAL_SD_MspInit+0x1f8>)
 80016bc:	2200      	movs	r2, #0
 80016be:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 80016c0:	4b22      	ldr	r3, [pc, #136]	; (800174c <HAL_SD_MspInit+0x1f8>)
 80016c2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80016c6:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80016c8:	4b20      	ldr	r3, [pc, #128]	; (800174c <HAL_SD_MspInit+0x1f8>)
 80016ca:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80016ce:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80016d0:	4b1e      	ldr	r3, [pc, #120]	; (800174c <HAL_SD_MspInit+0x1f8>)
 80016d2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80016d6:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 80016d8:	4b1c      	ldr	r3, [pc, #112]	; (800174c <HAL_SD_MspInit+0x1f8>)
 80016da:	2220      	movs	r2, #32
 80016dc:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 80016de:	4b1b      	ldr	r3, [pc, #108]	; (800174c <HAL_SD_MspInit+0x1f8>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80016e4:	4b19      	ldr	r3, [pc, #100]	; (800174c <HAL_SD_MspInit+0x1f8>)
 80016e6:	2204      	movs	r2, #4
 80016e8:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80016ea:	4b18      	ldr	r3, [pc, #96]	; (800174c <HAL_SD_MspInit+0x1f8>)
 80016ec:	2203      	movs	r2, #3
 80016ee:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 80016f0:	4b16      	ldr	r3, [pc, #88]	; (800174c <HAL_SD_MspInit+0x1f8>)
 80016f2:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80016f6:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 80016f8:	4b14      	ldr	r3, [pc, #80]	; (800174c <HAL_SD_MspInit+0x1f8>)
 80016fa:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80016fe:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 8001700:	4812      	ldr	r0, [pc, #72]	; (800174c <HAL_SD_MspInit+0x1f8>)
 8001702:	f001 fb95 	bl	8002e30 <HAL_DMA_Init>
 8001706:	4603      	mov	r3, r0
 8001708:	2b00      	cmp	r3, #0
 800170a:	d001      	beq.n	8001710 <HAL_SD_MspInit+0x1bc>
    {
      Error_Handler();
 800170c:	f7ff fc66 	bl	8000fdc <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmatx,hdma_sdio_tx);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	4a0e      	ldr	r2, [pc, #56]	; (800174c <HAL_SD_MspInit+0x1f8>)
 8001714:	63da      	str	r2, [r3, #60]	; 0x3c
 8001716:	4a0d      	ldr	r2, [pc, #52]	; (800174c <HAL_SD_MspInit+0x1f8>)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 800171c:	2200      	movs	r2, #0
 800171e:	2100      	movs	r1, #0
 8001720:	2031      	movs	r0, #49	; 0x31
 8001722:	f001 fb4e 	bl	8002dc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8001726:	2031      	movs	r0, #49	; 0x31
 8001728:	f001 fb67 	bl	8002dfa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }
}
 800172c:	bf00      	nop
 800172e:	3728      	adds	r7, #40	; 0x28
 8001730:	46bd      	mov	sp, r7
 8001732:	bd80      	pop	{r7, pc}
 8001734:	40012c00 	.word	0x40012c00
 8001738:	40023800 	.word	0x40023800
 800173c:	40020800 	.word	0x40020800
 8001740:	40020c00 	.word	0x40020c00
 8001744:	2000135c 	.word	0x2000135c
 8001748:	40026458 	.word	0x40026458
 800174c:	200013bc 	.word	0x200013bc
 8001750:	400264a0 	.word	0x400264a0

08001754 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001754:	b480      	push	{r7}
 8001756:	b083      	sub	sp, #12
 8001758:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800175a:	2300      	movs	r3, #0
 800175c:	607b      	str	r3, [r7, #4]
 800175e:	4b10      	ldr	r3, [pc, #64]	; (80017a0 <HAL_MspInit+0x4c>)
 8001760:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001762:	4a0f      	ldr	r2, [pc, #60]	; (80017a0 <HAL_MspInit+0x4c>)
 8001764:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001768:	6453      	str	r3, [r2, #68]	; 0x44
 800176a:	4b0d      	ldr	r3, [pc, #52]	; (80017a0 <HAL_MspInit+0x4c>)
 800176c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800176e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001772:	607b      	str	r3, [r7, #4]
 8001774:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001776:	2300      	movs	r3, #0
 8001778:	603b      	str	r3, [r7, #0]
 800177a:	4b09      	ldr	r3, [pc, #36]	; (80017a0 <HAL_MspInit+0x4c>)
 800177c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800177e:	4a08      	ldr	r2, [pc, #32]	; (80017a0 <HAL_MspInit+0x4c>)
 8001780:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001784:	6413      	str	r3, [r2, #64]	; 0x40
 8001786:	4b06      	ldr	r3, [pc, #24]	; (80017a0 <HAL_MspInit+0x4c>)
 8001788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800178a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800178e:	603b      	str	r3, [r7, #0]
 8001790:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001792:	bf00      	nop
 8001794:	370c      	adds	r7, #12
 8001796:	46bd      	mov	sp, r7
 8001798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179c:	4770      	bx	lr
 800179e:	bf00      	nop
 80017a0:	40023800 	.word	0x40023800

080017a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 80017a8:	f004 fada 	bl	8005d60 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80017ac:	e7fe      	b.n	80017ac <NMI_Handler+0x8>

080017ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017ae:	b480      	push	{r7}
 80017b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017b2:	e7fe      	b.n	80017b2 <HardFault_Handler+0x4>

080017b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017b4:	b480      	push	{r7}
 80017b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017b8:	e7fe      	b.n	80017b8 <MemManage_Handler+0x4>

080017ba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017ba:	b480      	push	{r7}
 80017bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017be:	e7fe      	b.n	80017be <BusFault_Handler+0x4>

080017c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017c0:	b480      	push	{r7}
 80017c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017c4:	e7fe      	b.n	80017c4 <UsageFault_Handler+0x4>

080017c6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017c6:	b480      	push	{r7}
 80017c8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017ca:	bf00      	nop
 80017cc:	46bd      	mov	sp, r7
 80017ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d2:	4770      	bx	lr

080017d4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017d4:	b480      	push	{r7}
 80017d6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017d8:	bf00      	nop
 80017da:	46bd      	mov	sp, r7
 80017dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e0:	4770      	bx	lr

080017e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017e2:	b480      	push	{r7}
 80017e4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017e6:	bf00      	nop
 80017e8:	46bd      	mov	sp, r7
 80017ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ee:	4770      	bx	lr

080017f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017f4:	f000 faf8 	bl	8001de8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017f8:	bf00      	nop
 80017fa:	bd80      	pop	{r7, pc}

080017fc <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001800:	4805      	ldr	r0, [pc, #20]	; (8001818 <ADC_IRQHandler+0x1c>)
 8001802:	f000 fb78 	bl	8001ef6 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8001806:	4805      	ldr	r0, [pc, #20]	; (800181c <ADC_IRQHandler+0x20>)
 8001808:	f000 fb75 	bl	8001ef6 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc3);
 800180c:	4804      	ldr	r0, [pc, #16]	; (8001820 <ADC_IRQHandler+0x24>)
 800180e:	f000 fb72 	bl	8001ef6 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001812:	bf00      	nop
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	2000008c 	.word	0x2000008c
 800181c:	200000d4 	.word	0x200000d4
 8001820:	2000011c 	.word	0x2000011c

08001824 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001828:	4802      	ldr	r0, [pc, #8]	; (8001834 <CAN1_TX_IRQHandler+0x10>)
 800182a:	f000 ffb6 	bl	800279a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 800182e:	bf00      	nop
 8001830:	bd80      	pop	{r7, pc}
 8001832:	bf00      	nop
 8001834:	20000164 	.word	0x20000164

08001838 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 800183c:	4802      	ldr	r0, [pc, #8]	; (8001848 <CAN1_RX0_IRQHandler+0x10>)
 800183e:	f000 ffac 	bl	800279a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8001842:	bf00      	nop
 8001844:	bd80      	pop	{r7, pc}
 8001846:	bf00      	nop
 8001848:	20000164 	.word	0x20000164

0800184c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001850:	4802      	ldr	r0, [pc, #8]	; (800185c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001852:	f006 f871 	bl	8007938 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001856:	bf00      	nop
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	20001420 	.word	0x20001420

08001860 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001864:	4802      	ldr	r0, [pc, #8]	; (8001870 <I2C1_EV_IRQHandler+0x10>)
 8001866:	f002 fa11 	bl	8003c8c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800186a:	bf00      	nop
 800186c:	bd80      	pop	{r7, pc}
 800186e:	bf00      	nop
 8001870:	2000018c 	.word	0x2000018c

08001874 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8001878:	4802      	ldr	r0, [pc, #8]	; (8001884 <I2C2_EV_IRQHandler+0x10>)
 800187a:	f002 fa07 	bl	8003c8c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 800187e:	bf00      	nop
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	200001e0 	.word	0x200001e0

08001888 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800188c:	4802      	ldr	r0, [pc, #8]	; (8001898 <USART1_IRQHandler+0x10>)
 800188e:	f006 fcf5 	bl	800827c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001892:	bf00      	nop
 8001894:	bd80      	pop	{r7, pc}
 8001896:	bf00      	nop
 8001898:	20001468 	.word	0x20001468

0800189c <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 80018a0:	4802      	ldr	r0, [pc, #8]	; (80018ac <SDIO_IRQHandler+0x10>)
 80018a2:	f005 f8d1 	bl	8006a48 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 80018a6:	bf00      	nop
 80018a8:	bd80      	pop	{r7, pc}
 80018aa:	bf00      	nop
 80018ac:	200012d8 	.word	0x200012d8

080018b0 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 80018b4:	4802      	ldr	r0, [pc, #8]	; (80018c0 <DMA2_Stream3_IRQHandler+0x10>)
 80018b6:	f001 fc53 	bl	8003160 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 80018ba:	bf00      	nop
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	bf00      	nop
 80018c0:	2000135c 	.word	0x2000135c

080018c4 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 80018c8:	4802      	ldr	r0, [pc, #8]	; (80018d4 <DMA2_Stream6_IRQHandler+0x10>)
 80018ca:	f001 fc49 	bl	8003160 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 80018ce:	bf00      	nop
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	bf00      	nop
 80018d4:	200013bc 	.word	0x200013bc

080018d8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b086      	sub	sp, #24
 80018dc:	af00      	add	r7, sp, #0
 80018de:	60f8      	str	r0, [r7, #12]
 80018e0:	60b9      	str	r1, [r7, #8]
 80018e2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018e4:	2300      	movs	r3, #0
 80018e6:	617b      	str	r3, [r7, #20]
 80018e8:	e00a      	b.n	8001900 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80018ea:	f3af 8000 	nop.w
 80018ee:	4601      	mov	r1, r0
 80018f0:	68bb      	ldr	r3, [r7, #8]
 80018f2:	1c5a      	adds	r2, r3, #1
 80018f4:	60ba      	str	r2, [r7, #8]
 80018f6:	b2ca      	uxtb	r2, r1
 80018f8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018fa:	697b      	ldr	r3, [r7, #20]
 80018fc:	3301      	adds	r3, #1
 80018fe:	617b      	str	r3, [r7, #20]
 8001900:	697a      	ldr	r2, [r7, #20]
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	429a      	cmp	r2, r3
 8001906:	dbf0      	blt.n	80018ea <_read+0x12>
  }

  return len;
 8001908:	687b      	ldr	r3, [r7, #4]
}
 800190a:	4618      	mov	r0, r3
 800190c:	3718      	adds	r7, #24
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}

08001912 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001912:	b480      	push	{r7}
 8001914:	b083      	sub	sp, #12
 8001916:	af00      	add	r7, sp, #0
 8001918:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800191a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800191e:	4618      	mov	r0, r3
 8001920:	370c      	adds	r7, #12
 8001922:	46bd      	mov	sp, r7
 8001924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001928:	4770      	bx	lr

0800192a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800192a:	b480      	push	{r7}
 800192c:	b083      	sub	sp, #12
 800192e:	af00      	add	r7, sp, #0
 8001930:	6078      	str	r0, [r7, #4]
 8001932:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800193a:	605a      	str	r2, [r3, #4]
  return 0;
 800193c:	2300      	movs	r3, #0
}
 800193e:	4618      	mov	r0, r3
 8001940:	370c      	adds	r7, #12
 8001942:	46bd      	mov	sp, r7
 8001944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001948:	4770      	bx	lr

0800194a <_isatty>:

int _isatty(int file)
{
 800194a:	b480      	push	{r7}
 800194c:	b083      	sub	sp, #12
 800194e:	af00      	add	r7, sp, #0
 8001950:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001952:	2301      	movs	r3, #1
}
 8001954:	4618      	mov	r0, r3
 8001956:	370c      	adds	r7, #12
 8001958:	46bd      	mov	sp, r7
 800195a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195e:	4770      	bx	lr

08001960 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001960:	b480      	push	{r7}
 8001962:	b085      	sub	sp, #20
 8001964:	af00      	add	r7, sp, #0
 8001966:	60f8      	str	r0, [r7, #12]
 8001968:	60b9      	str	r1, [r7, #8]
 800196a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800196c:	2300      	movs	r3, #0
}
 800196e:	4618      	mov	r0, r3
 8001970:	3714      	adds	r7, #20
 8001972:	46bd      	mov	sp, r7
 8001974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001978:	4770      	bx	lr
	...

0800197c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b086      	sub	sp, #24
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001984:	4a14      	ldr	r2, [pc, #80]	; (80019d8 <_sbrk+0x5c>)
 8001986:	4b15      	ldr	r3, [pc, #84]	; (80019dc <_sbrk+0x60>)
 8001988:	1ad3      	subs	r3, r2, r3
 800198a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800198c:	697b      	ldr	r3, [r7, #20]
 800198e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001990:	4b13      	ldr	r3, [pc, #76]	; (80019e0 <_sbrk+0x64>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	2b00      	cmp	r3, #0
 8001996:	d102      	bne.n	800199e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001998:	4b11      	ldr	r3, [pc, #68]	; (80019e0 <_sbrk+0x64>)
 800199a:	4a12      	ldr	r2, [pc, #72]	; (80019e4 <_sbrk+0x68>)
 800199c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800199e:	4b10      	ldr	r3, [pc, #64]	; (80019e0 <_sbrk+0x64>)
 80019a0:	681a      	ldr	r2, [r3, #0]
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	4413      	add	r3, r2
 80019a6:	693a      	ldr	r2, [r7, #16]
 80019a8:	429a      	cmp	r2, r3
 80019aa:	d207      	bcs.n	80019bc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019ac:	f00b fa04 	bl	800cdb8 <__errno>
 80019b0:	4603      	mov	r3, r0
 80019b2:	220c      	movs	r2, #12
 80019b4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80019b6:	f04f 33ff 	mov.w	r3, #4294967295
 80019ba:	e009      	b.n	80019d0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019bc:	4b08      	ldr	r3, [pc, #32]	; (80019e0 <_sbrk+0x64>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019c2:	4b07      	ldr	r3, [pc, #28]	; (80019e0 <_sbrk+0x64>)
 80019c4:	681a      	ldr	r2, [r3, #0]
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	4413      	add	r3, r2
 80019ca:	4a05      	ldr	r2, [pc, #20]	; (80019e0 <_sbrk+0x64>)
 80019cc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80019ce:	68fb      	ldr	r3, [r7, #12]
}
 80019d0:	4618      	mov	r0, r3
 80019d2:	3718      	adds	r7, #24
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bd80      	pop	{r7, pc}
 80019d8:	20020000 	.word	0x20020000
 80019dc:	00000400 	.word	0x00000400
 80019e0:	2000141c 	.word	0x2000141c
 80019e4:	20001748 	.word	0x20001748

080019e8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80019e8:	b480      	push	{r7}
 80019ea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80019ec:	4b06      	ldr	r3, [pc, #24]	; (8001a08 <SystemInit+0x20>)
 80019ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019f2:	4a05      	ldr	r2, [pc, #20]	; (8001a08 <SystemInit+0x20>)
 80019f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80019f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019fc:	bf00      	nop
 80019fe:	46bd      	mov	sp, r7
 8001a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a04:	4770      	bx	lr
 8001a06:	bf00      	nop
 8001a08:	e000ed00 	.word	0xe000ed00

08001a0c <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "tim.h"

/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b082      	sub	sp, #8
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM1) {
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	4a08      	ldr	r2, [pc, #32]	; (8001a3c <HAL_TIM_PeriodElapsedCallback+0x30>)
 8001a1a:	4293      	cmp	r3, r2
 8001a1c:	d109      	bne.n	8001a32 <HAL_TIM_PeriodElapsedCallback+0x26>
    #ifdef DEBUG_MODE
      printf("[%8lu] [INF] TIMER IRQ\n", HAL_GetTick());
 8001a1e:	f000 f9f7 	bl	8001e10 <HAL_GetTick>
 8001a22:	4603      	mov	r3, r0
 8001a24:	4619      	mov	r1, r3
 8001a26:	4806      	ldr	r0, [pc, #24]	; (8001a40 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8001a28:	f00b f9f8 	bl	800ce1c <iprintf>
    #endif

    timer_flag[TIMER_SD] = true;
 8001a2c:	4b05      	ldr	r3, [pc, #20]	; (8001a44 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8001a2e:	2201      	movs	r2, #1
 8001a30:	601a      	str	r2, [r3, #0]
	}
}
 8001a32:	bf00      	nop
 8001a34:	3708      	adds	r7, #8
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	bf00      	nop
 8001a3c:	40010000 	.word	0x40010000
 8001a40:	0800e2a8 	.word	0x0800e2a8
 8001a44:	20001278 	.word	0x20001278

08001a48 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b086      	sub	sp, #24
 8001a4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a4e:	f107 0308 	add.w	r3, r7, #8
 8001a52:	2200      	movs	r2, #0
 8001a54:	601a      	str	r2, [r3, #0]
 8001a56:	605a      	str	r2, [r3, #4]
 8001a58:	609a      	str	r2, [r3, #8]
 8001a5a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a5c:	463b      	mov	r3, r7
 8001a5e:	2200      	movs	r2, #0
 8001a60:	601a      	str	r2, [r3, #0]
 8001a62:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001a64:	4b1f      	ldr	r3, [pc, #124]	; (8001ae4 <MX_TIM1_Init+0x9c>)
 8001a66:	4a20      	ldr	r2, [pc, #128]	; (8001ae8 <MX_TIM1_Init+0xa0>)
 8001a68:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 8400 - 1;
 8001a6a:	4b1e      	ldr	r3, [pc, #120]	; (8001ae4 <MX_TIM1_Init+0x9c>)
 8001a6c:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8001a70:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a72:	4b1c      	ldr	r3, [pc, #112]	; (8001ae4 <MX_TIM1_Init+0x9c>)
 8001a74:	2200      	movs	r2, #0
 8001a76:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 20000 - 1;
 8001a78:	4b1a      	ldr	r3, [pc, #104]	; (8001ae4 <MX_TIM1_Init+0x9c>)
 8001a7a:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8001a7e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a80:	4b18      	ldr	r3, [pc, #96]	; (8001ae4 <MX_TIM1_Init+0x9c>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001a86:	4b17      	ldr	r3, [pc, #92]	; (8001ae4 <MX_TIM1_Init+0x9c>)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a8c:	4b15      	ldr	r3, [pc, #84]	; (8001ae4 <MX_TIM1_Init+0x9c>)
 8001a8e:	2200      	movs	r2, #0
 8001a90:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001a92:	4814      	ldr	r0, [pc, #80]	; (8001ae4 <MX_TIM1_Init+0x9c>)
 8001a94:	f005 fe90 	bl	80077b8 <HAL_TIM_Base_Init>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d001      	beq.n	8001aa2 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8001a9e:	f7ff fa9d 	bl	8000fdc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001aa2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001aa6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001aa8:	f107 0308 	add.w	r3, r7, #8
 8001aac:	4619      	mov	r1, r3
 8001aae:	480d      	ldr	r0, [pc, #52]	; (8001ae4 <MX_TIM1_Init+0x9c>)
 8001ab0:	f006 f84a 	bl	8007b48 <HAL_TIM_ConfigClockSource>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d001      	beq.n	8001abe <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8001aba:	f7ff fa8f 	bl	8000fdc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001ac6:	463b      	mov	r3, r7
 8001ac8:	4619      	mov	r1, r3
 8001aca:	4806      	ldr	r0, [pc, #24]	; (8001ae4 <MX_TIM1_Init+0x9c>)
 8001acc:	f006 fa66 	bl	8007f9c <HAL_TIMEx_MasterConfigSynchronization>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d001      	beq.n	8001ada <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8001ad6:	f7ff fa81 	bl	8000fdc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001ada:	bf00      	nop
 8001adc:	3718      	adds	r7, #24
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	bf00      	nop
 8001ae4:	20001420 	.word	0x20001420
 8001ae8:	40010000 	.word	0x40010000

08001aec <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b084      	sub	sp, #16
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4a0e      	ldr	r2, [pc, #56]	; (8001b34 <HAL_TIM_Base_MspInit+0x48>)
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d115      	bne.n	8001b2a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001afe:	2300      	movs	r3, #0
 8001b00:	60fb      	str	r3, [r7, #12]
 8001b02:	4b0d      	ldr	r3, [pc, #52]	; (8001b38 <HAL_TIM_Base_MspInit+0x4c>)
 8001b04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b06:	4a0c      	ldr	r2, [pc, #48]	; (8001b38 <HAL_TIM_Base_MspInit+0x4c>)
 8001b08:	f043 0301 	orr.w	r3, r3, #1
 8001b0c:	6453      	str	r3, [r2, #68]	; 0x44
 8001b0e:	4b0a      	ldr	r3, [pc, #40]	; (8001b38 <HAL_TIM_Base_MspInit+0x4c>)
 8001b10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b12:	f003 0301 	and.w	r3, r3, #1
 8001b16:	60fb      	str	r3, [r7, #12]
 8001b18:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	2100      	movs	r1, #0
 8001b1e:	2019      	movs	r0, #25
 8001b20:	f001 f94f 	bl	8002dc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001b24:	2019      	movs	r0, #25
 8001b26:	f001 f968 	bl	8002dfa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001b2a:	bf00      	nop
 8001b2c:	3710      	adds	r7, #16
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}
 8001b32:	bf00      	nop
 8001b34:	40010000 	.word	0x40010000
 8001b38:	40023800 	.word	0x40023800

08001b3c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001b40:	4b11      	ldr	r3, [pc, #68]	; (8001b88 <MX_USART1_UART_Init+0x4c>)
 8001b42:	4a12      	ldr	r2, [pc, #72]	; (8001b8c <MX_USART1_UART_Init+0x50>)
 8001b44:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001b46:	4b10      	ldr	r3, [pc, #64]	; (8001b88 <MX_USART1_UART_Init+0x4c>)
 8001b48:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001b4c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001b4e:	4b0e      	ldr	r3, [pc, #56]	; (8001b88 <MX_USART1_UART_Init+0x4c>)
 8001b50:	2200      	movs	r2, #0
 8001b52:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001b54:	4b0c      	ldr	r3, [pc, #48]	; (8001b88 <MX_USART1_UART_Init+0x4c>)
 8001b56:	2200      	movs	r2, #0
 8001b58:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001b5a:	4b0b      	ldr	r3, [pc, #44]	; (8001b88 <MX_USART1_UART_Init+0x4c>)
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001b60:	4b09      	ldr	r3, [pc, #36]	; (8001b88 <MX_USART1_UART_Init+0x4c>)
 8001b62:	220c      	movs	r2, #12
 8001b64:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b66:	4b08      	ldr	r3, [pc, #32]	; (8001b88 <MX_USART1_UART_Init+0x4c>)
 8001b68:	2200      	movs	r2, #0
 8001b6a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b6c:	4b06      	ldr	r3, [pc, #24]	; (8001b88 <MX_USART1_UART_Init+0x4c>)
 8001b6e:	2200      	movs	r2, #0
 8001b70:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001b72:	4805      	ldr	r0, [pc, #20]	; (8001b88 <MX_USART1_UART_Init+0x4c>)
 8001b74:	f006 faa2 	bl	80080bc <HAL_UART_Init>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d001      	beq.n	8001b82 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001b7e:	f7ff fa2d 	bl	8000fdc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001b82:	bf00      	nop
 8001b84:	bd80      	pop	{r7, pc}
 8001b86:	bf00      	nop
 8001b88:	20001468 	.word	0x20001468
 8001b8c:	40011000 	.word	0x40011000

08001b90 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001b94:	4b11      	ldr	r3, [pc, #68]	; (8001bdc <MX_USART2_UART_Init+0x4c>)
 8001b96:	4a12      	ldr	r2, [pc, #72]	; (8001be0 <MX_USART2_UART_Init+0x50>)
 8001b98:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001b9a:	4b10      	ldr	r3, [pc, #64]	; (8001bdc <MX_USART2_UART_Init+0x4c>)
 8001b9c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001ba0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001ba2:	4b0e      	ldr	r3, [pc, #56]	; (8001bdc <MX_USART2_UART_Init+0x4c>)
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001ba8:	4b0c      	ldr	r3, [pc, #48]	; (8001bdc <MX_USART2_UART_Init+0x4c>)
 8001baa:	2200      	movs	r2, #0
 8001bac:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001bae:	4b0b      	ldr	r3, [pc, #44]	; (8001bdc <MX_USART2_UART_Init+0x4c>)
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001bb4:	4b09      	ldr	r3, [pc, #36]	; (8001bdc <MX_USART2_UART_Init+0x4c>)
 8001bb6:	220c      	movs	r2, #12
 8001bb8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001bba:	4b08      	ldr	r3, [pc, #32]	; (8001bdc <MX_USART2_UART_Init+0x4c>)
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001bc0:	4b06      	ldr	r3, [pc, #24]	; (8001bdc <MX_USART2_UART_Init+0x4c>)
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001bc6:	4805      	ldr	r0, [pc, #20]	; (8001bdc <MX_USART2_UART_Init+0x4c>)
 8001bc8:	f006 fa78 	bl	80080bc <HAL_UART_Init>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d001      	beq.n	8001bd6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001bd2:	f7ff fa03 	bl	8000fdc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001bd6:	bf00      	nop
 8001bd8:	bd80      	pop	{r7, pc}
 8001bda:	bf00      	nop
 8001bdc:	200014ac 	.word	0x200014ac
 8001be0:	40004400 	.word	0x40004400

08001be4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b08c      	sub	sp, #48	; 0x30
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bec:	f107 031c 	add.w	r3, r7, #28
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	601a      	str	r2, [r3, #0]
 8001bf4:	605a      	str	r2, [r3, #4]
 8001bf6:	609a      	str	r2, [r3, #8]
 8001bf8:	60da      	str	r2, [r3, #12]
 8001bfa:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4a36      	ldr	r2, [pc, #216]	; (8001cdc <HAL_UART_MspInit+0xf8>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d135      	bne.n	8001c72 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001c06:	2300      	movs	r3, #0
 8001c08:	61bb      	str	r3, [r7, #24]
 8001c0a:	4b35      	ldr	r3, [pc, #212]	; (8001ce0 <HAL_UART_MspInit+0xfc>)
 8001c0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c0e:	4a34      	ldr	r2, [pc, #208]	; (8001ce0 <HAL_UART_MspInit+0xfc>)
 8001c10:	f043 0310 	orr.w	r3, r3, #16
 8001c14:	6453      	str	r3, [r2, #68]	; 0x44
 8001c16:	4b32      	ldr	r3, [pc, #200]	; (8001ce0 <HAL_UART_MspInit+0xfc>)
 8001c18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c1a:	f003 0310 	and.w	r3, r3, #16
 8001c1e:	61bb      	str	r3, [r7, #24]
 8001c20:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c22:	2300      	movs	r3, #0
 8001c24:	617b      	str	r3, [r7, #20]
 8001c26:	4b2e      	ldr	r3, [pc, #184]	; (8001ce0 <HAL_UART_MspInit+0xfc>)
 8001c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c2a:	4a2d      	ldr	r2, [pc, #180]	; (8001ce0 <HAL_UART_MspInit+0xfc>)
 8001c2c:	f043 0301 	orr.w	r3, r3, #1
 8001c30:	6313      	str	r3, [r2, #48]	; 0x30
 8001c32:	4b2b      	ldr	r3, [pc, #172]	; (8001ce0 <HAL_UART_MspInit+0xfc>)
 8001c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c36:	f003 0301 	and.w	r3, r3, #1
 8001c3a:	617b      	str	r3, [r7, #20]
 8001c3c:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001c3e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001c42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c44:	2302      	movs	r3, #2
 8001c46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c4c:	2303      	movs	r3, #3
 8001c4e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001c50:	2307      	movs	r3, #7
 8001c52:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c54:	f107 031c 	add.w	r3, r7, #28
 8001c58:	4619      	mov	r1, r3
 8001c5a:	4822      	ldr	r0, [pc, #136]	; (8001ce4 <HAL_UART_MspInit+0x100>)
 8001c5c:	f001 fd04 	bl	8003668 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001c60:	2200      	movs	r2, #0
 8001c62:	2100      	movs	r1, #0
 8001c64:	2025      	movs	r0, #37	; 0x25
 8001c66:	f001 f8ac 	bl	8002dc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001c6a:	2025      	movs	r0, #37	; 0x25
 8001c6c:	f001 f8c5 	bl	8002dfa <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001c70:	e030      	b.n	8001cd4 <HAL_UART_MspInit+0xf0>
  else if(uartHandle->Instance==USART2)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	4a1c      	ldr	r2, [pc, #112]	; (8001ce8 <HAL_UART_MspInit+0x104>)
 8001c78:	4293      	cmp	r3, r2
 8001c7a:	d12b      	bne.n	8001cd4 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	613b      	str	r3, [r7, #16]
 8001c80:	4b17      	ldr	r3, [pc, #92]	; (8001ce0 <HAL_UART_MspInit+0xfc>)
 8001c82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c84:	4a16      	ldr	r2, [pc, #88]	; (8001ce0 <HAL_UART_MspInit+0xfc>)
 8001c86:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c8a:	6413      	str	r3, [r2, #64]	; 0x40
 8001c8c:	4b14      	ldr	r3, [pc, #80]	; (8001ce0 <HAL_UART_MspInit+0xfc>)
 8001c8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c94:	613b      	str	r3, [r7, #16]
 8001c96:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c98:	2300      	movs	r3, #0
 8001c9a:	60fb      	str	r3, [r7, #12]
 8001c9c:	4b10      	ldr	r3, [pc, #64]	; (8001ce0 <HAL_UART_MspInit+0xfc>)
 8001c9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ca0:	4a0f      	ldr	r2, [pc, #60]	; (8001ce0 <HAL_UART_MspInit+0xfc>)
 8001ca2:	f043 0308 	orr.w	r3, r3, #8
 8001ca6:	6313      	str	r3, [r2, #48]	; 0x30
 8001ca8:	4b0d      	ldr	r3, [pc, #52]	; (8001ce0 <HAL_UART_MspInit+0xfc>)
 8001caa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cac:	f003 0308 	and.w	r3, r3, #8
 8001cb0:	60fb      	str	r3, [r7, #12]
 8001cb2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001cb4:	2360      	movs	r3, #96	; 0x60
 8001cb6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cb8:	2302      	movs	r3, #2
 8001cba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cc0:	2303      	movs	r3, #3
 8001cc2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001cc4:	2307      	movs	r3, #7
 8001cc6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001cc8:	f107 031c 	add.w	r3, r7, #28
 8001ccc:	4619      	mov	r1, r3
 8001cce:	4807      	ldr	r0, [pc, #28]	; (8001cec <HAL_UART_MspInit+0x108>)
 8001cd0:	f001 fcca 	bl	8003668 <HAL_GPIO_Init>
}
 8001cd4:	bf00      	nop
 8001cd6:	3730      	adds	r7, #48	; 0x30
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bd80      	pop	{r7, pc}
 8001cdc:	40011000 	.word	0x40011000
 8001ce0:	40023800 	.word	0x40023800
 8001ce4:	40020000 	.word	0x40020000
 8001ce8:	40004400 	.word	0x40004400
 8001cec:	40020c00 	.word	0x40020c00

08001cf0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001cf0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d28 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001cf4:	480d      	ldr	r0, [pc, #52]	; (8001d2c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001cf6:	490e      	ldr	r1, [pc, #56]	; (8001d30 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001cf8:	4a0e      	ldr	r2, [pc, #56]	; (8001d34 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001cfa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001cfc:	e002      	b.n	8001d04 <LoopCopyDataInit>

08001cfe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001cfe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d02:	3304      	adds	r3, #4

08001d04 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d06:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d08:	d3f9      	bcc.n	8001cfe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d0a:	4a0b      	ldr	r2, [pc, #44]	; (8001d38 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001d0c:	4c0b      	ldr	r4, [pc, #44]	; (8001d3c <LoopFillZerobss+0x26>)
  movs r3, #0
 8001d0e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d10:	e001      	b.n	8001d16 <LoopFillZerobss>

08001d12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d14:	3204      	adds	r2, #4

08001d16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d16:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d18:	d3fb      	bcc.n	8001d12 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001d1a:	f7ff fe65 	bl	80019e8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001d1e:	f00b f851 	bl	800cdc4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d22:	f7ff f82f 	bl	8000d84 <main>
  bx  lr    
 8001d26:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001d28:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001d2c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d30:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001d34:	0800e824 	.word	0x0800e824
  ldr r2, =_sbss
 8001d38:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001d3c:	20001748 	.word	0x20001748

08001d40 <CAN1_RX1_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d40:	e7fe      	b.n	8001d40 <CAN1_RX1_IRQHandler>
	...

08001d44 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001d48:	4b0e      	ldr	r3, [pc, #56]	; (8001d84 <HAL_Init+0x40>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4a0d      	ldr	r2, [pc, #52]	; (8001d84 <HAL_Init+0x40>)
 8001d4e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d52:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001d54:	4b0b      	ldr	r3, [pc, #44]	; (8001d84 <HAL_Init+0x40>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4a0a      	ldr	r2, [pc, #40]	; (8001d84 <HAL_Init+0x40>)
 8001d5a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d5e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d60:	4b08      	ldr	r3, [pc, #32]	; (8001d84 <HAL_Init+0x40>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4a07      	ldr	r2, [pc, #28]	; (8001d84 <HAL_Init+0x40>)
 8001d66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d6a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d6c:	2003      	movs	r0, #3
 8001d6e:	f001 f81d 	bl	8002dac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d72:	2000      	movs	r0, #0
 8001d74:	f000 f808 	bl	8001d88 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d78:	f7ff fcec 	bl	8001754 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d7c:	2300      	movs	r3, #0
}
 8001d7e:	4618      	mov	r0, r3
 8001d80:	bd80      	pop	{r7, pc}
 8001d82:	bf00      	nop
 8001d84:	40023c00 	.word	0x40023c00

08001d88 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b082      	sub	sp, #8
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d90:	4b12      	ldr	r3, [pc, #72]	; (8001ddc <HAL_InitTick+0x54>)
 8001d92:	681a      	ldr	r2, [r3, #0]
 8001d94:	4b12      	ldr	r3, [pc, #72]	; (8001de0 <HAL_InitTick+0x58>)
 8001d96:	781b      	ldrb	r3, [r3, #0]
 8001d98:	4619      	mov	r1, r3
 8001d9a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d9e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001da2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001da6:	4618      	mov	r0, r3
 8001da8:	f001 f835 	bl	8002e16 <HAL_SYSTICK_Config>
 8001dac:	4603      	mov	r3, r0
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d001      	beq.n	8001db6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001db2:	2301      	movs	r3, #1
 8001db4:	e00e      	b.n	8001dd4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	2b0f      	cmp	r3, #15
 8001dba:	d80a      	bhi.n	8001dd2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	6879      	ldr	r1, [r7, #4]
 8001dc0:	f04f 30ff 	mov.w	r0, #4294967295
 8001dc4:	f000 fffd 	bl	8002dc2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001dc8:	4a06      	ldr	r2, [pc, #24]	; (8001de4 <HAL_InitTick+0x5c>)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	e000      	b.n	8001dd4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001dd2:	2301      	movs	r3, #1
}
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	3708      	adds	r7, #8
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bd80      	pop	{r7, pc}
 8001ddc:	20000000 	.word	0x20000000
 8001de0:	20000008 	.word	0x20000008
 8001de4:	20000004 	.word	0x20000004

08001de8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001de8:	b480      	push	{r7}
 8001dea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001dec:	4b06      	ldr	r3, [pc, #24]	; (8001e08 <HAL_IncTick+0x20>)
 8001dee:	781b      	ldrb	r3, [r3, #0]
 8001df0:	461a      	mov	r2, r3
 8001df2:	4b06      	ldr	r3, [pc, #24]	; (8001e0c <HAL_IncTick+0x24>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	4413      	add	r3, r2
 8001df8:	4a04      	ldr	r2, [pc, #16]	; (8001e0c <HAL_IncTick+0x24>)
 8001dfa:	6013      	str	r3, [r2, #0]
}
 8001dfc:	bf00      	nop
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e04:	4770      	bx	lr
 8001e06:	bf00      	nop
 8001e08:	20000008 	.word	0x20000008
 8001e0c:	200014f0 	.word	0x200014f0

08001e10 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e10:	b480      	push	{r7}
 8001e12:	af00      	add	r7, sp, #0
  return uwTick;
 8001e14:	4b03      	ldr	r3, [pc, #12]	; (8001e24 <HAL_GetTick+0x14>)
 8001e16:	681b      	ldr	r3, [r3, #0]
}
 8001e18:	4618      	mov	r0, r3
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e20:	4770      	bx	lr
 8001e22:	bf00      	nop
 8001e24:	200014f0 	.word	0x200014f0

08001e28 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b084      	sub	sp, #16
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e30:	f7ff ffee 	bl	8001e10 <HAL_GetTick>
 8001e34:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e40:	d005      	beq.n	8001e4e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e42:	4b0a      	ldr	r3, [pc, #40]	; (8001e6c <HAL_Delay+0x44>)
 8001e44:	781b      	ldrb	r3, [r3, #0]
 8001e46:	461a      	mov	r2, r3
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	4413      	add	r3, r2
 8001e4c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001e4e:	bf00      	nop
 8001e50:	f7ff ffde 	bl	8001e10 <HAL_GetTick>
 8001e54:	4602      	mov	r2, r0
 8001e56:	68bb      	ldr	r3, [r7, #8]
 8001e58:	1ad3      	subs	r3, r2, r3
 8001e5a:	68fa      	ldr	r2, [r7, #12]
 8001e5c:	429a      	cmp	r2, r3
 8001e5e:	d8f7      	bhi.n	8001e50 <HAL_Delay+0x28>
  {
  }
}
 8001e60:	bf00      	nop
 8001e62:	bf00      	nop
 8001e64:	3710      	adds	r7, #16
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}
 8001e6a:	bf00      	nop
 8001e6c:	20000008 	.word	0x20000008

08001e70 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b084      	sub	sp, #16
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d101      	bne.n	8001e86 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001e82:	2301      	movs	r3, #1
 8001e84:	e033      	b.n	8001eee <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d109      	bne.n	8001ea2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001e8e:	6878      	ldr	r0, [r7, #4]
 8001e90:	f7fe fc66 	bl	8000760 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2200      	movs	r2, #0
 8001e98:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ea6:	f003 0310 	and.w	r3, r3, #16
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d118      	bne.n	8001ee0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eb2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001eb6:	f023 0302 	bic.w	r3, r3, #2
 8001eba:	f043 0202 	orr.w	r2, r3, #2
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001ec2:	6878      	ldr	r0, [r7, #4]
 8001ec4:	f000 fa68 	bl	8002398 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2200      	movs	r2, #0
 8001ecc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ed2:	f023 0303 	bic.w	r3, r3, #3
 8001ed6:	f043 0201 	orr.w	r2, r3, #1
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	641a      	str	r2, [r3, #64]	; 0x40
 8001ede:	e001      	b.n	8001ee4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001eec:	7bfb      	ldrb	r3, [r7, #15]
}
 8001eee:	4618      	mov	r0, r3
 8001ef0:	3710      	adds	r7, #16
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}

08001ef6 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001ef6:	b580      	push	{r7, lr}
 8001ef8:	b086      	sub	sp, #24
 8001efa:	af00      	add	r7, sp, #0
 8001efc:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8001efe:	2300      	movs	r3, #0
 8001f00:	617b      	str	r3, [r7, #20]
 8001f02:	2300      	movs	r3, #0
 8001f04:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	f003 0302 	and.w	r3, r3, #2
 8001f1c:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8001f1e:	68bb      	ldr	r3, [r7, #8]
 8001f20:	f003 0320 	and.w	r3, r3, #32
 8001f24:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8001f26:	697b      	ldr	r3, [r7, #20]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d049      	beq.n	8001fc0 <HAL_ADC_IRQHandler+0xca>
 8001f2c:	693b      	ldr	r3, [r7, #16]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d046      	beq.n	8001fc0 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f36:	f003 0310 	and.w	r3, r3, #16
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d105      	bne.n	8001f4a <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f42:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	689b      	ldr	r3, [r3, #8]
 8001f50:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d12b      	bne.n	8001fb0 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d127      	bne.n	8001fb0 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f66:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d006      	beq.n	8001f7c <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	689b      	ldr	r3, [r3, #8]
 8001f74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d119      	bne.n	8001fb0 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	685a      	ldr	r2, [r3, #4]
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f022 0220 	bic.w	r2, r2, #32
 8001f8a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f90:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f9c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d105      	bne.n	8001fb0 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fa8:	f043 0201 	orr.w	r2, r3, #1
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001fb0:	6878      	ldr	r0, [r7, #4]
 8001fb2:	f000 f8b0 	bl	8002116 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f06f 0212 	mvn.w	r2, #18
 8001fbe:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	f003 0304 	and.w	r3, r3, #4
 8001fc6:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8001fc8:	68bb      	ldr	r3, [r7, #8]
 8001fca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fce:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8001fd0:	697b      	ldr	r3, [r7, #20]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d057      	beq.n	8002086 <HAL_ADC_IRQHandler+0x190>
 8001fd6:	693b      	ldr	r3, [r7, #16]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d054      	beq.n	8002086 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fe0:	f003 0310 	and.w	r3, r3, #16
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d105      	bne.n	8001ff4 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fec:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	689b      	ldr	r3, [r3, #8]
 8001ffa:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d139      	bne.n	8002076 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002008:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800200c:	2b00      	cmp	r3, #0
 800200e:	d006      	beq.n	800201e <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	689b      	ldr	r3, [r3, #8]
 8002016:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800201a:	2b00      	cmp	r3, #0
 800201c:	d12b      	bne.n	8002076 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8002028:	2b00      	cmp	r3, #0
 800202a:	d124      	bne.n	8002076 <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	689b      	ldr	r3, [r3, #8]
 8002032:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002036:	2b00      	cmp	r3, #0
 8002038:	d11d      	bne.n	8002076 <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800203e:	2b00      	cmp	r3, #0
 8002040:	d119      	bne.n	8002076 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	685a      	ldr	r2, [r3, #4]
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002050:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002056:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002062:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002066:	2b00      	cmp	r3, #0
 8002068:	d105      	bne.n	8002076 <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800206e:	f043 0201 	orr.w	r2, r3, #1
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002076:	6878      	ldr	r0, [r7, #4]
 8002078:	f000 fa8a 	bl	8002590 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f06f 020c 	mvn.w	r2, #12
 8002084:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	f003 0301 	and.w	r3, r3, #1
 800208c:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 800208e:	68bb      	ldr	r3, [r7, #8]
 8002090:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002094:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8002096:	697b      	ldr	r3, [r7, #20]
 8002098:	2b00      	cmp	r3, #0
 800209a:	d017      	beq.n	80020cc <HAL_ADC_IRQHandler+0x1d6>
 800209c:	693b      	ldr	r3, [r7, #16]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d014      	beq.n	80020cc <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f003 0301 	and.w	r3, r3, #1
 80020ac:	2b01      	cmp	r3, #1
 80020ae:	d10d      	bne.n	80020cc <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020b4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80020bc:	6878      	ldr	r0, [r7, #4]
 80020be:	f000 f834 	bl	800212a <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f06f 0201 	mvn.w	r2, #1
 80020ca:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	f003 0320 	and.w	r3, r3, #32
 80020d2:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 80020d4:	68bb      	ldr	r3, [r7, #8]
 80020d6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80020da:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 80020dc:	697b      	ldr	r3, [r7, #20]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d015      	beq.n	800210e <HAL_ADC_IRQHandler+0x218>
 80020e2:	693b      	ldr	r3, [r7, #16]
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d012      	beq.n	800210e <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020ec:	f043 0202 	orr.w	r2, r3, #2
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f06f 0220 	mvn.w	r2, #32
 80020fc:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80020fe:	6878      	ldr	r0, [r7, #4]
 8002100:	f000 f81d 	bl	800213e <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f06f 0220 	mvn.w	r2, #32
 800210c:	601a      	str	r2, [r3, #0]
  }
}
 800210e:	bf00      	nop
 8002110:	3718      	adds	r7, #24
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}

08002116 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002116:	b480      	push	{r7}
 8002118:	b083      	sub	sp, #12
 800211a:	af00      	add	r7, sp, #0
 800211c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 800211e:	bf00      	nop
 8002120:	370c      	adds	r7, #12
 8002122:	46bd      	mov	sp, r7
 8002124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002128:	4770      	bx	lr

0800212a <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 800212a:	b480      	push	{r7}
 800212c:	b083      	sub	sp, #12
 800212e:	af00      	add	r7, sp, #0
 8002130:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8002132:	bf00      	nop
 8002134:	370c      	adds	r7, #12
 8002136:	46bd      	mov	sp, r7
 8002138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213c:	4770      	bx	lr

0800213e <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800213e:	b480      	push	{r7}
 8002140:	b083      	sub	sp, #12
 8002142:	af00      	add	r7, sp, #0
 8002144:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002146:	bf00      	nop
 8002148:	370c      	adds	r7, #12
 800214a:	46bd      	mov	sp, r7
 800214c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002150:	4770      	bx	lr
	...

08002154 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002154:	b480      	push	{r7}
 8002156:	b085      	sub	sp, #20
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
 800215c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800215e:	2300      	movs	r3, #0
 8002160:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002168:	2b01      	cmp	r3, #1
 800216a:	d101      	bne.n	8002170 <HAL_ADC_ConfigChannel+0x1c>
 800216c:	2302      	movs	r3, #2
 800216e:	e105      	b.n	800237c <HAL_ADC_ConfigChannel+0x228>
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2201      	movs	r2, #1
 8002174:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	2b09      	cmp	r3, #9
 800217e:	d925      	bls.n	80021cc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	68d9      	ldr	r1, [r3, #12]
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	b29b      	uxth	r3, r3
 800218c:	461a      	mov	r2, r3
 800218e:	4613      	mov	r3, r2
 8002190:	005b      	lsls	r3, r3, #1
 8002192:	4413      	add	r3, r2
 8002194:	3b1e      	subs	r3, #30
 8002196:	2207      	movs	r2, #7
 8002198:	fa02 f303 	lsl.w	r3, r2, r3
 800219c:	43da      	mvns	r2, r3
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	400a      	ands	r2, r1
 80021a4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	68d9      	ldr	r1, [r3, #12]
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	689a      	ldr	r2, [r3, #8]
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	b29b      	uxth	r3, r3
 80021b6:	4618      	mov	r0, r3
 80021b8:	4603      	mov	r3, r0
 80021ba:	005b      	lsls	r3, r3, #1
 80021bc:	4403      	add	r3, r0
 80021be:	3b1e      	subs	r3, #30
 80021c0:	409a      	lsls	r2, r3
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	430a      	orrs	r2, r1
 80021c8:	60da      	str	r2, [r3, #12]
 80021ca:	e022      	b.n	8002212 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	6919      	ldr	r1, [r3, #16]
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	b29b      	uxth	r3, r3
 80021d8:	461a      	mov	r2, r3
 80021da:	4613      	mov	r3, r2
 80021dc:	005b      	lsls	r3, r3, #1
 80021de:	4413      	add	r3, r2
 80021e0:	2207      	movs	r2, #7
 80021e2:	fa02 f303 	lsl.w	r3, r2, r3
 80021e6:	43da      	mvns	r2, r3
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	400a      	ands	r2, r1
 80021ee:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	6919      	ldr	r1, [r3, #16]
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	689a      	ldr	r2, [r3, #8]
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	b29b      	uxth	r3, r3
 8002200:	4618      	mov	r0, r3
 8002202:	4603      	mov	r3, r0
 8002204:	005b      	lsls	r3, r3, #1
 8002206:	4403      	add	r3, r0
 8002208:	409a      	lsls	r2, r3
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	430a      	orrs	r2, r1
 8002210:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	2b06      	cmp	r3, #6
 8002218:	d824      	bhi.n	8002264 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	685a      	ldr	r2, [r3, #4]
 8002224:	4613      	mov	r3, r2
 8002226:	009b      	lsls	r3, r3, #2
 8002228:	4413      	add	r3, r2
 800222a:	3b05      	subs	r3, #5
 800222c:	221f      	movs	r2, #31
 800222e:	fa02 f303 	lsl.w	r3, r2, r3
 8002232:	43da      	mvns	r2, r3
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	400a      	ands	r2, r1
 800223a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	b29b      	uxth	r3, r3
 8002248:	4618      	mov	r0, r3
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	685a      	ldr	r2, [r3, #4]
 800224e:	4613      	mov	r3, r2
 8002250:	009b      	lsls	r3, r3, #2
 8002252:	4413      	add	r3, r2
 8002254:	3b05      	subs	r3, #5
 8002256:	fa00 f203 	lsl.w	r2, r0, r3
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	430a      	orrs	r2, r1
 8002260:	635a      	str	r2, [r3, #52]	; 0x34
 8002262:	e04c      	b.n	80022fe <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	2b0c      	cmp	r3, #12
 800226a:	d824      	bhi.n	80022b6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	685a      	ldr	r2, [r3, #4]
 8002276:	4613      	mov	r3, r2
 8002278:	009b      	lsls	r3, r3, #2
 800227a:	4413      	add	r3, r2
 800227c:	3b23      	subs	r3, #35	; 0x23
 800227e:	221f      	movs	r2, #31
 8002280:	fa02 f303 	lsl.w	r3, r2, r3
 8002284:	43da      	mvns	r2, r3
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	400a      	ands	r2, r1
 800228c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	b29b      	uxth	r3, r3
 800229a:	4618      	mov	r0, r3
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	685a      	ldr	r2, [r3, #4]
 80022a0:	4613      	mov	r3, r2
 80022a2:	009b      	lsls	r3, r3, #2
 80022a4:	4413      	add	r3, r2
 80022a6:	3b23      	subs	r3, #35	; 0x23
 80022a8:	fa00 f203 	lsl.w	r2, r0, r3
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	430a      	orrs	r2, r1
 80022b2:	631a      	str	r2, [r3, #48]	; 0x30
 80022b4:	e023      	b.n	80022fe <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	685a      	ldr	r2, [r3, #4]
 80022c0:	4613      	mov	r3, r2
 80022c2:	009b      	lsls	r3, r3, #2
 80022c4:	4413      	add	r3, r2
 80022c6:	3b41      	subs	r3, #65	; 0x41
 80022c8:	221f      	movs	r2, #31
 80022ca:	fa02 f303 	lsl.w	r3, r2, r3
 80022ce:	43da      	mvns	r2, r3
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	400a      	ands	r2, r1
 80022d6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	b29b      	uxth	r3, r3
 80022e4:	4618      	mov	r0, r3
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	685a      	ldr	r2, [r3, #4]
 80022ea:	4613      	mov	r3, r2
 80022ec:	009b      	lsls	r3, r3, #2
 80022ee:	4413      	add	r3, r2
 80022f0:	3b41      	subs	r3, #65	; 0x41
 80022f2:	fa00 f203 	lsl.w	r2, r0, r3
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	430a      	orrs	r2, r1
 80022fc:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80022fe:	4b22      	ldr	r3, [pc, #136]	; (8002388 <HAL_ADC_ConfigChannel+0x234>)
 8002300:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	4a21      	ldr	r2, [pc, #132]	; (800238c <HAL_ADC_ConfigChannel+0x238>)
 8002308:	4293      	cmp	r3, r2
 800230a:	d109      	bne.n	8002320 <HAL_ADC_ConfigChannel+0x1cc>
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	2b12      	cmp	r3, #18
 8002312:	d105      	bne.n	8002320 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4a19      	ldr	r2, [pc, #100]	; (800238c <HAL_ADC_ConfigChannel+0x238>)
 8002326:	4293      	cmp	r3, r2
 8002328:	d123      	bne.n	8002372 <HAL_ADC_ConfigChannel+0x21e>
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	2b10      	cmp	r3, #16
 8002330:	d003      	beq.n	800233a <HAL_ADC_ConfigChannel+0x1e6>
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	2b11      	cmp	r3, #17
 8002338:	d11b      	bne.n	8002372 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	685b      	ldr	r3, [r3, #4]
 800233e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	2b10      	cmp	r3, #16
 800234c:	d111      	bne.n	8002372 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800234e:	4b10      	ldr	r3, [pc, #64]	; (8002390 <HAL_ADC_ConfigChannel+0x23c>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4a10      	ldr	r2, [pc, #64]	; (8002394 <HAL_ADC_ConfigChannel+0x240>)
 8002354:	fba2 2303 	umull	r2, r3, r2, r3
 8002358:	0c9a      	lsrs	r2, r3, #18
 800235a:	4613      	mov	r3, r2
 800235c:	009b      	lsls	r3, r3, #2
 800235e:	4413      	add	r3, r2
 8002360:	005b      	lsls	r3, r3, #1
 8002362:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002364:	e002      	b.n	800236c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002366:	68bb      	ldr	r3, [r7, #8]
 8002368:	3b01      	subs	r3, #1
 800236a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800236c:	68bb      	ldr	r3, [r7, #8]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d1f9      	bne.n	8002366 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2200      	movs	r2, #0
 8002376:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800237a:	2300      	movs	r3, #0
}
 800237c:	4618      	mov	r0, r3
 800237e:	3714      	adds	r7, #20
 8002380:	46bd      	mov	sp, r7
 8002382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002386:	4770      	bx	lr
 8002388:	40012300 	.word	0x40012300
 800238c:	40012000 	.word	0x40012000
 8002390:	20000000 	.word	0x20000000
 8002394:	431bde83 	.word	0x431bde83

08002398 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002398:	b480      	push	{r7}
 800239a:	b085      	sub	sp, #20
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80023a0:	4b79      	ldr	r3, [pc, #484]	; (8002588 <ADC_Init+0x1f0>)
 80023a2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	685a      	ldr	r2, [r3, #4]
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	431a      	orrs	r2, r3
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	685a      	ldr	r2, [r3, #4]
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80023cc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	6859      	ldr	r1, [r3, #4]
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	691b      	ldr	r3, [r3, #16]
 80023d8:	021a      	lsls	r2, r3, #8
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	430a      	orrs	r2, r1
 80023e0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	685a      	ldr	r2, [r3, #4]
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80023f0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	6859      	ldr	r1, [r3, #4]
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	689a      	ldr	r2, [r3, #8]
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	430a      	orrs	r2, r1
 8002402:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	689a      	ldr	r2, [r3, #8]
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002412:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	6899      	ldr	r1, [r3, #8]
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	68da      	ldr	r2, [r3, #12]
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	430a      	orrs	r2, r1
 8002424:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800242a:	4a58      	ldr	r2, [pc, #352]	; (800258c <ADC_Init+0x1f4>)
 800242c:	4293      	cmp	r3, r2
 800242e:	d022      	beq.n	8002476 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	689a      	ldr	r2, [r3, #8]
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800243e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	6899      	ldr	r1, [r3, #8]
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	430a      	orrs	r2, r1
 8002450:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	689a      	ldr	r2, [r3, #8]
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002460:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	6899      	ldr	r1, [r3, #8]
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	430a      	orrs	r2, r1
 8002472:	609a      	str	r2, [r3, #8]
 8002474:	e00f      	b.n	8002496 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	689a      	ldr	r2, [r3, #8]
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002484:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	689a      	ldr	r2, [r3, #8]
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002494:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	689a      	ldr	r2, [r3, #8]
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f022 0202 	bic.w	r2, r2, #2
 80024a4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	6899      	ldr	r1, [r3, #8]
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	7e1b      	ldrb	r3, [r3, #24]
 80024b0:	005a      	lsls	r2, r3, #1
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	430a      	orrs	r2, r1
 80024b8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d01b      	beq.n	80024fc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	685a      	ldr	r2, [r3, #4]
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80024d2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	685a      	ldr	r2, [r3, #4]
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80024e2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	6859      	ldr	r1, [r3, #4]
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ee:	3b01      	subs	r3, #1
 80024f0:	035a      	lsls	r2, r3, #13
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	430a      	orrs	r2, r1
 80024f8:	605a      	str	r2, [r3, #4]
 80024fa:	e007      	b.n	800250c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	685a      	ldr	r2, [r3, #4]
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800250a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800251a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	69db      	ldr	r3, [r3, #28]
 8002526:	3b01      	subs	r3, #1
 8002528:	051a      	lsls	r2, r3, #20
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	430a      	orrs	r2, r1
 8002530:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	689a      	ldr	r2, [r3, #8]
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002540:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	6899      	ldr	r1, [r3, #8]
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800254e:	025a      	lsls	r2, r3, #9
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	430a      	orrs	r2, r1
 8002556:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	689a      	ldr	r2, [r3, #8]
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002566:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	6899      	ldr	r1, [r3, #8]
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	695b      	ldr	r3, [r3, #20]
 8002572:	029a      	lsls	r2, r3, #10
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	430a      	orrs	r2, r1
 800257a:	609a      	str	r2, [r3, #8]
}
 800257c:	bf00      	nop
 800257e:	3714      	adds	r7, #20
 8002580:	46bd      	mov	sp, r7
 8002582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002586:	4770      	bx	lr
 8002588:	40012300 	.word	0x40012300
 800258c:	0f000001 	.word	0x0f000001

08002590 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002590:	b480      	push	{r7}
 8002592:	b083      	sub	sp, #12
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8002598:	bf00      	nop
 800259a:	370c      	adds	r7, #12
 800259c:	46bd      	mov	sp, r7
 800259e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a2:	4770      	bx	lr

080025a4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b084      	sub	sp, #16
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d101      	bne.n	80025b6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80025b2:	2301      	movs	r3, #1
 80025b4:	e0ed      	b.n	8002792 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80025bc:	b2db      	uxtb	r3, r3
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d102      	bne.n	80025c8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80025c2:	6878      	ldr	r0, [r7, #4]
 80025c4:	f7fe f9a8 	bl	8000918 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	681a      	ldr	r2, [r3, #0]
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f042 0201 	orr.w	r2, r2, #1
 80025d6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80025d8:	f7ff fc1a 	bl	8001e10 <HAL_GetTick>
 80025dc:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80025de:	e012      	b.n	8002606 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80025e0:	f7ff fc16 	bl	8001e10 <HAL_GetTick>
 80025e4:	4602      	mov	r2, r0
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	1ad3      	subs	r3, r2, r3
 80025ea:	2b0a      	cmp	r3, #10
 80025ec:	d90b      	bls.n	8002606 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025f2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	2205      	movs	r2, #5
 80025fe:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002602:	2301      	movs	r3, #1
 8002604:	e0c5      	b.n	8002792 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	f003 0301 	and.w	r3, r3, #1
 8002610:	2b00      	cmp	r3, #0
 8002612:	d0e5      	beq.n	80025e0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	681a      	ldr	r2, [r3, #0]
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f022 0202 	bic.w	r2, r2, #2
 8002622:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002624:	f7ff fbf4 	bl	8001e10 <HAL_GetTick>
 8002628:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800262a:	e012      	b.n	8002652 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800262c:	f7ff fbf0 	bl	8001e10 <HAL_GetTick>
 8002630:	4602      	mov	r2, r0
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	1ad3      	subs	r3, r2, r3
 8002636:	2b0a      	cmp	r3, #10
 8002638:	d90b      	bls.n	8002652 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800263e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	2205      	movs	r2, #5
 800264a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800264e:	2301      	movs	r3, #1
 8002650:	e09f      	b.n	8002792 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	f003 0302 	and.w	r3, r3, #2
 800265c:	2b00      	cmp	r3, #0
 800265e:	d1e5      	bne.n	800262c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	7e1b      	ldrb	r3, [r3, #24]
 8002664:	2b01      	cmp	r3, #1
 8002666:	d108      	bne.n	800267a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	681a      	ldr	r2, [r3, #0]
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002676:	601a      	str	r2, [r3, #0]
 8002678:	e007      	b.n	800268a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	681a      	ldr	r2, [r3, #0]
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002688:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	7e5b      	ldrb	r3, [r3, #25]
 800268e:	2b01      	cmp	r3, #1
 8002690:	d108      	bne.n	80026a4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	681a      	ldr	r2, [r3, #0]
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80026a0:	601a      	str	r2, [r3, #0]
 80026a2:	e007      	b.n	80026b4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	681a      	ldr	r2, [r3, #0]
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80026b2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	7e9b      	ldrb	r3, [r3, #26]
 80026b8:	2b01      	cmp	r3, #1
 80026ba:	d108      	bne.n	80026ce <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	681a      	ldr	r2, [r3, #0]
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f042 0220 	orr.w	r2, r2, #32
 80026ca:	601a      	str	r2, [r3, #0]
 80026cc:	e007      	b.n	80026de <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	681a      	ldr	r2, [r3, #0]
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f022 0220 	bic.w	r2, r2, #32
 80026dc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	7edb      	ldrb	r3, [r3, #27]
 80026e2:	2b01      	cmp	r3, #1
 80026e4:	d108      	bne.n	80026f8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	681a      	ldr	r2, [r3, #0]
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f022 0210 	bic.w	r2, r2, #16
 80026f4:	601a      	str	r2, [r3, #0]
 80026f6:	e007      	b.n	8002708 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	681a      	ldr	r2, [r3, #0]
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f042 0210 	orr.w	r2, r2, #16
 8002706:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	7f1b      	ldrb	r3, [r3, #28]
 800270c:	2b01      	cmp	r3, #1
 800270e:	d108      	bne.n	8002722 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	681a      	ldr	r2, [r3, #0]
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f042 0208 	orr.w	r2, r2, #8
 800271e:	601a      	str	r2, [r3, #0]
 8002720:	e007      	b.n	8002732 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	681a      	ldr	r2, [r3, #0]
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f022 0208 	bic.w	r2, r2, #8
 8002730:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	7f5b      	ldrb	r3, [r3, #29]
 8002736:	2b01      	cmp	r3, #1
 8002738:	d108      	bne.n	800274c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	681a      	ldr	r2, [r3, #0]
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f042 0204 	orr.w	r2, r2, #4
 8002748:	601a      	str	r2, [r3, #0]
 800274a:	e007      	b.n	800275c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	681a      	ldr	r2, [r3, #0]
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f022 0204 	bic.w	r2, r2, #4
 800275a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	689a      	ldr	r2, [r3, #8]
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	68db      	ldr	r3, [r3, #12]
 8002764:	431a      	orrs	r2, r3
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	691b      	ldr	r3, [r3, #16]
 800276a:	431a      	orrs	r2, r3
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	695b      	ldr	r3, [r3, #20]
 8002770:	ea42 0103 	orr.w	r1, r2, r3
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	1e5a      	subs	r2, r3, #1
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	430a      	orrs	r2, r1
 8002780:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	2200      	movs	r2, #0
 8002786:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2201      	movs	r2, #1
 800278c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002790:	2300      	movs	r3, #0
}
 8002792:	4618      	mov	r0, r3
 8002794:	3710      	adds	r7, #16
 8002796:	46bd      	mov	sp, r7
 8002798:	bd80      	pop	{r7, pc}

0800279a <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800279a:	b580      	push	{r7, lr}
 800279c:	b08a      	sub	sp, #40	; 0x28
 800279e:	af00      	add	r7, sp, #0
 80027a0:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80027a2:	2300      	movs	r3, #0
 80027a4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	695b      	ldr	r3, [r3, #20]
 80027ac:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	689b      	ldr	r3, [r3, #8]
 80027bc:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	68db      	ldr	r3, [r3, #12]
 80027c4:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	691b      	ldr	r3, [r3, #16]
 80027cc:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	699b      	ldr	r3, [r3, #24]
 80027d4:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80027d6:	6a3b      	ldr	r3, [r7, #32]
 80027d8:	f003 0301 	and.w	r3, r3, #1
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d07c      	beq.n	80028da <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80027e0:	69bb      	ldr	r3, [r7, #24]
 80027e2:	f003 0301 	and.w	r3, r3, #1
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d023      	beq.n	8002832 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	2201      	movs	r2, #1
 80027f0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80027f2:	69bb      	ldr	r3, [r7, #24]
 80027f4:	f003 0302 	and.w	r3, r3, #2
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d003      	beq.n	8002804 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80027fc:	6878      	ldr	r0, [r7, #4]
 80027fe:	f000 f983 	bl	8002b08 <HAL_CAN_TxMailbox0CompleteCallback>
 8002802:	e016      	b.n	8002832 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002804:	69bb      	ldr	r3, [r7, #24]
 8002806:	f003 0304 	and.w	r3, r3, #4
 800280a:	2b00      	cmp	r3, #0
 800280c:	d004      	beq.n	8002818 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800280e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002810:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002814:	627b      	str	r3, [r7, #36]	; 0x24
 8002816:	e00c      	b.n	8002832 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002818:	69bb      	ldr	r3, [r7, #24]
 800281a:	f003 0308 	and.w	r3, r3, #8
 800281e:	2b00      	cmp	r3, #0
 8002820:	d004      	beq.n	800282c <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002824:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002828:	627b      	str	r3, [r7, #36]	; 0x24
 800282a:	e002      	b.n	8002832 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800282c:	6878      	ldr	r0, [r7, #4]
 800282e:	f000 f989 	bl	8002b44 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002832:	69bb      	ldr	r3, [r7, #24]
 8002834:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002838:	2b00      	cmp	r3, #0
 800283a:	d024      	beq.n	8002886 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002844:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002846:	69bb      	ldr	r3, [r7, #24]
 8002848:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800284c:	2b00      	cmp	r3, #0
 800284e:	d003      	beq.n	8002858 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002850:	6878      	ldr	r0, [r7, #4]
 8002852:	f000 f963 	bl	8002b1c <HAL_CAN_TxMailbox1CompleteCallback>
 8002856:	e016      	b.n	8002886 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002858:	69bb      	ldr	r3, [r7, #24]
 800285a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800285e:	2b00      	cmp	r3, #0
 8002860:	d004      	beq.n	800286c <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002864:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002868:	627b      	str	r3, [r7, #36]	; 0x24
 800286a:	e00c      	b.n	8002886 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800286c:	69bb      	ldr	r3, [r7, #24]
 800286e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002872:	2b00      	cmp	r3, #0
 8002874:	d004      	beq.n	8002880 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002878:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800287c:	627b      	str	r3, [r7, #36]	; 0x24
 800287e:	e002      	b.n	8002886 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002880:	6878      	ldr	r0, [r7, #4]
 8002882:	f000 f969 	bl	8002b58 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002886:	69bb      	ldr	r3, [r7, #24]
 8002888:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800288c:	2b00      	cmp	r3, #0
 800288e:	d024      	beq.n	80028da <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002898:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800289a:	69bb      	ldr	r3, [r7, #24]
 800289c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d003      	beq.n	80028ac <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80028a4:	6878      	ldr	r0, [r7, #4]
 80028a6:	f000 f943 	bl	8002b30 <HAL_CAN_TxMailbox2CompleteCallback>
 80028aa:	e016      	b.n	80028da <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80028ac:	69bb      	ldr	r3, [r7, #24]
 80028ae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d004      	beq.n	80028c0 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80028b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80028bc:	627b      	str	r3, [r7, #36]	; 0x24
 80028be:	e00c      	b.n	80028da <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80028c0:	69bb      	ldr	r3, [r7, #24]
 80028c2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d004      	beq.n	80028d4 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80028ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028d0:	627b      	str	r3, [r7, #36]	; 0x24
 80028d2:	e002      	b.n	80028da <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80028d4:	6878      	ldr	r0, [r7, #4]
 80028d6:	f000 f949 	bl	8002b6c <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80028da:	6a3b      	ldr	r3, [r7, #32]
 80028dc:	f003 0308 	and.w	r3, r3, #8
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d00c      	beq.n	80028fe <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80028e4:	697b      	ldr	r3, [r7, #20]
 80028e6:	f003 0310 	and.w	r3, r3, #16
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d007      	beq.n	80028fe <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80028ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028f0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80028f4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	2210      	movs	r2, #16
 80028fc:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80028fe:	6a3b      	ldr	r3, [r7, #32]
 8002900:	f003 0304 	and.w	r3, r3, #4
 8002904:	2b00      	cmp	r3, #0
 8002906:	d00b      	beq.n	8002920 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002908:	697b      	ldr	r3, [r7, #20]
 800290a:	f003 0308 	and.w	r3, r3, #8
 800290e:	2b00      	cmp	r3, #0
 8002910:	d006      	beq.n	8002920 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	2208      	movs	r2, #8
 8002918:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800291a:	6878      	ldr	r0, [r7, #4]
 800291c:	f000 f93a 	bl	8002b94 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002920:	6a3b      	ldr	r3, [r7, #32]
 8002922:	f003 0302 	and.w	r3, r3, #2
 8002926:	2b00      	cmp	r3, #0
 8002928:	d009      	beq.n	800293e <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	68db      	ldr	r3, [r3, #12]
 8002930:	f003 0303 	and.w	r3, r3, #3
 8002934:	2b00      	cmp	r3, #0
 8002936:	d002      	beq.n	800293e <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002938:	6878      	ldr	r0, [r7, #4]
 800293a:	f000 f921 	bl	8002b80 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800293e:	6a3b      	ldr	r3, [r7, #32]
 8002940:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002944:	2b00      	cmp	r3, #0
 8002946:	d00c      	beq.n	8002962 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002948:	693b      	ldr	r3, [r7, #16]
 800294a:	f003 0310 	and.w	r3, r3, #16
 800294e:	2b00      	cmp	r3, #0
 8002950:	d007      	beq.n	8002962 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002954:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002958:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	2210      	movs	r2, #16
 8002960:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002962:	6a3b      	ldr	r3, [r7, #32]
 8002964:	f003 0320 	and.w	r3, r3, #32
 8002968:	2b00      	cmp	r3, #0
 800296a:	d00b      	beq.n	8002984 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800296c:	693b      	ldr	r3, [r7, #16]
 800296e:	f003 0308 	and.w	r3, r3, #8
 8002972:	2b00      	cmp	r3, #0
 8002974:	d006      	beq.n	8002984 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	2208      	movs	r2, #8
 800297c:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800297e:	6878      	ldr	r0, [r7, #4]
 8002980:	f000 f91c 	bl	8002bbc <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002984:	6a3b      	ldr	r3, [r7, #32]
 8002986:	f003 0310 	and.w	r3, r3, #16
 800298a:	2b00      	cmp	r3, #0
 800298c:	d009      	beq.n	80029a2 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	691b      	ldr	r3, [r3, #16]
 8002994:	f003 0303 	and.w	r3, r3, #3
 8002998:	2b00      	cmp	r3, #0
 800299a:	d002      	beq.n	80029a2 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800299c:	6878      	ldr	r0, [r7, #4]
 800299e:	f000 f903 	bl	8002ba8 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80029a2:	6a3b      	ldr	r3, [r7, #32]
 80029a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d00b      	beq.n	80029c4 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80029ac:	69fb      	ldr	r3, [r7, #28]
 80029ae:	f003 0310 	and.w	r3, r3, #16
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d006      	beq.n	80029c4 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	2210      	movs	r2, #16
 80029bc:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80029be:	6878      	ldr	r0, [r7, #4]
 80029c0:	f000 f906 	bl	8002bd0 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80029c4:	6a3b      	ldr	r3, [r7, #32]
 80029c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d00b      	beq.n	80029e6 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80029ce:	69fb      	ldr	r3, [r7, #28]
 80029d0:	f003 0308 	and.w	r3, r3, #8
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d006      	beq.n	80029e6 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	2208      	movs	r2, #8
 80029de:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80029e0:	6878      	ldr	r0, [r7, #4]
 80029e2:	f000 f8ff 	bl	8002be4 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80029e6:	6a3b      	ldr	r3, [r7, #32]
 80029e8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d07b      	beq.n	8002ae8 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80029f0:	69fb      	ldr	r3, [r7, #28]
 80029f2:	f003 0304 	and.w	r3, r3, #4
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d072      	beq.n	8002ae0 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80029fa:	6a3b      	ldr	r3, [r7, #32]
 80029fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d008      	beq.n	8002a16 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d003      	beq.n	8002a16 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a10:	f043 0301 	orr.w	r3, r3, #1
 8002a14:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002a16:	6a3b      	ldr	r3, [r7, #32]
 8002a18:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d008      	beq.n	8002a32 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d003      	beq.n	8002a32 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a2c:	f043 0302 	orr.w	r3, r3, #2
 8002a30:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002a32:	6a3b      	ldr	r3, [r7, #32]
 8002a34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d008      	beq.n	8002a4e <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d003      	beq.n	8002a4e <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a48:	f043 0304 	orr.w	r3, r3, #4
 8002a4c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002a4e:	6a3b      	ldr	r3, [r7, #32]
 8002a50:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d043      	beq.n	8002ae0 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d03e      	beq.n	8002ae0 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002a68:	2b60      	cmp	r3, #96	; 0x60
 8002a6a:	d02b      	beq.n	8002ac4 <HAL_CAN_IRQHandler+0x32a>
 8002a6c:	2b60      	cmp	r3, #96	; 0x60
 8002a6e:	d82e      	bhi.n	8002ace <HAL_CAN_IRQHandler+0x334>
 8002a70:	2b50      	cmp	r3, #80	; 0x50
 8002a72:	d022      	beq.n	8002aba <HAL_CAN_IRQHandler+0x320>
 8002a74:	2b50      	cmp	r3, #80	; 0x50
 8002a76:	d82a      	bhi.n	8002ace <HAL_CAN_IRQHandler+0x334>
 8002a78:	2b40      	cmp	r3, #64	; 0x40
 8002a7a:	d019      	beq.n	8002ab0 <HAL_CAN_IRQHandler+0x316>
 8002a7c:	2b40      	cmp	r3, #64	; 0x40
 8002a7e:	d826      	bhi.n	8002ace <HAL_CAN_IRQHandler+0x334>
 8002a80:	2b30      	cmp	r3, #48	; 0x30
 8002a82:	d010      	beq.n	8002aa6 <HAL_CAN_IRQHandler+0x30c>
 8002a84:	2b30      	cmp	r3, #48	; 0x30
 8002a86:	d822      	bhi.n	8002ace <HAL_CAN_IRQHandler+0x334>
 8002a88:	2b10      	cmp	r3, #16
 8002a8a:	d002      	beq.n	8002a92 <HAL_CAN_IRQHandler+0x2f8>
 8002a8c:	2b20      	cmp	r3, #32
 8002a8e:	d005      	beq.n	8002a9c <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002a90:	e01d      	b.n	8002ace <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a94:	f043 0308 	orr.w	r3, r3, #8
 8002a98:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002a9a:	e019      	b.n	8002ad0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a9e:	f043 0310 	orr.w	r3, r3, #16
 8002aa2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002aa4:	e014      	b.n	8002ad0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aa8:	f043 0320 	orr.w	r3, r3, #32
 8002aac:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002aae:	e00f      	b.n	8002ad0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ab2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002ab6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002ab8:	e00a      	b.n	8002ad0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002abc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ac0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002ac2:	e005      	b.n	8002ad0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ac6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002aca:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002acc:	e000      	b.n	8002ad0 <HAL_CAN_IRQHandler+0x336>
            break;
 8002ace:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	699a      	ldr	r2, [r3, #24]
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002ade:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	2204      	movs	r2, #4
 8002ae6:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d008      	beq.n	8002b00 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002af4:	431a      	orrs	r2, r3
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002afa:	6878      	ldr	r0, [r7, #4]
 8002afc:	f000 f87c 	bl	8002bf8 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002b00:	bf00      	nop
 8002b02:	3728      	adds	r7, #40	; 0x28
 8002b04:	46bd      	mov	sp, r7
 8002b06:	bd80      	pop	{r7, pc}

08002b08 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	b083      	sub	sp, #12
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002b10:	bf00      	nop
 8002b12:	370c      	adds	r7, #12
 8002b14:	46bd      	mov	sp, r7
 8002b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1a:	4770      	bx	lr

08002b1c <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	b083      	sub	sp, #12
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002b24:	bf00      	nop
 8002b26:	370c      	adds	r7, #12
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2e:	4770      	bx	lr

08002b30 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002b30:	b480      	push	{r7}
 8002b32:	b083      	sub	sp, #12
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002b38:	bf00      	nop
 8002b3a:	370c      	adds	r7, #12
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b42:	4770      	bx	lr

08002b44 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002b44:	b480      	push	{r7}
 8002b46:	b083      	sub	sp, #12
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002b4c:	bf00      	nop
 8002b4e:	370c      	adds	r7, #12
 8002b50:	46bd      	mov	sp, r7
 8002b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b56:	4770      	bx	lr

08002b58 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	b083      	sub	sp, #12
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002b60:	bf00      	nop
 8002b62:	370c      	adds	r7, #12
 8002b64:	46bd      	mov	sp, r7
 8002b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6a:	4770      	bx	lr

08002b6c <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	b083      	sub	sp, #12
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002b74:	bf00      	nop
 8002b76:	370c      	adds	r7, #12
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7e:	4770      	bx	lr

08002b80 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002b80:	b480      	push	{r7}
 8002b82:	b083      	sub	sp, #12
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8002b88:	bf00      	nop
 8002b8a:	370c      	adds	r7, #12
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b92:	4770      	bx	lr

08002b94 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002b94:	b480      	push	{r7}
 8002b96:	b083      	sub	sp, #12
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002b9c:	bf00      	nop
 8002b9e:	370c      	adds	r7, #12
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba6:	4770      	bx	lr

08002ba8 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	b083      	sub	sp, #12
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002bb0:	bf00      	nop
 8002bb2:	370c      	adds	r7, #12
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bba:	4770      	bx	lr

08002bbc <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	b083      	sub	sp, #12
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002bc4:	bf00      	nop
 8002bc6:	370c      	adds	r7, #12
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bce:	4770      	bx	lr

08002bd0 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	b083      	sub	sp, #12
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002bd8:	bf00      	nop
 8002bda:	370c      	adds	r7, #12
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be2:	4770      	bx	lr

08002be4 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002be4:	b480      	push	{r7}
 8002be6:	b083      	sub	sp, #12
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002bec:	bf00      	nop
 8002bee:	370c      	adds	r7, #12
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf6:	4770      	bx	lr

08002bf8 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	b083      	sub	sp, #12
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002c00:	bf00      	nop
 8002c02:	370c      	adds	r7, #12
 8002c04:	46bd      	mov	sp, r7
 8002c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0a:	4770      	bx	lr

08002c0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	b085      	sub	sp, #20
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	f003 0307 	and.w	r3, r3, #7
 8002c1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c1c:	4b0c      	ldr	r3, [pc, #48]	; (8002c50 <__NVIC_SetPriorityGrouping+0x44>)
 8002c1e:	68db      	ldr	r3, [r3, #12]
 8002c20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c22:	68ba      	ldr	r2, [r7, #8]
 8002c24:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002c28:	4013      	ands	r3, r2
 8002c2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c30:	68bb      	ldr	r3, [r7, #8]
 8002c32:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002c34:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002c38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c3e:	4a04      	ldr	r2, [pc, #16]	; (8002c50 <__NVIC_SetPriorityGrouping+0x44>)
 8002c40:	68bb      	ldr	r3, [r7, #8]
 8002c42:	60d3      	str	r3, [r2, #12]
}
 8002c44:	bf00      	nop
 8002c46:	3714      	adds	r7, #20
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4e:	4770      	bx	lr
 8002c50:	e000ed00 	.word	0xe000ed00

08002c54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c54:	b480      	push	{r7}
 8002c56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c58:	4b04      	ldr	r3, [pc, #16]	; (8002c6c <__NVIC_GetPriorityGrouping+0x18>)
 8002c5a:	68db      	ldr	r3, [r3, #12]
 8002c5c:	0a1b      	lsrs	r3, r3, #8
 8002c5e:	f003 0307 	and.w	r3, r3, #7
}
 8002c62:	4618      	mov	r0, r3
 8002c64:	46bd      	mov	sp, r7
 8002c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6a:	4770      	bx	lr
 8002c6c:	e000ed00 	.word	0xe000ed00

08002c70 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c70:	b480      	push	{r7}
 8002c72:	b083      	sub	sp, #12
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	4603      	mov	r3, r0
 8002c78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	db0b      	blt.n	8002c9a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c82:	79fb      	ldrb	r3, [r7, #7]
 8002c84:	f003 021f 	and.w	r2, r3, #31
 8002c88:	4907      	ldr	r1, [pc, #28]	; (8002ca8 <__NVIC_EnableIRQ+0x38>)
 8002c8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c8e:	095b      	lsrs	r3, r3, #5
 8002c90:	2001      	movs	r0, #1
 8002c92:	fa00 f202 	lsl.w	r2, r0, r2
 8002c96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002c9a:	bf00      	nop
 8002c9c:	370c      	adds	r7, #12
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca4:	4770      	bx	lr
 8002ca6:	bf00      	nop
 8002ca8:	e000e100 	.word	0xe000e100

08002cac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002cac:	b480      	push	{r7}
 8002cae:	b083      	sub	sp, #12
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	6039      	str	r1, [r7, #0]
 8002cb6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002cb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	db0a      	blt.n	8002cd6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	b2da      	uxtb	r2, r3
 8002cc4:	490c      	ldr	r1, [pc, #48]	; (8002cf8 <__NVIC_SetPriority+0x4c>)
 8002cc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cca:	0112      	lsls	r2, r2, #4
 8002ccc:	b2d2      	uxtb	r2, r2
 8002cce:	440b      	add	r3, r1
 8002cd0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002cd4:	e00a      	b.n	8002cec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	b2da      	uxtb	r2, r3
 8002cda:	4908      	ldr	r1, [pc, #32]	; (8002cfc <__NVIC_SetPriority+0x50>)
 8002cdc:	79fb      	ldrb	r3, [r7, #7]
 8002cde:	f003 030f 	and.w	r3, r3, #15
 8002ce2:	3b04      	subs	r3, #4
 8002ce4:	0112      	lsls	r2, r2, #4
 8002ce6:	b2d2      	uxtb	r2, r2
 8002ce8:	440b      	add	r3, r1
 8002cea:	761a      	strb	r2, [r3, #24]
}
 8002cec:	bf00      	nop
 8002cee:	370c      	adds	r7, #12
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf6:	4770      	bx	lr
 8002cf8:	e000e100 	.word	0xe000e100
 8002cfc:	e000ed00 	.word	0xe000ed00

08002d00 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d00:	b480      	push	{r7}
 8002d02:	b089      	sub	sp, #36	; 0x24
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	60f8      	str	r0, [r7, #12]
 8002d08:	60b9      	str	r1, [r7, #8]
 8002d0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	f003 0307 	and.w	r3, r3, #7
 8002d12:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d14:	69fb      	ldr	r3, [r7, #28]
 8002d16:	f1c3 0307 	rsb	r3, r3, #7
 8002d1a:	2b04      	cmp	r3, #4
 8002d1c:	bf28      	it	cs
 8002d1e:	2304      	movcs	r3, #4
 8002d20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d22:	69fb      	ldr	r3, [r7, #28]
 8002d24:	3304      	adds	r3, #4
 8002d26:	2b06      	cmp	r3, #6
 8002d28:	d902      	bls.n	8002d30 <NVIC_EncodePriority+0x30>
 8002d2a:	69fb      	ldr	r3, [r7, #28]
 8002d2c:	3b03      	subs	r3, #3
 8002d2e:	e000      	b.n	8002d32 <NVIC_EncodePriority+0x32>
 8002d30:	2300      	movs	r3, #0
 8002d32:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d34:	f04f 32ff 	mov.w	r2, #4294967295
 8002d38:	69bb      	ldr	r3, [r7, #24]
 8002d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d3e:	43da      	mvns	r2, r3
 8002d40:	68bb      	ldr	r3, [r7, #8]
 8002d42:	401a      	ands	r2, r3
 8002d44:	697b      	ldr	r3, [r7, #20]
 8002d46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d48:	f04f 31ff 	mov.w	r1, #4294967295
 8002d4c:	697b      	ldr	r3, [r7, #20]
 8002d4e:	fa01 f303 	lsl.w	r3, r1, r3
 8002d52:	43d9      	mvns	r1, r3
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d58:	4313      	orrs	r3, r2
         );
}
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	3724      	adds	r7, #36	; 0x24
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d64:	4770      	bx	lr
	...

08002d68 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b082      	sub	sp, #8
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	3b01      	subs	r3, #1
 8002d74:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002d78:	d301      	bcc.n	8002d7e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	e00f      	b.n	8002d9e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d7e:	4a0a      	ldr	r2, [pc, #40]	; (8002da8 <SysTick_Config+0x40>)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	3b01      	subs	r3, #1
 8002d84:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002d86:	210f      	movs	r1, #15
 8002d88:	f04f 30ff 	mov.w	r0, #4294967295
 8002d8c:	f7ff ff8e 	bl	8002cac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d90:	4b05      	ldr	r3, [pc, #20]	; (8002da8 <SysTick_Config+0x40>)
 8002d92:	2200      	movs	r2, #0
 8002d94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d96:	4b04      	ldr	r3, [pc, #16]	; (8002da8 <SysTick_Config+0x40>)
 8002d98:	2207      	movs	r2, #7
 8002d9a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002d9c:	2300      	movs	r3, #0
}
 8002d9e:	4618      	mov	r0, r3
 8002da0:	3708      	adds	r7, #8
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bd80      	pop	{r7, pc}
 8002da6:	bf00      	nop
 8002da8:	e000e010 	.word	0xe000e010

08002dac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b082      	sub	sp, #8
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002db4:	6878      	ldr	r0, [r7, #4]
 8002db6:	f7ff ff29 	bl	8002c0c <__NVIC_SetPriorityGrouping>
}
 8002dba:	bf00      	nop
 8002dbc:	3708      	adds	r7, #8
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	bd80      	pop	{r7, pc}

08002dc2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002dc2:	b580      	push	{r7, lr}
 8002dc4:	b086      	sub	sp, #24
 8002dc6:	af00      	add	r7, sp, #0
 8002dc8:	4603      	mov	r3, r0
 8002dca:	60b9      	str	r1, [r7, #8]
 8002dcc:	607a      	str	r2, [r7, #4]
 8002dce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002dd4:	f7ff ff3e 	bl	8002c54 <__NVIC_GetPriorityGrouping>
 8002dd8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002dda:	687a      	ldr	r2, [r7, #4]
 8002ddc:	68b9      	ldr	r1, [r7, #8]
 8002dde:	6978      	ldr	r0, [r7, #20]
 8002de0:	f7ff ff8e 	bl	8002d00 <NVIC_EncodePriority>
 8002de4:	4602      	mov	r2, r0
 8002de6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002dea:	4611      	mov	r1, r2
 8002dec:	4618      	mov	r0, r3
 8002dee:	f7ff ff5d 	bl	8002cac <__NVIC_SetPriority>
}
 8002df2:	bf00      	nop
 8002df4:	3718      	adds	r7, #24
 8002df6:	46bd      	mov	sp, r7
 8002df8:	bd80      	pop	{r7, pc}

08002dfa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002dfa:	b580      	push	{r7, lr}
 8002dfc:	b082      	sub	sp, #8
 8002dfe:	af00      	add	r7, sp, #0
 8002e00:	4603      	mov	r3, r0
 8002e02:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e08:	4618      	mov	r0, r3
 8002e0a:	f7ff ff31 	bl	8002c70 <__NVIC_EnableIRQ>
}
 8002e0e:	bf00      	nop
 8002e10:	3708      	adds	r7, #8
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bd80      	pop	{r7, pc}

08002e16 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002e16:	b580      	push	{r7, lr}
 8002e18:	b082      	sub	sp, #8
 8002e1a:	af00      	add	r7, sp, #0
 8002e1c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002e1e:	6878      	ldr	r0, [r7, #4]
 8002e20:	f7ff ffa2 	bl	8002d68 <SysTick_Config>
 8002e24:	4603      	mov	r3, r0
}
 8002e26:	4618      	mov	r0, r3
 8002e28:	3708      	adds	r7, #8
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bd80      	pop	{r7, pc}
	...

08002e30 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b086      	sub	sp, #24
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002e38:	2300      	movs	r3, #0
 8002e3a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002e3c:	f7fe ffe8 	bl	8001e10 <HAL_GetTick>
 8002e40:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d101      	bne.n	8002e4c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002e48:	2301      	movs	r3, #1
 8002e4a:	e099      	b.n	8002f80 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2202      	movs	r2, #2
 8002e50:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2200      	movs	r2, #0
 8002e58:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	681a      	ldr	r2, [r3, #0]
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f022 0201 	bic.w	r2, r2, #1
 8002e6a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e6c:	e00f      	b.n	8002e8e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002e6e:	f7fe ffcf 	bl	8001e10 <HAL_GetTick>
 8002e72:	4602      	mov	r2, r0
 8002e74:	693b      	ldr	r3, [r7, #16]
 8002e76:	1ad3      	subs	r3, r2, r3
 8002e78:	2b05      	cmp	r3, #5
 8002e7a:	d908      	bls.n	8002e8e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2220      	movs	r2, #32
 8002e80:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2203      	movs	r2, #3
 8002e86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002e8a:	2303      	movs	r3, #3
 8002e8c:	e078      	b.n	8002f80 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f003 0301 	and.w	r3, r3, #1
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d1e8      	bne.n	8002e6e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002ea4:	697a      	ldr	r2, [r7, #20]
 8002ea6:	4b38      	ldr	r3, [pc, #224]	; (8002f88 <HAL_DMA_Init+0x158>)
 8002ea8:	4013      	ands	r3, r2
 8002eaa:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	685a      	ldr	r2, [r3, #4]
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	689b      	ldr	r3, [r3, #8]
 8002eb4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002eba:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	691b      	ldr	r3, [r3, #16]
 8002ec0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ec6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	699b      	ldr	r3, [r3, #24]
 8002ecc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ed2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6a1b      	ldr	r3, [r3, #32]
 8002ed8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002eda:	697a      	ldr	r2, [r7, #20]
 8002edc:	4313      	orrs	r3, r2
 8002ede:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ee4:	2b04      	cmp	r3, #4
 8002ee6:	d107      	bne.n	8002ef8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ef0:	4313      	orrs	r3, r2
 8002ef2:	697a      	ldr	r2, [r7, #20]
 8002ef4:	4313      	orrs	r3, r2
 8002ef6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	697a      	ldr	r2, [r7, #20]
 8002efe:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	695b      	ldr	r3, [r3, #20]
 8002f06:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002f08:	697b      	ldr	r3, [r7, #20]
 8002f0a:	f023 0307 	bic.w	r3, r3, #7
 8002f0e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f14:	697a      	ldr	r2, [r7, #20]
 8002f16:	4313      	orrs	r3, r2
 8002f18:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f1e:	2b04      	cmp	r3, #4
 8002f20:	d117      	bne.n	8002f52 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f26:	697a      	ldr	r2, [r7, #20]
 8002f28:	4313      	orrs	r3, r2
 8002f2a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d00e      	beq.n	8002f52 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002f34:	6878      	ldr	r0, [r7, #4]
 8002f36:	f000 fb1b 	bl	8003570 <DMA_CheckFifoParam>
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d008      	beq.n	8002f52 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2240      	movs	r2, #64	; 0x40
 8002f44:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2201      	movs	r2, #1
 8002f4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002f4e:	2301      	movs	r3, #1
 8002f50:	e016      	b.n	8002f80 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	697a      	ldr	r2, [r7, #20]
 8002f58:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002f5a:	6878      	ldr	r0, [r7, #4]
 8002f5c:	f000 fad2 	bl	8003504 <DMA_CalcBaseAndBitshift>
 8002f60:	4603      	mov	r3, r0
 8002f62:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f68:	223f      	movs	r2, #63	; 0x3f
 8002f6a:	409a      	lsls	r2, r3
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2200      	movs	r2, #0
 8002f74:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2201      	movs	r2, #1
 8002f7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002f7e:	2300      	movs	r3, #0
}
 8002f80:	4618      	mov	r0, r3
 8002f82:	3718      	adds	r7, #24
 8002f84:	46bd      	mov	sp, r7
 8002f86:	bd80      	pop	{r7, pc}
 8002f88:	f010803f 	.word	0xf010803f

08002f8c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b086      	sub	sp, #24
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	60f8      	str	r0, [r7, #12]
 8002f94:	60b9      	str	r1, [r7, #8]
 8002f96:	607a      	str	r2, [r7, #4]
 8002f98:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fa2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002faa:	2b01      	cmp	r3, #1
 8002fac:	d101      	bne.n	8002fb2 <HAL_DMA_Start_IT+0x26>
 8002fae:	2302      	movs	r3, #2
 8002fb0:	e040      	b.n	8003034 <HAL_DMA_Start_IT+0xa8>
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	2201      	movs	r2, #1
 8002fb6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002fc0:	b2db      	uxtb	r3, r3
 8002fc2:	2b01      	cmp	r3, #1
 8002fc4:	d12f      	bne.n	8003026 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	2202      	movs	r2, #2
 8002fca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	687a      	ldr	r2, [r7, #4]
 8002fd8:	68b9      	ldr	r1, [r7, #8]
 8002fda:	68f8      	ldr	r0, [r7, #12]
 8002fdc:	f000 fa64 	bl	80034a8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fe4:	223f      	movs	r2, #63	; 0x3f
 8002fe6:	409a      	lsls	r2, r3
 8002fe8:	693b      	ldr	r3, [r7, #16]
 8002fea:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	681a      	ldr	r2, [r3, #0]
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f042 0216 	orr.w	r2, r2, #22
 8002ffa:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003000:	2b00      	cmp	r3, #0
 8003002:	d007      	beq.n	8003014 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	681a      	ldr	r2, [r3, #0]
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f042 0208 	orr.w	r2, r2, #8
 8003012:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	681a      	ldr	r2, [r3, #0]
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f042 0201 	orr.w	r2, r2, #1
 8003022:	601a      	str	r2, [r3, #0]
 8003024:	e005      	b.n	8003032 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	2200      	movs	r2, #0
 800302a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800302e:	2302      	movs	r3, #2
 8003030:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003032:	7dfb      	ldrb	r3, [r7, #23]
}
 8003034:	4618      	mov	r0, r3
 8003036:	3718      	adds	r7, #24
 8003038:	46bd      	mov	sp, r7
 800303a:	bd80      	pop	{r7, pc}

0800303c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b084      	sub	sp, #16
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003048:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800304a:	f7fe fee1 	bl	8001e10 <HAL_GetTick>
 800304e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003056:	b2db      	uxtb	r3, r3
 8003058:	2b02      	cmp	r3, #2
 800305a:	d008      	beq.n	800306e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2280      	movs	r2, #128	; 0x80
 8003060:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2200      	movs	r2, #0
 8003066:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800306a:	2301      	movs	r3, #1
 800306c:	e052      	b.n	8003114 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	681a      	ldr	r2, [r3, #0]
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f022 0216 	bic.w	r2, r2, #22
 800307c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	695a      	ldr	r2, [r3, #20]
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800308c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003092:	2b00      	cmp	r3, #0
 8003094:	d103      	bne.n	800309e <HAL_DMA_Abort+0x62>
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800309a:	2b00      	cmp	r3, #0
 800309c:	d007      	beq.n	80030ae <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	681a      	ldr	r2, [r3, #0]
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f022 0208 	bic.w	r2, r2, #8
 80030ac:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	681a      	ldr	r2, [r3, #0]
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f022 0201 	bic.w	r2, r2, #1
 80030bc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80030be:	e013      	b.n	80030e8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80030c0:	f7fe fea6 	bl	8001e10 <HAL_GetTick>
 80030c4:	4602      	mov	r2, r0
 80030c6:	68bb      	ldr	r3, [r7, #8]
 80030c8:	1ad3      	subs	r3, r2, r3
 80030ca:	2b05      	cmp	r3, #5
 80030cc:	d90c      	bls.n	80030e8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2220      	movs	r2, #32
 80030d2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2203      	movs	r2, #3
 80030d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2200      	movs	r2, #0
 80030e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80030e4:	2303      	movs	r3, #3
 80030e6:	e015      	b.n	8003114 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f003 0301 	and.w	r3, r3, #1
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d1e4      	bne.n	80030c0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030fa:	223f      	movs	r2, #63	; 0x3f
 80030fc:	409a      	lsls	r2, r3
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2201      	movs	r2, #1
 8003106:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2200      	movs	r2, #0
 800310e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003112:	2300      	movs	r3, #0
}
 8003114:	4618      	mov	r0, r3
 8003116:	3710      	adds	r7, #16
 8003118:	46bd      	mov	sp, r7
 800311a:	bd80      	pop	{r7, pc}

0800311c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800311c:	b480      	push	{r7}
 800311e:	b083      	sub	sp, #12
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800312a:	b2db      	uxtb	r3, r3
 800312c:	2b02      	cmp	r3, #2
 800312e:	d004      	beq.n	800313a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2280      	movs	r2, #128	; 0x80
 8003134:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003136:	2301      	movs	r3, #1
 8003138:	e00c      	b.n	8003154 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2205      	movs	r2, #5
 800313e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	681a      	ldr	r2, [r3, #0]
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f022 0201 	bic.w	r2, r2, #1
 8003150:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003152:	2300      	movs	r3, #0
}
 8003154:	4618      	mov	r0, r3
 8003156:	370c      	adds	r7, #12
 8003158:	46bd      	mov	sp, r7
 800315a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315e:	4770      	bx	lr

08003160 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b086      	sub	sp, #24
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003168:	2300      	movs	r3, #0
 800316a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800316c:	4b8e      	ldr	r3, [pc, #568]	; (80033a8 <HAL_DMA_IRQHandler+0x248>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4a8e      	ldr	r2, [pc, #568]	; (80033ac <HAL_DMA_IRQHandler+0x24c>)
 8003172:	fba2 2303 	umull	r2, r3, r2, r3
 8003176:	0a9b      	lsrs	r3, r3, #10
 8003178:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800317e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003180:	693b      	ldr	r3, [r7, #16]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800318a:	2208      	movs	r2, #8
 800318c:	409a      	lsls	r2, r3
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	4013      	ands	r3, r2
 8003192:	2b00      	cmp	r3, #0
 8003194:	d01a      	beq.n	80031cc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f003 0304 	and.w	r3, r3, #4
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d013      	beq.n	80031cc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	681a      	ldr	r2, [r3, #0]
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f022 0204 	bic.w	r2, r2, #4
 80031b2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031b8:	2208      	movs	r2, #8
 80031ba:	409a      	lsls	r2, r3
 80031bc:	693b      	ldr	r3, [r7, #16]
 80031be:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031c4:	f043 0201 	orr.w	r2, r3, #1
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031d0:	2201      	movs	r2, #1
 80031d2:	409a      	lsls	r2, r3
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	4013      	ands	r3, r2
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d012      	beq.n	8003202 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	695b      	ldr	r3, [r3, #20]
 80031e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d00b      	beq.n	8003202 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031ee:	2201      	movs	r2, #1
 80031f0:	409a      	lsls	r2, r3
 80031f2:	693b      	ldr	r3, [r7, #16]
 80031f4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031fa:	f043 0202 	orr.w	r2, r3, #2
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003206:	2204      	movs	r2, #4
 8003208:	409a      	lsls	r2, r3
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	4013      	ands	r3, r2
 800320e:	2b00      	cmp	r3, #0
 8003210:	d012      	beq.n	8003238 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f003 0302 	and.w	r3, r3, #2
 800321c:	2b00      	cmp	r3, #0
 800321e:	d00b      	beq.n	8003238 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003224:	2204      	movs	r2, #4
 8003226:	409a      	lsls	r2, r3
 8003228:	693b      	ldr	r3, [r7, #16]
 800322a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003230:	f043 0204 	orr.w	r2, r3, #4
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800323c:	2210      	movs	r2, #16
 800323e:	409a      	lsls	r2, r3
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	4013      	ands	r3, r2
 8003244:	2b00      	cmp	r3, #0
 8003246:	d043      	beq.n	80032d0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f003 0308 	and.w	r3, r3, #8
 8003252:	2b00      	cmp	r3, #0
 8003254:	d03c      	beq.n	80032d0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800325a:	2210      	movs	r2, #16
 800325c:	409a      	lsls	r2, r3
 800325e:	693b      	ldr	r3, [r7, #16]
 8003260:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800326c:	2b00      	cmp	r3, #0
 800326e:	d018      	beq.n	80032a2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800327a:	2b00      	cmp	r3, #0
 800327c:	d108      	bne.n	8003290 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003282:	2b00      	cmp	r3, #0
 8003284:	d024      	beq.n	80032d0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800328a:	6878      	ldr	r0, [r7, #4]
 800328c:	4798      	blx	r3
 800328e:	e01f      	b.n	80032d0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003294:	2b00      	cmp	r3, #0
 8003296:	d01b      	beq.n	80032d0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800329c:	6878      	ldr	r0, [r7, #4]
 800329e:	4798      	blx	r3
 80032a0:	e016      	b.n	80032d0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d107      	bne.n	80032c0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	681a      	ldr	r2, [r3, #0]
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f022 0208 	bic.w	r2, r2, #8
 80032be:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d003      	beq.n	80032d0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032cc:	6878      	ldr	r0, [r7, #4]
 80032ce:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032d4:	2220      	movs	r2, #32
 80032d6:	409a      	lsls	r2, r3
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	4013      	ands	r3, r2
 80032dc:	2b00      	cmp	r3, #0
 80032de:	f000 808f 	beq.w	8003400 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f003 0310 	and.w	r3, r3, #16
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	f000 8087 	beq.w	8003400 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032f6:	2220      	movs	r2, #32
 80032f8:	409a      	lsls	r2, r3
 80032fa:	693b      	ldr	r3, [r7, #16]
 80032fc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003304:	b2db      	uxtb	r3, r3
 8003306:	2b05      	cmp	r3, #5
 8003308:	d136      	bne.n	8003378 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	681a      	ldr	r2, [r3, #0]
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f022 0216 	bic.w	r2, r2, #22
 8003318:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	695a      	ldr	r2, [r3, #20]
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003328:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800332e:	2b00      	cmp	r3, #0
 8003330:	d103      	bne.n	800333a <HAL_DMA_IRQHandler+0x1da>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003336:	2b00      	cmp	r3, #0
 8003338:	d007      	beq.n	800334a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	681a      	ldr	r2, [r3, #0]
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f022 0208 	bic.w	r2, r2, #8
 8003348:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800334e:	223f      	movs	r2, #63	; 0x3f
 8003350:	409a      	lsls	r2, r3
 8003352:	693b      	ldr	r3, [r7, #16]
 8003354:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	2201      	movs	r2, #1
 800335a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2200      	movs	r2, #0
 8003362:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800336a:	2b00      	cmp	r3, #0
 800336c:	d07e      	beq.n	800346c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003372:	6878      	ldr	r0, [r7, #4]
 8003374:	4798      	blx	r3
        }
        return;
 8003376:	e079      	b.n	800346c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003382:	2b00      	cmp	r3, #0
 8003384:	d01d      	beq.n	80033c2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003390:	2b00      	cmp	r3, #0
 8003392:	d10d      	bne.n	80033b0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003398:	2b00      	cmp	r3, #0
 800339a:	d031      	beq.n	8003400 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033a0:	6878      	ldr	r0, [r7, #4]
 80033a2:	4798      	blx	r3
 80033a4:	e02c      	b.n	8003400 <HAL_DMA_IRQHandler+0x2a0>
 80033a6:	bf00      	nop
 80033a8:	20000000 	.word	0x20000000
 80033ac:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d023      	beq.n	8003400 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033bc:	6878      	ldr	r0, [r7, #4]
 80033be:	4798      	blx	r3
 80033c0:	e01e      	b.n	8003400 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d10f      	bne.n	80033f0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	681a      	ldr	r2, [r3, #0]
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f022 0210 	bic.w	r2, r2, #16
 80033de:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2201      	movs	r2, #1
 80033e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2200      	movs	r2, #0
 80033ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d003      	beq.n	8003400 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033fc:	6878      	ldr	r0, [r7, #4]
 80033fe:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003404:	2b00      	cmp	r3, #0
 8003406:	d032      	beq.n	800346e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800340c:	f003 0301 	and.w	r3, r3, #1
 8003410:	2b00      	cmp	r3, #0
 8003412:	d022      	beq.n	800345a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2205      	movs	r2, #5
 8003418:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	681a      	ldr	r2, [r3, #0]
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f022 0201 	bic.w	r2, r2, #1
 800342a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800342c:	68bb      	ldr	r3, [r7, #8]
 800342e:	3301      	adds	r3, #1
 8003430:	60bb      	str	r3, [r7, #8]
 8003432:	697a      	ldr	r2, [r7, #20]
 8003434:	429a      	cmp	r2, r3
 8003436:	d307      	bcc.n	8003448 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f003 0301 	and.w	r3, r3, #1
 8003442:	2b00      	cmp	r3, #0
 8003444:	d1f2      	bne.n	800342c <HAL_DMA_IRQHandler+0x2cc>
 8003446:	e000      	b.n	800344a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003448:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2201      	movs	r2, #1
 800344e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2200      	movs	r2, #0
 8003456:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800345e:	2b00      	cmp	r3, #0
 8003460:	d005      	beq.n	800346e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003466:	6878      	ldr	r0, [r7, #4]
 8003468:	4798      	blx	r3
 800346a:	e000      	b.n	800346e <HAL_DMA_IRQHandler+0x30e>
        return;
 800346c:	bf00      	nop
    }
  }
}
 800346e:	3718      	adds	r7, #24
 8003470:	46bd      	mov	sp, r7
 8003472:	bd80      	pop	{r7, pc}

08003474 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003474:	b480      	push	{r7}
 8003476:	b083      	sub	sp, #12
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003482:	b2db      	uxtb	r3, r3
}
 8003484:	4618      	mov	r0, r3
 8003486:	370c      	adds	r7, #12
 8003488:	46bd      	mov	sp, r7
 800348a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348e:	4770      	bx	lr

08003490 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8003490:	b480      	push	{r7}
 8003492:	b083      	sub	sp, #12
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 800349c:	4618      	mov	r0, r3
 800349e:	370c      	adds	r7, #12
 80034a0:	46bd      	mov	sp, r7
 80034a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a6:	4770      	bx	lr

080034a8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80034a8:	b480      	push	{r7}
 80034aa:	b085      	sub	sp, #20
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	60f8      	str	r0, [r7, #12]
 80034b0:	60b9      	str	r1, [r7, #8]
 80034b2:	607a      	str	r2, [r7, #4]
 80034b4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	681a      	ldr	r2, [r3, #0]
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80034c4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	683a      	ldr	r2, [r7, #0]
 80034cc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	689b      	ldr	r3, [r3, #8]
 80034d2:	2b40      	cmp	r3, #64	; 0x40
 80034d4:	d108      	bne.n	80034e8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	687a      	ldr	r2, [r7, #4]
 80034dc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	68ba      	ldr	r2, [r7, #8]
 80034e4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80034e6:	e007      	b.n	80034f8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	68ba      	ldr	r2, [r7, #8]
 80034ee:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	687a      	ldr	r2, [r7, #4]
 80034f6:	60da      	str	r2, [r3, #12]
}
 80034f8:	bf00      	nop
 80034fa:	3714      	adds	r7, #20
 80034fc:	46bd      	mov	sp, r7
 80034fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003502:	4770      	bx	lr

08003504 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003504:	b480      	push	{r7}
 8003506:	b085      	sub	sp, #20
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	b2db      	uxtb	r3, r3
 8003512:	3b10      	subs	r3, #16
 8003514:	4a14      	ldr	r2, [pc, #80]	; (8003568 <DMA_CalcBaseAndBitshift+0x64>)
 8003516:	fba2 2303 	umull	r2, r3, r2, r3
 800351a:	091b      	lsrs	r3, r3, #4
 800351c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800351e:	4a13      	ldr	r2, [pc, #76]	; (800356c <DMA_CalcBaseAndBitshift+0x68>)
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	4413      	add	r3, r2
 8003524:	781b      	ldrb	r3, [r3, #0]
 8003526:	461a      	mov	r2, r3
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	2b03      	cmp	r3, #3
 8003530:	d909      	bls.n	8003546 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800353a:	f023 0303 	bic.w	r3, r3, #3
 800353e:	1d1a      	adds	r2, r3, #4
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	659a      	str	r2, [r3, #88]	; 0x58
 8003544:	e007      	b.n	8003556 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800354e:	f023 0303 	bic.w	r3, r3, #3
 8003552:	687a      	ldr	r2, [r7, #4]
 8003554:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800355a:	4618      	mov	r0, r3
 800355c:	3714      	adds	r7, #20
 800355e:	46bd      	mov	sp, r7
 8003560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003564:	4770      	bx	lr
 8003566:	bf00      	nop
 8003568:	aaaaaaab 	.word	0xaaaaaaab
 800356c:	0800e320 	.word	0x0800e320

08003570 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003570:	b480      	push	{r7}
 8003572:	b085      	sub	sp, #20
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003578:	2300      	movs	r3, #0
 800357a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003580:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	699b      	ldr	r3, [r3, #24]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d11f      	bne.n	80035ca <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800358a:	68bb      	ldr	r3, [r7, #8]
 800358c:	2b03      	cmp	r3, #3
 800358e:	d856      	bhi.n	800363e <DMA_CheckFifoParam+0xce>
 8003590:	a201      	add	r2, pc, #4	; (adr r2, 8003598 <DMA_CheckFifoParam+0x28>)
 8003592:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003596:	bf00      	nop
 8003598:	080035a9 	.word	0x080035a9
 800359c:	080035bb 	.word	0x080035bb
 80035a0:	080035a9 	.word	0x080035a9
 80035a4:	0800363f 	.word	0x0800363f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035ac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d046      	beq.n	8003642 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80035b4:	2301      	movs	r3, #1
 80035b6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80035b8:	e043      	b.n	8003642 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035be:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80035c2:	d140      	bne.n	8003646 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80035c4:	2301      	movs	r3, #1
 80035c6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80035c8:	e03d      	b.n	8003646 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	699b      	ldr	r3, [r3, #24]
 80035ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80035d2:	d121      	bne.n	8003618 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80035d4:	68bb      	ldr	r3, [r7, #8]
 80035d6:	2b03      	cmp	r3, #3
 80035d8:	d837      	bhi.n	800364a <DMA_CheckFifoParam+0xda>
 80035da:	a201      	add	r2, pc, #4	; (adr r2, 80035e0 <DMA_CheckFifoParam+0x70>)
 80035dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035e0:	080035f1 	.word	0x080035f1
 80035e4:	080035f7 	.word	0x080035f7
 80035e8:	080035f1 	.word	0x080035f1
 80035ec:	08003609 	.word	0x08003609
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80035f0:	2301      	movs	r3, #1
 80035f2:	73fb      	strb	r3, [r7, #15]
      break;
 80035f4:	e030      	b.n	8003658 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035fa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d025      	beq.n	800364e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003602:	2301      	movs	r3, #1
 8003604:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003606:	e022      	b.n	800364e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800360c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003610:	d11f      	bne.n	8003652 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003612:	2301      	movs	r3, #1
 8003614:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003616:	e01c      	b.n	8003652 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003618:	68bb      	ldr	r3, [r7, #8]
 800361a:	2b02      	cmp	r3, #2
 800361c:	d903      	bls.n	8003626 <DMA_CheckFifoParam+0xb6>
 800361e:	68bb      	ldr	r3, [r7, #8]
 8003620:	2b03      	cmp	r3, #3
 8003622:	d003      	beq.n	800362c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003624:	e018      	b.n	8003658 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003626:	2301      	movs	r3, #1
 8003628:	73fb      	strb	r3, [r7, #15]
      break;
 800362a:	e015      	b.n	8003658 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003630:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003634:	2b00      	cmp	r3, #0
 8003636:	d00e      	beq.n	8003656 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003638:	2301      	movs	r3, #1
 800363a:	73fb      	strb	r3, [r7, #15]
      break;
 800363c:	e00b      	b.n	8003656 <DMA_CheckFifoParam+0xe6>
      break;
 800363e:	bf00      	nop
 8003640:	e00a      	b.n	8003658 <DMA_CheckFifoParam+0xe8>
      break;
 8003642:	bf00      	nop
 8003644:	e008      	b.n	8003658 <DMA_CheckFifoParam+0xe8>
      break;
 8003646:	bf00      	nop
 8003648:	e006      	b.n	8003658 <DMA_CheckFifoParam+0xe8>
      break;
 800364a:	bf00      	nop
 800364c:	e004      	b.n	8003658 <DMA_CheckFifoParam+0xe8>
      break;
 800364e:	bf00      	nop
 8003650:	e002      	b.n	8003658 <DMA_CheckFifoParam+0xe8>
      break;   
 8003652:	bf00      	nop
 8003654:	e000      	b.n	8003658 <DMA_CheckFifoParam+0xe8>
      break;
 8003656:	bf00      	nop
    }
  } 
  
  return status; 
 8003658:	7bfb      	ldrb	r3, [r7, #15]
}
 800365a:	4618      	mov	r0, r3
 800365c:	3714      	adds	r7, #20
 800365e:	46bd      	mov	sp, r7
 8003660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003664:	4770      	bx	lr
 8003666:	bf00      	nop

08003668 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003668:	b480      	push	{r7}
 800366a:	b089      	sub	sp, #36	; 0x24
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
 8003670:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003672:	2300      	movs	r3, #0
 8003674:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003676:	2300      	movs	r3, #0
 8003678:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800367a:	2300      	movs	r3, #0
 800367c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800367e:	2300      	movs	r3, #0
 8003680:	61fb      	str	r3, [r7, #28]
 8003682:	e16b      	b.n	800395c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003684:	2201      	movs	r2, #1
 8003686:	69fb      	ldr	r3, [r7, #28]
 8003688:	fa02 f303 	lsl.w	r3, r2, r3
 800368c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	697a      	ldr	r2, [r7, #20]
 8003694:	4013      	ands	r3, r2
 8003696:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003698:	693a      	ldr	r2, [r7, #16]
 800369a:	697b      	ldr	r3, [r7, #20]
 800369c:	429a      	cmp	r2, r3
 800369e:	f040 815a 	bne.w	8003956 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	685b      	ldr	r3, [r3, #4]
 80036a6:	f003 0303 	and.w	r3, r3, #3
 80036aa:	2b01      	cmp	r3, #1
 80036ac:	d005      	beq.n	80036ba <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	685b      	ldr	r3, [r3, #4]
 80036b2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80036b6:	2b02      	cmp	r3, #2
 80036b8:	d130      	bne.n	800371c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	689b      	ldr	r3, [r3, #8]
 80036be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80036c0:	69fb      	ldr	r3, [r7, #28]
 80036c2:	005b      	lsls	r3, r3, #1
 80036c4:	2203      	movs	r2, #3
 80036c6:	fa02 f303 	lsl.w	r3, r2, r3
 80036ca:	43db      	mvns	r3, r3
 80036cc:	69ba      	ldr	r2, [r7, #24]
 80036ce:	4013      	ands	r3, r2
 80036d0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	68da      	ldr	r2, [r3, #12]
 80036d6:	69fb      	ldr	r3, [r7, #28]
 80036d8:	005b      	lsls	r3, r3, #1
 80036da:	fa02 f303 	lsl.w	r3, r2, r3
 80036de:	69ba      	ldr	r2, [r7, #24]
 80036e0:	4313      	orrs	r3, r2
 80036e2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	69ba      	ldr	r2, [r7, #24]
 80036e8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	685b      	ldr	r3, [r3, #4]
 80036ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80036f0:	2201      	movs	r2, #1
 80036f2:	69fb      	ldr	r3, [r7, #28]
 80036f4:	fa02 f303 	lsl.w	r3, r2, r3
 80036f8:	43db      	mvns	r3, r3
 80036fa:	69ba      	ldr	r2, [r7, #24]
 80036fc:	4013      	ands	r3, r2
 80036fe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	685b      	ldr	r3, [r3, #4]
 8003704:	091b      	lsrs	r3, r3, #4
 8003706:	f003 0201 	and.w	r2, r3, #1
 800370a:	69fb      	ldr	r3, [r7, #28]
 800370c:	fa02 f303 	lsl.w	r3, r2, r3
 8003710:	69ba      	ldr	r2, [r7, #24]
 8003712:	4313      	orrs	r3, r2
 8003714:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	69ba      	ldr	r2, [r7, #24]
 800371a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	685b      	ldr	r3, [r3, #4]
 8003720:	f003 0303 	and.w	r3, r3, #3
 8003724:	2b03      	cmp	r3, #3
 8003726:	d017      	beq.n	8003758 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	68db      	ldr	r3, [r3, #12]
 800372c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800372e:	69fb      	ldr	r3, [r7, #28]
 8003730:	005b      	lsls	r3, r3, #1
 8003732:	2203      	movs	r2, #3
 8003734:	fa02 f303 	lsl.w	r3, r2, r3
 8003738:	43db      	mvns	r3, r3
 800373a:	69ba      	ldr	r2, [r7, #24]
 800373c:	4013      	ands	r3, r2
 800373e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	689a      	ldr	r2, [r3, #8]
 8003744:	69fb      	ldr	r3, [r7, #28]
 8003746:	005b      	lsls	r3, r3, #1
 8003748:	fa02 f303 	lsl.w	r3, r2, r3
 800374c:	69ba      	ldr	r2, [r7, #24]
 800374e:	4313      	orrs	r3, r2
 8003750:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	69ba      	ldr	r2, [r7, #24]
 8003756:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	685b      	ldr	r3, [r3, #4]
 800375c:	f003 0303 	and.w	r3, r3, #3
 8003760:	2b02      	cmp	r3, #2
 8003762:	d123      	bne.n	80037ac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003764:	69fb      	ldr	r3, [r7, #28]
 8003766:	08da      	lsrs	r2, r3, #3
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	3208      	adds	r2, #8
 800376c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003770:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003772:	69fb      	ldr	r3, [r7, #28]
 8003774:	f003 0307 	and.w	r3, r3, #7
 8003778:	009b      	lsls	r3, r3, #2
 800377a:	220f      	movs	r2, #15
 800377c:	fa02 f303 	lsl.w	r3, r2, r3
 8003780:	43db      	mvns	r3, r3
 8003782:	69ba      	ldr	r2, [r7, #24]
 8003784:	4013      	ands	r3, r2
 8003786:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	691a      	ldr	r2, [r3, #16]
 800378c:	69fb      	ldr	r3, [r7, #28]
 800378e:	f003 0307 	and.w	r3, r3, #7
 8003792:	009b      	lsls	r3, r3, #2
 8003794:	fa02 f303 	lsl.w	r3, r2, r3
 8003798:	69ba      	ldr	r2, [r7, #24]
 800379a:	4313      	orrs	r3, r2
 800379c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800379e:	69fb      	ldr	r3, [r7, #28]
 80037a0:	08da      	lsrs	r2, r3, #3
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	3208      	adds	r2, #8
 80037a6:	69b9      	ldr	r1, [r7, #24]
 80037a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80037b2:	69fb      	ldr	r3, [r7, #28]
 80037b4:	005b      	lsls	r3, r3, #1
 80037b6:	2203      	movs	r2, #3
 80037b8:	fa02 f303 	lsl.w	r3, r2, r3
 80037bc:	43db      	mvns	r3, r3
 80037be:	69ba      	ldr	r2, [r7, #24]
 80037c0:	4013      	ands	r3, r2
 80037c2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	f003 0203 	and.w	r2, r3, #3
 80037cc:	69fb      	ldr	r3, [r7, #28]
 80037ce:	005b      	lsls	r3, r3, #1
 80037d0:	fa02 f303 	lsl.w	r3, r2, r3
 80037d4:	69ba      	ldr	r2, [r7, #24]
 80037d6:	4313      	orrs	r3, r2
 80037d8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	69ba      	ldr	r2, [r7, #24]
 80037de:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	685b      	ldr	r3, [r3, #4]
 80037e4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	f000 80b4 	beq.w	8003956 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80037ee:	2300      	movs	r3, #0
 80037f0:	60fb      	str	r3, [r7, #12]
 80037f2:	4b60      	ldr	r3, [pc, #384]	; (8003974 <HAL_GPIO_Init+0x30c>)
 80037f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037f6:	4a5f      	ldr	r2, [pc, #380]	; (8003974 <HAL_GPIO_Init+0x30c>)
 80037f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80037fc:	6453      	str	r3, [r2, #68]	; 0x44
 80037fe:	4b5d      	ldr	r3, [pc, #372]	; (8003974 <HAL_GPIO_Init+0x30c>)
 8003800:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003802:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003806:	60fb      	str	r3, [r7, #12]
 8003808:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800380a:	4a5b      	ldr	r2, [pc, #364]	; (8003978 <HAL_GPIO_Init+0x310>)
 800380c:	69fb      	ldr	r3, [r7, #28]
 800380e:	089b      	lsrs	r3, r3, #2
 8003810:	3302      	adds	r3, #2
 8003812:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003816:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003818:	69fb      	ldr	r3, [r7, #28]
 800381a:	f003 0303 	and.w	r3, r3, #3
 800381e:	009b      	lsls	r3, r3, #2
 8003820:	220f      	movs	r2, #15
 8003822:	fa02 f303 	lsl.w	r3, r2, r3
 8003826:	43db      	mvns	r3, r3
 8003828:	69ba      	ldr	r2, [r7, #24]
 800382a:	4013      	ands	r3, r2
 800382c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	4a52      	ldr	r2, [pc, #328]	; (800397c <HAL_GPIO_Init+0x314>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d02b      	beq.n	800388e <HAL_GPIO_Init+0x226>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	4a51      	ldr	r2, [pc, #324]	; (8003980 <HAL_GPIO_Init+0x318>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d025      	beq.n	800388a <HAL_GPIO_Init+0x222>
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	4a50      	ldr	r2, [pc, #320]	; (8003984 <HAL_GPIO_Init+0x31c>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d01f      	beq.n	8003886 <HAL_GPIO_Init+0x21e>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	4a4f      	ldr	r2, [pc, #316]	; (8003988 <HAL_GPIO_Init+0x320>)
 800384a:	4293      	cmp	r3, r2
 800384c:	d019      	beq.n	8003882 <HAL_GPIO_Init+0x21a>
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	4a4e      	ldr	r2, [pc, #312]	; (800398c <HAL_GPIO_Init+0x324>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d013      	beq.n	800387e <HAL_GPIO_Init+0x216>
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	4a4d      	ldr	r2, [pc, #308]	; (8003990 <HAL_GPIO_Init+0x328>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d00d      	beq.n	800387a <HAL_GPIO_Init+0x212>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	4a4c      	ldr	r2, [pc, #304]	; (8003994 <HAL_GPIO_Init+0x32c>)
 8003862:	4293      	cmp	r3, r2
 8003864:	d007      	beq.n	8003876 <HAL_GPIO_Init+0x20e>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	4a4b      	ldr	r2, [pc, #300]	; (8003998 <HAL_GPIO_Init+0x330>)
 800386a:	4293      	cmp	r3, r2
 800386c:	d101      	bne.n	8003872 <HAL_GPIO_Init+0x20a>
 800386e:	2307      	movs	r3, #7
 8003870:	e00e      	b.n	8003890 <HAL_GPIO_Init+0x228>
 8003872:	2308      	movs	r3, #8
 8003874:	e00c      	b.n	8003890 <HAL_GPIO_Init+0x228>
 8003876:	2306      	movs	r3, #6
 8003878:	e00a      	b.n	8003890 <HAL_GPIO_Init+0x228>
 800387a:	2305      	movs	r3, #5
 800387c:	e008      	b.n	8003890 <HAL_GPIO_Init+0x228>
 800387e:	2304      	movs	r3, #4
 8003880:	e006      	b.n	8003890 <HAL_GPIO_Init+0x228>
 8003882:	2303      	movs	r3, #3
 8003884:	e004      	b.n	8003890 <HAL_GPIO_Init+0x228>
 8003886:	2302      	movs	r3, #2
 8003888:	e002      	b.n	8003890 <HAL_GPIO_Init+0x228>
 800388a:	2301      	movs	r3, #1
 800388c:	e000      	b.n	8003890 <HAL_GPIO_Init+0x228>
 800388e:	2300      	movs	r3, #0
 8003890:	69fa      	ldr	r2, [r7, #28]
 8003892:	f002 0203 	and.w	r2, r2, #3
 8003896:	0092      	lsls	r2, r2, #2
 8003898:	4093      	lsls	r3, r2
 800389a:	69ba      	ldr	r2, [r7, #24]
 800389c:	4313      	orrs	r3, r2
 800389e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80038a0:	4935      	ldr	r1, [pc, #212]	; (8003978 <HAL_GPIO_Init+0x310>)
 80038a2:	69fb      	ldr	r3, [r7, #28]
 80038a4:	089b      	lsrs	r3, r3, #2
 80038a6:	3302      	adds	r3, #2
 80038a8:	69ba      	ldr	r2, [r7, #24]
 80038aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80038ae:	4b3b      	ldr	r3, [pc, #236]	; (800399c <HAL_GPIO_Init+0x334>)
 80038b0:	689b      	ldr	r3, [r3, #8]
 80038b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038b4:	693b      	ldr	r3, [r7, #16]
 80038b6:	43db      	mvns	r3, r3
 80038b8:	69ba      	ldr	r2, [r7, #24]
 80038ba:	4013      	ands	r3, r2
 80038bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	685b      	ldr	r3, [r3, #4]
 80038c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d003      	beq.n	80038d2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80038ca:	69ba      	ldr	r2, [r7, #24]
 80038cc:	693b      	ldr	r3, [r7, #16]
 80038ce:	4313      	orrs	r3, r2
 80038d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80038d2:	4a32      	ldr	r2, [pc, #200]	; (800399c <HAL_GPIO_Init+0x334>)
 80038d4:	69bb      	ldr	r3, [r7, #24]
 80038d6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80038d8:	4b30      	ldr	r3, [pc, #192]	; (800399c <HAL_GPIO_Init+0x334>)
 80038da:	68db      	ldr	r3, [r3, #12]
 80038dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038de:	693b      	ldr	r3, [r7, #16]
 80038e0:	43db      	mvns	r3, r3
 80038e2:	69ba      	ldr	r2, [r7, #24]
 80038e4:	4013      	ands	r3, r2
 80038e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	685b      	ldr	r3, [r3, #4]
 80038ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d003      	beq.n	80038fc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80038f4:	69ba      	ldr	r2, [r7, #24]
 80038f6:	693b      	ldr	r3, [r7, #16]
 80038f8:	4313      	orrs	r3, r2
 80038fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80038fc:	4a27      	ldr	r2, [pc, #156]	; (800399c <HAL_GPIO_Init+0x334>)
 80038fe:	69bb      	ldr	r3, [r7, #24]
 8003900:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003902:	4b26      	ldr	r3, [pc, #152]	; (800399c <HAL_GPIO_Init+0x334>)
 8003904:	685b      	ldr	r3, [r3, #4]
 8003906:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003908:	693b      	ldr	r3, [r7, #16]
 800390a:	43db      	mvns	r3, r3
 800390c:	69ba      	ldr	r2, [r7, #24]
 800390e:	4013      	ands	r3, r2
 8003910:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	685b      	ldr	r3, [r3, #4]
 8003916:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800391a:	2b00      	cmp	r3, #0
 800391c:	d003      	beq.n	8003926 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800391e:	69ba      	ldr	r2, [r7, #24]
 8003920:	693b      	ldr	r3, [r7, #16]
 8003922:	4313      	orrs	r3, r2
 8003924:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003926:	4a1d      	ldr	r2, [pc, #116]	; (800399c <HAL_GPIO_Init+0x334>)
 8003928:	69bb      	ldr	r3, [r7, #24]
 800392a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800392c:	4b1b      	ldr	r3, [pc, #108]	; (800399c <HAL_GPIO_Init+0x334>)
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003932:	693b      	ldr	r3, [r7, #16]
 8003934:	43db      	mvns	r3, r3
 8003936:	69ba      	ldr	r2, [r7, #24]
 8003938:	4013      	ands	r3, r2
 800393a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	685b      	ldr	r3, [r3, #4]
 8003940:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003944:	2b00      	cmp	r3, #0
 8003946:	d003      	beq.n	8003950 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003948:	69ba      	ldr	r2, [r7, #24]
 800394a:	693b      	ldr	r3, [r7, #16]
 800394c:	4313      	orrs	r3, r2
 800394e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003950:	4a12      	ldr	r2, [pc, #72]	; (800399c <HAL_GPIO_Init+0x334>)
 8003952:	69bb      	ldr	r3, [r7, #24]
 8003954:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003956:	69fb      	ldr	r3, [r7, #28]
 8003958:	3301      	adds	r3, #1
 800395a:	61fb      	str	r3, [r7, #28]
 800395c:	69fb      	ldr	r3, [r7, #28]
 800395e:	2b0f      	cmp	r3, #15
 8003960:	f67f ae90 	bls.w	8003684 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003964:	bf00      	nop
 8003966:	bf00      	nop
 8003968:	3724      	adds	r7, #36	; 0x24
 800396a:	46bd      	mov	sp, r7
 800396c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003970:	4770      	bx	lr
 8003972:	bf00      	nop
 8003974:	40023800 	.word	0x40023800
 8003978:	40013800 	.word	0x40013800
 800397c:	40020000 	.word	0x40020000
 8003980:	40020400 	.word	0x40020400
 8003984:	40020800 	.word	0x40020800
 8003988:	40020c00 	.word	0x40020c00
 800398c:	40021000 	.word	0x40021000
 8003990:	40021400 	.word	0x40021400
 8003994:	40021800 	.word	0x40021800
 8003998:	40021c00 	.word	0x40021c00
 800399c:	40013c00 	.word	0x40013c00

080039a0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80039a0:	b480      	push	{r7}
 80039a2:	b085      	sub	sp, #20
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
 80039a8:	460b      	mov	r3, r1
 80039aa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	691a      	ldr	r2, [r3, #16]
 80039b0:	887b      	ldrh	r3, [r7, #2]
 80039b2:	4013      	ands	r3, r2
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d002      	beq.n	80039be <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80039b8:	2301      	movs	r3, #1
 80039ba:	73fb      	strb	r3, [r7, #15]
 80039bc:	e001      	b.n	80039c2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80039be:	2300      	movs	r3, #0
 80039c0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80039c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80039c4:	4618      	mov	r0, r3
 80039c6:	3714      	adds	r7, #20
 80039c8:	46bd      	mov	sp, r7
 80039ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ce:	4770      	bx	lr

080039d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80039d0:	b480      	push	{r7}
 80039d2:	b083      	sub	sp, #12
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
 80039d8:	460b      	mov	r3, r1
 80039da:	807b      	strh	r3, [r7, #2]
 80039dc:	4613      	mov	r3, r2
 80039de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80039e0:	787b      	ldrb	r3, [r7, #1]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d003      	beq.n	80039ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80039e6:	887a      	ldrh	r2, [r7, #2]
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80039ec:	e003      	b.n	80039f6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80039ee:	887b      	ldrh	r3, [r7, #2]
 80039f0:	041a      	lsls	r2, r3, #16
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	619a      	str	r2, [r3, #24]
}
 80039f6:	bf00      	nop
 80039f8:	370c      	adds	r7, #12
 80039fa:	46bd      	mov	sp, r7
 80039fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a00:	4770      	bx	lr
	...

08003a04 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b084      	sub	sp, #16
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d101      	bne.n	8003a16 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003a12:	2301      	movs	r3, #1
 8003a14:	e12b      	b.n	8003c6e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a1c:	b2db      	uxtb	r3, r3
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d106      	bne.n	8003a30 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2200      	movs	r2, #0
 8003a26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003a2a:	6878      	ldr	r0, [r7, #4]
 8003a2c:	f7fd f8ea 	bl	8000c04 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2224      	movs	r2, #36	; 0x24
 8003a34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	681a      	ldr	r2, [r3, #0]
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f022 0201 	bic.w	r2, r2, #1
 8003a46:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	681a      	ldr	r2, [r3, #0]
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003a56:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	681a      	ldr	r2, [r3, #0]
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003a66:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003a68:	f002 f952 	bl	8005d10 <HAL_RCC_GetPCLK1Freq>
 8003a6c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	685b      	ldr	r3, [r3, #4]
 8003a72:	4a81      	ldr	r2, [pc, #516]	; (8003c78 <HAL_I2C_Init+0x274>)
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d807      	bhi.n	8003a88 <HAL_I2C_Init+0x84>
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	4a80      	ldr	r2, [pc, #512]	; (8003c7c <HAL_I2C_Init+0x278>)
 8003a7c:	4293      	cmp	r3, r2
 8003a7e:	bf94      	ite	ls
 8003a80:	2301      	movls	r3, #1
 8003a82:	2300      	movhi	r3, #0
 8003a84:	b2db      	uxtb	r3, r3
 8003a86:	e006      	b.n	8003a96 <HAL_I2C_Init+0x92>
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	4a7d      	ldr	r2, [pc, #500]	; (8003c80 <HAL_I2C_Init+0x27c>)
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	bf94      	ite	ls
 8003a90:	2301      	movls	r3, #1
 8003a92:	2300      	movhi	r3, #0
 8003a94:	b2db      	uxtb	r3, r3
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d001      	beq.n	8003a9e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	e0e7      	b.n	8003c6e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	4a78      	ldr	r2, [pc, #480]	; (8003c84 <HAL_I2C_Init+0x280>)
 8003aa2:	fba2 2303 	umull	r2, r3, r2, r3
 8003aa6:	0c9b      	lsrs	r3, r3, #18
 8003aa8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	685b      	ldr	r3, [r3, #4]
 8003ab0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	68ba      	ldr	r2, [r7, #8]
 8003aba:	430a      	orrs	r2, r1
 8003abc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	6a1b      	ldr	r3, [r3, #32]
 8003ac4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	685b      	ldr	r3, [r3, #4]
 8003acc:	4a6a      	ldr	r2, [pc, #424]	; (8003c78 <HAL_I2C_Init+0x274>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d802      	bhi.n	8003ad8 <HAL_I2C_Init+0xd4>
 8003ad2:	68bb      	ldr	r3, [r7, #8]
 8003ad4:	3301      	adds	r3, #1
 8003ad6:	e009      	b.n	8003aec <HAL_I2C_Init+0xe8>
 8003ad8:	68bb      	ldr	r3, [r7, #8]
 8003ada:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003ade:	fb02 f303 	mul.w	r3, r2, r3
 8003ae2:	4a69      	ldr	r2, [pc, #420]	; (8003c88 <HAL_I2C_Init+0x284>)
 8003ae4:	fba2 2303 	umull	r2, r3, r2, r3
 8003ae8:	099b      	lsrs	r3, r3, #6
 8003aea:	3301      	adds	r3, #1
 8003aec:	687a      	ldr	r2, [r7, #4]
 8003aee:	6812      	ldr	r2, [r2, #0]
 8003af0:	430b      	orrs	r3, r1
 8003af2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	69db      	ldr	r3, [r3, #28]
 8003afa:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003afe:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	685b      	ldr	r3, [r3, #4]
 8003b06:	495c      	ldr	r1, [pc, #368]	; (8003c78 <HAL_I2C_Init+0x274>)
 8003b08:	428b      	cmp	r3, r1
 8003b0a:	d819      	bhi.n	8003b40 <HAL_I2C_Init+0x13c>
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	1e59      	subs	r1, r3, #1
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	685b      	ldr	r3, [r3, #4]
 8003b14:	005b      	lsls	r3, r3, #1
 8003b16:	fbb1 f3f3 	udiv	r3, r1, r3
 8003b1a:	1c59      	adds	r1, r3, #1
 8003b1c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003b20:	400b      	ands	r3, r1
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d00a      	beq.n	8003b3c <HAL_I2C_Init+0x138>
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	1e59      	subs	r1, r3, #1
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	685b      	ldr	r3, [r3, #4]
 8003b2e:	005b      	lsls	r3, r3, #1
 8003b30:	fbb1 f3f3 	udiv	r3, r1, r3
 8003b34:	3301      	adds	r3, #1
 8003b36:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b3a:	e051      	b.n	8003be0 <HAL_I2C_Init+0x1dc>
 8003b3c:	2304      	movs	r3, #4
 8003b3e:	e04f      	b.n	8003be0 <HAL_I2C_Init+0x1dc>
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	689b      	ldr	r3, [r3, #8]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d111      	bne.n	8003b6c <HAL_I2C_Init+0x168>
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	1e58      	subs	r0, r3, #1
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6859      	ldr	r1, [r3, #4]
 8003b50:	460b      	mov	r3, r1
 8003b52:	005b      	lsls	r3, r3, #1
 8003b54:	440b      	add	r3, r1
 8003b56:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b5a:	3301      	adds	r3, #1
 8003b5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	bf0c      	ite	eq
 8003b64:	2301      	moveq	r3, #1
 8003b66:	2300      	movne	r3, #0
 8003b68:	b2db      	uxtb	r3, r3
 8003b6a:	e012      	b.n	8003b92 <HAL_I2C_Init+0x18e>
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	1e58      	subs	r0, r3, #1
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6859      	ldr	r1, [r3, #4]
 8003b74:	460b      	mov	r3, r1
 8003b76:	009b      	lsls	r3, r3, #2
 8003b78:	440b      	add	r3, r1
 8003b7a:	0099      	lsls	r1, r3, #2
 8003b7c:	440b      	add	r3, r1
 8003b7e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b82:	3301      	adds	r3, #1
 8003b84:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	bf0c      	ite	eq
 8003b8c:	2301      	moveq	r3, #1
 8003b8e:	2300      	movne	r3, #0
 8003b90:	b2db      	uxtb	r3, r3
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d001      	beq.n	8003b9a <HAL_I2C_Init+0x196>
 8003b96:	2301      	movs	r3, #1
 8003b98:	e022      	b.n	8003be0 <HAL_I2C_Init+0x1dc>
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	689b      	ldr	r3, [r3, #8]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d10e      	bne.n	8003bc0 <HAL_I2C_Init+0x1bc>
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	1e58      	subs	r0, r3, #1
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6859      	ldr	r1, [r3, #4]
 8003baa:	460b      	mov	r3, r1
 8003bac:	005b      	lsls	r3, r3, #1
 8003bae:	440b      	add	r3, r1
 8003bb0:	fbb0 f3f3 	udiv	r3, r0, r3
 8003bb4:	3301      	adds	r3, #1
 8003bb6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003bba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003bbe:	e00f      	b.n	8003be0 <HAL_I2C_Init+0x1dc>
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	1e58      	subs	r0, r3, #1
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6859      	ldr	r1, [r3, #4]
 8003bc8:	460b      	mov	r3, r1
 8003bca:	009b      	lsls	r3, r3, #2
 8003bcc:	440b      	add	r3, r1
 8003bce:	0099      	lsls	r1, r3, #2
 8003bd0:	440b      	add	r3, r1
 8003bd2:	fbb0 f3f3 	udiv	r3, r0, r3
 8003bd6:	3301      	adds	r3, #1
 8003bd8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003bdc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003be0:	6879      	ldr	r1, [r7, #4]
 8003be2:	6809      	ldr	r1, [r1, #0]
 8003be4:	4313      	orrs	r3, r2
 8003be6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	69da      	ldr	r2, [r3, #28]
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6a1b      	ldr	r3, [r3, #32]
 8003bfa:	431a      	orrs	r2, r3
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	430a      	orrs	r2, r1
 8003c02:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	689b      	ldr	r3, [r3, #8]
 8003c0a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003c0e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003c12:	687a      	ldr	r2, [r7, #4]
 8003c14:	6911      	ldr	r1, [r2, #16]
 8003c16:	687a      	ldr	r2, [r7, #4]
 8003c18:	68d2      	ldr	r2, [r2, #12]
 8003c1a:	4311      	orrs	r1, r2
 8003c1c:	687a      	ldr	r2, [r7, #4]
 8003c1e:	6812      	ldr	r2, [r2, #0]
 8003c20:	430b      	orrs	r3, r1
 8003c22:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	68db      	ldr	r3, [r3, #12]
 8003c2a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	695a      	ldr	r2, [r3, #20]
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	699b      	ldr	r3, [r3, #24]
 8003c36:	431a      	orrs	r2, r3
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	430a      	orrs	r2, r1
 8003c3e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	681a      	ldr	r2, [r3, #0]
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f042 0201 	orr.w	r2, r2, #1
 8003c4e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2200      	movs	r2, #0
 8003c54:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2220      	movs	r2, #32
 8003c5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2200      	movs	r2, #0
 8003c62:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2200      	movs	r2, #0
 8003c68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003c6c:	2300      	movs	r3, #0
}
 8003c6e:	4618      	mov	r0, r3
 8003c70:	3710      	adds	r7, #16
 8003c72:	46bd      	mov	sp, r7
 8003c74:	bd80      	pop	{r7, pc}
 8003c76:	bf00      	nop
 8003c78:	000186a0 	.word	0x000186a0
 8003c7c:	001e847f 	.word	0x001e847f
 8003c80:	003d08ff 	.word	0x003d08ff
 8003c84:	431bde83 	.word	0x431bde83
 8003c88:	10624dd3 	.word	0x10624dd3

08003c8c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b088      	sub	sp, #32
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8003c94:	2300      	movs	r3, #0
 8003c96:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	685b      	ldr	r3, [r3, #4]
 8003c9e:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ca4:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003cac:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cb4:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003cb6:	7bfb      	ldrb	r3, [r7, #15]
 8003cb8:	2b10      	cmp	r3, #16
 8003cba:	d003      	beq.n	8003cc4 <HAL_I2C_EV_IRQHandler+0x38>
 8003cbc:	7bfb      	ldrb	r3, [r7, #15]
 8003cbe:	2b40      	cmp	r3, #64	; 0x40
 8003cc0:	f040 80c1 	bne.w	8003e46 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	699b      	ldr	r3, [r3, #24]
 8003cca:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	695b      	ldr	r3, [r3, #20]
 8003cd2:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8003cd4:	69fb      	ldr	r3, [r7, #28]
 8003cd6:	f003 0301 	and.w	r3, r3, #1
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d10d      	bne.n	8003cfa <HAL_I2C_EV_IRQHandler+0x6e>
 8003cde:	693b      	ldr	r3, [r7, #16]
 8003ce0:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8003ce4:	d003      	beq.n	8003cee <HAL_I2C_EV_IRQHandler+0x62>
 8003ce6:	693b      	ldr	r3, [r7, #16]
 8003ce8:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8003cec:	d101      	bne.n	8003cf2 <HAL_I2C_EV_IRQHandler+0x66>
 8003cee:	2301      	movs	r3, #1
 8003cf0:	e000      	b.n	8003cf4 <HAL_I2C_EV_IRQHandler+0x68>
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	2b01      	cmp	r3, #1
 8003cf6:	f000 8132 	beq.w	8003f5e <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003cfa:	69fb      	ldr	r3, [r7, #28]
 8003cfc:	f003 0301 	and.w	r3, r3, #1
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d00c      	beq.n	8003d1e <HAL_I2C_EV_IRQHandler+0x92>
 8003d04:	697b      	ldr	r3, [r7, #20]
 8003d06:	0a5b      	lsrs	r3, r3, #9
 8003d08:	f003 0301 	and.w	r3, r3, #1
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d006      	beq.n	8003d1e <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8003d10:	6878      	ldr	r0, [r7, #4]
 8003d12:	f001 fb65 	bl	80053e0 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8003d16:	6878      	ldr	r0, [r7, #4]
 8003d18:	f000 fcdc 	bl	80046d4 <I2C_Master_SB>
 8003d1c:	e092      	b.n	8003e44 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003d1e:	69fb      	ldr	r3, [r7, #28]
 8003d20:	08db      	lsrs	r3, r3, #3
 8003d22:	f003 0301 	and.w	r3, r3, #1
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d009      	beq.n	8003d3e <HAL_I2C_EV_IRQHandler+0xb2>
 8003d2a:	697b      	ldr	r3, [r7, #20]
 8003d2c:	0a5b      	lsrs	r3, r3, #9
 8003d2e:	f003 0301 	and.w	r3, r3, #1
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d003      	beq.n	8003d3e <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8003d36:	6878      	ldr	r0, [r7, #4]
 8003d38:	f000 fd52 	bl	80047e0 <I2C_Master_ADD10>
 8003d3c:	e082      	b.n	8003e44 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003d3e:	69fb      	ldr	r3, [r7, #28]
 8003d40:	085b      	lsrs	r3, r3, #1
 8003d42:	f003 0301 	and.w	r3, r3, #1
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d009      	beq.n	8003d5e <HAL_I2C_EV_IRQHandler+0xd2>
 8003d4a:	697b      	ldr	r3, [r7, #20]
 8003d4c:	0a5b      	lsrs	r3, r3, #9
 8003d4e:	f003 0301 	and.w	r3, r3, #1
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d003      	beq.n	8003d5e <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8003d56:	6878      	ldr	r0, [r7, #4]
 8003d58:	f000 fd6c 	bl	8004834 <I2C_Master_ADDR>
 8003d5c:	e072      	b.n	8003e44 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8003d5e:	69bb      	ldr	r3, [r7, #24]
 8003d60:	089b      	lsrs	r3, r3, #2
 8003d62:	f003 0301 	and.w	r3, r3, #1
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d03b      	beq.n	8003de2 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	685b      	ldr	r3, [r3, #4]
 8003d70:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d74:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d78:	f000 80f3 	beq.w	8003f62 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003d7c:	69fb      	ldr	r3, [r7, #28]
 8003d7e:	09db      	lsrs	r3, r3, #7
 8003d80:	f003 0301 	and.w	r3, r3, #1
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d00f      	beq.n	8003da8 <HAL_I2C_EV_IRQHandler+0x11c>
 8003d88:	697b      	ldr	r3, [r7, #20]
 8003d8a:	0a9b      	lsrs	r3, r3, #10
 8003d8c:	f003 0301 	and.w	r3, r3, #1
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d009      	beq.n	8003da8 <HAL_I2C_EV_IRQHandler+0x11c>
 8003d94:	69fb      	ldr	r3, [r7, #28]
 8003d96:	089b      	lsrs	r3, r3, #2
 8003d98:	f003 0301 	and.w	r3, r3, #1
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d103      	bne.n	8003da8 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8003da0:	6878      	ldr	r0, [r7, #4]
 8003da2:	f000 f94c 	bl	800403e <I2C_MasterTransmit_TXE>
 8003da6:	e04d      	b.n	8003e44 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003da8:	69fb      	ldr	r3, [r7, #28]
 8003daa:	089b      	lsrs	r3, r3, #2
 8003dac:	f003 0301 	and.w	r3, r3, #1
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	f000 80d6 	beq.w	8003f62 <HAL_I2C_EV_IRQHandler+0x2d6>
 8003db6:	697b      	ldr	r3, [r7, #20]
 8003db8:	0a5b      	lsrs	r3, r3, #9
 8003dba:	f003 0301 	and.w	r3, r3, #1
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	f000 80cf 	beq.w	8003f62 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003dc4:	7bbb      	ldrb	r3, [r7, #14]
 8003dc6:	2b21      	cmp	r3, #33	; 0x21
 8003dc8:	d103      	bne.n	8003dd2 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8003dca:	6878      	ldr	r0, [r7, #4]
 8003dcc:	f000 f9d3 	bl	8004176 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003dd0:	e0c7      	b.n	8003f62 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8003dd2:	7bfb      	ldrb	r3, [r7, #15]
 8003dd4:	2b40      	cmp	r3, #64	; 0x40
 8003dd6:	f040 80c4 	bne.w	8003f62 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003dda:	6878      	ldr	r0, [r7, #4]
 8003ddc:	f000 fa41 	bl	8004262 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003de0:	e0bf      	b.n	8003f62 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	685b      	ldr	r3, [r3, #4]
 8003de8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003dec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003df0:	f000 80b7 	beq.w	8003f62 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003df4:	69fb      	ldr	r3, [r7, #28]
 8003df6:	099b      	lsrs	r3, r3, #6
 8003df8:	f003 0301 	and.w	r3, r3, #1
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d00f      	beq.n	8003e20 <HAL_I2C_EV_IRQHandler+0x194>
 8003e00:	697b      	ldr	r3, [r7, #20]
 8003e02:	0a9b      	lsrs	r3, r3, #10
 8003e04:	f003 0301 	and.w	r3, r3, #1
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d009      	beq.n	8003e20 <HAL_I2C_EV_IRQHandler+0x194>
 8003e0c:	69fb      	ldr	r3, [r7, #28]
 8003e0e:	089b      	lsrs	r3, r3, #2
 8003e10:	f003 0301 	and.w	r3, r3, #1
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d103      	bne.n	8003e20 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8003e18:	6878      	ldr	r0, [r7, #4]
 8003e1a:	f000 fab6 	bl	800438a <I2C_MasterReceive_RXNE>
 8003e1e:	e011      	b.n	8003e44 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003e20:	69fb      	ldr	r3, [r7, #28]
 8003e22:	089b      	lsrs	r3, r3, #2
 8003e24:	f003 0301 	and.w	r3, r3, #1
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	f000 809a 	beq.w	8003f62 <HAL_I2C_EV_IRQHandler+0x2d6>
 8003e2e:	697b      	ldr	r3, [r7, #20]
 8003e30:	0a5b      	lsrs	r3, r3, #9
 8003e32:	f003 0301 	and.w	r3, r3, #1
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	f000 8093 	beq.w	8003f62 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8003e3c:	6878      	ldr	r0, [r7, #4]
 8003e3e:	f000 fb5f 	bl	8004500 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003e42:	e08e      	b.n	8003f62 <HAL_I2C_EV_IRQHandler+0x2d6>
 8003e44:	e08d      	b.n	8003f62 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d004      	beq.n	8003e58 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	695b      	ldr	r3, [r3, #20]
 8003e54:	61fb      	str	r3, [r7, #28]
 8003e56:	e007      	b.n	8003e68 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	699b      	ldr	r3, [r3, #24]
 8003e5e:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	695b      	ldr	r3, [r3, #20]
 8003e66:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003e68:	69fb      	ldr	r3, [r7, #28]
 8003e6a:	085b      	lsrs	r3, r3, #1
 8003e6c:	f003 0301 	and.w	r3, r3, #1
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d012      	beq.n	8003e9a <HAL_I2C_EV_IRQHandler+0x20e>
 8003e74:	697b      	ldr	r3, [r7, #20]
 8003e76:	0a5b      	lsrs	r3, r3, #9
 8003e78:	f003 0301 	and.w	r3, r3, #1
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d00c      	beq.n	8003e9a <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d003      	beq.n	8003e90 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	699b      	ldr	r3, [r3, #24]
 8003e8e:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8003e90:	69b9      	ldr	r1, [r7, #24]
 8003e92:	6878      	ldr	r0, [r7, #4]
 8003e94:	f000 ff1d 	bl	8004cd2 <I2C_Slave_ADDR>
 8003e98:	e066      	b.n	8003f68 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003e9a:	69fb      	ldr	r3, [r7, #28]
 8003e9c:	091b      	lsrs	r3, r3, #4
 8003e9e:	f003 0301 	and.w	r3, r3, #1
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d009      	beq.n	8003eba <HAL_I2C_EV_IRQHandler+0x22e>
 8003ea6:	697b      	ldr	r3, [r7, #20]
 8003ea8:	0a5b      	lsrs	r3, r3, #9
 8003eaa:	f003 0301 	and.w	r3, r3, #1
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d003      	beq.n	8003eba <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8003eb2:	6878      	ldr	r0, [r7, #4]
 8003eb4:	f000 ff58 	bl	8004d68 <I2C_Slave_STOPF>
 8003eb8:	e056      	b.n	8003f68 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003eba:	7bbb      	ldrb	r3, [r7, #14]
 8003ebc:	2b21      	cmp	r3, #33	; 0x21
 8003ebe:	d002      	beq.n	8003ec6 <HAL_I2C_EV_IRQHandler+0x23a>
 8003ec0:	7bbb      	ldrb	r3, [r7, #14]
 8003ec2:	2b29      	cmp	r3, #41	; 0x29
 8003ec4:	d125      	bne.n	8003f12 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003ec6:	69fb      	ldr	r3, [r7, #28]
 8003ec8:	09db      	lsrs	r3, r3, #7
 8003eca:	f003 0301 	and.w	r3, r3, #1
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d00f      	beq.n	8003ef2 <HAL_I2C_EV_IRQHandler+0x266>
 8003ed2:	697b      	ldr	r3, [r7, #20]
 8003ed4:	0a9b      	lsrs	r3, r3, #10
 8003ed6:	f003 0301 	and.w	r3, r3, #1
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d009      	beq.n	8003ef2 <HAL_I2C_EV_IRQHandler+0x266>
 8003ede:	69fb      	ldr	r3, [r7, #28]
 8003ee0:	089b      	lsrs	r3, r3, #2
 8003ee2:	f003 0301 	and.w	r3, r3, #1
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d103      	bne.n	8003ef2 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8003eea:	6878      	ldr	r0, [r7, #4]
 8003eec:	f000 fe33 	bl	8004b56 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003ef0:	e039      	b.n	8003f66 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003ef2:	69fb      	ldr	r3, [r7, #28]
 8003ef4:	089b      	lsrs	r3, r3, #2
 8003ef6:	f003 0301 	and.w	r3, r3, #1
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d033      	beq.n	8003f66 <HAL_I2C_EV_IRQHandler+0x2da>
 8003efe:	697b      	ldr	r3, [r7, #20]
 8003f00:	0a5b      	lsrs	r3, r3, #9
 8003f02:	f003 0301 	and.w	r3, r3, #1
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d02d      	beq.n	8003f66 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8003f0a:	6878      	ldr	r0, [r7, #4]
 8003f0c:	f000 fe60 	bl	8004bd0 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003f10:	e029      	b.n	8003f66 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003f12:	69fb      	ldr	r3, [r7, #28]
 8003f14:	099b      	lsrs	r3, r3, #6
 8003f16:	f003 0301 	and.w	r3, r3, #1
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d00f      	beq.n	8003f3e <HAL_I2C_EV_IRQHandler+0x2b2>
 8003f1e:	697b      	ldr	r3, [r7, #20]
 8003f20:	0a9b      	lsrs	r3, r3, #10
 8003f22:	f003 0301 	and.w	r3, r3, #1
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d009      	beq.n	8003f3e <HAL_I2C_EV_IRQHandler+0x2b2>
 8003f2a:	69fb      	ldr	r3, [r7, #28]
 8003f2c:	089b      	lsrs	r3, r3, #2
 8003f2e:	f003 0301 	and.w	r3, r3, #1
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d103      	bne.n	8003f3e <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8003f36:	6878      	ldr	r0, [r7, #4]
 8003f38:	f000 fe6b 	bl	8004c12 <I2C_SlaveReceive_RXNE>
 8003f3c:	e014      	b.n	8003f68 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003f3e:	69fb      	ldr	r3, [r7, #28]
 8003f40:	089b      	lsrs	r3, r3, #2
 8003f42:	f003 0301 	and.w	r3, r3, #1
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d00e      	beq.n	8003f68 <HAL_I2C_EV_IRQHandler+0x2dc>
 8003f4a:	697b      	ldr	r3, [r7, #20]
 8003f4c:	0a5b      	lsrs	r3, r3, #9
 8003f4e:	f003 0301 	and.w	r3, r3, #1
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d008      	beq.n	8003f68 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8003f56:	6878      	ldr	r0, [r7, #4]
 8003f58:	f000 fe99 	bl	8004c8e <I2C_SlaveReceive_BTF>
 8003f5c:	e004      	b.n	8003f68 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8003f5e:	bf00      	nop
 8003f60:	e002      	b.n	8003f68 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003f62:	bf00      	nop
 8003f64:	e000      	b.n	8003f68 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003f66:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8003f68:	3720      	adds	r7, #32
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	bd80      	pop	{r7, pc}

08003f6e <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003f6e:	b480      	push	{r7}
 8003f70:	b083      	sub	sp, #12
 8003f72:	af00      	add	r7, sp, #0
 8003f74:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8003f76:	bf00      	nop
 8003f78:	370c      	adds	r7, #12
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f80:	4770      	bx	lr

08003f82 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003f82:	b480      	push	{r7}
 8003f84:	b083      	sub	sp, #12
 8003f86:	af00      	add	r7, sp, #0
 8003f88:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8003f8a:	bf00      	nop
 8003f8c:	370c      	adds	r7, #12
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f94:	4770      	bx	lr

08003f96 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003f96:	b480      	push	{r7}
 8003f98:	b083      	sub	sp, #12
 8003f9a:	af00      	add	r7, sp, #0
 8003f9c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003f9e:	bf00      	nop
 8003fa0:	370c      	adds	r7, #12
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa8:	4770      	bx	lr

08003faa <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003faa:	b480      	push	{r7}
 8003fac:	b083      	sub	sp, #12
 8003fae:	af00      	add	r7, sp, #0
 8003fb0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003fb2:	bf00      	nop
 8003fb4:	370c      	adds	r7, #12
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fbc:	4770      	bx	lr

08003fbe <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003fbe:	b480      	push	{r7}
 8003fc0:	b083      	sub	sp, #12
 8003fc2:	af00      	add	r7, sp, #0
 8003fc4:	6078      	str	r0, [r7, #4]
 8003fc6:	460b      	mov	r3, r1
 8003fc8:	70fb      	strb	r3, [r7, #3]
 8003fca:	4613      	mov	r3, r2
 8003fcc:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003fce:	bf00      	nop
 8003fd0:	370c      	adds	r7, #12
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd8:	4770      	bx	lr

08003fda <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003fda:	b480      	push	{r7}
 8003fdc:	b083      	sub	sp, #12
 8003fde:	af00      	add	r7, sp, #0
 8003fe0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8003fe2:	bf00      	nop
 8003fe4:	370c      	adds	r7, #12
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fec:	4770      	bx	lr

08003fee <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003fee:	b480      	push	{r7}
 8003ff0:	b083      	sub	sp, #12
 8003ff2:	af00      	add	r7, sp, #0
 8003ff4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8003ff6:	bf00      	nop
 8003ff8:	370c      	adds	r7, #12
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004000:	4770      	bx	lr

08004002 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004002:	b480      	push	{r7}
 8004004:	b083      	sub	sp, #12
 8004006:	af00      	add	r7, sp, #0
 8004008:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800400a:	bf00      	nop
 800400c:	370c      	adds	r7, #12
 800400e:	46bd      	mov	sp, r7
 8004010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004014:	4770      	bx	lr

08004016 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004016:	b480      	push	{r7}
 8004018:	b083      	sub	sp, #12
 800401a:	af00      	add	r7, sp, #0
 800401c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800401e:	bf00      	nop
 8004020:	370c      	adds	r7, #12
 8004022:	46bd      	mov	sp, r7
 8004024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004028:	4770      	bx	lr

0800402a <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800402a:	b480      	push	{r7}
 800402c:	b083      	sub	sp, #12
 800402e:	af00      	add	r7, sp, #0
 8004030:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8004032:	bf00      	nop
 8004034:	370c      	adds	r7, #12
 8004036:	46bd      	mov	sp, r7
 8004038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403c:	4770      	bx	lr

0800403e <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800403e:	b580      	push	{r7, lr}
 8004040:	b084      	sub	sp, #16
 8004042:	af00      	add	r7, sp, #0
 8004044:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800404c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004054:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800405a:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004060:	2b00      	cmp	r3, #0
 8004062:	d150      	bne.n	8004106 <I2C_MasterTransmit_TXE+0xc8>
 8004064:	7bfb      	ldrb	r3, [r7, #15]
 8004066:	2b21      	cmp	r3, #33	; 0x21
 8004068:	d14d      	bne.n	8004106 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800406a:	68bb      	ldr	r3, [r7, #8]
 800406c:	2b08      	cmp	r3, #8
 800406e:	d01d      	beq.n	80040ac <I2C_MasterTransmit_TXE+0x6e>
 8004070:	68bb      	ldr	r3, [r7, #8]
 8004072:	2b20      	cmp	r3, #32
 8004074:	d01a      	beq.n	80040ac <I2C_MasterTransmit_TXE+0x6e>
 8004076:	68bb      	ldr	r3, [r7, #8]
 8004078:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800407c:	d016      	beq.n	80040ac <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	685a      	ldr	r2, [r3, #4]
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800408c:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2211      	movs	r2, #17
 8004092:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2200      	movs	r2, #0
 8004098:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2220      	movs	r2, #32
 80040a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80040a4:	6878      	ldr	r0, [r7, #4]
 80040a6:	f7ff ff62 	bl	8003f6e <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80040aa:	e060      	b.n	800416e <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	685a      	ldr	r2, [r3, #4]
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80040ba:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	681a      	ldr	r2, [r3, #0]
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040ca:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2200      	movs	r2, #0
 80040d0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2220      	movs	r2, #32
 80040d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80040e0:	b2db      	uxtb	r3, r3
 80040e2:	2b40      	cmp	r3, #64	; 0x40
 80040e4:	d107      	bne.n	80040f6 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2200      	movs	r2, #0
 80040ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80040ee:	6878      	ldr	r0, [r7, #4]
 80040f0:	f7ff ff7d 	bl	8003fee <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80040f4:	e03b      	b.n	800416e <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	2200      	movs	r2, #0
 80040fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80040fe:	6878      	ldr	r0, [r7, #4]
 8004100:	f7ff ff35 	bl	8003f6e <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004104:	e033      	b.n	800416e <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8004106:	7bfb      	ldrb	r3, [r7, #15]
 8004108:	2b21      	cmp	r3, #33	; 0x21
 800410a:	d005      	beq.n	8004118 <I2C_MasterTransmit_TXE+0xda>
 800410c:	7bbb      	ldrb	r3, [r7, #14]
 800410e:	2b40      	cmp	r3, #64	; 0x40
 8004110:	d12d      	bne.n	800416e <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8004112:	7bfb      	ldrb	r3, [r7, #15]
 8004114:	2b22      	cmp	r3, #34	; 0x22
 8004116:	d12a      	bne.n	800416e <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800411c:	b29b      	uxth	r3, r3
 800411e:	2b00      	cmp	r3, #0
 8004120:	d108      	bne.n	8004134 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	685a      	ldr	r2, [r3, #4]
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004130:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8004132:	e01c      	b.n	800416e <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800413a:	b2db      	uxtb	r3, r3
 800413c:	2b40      	cmp	r3, #64	; 0x40
 800413e:	d103      	bne.n	8004148 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004140:	6878      	ldr	r0, [r7, #4]
 8004142:	f000 f88e 	bl	8004262 <I2C_MemoryTransmit_TXE_BTF>
}
 8004146:	e012      	b.n	800416e <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800414c:	781a      	ldrb	r2, [r3, #0]
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004158:	1c5a      	adds	r2, r3, #1
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004162:	b29b      	uxth	r3, r3
 8004164:	3b01      	subs	r3, #1
 8004166:	b29a      	uxth	r2, r3
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800416c:	e7ff      	b.n	800416e <I2C_MasterTransmit_TXE+0x130>
 800416e:	bf00      	nop
 8004170:	3710      	adds	r7, #16
 8004172:	46bd      	mov	sp, r7
 8004174:	bd80      	pop	{r7, pc}

08004176 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004176:	b580      	push	{r7, lr}
 8004178:	b084      	sub	sp, #16
 800417a:	af00      	add	r7, sp, #0
 800417c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004182:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800418a:	b2db      	uxtb	r3, r3
 800418c:	2b21      	cmp	r3, #33	; 0x21
 800418e:	d164      	bne.n	800425a <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004194:	b29b      	uxth	r3, r3
 8004196:	2b00      	cmp	r3, #0
 8004198:	d012      	beq.n	80041c0 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800419e:	781a      	ldrb	r2, [r3, #0]
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041aa:	1c5a      	adds	r2, r3, #1
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041b4:	b29b      	uxth	r3, r3
 80041b6:	3b01      	subs	r3, #1
 80041b8:	b29a      	uxth	r2, r3
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80041be:	e04c      	b.n	800425a <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	2b08      	cmp	r3, #8
 80041c4:	d01d      	beq.n	8004202 <I2C_MasterTransmit_BTF+0x8c>
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	2b20      	cmp	r3, #32
 80041ca:	d01a      	beq.n	8004202 <I2C_MasterTransmit_BTF+0x8c>
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80041d2:	d016      	beq.n	8004202 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	685a      	ldr	r2, [r3, #4]
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80041e2:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2211      	movs	r2, #17
 80041e8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	2200      	movs	r2, #0
 80041ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2220      	movs	r2, #32
 80041f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80041fa:	6878      	ldr	r0, [r7, #4]
 80041fc:	f7ff feb7 	bl	8003f6e <HAL_I2C_MasterTxCpltCallback>
}
 8004200:	e02b      	b.n	800425a <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	685a      	ldr	r2, [r3, #4]
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004210:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	681a      	ldr	r2, [r3, #0]
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004220:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	2200      	movs	r2, #0
 8004226:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2220      	movs	r2, #32
 800422c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004236:	b2db      	uxtb	r3, r3
 8004238:	2b40      	cmp	r3, #64	; 0x40
 800423a:	d107      	bne.n	800424c <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2200      	movs	r2, #0
 8004240:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8004244:	6878      	ldr	r0, [r7, #4]
 8004246:	f7ff fed2 	bl	8003fee <HAL_I2C_MemTxCpltCallback>
}
 800424a:	e006      	b.n	800425a <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2200      	movs	r2, #0
 8004250:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8004254:	6878      	ldr	r0, [r7, #4]
 8004256:	f7ff fe8a 	bl	8003f6e <HAL_I2C_MasterTxCpltCallback>
}
 800425a:	bf00      	nop
 800425c:	3710      	adds	r7, #16
 800425e:	46bd      	mov	sp, r7
 8004260:	bd80      	pop	{r7, pc}

08004262 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8004262:	b580      	push	{r7, lr}
 8004264:	b084      	sub	sp, #16
 8004266:	af00      	add	r7, sp, #0
 8004268:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004270:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004276:	2b00      	cmp	r3, #0
 8004278:	d11d      	bne.n	80042b6 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800427e:	2b01      	cmp	r3, #1
 8004280:	d10b      	bne.n	800429a <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004286:	b2da      	uxtb	r2, r3
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004292:	1c9a      	adds	r2, r3, #2
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8004298:	e073      	b.n	8004382 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800429e:	b29b      	uxth	r3, r3
 80042a0:	121b      	asrs	r3, r3, #8
 80042a2:	b2da      	uxtb	r2, r3
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042ae:	1c5a      	adds	r2, r3, #1
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	651a      	str	r2, [r3, #80]	; 0x50
}
 80042b4:	e065      	b.n	8004382 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042ba:	2b01      	cmp	r3, #1
 80042bc:	d10b      	bne.n	80042d6 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042c2:	b2da      	uxtb	r2, r3
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042ce:	1c5a      	adds	r2, r3, #1
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	651a      	str	r2, [r3, #80]	; 0x50
}
 80042d4:	e055      	b.n	8004382 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042da:	2b02      	cmp	r3, #2
 80042dc:	d151      	bne.n	8004382 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80042de:	7bfb      	ldrb	r3, [r7, #15]
 80042e0:	2b22      	cmp	r3, #34	; 0x22
 80042e2:	d10d      	bne.n	8004300 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	681a      	ldr	r2, [r3, #0]
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80042f2:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042f8:	1c5a      	adds	r2, r3, #1
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	651a      	str	r2, [r3, #80]	; 0x50
}
 80042fe:	e040      	b.n	8004382 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004304:	b29b      	uxth	r3, r3
 8004306:	2b00      	cmp	r3, #0
 8004308:	d015      	beq.n	8004336 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 800430a:	7bfb      	ldrb	r3, [r7, #15]
 800430c:	2b21      	cmp	r3, #33	; 0x21
 800430e:	d112      	bne.n	8004336 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004314:	781a      	ldrb	r2, [r3, #0]
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004320:	1c5a      	adds	r2, r3, #1
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800432a:	b29b      	uxth	r3, r3
 800432c:	3b01      	subs	r3, #1
 800432e:	b29a      	uxth	r2, r3
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004334:	e025      	b.n	8004382 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800433a:	b29b      	uxth	r3, r3
 800433c:	2b00      	cmp	r3, #0
 800433e:	d120      	bne.n	8004382 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8004340:	7bfb      	ldrb	r3, [r7, #15]
 8004342:	2b21      	cmp	r3, #33	; 0x21
 8004344:	d11d      	bne.n	8004382 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	685a      	ldr	r2, [r3, #4]
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004354:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	681a      	ldr	r2, [r3, #0]
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004364:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2200      	movs	r2, #0
 800436a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2220      	movs	r2, #32
 8004370:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2200      	movs	r2, #0
 8004378:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 800437c:	6878      	ldr	r0, [r7, #4]
 800437e:	f7ff fe36 	bl	8003fee <HAL_I2C_MemTxCpltCallback>
}
 8004382:	bf00      	nop
 8004384:	3710      	adds	r7, #16
 8004386:	46bd      	mov	sp, r7
 8004388:	bd80      	pop	{r7, pc}

0800438a <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800438a:	b580      	push	{r7, lr}
 800438c:	b084      	sub	sp, #16
 800438e:	af00      	add	r7, sp, #0
 8004390:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004398:	b2db      	uxtb	r3, r3
 800439a:	2b22      	cmp	r3, #34	; 0x22
 800439c:	f040 80ac 	bne.w	80044f8 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043a4:	b29b      	uxth	r3, r3
 80043a6:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	2b03      	cmp	r3, #3
 80043ac:	d921      	bls.n	80043f2 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	691a      	ldr	r2, [r3, #16]
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043b8:	b2d2      	uxtb	r2, r2
 80043ba:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043c0:	1c5a      	adds	r2, r3, #1
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043ca:	b29b      	uxth	r3, r3
 80043cc:	3b01      	subs	r3, #1
 80043ce:	b29a      	uxth	r2, r3
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043d8:	b29b      	uxth	r3, r3
 80043da:	2b03      	cmp	r3, #3
 80043dc:	f040 808c 	bne.w	80044f8 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	685a      	ldr	r2, [r3, #4]
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80043ee:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 80043f0:	e082      	b.n	80044f8 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043f6:	2b02      	cmp	r3, #2
 80043f8:	d075      	beq.n	80044e6 <I2C_MasterReceive_RXNE+0x15c>
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	2b01      	cmp	r3, #1
 80043fe:	d002      	beq.n	8004406 <I2C_MasterReceive_RXNE+0x7c>
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	2b00      	cmp	r3, #0
 8004404:	d16f      	bne.n	80044e6 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004406:	6878      	ldr	r0, [r7, #4]
 8004408:	f000 ffb8 	bl	800537c <I2C_WaitOnSTOPRequestThroughIT>
 800440c:	4603      	mov	r3, r0
 800440e:	2b00      	cmp	r3, #0
 8004410:	d142      	bne.n	8004498 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	681a      	ldr	r2, [r3, #0]
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004420:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	685a      	ldr	r2, [r3, #4]
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004430:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	691a      	ldr	r2, [r3, #16]
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800443c:	b2d2      	uxtb	r2, r2
 800443e:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004444:	1c5a      	adds	r2, r3, #1
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800444e:	b29b      	uxth	r3, r3
 8004450:	3b01      	subs	r3, #1
 8004452:	b29a      	uxth	r2, r3
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2220      	movs	r2, #32
 800445c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004466:	b2db      	uxtb	r3, r3
 8004468:	2b40      	cmp	r3, #64	; 0x40
 800446a:	d10a      	bne.n	8004482 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2200      	movs	r2, #0
 8004470:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2200      	movs	r2, #0
 8004478:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 800447a:	6878      	ldr	r0, [r7, #4]
 800447c:	f7ff fdc1 	bl	8004002 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004480:	e03a      	b.n	80044f8 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	2200      	movs	r2, #0
 8004486:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	2212      	movs	r2, #18
 800448e:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8004490:	6878      	ldr	r0, [r7, #4]
 8004492:	f7ff fd76 	bl	8003f82 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004496:	e02f      	b.n	80044f8 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	685a      	ldr	r2, [r3, #4]
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80044a6:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	691a      	ldr	r2, [r3, #16]
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044b2:	b2d2      	uxtb	r2, r2
 80044b4:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ba:	1c5a      	adds	r2, r3, #1
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044c4:	b29b      	uxth	r3, r3
 80044c6:	3b01      	subs	r3, #1
 80044c8:	b29a      	uxth	r2, r3
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	2220      	movs	r2, #32
 80044d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	2200      	movs	r2, #0
 80044da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80044de:	6878      	ldr	r0, [r7, #4]
 80044e0:	f7ff fd99 	bl	8004016 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80044e4:	e008      	b.n	80044f8 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	685a      	ldr	r2, [r3, #4]
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80044f4:	605a      	str	r2, [r3, #4]
}
 80044f6:	e7ff      	b.n	80044f8 <I2C_MasterReceive_RXNE+0x16e>
 80044f8:	bf00      	nop
 80044fa:	3710      	adds	r7, #16
 80044fc:	46bd      	mov	sp, r7
 80044fe:	bd80      	pop	{r7, pc}

08004500 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004500:	b580      	push	{r7, lr}
 8004502:	b084      	sub	sp, #16
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800450c:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004512:	b29b      	uxth	r3, r3
 8004514:	2b04      	cmp	r3, #4
 8004516:	d11b      	bne.n	8004550 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	685a      	ldr	r2, [r3, #4]
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004526:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	691a      	ldr	r2, [r3, #16]
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004532:	b2d2      	uxtb	r2, r2
 8004534:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800453a:	1c5a      	adds	r2, r3, #1
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004544:	b29b      	uxth	r3, r3
 8004546:	3b01      	subs	r3, #1
 8004548:	b29a      	uxth	r2, r3
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 800454e:	e0bd      	b.n	80046cc <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004554:	b29b      	uxth	r3, r3
 8004556:	2b03      	cmp	r3, #3
 8004558:	d129      	bne.n	80045ae <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	685a      	ldr	r2, [r3, #4]
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004568:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	2b04      	cmp	r3, #4
 800456e:	d00a      	beq.n	8004586 <I2C_MasterReceive_BTF+0x86>
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	2b02      	cmp	r3, #2
 8004574:	d007      	beq.n	8004586 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	681a      	ldr	r2, [r3, #0]
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004584:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	691a      	ldr	r2, [r3, #16]
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004590:	b2d2      	uxtb	r2, r2
 8004592:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004598:	1c5a      	adds	r2, r3, #1
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045a2:	b29b      	uxth	r3, r3
 80045a4:	3b01      	subs	r3, #1
 80045a6:	b29a      	uxth	r2, r3
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80045ac:	e08e      	b.n	80046cc <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045b2:	b29b      	uxth	r3, r3
 80045b4:	2b02      	cmp	r3, #2
 80045b6:	d176      	bne.n	80046a6 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	2b01      	cmp	r3, #1
 80045bc:	d002      	beq.n	80045c4 <I2C_MasterReceive_BTF+0xc4>
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	2b10      	cmp	r3, #16
 80045c2:	d108      	bne.n	80045d6 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	681a      	ldr	r2, [r3, #0]
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80045d2:	601a      	str	r2, [r3, #0]
 80045d4:	e019      	b.n	800460a <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	2b04      	cmp	r3, #4
 80045da:	d002      	beq.n	80045e2 <I2C_MasterReceive_BTF+0xe2>
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	2b02      	cmp	r3, #2
 80045e0:	d108      	bne.n	80045f4 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	681a      	ldr	r2, [r3, #0]
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80045f0:	601a      	str	r2, [r3, #0]
 80045f2:	e00a      	b.n	800460a <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	2b10      	cmp	r3, #16
 80045f8:	d007      	beq.n	800460a <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	681a      	ldr	r2, [r3, #0]
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004608:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	691a      	ldr	r2, [r3, #16]
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004614:	b2d2      	uxtb	r2, r2
 8004616:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800461c:	1c5a      	adds	r2, r3, #1
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004626:	b29b      	uxth	r3, r3
 8004628:	3b01      	subs	r3, #1
 800462a:	b29a      	uxth	r2, r3
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	691a      	ldr	r2, [r3, #16]
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800463a:	b2d2      	uxtb	r2, r2
 800463c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004642:	1c5a      	adds	r2, r3, #1
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800464c:	b29b      	uxth	r3, r3
 800464e:	3b01      	subs	r3, #1
 8004650:	b29a      	uxth	r2, r3
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	685a      	ldr	r2, [r3, #4]
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004664:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2220      	movs	r2, #32
 800466a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004674:	b2db      	uxtb	r3, r3
 8004676:	2b40      	cmp	r3, #64	; 0x40
 8004678:	d10a      	bne.n	8004690 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	2200      	movs	r2, #0
 800467e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	2200      	movs	r2, #0
 8004686:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8004688:	6878      	ldr	r0, [r7, #4]
 800468a:	f7ff fcba 	bl	8004002 <HAL_I2C_MemRxCpltCallback>
}
 800468e:	e01d      	b.n	80046cc <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2200      	movs	r2, #0
 8004694:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2212      	movs	r2, #18
 800469c:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800469e:	6878      	ldr	r0, [r7, #4]
 80046a0:	f7ff fc6f 	bl	8003f82 <HAL_I2C_MasterRxCpltCallback>
}
 80046a4:	e012      	b.n	80046cc <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	691a      	ldr	r2, [r3, #16]
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046b0:	b2d2      	uxtb	r2, r2
 80046b2:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046b8:	1c5a      	adds	r2, r3, #1
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046c2:	b29b      	uxth	r3, r3
 80046c4:	3b01      	subs	r3, #1
 80046c6:	b29a      	uxth	r2, r3
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80046cc:	bf00      	nop
 80046ce:	3710      	adds	r7, #16
 80046d0:	46bd      	mov	sp, r7
 80046d2:	bd80      	pop	{r7, pc}

080046d4 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80046d4:	b480      	push	{r7}
 80046d6:	b083      	sub	sp, #12
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80046e2:	b2db      	uxtb	r3, r3
 80046e4:	2b40      	cmp	r3, #64	; 0x40
 80046e6:	d117      	bne.n	8004718 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d109      	bne.n	8004704 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046f4:	b2db      	uxtb	r3, r3
 80046f6:	461a      	mov	r2, r3
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004700:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8004702:	e067      	b.n	80047d4 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004708:	b2db      	uxtb	r3, r3
 800470a:	f043 0301 	orr.w	r3, r3, #1
 800470e:	b2da      	uxtb	r2, r3
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	611a      	str	r2, [r3, #16]
}
 8004716:	e05d      	b.n	80047d4 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	691b      	ldr	r3, [r3, #16]
 800471c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004720:	d133      	bne.n	800478a <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004728:	b2db      	uxtb	r3, r3
 800472a:	2b21      	cmp	r3, #33	; 0x21
 800472c:	d109      	bne.n	8004742 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004732:	b2db      	uxtb	r3, r3
 8004734:	461a      	mov	r2, r3
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800473e:	611a      	str	r2, [r3, #16]
 8004740:	e008      	b.n	8004754 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004746:	b2db      	uxtb	r3, r3
 8004748:	f043 0301 	orr.w	r3, r3, #1
 800474c:	b2da      	uxtb	r2, r3
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004758:	2b00      	cmp	r3, #0
 800475a:	d004      	beq.n	8004766 <I2C_Master_SB+0x92>
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004760:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004762:	2b00      	cmp	r3, #0
 8004764:	d108      	bne.n	8004778 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800476a:	2b00      	cmp	r3, #0
 800476c:	d032      	beq.n	80047d4 <I2C_Master_SB+0x100>
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004772:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004774:	2b00      	cmp	r3, #0
 8004776:	d02d      	beq.n	80047d4 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	685a      	ldr	r2, [r3, #4]
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004786:	605a      	str	r2, [r3, #4]
}
 8004788:	e024      	b.n	80047d4 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800478e:	2b00      	cmp	r3, #0
 8004790:	d10e      	bne.n	80047b0 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004796:	b29b      	uxth	r3, r3
 8004798:	11db      	asrs	r3, r3, #7
 800479a:	b2db      	uxtb	r3, r3
 800479c:	f003 0306 	and.w	r3, r3, #6
 80047a0:	b2db      	uxtb	r3, r3
 80047a2:	f063 030f 	orn	r3, r3, #15
 80047a6:	b2da      	uxtb	r2, r3
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	611a      	str	r2, [r3, #16]
}
 80047ae:	e011      	b.n	80047d4 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047b4:	2b01      	cmp	r3, #1
 80047b6:	d10d      	bne.n	80047d4 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047bc:	b29b      	uxth	r3, r3
 80047be:	11db      	asrs	r3, r3, #7
 80047c0:	b2db      	uxtb	r3, r3
 80047c2:	f003 0306 	and.w	r3, r3, #6
 80047c6:	b2db      	uxtb	r3, r3
 80047c8:	f063 030e 	orn	r3, r3, #14
 80047cc:	b2da      	uxtb	r2, r3
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	611a      	str	r2, [r3, #16]
}
 80047d4:	bf00      	nop
 80047d6:	370c      	adds	r7, #12
 80047d8:	46bd      	mov	sp, r7
 80047da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047de:	4770      	bx	lr

080047e0 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80047e0:	b480      	push	{r7}
 80047e2:	b083      	sub	sp, #12
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047ec:	b2da      	uxtb	r2, r3
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d004      	beq.n	8004806 <I2C_Master_ADD10+0x26>
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004800:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004802:	2b00      	cmp	r3, #0
 8004804:	d108      	bne.n	8004818 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800480a:	2b00      	cmp	r3, #0
 800480c:	d00c      	beq.n	8004828 <I2C_Master_ADD10+0x48>
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004812:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004814:	2b00      	cmp	r3, #0
 8004816:	d007      	beq.n	8004828 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	685a      	ldr	r2, [r3, #4]
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004826:	605a      	str	r2, [r3, #4]
  }
}
 8004828:	bf00      	nop
 800482a:	370c      	adds	r7, #12
 800482c:	46bd      	mov	sp, r7
 800482e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004832:	4770      	bx	lr

08004834 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8004834:	b480      	push	{r7}
 8004836:	b091      	sub	sp, #68	; 0x44
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004842:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800484a:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004850:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004858:	b2db      	uxtb	r3, r3
 800485a:	2b22      	cmp	r3, #34	; 0x22
 800485c:	f040 8169 	bne.w	8004b32 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004864:	2b00      	cmp	r3, #0
 8004866:	d10f      	bne.n	8004888 <I2C_Master_ADDR+0x54>
 8004868:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800486c:	2b40      	cmp	r3, #64	; 0x40
 800486e:	d10b      	bne.n	8004888 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004870:	2300      	movs	r3, #0
 8004872:	633b      	str	r3, [r7, #48]	; 0x30
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	695b      	ldr	r3, [r3, #20]
 800487a:	633b      	str	r3, [r7, #48]	; 0x30
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	699b      	ldr	r3, [r3, #24]
 8004882:	633b      	str	r3, [r7, #48]	; 0x30
 8004884:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004886:	e160      	b.n	8004b4a <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800488c:	2b00      	cmp	r3, #0
 800488e:	d11d      	bne.n	80048cc <I2C_Master_ADDR+0x98>
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	691b      	ldr	r3, [r3, #16]
 8004894:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004898:	d118      	bne.n	80048cc <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800489a:	2300      	movs	r3, #0
 800489c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	695b      	ldr	r3, [r3, #20]
 80048a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	699b      	ldr	r3, [r3, #24]
 80048ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80048ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	681a      	ldr	r2, [r3, #0]
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80048be:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048c4:	1c5a      	adds	r2, r3, #1
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	651a      	str	r2, [r3, #80]	; 0x50
 80048ca:	e13e      	b.n	8004b4a <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048d0:	b29b      	uxth	r3, r3
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d113      	bne.n	80048fe <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80048d6:	2300      	movs	r3, #0
 80048d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	695b      	ldr	r3, [r3, #20]
 80048e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	699b      	ldr	r3, [r3, #24]
 80048e8:	62bb      	str	r3, [r7, #40]	; 0x28
 80048ea:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	681a      	ldr	r2, [r3, #0]
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80048fa:	601a      	str	r2, [r3, #0]
 80048fc:	e115      	b.n	8004b2a <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004902:	b29b      	uxth	r3, r3
 8004904:	2b01      	cmp	r3, #1
 8004906:	f040 808a 	bne.w	8004a1e <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800490a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800490c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004910:	d137      	bne.n	8004982 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	681a      	ldr	r2, [r3, #0]
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004920:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	685b      	ldr	r3, [r3, #4]
 8004928:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800492c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004930:	d113      	bne.n	800495a <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	681a      	ldr	r2, [r3, #0]
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004940:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004942:	2300      	movs	r3, #0
 8004944:	627b      	str	r3, [r7, #36]	; 0x24
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	695b      	ldr	r3, [r3, #20]
 800494c:	627b      	str	r3, [r7, #36]	; 0x24
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	699b      	ldr	r3, [r3, #24]
 8004954:	627b      	str	r3, [r7, #36]	; 0x24
 8004956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004958:	e0e7      	b.n	8004b2a <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800495a:	2300      	movs	r3, #0
 800495c:	623b      	str	r3, [r7, #32]
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	695b      	ldr	r3, [r3, #20]
 8004964:	623b      	str	r3, [r7, #32]
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	699b      	ldr	r3, [r3, #24]
 800496c:	623b      	str	r3, [r7, #32]
 800496e:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	681a      	ldr	r2, [r3, #0]
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800497e:	601a      	str	r2, [r3, #0]
 8004980:	e0d3      	b.n	8004b2a <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8004982:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004984:	2b08      	cmp	r3, #8
 8004986:	d02e      	beq.n	80049e6 <I2C_Master_ADDR+0x1b2>
 8004988:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800498a:	2b20      	cmp	r3, #32
 800498c:	d02b      	beq.n	80049e6 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 800498e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004990:	2b12      	cmp	r3, #18
 8004992:	d102      	bne.n	800499a <I2C_Master_ADDR+0x166>
 8004994:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004996:	2b01      	cmp	r3, #1
 8004998:	d125      	bne.n	80049e6 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800499a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800499c:	2b04      	cmp	r3, #4
 800499e:	d00e      	beq.n	80049be <I2C_Master_ADDR+0x18a>
 80049a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049a2:	2b02      	cmp	r3, #2
 80049a4:	d00b      	beq.n	80049be <I2C_Master_ADDR+0x18a>
 80049a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049a8:	2b10      	cmp	r3, #16
 80049aa:	d008      	beq.n	80049be <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	681a      	ldr	r2, [r3, #0]
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80049ba:	601a      	str	r2, [r3, #0]
 80049bc:	e007      	b.n	80049ce <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	681a      	ldr	r2, [r3, #0]
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80049cc:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80049ce:	2300      	movs	r3, #0
 80049d0:	61fb      	str	r3, [r7, #28]
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	695b      	ldr	r3, [r3, #20]
 80049d8:	61fb      	str	r3, [r7, #28]
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	699b      	ldr	r3, [r3, #24]
 80049e0:	61fb      	str	r3, [r7, #28]
 80049e2:	69fb      	ldr	r3, [r7, #28]
 80049e4:	e0a1      	b.n	8004b2a <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	681a      	ldr	r2, [r3, #0]
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80049f4:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80049f6:	2300      	movs	r3, #0
 80049f8:	61bb      	str	r3, [r7, #24]
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	695b      	ldr	r3, [r3, #20]
 8004a00:	61bb      	str	r3, [r7, #24]
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	699b      	ldr	r3, [r3, #24]
 8004a08:	61bb      	str	r3, [r7, #24]
 8004a0a:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	681a      	ldr	r2, [r3, #0]
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a1a:	601a      	str	r2, [r3, #0]
 8004a1c:	e085      	b.n	8004b2a <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a22:	b29b      	uxth	r3, r3
 8004a24:	2b02      	cmp	r3, #2
 8004a26:	d14d      	bne.n	8004ac4 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004a28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a2a:	2b04      	cmp	r3, #4
 8004a2c:	d016      	beq.n	8004a5c <I2C_Master_ADDR+0x228>
 8004a2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a30:	2b02      	cmp	r3, #2
 8004a32:	d013      	beq.n	8004a5c <I2C_Master_ADDR+0x228>
 8004a34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a36:	2b10      	cmp	r3, #16
 8004a38:	d010      	beq.n	8004a5c <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	681a      	ldr	r2, [r3, #0]
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a48:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	681a      	ldr	r2, [r3, #0]
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004a58:	601a      	str	r2, [r3, #0]
 8004a5a:	e007      	b.n	8004a6c <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	681a      	ldr	r2, [r3, #0]
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004a6a:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	685b      	ldr	r3, [r3, #4]
 8004a72:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a76:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a7a:	d117      	bne.n	8004aac <I2C_Master_ADDR+0x278>
 8004a7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a7e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004a82:	d00b      	beq.n	8004a9c <I2C_Master_ADDR+0x268>
 8004a84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a86:	2b01      	cmp	r3, #1
 8004a88:	d008      	beq.n	8004a9c <I2C_Master_ADDR+0x268>
 8004a8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a8c:	2b08      	cmp	r3, #8
 8004a8e:	d005      	beq.n	8004a9c <I2C_Master_ADDR+0x268>
 8004a90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a92:	2b10      	cmp	r3, #16
 8004a94:	d002      	beq.n	8004a9c <I2C_Master_ADDR+0x268>
 8004a96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a98:	2b20      	cmp	r3, #32
 8004a9a:	d107      	bne.n	8004aac <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	685a      	ldr	r2, [r3, #4]
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004aaa:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004aac:	2300      	movs	r3, #0
 8004aae:	617b      	str	r3, [r7, #20]
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	695b      	ldr	r3, [r3, #20]
 8004ab6:	617b      	str	r3, [r7, #20]
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	699b      	ldr	r3, [r3, #24]
 8004abe:	617b      	str	r3, [r7, #20]
 8004ac0:	697b      	ldr	r3, [r7, #20]
 8004ac2:	e032      	b.n	8004b2a <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	681a      	ldr	r2, [r3, #0]
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004ad2:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	685b      	ldr	r3, [r3, #4]
 8004ada:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ade:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ae2:	d117      	bne.n	8004b14 <I2C_Master_ADDR+0x2e0>
 8004ae4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ae6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004aea:	d00b      	beq.n	8004b04 <I2C_Master_ADDR+0x2d0>
 8004aec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004aee:	2b01      	cmp	r3, #1
 8004af0:	d008      	beq.n	8004b04 <I2C_Master_ADDR+0x2d0>
 8004af2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004af4:	2b08      	cmp	r3, #8
 8004af6:	d005      	beq.n	8004b04 <I2C_Master_ADDR+0x2d0>
 8004af8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004afa:	2b10      	cmp	r3, #16
 8004afc:	d002      	beq.n	8004b04 <I2C_Master_ADDR+0x2d0>
 8004afe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b00:	2b20      	cmp	r3, #32
 8004b02:	d107      	bne.n	8004b14 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	685a      	ldr	r2, [r3, #4]
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004b12:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b14:	2300      	movs	r3, #0
 8004b16:	613b      	str	r3, [r7, #16]
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	695b      	ldr	r3, [r3, #20]
 8004b1e:	613b      	str	r3, [r7, #16]
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	699b      	ldr	r3, [r3, #24]
 8004b26:	613b      	str	r3, [r7, #16]
 8004b28:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8004b30:	e00b      	b.n	8004b4a <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b32:	2300      	movs	r3, #0
 8004b34:	60fb      	str	r3, [r7, #12]
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	695b      	ldr	r3, [r3, #20]
 8004b3c:	60fb      	str	r3, [r7, #12]
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	699b      	ldr	r3, [r3, #24]
 8004b44:	60fb      	str	r3, [r7, #12]
 8004b46:	68fb      	ldr	r3, [r7, #12]
}
 8004b48:	e7ff      	b.n	8004b4a <I2C_Master_ADDR+0x316>
 8004b4a:	bf00      	nop
 8004b4c:	3744      	adds	r7, #68	; 0x44
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b54:	4770      	bx	lr

08004b56 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004b56:	b580      	push	{r7, lr}
 8004b58:	b084      	sub	sp, #16
 8004b5a:	af00      	add	r7, sp, #0
 8004b5c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b64:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b6a:	b29b      	uxth	r3, r3
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d02b      	beq.n	8004bc8 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b74:	781a      	ldrb	r2, [r3, #0]
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b80:	1c5a      	adds	r2, r3, #1
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b8a:	b29b      	uxth	r3, r3
 8004b8c:	3b01      	subs	r3, #1
 8004b8e:	b29a      	uxth	r2, r3
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b98:	b29b      	uxth	r3, r3
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d114      	bne.n	8004bc8 <I2C_SlaveTransmit_TXE+0x72>
 8004b9e:	7bfb      	ldrb	r3, [r7, #15]
 8004ba0:	2b29      	cmp	r3, #41	; 0x29
 8004ba2:	d111      	bne.n	8004bc8 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	685a      	ldr	r2, [r3, #4]
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004bb2:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2221      	movs	r2, #33	; 0x21
 8004bb8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	2228      	movs	r2, #40	; 0x28
 8004bbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004bc2:	6878      	ldr	r0, [r7, #4]
 8004bc4:	f7ff f9e7 	bl	8003f96 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004bc8:	bf00      	nop
 8004bca:	3710      	adds	r7, #16
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	bd80      	pop	{r7, pc}

08004bd0 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004bd0:	b480      	push	{r7}
 8004bd2:	b083      	sub	sp, #12
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bdc:	b29b      	uxth	r3, r3
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d011      	beq.n	8004c06 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004be6:	781a      	ldrb	r2, [r3, #0]
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bf2:	1c5a      	adds	r2, r3, #1
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bfc:	b29b      	uxth	r3, r3
 8004bfe:	3b01      	subs	r3, #1
 8004c00:	b29a      	uxth	r2, r3
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8004c06:	bf00      	nop
 8004c08:	370c      	adds	r7, #12
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c10:	4770      	bx	lr

08004c12 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004c12:	b580      	push	{r7, lr}
 8004c14:	b084      	sub	sp, #16
 8004c16:	af00      	add	r7, sp, #0
 8004c18:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c20:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c26:	b29b      	uxth	r3, r3
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d02c      	beq.n	8004c86 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	691a      	ldr	r2, [r3, #16]
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c36:	b2d2      	uxtb	r2, r2
 8004c38:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c3e:	1c5a      	adds	r2, r3, #1
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c48:	b29b      	uxth	r3, r3
 8004c4a:	3b01      	subs	r3, #1
 8004c4c:	b29a      	uxth	r2, r3
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c56:	b29b      	uxth	r3, r3
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d114      	bne.n	8004c86 <I2C_SlaveReceive_RXNE+0x74>
 8004c5c:	7bfb      	ldrb	r3, [r7, #15]
 8004c5e:	2b2a      	cmp	r3, #42	; 0x2a
 8004c60:	d111      	bne.n	8004c86 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	685a      	ldr	r2, [r3, #4]
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c70:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	2222      	movs	r2, #34	; 0x22
 8004c76:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2228      	movs	r2, #40	; 0x28
 8004c7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004c80:	6878      	ldr	r0, [r7, #4]
 8004c82:	f7ff f992 	bl	8003faa <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004c86:	bf00      	nop
 8004c88:	3710      	adds	r7, #16
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	bd80      	pop	{r7, pc}

08004c8e <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004c8e:	b480      	push	{r7}
 8004c90:	b083      	sub	sp, #12
 8004c92:	af00      	add	r7, sp, #0
 8004c94:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c9a:	b29b      	uxth	r3, r3
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d012      	beq.n	8004cc6 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	691a      	ldr	r2, [r3, #16]
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004caa:	b2d2      	uxtb	r2, r2
 8004cac:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cb2:	1c5a      	adds	r2, r3, #1
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cbc:	b29b      	uxth	r3, r3
 8004cbe:	3b01      	subs	r3, #1
 8004cc0:	b29a      	uxth	r2, r3
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8004cc6:	bf00      	nop
 8004cc8:	370c      	adds	r7, #12
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd0:	4770      	bx	lr

08004cd2 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8004cd2:	b580      	push	{r7, lr}
 8004cd4:	b084      	sub	sp, #16
 8004cd6:	af00      	add	r7, sp, #0
 8004cd8:	6078      	str	r0, [r7, #4]
 8004cda:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8004cdc:	2300      	movs	r3, #0
 8004cde:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ce6:	b2db      	uxtb	r3, r3
 8004ce8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004cec:	2b28      	cmp	r3, #40	; 0x28
 8004cee:	d127      	bne.n	8004d40 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	685a      	ldr	r2, [r3, #4]
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004cfe:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	089b      	lsrs	r3, r3, #2
 8004d04:	f003 0301 	and.w	r3, r3, #1
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d101      	bne.n	8004d10 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8004d0c:	2301      	movs	r3, #1
 8004d0e:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	09db      	lsrs	r3, r3, #7
 8004d14:	f003 0301 	and.w	r3, r3, #1
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d103      	bne.n	8004d24 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	68db      	ldr	r3, [r3, #12]
 8004d20:	81bb      	strh	r3, [r7, #12]
 8004d22:	e002      	b.n	8004d2a <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	699b      	ldr	r3, [r3, #24]
 8004d28:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8004d32:	89ba      	ldrh	r2, [r7, #12]
 8004d34:	7bfb      	ldrb	r3, [r7, #15]
 8004d36:	4619      	mov	r1, r3
 8004d38:	6878      	ldr	r0, [r7, #4]
 8004d3a:	f7ff f940 	bl	8003fbe <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004d3e:	e00e      	b.n	8004d5e <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d40:	2300      	movs	r3, #0
 8004d42:	60bb      	str	r3, [r7, #8]
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	695b      	ldr	r3, [r3, #20]
 8004d4a:	60bb      	str	r3, [r7, #8]
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	699b      	ldr	r3, [r3, #24]
 8004d52:	60bb      	str	r3, [r7, #8]
 8004d54:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	2200      	movs	r2, #0
 8004d5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8004d5e:	bf00      	nop
 8004d60:	3710      	adds	r7, #16
 8004d62:	46bd      	mov	sp, r7
 8004d64:	bd80      	pop	{r7, pc}
	...

08004d68 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	b084      	sub	sp, #16
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d76:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	685a      	ldr	r2, [r3, #4]
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004d86:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8004d88:	2300      	movs	r3, #0
 8004d8a:	60bb      	str	r3, [r7, #8]
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	695b      	ldr	r3, [r3, #20]
 8004d92:	60bb      	str	r3, [r7, #8]
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	681a      	ldr	r2, [r3, #0]
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f042 0201 	orr.w	r2, r2, #1
 8004da2:	601a      	str	r2, [r3, #0]
 8004da4:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	681a      	ldr	r2, [r3, #0]
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004db4:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	685b      	ldr	r3, [r3, #4]
 8004dbc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004dc0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004dc4:	d172      	bne.n	8004eac <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004dc6:	7bfb      	ldrb	r3, [r7, #15]
 8004dc8:	2b22      	cmp	r3, #34	; 0x22
 8004dca:	d002      	beq.n	8004dd2 <I2C_Slave_STOPF+0x6a>
 8004dcc:	7bfb      	ldrb	r3, [r7, #15]
 8004dce:	2b2a      	cmp	r3, #42	; 0x2a
 8004dd0:	d135      	bne.n	8004e3e <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	685b      	ldr	r3, [r3, #4]
 8004dda:	b29a      	uxth	r2, r3
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004de4:	b29b      	uxth	r3, r3
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d005      	beq.n	8004df6 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dee:	f043 0204 	orr.w	r2, r3, #4
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	685a      	ldr	r2, [r3, #4]
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004e04:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	f7fe fb32 	bl	8003474 <HAL_DMA_GetState>
 8004e10:	4603      	mov	r3, r0
 8004e12:	2b01      	cmp	r3, #1
 8004e14:	d049      	beq.n	8004eaa <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e1a:	4a69      	ldr	r2, [pc, #420]	; (8004fc0 <I2C_Slave_STOPF+0x258>)
 8004e1c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e22:	4618      	mov	r0, r3
 8004e24:	f7fe f97a 	bl	800311c <HAL_DMA_Abort_IT>
 8004e28:	4603      	mov	r3, r0
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d03d      	beq.n	8004eaa <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e34:	687a      	ldr	r2, [r7, #4]
 8004e36:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004e38:	4610      	mov	r0, r2
 8004e3a:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004e3c:	e035      	b.n	8004eaa <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	685b      	ldr	r3, [r3, #4]
 8004e46:	b29a      	uxth	r2, r3
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e50:	b29b      	uxth	r3, r3
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d005      	beq.n	8004e62 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e5a:	f043 0204 	orr.w	r2, r3, #4
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	685a      	ldr	r2, [r3, #4]
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004e70:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e76:	4618      	mov	r0, r3
 8004e78:	f7fe fafc 	bl	8003474 <HAL_DMA_GetState>
 8004e7c:	4603      	mov	r3, r0
 8004e7e:	2b01      	cmp	r3, #1
 8004e80:	d014      	beq.n	8004eac <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e86:	4a4e      	ldr	r2, [pc, #312]	; (8004fc0 <I2C_Slave_STOPF+0x258>)
 8004e88:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e8e:	4618      	mov	r0, r3
 8004e90:	f7fe f944 	bl	800311c <HAL_DMA_Abort_IT>
 8004e94:	4603      	mov	r3, r0
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d008      	beq.n	8004eac <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ea0:	687a      	ldr	r2, [r7, #4]
 8004ea2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004ea4:	4610      	mov	r0, r2
 8004ea6:	4798      	blx	r3
 8004ea8:	e000      	b.n	8004eac <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004eaa:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004eb0:	b29b      	uxth	r3, r3
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d03e      	beq.n	8004f34 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	695b      	ldr	r3, [r3, #20]
 8004ebc:	f003 0304 	and.w	r3, r3, #4
 8004ec0:	2b04      	cmp	r3, #4
 8004ec2:	d112      	bne.n	8004eea <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	691a      	ldr	r2, [r3, #16]
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ece:	b2d2      	uxtb	r2, r2
 8004ed0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ed6:	1c5a      	adds	r2, r3, #1
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ee0:	b29b      	uxth	r3, r3
 8004ee2:	3b01      	subs	r3, #1
 8004ee4:	b29a      	uxth	r2, r3
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	695b      	ldr	r3, [r3, #20]
 8004ef0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ef4:	2b40      	cmp	r3, #64	; 0x40
 8004ef6:	d112      	bne.n	8004f1e <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	691a      	ldr	r2, [r3, #16]
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f02:	b2d2      	uxtb	r2, r2
 8004f04:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f0a:	1c5a      	adds	r2, r3, #1
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f14:	b29b      	uxth	r3, r3
 8004f16:	3b01      	subs	r3, #1
 8004f18:	b29a      	uxth	r2, r3
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f22:	b29b      	uxth	r3, r3
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d005      	beq.n	8004f34 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f2c:	f043 0204 	orr.w	r2, r3, #4
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d003      	beq.n	8004f44 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8004f3c:	6878      	ldr	r0, [r7, #4]
 8004f3e:	f000 f843 	bl	8004fc8 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8004f42:	e039      	b.n	8004fb8 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004f44:	7bfb      	ldrb	r3, [r7, #15]
 8004f46:	2b2a      	cmp	r3, #42	; 0x2a
 8004f48:	d109      	bne.n	8004f5e <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2228      	movs	r2, #40	; 0x28
 8004f54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004f58:	6878      	ldr	r0, [r7, #4]
 8004f5a:	f7ff f826 	bl	8003faa <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f64:	b2db      	uxtb	r3, r3
 8004f66:	2b28      	cmp	r3, #40	; 0x28
 8004f68:	d111      	bne.n	8004f8e <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	4a15      	ldr	r2, [pc, #84]	; (8004fc4 <I2C_Slave_STOPF+0x25c>)
 8004f6e:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2200      	movs	r2, #0
 8004f74:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	2220      	movs	r2, #32
 8004f7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	2200      	movs	r2, #0
 8004f82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8004f86:	6878      	ldr	r0, [r7, #4]
 8004f88:	f7ff f827 	bl	8003fda <HAL_I2C_ListenCpltCallback>
}
 8004f8c:	e014      	b.n	8004fb8 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f92:	2b22      	cmp	r3, #34	; 0x22
 8004f94:	d002      	beq.n	8004f9c <I2C_Slave_STOPF+0x234>
 8004f96:	7bfb      	ldrb	r3, [r7, #15]
 8004f98:	2b22      	cmp	r3, #34	; 0x22
 8004f9a:	d10d      	bne.n	8004fb8 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	2220      	movs	r2, #32
 8004fa6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	2200      	movs	r2, #0
 8004fae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004fb2:	6878      	ldr	r0, [r7, #4]
 8004fb4:	f7fe fff9 	bl	8003faa <HAL_I2C_SlaveRxCpltCallback>
}
 8004fb8:	bf00      	nop
 8004fba:	3710      	adds	r7, #16
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	bd80      	pop	{r7, pc}
 8004fc0:	0800522d 	.word	0x0800522d
 8004fc4:	ffff0000 	.word	0xffff0000

08004fc8 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	b084      	sub	sp, #16
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fd6:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004fde:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004fe0:	7bbb      	ldrb	r3, [r7, #14]
 8004fe2:	2b10      	cmp	r3, #16
 8004fe4:	d002      	beq.n	8004fec <I2C_ITError+0x24>
 8004fe6:	7bbb      	ldrb	r3, [r7, #14]
 8004fe8:	2b40      	cmp	r3, #64	; 0x40
 8004fea:	d10a      	bne.n	8005002 <I2C_ITError+0x3a>
 8004fec:	7bfb      	ldrb	r3, [r7, #15]
 8004fee:	2b22      	cmp	r3, #34	; 0x22
 8004ff0:	d107      	bne.n	8005002 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	681a      	ldr	r2, [r3, #0]
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005000:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005002:	7bfb      	ldrb	r3, [r7, #15]
 8005004:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005008:	2b28      	cmp	r3, #40	; 0x28
 800500a:	d107      	bne.n	800501c <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2200      	movs	r2, #0
 8005010:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	2228      	movs	r2, #40	; 0x28
 8005016:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800501a:	e015      	b.n	8005048 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	685b      	ldr	r3, [r3, #4]
 8005022:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005026:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800502a:	d00a      	beq.n	8005042 <I2C_ITError+0x7a>
 800502c:	7bfb      	ldrb	r3, [r7, #15]
 800502e:	2b60      	cmp	r3, #96	; 0x60
 8005030:	d007      	beq.n	8005042 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	2220      	movs	r2, #32
 8005036:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	2200      	movs	r2, #0
 800503e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	2200      	movs	r2, #0
 8005046:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	685b      	ldr	r3, [r3, #4]
 800504e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005052:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005056:	d162      	bne.n	800511e <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	685a      	ldr	r2, [r3, #4]
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005066:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800506c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005070:	b2db      	uxtb	r3, r3
 8005072:	2b01      	cmp	r3, #1
 8005074:	d020      	beq.n	80050b8 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800507a:	4a6a      	ldr	r2, [pc, #424]	; (8005224 <I2C_ITError+0x25c>)
 800507c:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005082:	4618      	mov	r0, r3
 8005084:	f7fe f84a 	bl	800311c <HAL_DMA_Abort_IT>
 8005088:	4603      	mov	r3, r0
 800508a:	2b00      	cmp	r3, #0
 800508c:	f000 8089 	beq.w	80051a2 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	681a      	ldr	r2, [r3, #0]
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f022 0201 	bic.w	r2, r2, #1
 800509e:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2220      	movs	r2, #32
 80050a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050ae:	687a      	ldr	r2, [r7, #4]
 80050b0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80050b2:	4610      	mov	r0, r2
 80050b4:	4798      	blx	r3
 80050b6:	e074      	b.n	80051a2 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050bc:	4a59      	ldr	r2, [pc, #356]	; (8005224 <I2C_ITError+0x25c>)
 80050be:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050c4:	4618      	mov	r0, r3
 80050c6:	f7fe f829 	bl	800311c <HAL_DMA_Abort_IT>
 80050ca:	4603      	mov	r3, r0
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d068      	beq.n	80051a2 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	695b      	ldr	r3, [r3, #20]
 80050d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050da:	2b40      	cmp	r3, #64	; 0x40
 80050dc:	d10b      	bne.n	80050f6 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	691a      	ldr	r2, [r3, #16]
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050e8:	b2d2      	uxtb	r2, r2
 80050ea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050f0:	1c5a      	adds	r2, r3, #1
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	681a      	ldr	r2, [r3, #0]
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f022 0201 	bic.w	r2, r2, #1
 8005104:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	2220      	movs	r2, #32
 800510a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005112:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005114:	687a      	ldr	r2, [r7, #4]
 8005116:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005118:	4610      	mov	r0, r2
 800511a:	4798      	blx	r3
 800511c:	e041      	b.n	80051a2 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005124:	b2db      	uxtb	r3, r3
 8005126:	2b60      	cmp	r3, #96	; 0x60
 8005128:	d125      	bne.n	8005176 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	2220      	movs	r2, #32
 800512e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	2200      	movs	r2, #0
 8005136:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	695b      	ldr	r3, [r3, #20]
 800513e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005142:	2b40      	cmp	r3, #64	; 0x40
 8005144:	d10b      	bne.n	800515e <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	691a      	ldr	r2, [r3, #16]
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005150:	b2d2      	uxtb	r2, r2
 8005152:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005158:	1c5a      	adds	r2, r3, #1
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	681a      	ldr	r2, [r3, #0]
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f022 0201 	bic.w	r2, r2, #1
 800516c:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800516e:	6878      	ldr	r0, [r7, #4]
 8005170:	f7fe ff5b 	bl	800402a <HAL_I2C_AbortCpltCallback>
 8005174:	e015      	b.n	80051a2 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	695b      	ldr	r3, [r3, #20]
 800517c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005180:	2b40      	cmp	r3, #64	; 0x40
 8005182:	d10b      	bne.n	800519c <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	691a      	ldr	r2, [r3, #16]
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800518e:	b2d2      	uxtb	r2, r2
 8005190:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005196:	1c5a      	adds	r2, r3, #1
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800519c:	6878      	ldr	r0, [r7, #4]
 800519e:	f7fe ff3a 	bl	8004016 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051a6:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80051a8:	68bb      	ldr	r3, [r7, #8]
 80051aa:	f003 0301 	and.w	r3, r3, #1
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d10e      	bne.n	80051d0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80051b2:	68bb      	ldr	r3, [r7, #8]
 80051b4:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d109      	bne.n	80051d0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80051bc:	68bb      	ldr	r3, [r7, #8]
 80051be:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d104      	bne.n	80051d0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80051c6:	68bb      	ldr	r3, [r7, #8]
 80051c8:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d007      	beq.n	80051e0 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	685a      	ldr	r2, [r3, #4]
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80051de:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051e6:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ec:	f003 0304 	and.w	r3, r3, #4
 80051f0:	2b04      	cmp	r3, #4
 80051f2:	d113      	bne.n	800521c <I2C_ITError+0x254>
 80051f4:	7bfb      	ldrb	r3, [r7, #15]
 80051f6:	2b28      	cmp	r3, #40	; 0x28
 80051f8:	d110      	bne.n	800521c <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	4a0a      	ldr	r2, [pc, #40]	; (8005228 <I2C_ITError+0x260>)
 80051fe:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2200      	movs	r2, #0
 8005204:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	2220      	movs	r2, #32
 800520a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	2200      	movs	r2, #0
 8005212:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8005216:	6878      	ldr	r0, [r7, #4]
 8005218:	f7fe fedf 	bl	8003fda <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800521c:	bf00      	nop
 800521e:	3710      	adds	r7, #16
 8005220:	46bd      	mov	sp, r7
 8005222:	bd80      	pop	{r7, pc}
 8005224:	0800522d 	.word	0x0800522d
 8005228:	ffff0000 	.word	0xffff0000

0800522c <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800522c:	b580      	push	{r7, lr}
 800522e:	b086      	sub	sp, #24
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005234:	2300      	movs	r3, #0
 8005236:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800523c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800523e:	697b      	ldr	r3, [r7, #20]
 8005240:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005244:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8005246:	4b4b      	ldr	r3, [pc, #300]	; (8005374 <I2C_DMAAbort+0x148>)
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	08db      	lsrs	r3, r3, #3
 800524c:	4a4a      	ldr	r2, [pc, #296]	; (8005378 <I2C_DMAAbort+0x14c>)
 800524e:	fba2 2303 	umull	r2, r3, r2, r3
 8005252:	0a1a      	lsrs	r2, r3, #8
 8005254:	4613      	mov	r3, r2
 8005256:	009b      	lsls	r3, r3, #2
 8005258:	4413      	add	r3, r2
 800525a:	00da      	lsls	r2, r3, #3
 800525c:	1ad3      	subs	r3, r2, r3
 800525e:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	2b00      	cmp	r3, #0
 8005264:	d106      	bne.n	8005274 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005266:	697b      	ldr	r3, [r7, #20]
 8005268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800526a:	f043 0220 	orr.w	r2, r3, #32
 800526e:	697b      	ldr	r3, [r7, #20]
 8005270:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8005272:	e00a      	b.n	800528a <I2C_DMAAbort+0x5e>
    }
    count--;
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	3b01      	subs	r3, #1
 8005278:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800527a:	697b      	ldr	r3, [r7, #20]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005284:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005288:	d0ea      	beq.n	8005260 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800528a:	697b      	ldr	r3, [r7, #20]
 800528c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800528e:	2b00      	cmp	r3, #0
 8005290:	d003      	beq.n	800529a <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8005292:	697b      	ldr	r3, [r7, #20]
 8005294:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005296:	2200      	movs	r2, #0
 8005298:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800529a:	697b      	ldr	r3, [r7, #20]
 800529c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d003      	beq.n	80052aa <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80052a2:	697b      	ldr	r3, [r7, #20]
 80052a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052a6:	2200      	movs	r2, #0
 80052a8:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80052aa:	697b      	ldr	r3, [r7, #20]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	681a      	ldr	r2, [r3, #0]
 80052b0:	697b      	ldr	r3, [r7, #20]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80052b8:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80052ba:	697b      	ldr	r3, [r7, #20]
 80052bc:	2200      	movs	r2, #0
 80052be:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80052c0:	697b      	ldr	r3, [r7, #20]
 80052c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d003      	beq.n	80052d0 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80052c8:	697b      	ldr	r3, [r7, #20]
 80052ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052cc:	2200      	movs	r2, #0
 80052ce:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 80052d0:	697b      	ldr	r3, [r7, #20]
 80052d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d003      	beq.n	80052e0 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80052d8:	697b      	ldr	r3, [r7, #20]
 80052da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052dc:	2200      	movs	r2, #0
 80052de:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80052e0:	697b      	ldr	r3, [r7, #20]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	681a      	ldr	r2, [r3, #0]
 80052e6:	697b      	ldr	r3, [r7, #20]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f022 0201 	bic.w	r2, r2, #1
 80052ee:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80052f0:	697b      	ldr	r3, [r7, #20]
 80052f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052f6:	b2db      	uxtb	r3, r3
 80052f8:	2b60      	cmp	r3, #96	; 0x60
 80052fa:	d10e      	bne.n	800531a <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80052fc:	697b      	ldr	r3, [r7, #20]
 80052fe:	2220      	movs	r2, #32
 8005300:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005304:	697b      	ldr	r3, [r7, #20]
 8005306:	2200      	movs	r2, #0
 8005308:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800530c:	697b      	ldr	r3, [r7, #20]
 800530e:	2200      	movs	r2, #0
 8005310:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005312:	6978      	ldr	r0, [r7, #20]
 8005314:	f7fe fe89 	bl	800402a <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005318:	e027      	b.n	800536a <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800531a:	7cfb      	ldrb	r3, [r7, #19]
 800531c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005320:	2b28      	cmp	r3, #40	; 0x28
 8005322:	d117      	bne.n	8005354 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8005324:	697b      	ldr	r3, [r7, #20]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	681a      	ldr	r2, [r3, #0]
 800532a:	697b      	ldr	r3, [r7, #20]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f042 0201 	orr.w	r2, r2, #1
 8005332:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005334:	697b      	ldr	r3, [r7, #20]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	681a      	ldr	r2, [r3, #0]
 800533a:	697b      	ldr	r3, [r7, #20]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005342:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005344:	697b      	ldr	r3, [r7, #20]
 8005346:	2200      	movs	r2, #0
 8005348:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800534a:	697b      	ldr	r3, [r7, #20]
 800534c:	2228      	movs	r2, #40	; 0x28
 800534e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005352:	e007      	b.n	8005364 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8005354:	697b      	ldr	r3, [r7, #20]
 8005356:	2220      	movs	r2, #32
 8005358:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800535c:	697b      	ldr	r3, [r7, #20]
 800535e:	2200      	movs	r2, #0
 8005360:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8005364:	6978      	ldr	r0, [r7, #20]
 8005366:	f7fe fe56 	bl	8004016 <HAL_I2C_ErrorCallback>
}
 800536a:	bf00      	nop
 800536c:	3718      	adds	r7, #24
 800536e:	46bd      	mov	sp, r7
 8005370:	bd80      	pop	{r7, pc}
 8005372:	bf00      	nop
 8005374:	20000000 	.word	0x20000000
 8005378:	14f8b589 	.word	0x14f8b589

0800537c <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 800537c:	b480      	push	{r7}
 800537e:	b085      	sub	sp, #20
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005384:	2300      	movs	r3, #0
 8005386:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8005388:	4b13      	ldr	r3, [pc, #76]	; (80053d8 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	08db      	lsrs	r3, r3, #3
 800538e:	4a13      	ldr	r2, [pc, #76]	; (80053dc <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8005390:	fba2 2303 	umull	r2, r3, r2, r3
 8005394:	0a1a      	lsrs	r2, r3, #8
 8005396:	4613      	mov	r3, r2
 8005398:	009b      	lsls	r3, r3, #2
 800539a:	4413      	add	r3, r2
 800539c:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	3b01      	subs	r3, #1
 80053a2:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d107      	bne.n	80053ba <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053ae:	f043 0220 	orr.w	r2, r3, #32
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80053b6:	2301      	movs	r3, #1
 80053b8:	e008      	b.n	80053cc <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80053c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80053c8:	d0e9      	beq.n	800539e <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80053ca:	2300      	movs	r3, #0
}
 80053cc:	4618      	mov	r0, r3
 80053ce:	3714      	adds	r7, #20
 80053d0:	46bd      	mov	sp, r7
 80053d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d6:	4770      	bx	lr
 80053d8:	20000000 	.word	0x20000000
 80053dc:	14f8b589 	.word	0x14f8b589

080053e0 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80053e0:	b480      	push	{r7}
 80053e2:	b083      	sub	sp, #12
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053ec:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80053f0:	d103      	bne.n	80053fa <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	2201      	movs	r2, #1
 80053f6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80053f8:	e007      	b.n	800540a <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053fe:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8005402:	d102      	bne.n	800540a <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2208      	movs	r2, #8
 8005408:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800540a:	bf00      	nop
 800540c:	370c      	adds	r7, #12
 800540e:	46bd      	mov	sp, r7
 8005410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005414:	4770      	bx	lr
	...

08005418 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005418:	b580      	push	{r7, lr}
 800541a:	b086      	sub	sp, #24
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2b00      	cmp	r3, #0
 8005424:	d101      	bne.n	800542a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005426:	2301      	movs	r3, #1
 8005428:	e267      	b.n	80058fa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f003 0301 	and.w	r3, r3, #1
 8005432:	2b00      	cmp	r3, #0
 8005434:	d075      	beq.n	8005522 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005436:	4b88      	ldr	r3, [pc, #544]	; (8005658 <HAL_RCC_OscConfig+0x240>)
 8005438:	689b      	ldr	r3, [r3, #8]
 800543a:	f003 030c 	and.w	r3, r3, #12
 800543e:	2b04      	cmp	r3, #4
 8005440:	d00c      	beq.n	800545c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005442:	4b85      	ldr	r3, [pc, #532]	; (8005658 <HAL_RCC_OscConfig+0x240>)
 8005444:	689b      	ldr	r3, [r3, #8]
 8005446:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800544a:	2b08      	cmp	r3, #8
 800544c:	d112      	bne.n	8005474 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800544e:	4b82      	ldr	r3, [pc, #520]	; (8005658 <HAL_RCC_OscConfig+0x240>)
 8005450:	685b      	ldr	r3, [r3, #4]
 8005452:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005456:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800545a:	d10b      	bne.n	8005474 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800545c:	4b7e      	ldr	r3, [pc, #504]	; (8005658 <HAL_RCC_OscConfig+0x240>)
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005464:	2b00      	cmp	r3, #0
 8005466:	d05b      	beq.n	8005520 <HAL_RCC_OscConfig+0x108>
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	685b      	ldr	r3, [r3, #4]
 800546c:	2b00      	cmp	r3, #0
 800546e:	d157      	bne.n	8005520 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005470:	2301      	movs	r3, #1
 8005472:	e242      	b.n	80058fa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	685b      	ldr	r3, [r3, #4]
 8005478:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800547c:	d106      	bne.n	800548c <HAL_RCC_OscConfig+0x74>
 800547e:	4b76      	ldr	r3, [pc, #472]	; (8005658 <HAL_RCC_OscConfig+0x240>)
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	4a75      	ldr	r2, [pc, #468]	; (8005658 <HAL_RCC_OscConfig+0x240>)
 8005484:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005488:	6013      	str	r3, [r2, #0]
 800548a:	e01d      	b.n	80054c8 <HAL_RCC_OscConfig+0xb0>
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	685b      	ldr	r3, [r3, #4]
 8005490:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005494:	d10c      	bne.n	80054b0 <HAL_RCC_OscConfig+0x98>
 8005496:	4b70      	ldr	r3, [pc, #448]	; (8005658 <HAL_RCC_OscConfig+0x240>)
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	4a6f      	ldr	r2, [pc, #444]	; (8005658 <HAL_RCC_OscConfig+0x240>)
 800549c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80054a0:	6013      	str	r3, [r2, #0]
 80054a2:	4b6d      	ldr	r3, [pc, #436]	; (8005658 <HAL_RCC_OscConfig+0x240>)
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	4a6c      	ldr	r2, [pc, #432]	; (8005658 <HAL_RCC_OscConfig+0x240>)
 80054a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80054ac:	6013      	str	r3, [r2, #0]
 80054ae:	e00b      	b.n	80054c8 <HAL_RCC_OscConfig+0xb0>
 80054b0:	4b69      	ldr	r3, [pc, #420]	; (8005658 <HAL_RCC_OscConfig+0x240>)
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	4a68      	ldr	r2, [pc, #416]	; (8005658 <HAL_RCC_OscConfig+0x240>)
 80054b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80054ba:	6013      	str	r3, [r2, #0]
 80054bc:	4b66      	ldr	r3, [pc, #408]	; (8005658 <HAL_RCC_OscConfig+0x240>)
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	4a65      	ldr	r2, [pc, #404]	; (8005658 <HAL_RCC_OscConfig+0x240>)
 80054c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80054c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	685b      	ldr	r3, [r3, #4]
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d013      	beq.n	80054f8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054d0:	f7fc fc9e 	bl	8001e10 <HAL_GetTick>
 80054d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80054d6:	e008      	b.n	80054ea <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80054d8:	f7fc fc9a 	bl	8001e10 <HAL_GetTick>
 80054dc:	4602      	mov	r2, r0
 80054de:	693b      	ldr	r3, [r7, #16]
 80054e0:	1ad3      	subs	r3, r2, r3
 80054e2:	2b64      	cmp	r3, #100	; 0x64
 80054e4:	d901      	bls.n	80054ea <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80054e6:	2303      	movs	r3, #3
 80054e8:	e207      	b.n	80058fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80054ea:	4b5b      	ldr	r3, [pc, #364]	; (8005658 <HAL_RCC_OscConfig+0x240>)
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d0f0      	beq.n	80054d8 <HAL_RCC_OscConfig+0xc0>
 80054f6:	e014      	b.n	8005522 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054f8:	f7fc fc8a 	bl	8001e10 <HAL_GetTick>
 80054fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80054fe:	e008      	b.n	8005512 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005500:	f7fc fc86 	bl	8001e10 <HAL_GetTick>
 8005504:	4602      	mov	r2, r0
 8005506:	693b      	ldr	r3, [r7, #16]
 8005508:	1ad3      	subs	r3, r2, r3
 800550a:	2b64      	cmp	r3, #100	; 0x64
 800550c:	d901      	bls.n	8005512 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800550e:	2303      	movs	r3, #3
 8005510:	e1f3      	b.n	80058fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005512:	4b51      	ldr	r3, [pc, #324]	; (8005658 <HAL_RCC_OscConfig+0x240>)
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800551a:	2b00      	cmp	r3, #0
 800551c:	d1f0      	bne.n	8005500 <HAL_RCC_OscConfig+0xe8>
 800551e:	e000      	b.n	8005522 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005520:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f003 0302 	and.w	r3, r3, #2
 800552a:	2b00      	cmp	r3, #0
 800552c:	d063      	beq.n	80055f6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800552e:	4b4a      	ldr	r3, [pc, #296]	; (8005658 <HAL_RCC_OscConfig+0x240>)
 8005530:	689b      	ldr	r3, [r3, #8]
 8005532:	f003 030c 	and.w	r3, r3, #12
 8005536:	2b00      	cmp	r3, #0
 8005538:	d00b      	beq.n	8005552 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800553a:	4b47      	ldr	r3, [pc, #284]	; (8005658 <HAL_RCC_OscConfig+0x240>)
 800553c:	689b      	ldr	r3, [r3, #8]
 800553e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005542:	2b08      	cmp	r3, #8
 8005544:	d11c      	bne.n	8005580 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005546:	4b44      	ldr	r3, [pc, #272]	; (8005658 <HAL_RCC_OscConfig+0x240>)
 8005548:	685b      	ldr	r3, [r3, #4]
 800554a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800554e:	2b00      	cmp	r3, #0
 8005550:	d116      	bne.n	8005580 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005552:	4b41      	ldr	r3, [pc, #260]	; (8005658 <HAL_RCC_OscConfig+0x240>)
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f003 0302 	and.w	r3, r3, #2
 800555a:	2b00      	cmp	r3, #0
 800555c:	d005      	beq.n	800556a <HAL_RCC_OscConfig+0x152>
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	68db      	ldr	r3, [r3, #12]
 8005562:	2b01      	cmp	r3, #1
 8005564:	d001      	beq.n	800556a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005566:	2301      	movs	r3, #1
 8005568:	e1c7      	b.n	80058fa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800556a:	4b3b      	ldr	r3, [pc, #236]	; (8005658 <HAL_RCC_OscConfig+0x240>)
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	691b      	ldr	r3, [r3, #16]
 8005576:	00db      	lsls	r3, r3, #3
 8005578:	4937      	ldr	r1, [pc, #220]	; (8005658 <HAL_RCC_OscConfig+0x240>)
 800557a:	4313      	orrs	r3, r2
 800557c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800557e:	e03a      	b.n	80055f6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	68db      	ldr	r3, [r3, #12]
 8005584:	2b00      	cmp	r3, #0
 8005586:	d020      	beq.n	80055ca <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005588:	4b34      	ldr	r3, [pc, #208]	; (800565c <HAL_RCC_OscConfig+0x244>)
 800558a:	2201      	movs	r2, #1
 800558c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800558e:	f7fc fc3f 	bl	8001e10 <HAL_GetTick>
 8005592:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005594:	e008      	b.n	80055a8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005596:	f7fc fc3b 	bl	8001e10 <HAL_GetTick>
 800559a:	4602      	mov	r2, r0
 800559c:	693b      	ldr	r3, [r7, #16]
 800559e:	1ad3      	subs	r3, r2, r3
 80055a0:	2b02      	cmp	r3, #2
 80055a2:	d901      	bls.n	80055a8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80055a4:	2303      	movs	r3, #3
 80055a6:	e1a8      	b.n	80058fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80055a8:	4b2b      	ldr	r3, [pc, #172]	; (8005658 <HAL_RCC_OscConfig+0x240>)
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f003 0302 	and.w	r3, r3, #2
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d0f0      	beq.n	8005596 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80055b4:	4b28      	ldr	r3, [pc, #160]	; (8005658 <HAL_RCC_OscConfig+0x240>)
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	691b      	ldr	r3, [r3, #16]
 80055c0:	00db      	lsls	r3, r3, #3
 80055c2:	4925      	ldr	r1, [pc, #148]	; (8005658 <HAL_RCC_OscConfig+0x240>)
 80055c4:	4313      	orrs	r3, r2
 80055c6:	600b      	str	r3, [r1, #0]
 80055c8:	e015      	b.n	80055f6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80055ca:	4b24      	ldr	r3, [pc, #144]	; (800565c <HAL_RCC_OscConfig+0x244>)
 80055cc:	2200      	movs	r2, #0
 80055ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055d0:	f7fc fc1e 	bl	8001e10 <HAL_GetTick>
 80055d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80055d6:	e008      	b.n	80055ea <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80055d8:	f7fc fc1a 	bl	8001e10 <HAL_GetTick>
 80055dc:	4602      	mov	r2, r0
 80055de:	693b      	ldr	r3, [r7, #16]
 80055e0:	1ad3      	subs	r3, r2, r3
 80055e2:	2b02      	cmp	r3, #2
 80055e4:	d901      	bls.n	80055ea <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80055e6:	2303      	movs	r3, #3
 80055e8:	e187      	b.n	80058fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80055ea:	4b1b      	ldr	r3, [pc, #108]	; (8005658 <HAL_RCC_OscConfig+0x240>)
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f003 0302 	and.w	r3, r3, #2
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d1f0      	bne.n	80055d8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f003 0308 	and.w	r3, r3, #8
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d036      	beq.n	8005670 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	695b      	ldr	r3, [r3, #20]
 8005606:	2b00      	cmp	r3, #0
 8005608:	d016      	beq.n	8005638 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800560a:	4b15      	ldr	r3, [pc, #84]	; (8005660 <HAL_RCC_OscConfig+0x248>)
 800560c:	2201      	movs	r2, #1
 800560e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005610:	f7fc fbfe 	bl	8001e10 <HAL_GetTick>
 8005614:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005616:	e008      	b.n	800562a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005618:	f7fc fbfa 	bl	8001e10 <HAL_GetTick>
 800561c:	4602      	mov	r2, r0
 800561e:	693b      	ldr	r3, [r7, #16]
 8005620:	1ad3      	subs	r3, r2, r3
 8005622:	2b02      	cmp	r3, #2
 8005624:	d901      	bls.n	800562a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005626:	2303      	movs	r3, #3
 8005628:	e167      	b.n	80058fa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800562a:	4b0b      	ldr	r3, [pc, #44]	; (8005658 <HAL_RCC_OscConfig+0x240>)
 800562c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800562e:	f003 0302 	and.w	r3, r3, #2
 8005632:	2b00      	cmp	r3, #0
 8005634:	d0f0      	beq.n	8005618 <HAL_RCC_OscConfig+0x200>
 8005636:	e01b      	b.n	8005670 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005638:	4b09      	ldr	r3, [pc, #36]	; (8005660 <HAL_RCC_OscConfig+0x248>)
 800563a:	2200      	movs	r2, #0
 800563c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800563e:	f7fc fbe7 	bl	8001e10 <HAL_GetTick>
 8005642:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005644:	e00e      	b.n	8005664 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005646:	f7fc fbe3 	bl	8001e10 <HAL_GetTick>
 800564a:	4602      	mov	r2, r0
 800564c:	693b      	ldr	r3, [r7, #16]
 800564e:	1ad3      	subs	r3, r2, r3
 8005650:	2b02      	cmp	r3, #2
 8005652:	d907      	bls.n	8005664 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005654:	2303      	movs	r3, #3
 8005656:	e150      	b.n	80058fa <HAL_RCC_OscConfig+0x4e2>
 8005658:	40023800 	.word	0x40023800
 800565c:	42470000 	.word	0x42470000
 8005660:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005664:	4b88      	ldr	r3, [pc, #544]	; (8005888 <HAL_RCC_OscConfig+0x470>)
 8005666:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005668:	f003 0302 	and.w	r3, r3, #2
 800566c:	2b00      	cmp	r3, #0
 800566e:	d1ea      	bne.n	8005646 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f003 0304 	and.w	r3, r3, #4
 8005678:	2b00      	cmp	r3, #0
 800567a:	f000 8097 	beq.w	80057ac <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800567e:	2300      	movs	r3, #0
 8005680:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005682:	4b81      	ldr	r3, [pc, #516]	; (8005888 <HAL_RCC_OscConfig+0x470>)
 8005684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005686:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800568a:	2b00      	cmp	r3, #0
 800568c:	d10f      	bne.n	80056ae <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800568e:	2300      	movs	r3, #0
 8005690:	60bb      	str	r3, [r7, #8]
 8005692:	4b7d      	ldr	r3, [pc, #500]	; (8005888 <HAL_RCC_OscConfig+0x470>)
 8005694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005696:	4a7c      	ldr	r2, [pc, #496]	; (8005888 <HAL_RCC_OscConfig+0x470>)
 8005698:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800569c:	6413      	str	r3, [r2, #64]	; 0x40
 800569e:	4b7a      	ldr	r3, [pc, #488]	; (8005888 <HAL_RCC_OscConfig+0x470>)
 80056a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056a6:	60bb      	str	r3, [r7, #8]
 80056a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80056aa:	2301      	movs	r3, #1
 80056ac:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80056ae:	4b77      	ldr	r3, [pc, #476]	; (800588c <HAL_RCC_OscConfig+0x474>)
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d118      	bne.n	80056ec <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80056ba:	4b74      	ldr	r3, [pc, #464]	; (800588c <HAL_RCC_OscConfig+0x474>)
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	4a73      	ldr	r2, [pc, #460]	; (800588c <HAL_RCC_OscConfig+0x474>)
 80056c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80056c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80056c6:	f7fc fba3 	bl	8001e10 <HAL_GetTick>
 80056ca:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80056cc:	e008      	b.n	80056e0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80056ce:	f7fc fb9f 	bl	8001e10 <HAL_GetTick>
 80056d2:	4602      	mov	r2, r0
 80056d4:	693b      	ldr	r3, [r7, #16]
 80056d6:	1ad3      	subs	r3, r2, r3
 80056d8:	2b02      	cmp	r3, #2
 80056da:	d901      	bls.n	80056e0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80056dc:	2303      	movs	r3, #3
 80056de:	e10c      	b.n	80058fa <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80056e0:	4b6a      	ldr	r3, [pc, #424]	; (800588c <HAL_RCC_OscConfig+0x474>)
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d0f0      	beq.n	80056ce <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	689b      	ldr	r3, [r3, #8]
 80056f0:	2b01      	cmp	r3, #1
 80056f2:	d106      	bne.n	8005702 <HAL_RCC_OscConfig+0x2ea>
 80056f4:	4b64      	ldr	r3, [pc, #400]	; (8005888 <HAL_RCC_OscConfig+0x470>)
 80056f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056f8:	4a63      	ldr	r2, [pc, #396]	; (8005888 <HAL_RCC_OscConfig+0x470>)
 80056fa:	f043 0301 	orr.w	r3, r3, #1
 80056fe:	6713      	str	r3, [r2, #112]	; 0x70
 8005700:	e01c      	b.n	800573c <HAL_RCC_OscConfig+0x324>
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	689b      	ldr	r3, [r3, #8]
 8005706:	2b05      	cmp	r3, #5
 8005708:	d10c      	bne.n	8005724 <HAL_RCC_OscConfig+0x30c>
 800570a:	4b5f      	ldr	r3, [pc, #380]	; (8005888 <HAL_RCC_OscConfig+0x470>)
 800570c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800570e:	4a5e      	ldr	r2, [pc, #376]	; (8005888 <HAL_RCC_OscConfig+0x470>)
 8005710:	f043 0304 	orr.w	r3, r3, #4
 8005714:	6713      	str	r3, [r2, #112]	; 0x70
 8005716:	4b5c      	ldr	r3, [pc, #368]	; (8005888 <HAL_RCC_OscConfig+0x470>)
 8005718:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800571a:	4a5b      	ldr	r2, [pc, #364]	; (8005888 <HAL_RCC_OscConfig+0x470>)
 800571c:	f043 0301 	orr.w	r3, r3, #1
 8005720:	6713      	str	r3, [r2, #112]	; 0x70
 8005722:	e00b      	b.n	800573c <HAL_RCC_OscConfig+0x324>
 8005724:	4b58      	ldr	r3, [pc, #352]	; (8005888 <HAL_RCC_OscConfig+0x470>)
 8005726:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005728:	4a57      	ldr	r2, [pc, #348]	; (8005888 <HAL_RCC_OscConfig+0x470>)
 800572a:	f023 0301 	bic.w	r3, r3, #1
 800572e:	6713      	str	r3, [r2, #112]	; 0x70
 8005730:	4b55      	ldr	r3, [pc, #340]	; (8005888 <HAL_RCC_OscConfig+0x470>)
 8005732:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005734:	4a54      	ldr	r2, [pc, #336]	; (8005888 <HAL_RCC_OscConfig+0x470>)
 8005736:	f023 0304 	bic.w	r3, r3, #4
 800573a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	689b      	ldr	r3, [r3, #8]
 8005740:	2b00      	cmp	r3, #0
 8005742:	d015      	beq.n	8005770 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005744:	f7fc fb64 	bl	8001e10 <HAL_GetTick>
 8005748:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800574a:	e00a      	b.n	8005762 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800574c:	f7fc fb60 	bl	8001e10 <HAL_GetTick>
 8005750:	4602      	mov	r2, r0
 8005752:	693b      	ldr	r3, [r7, #16]
 8005754:	1ad3      	subs	r3, r2, r3
 8005756:	f241 3288 	movw	r2, #5000	; 0x1388
 800575a:	4293      	cmp	r3, r2
 800575c:	d901      	bls.n	8005762 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800575e:	2303      	movs	r3, #3
 8005760:	e0cb      	b.n	80058fa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005762:	4b49      	ldr	r3, [pc, #292]	; (8005888 <HAL_RCC_OscConfig+0x470>)
 8005764:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005766:	f003 0302 	and.w	r3, r3, #2
 800576a:	2b00      	cmp	r3, #0
 800576c:	d0ee      	beq.n	800574c <HAL_RCC_OscConfig+0x334>
 800576e:	e014      	b.n	800579a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005770:	f7fc fb4e 	bl	8001e10 <HAL_GetTick>
 8005774:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005776:	e00a      	b.n	800578e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005778:	f7fc fb4a 	bl	8001e10 <HAL_GetTick>
 800577c:	4602      	mov	r2, r0
 800577e:	693b      	ldr	r3, [r7, #16]
 8005780:	1ad3      	subs	r3, r2, r3
 8005782:	f241 3288 	movw	r2, #5000	; 0x1388
 8005786:	4293      	cmp	r3, r2
 8005788:	d901      	bls.n	800578e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800578a:	2303      	movs	r3, #3
 800578c:	e0b5      	b.n	80058fa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800578e:	4b3e      	ldr	r3, [pc, #248]	; (8005888 <HAL_RCC_OscConfig+0x470>)
 8005790:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005792:	f003 0302 	and.w	r3, r3, #2
 8005796:	2b00      	cmp	r3, #0
 8005798:	d1ee      	bne.n	8005778 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800579a:	7dfb      	ldrb	r3, [r7, #23]
 800579c:	2b01      	cmp	r3, #1
 800579e:	d105      	bne.n	80057ac <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80057a0:	4b39      	ldr	r3, [pc, #228]	; (8005888 <HAL_RCC_OscConfig+0x470>)
 80057a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057a4:	4a38      	ldr	r2, [pc, #224]	; (8005888 <HAL_RCC_OscConfig+0x470>)
 80057a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80057aa:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	699b      	ldr	r3, [r3, #24]
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	f000 80a1 	beq.w	80058f8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80057b6:	4b34      	ldr	r3, [pc, #208]	; (8005888 <HAL_RCC_OscConfig+0x470>)
 80057b8:	689b      	ldr	r3, [r3, #8]
 80057ba:	f003 030c 	and.w	r3, r3, #12
 80057be:	2b08      	cmp	r3, #8
 80057c0:	d05c      	beq.n	800587c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	699b      	ldr	r3, [r3, #24]
 80057c6:	2b02      	cmp	r3, #2
 80057c8:	d141      	bne.n	800584e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80057ca:	4b31      	ldr	r3, [pc, #196]	; (8005890 <HAL_RCC_OscConfig+0x478>)
 80057cc:	2200      	movs	r2, #0
 80057ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057d0:	f7fc fb1e 	bl	8001e10 <HAL_GetTick>
 80057d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80057d6:	e008      	b.n	80057ea <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80057d8:	f7fc fb1a 	bl	8001e10 <HAL_GetTick>
 80057dc:	4602      	mov	r2, r0
 80057de:	693b      	ldr	r3, [r7, #16]
 80057e0:	1ad3      	subs	r3, r2, r3
 80057e2:	2b02      	cmp	r3, #2
 80057e4:	d901      	bls.n	80057ea <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80057e6:	2303      	movs	r3, #3
 80057e8:	e087      	b.n	80058fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80057ea:	4b27      	ldr	r3, [pc, #156]	; (8005888 <HAL_RCC_OscConfig+0x470>)
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d1f0      	bne.n	80057d8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	69da      	ldr	r2, [r3, #28]
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	6a1b      	ldr	r3, [r3, #32]
 80057fe:	431a      	orrs	r2, r3
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005804:	019b      	lsls	r3, r3, #6
 8005806:	431a      	orrs	r2, r3
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800580c:	085b      	lsrs	r3, r3, #1
 800580e:	3b01      	subs	r3, #1
 8005810:	041b      	lsls	r3, r3, #16
 8005812:	431a      	orrs	r2, r3
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005818:	061b      	lsls	r3, r3, #24
 800581a:	491b      	ldr	r1, [pc, #108]	; (8005888 <HAL_RCC_OscConfig+0x470>)
 800581c:	4313      	orrs	r3, r2
 800581e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005820:	4b1b      	ldr	r3, [pc, #108]	; (8005890 <HAL_RCC_OscConfig+0x478>)
 8005822:	2201      	movs	r2, #1
 8005824:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005826:	f7fc faf3 	bl	8001e10 <HAL_GetTick>
 800582a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800582c:	e008      	b.n	8005840 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800582e:	f7fc faef 	bl	8001e10 <HAL_GetTick>
 8005832:	4602      	mov	r2, r0
 8005834:	693b      	ldr	r3, [r7, #16]
 8005836:	1ad3      	subs	r3, r2, r3
 8005838:	2b02      	cmp	r3, #2
 800583a:	d901      	bls.n	8005840 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800583c:	2303      	movs	r3, #3
 800583e:	e05c      	b.n	80058fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005840:	4b11      	ldr	r3, [pc, #68]	; (8005888 <HAL_RCC_OscConfig+0x470>)
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005848:	2b00      	cmp	r3, #0
 800584a:	d0f0      	beq.n	800582e <HAL_RCC_OscConfig+0x416>
 800584c:	e054      	b.n	80058f8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800584e:	4b10      	ldr	r3, [pc, #64]	; (8005890 <HAL_RCC_OscConfig+0x478>)
 8005850:	2200      	movs	r2, #0
 8005852:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005854:	f7fc fadc 	bl	8001e10 <HAL_GetTick>
 8005858:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800585a:	e008      	b.n	800586e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800585c:	f7fc fad8 	bl	8001e10 <HAL_GetTick>
 8005860:	4602      	mov	r2, r0
 8005862:	693b      	ldr	r3, [r7, #16]
 8005864:	1ad3      	subs	r3, r2, r3
 8005866:	2b02      	cmp	r3, #2
 8005868:	d901      	bls.n	800586e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800586a:	2303      	movs	r3, #3
 800586c:	e045      	b.n	80058fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800586e:	4b06      	ldr	r3, [pc, #24]	; (8005888 <HAL_RCC_OscConfig+0x470>)
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005876:	2b00      	cmp	r3, #0
 8005878:	d1f0      	bne.n	800585c <HAL_RCC_OscConfig+0x444>
 800587a:	e03d      	b.n	80058f8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	699b      	ldr	r3, [r3, #24]
 8005880:	2b01      	cmp	r3, #1
 8005882:	d107      	bne.n	8005894 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005884:	2301      	movs	r3, #1
 8005886:	e038      	b.n	80058fa <HAL_RCC_OscConfig+0x4e2>
 8005888:	40023800 	.word	0x40023800
 800588c:	40007000 	.word	0x40007000
 8005890:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005894:	4b1b      	ldr	r3, [pc, #108]	; (8005904 <HAL_RCC_OscConfig+0x4ec>)
 8005896:	685b      	ldr	r3, [r3, #4]
 8005898:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	699b      	ldr	r3, [r3, #24]
 800589e:	2b01      	cmp	r3, #1
 80058a0:	d028      	beq.n	80058f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80058ac:	429a      	cmp	r2, r3
 80058ae:	d121      	bne.n	80058f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80058ba:	429a      	cmp	r2, r3
 80058bc:	d11a      	bne.n	80058f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80058be:	68fa      	ldr	r2, [r7, #12]
 80058c0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80058c4:	4013      	ands	r3, r2
 80058c6:	687a      	ldr	r2, [r7, #4]
 80058c8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80058ca:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80058cc:	4293      	cmp	r3, r2
 80058ce:	d111      	bne.n	80058f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058da:	085b      	lsrs	r3, r3, #1
 80058dc:	3b01      	subs	r3, #1
 80058de:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80058e0:	429a      	cmp	r2, r3
 80058e2:	d107      	bne.n	80058f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058ee:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80058f0:	429a      	cmp	r2, r3
 80058f2:	d001      	beq.n	80058f8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80058f4:	2301      	movs	r3, #1
 80058f6:	e000      	b.n	80058fa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80058f8:	2300      	movs	r3, #0
}
 80058fa:	4618      	mov	r0, r3
 80058fc:	3718      	adds	r7, #24
 80058fe:	46bd      	mov	sp, r7
 8005900:	bd80      	pop	{r7, pc}
 8005902:	bf00      	nop
 8005904:	40023800 	.word	0x40023800

08005908 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005908:	b580      	push	{r7, lr}
 800590a:	b084      	sub	sp, #16
 800590c:	af00      	add	r7, sp, #0
 800590e:	6078      	str	r0, [r7, #4]
 8005910:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	2b00      	cmp	r3, #0
 8005916:	d101      	bne.n	800591c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005918:	2301      	movs	r3, #1
 800591a:	e0cc      	b.n	8005ab6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800591c:	4b68      	ldr	r3, [pc, #416]	; (8005ac0 <HAL_RCC_ClockConfig+0x1b8>)
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f003 0307 	and.w	r3, r3, #7
 8005924:	683a      	ldr	r2, [r7, #0]
 8005926:	429a      	cmp	r2, r3
 8005928:	d90c      	bls.n	8005944 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800592a:	4b65      	ldr	r3, [pc, #404]	; (8005ac0 <HAL_RCC_ClockConfig+0x1b8>)
 800592c:	683a      	ldr	r2, [r7, #0]
 800592e:	b2d2      	uxtb	r2, r2
 8005930:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005932:	4b63      	ldr	r3, [pc, #396]	; (8005ac0 <HAL_RCC_ClockConfig+0x1b8>)
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f003 0307 	and.w	r3, r3, #7
 800593a:	683a      	ldr	r2, [r7, #0]
 800593c:	429a      	cmp	r2, r3
 800593e:	d001      	beq.n	8005944 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005940:	2301      	movs	r3, #1
 8005942:	e0b8      	b.n	8005ab6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	f003 0302 	and.w	r3, r3, #2
 800594c:	2b00      	cmp	r3, #0
 800594e:	d020      	beq.n	8005992 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f003 0304 	and.w	r3, r3, #4
 8005958:	2b00      	cmp	r3, #0
 800595a:	d005      	beq.n	8005968 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800595c:	4b59      	ldr	r3, [pc, #356]	; (8005ac4 <HAL_RCC_ClockConfig+0x1bc>)
 800595e:	689b      	ldr	r3, [r3, #8]
 8005960:	4a58      	ldr	r2, [pc, #352]	; (8005ac4 <HAL_RCC_ClockConfig+0x1bc>)
 8005962:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005966:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	f003 0308 	and.w	r3, r3, #8
 8005970:	2b00      	cmp	r3, #0
 8005972:	d005      	beq.n	8005980 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005974:	4b53      	ldr	r3, [pc, #332]	; (8005ac4 <HAL_RCC_ClockConfig+0x1bc>)
 8005976:	689b      	ldr	r3, [r3, #8]
 8005978:	4a52      	ldr	r2, [pc, #328]	; (8005ac4 <HAL_RCC_ClockConfig+0x1bc>)
 800597a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800597e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005980:	4b50      	ldr	r3, [pc, #320]	; (8005ac4 <HAL_RCC_ClockConfig+0x1bc>)
 8005982:	689b      	ldr	r3, [r3, #8]
 8005984:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	689b      	ldr	r3, [r3, #8]
 800598c:	494d      	ldr	r1, [pc, #308]	; (8005ac4 <HAL_RCC_ClockConfig+0x1bc>)
 800598e:	4313      	orrs	r3, r2
 8005990:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	f003 0301 	and.w	r3, r3, #1
 800599a:	2b00      	cmp	r3, #0
 800599c:	d044      	beq.n	8005a28 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	685b      	ldr	r3, [r3, #4]
 80059a2:	2b01      	cmp	r3, #1
 80059a4:	d107      	bne.n	80059b6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80059a6:	4b47      	ldr	r3, [pc, #284]	; (8005ac4 <HAL_RCC_ClockConfig+0x1bc>)
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d119      	bne.n	80059e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80059b2:	2301      	movs	r3, #1
 80059b4:	e07f      	b.n	8005ab6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	685b      	ldr	r3, [r3, #4]
 80059ba:	2b02      	cmp	r3, #2
 80059bc:	d003      	beq.n	80059c6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80059c2:	2b03      	cmp	r3, #3
 80059c4:	d107      	bne.n	80059d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80059c6:	4b3f      	ldr	r3, [pc, #252]	; (8005ac4 <HAL_RCC_ClockConfig+0x1bc>)
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d109      	bne.n	80059e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80059d2:	2301      	movs	r3, #1
 80059d4:	e06f      	b.n	8005ab6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80059d6:	4b3b      	ldr	r3, [pc, #236]	; (8005ac4 <HAL_RCC_ClockConfig+0x1bc>)
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f003 0302 	and.w	r3, r3, #2
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d101      	bne.n	80059e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80059e2:	2301      	movs	r3, #1
 80059e4:	e067      	b.n	8005ab6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80059e6:	4b37      	ldr	r3, [pc, #220]	; (8005ac4 <HAL_RCC_ClockConfig+0x1bc>)
 80059e8:	689b      	ldr	r3, [r3, #8]
 80059ea:	f023 0203 	bic.w	r2, r3, #3
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	685b      	ldr	r3, [r3, #4]
 80059f2:	4934      	ldr	r1, [pc, #208]	; (8005ac4 <HAL_RCC_ClockConfig+0x1bc>)
 80059f4:	4313      	orrs	r3, r2
 80059f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80059f8:	f7fc fa0a 	bl	8001e10 <HAL_GetTick>
 80059fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80059fe:	e00a      	b.n	8005a16 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005a00:	f7fc fa06 	bl	8001e10 <HAL_GetTick>
 8005a04:	4602      	mov	r2, r0
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	1ad3      	subs	r3, r2, r3
 8005a0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a0e:	4293      	cmp	r3, r2
 8005a10:	d901      	bls.n	8005a16 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005a12:	2303      	movs	r3, #3
 8005a14:	e04f      	b.n	8005ab6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a16:	4b2b      	ldr	r3, [pc, #172]	; (8005ac4 <HAL_RCC_ClockConfig+0x1bc>)
 8005a18:	689b      	ldr	r3, [r3, #8]
 8005a1a:	f003 020c 	and.w	r2, r3, #12
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	685b      	ldr	r3, [r3, #4]
 8005a22:	009b      	lsls	r3, r3, #2
 8005a24:	429a      	cmp	r2, r3
 8005a26:	d1eb      	bne.n	8005a00 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005a28:	4b25      	ldr	r3, [pc, #148]	; (8005ac0 <HAL_RCC_ClockConfig+0x1b8>)
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	f003 0307 	and.w	r3, r3, #7
 8005a30:	683a      	ldr	r2, [r7, #0]
 8005a32:	429a      	cmp	r2, r3
 8005a34:	d20c      	bcs.n	8005a50 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a36:	4b22      	ldr	r3, [pc, #136]	; (8005ac0 <HAL_RCC_ClockConfig+0x1b8>)
 8005a38:	683a      	ldr	r2, [r7, #0]
 8005a3a:	b2d2      	uxtb	r2, r2
 8005a3c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a3e:	4b20      	ldr	r3, [pc, #128]	; (8005ac0 <HAL_RCC_ClockConfig+0x1b8>)
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f003 0307 	and.w	r3, r3, #7
 8005a46:	683a      	ldr	r2, [r7, #0]
 8005a48:	429a      	cmp	r2, r3
 8005a4a:	d001      	beq.n	8005a50 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005a4c:	2301      	movs	r3, #1
 8005a4e:	e032      	b.n	8005ab6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f003 0304 	and.w	r3, r3, #4
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d008      	beq.n	8005a6e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005a5c:	4b19      	ldr	r3, [pc, #100]	; (8005ac4 <HAL_RCC_ClockConfig+0x1bc>)
 8005a5e:	689b      	ldr	r3, [r3, #8]
 8005a60:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	68db      	ldr	r3, [r3, #12]
 8005a68:	4916      	ldr	r1, [pc, #88]	; (8005ac4 <HAL_RCC_ClockConfig+0x1bc>)
 8005a6a:	4313      	orrs	r3, r2
 8005a6c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	f003 0308 	and.w	r3, r3, #8
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d009      	beq.n	8005a8e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005a7a:	4b12      	ldr	r3, [pc, #72]	; (8005ac4 <HAL_RCC_ClockConfig+0x1bc>)
 8005a7c:	689b      	ldr	r3, [r3, #8]
 8005a7e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	691b      	ldr	r3, [r3, #16]
 8005a86:	00db      	lsls	r3, r3, #3
 8005a88:	490e      	ldr	r1, [pc, #56]	; (8005ac4 <HAL_RCC_ClockConfig+0x1bc>)
 8005a8a:	4313      	orrs	r3, r2
 8005a8c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005a8e:	f000 f82d 	bl	8005aec <HAL_RCC_GetSysClockFreq>
 8005a92:	4602      	mov	r2, r0
 8005a94:	4b0b      	ldr	r3, [pc, #44]	; (8005ac4 <HAL_RCC_ClockConfig+0x1bc>)
 8005a96:	689b      	ldr	r3, [r3, #8]
 8005a98:	091b      	lsrs	r3, r3, #4
 8005a9a:	f003 030f 	and.w	r3, r3, #15
 8005a9e:	490a      	ldr	r1, [pc, #40]	; (8005ac8 <HAL_RCC_ClockConfig+0x1c0>)
 8005aa0:	5ccb      	ldrb	r3, [r1, r3]
 8005aa2:	fa22 f303 	lsr.w	r3, r2, r3
 8005aa6:	4a09      	ldr	r2, [pc, #36]	; (8005acc <HAL_RCC_ClockConfig+0x1c4>)
 8005aa8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005aaa:	4b09      	ldr	r3, [pc, #36]	; (8005ad0 <HAL_RCC_ClockConfig+0x1c8>)
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	4618      	mov	r0, r3
 8005ab0:	f7fc f96a 	bl	8001d88 <HAL_InitTick>

  return HAL_OK;
 8005ab4:	2300      	movs	r3, #0
}
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	3710      	adds	r7, #16
 8005aba:	46bd      	mov	sp, r7
 8005abc:	bd80      	pop	{r7, pc}
 8005abe:	bf00      	nop
 8005ac0:	40023c00 	.word	0x40023c00
 8005ac4:	40023800 	.word	0x40023800
 8005ac8:	0800e308 	.word	0x0800e308
 8005acc:	20000000 	.word	0x20000000
 8005ad0:	20000004 	.word	0x20000004

08005ad4 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8005ad4:	b480      	push	{r7}
 8005ad6:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8005ad8:	4b03      	ldr	r3, [pc, #12]	; (8005ae8 <HAL_RCC_EnableCSS+0x14>)
 8005ada:	2201      	movs	r2, #1
 8005adc:	601a      	str	r2, [r3, #0]
}
 8005ade:	bf00      	nop
 8005ae0:	46bd      	mov	sp, r7
 8005ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae6:	4770      	bx	lr
 8005ae8:	4247004c 	.word	0x4247004c

08005aec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005aec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005af0:	b094      	sub	sp, #80	; 0x50
 8005af2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005af4:	2300      	movs	r3, #0
 8005af6:	647b      	str	r3, [r7, #68]	; 0x44
 8005af8:	2300      	movs	r3, #0
 8005afa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005afc:	2300      	movs	r3, #0
 8005afe:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005b00:	2300      	movs	r3, #0
 8005b02:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005b04:	4b79      	ldr	r3, [pc, #484]	; (8005cec <HAL_RCC_GetSysClockFreq+0x200>)
 8005b06:	689b      	ldr	r3, [r3, #8]
 8005b08:	f003 030c 	and.w	r3, r3, #12
 8005b0c:	2b08      	cmp	r3, #8
 8005b0e:	d00d      	beq.n	8005b2c <HAL_RCC_GetSysClockFreq+0x40>
 8005b10:	2b08      	cmp	r3, #8
 8005b12:	f200 80e1 	bhi.w	8005cd8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d002      	beq.n	8005b20 <HAL_RCC_GetSysClockFreq+0x34>
 8005b1a:	2b04      	cmp	r3, #4
 8005b1c:	d003      	beq.n	8005b26 <HAL_RCC_GetSysClockFreq+0x3a>
 8005b1e:	e0db      	b.n	8005cd8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005b20:	4b73      	ldr	r3, [pc, #460]	; (8005cf0 <HAL_RCC_GetSysClockFreq+0x204>)
 8005b22:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005b24:	e0db      	b.n	8005cde <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005b26:	4b73      	ldr	r3, [pc, #460]	; (8005cf4 <HAL_RCC_GetSysClockFreq+0x208>)
 8005b28:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005b2a:	e0d8      	b.n	8005cde <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005b2c:	4b6f      	ldr	r3, [pc, #444]	; (8005cec <HAL_RCC_GetSysClockFreq+0x200>)
 8005b2e:	685b      	ldr	r3, [r3, #4]
 8005b30:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005b34:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005b36:	4b6d      	ldr	r3, [pc, #436]	; (8005cec <HAL_RCC_GetSysClockFreq+0x200>)
 8005b38:	685b      	ldr	r3, [r3, #4]
 8005b3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d063      	beq.n	8005c0a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005b42:	4b6a      	ldr	r3, [pc, #424]	; (8005cec <HAL_RCC_GetSysClockFreq+0x200>)
 8005b44:	685b      	ldr	r3, [r3, #4]
 8005b46:	099b      	lsrs	r3, r3, #6
 8005b48:	2200      	movs	r2, #0
 8005b4a:	63bb      	str	r3, [r7, #56]	; 0x38
 8005b4c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005b4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b54:	633b      	str	r3, [r7, #48]	; 0x30
 8005b56:	2300      	movs	r3, #0
 8005b58:	637b      	str	r3, [r7, #52]	; 0x34
 8005b5a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005b5e:	4622      	mov	r2, r4
 8005b60:	462b      	mov	r3, r5
 8005b62:	f04f 0000 	mov.w	r0, #0
 8005b66:	f04f 0100 	mov.w	r1, #0
 8005b6a:	0159      	lsls	r1, r3, #5
 8005b6c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005b70:	0150      	lsls	r0, r2, #5
 8005b72:	4602      	mov	r2, r0
 8005b74:	460b      	mov	r3, r1
 8005b76:	4621      	mov	r1, r4
 8005b78:	1a51      	subs	r1, r2, r1
 8005b7a:	6139      	str	r1, [r7, #16]
 8005b7c:	4629      	mov	r1, r5
 8005b7e:	eb63 0301 	sbc.w	r3, r3, r1
 8005b82:	617b      	str	r3, [r7, #20]
 8005b84:	f04f 0200 	mov.w	r2, #0
 8005b88:	f04f 0300 	mov.w	r3, #0
 8005b8c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005b90:	4659      	mov	r1, fp
 8005b92:	018b      	lsls	r3, r1, #6
 8005b94:	4651      	mov	r1, sl
 8005b96:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005b9a:	4651      	mov	r1, sl
 8005b9c:	018a      	lsls	r2, r1, #6
 8005b9e:	4651      	mov	r1, sl
 8005ba0:	ebb2 0801 	subs.w	r8, r2, r1
 8005ba4:	4659      	mov	r1, fp
 8005ba6:	eb63 0901 	sbc.w	r9, r3, r1
 8005baa:	f04f 0200 	mov.w	r2, #0
 8005bae:	f04f 0300 	mov.w	r3, #0
 8005bb2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005bb6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005bba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005bbe:	4690      	mov	r8, r2
 8005bc0:	4699      	mov	r9, r3
 8005bc2:	4623      	mov	r3, r4
 8005bc4:	eb18 0303 	adds.w	r3, r8, r3
 8005bc8:	60bb      	str	r3, [r7, #8]
 8005bca:	462b      	mov	r3, r5
 8005bcc:	eb49 0303 	adc.w	r3, r9, r3
 8005bd0:	60fb      	str	r3, [r7, #12]
 8005bd2:	f04f 0200 	mov.w	r2, #0
 8005bd6:	f04f 0300 	mov.w	r3, #0
 8005bda:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005bde:	4629      	mov	r1, r5
 8005be0:	024b      	lsls	r3, r1, #9
 8005be2:	4621      	mov	r1, r4
 8005be4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005be8:	4621      	mov	r1, r4
 8005bea:	024a      	lsls	r2, r1, #9
 8005bec:	4610      	mov	r0, r2
 8005bee:	4619      	mov	r1, r3
 8005bf0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005bf2:	2200      	movs	r2, #0
 8005bf4:	62bb      	str	r3, [r7, #40]	; 0x28
 8005bf6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005bf8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005bfc:	f7fa fb38 	bl	8000270 <__aeabi_uldivmod>
 8005c00:	4602      	mov	r2, r0
 8005c02:	460b      	mov	r3, r1
 8005c04:	4613      	mov	r3, r2
 8005c06:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005c08:	e058      	b.n	8005cbc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005c0a:	4b38      	ldr	r3, [pc, #224]	; (8005cec <HAL_RCC_GetSysClockFreq+0x200>)
 8005c0c:	685b      	ldr	r3, [r3, #4]
 8005c0e:	099b      	lsrs	r3, r3, #6
 8005c10:	2200      	movs	r2, #0
 8005c12:	4618      	mov	r0, r3
 8005c14:	4611      	mov	r1, r2
 8005c16:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005c1a:	623b      	str	r3, [r7, #32]
 8005c1c:	2300      	movs	r3, #0
 8005c1e:	627b      	str	r3, [r7, #36]	; 0x24
 8005c20:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005c24:	4642      	mov	r2, r8
 8005c26:	464b      	mov	r3, r9
 8005c28:	f04f 0000 	mov.w	r0, #0
 8005c2c:	f04f 0100 	mov.w	r1, #0
 8005c30:	0159      	lsls	r1, r3, #5
 8005c32:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005c36:	0150      	lsls	r0, r2, #5
 8005c38:	4602      	mov	r2, r0
 8005c3a:	460b      	mov	r3, r1
 8005c3c:	4641      	mov	r1, r8
 8005c3e:	ebb2 0a01 	subs.w	sl, r2, r1
 8005c42:	4649      	mov	r1, r9
 8005c44:	eb63 0b01 	sbc.w	fp, r3, r1
 8005c48:	f04f 0200 	mov.w	r2, #0
 8005c4c:	f04f 0300 	mov.w	r3, #0
 8005c50:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005c54:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005c58:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005c5c:	ebb2 040a 	subs.w	r4, r2, sl
 8005c60:	eb63 050b 	sbc.w	r5, r3, fp
 8005c64:	f04f 0200 	mov.w	r2, #0
 8005c68:	f04f 0300 	mov.w	r3, #0
 8005c6c:	00eb      	lsls	r3, r5, #3
 8005c6e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005c72:	00e2      	lsls	r2, r4, #3
 8005c74:	4614      	mov	r4, r2
 8005c76:	461d      	mov	r5, r3
 8005c78:	4643      	mov	r3, r8
 8005c7a:	18e3      	adds	r3, r4, r3
 8005c7c:	603b      	str	r3, [r7, #0]
 8005c7e:	464b      	mov	r3, r9
 8005c80:	eb45 0303 	adc.w	r3, r5, r3
 8005c84:	607b      	str	r3, [r7, #4]
 8005c86:	f04f 0200 	mov.w	r2, #0
 8005c8a:	f04f 0300 	mov.w	r3, #0
 8005c8e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005c92:	4629      	mov	r1, r5
 8005c94:	028b      	lsls	r3, r1, #10
 8005c96:	4621      	mov	r1, r4
 8005c98:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005c9c:	4621      	mov	r1, r4
 8005c9e:	028a      	lsls	r2, r1, #10
 8005ca0:	4610      	mov	r0, r2
 8005ca2:	4619      	mov	r1, r3
 8005ca4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ca6:	2200      	movs	r2, #0
 8005ca8:	61bb      	str	r3, [r7, #24]
 8005caa:	61fa      	str	r2, [r7, #28]
 8005cac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005cb0:	f7fa fade 	bl	8000270 <__aeabi_uldivmod>
 8005cb4:	4602      	mov	r2, r0
 8005cb6:	460b      	mov	r3, r1
 8005cb8:	4613      	mov	r3, r2
 8005cba:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005cbc:	4b0b      	ldr	r3, [pc, #44]	; (8005cec <HAL_RCC_GetSysClockFreq+0x200>)
 8005cbe:	685b      	ldr	r3, [r3, #4]
 8005cc0:	0c1b      	lsrs	r3, r3, #16
 8005cc2:	f003 0303 	and.w	r3, r3, #3
 8005cc6:	3301      	adds	r3, #1
 8005cc8:	005b      	lsls	r3, r3, #1
 8005cca:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005ccc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005cce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005cd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cd4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005cd6:	e002      	b.n	8005cde <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005cd8:	4b05      	ldr	r3, [pc, #20]	; (8005cf0 <HAL_RCC_GetSysClockFreq+0x204>)
 8005cda:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005cdc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005cde:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005ce0:	4618      	mov	r0, r3
 8005ce2:	3750      	adds	r7, #80	; 0x50
 8005ce4:	46bd      	mov	sp, r7
 8005ce6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005cea:	bf00      	nop
 8005cec:	40023800 	.word	0x40023800
 8005cf0:	00f42400 	.word	0x00f42400
 8005cf4:	007a1200 	.word	0x007a1200

08005cf8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005cf8:	b480      	push	{r7}
 8005cfa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005cfc:	4b03      	ldr	r3, [pc, #12]	; (8005d0c <HAL_RCC_GetHCLKFreq+0x14>)
 8005cfe:	681b      	ldr	r3, [r3, #0]
}
 8005d00:	4618      	mov	r0, r3
 8005d02:	46bd      	mov	sp, r7
 8005d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d08:	4770      	bx	lr
 8005d0a:	bf00      	nop
 8005d0c:	20000000 	.word	0x20000000

08005d10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005d10:	b580      	push	{r7, lr}
 8005d12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005d14:	f7ff fff0 	bl	8005cf8 <HAL_RCC_GetHCLKFreq>
 8005d18:	4602      	mov	r2, r0
 8005d1a:	4b05      	ldr	r3, [pc, #20]	; (8005d30 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005d1c:	689b      	ldr	r3, [r3, #8]
 8005d1e:	0a9b      	lsrs	r3, r3, #10
 8005d20:	f003 0307 	and.w	r3, r3, #7
 8005d24:	4903      	ldr	r1, [pc, #12]	; (8005d34 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005d26:	5ccb      	ldrb	r3, [r1, r3]
 8005d28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	bd80      	pop	{r7, pc}
 8005d30:	40023800 	.word	0x40023800
 8005d34:	0800e318 	.word	0x0800e318

08005d38 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005d38:	b580      	push	{r7, lr}
 8005d3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005d3c:	f7ff ffdc 	bl	8005cf8 <HAL_RCC_GetHCLKFreq>
 8005d40:	4602      	mov	r2, r0
 8005d42:	4b05      	ldr	r3, [pc, #20]	; (8005d58 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005d44:	689b      	ldr	r3, [r3, #8]
 8005d46:	0b5b      	lsrs	r3, r3, #13
 8005d48:	f003 0307 	and.w	r3, r3, #7
 8005d4c:	4903      	ldr	r1, [pc, #12]	; (8005d5c <HAL_RCC_GetPCLK2Freq+0x24>)
 8005d4e:	5ccb      	ldrb	r3, [r1, r3]
 8005d50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005d54:	4618      	mov	r0, r3
 8005d56:	bd80      	pop	{r7, pc}
 8005d58:	40023800 	.word	0x40023800
 8005d5c:	0800e318 	.word	0x0800e318

08005d60 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8005d60:	b580      	push	{r7, lr}
 8005d62:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 8005d64:	4b06      	ldr	r3, [pc, #24]	; (8005d80 <HAL_RCC_NMI_IRQHandler+0x20>)
 8005d66:	68db      	ldr	r3, [r3, #12]
 8005d68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d6c:	2b80      	cmp	r3, #128	; 0x80
 8005d6e:	d104      	bne.n	8005d7a <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8005d70:	f000 f80a 	bl	8005d88 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8005d74:	4b03      	ldr	r3, [pc, #12]	; (8005d84 <HAL_RCC_NMI_IRQHandler+0x24>)
 8005d76:	2280      	movs	r2, #128	; 0x80
 8005d78:	701a      	strb	r2, [r3, #0]
  }
}
 8005d7a:	bf00      	nop
 8005d7c:	bd80      	pop	{r7, pc}
 8005d7e:	bf00      	nop
 8005d80:	40023800 	.word	0x40023800
 8005d84:	4002380e 	.word	0x4002380e

08005d88 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8005d88:	b480      	push	{r7}
 8005d8a:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 8005d8c:	bf00      	nop
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d94:	4770      	bx	lr
	...

08005d98 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005d98:	b580      	push	{r7, lr}
 8005d9a:	b086      	sub	sp, #24
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005da0:	2300      	movs	r3, #0
 8005da2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005da4:	2300      	movs	r3, #0
 8005da6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	f003 0301 	and.w	r3, r3, #1
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d105      	bne.n	8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d035      	beq.n	8005e2c <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005dc0:	4b62      	ldr	r3, [pc, #392]	; (8005f4c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8005dc2:	2200      	movs	r2, #0
 8005dc4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005dc6:	f7fc f823 	bl	8001e10 <HAL_GetTick>
 8005dca:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005dcc:	e008      	b.n	8005de0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005dce:	f7fc f81f 	bl	8001e10 <HAL_GetTick>
 8005dd2:	4602      	mov	r2, r0
 8005dd4:	697b      	ldr	r3, [r7, #20]
 8005dd6:	1ad3      	subs	r3, r2, r3
 8005dd8:	2b02      	cmp	r3, #2
 8005dda:	d901      	bls.n	8005de0 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005ddc:	2303      	movs	r3, #3
 8005dde:	e0b0      	b.n	8005f42 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005de0:	4b5b      	ldr	r3, [pc, #364]	; (8005f50 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d1f0      	bne.n	8005dce <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	685b      	ldr	r3, [r3, #4]
 8005df0:	019a      	lsls	r2, r3, #6
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	689b      	ldr	r3, [r3, #8]
 8005df6:	071b      	lsls	r3, r3, #28
 8005df8:	4955      	ldr	r1, [pc, #340]	; (8005f50 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005dfa:	4313      	orrs	r3, r2
 8005dfc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005e00:	4b52      	ldr	r3, [pc, #328]	; (8005f4c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8005e02:	2201      	movs	r2, #1
 8005e04:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005e06:	f7fc f803 	bl	8001e10 <HAL_GetTick>
 8005e0a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005e0c:	e008      	b.n	8005e20 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005e0e:	f7fb ffff 	bl	8001e10 <HAL_GetTick>
 8005e12:	4602      	mov	r2, r0
 8005e14:	697b      	ldr	r3, [r7, #20]
 8005e16:	1ad3      	subs	r3, r2, r3
 8005e18:	2b02      	cmp	r3, #2
 8005e1a:	d901      	bls.n	8005e20 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005e1c:	2303      	movs	r3, #3
 8005e1e:	e090      	b.n	8005f42 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005e20:	4b4b      	ldr	r3, [pc, #300]	; (8005f50 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d0f0      	beq.n	8005e0e <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	f003 0302 	and.w	r3, r3, #2
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	f000 8083 	beq.w	8005f40 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005e3a:	2300      	movs	r3, #0
 8005e3c:	60fb      	str	r3, [r7, #12]
 8005e3e:	4b44      	ldr	r3, [pc, #272]	; (8005f50 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e42:	4a43      	ldr	r2, [pc, #268]	; (8005f50 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005e44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e48:	6413      	str	r3, [r2, #64]	; 0x40
 8005e4a:	4b41      	ldr	r3, [pc, #260]	; (8005f50 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e52:	60fb      	str	r3, [r7, #12]
 8005e54:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005e56:	4b3f      	ldr	r3, [pc, #252]	; (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	4a3e      	ldr	r2, [pc, #248]	; (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005e5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e60:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005e62:	f7fb ffd5 	bl	8001e10 <HAL_GetTick>
 8005e66:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005e68:	e008      	b.n	8005e7c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005e6a:	f7fb ffd1 	bl	8001e10 <HAL_GetTick>
 8005e6e:	4602      	mov	r2, r0
 8005e70:	697b      	ldr	r3, [r7, #20]
 8005e72:	1ad3      	subs	r3, r2, r3
 8005e74:	2b02      	cmp	r3, #2
 8005e76:	d901      	bls.n	8005e7c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8005e78:	2303      	movs	r3, #3
 8005e7a:	e062      	b.n	8005f42 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005e7c:	4b35      	ldr	r3, [pc, #212]	; (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d0f0      	beq.n	8005e6a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005e88:	4b31      	ldr	r3, [pc, #196]	; (8005f50 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005e8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e8c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e90:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005e92:	693b      	ldr	r3, [r7, #16]
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d02f      	beq.n	8005ef8 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	68db      	ldr	r3, [r3, #12]
 8005e9c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ea0:	693a      	ldr	r2, [r7, #16]
 8005ea2:	429a      	cmp	r2, r3
 8005ea4:	d028      	beq.n	8005ef8 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005ea6:	4b2a      	ldr	r3, [pc, #168]	; (8005f50 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005ea8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005eaa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005eae:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005eb0:	4b29      	ldr	r3, [pc, #164]	; (8005f58 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005eb2:	2201      	movs	r2, #1
 8005eb4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005eb6:	4b28      	ldr	r3, [pc, #160]	; (8005f58 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005eb8:	2200      	movs	r2, #0
 8005eba:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005ebc:	4a24      	ldr	r2, [pc, #144]	; (8005f50 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005ebe:	693b      	ldr	r3, [r7, #16]
 8005ec0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005ec2:	4b23      	ldr	r3, [pc, #140]	; (8005f50 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005ec4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ec6:	f003 0301 	and.w	r3, r3, #1
 8005eca:	2b01      	cmp	r3, #1
 8005ecc:	d114      	bne.n	8005ef8 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005ece:	f7fb ff9f 	bl	8001e10 <HAL_GetTick>
 8005ed2:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ed4:	e00a      	b.n	8005eec <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005ed6:	f7fb ff9b 	bl	8001e10 <HAL_GetTick>
 8005eda:	4602      	mov	r2, r0
 8005edc:	697b      	ldr	r3, [r7, #20]
 8005ede:	1ad3      	subs	r3, r2, r3
 8005ee0:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ee4:	4293      	cmp	r3, r2
 8005ee6:	d901      	bls.n	8005eec <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8005ee8:	2303      	movs	r3, #3
 8005eea:	e02a      	b.n	8005f42 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005eec:	4b18      	ldr	r3, [pc, #96]	; (8005f50 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005eee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ef0:	f003 0302 	and.w	r3, r3, #2
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d0ee      	beq.n	8005ed6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	68db      	ldr	r3, [r3, #12]
 8005efc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f00:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005f04:	d10d      	bne.n	8005f22 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8005f06:	4b12      	ldr	r3, [pc, #72]	; (8005f50 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005f08:	689b      	ldr	r3, [r3, #8]
 8005f0a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	68db      	ldr	r3, [r3, #12]
 8005f12:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005f16:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f1a:	490d      	ldr	r1, [pc, #52]	; (8005f50 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005f1c:	4313      	orrs	r3, r2
 8005f1e:	608b      	str	r3, [r1, #8]
 8005f20:	e005      	b.n	8005f2e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8005f22:	4b0b      	ldr	r3, [pc, #44]	; (8005f50 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005f24:	689b      	ldr	r3, [r3, #8]
 8005f26:	4a0a      	ldr	r2, [pc, #40]	; (8005f50 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005f28:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005f2c:	6093      	str	r3, [r2, #8]
 8005f2e:	4b08      	ldr	r3, [pc, #32]	; (8005f50 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005f30:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	68db      	ldr	r3, [r3, #12]
 8005f36:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005f3a:	4905      	ldr	r1, [pc, #20]	; (8005f50 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005f3c:	4313      	orrs	r3, r2
 8005f3e:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8005f40:	2300      	movs	r3, #0
}
 8005f42:	4618      	mov	r0, r3
 8005f44:	3718      	adds	r7, #24
 8005f46:	46bd      	mov	sp, r7
 8005f48:	bd80      	pop	{r7, pc}
 8005f4a:	bf00      	nop
 8005f4c:	42470068 	.word	0x42470068
 8005f50:	40023800 	.word	0x40023800
 8005f54:	40007000 	.word	0x40007000
 8005f58:	42470e40 	.word	0x42470e40

08005f5c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005f5c:	b580      	push	{r7, lr}
 8005f5e:	b084      	sub	sp, #16
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005f64:	2301      	movs	r3, #1
 8005f66:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d101      	bne.n	8005f72 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8005f6e:	2301      	movs	r3, #1
 8005f70:	e066      	b.n	8006040 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	7f5b      	ldrb	r3, [r3, #29]
 8005f76:	b2db      	uxtb	r3, r3
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d105      	bne.n	8005f88 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	2200      	movs	r2, #0
 8005f80:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8005f82:	6878      	ldr	r0, [r7, #4]
 8005f84:	f7fb f97e 	bl	8001284 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	2202      	movs	r2, #2
 8005f8c:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	22ca      	movs	r2, #202	; 0xca
 8005f94:	625a      	str	r2, [r3, #36]	; 0x24
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	2253      	movs	r2, #83	; 0x53
 8005f9c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005f9e:	6878      	ldr	r0, [r7, #4]
 8005fa0:	f000 fa45 	bl	800642e <RTC_EnterInitMode>
 8005fa4:	4603      	mov	r3, r0
 8005fa6:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8005fa8:	7bfb      	ldrb	r3, [r7, #15]
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d12c      	bne.n	8006008 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	689b      	ldr	r3, [r3, #8]
 8005fb4:	687a      	ldr	r2, [r7, #4]
 8005fb6:	6812      	ldr	r2, [r2, #0]
 8005fb8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005fbc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005fc0:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	6899      	ldr	r1, [r3, #8]
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	685a      	ldr	r2, [r3, #4]
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	691b      	ldr	r3, [r3, #16]
 8005fd0:	431a      	orrs	r2, r3
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	695b      	ldr	r3, [r3, #20]
 8005fd6:	431a      	orrs	r2, r3
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	430a      	orrs	r2, r1
 8005fde:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	687a      	ldr	r2, [r7, #4]
 8005fe6:	68d2      	ldr	r2, [r2, #12]
 8005fe8:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	6919      	ldr	r1, [r3, #16]
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	689b      	ldr	r3, [r3, #8]
 8005ff4:	041a      	lsls	r2, r3, #16
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	430a      	orrs	r2, r1
 8005ffc:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005ffe:	6878      	ldr	r0, [r7, #4]
 8006000:	f000 fa4c 	bl	800649c <RTC_ExitInitMode>
 8006004:	4603      	mov	r3, r0
 8006006:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8006008:	7bfb      	ldrb	r3, [r7, #15]
 800600a:	2b00      	cmp	r3, #0
 800600c:	d113      	bne.n	8006036 <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800601c:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	699a      	ldr	r2, [r3, #24]
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	430a      	orrs	r2, r1
 800602e:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	2201      	movs	r2, #1
 8006034:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	22ff      	movs	r2, #255	; 0xff
 800603c:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 800603e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006040:	4618      	mov	r0, r3
 8006042:	3710      	adds	r7, #16
 8006044:	46bd      	mov	sp, r7
 8006046:	bd80      	pop	{r7, pc}

08006048 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006048:	b590      	push	{r4, r7, lr}
 800604a:	b087      	sub	sp, #28
 800604c:	af00      	add	r7, sp, #0
 800604e:	60f8      	str	r0, [r7, #12]
 8006050:	60b9      	str	r1, [r7, #8]
 8006052:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8006054:	2300      	movs	r3, #0
 8006056:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	7f1b      	ldrb	r3, [r3, #28]
 800605c:	2b01      	cmp	r3, #1
 800605e:	d101      	bne.n	8006064 <HAL_RTC_SetTime+0x1c>
 8006060:	2302      	movs	r3, #2
 8006062:	e087      	b.n	8006174 <HAL_RTC_SetTime+0x12c>
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	2201      	movs	r2, #1
 8006068:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	2202      	movs	r2, #2
 800606e:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	2b00      	cmp	r3, #0
 8006074:	d126      	bne.n	80060c4 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	689b      	ldr	r3, [r3, #8]
 800607c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006080:	2b00      	cmp	r3, #0
 8006082:	d102      	bne.n	800608a <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8006084:	68bb      	ldr	r3, [r7, #8]
 8006086:	2200      	movs	r2, #0
 8006088:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800608a:	68bb      	ldr	r3, [r7, #8]
 800608c:	781b      	ldrb	r3, [r3, #0]
 800608e:	4618      	mov	r0, r3
 8006090:	f000 fa29 	bl	80064e6 <RTC_ByteToBcd2>
 8006094:	4603      	mov	r3, r0
 8006096:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006098:	68bb      	ldr	r3, [r7, #8]
 800609a:	785b      	ldrb	r3, [r3, #1]
 800609c:	4618      	mov	r0, r3
 800609e:	f000 fa22 	bl	80064e6 <RTC_ByteToBcd2>
 80060a2:	4603      	mov	r3, r0
 80060a4:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80060a6:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 80060a8:	68bb      	ldr	r3, [r7, #8]
 80060aa:	789b      	ldrb	r3, [r3, #2]
 80060ac:	4618      	mov	r0, r3
 80060ae:	f000 fa1a 	bl	80064e6 <RTC_ByteToBcd2>
 80060b2:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80060b4:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 80060b8:	68bb      	ldr	r3, [r7, #8]
 80060ba:	78db      	ldrb	r3, [r3, #3]
 80060bc:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80060be:	4313      	orrs	r3, r2
 80060c0:	617b      	str	r3, [r7, #20]
 80060c2:	e018      	b.n	80060f6 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	689b      	ldr	r3, [r3, #8]
 80060ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d102      	bne.n	80060d8 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80060d2:	68bb      	ldr	r3, [r7, #8]
 80060d4:	2200      	movs	r2, #0
 80060d6:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80060d8:	68bb      	ldr	r3, [r7, #8]
 80060da:	781b      	ldrb	r3, [r3, #0]
 80060dc:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80060de:	68bb      	ldr	r3, [r7, #8]
 80060e0:	785b      	ldrb	r3, [r3, #1]
 80060e2:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80060e4:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 80060e6:	68ba      	ldr	r2, [r7, #8]
 80060e8:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80060ea:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80060ec:	68bb      	ldr	r3, [r7, #8]
 80060ee:	78db      	ldrb	r3, [r3, #3]
 80060f0:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80060f2:	4313      	orrs	r3, r2
 80060f4:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	22ca      	movs	r2, #202	; 0xca
 80060fc:	625a      	str	r2, [r3, #36]	; 0x24
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	2253      	movs	r2, #83	; 0x53
 8006104:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8006106:	68f8      	ldr	r0, [r7, #12]
 8006108:	f000 f991 	bl	800642e <RTC_EnterInitMode>
 800610c:	4603      	mov	r3, r0
 800610e:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8006110:	7cfb      	ldrb	r3, [r7, #19]
 8006112:	2b00      	cmp	r3, #0
 8006114:	d120      	bne.n	8006158 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	681a      	ldr	r2, [r3, #0]
 800611a:	697b      	ldr	r3, [r7, #20]
 800611c:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8006120:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8006124:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	689a      	ldr	r2, [r3, #8]
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006134:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	6899      	ldr	r1, [r3, #8]
 800613c:	68bb      	ldr	r3, [r7, #8]
 800613e:	68da      	ldr	r2, [r3, #12]
 8006140:	68bb      	ldr	r3, [r7, #8]
 8006142:	691b      	ldr	r3, [r3, #16]
 8006144:	431a      	orrs	r2, r3
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	430a      	orrs	r2, r1
 800614c:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800614e:	68f8      	ldr	r0, [r7, #12]
 8006150:	f000 f9a4 	bl	800649c <RTC_ExitInitMode>
 8006154:	4603      	mov	r3, r0
 8006156:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8006158:	7cfb      	ldrb	r3, [r7, #19]
 800615a:	2b00      	cmp	r3, #0
 800615c:	d102      	bne.n	8006164 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	2201      	movs	r2, #1
 8006162:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	22ff      	movs	r2, #255	; 0xff
 800616a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	2200      	movs	r2, #0
 8006170:	771a      	strb	r2, [r3, #28]

  return status;
 8006172:	7cfb      	ldrb	r3, [r7, #19]
}
 8006174:	4618      	mov	r0, r3
 8006176:	371c      	adds	r7, #28
 8006178:	46bd      	mov	sp, r7
 800617a:	bd90      	pop	{r4, r7, pc}

0800617c <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800617c:	b580      	push	{r7, lr}
 800617e:	b086      	sub	sp, #24
 8006180:	af00      	add	r7, sp, #0
 8006182:	60f8      	str	r0, [r7, #12]
 8006184:	60b9      	str	r1, [r7, #8]
 8006186:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8006188:	2300      	movs	r3, #0
 800618a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006192:	68bb      	ldr	r3, [r7, #8]
 8006194:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	691b      	ldr	r3, [r3, #16]
 800619c:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80061a0:	68bb      	ldr	r3, [r7, #8]
 80061a2:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80061ae:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80061b2:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 80061b4:	697b      	ldr	r3, [r7, #20]
 80061b6:	0c1b      	lsrs	r3, r3, #16
 80061b8:	b2db      	uxtb	r3, r3
 80061ba:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80061be:	b2da      	uxtb	r2, r3
 80061c0:	68bb      	ldr	r3, [r7, #8]
 80061c2:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 80061c4:	697b      	ldr	r3, [r7, #20]
 80061c6:	0a1b      	lsrs	r3, r3, #8
 80061c8:	b2db      	uxtb	r3, r3
 80061ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80061ce:	b2da      	uxtb	r2, r3
 80061d0:	68bb      	ldr	r3, [r7, #8]
 80061d2:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 80061d4:	697b      	ldr	r3, [r7, #20]
 80061d6:	b2db      	uxtb	r3, r3
 80061d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80061dc:	b2da      	uxtb	r2, r3
 80061de:	68bb      	ldr	r3, [r7, #8]
 80061e0:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 80061e2:	697b      	ldr	r3, [r7, #20]
 80061e4:	0d9b      	lsrs	r3, r3, #22
 80061e6:	b2db      	uxtb	r3, r3
 80061e8:	f003 0301 	and.w	r3, r3, #1
 80061ec:	b2da      	uxtb	r2, r3
 80061ee:	68bb      	ldr	r3, [r7, #8]
 80061f0:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d11a      	bne.n	800622e <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80061f8:	68bb      	ldr	r3, [r7, #8]
 80061fa:	781b      	ldrb	r3, [r3, #0]
 80061fc:	4618      	mov	r0, r3
 80061fe:	f000 f98f 	bl	8006520 <RTC_Bcd2ToByte>
 8006202:	4603      	mov	r3, r0
 8006204:	461a      	mov	r2, r3
 8006206:	68bb      	ldr	r3, [r7, #8]
 8006208:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800620a:	68bb      	ldr	r3, [r7, #8]
 800620c:	785b      	ldrb	r3, [r3, #1]
 800620e:	4618      	mov	r0, r3
 8006210:	f000 f986 	bl	8006520 <RTC_Bcd2ToByte>
 8006214:	4603      	mov	r3, r0
 8006216:	461a      	mov	r2, r3
 8006218:	68bb      	ldr	r3, [r7, #8]
 800621a:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800621c:	68bb      	ldr	r3, [r7, #8]
 800621e:	789b      	ldrb	r3, [r3, #2]
 8006220:	4618      	mov	r0, r3
 8006222:	f000 f97d 	bl	8006520 <RTC_Bcd2ToByte>
 8006226:	4603      	mov	r3, r0
 8006228:	461a      	mov	r2, r3
 800622a:	68bb      	ldr	r3, [r7, #8]
 800622c:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800622e:	2300      	movs	r3, #0
}
 8006230:	4618      	mov	r0, r3
 8006232:	3718      	adds	r7, #24
 8006234:	46bd      	mov	sp, r7
 8006236:	bd80      	pop	{r7, pc}

08006238 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006238:	b590      	push	{r4, r7, lr}
 800623a:	b087      	sub	sp, #28
 800623c:	af00      	add	r7, sp, #0
 800623e:	60f8      	str	r0, [r7, #12]
 8006240:	60b9      	str	r1, [r7, #8]
 8006242:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8006244:	2300      	movs	r3, #0
 8006246:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	7f1b      	ldrb	r3, [r3, #28]
 800624c:	2b01      	cmp	r3, #1
 800624e:	d101      	bne.n	8006254 <HAL_RTC_SetDate+0x1c>
 8006250:	2302      	movs	r3, #2
 8006252:	e071      	b.n	8006338 <HAL_RTC_SetDate+0x100>
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	2201      	movs	r2, #1
 8006258:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	2202      	movs	r2, #2
 800625e:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	2b00      	cmp	r3, #0
 8006264:	d10e      	bne.n	8006284 <HAL_RTC_SetDate+0x4c>
 8006266:	68bb      	ldr	r3, [r7, #8]
 8006268:	785b      	ldrb	r3, [r3, #1]
 800626a:	f003 0310 	and.w	r3, r3, #16
 800626e:	2b00      	cmp	r3, #0
 8006270:	d008      	beq.n	8006284 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8006272:	68bb      	ldr	r3, [r7, #8]
 8006274:	785b      	ldrb	r3, [r3, #1]
 8006276:	f023 0310 	bic.w	r3, r3, #16
 800627a:	b2db      	uxtb	r3, r3
 800627c:	330a      	adds	r3, #10
 800627e:	b2da      	uxtb	r2, r3
 8006280:	68bb      	ldr	r3, [r7, #8]
 8006282:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	2b00      	cmp	r3, #0
 8006288:	d11c      	bne.n	80062c4 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800628a:	68bb      	ldr	r3, [r7, #8]
 800628c:	78db      	ldrb	r3, [r3, #3]
 800628e:	4618      	mov	r0, r3
 8006290:	f000 f929 	bl	80064e6 <RTC_ByteToBcd2>
 8006294:	4603      	mov	r3, r0
 8006296:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8006298:	68bb      	ldr	r3, [r7, #8]
 800629a:	785b      	ldrb	r3, [r3, #1]
 800629c:	4618      	mov	r0, r3
 800629e:	f000 f922 	bl	80064e6 <RTC_ByteToBcd2>
 80062a2:	4603      	mov	r3, r0
 80062a4:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80062a6:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 80062a8:	68bb      	ldr	r3, [r7, #8]
 80062aa:	789b      	ldrb	r3, [r3, #2]
 80062ac:	4618      	mov	r0, r3
 80062ae:	f000 f91a 	bl	80064e6 <RTC_ByteToBcd2>
 80062b2:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80062b4:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 80062b8:	68bb      	ldr	r3, [r7, #8]
 80062ba:	781b      	ldrb	r3, [r3, #0]
 80062bc:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80062be:	4313      	orrs	r3, r2
 80062c0:	617b      	str	r3, [r7, #20]
 80062c2:	e00e      	b.n	80062e2 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80062c4:	68bb      	ldr	r3, [r7, #8]
 80062c6:	78db      	ldrb	r3, [r3, #3]
 80062c8:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80062ca:	68bb      	ldr	r3, [r7, #8]
 80062cc:	785b      	ldrb	r3, [r3, #1]
 80062ce:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80062d0:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 80062d2:	68ba      	ldr	r2, [r7, #8]
 80062d4:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80062d6:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80062d8:	68bb      	ldr	r3, [r7, #8]
 80062da:	781b      	ldrb	r3, [r3, #0]
 80062dc:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80062de:	4313      	orrs	r3, r2
 80062e0:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	22ca      	movs	r2, #202	; 0xca
 80062e8:	625a      	str	r2, [r3, #36]	; 0x24
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	2253      	movs	r2, #83	; 0x53
 80062f0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80062f2:	68f8      	ldr	r0, [r7, #12]
 80062f4:	f000 f89b 	bl	800642e <RTC_EnterInitMode>
 80062f8:	4603      	mov	r3, r0
 80062fa:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80062fc:	7cfb      	ldrb	r3, [r7, #19]
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d10c      	bne.n	800631c <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	681a      	ldr	r2, [r3, #0]
 8006306:	697b      	ldr	r3, [r7, #20]
 8006308:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800630c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006310:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8006312:	68f8      	ldr	r0, [r7, #12]
 8006314:	f000 f8c2 	bl	800649c <RTC_ExitInitMode>
 8006318:	4603      	mov	r3, r0
 800631a:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800631c:	7cfb      	ldrb	r3, [r7, #19]
 800631e:	2b00      	cmp	r3, #0
 8006320:	d102      	bne.n	8006328 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	2201      	movs	r2, #1
 8006326:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	22ff      	movs	r2, #255	; 0xff
 800632e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	2200      	movs	r2, #0
 8006334:	771a      	strb	r2, [r3, #28]

  return status;
 8006336:	7cfb      	ldrb	r3, [r7, #19]
}
 8006338:	4618      	mov	r0, r3
 800633a:	371c      	adds	r7, #28
 800633c:	46bd      	mov	sp, r7
 800633e:	bd90      	pop	{r4, r7, pc}

08006340 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006340:	b580      	push	{r7, lr}
 8006342:	b086      	sub	sp, #24
 8006344:	af00      	add	r7, sp, #0
 8006346:	60f8      	str	r0, [r7, #12]
 8006348:	60b9      	str	r1, [r7, #8]
 800634a:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800634c:	2300      	movs	r3, #0
 800634e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	685b      	ldr	r3, [r3, #4]
 8006356:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800635a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800635e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8006360:	697b      	ldr	r3, [r7, #20]
 8006362:	0c1b      	lsrs	r3, r3, #16
 8006364:	b2da      	uxtb	r2, r3
 8006366:	68bb      	ldr	r3, [r7, #8]
 8006368:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800636a:	697b      	ldr	r3, [r7, #20]
 800636c:	0a1b      	lsrs	r3, r3, #8
 800636e:	b2db      	uxtb	r3, r3
 8006370:	f003 031f 	and.w	r3, r3, #31
 8006374:	b2da      	uxtb	r2, r3
 8006376:	68bb      	ldr	r3, [r7, #8]
 8006378:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800637a:	697b      	ldr	r3, [r7, #20]
 800637c:	b2db      	uxtb	r3, r3
 800637e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006382:	b2da      	uxtb	r2, r3
 8006384:	68bb      	ldr	r3, [r7, #8]
 8006386:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8006388:	697b      	ldr	r3, [r7, #20]
 800638a:	0b5b      	lsrs	r3, r3, #13
 800638c:	b2db      	uxtb	r3, r3
 800638e:	f003 0307 	and.w	r3, r3, #7
 8006392:	b2da      	uxtb	r2, r3
 8006394:	68bb      	ldr	r3, [r7, #8]
 8006396:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	2b00      	cmp	r3, #0
 800639c:	d11a      	bne.n	80063d4 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800639e:	68bb      	ldr	r3, [r7, #8]
 80063a0:	78db      	ldrb	r3, [r3, #3]
 80063a2:	4618      	mov	r0, r3
 80063a4:	f000 f8bc 	bl	8006520 <RTC_Bcd2ToByte>
 80063a8:	4603      	mov	r3, r0
 80063aa:	461a      	mov	r2, r3
 80063ac:	68bb      	ldr	r3, [r7, #8]
 80063ae:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80063b0:	68bb      	ldr	r3, [r7, #8]
 80063b2:	785b      	ldrb	r3, [r3, #1]
 80063b4:	4618      	mov	r0, r3
 80063b6:	f000 f8b3 	bl	8006520 <RTC_Bcd2ToByte>
 80063ba:	4603      	mov	r3, r0
 80063bc:	461a      	mov	r2, r3
 80063be:	68bb      	ldr	r3, [r7, #8]
 80063c0:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80063c2:	68bb      	ldr	r3, [r7, #8]
 80063c4:	789b      	ldrb	r3, [r3, #2]
 80063c6:	4618      	mov	r0, r3
 80063c8:	f000 f8aa 	bl	8006520 <RTC_Bcd2ToByte>
 80063cc:	4603      	mov	r3, r0
 80063ce:	461a      	mov	r2, r3
 80063d0:	68bb      	ldr	r3, [r7, #8]
 80063d2:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80063d4:	2300      	movs	r3, #0
}
 80063d6:	4618      	mov	r0, r3
 80063d8:	3718      	adds	r7, #24
 80063da:	46bd      	mov	sp, r7
 80063dc:	bd80      	pop	{r7, pc}

080063de <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80063de:	b580      	push	{r7, lr}
 80063e0:	b084      	sub	sp, #16
 80063e2:	af00      	add	r7, sp, #0
 80063e4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80063e6:	2300      	movs	r3, #0
 80063e8:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	68da      	ldr	r2, [r3, #12]
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80063f8:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80063fa:	f7fb fd09 	bl	8001e10 <HAL_GetTick>
 80063fe:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006400:	e009      	b.n	8006416 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006402:	f7fb fd05 	bl	8001e10 <HAL_GetTick>
 8006406:	4602      	mov	r2, r0
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	1ad3      	subs	r3, r2, r3
 800640c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006410:	d901      	bls.n	8006416 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8006412:	2303      	movs	r3, #3
 8006414:	e007      	b.n	8006426 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	68db      	ldr	r3, [r3, #12]
 800641c:	f003 0320 	and.w	r3, r3, #32
 8006420:	2b00      	cmp	r3, #0
 8006422:	d0ee      	beq.n	8006402 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8006424:	2300      	movs	r3, #0
}
 8006426:	4618      	mov	r0, r3
 8006428:	3710      	adds	r7, #16
 800642a:	46bd      	mov	sp, r7
 800642c:	bd80      	pop	{r7, pc}

0800642e <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800642e:	b580      	push	{r7, lr}
 8006430:	b084      	sub	sp, #16
 8006432:	af00      	add	r7, sp, #0
 8006434:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006436:	2300      	movs	r3, #0
 8006438:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800643a:	2300      	movs	r3, #0
 800643c:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	68db      	ldr	r3, [r3, #12]
 8006444:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006448:	2b00      	cmp	r3, #0
 800644a:	d122      	bne.n	8006492 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	68da      	ldr	r2, [r3, #12]
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800645a:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800645c:	f7fb fcd8 	bl	8001e10 <HAL_GetTick>
 8006460:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8006462:	e00c      	b.n	800647e <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006464:	f7fb fcd4 	bl	8001e10 <HAL_GetTick>
 8006468:	4602      	mov	r2, r0
 800646a:	68bb      	ldr	r3, [r7, #8]
 800646c:	1ad3      	subs	r3, r2, r3
 800646e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006472:	d904      	bls.n	800647e <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	2204      	movs	r2, #4
 8006478:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 800647a:	2301      	movs	r3, #1
 800647c:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	68db      	ldr	r3, [r3, #12]
 8006484:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006488:	2b00      	cmp	r3, #0
 800648a:	d102      	bne.n	8006492 <RTC_EnterInitMode+0x64>
 800648c:	7bfb      	ldrb	r3, [r7, #15]
 800648e:	2b01      	cmp	r3, #1
 8006490:	d1e8      	bne.n	8006464 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8006492:	7bfb      	ldrb	r3, [r7, #15]
}
 8006494:	4618      	mov	r0, r3
 8006496:	3710      	adds	r7, #16
 8006498:	46bd      	mov	sp, r7
 800649a:	bd80      	pop	{r7, pc}

0800649c <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800649c:	b580      	push	{r7, lr}
 800649e:	b084      	sub	sp, #16
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80064a4:	2300      	movs	r3, #0
 80064a6:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	68da      	ldr	r2, [r3, #12]
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80064b6:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	689b      	ldr	r3, [r3, #8]
 80064be:	f003 0320 	and.w	r3, r3, #32
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d10a      	bne.n	80064dc <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80064c6:	6878      	ldr	r0, [r7, #4]
 80064c8:	f7ff ff89 	bl	80063de <HAL_RTC_WaitForSynchro>
 80064cc:	4603      	mov	r3, r0
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d004      	beq.n	80064dc <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	2204      	movs	r2, #4
 80064d6:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 80064d8:	2301      	movs	r3, #1
 80064da:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80064dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80064de:	4618      	mov	r0, r3
 80064e0:	3710      	adds	r7, #16
 80064e2:	46bd      	mov	sp, r7
 80064e4:	bd80      	pop	{r7, pc}

080064e6 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 80064e6:	b480      	push	{r7}
 80064e8:	b085      	sub	sp, #20
 80064ea:	af00      	add	r7, sp, #0
 80064ec:	4603      	mov	r3, r0
 80064ee:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 80064f0:	2300      	movs	r3, #0
 80064f2:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 80064f4:	e005      	b.n	8006502 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80064f6:	7bfb      	ldrb	r3, [r7, #15]
 80064f8:	3301      	adds	r3, #1
 80064fa:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 80064fc:	79fb      	ldrb	r3, [r7, #7]
 80064fe:	3b0a      	subs	r3, #10
 8006500:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8006502:	79fb      	ldrb	r3, [r7, #7]
 8006504:	2b09      	cmp	r3, #9
 8006506:	d8f6      	bhi.n	80064f6 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8006508:	7bfb      	ldrb	r3, [r7, #15]
 800650a:	011b      	lsls	r3, r3, #4
 800650c:	b2da      	uxtb	r2, r3
 800650e:	79fb      	ldrb	r3, [r7, #7]
 8006510:	4313      	orrs	r3, r2
 8006512:	b2db      	uxtb	r3, r3
}
 8006514:	4618      	mov	r0, r3
 8006516:	3714      	adds	r7, #20
 8006518:	46bd      	mov	sp, r7
 800651a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651e:	4770      	bx	lr

08006520 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8006520:	b480      	push	{r7}
 8006522:	b085      	sub	sp, #20
 8006524:	af00      	add	r7, sp, #0
 8006526:	4603      	mov	r3, r0
 8006528:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 800652a:	2300      	movs	r3, #0
 800652c:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 800652e:	79fb      	ldrb	r3, [r7, #7]
 8006530:	091b      	lsrs	r3, r3, #4
 8006532:	b2db      	uxtb	r3, r3
 8006534:	461a      	mov	r2, r3
 8006536:	0092      	lsls	r2, r2, #2
 8006538:	4413      	add	r3, r2
 800653a:	005b      	lsls	r3, r3, #1
 800653c:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 800653e:	79fb      	ldrb	r3, [r7, #7]
 8006540:	f003 030f 	and.w	r3, r3, #15
 8006544:	b2da      	uxtb	r2, r3
 8006546:	7bfb      	ldrb	r3, [r7, #15]
 8006548:	4413      	add	r3, r2
 800654a:	b2db      	uxtb	r3, r3
}
 800654c:	4618      	mov	r0, r3
 800654e:	3714      	adds	r7, #20
 8006550:	46bd      	mov	sp, r7
 8006552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006556:	4770      	bx	lr

08006558 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8006558:	b580      	push	{r7, lr}
 800655a:	b082      	sub	sp, #8
 800655c:	af00      	add	r7, sp, #0
 800655e:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	2b00      	cmp	r3, #0
 8006564:	d101      	bne.n	800656a <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8006566:	2301      	movs	r3, #1
 8006568:	e022      	b.n	80065b0 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006570:	b2db      	uxtb	r3, r3
 8006572:	2b00      	cmp	r3, #0
 8006574:	d105      	bne.n	8006582 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	2200      	movs	r2, #0
 800657a:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800657c:	6878      	ldr	r0, [r7, #4]
 800657e:	f7fa ffe9 	bl	8001554 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	2203      	movs	r2, #3
 8006586:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800658a:	6878      	ldr	r0, [r7, #4]
 800658c:	f000 f814 	bl	80065b8 <HAL_SD_InitCard>
 8006590:	4603      	mov	r3, r0
 8006592:	2b00      	cmp	r3, #0
 8006594:	d001      	beq.n	800659a <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8006596:	2301      	movs	r3, #1
 8006598:	e00a      	b.n	80065b0 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	2200      	movs	r2, #0
 800659e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	2200      	movs	r2, #0
 80065a4:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	2201      	movs	r2, #1
 80065aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80065ae:	2300      	movs	r3, #0
}
 80065b0:	4618      	mov	r0, r3
 80065b2:	3708      	adds	r7, #8
 80065b4:	46bd      	mov	sp, r7
 80065b6:	bd80      	pop	{r7, pc}

080065b8 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80065b8:	b5b0      	push	{r4, r5, r7, lr}
 80065ba:	b08e      	sub	sp, #56	; 0x38
 80065bc:	af04      	add	r7, sp, #16
 80065be:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 80065c0:	2300      	movs	r3, #0
 80065c2:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 80065c4:	2300      	movs	r3, #0
 80065c6:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80065c8:	2300      	movs	r3, #0
 80065ca:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 80065cc:	2300      	movs	r3, #0
 80065ce:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80065d0:	2300      	movs	r3, #0
 80065d2:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 80065d4:	2376      	movs	r3, #118	; 0x76
 80065d6:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681d      	ldr	r5, [r3, #0]
 80065dc:	466c      	mov	r4, sp
 80065de:	f107 0314 	add.w	r3, r7, #20
 80065e2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80065e6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80065ea:	f107 0308 	add.w	r3, r7, #8
 80065ee:	cb0e      	ldmia	r3, {r1, r2, r3}
 80065f0:	4628      	mov	r0, r5
 80065f2:	f002 fd77 	bl	80090e4 <SDIO_Init>
 80065f6:	4603      	mov	r3, r0
 80065f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 80065fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006600:	2b00      	cmp	r3, #0
 8006602:	d001      	beq.n	8006608 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8006604:	2301      	movs	r3, #1
 8006606:	e04f      	b.n	80066a8 <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8006608:	4b29      	ldr	r3, [pc, #164]	; (80066b0 <HAL_SD_InitCard+0xf8>)
 800660a:	2200      	movs	r2, #0
 800660c:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	4618      	mov	r0, r3
 8006614:	f002 fdaf 	bl	8009176 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8006618:	4b25      	ldr	r3, [pc, #148]	; (80066b0 <HAL_SD_InitCard+0xf8>)
 800661a:	2201      	movs	r2, #1
 800661c:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 800661e:	2002      	movs	r0, #2
 8006620:	f7fb fc02 	bl	8001e28 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8006624:	6878      	ldr	r0, [r7, #4]
 8006626:	f000 ff6b 	bl	8007500 <SD_PowerON>
 800662a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800662c:	6a3b      	ldr	r3, [r7, #32]
 800662e:	2b00      	cmp	r3, #0
 8006630:	d00b      	beq.n	800664a <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	2201      	movs	r2, #1
 8006636:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800663e:	6a3b      	ldr	r3, [r7, #32]
 8006640:	431a      	orrs	r2, r3
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006646:	2301      	movs	r3, #1
 8006648:	e02e      	b.n	80066a8 <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800664a:	6878      	ldr	r0, [r7, #4]
 800664c:	f000 fe8a 	bl	8007364 <SD_InitCard>
 8006650:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006652:	6a3b      	ldr	r3, [r7, #32]
 8006654:	2b00      	cmp	r3, #0
 8006656:	d00b      	beq.n	8006670 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	2201      	movs	r2, #1
 800665c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006664:	6a3b      	ldr	r3, [r7, #32]
 8006666:	431a      	orrs	r2, r3
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800666c:	2301      	movs	r3, #1
 800666e:	e01b      	b.n	80066a8 <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006678:	4618      	mov	r0, r3
 800667a:	f002 fe0e 	bl	800929a <SDMMC_CmdBlockLength>
 800667e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006680:	6a3b      	ldr	r3, [r7, #32]
 8006682:	2b00      	cmp	r3, #0
 8006684:	d00f      	beq.n	80066a6 <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	4a0a      	ldr	r2, [pc, #40]	; (80066b4 <HAL_SD_InitCard+0xfc>)
 800668c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006692:	6a3b      	ldr	r3, [r7, #32]
 8006694:	431a      	orrs	r2, r3
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	2201      	movs	r2, #1
 800669e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80066a2:	2301      	movs	r3, #1
 80066a4:	e000      	b.n	80066a8 <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 80066a6:	2300      	movs	r3, #0
}
 80066a8:	4618      	mov	r0, r3
 80066aa:	3728      	adds	r7, #40	; 0x28
 80066ac:	46bd      	mov	sp, r7
 80066ae:	bdb0      	pop	{r4, r5, r7, pc}
 80066b0:	422580a0 	.word	0x422580a0
 80066b4:	004005ff 	.word	0x004005ff

080066b8 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 80066b8:	b580      	push	{r7, lr}
 80066ba:	b08c      	sub	sp, #48	; 0x30
 80066bc:	af00      	add	r7, sp, #0
 80066be:	60f8      	str	r0, [r7, #12]
 80066c0:	60b9      	str	r1, [r7, #8]
 80066c2:	607a      	str	r2, [r7, #4]
 80066c4:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 80066ca:	68bb      	ldr	r3, [r7, #8]
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d107      	bne.n	80066e0 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066d4:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80066dc:	2301      	movs	r3, #1
 80066de:	e0c0      	b.n	8006862 <HAL_SD_ReadBlocks_DMA+0x1aa>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80066e6:	b2db      	uxtb	r3, r3
 80066e8:	2b01      	cmp	r3, #1
 80066ea:	f040 80b9 	bne.w	8006860 <HAL_SD_ReadBlocks_DMA+0x1a8>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	2200      	movs	r2, #0
 80066f2:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80066f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80066f6:	683b      	ldr	r3, [r7, #0]
 80066f8:	441a      	add	r2, r3
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80066fe:	429a      	cmp	r2, r3
 8006700:	d907      	bls.n	8006712 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006706:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800670e:	2301      	movs	r3, #1
 8006710:	e0a7      	b.n	8006862 <HAL_SD_ReadBlocks_DMA+0x1aa>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	2203      	movs	r2, #3
 8006716:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	2200      	movs	r2, #0
 8006720:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006728:	68fa      	ldr	r2, [r7, #12]
 800672a:	6812      	ldr	r2, [r2, #0]
 800672c:	f443 734a 	orr.w	r3, r3, #808	; 0x328
 8006730:	f043 0302 	orr.w	r3, r3, #2
 8006734:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800673a:	4a4c      	ldr	r2, [pc, #304]	; (800686c <HAL_SD_ReadBlocks_DMA+0x1b4>)
 800673c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006742:	4a4b      	ldr	r2, [pc, #300]	; (8006870 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 8006744:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800674a:	2200      	movs	r2, #0
 800674c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006752:	2200      	movs	r2, #0
 8006754:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006766:	689a      	ldr	r2, [r3, #8]
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	430a      	orrs	r2, r1
 8006770:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	3380      	adds	r3, #128	; 0x80
 800677c:	4619      	mov	r1, r3
 800677e:	68ba      	ldr	r2, [r7, #8]
 8006780:	683b      	ldr	r3, [r7, #0]
 8006782:	025b      	lsls	r3, r3, #9
 8006784:	089b      	lsrs	r3, r3, #2
 8006786:	f7fc fc01 	bl	8002f8c <HAL_DMA_Start_IT>
 800678a:	4603      	mov	r3, r0
 800678c:	2b00      	cmp	r3, #0
 800678e:	d017      	beq.n	80067c0 <HAL_SD_ReadBlocks_DMA+0x108>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 800679e:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	4a33      	ldr	r2, [pc, #204]	; (8006874 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 80067a6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067ac:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	2201      	movs	r2, #1
 80067b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80067bc:	2301      	movs	r3, #1
 80067be:	e050      	b.n	8006862 <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 80067c0:	4b2d      	ldr	r3, [pc, #180]	; (8006878 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 80067c2:	2201      	movs	r2, #1
 80067c4:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067ca:	2b01      	cmp	r3, #1
 80067cc:	d002      	beq.n	80067d4 <HAL_SD_ReadBlocks_DMA+0x11c>
      {
        add *= 512U;
 80067ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067d0:	025b      	lsls	r3, r3, #9
 80067d2:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80067d4:	f04f 33ff 	mov.w	r3, #4294967295
 80067d8:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80067da:	683b      	ldr	r3, [r7, #0]
 80067dc:	025b      	lsls	r3, r3, #9
 80067de:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80067e0:	2390      	movs	r3, #144	; 0x90
 80067e2:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 80067e4:	2302      	movs	r3, #2
 80067e6:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80067e8:	2300      	movs	r3, #0
 80067ea:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 80067ec:	2301      	movs	r3, #1
 80067ee:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	f107 0210 	add.w	r2, r7, #16
 80067f8:	4611      	mov	r1, r2
 80067fa:	4618      	mov	r0, r3
 80067fc:	f002 fd21 	bl	8009242 <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8006800:	683b      	ldr	r3, [r7, #0]
 8006802:	2b01      	cmp	r3, #1
 8006804:	d90a      	bls.n	800681c <HAL_SD_ReadBlocks_DMA+0x164>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	2282      	movs	r2, #130	; 0x82
 800680a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006812:	4618      	mov	r0, r3
 8006814:	f002 fd85 	bl	8009322 <SDMMC_CmdReadMultiBlock>
 8006818:	62f8      	str	r0, [r7, #44]	; 0x2c
 800681a:	e009      	b.n	8006830 <HAL_SD_ReadBlocks_DMA+0x178>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	2281      	movs	r2, #129	; 0x81
 8006820:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006828:	4618      	mov	r0, r3
 800682a:	f002 fd58 	bl	80092de <SDMMC_CmdReadSingleBlock>
 800682e:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8006830:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006832:	2b00      	cmp	r3, #0
 8006834:	d012      	beq.n	800685c <HAL_SD_ReadBlocks_DMA+0x1a4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	4a0e      	ldr	r2, [pc, #56]	; (8006874 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 800683c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006842:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006844:	431a      	orrs	r2, r3
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	2201      	movs	r2, #1
 800684e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	2200      	movs	r2, #0
 8006856:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8006858:	2301      	movs	r3, #1
 800685a:	e002      	b.n	8006862 <HAL_SD_ReadBlocks_DMA+0x1aa>
      }

      return HAL_OK;
 800685c:	2300      	movs	r3, #0
 800685e:	e000      	b.n	8006862 <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
  }
  else
  {
    return HAL_BUSY;
 8006860:	2302      	movs	r3, #2
  }
}
 8006862:	4618      	mov	r0, r3
 8006864:	3730      	adds	r7, #48	; 0x30
 8006866:	46bd      	mov	sp, r7
 8006868:	bd80      	pop	{r7, pc}
 800686a:	bf00      	nop
 800686c:	08007173 	.word	0x08007173
 8006870:	080071e5 	.word	0x080071e5
 8006874:	004005ff 	.word	0x004005ff
 8006878:	4225858c 	.word	0x4225858c

0800687c <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800687c:	b580      	push	{r7, lr}
 800687e:	b08c      	sub	sp, #48	; 0x30
 8006880:	af00      	add	r7, sp, #0
 8006882:	60f8      	str	r0, [r7, #12]
 8006884:	60b9      	str	r1, [r7, #8]
 8006886:	607a      	str	r2, [r7, #4]
 8006888:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800688e:	68bb      	ldr	r3, [r7, #8]
 8006890:	2b00      	cmp	r3, #0
 8006892:	d107      	bne.n	80068a4 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006898:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80068a0:	2301      	movs	r3, #1
 80068a2:	e0c5      	b.n	8006a30 <HAL_SD_WriteBlocks_DMA+0x1b4>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80068aa:	b2db      	uxtb	r3, r3
 80068ac:	2b01      	cmp	r3, #1
 80068ae:	f040 80be 	bne.w	8006a2e <HAL_SD_WriteBlocks_DMA+0x1b2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	2200      	movs	r2, #0
 80068b6:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80068b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80068ba:	683b      	ldr	r3, [r7, #0]
 80068bc:	441a      	add	r2, r3
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80068c2:	429a      	cmp	r2, r3
 80068c4:	d907      	bls.n	80068d6 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068ca:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80068d2:	2301      	movs	r3, #1
 80068d4:	e0ac      	b.n	8006a30 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	2203      	movs	r2, #3
 80068da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	2200      	movs	r2, #0
 80068e4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068ec:	68fa      	ldr	r2, [r7, #12]
 80068ee:	6812      	ldr	r2, [r2, #0]
 80068f0:	f443 7306 	orr.w	r3, r3, #536	; 0x218
 80068f4:	f043 0302 	orr.w	r3, r3, #2
 80068f8:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068fe:	4a4e      	ldr	r2, [pc, #312]	; (8006a38 <HAL_SD_WriteBlocks_DMA+0x1bc>)
 8006900:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006906:	4a4d      	ldr	r2, [pc, #308]	; (8006a3c <HAL_SD_WriteBlocks_DMA+0x1c0>)
 8006908:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800690e:	2200      	movs	r2, #0
 8006910:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006916:	2b01      	cmp	r3, #1
 8006918:	d002      	beq.n	8006920 <HAL_SD_WriteBlocks_DMA+0xa4>
    {
      add *= 512U;
 800691a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800691c:	025b      	lsls	r3, r3, #9
 800691e:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8006920:	683b      	ldr	r3, [r7, #0]
 8006922:	2b01      	cmp	r3, #1
 8006924:	d90a      	bls.n	800693c <HAL_SD_WriteBlocks_DMA+0xc0>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	22a0      	movs	r2, #160	; 0xa0
 800692a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006932:	4618      	mov	r0, r3
 8006934:	f002 fd39 	bl	80093aa <SDMMC_CmdWriteMultiBlock>
 8006938:	62f8      	str	r0, [r7, #44]	; 0x2c
 800693a:	e009      	b.n	8006950 <HAL_SD_WriteBlocks_DMA+0xd4>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	2290      	movs	r2, #144	; 0x90
 8006940:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006948:	4618      	mov	r0, r3
 800694a:	f002 fd0c 	bl	8009366 <SDMMC_CmdWriteSingleBlock>
 800694e:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8006950:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006952:	2b00      	cmp	r3, #0
 8006954:	d012      	beq.n	800697c <HAL_SD_WriteBlocks_DMA+0x100>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	4a39      	ldr	r2, [pc, #228]	; (8006a40 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 800695c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006962:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006964:	431a      	orrs	r2, r3
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	2201      	movs	r2, #1
 800696e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	2200      	movs	r2, #0
 8006976:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8006978:	2301      	movs	r3, #1
 800697a:	e059      	b.n	8006a30 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 800697c:	4b31      	ldr	r3, [pc, #196]	; (8006a44 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 800697e:	2201      	movs	r2, #1
 8006980:	601a      	str	r2, [r3, #0]

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006986:	2240      	movs	r2, #64	; 0x40
 8006988:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800699a:	689a      	ldr	r2, [r3, #8]
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	430a      	orrs	r2, r1
 80069a4:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80069aa:	68b9      	ldr	r1, [r7, #8]
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	3380      	adds	r3, #128	; 0x80
 80069b2:	461a      	mov	r2, r3
 80069b4:	683b      	ldr	r3, [r7, #0]
 80069b6:	025b      	lsls	r3, r3, #9
 80069b8:	089b      	lsrs	r3, r3, #2
 80069ba:	f7fc fae7 	bl	8002f8c <HAL_DMA_Start_IT>
 80069be:	4603      	mov	r3, r0
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d01c      	beq.n	80069fe <HAL_SD_WriteBlocks_DMA+0x182>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069ca:	68fa      	ldr	r2, [r7, #12]
 80069cc:	6812      	ldr	r2, [r2, #0]
 80069ce:	f423 7306 	bic.w	r3, r3, #536	; 0x218
 80069d2:	f023 0302 	bic.w	r3, r3, #2
 80069d6:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	4a18      	ldr	r2, [pc, #96]	; (8006a40 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 80069de:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069e4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	2201      	movs	r2, #1
 80069f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	2200      	movs	r2, #0
 80069f8:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80069fa:	2301      	movs	r3, #1
 80069fc:	e018      	b.n	8006a30 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80069fe:	f04f 33ff 	mov.w	r3, #4294967295
 8006a02:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8006a04:	683b      	ldr	r3, [r7, #0]
 8006a06:	025b      	lsls	r3, r3, #9
 8006a08:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8006a0a:	2390      	movs	r3, #144	; 0x90
 8006a0c:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8006a0e:	2300      	movs	r3, #0
 8006a10:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8006a12:	2300      	movs	r3, #0
 8006a14:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8006a16:	2301      	movs	r3, #1
 8006a18:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	f107 0210 	add.w	r2, r7, #16
 8006a22:	4611      	mov	r1, r2
 8006a24:	4618      	mov	r0, r3
 8006a26:	f002 fc0c 	bl	8009242 <SDIO_ConfigData>

      return HAL_OK;
 8006a2a:	2300      	movs	r3, #0
 8006a2c:	e000      	b.n	8006a30 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_BUSY;
 8006a2e:	2302      	movs	r3, #2
  }
}
 8006a30:	4618      	mov	r0, r3
 8006a32:	3730      	adds	r7, #48	; 0x30
 8006a34:	46bd      	mov	sp, r7
 8006a36:	bd80      	pop	{r7, pc}
 8006a38:	08007149 	.word	0x08007149
 8006a3c:	080071e5 	.word	0x080071e5
 8006a40:	004005ff 	.word	0x004005ff
 8006a44:	4225858c 	.word	0x4225858c

08006a48 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8006a48:	b580      	push	{r7, lr}
 8006a4a:	b084      	sub	sp, #16
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a54:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a5c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d008      	beq.n	8006a76 <HAL_SD_IRQHandler+0x2e>
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	f003 0308 	and.w	r3, r3, #8
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d003      	beq.n	8006a76 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8006a6e:	6878      	ldr	r0, [r7, #4]
 8006a70:	f000 fdfc 	bl	800766c <SD_Read_IT>
 8006a74:	e165      	b.n	8006d42 <HAL_SD_IRQHandler+0x2fa>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	f000 808f 	beq.w	8006ba4 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006a8e:	639a      	str	r2, [r3, #56]	; 0x38

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a96:	687a      	ldr	r2, [r7, #4]
 8006a98:	6812      	ldr	r2, [r2, #0]
 8006a9a:	f423 4343 	bic.w	r3, r3, #49920	; 0xc300
 8006a9e:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 8006aa2:	63d3      	str	r3, [r2, #60]	; 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	f022 0201 	bic.w	r2, r2, #1
 8006ab2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	f003 0308 	and.w	r3, r3, #8
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d039      	beq.n	8006b32 <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	f003 0302 	and.w	r3, r3, #2
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d104      	bne.n	8006ad2 <HAL_SD_IRQHandler+0x8a>
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	f003 0320 	and.w	r3, r3, #32
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d011      	beq.n	8006af6 <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	4618      	mov	r0, r3
 8006ad8:	f002 fc8a 	bl	80093f0 <SDMMC_CmdStopTransfer>
 8006adc:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8006ade:	68bb      	ldr	r3, [r7, #8]
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d008      	beq.n	8006af6 <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006ae8:	68bb      	ldr	r3, [r7, #8]
 8006aea:	431a      	orrs	r2, r3
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8006af0:	6878      	ldr	r0, [r7, #4]
 8006af2:	f000 f92f 	bl	8006d54 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	f240 523a 	movw	r2, #1338	; 0x53a
 8006afe:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	2201      	movs	r2, #1
 8006b04:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	2200      	movs	r2, #0
 8006b0c:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	f003 0301 	and.w	r3, r3, #1
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d104      	bne.n	8006b22 <HAL_SD_IRQHandler+0xda>
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	f003 0302 	and.w	r3, r3, #2
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d003      	beq.n	8006b2a <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8006b22:	6878      	ldr	r0, [r7, #4]
 8006b24:	f003 f8a8 	bl	8009c78 <HAL_SD_RxCpltCallback>
 8006b28:	e10b      	b.n	8006d42 <HAL_SD_IRQHandler+0x2fa>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8006b2a:	6878      	ldr	r0, [r7, #4]
 8006b2c:	f003 f89a 	bl	8009c64 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8006b30:	e107      	b.n	8006d42 <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	f000 8102 	beq.w	8006d42 <HAL_SD_IRQHandler+0x2fa>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	f003 0320 	and.w	r3, r3, #32
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d011      	beq.n	8006b6c <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	4618      	mov	r0, r3
 8006b4e:	f002 fc4f 	bl	80093f0 <SDMMC_CmdStopTransfer>
 8006b52:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8006b54:	68bb      	ldr	r3, [r7, #8]
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d008      	beq.n	8006b6c <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006b5e:	68bb      	ldr	r3, [r7, #8]
 8006b60:	431a      	orrs	r2, r3
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8006b66:	6878      	ldr	r0, [r7, #4]
 8006b68:	f000 f8f4 	bl	8006d54 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	f003 0301 	and.w	r3, r3, #1
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	f040 80e5 	bne.w	8006d42 <HAL_SD_IRQHandler+0x2fa>
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	f003 0302 	and.w	r3, r3, #2
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	f040 80df 	bne.w	8006d42 <HAL_SD_IRQHandler+0x2fa>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	f022 0208 	bic.w	r2, r2, #8
 8006b92:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	2201      	movs	r2, #1
 8006b98:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8006b9c:	6878      	ldr	r0, [r7, #4]
 8006b9e:	f003 f861 	bl	8009c64 <HAL_SD_TxCpltCallback>
}
 8006ba2:	e0ce      	b.n	8006d42 <HAL_SD_IRQHandler+0x2fa>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006baa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d008      	beq.n	8006bc4 <HAL_SD_IRQHandler+0x17c>
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	f003 0308 	and.w	r3, r3, #8
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d003      	beq.n	8006bc4 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 8006bbc:	6878      	ldr	r0, [r7, #4]
 8006bbe:	f000 fda6 	bl	800770e <SD_Write_IT>
 8006bc2:	e0be      	b.n	8006d42 <HAL_SD_IRQHandler+0x2fa>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR | SDIO_FLAG_STBITERR) != RESET)
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006bca:	f240 233a 	movw	r3, #570	; 0x23a
 8006bce:	4013      	ands	r3, r2
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	f000 80b6 	beq.w	8006d42 <HAL_SD_IRQHandler+0x2fa>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006bdc:	f003 0302 	and.w	r3, r3, #2
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d005      	beq.n	8006bf0 <HAL_SD_IRQHandler+0x1a8>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006be8:	f043 0202 	orr.w	r2, r3, #2
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006bf6:	f003 0308 	and.w	r3, r3, #8
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d005      	beq.n	8006c0a <HAL_SD_IRQHandler+0x1c2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c02:	f043 0208 	orr.w	r2, r3, #8
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c10:	f003 0320 	and.w	r3, r3, #32
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d005      	beq.n	8006c24 <HAL_SD_IRQHandler+0x1dc>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c1c:	f043 0220 	orr.w	r2, r3, #32
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c2a:	f003 0310 	and.w	r3, r3, #16
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d005      	beq.n	8006c3e <HAL_SD_IRQHandler+0x1f6>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c36:	f043 0210 	orr.w	r2, r3, #16
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR) != RESET)
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c44:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d005      	beq.n	8006c58 <HAL_SD_IRQHandler+0x210>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c50:	f043 0208 	orr.w	r2, r3, #8
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	f240 723a 	movw	r2, #1850	; 0x73a
 8006c60:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c68:	687a      	ldr	r2, [r7, #4]
 8006c6a:	6812      	ldr	r2, [r2, #0]
 8006c6c:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 8006c70:	f023 0302 	bic.w	r3, r3, #2
 8006c74:	63d3      	str	r3, [r2, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	4618      	mov	r0, r3
 8006c7c:	f002 fbb8 	bl	80093f0 <SDMMC_CmdStopTransfer>
 8006c80:	4602      	mov	r2, r0
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c86:	431a      	orrs	r2, r3
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	f003 0308 	and.w	r3, r3, #8
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d00a      	beq.n	8006cac <HAL_SD_IRQHandler+0x264>
      hsd->State = HAL_SD_STATE_READY;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	2201      	movs	r2, #1
 8006c9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	2200      	movs	r2, #0
 8006ca2:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8006ca4:	6878      	ldr	r0, [r7, #4]
 8006ca6:	f000 f855 	bl	8006d54 <HAL_SD_ErrorCallback>
}
 8006caa:	e04a      	b.n	8006d42 <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d045      	beq.n	8006d42 <HAL_SD_IRQHandler+0x2fa>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	f003 0310 	and.w	r3, r3, #16
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d104      	bne.n	8006cca <HAL_SD_IRQHandler+0x282>
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	f003 0320 	and.w	r3, r3, #32
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d011      	beq.n	8006cee <HAL_SD_IRQHandler+0x2a6>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006cce:	4a1f      	ldr	r2, [pc, #124]	; (8006d4c <HAL_SD_IRQHandler+0x304>)
 8006cd0:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006cd6:	4618      	mov	r0, r3
 8006cd8:	f7fc fa20 	bl	800311c <HAL_DMA_Abort_IT>
 8006cdc:	4603      	mov	r3, r0
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d02f      	beq.n	8006d42 <HAL_SD_IRQHandler+0x2fa>
          SD_DMATxAbort(hsd->hdmatx);
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ce6:	4618      	mov	r0, r3
 8006ce8:	f000 face 	bl	8007288 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8006cec:	e029      	b.n	8006d42 <HAL_SD_IRQHandler+0x2fa>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	f003 0301 	and.w	r3, r3, #1
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d104      	bne.n	8006d02 <HAL_SD_IRQHandler+0x2ba>
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	f003 0302 	and.w	r3, r3, #2
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d011      	beq.n	8006d26 <HAL_SD_IRQHandler+0x2de>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d06:	4a12      	ldr	r2, [pc, #72]	; (8006d50 <HAL_SD_IRQHandler+0x308>)
 8006d08:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d0e:	4618      	mov	r0, r3
 8006d10:	f7fc fa04 	bl	800311c <HAL_DMA_Abort_IT>
 8006d14:	4603      	mov	r3, r0
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d013      	beq.n	8006d42 <HAL_SD_IRQHandler+0x2fa>
          SD_DMARxAbort(hsd->hdmarx);
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d1e:	4618      	mov	r0, r3
 8006d20:	f000 fae9 	bl	80072f6 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8006d24:	e00d      	b.n	8006d42 <HAL_SD_IRQHandler+0x2fa>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	2200      	movs	r2, #0
 8006d2a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	2201      	movs	r2, #1
 8006d30:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	2200      	movs	r2, #0
 8006d38:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 8006d3a:	6878      	ldr	r0, [r7, #4]
 8006d3c:	f002 ff88 	bl	8009c50 <HAL_SD_AbortCallback>
}
 8006d40:	e7ff      	b.n	8006d42 <HAL_SD_IRQHandler+0x2fa>
 8006d42:	bf00      	nop
 8006d44:	3710      	adds	r7, #16
 8006d46:	46bd      	mov	sp, r7
 8006d48:	bd80      	pop	{r7, pc}
 8006d4a:	bf00      	nop
 8006d4c:	08007289 	.word	0x08007289
 8006d50:	080072f7 	.word	0x080072f7

08006d54 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8006d54:	b480      	push	{r7}
 8006d56:	b083      	sub	sp, #12
 8006d58:	af00      	add	r7, sp, #0
 8006d5a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8006d5c:	bf00      	nop
 8006d5e:	370c      	adds	r7, #12
 8006d60:	46bd      	mov	sp, r7
 8006d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d66:	4770      	bx	lr

08006d68 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8006d68:	b480      	push	{r7}
 8006d6a:	b083      	sub	sp, #12
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	6078      	str	r0, [r7, #4]
 8006d70:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006d76:	0f9b      	lsrs	r3, r3, #30
 8006d78:	b2da      	uxtb	r2, r3
 8006d7a:	683b      	ldr	r3, [r7, #0]
 8006d7c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006d82:	0e9b      	lsrs	r3, r3, #26
 8006d84:	b2db      	uxtb	r3, r3
 8006d86:	f003 030f 	and.w	r3, r3, #15
 8006d8a:	b2da      	uxtb	r2, r3
 8006d8c:	683b      	ldr	r3, [r7, #0]
 8006d8e:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006d94:	0e1b      	lsrs	r3, r3, #24
 8006d96:	b2db      	uxtb	r3, r3
 8006d98:	f003 0303 	and.w	r3, r3, #3
 8006d9c:	b2da      	uxtb	r2, r3
 8006d9e:	683b      	ldr	r3, [r7, #0]
 8006da0:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006da6:	0c1b      	lsrs	r3, r3, #16
 8006da8:	b2da      	uxtb	r2, r3
 8006daa:	683b      	ldr	r3, [r7, #0]
 8006dac:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006db2:	0a1b      	lsrs	r3, r3, #8
 8006db4:	b2da      	uxtb	r2, r3
 8006db6:	683b      	ldr	r3, [r7, #0]
 8006db8:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006dbe:	b2da      	uxtb	r2, r3
 8006dc0:	683b      	ldr	r3, [r7, #0]
 8006dc2:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006dc8:	0d1b      	lsrs	r3, r3, #20
 8006dca:	b29a      	uxth	r2, r3
 8006dcc:	683b      	ldr	r3, [r7, #0]
 8006dce:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006dd4:	0c1b      	lsrs	r3, r3, #16
 8006dd6:	b2db      	uxtb	r3, r3
 8006dd8:	f003 030f 	and.w	r3, r3, #15
 8006ddc:	b2da      	uxtb	r2, r3
 8006dde:	683b      	ldr	r3, [r7, #0]
 8006de0:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006de6:	0bdb      	lsrs	r3, r3, #15
 8006de8:	b2db      	uxtb	r3, r3
 8006dea:	f003 0301 	and.w	r3, r3, #1
 8006dee:	b2da      	uxtb	r2, r3
 8006df0:	683b      	ldr	r3, [r7, #0]
 8006df2:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006df8:	0b9b      	lsrs	r3, r3, #14
 8006dfa:	b2db      	uxtb	r3, r3
 8006dfc:	f003 0301 	and.w	r3, r3, #1
 8006e00:	b2da      	uxtb	r2, r3
 8006e02:	683b      	ldr	r3, [r7, #0]
 8006e04:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006e0a:	0b5b      	lsrs	r3, r3, #13
 8006e0c:	b2db      	uxtb	r3, r3
 8006e0e:	f003 0301 	and.w	r3, r3, #1
 8006e12:	b2da      	uxtb	r2, r3
 8006e14:	683b      	ldr	r3, [r7, #0]
 8006e16:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006e1c:	0b1b      	lsrs	r3, r3, #12
 8006e1e:	b2db      	uxtb	r3, r3
 8006e20:	f003 0301 	and.w	r3, r3, #1
 8006e24:	b2da      	uxtb	r2, r3
 8006e26:	683b      	ldr	r3, [r7, #0]
 8006e28:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8006e2a:	683b      	ldr	r3, [r7, #0]
 8006e2c:	2200      	movs	r2, #0
 8006e2e:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d163      	bne.n	8006f00 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006e3c:	009a      	lsls	r2, r3, #2
 8006e3e:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006e42:	4013      	ands	r3, r2
 8006e44:	687a      	ldr	r2, [r7, #4]
 8006e46:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8006e48:	0f92      	lsrs	r2, r2, #30
 8006e4a:	431a      	orrs	r2, r3
 8006e4c:	683b      	ldr	r3, [r7, #0]
 8006e4e:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006e54:	0edb      	lsrs	r3, r3, #27
 8006e56:	b2db      	uxtb	r3, r3
 8006e58:	f003 0307 	and.w	r3, r3, #7
 8006e5c:	b2da      	uxtb	r2, r3
 8006e5e:	683b      	ldr	r3, [r7, #0]
 8006e60:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006e66:	0e1b      	lsrs	r3, r3, #24
 8006e68:	b2db      	uxtb	r3, r3
 8006e6a:	f003 0307 	and.w	r3, r3, #7
 8006e6e:	b2da      	uxtb	r2, r3
 8006e70:	683b      	ldr	r3, [r7, #0]
 8006e72:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006e78:	0d5b      	lsrs	r3, r3, #21
 8006e7a:	b2db      	uxtb	r3, r3
 8006e7c:	f003 0307 	and.w	r3, r3, #7
 8006e80:	b2da      	uxtb	r2, r3
 8006e82:	683b      	ldr	r3, [r7, #0]
 8006e84:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006e8a:	0c9b      	lsrs	r3, r3, #18
 8006e8c:	b2db      	uxtb	r3, r3
 8006e8e:	f003 0307 	and.w	r3, r3, #7
 8006e92:	b2da      	uxtb	r2, r3
 8006e94:	683b      	ldr	r3, [r7, #0]
 8006e96:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006e9c:	0bdb      	lsrs	r3, r3, #15
 8006e9e:	b2db      	uxtb	r3, r3
 8006ea0:	f003 0307 	and.w	r3, r3, #7
 8006ea4:	b2da      	uxtb	r2, r3
 8006ea6:	683b      	ldr	r3, [r7, #0]
 8006ea8:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8006eaa:	683b      	ldr	r3, [r7, #0]
 8006eac:	691b      	ldr	r3, [r3, #16]
 8006eae:	1c5a      	adds	r2, r3, #1
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8006eb4:	683b      	ldr	r3, [r7, #0]
 8006eb6:	7e1b      	ldrb	r3, [r3, #24]
 8006eb8:	b2db      	uxtb	r3, r3
 8006eba:	f003 0307 	and.w	r3, r3, #7
 8006ebe:	3302      	adds	r3, #2
 8006ec0:	2201      	movs	r2, #1
 8006ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8006ec6:	687a      	ldr	r2, [r7, #4]
 8006ec8:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8006eca:	fb03 f202 	mul.w	r2, r3, r2
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8006ed2:	683b      	ldr	r3, [r7, #0]
 8006ed4:	7a1b      	ldrb	r3, [r3, #8]
 8006ed6:	b2db      	uxtb	r3, r3
 8006ed8:	f003 030f 	and.w	r3, r3, #15
 8006edc:	2201      	movs	r2, #1
 8006ede:	409a      	lsls	r2, r3
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ee8:	687a      	ldr	r2, [r7, #4]
 8006eea:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8006eec:	0a52      	lsrs	r2, r2, #9
 8006eee:	fb03 f202 	mul.w	r2, r3, r2
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006efc:	661a      	str	r2, [r3, #96]	; 0x60
 8006efe:	e031      	b.n	8006f64 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f04:	2b01      	cmp	r3, #1
 8006f06:	d11d      	bne.n	8006f44 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006f0c:	041b      	lsls	r3, r3, #16
 8006f0e:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006f16:	0c1b      	lsrs	r3, r3, #16
 8006f18:	431a      	orrs	r2, r3
 8006f1a:	683b      	ldr	r3, [r7, #0]
 8006f1c:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8006f1e:	683b      	ldr	r3, [r7, #0]
 8006f20:	691b      	ldr	r3, [r3, #16]
 8006f22:	3301      	adds	r3, #1
 8006f24:	029a      	lsls	r2, r3, #10
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006f38:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	661a      	str	r2, [r3, #96]	; 0x60
 8006f42:	e00f      	b.n	8006f64 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	4a58      	ldr	r2, [pc, #352]	; (80070ac <HAL_SD_GetCardCSD+0x344>)
 8006f4a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f50:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	2201      	movs	r2, #1
 8006f5c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8006f60:	2301      	movs	r3, #1
 8006f62:	e09d      	b.n	80070a0 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006f68:	0b9b      	lsrs	r3, r3, #14
 8006f6a:	b2db      	uxtb	r3, r3
 8006f6c:	f003 0301 	and.w	r3, r3, #1
 8006f70:	b2da      	uxtb	r2, r3
 8006f72:	683b      	ldr	r3, [r7, #0]
 8006f74:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006f7a:	09db      	lsrs	r3, r3, #7
 8006f7c:	b2db      	uxtb	r3, r3
 8006f7e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006f82:	b2da      	uxtb	r2, r3
 8006f84:	683b      	ldr	r3, [r7, #0]
 8006f86:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006f8c:	b2db      	uxtb	r3, r3
 8006f8e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006f92:	b2da      	uxtb	r2, r3
 8006f94:	683b      	ldr	r3, [r7, #0]
 8006f96:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f9c:	0fdb      	lsrs	r3, r3, #31
 8006f9e:	b2da      	uxtb	r2, r3
 8006fa0:	683b      	ldr	r3, [r7, #0]
 8006fa2:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fa8:	0f5b      	lsrs	r3, r3, #29
 8006faa:	b2db      	uxtb	r3, r3
 8006fac:	f003 0303 	and.w	r3, r3, #3
 8006fb0:	b2da      	uxtb	r2, r3
 8006fb2:	683b      	ldr	r3, [r7, #0]
 8006fb4:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fba:	0e9b      	lsrs	r3, r3, #26
 8006fbc:	b2db      	uxtb	r3, r3
 8006fbe:	f003 0307 	and.w	r3, r3, #7
 8006fc2:	b2da      	uxtb	r2, r3
 8006fc4:	683b      	ldr	r3, [r7, #0]
 8006fc6:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fcc:	0d9b      	lsrs	r3, r3, #22
 8006fce:	b2db      	uxtb	r3, r3
 8006fd0:	f003 030f 	and.w	r3, r3, #15
 8006fd4:	b2da      	uxtb	r2, r3
 8006fd6:	683b      	ldr	r3, [r7, #0]
 8006fd8:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fde:	0d5b      	lsrs	r3, r3, #21
 8006fe0:	b2db      	uxtb	r3, r3
 8006fe2:	f003 0301 	and.w	r3, r3, #1
 8006fe6:	b2da      	uxtb	r2, r3
 8006fe8:	683b      	ldr	r3, [r7, #0]
 8006fea:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8006fee:	683b      	ldr	r3, [r7, #0]
 8006ff0:	2200      	movs	r2, #0
 8006ff2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ffa:	0c1b      	lsrs	r3, r3, #16
 8006ffc:	b2db      	uxtb	r3, r3
 8006ffe:	f003 0301 	and.w	r3, r3, #1
 8007002:	b2da      	uxtb	r2, r3
 8007004:	683b      	ldr	r3, [r7, #0]
 8007006:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800700e:	0bdb      	lsrs	r3, r3, #15
 8007010:	b2db      	uxtb	r3, r3
 8007012:	f003 0301 	and.w	r3, r3, #1
 8007016:	b2da      	uxtb	r2, r3
 8007018:	683b      	ldr	r3, [r7, #0]
 800701a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007022:	0b9b      	lsrs	r3, r3, #14
 8007024:	b2db      	uxtb	r3, r3
 8007026:	f003 0301 	and.w	r3, r3, #1
 800702a:	b2da      	uxtb	r2, r3
 800702c:	683b      	ldr	r3, [r7, #0]
 800702e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007036:	0b5b      	lsrs	r3, r3, #13
 8007038:	b2db      	uxtb	r3, r3
 800703a:	f003 0301 	and.w	r3, r3, #1
 800703e:	b2da      	uxtb	r2, r3
 8007040:	683b      	ldr	r3, [r7, #0]
 8007042:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800704a:	0b1b      	lsrs	r3, r3, #12
 800704c:	b2db      	uxtb	r3, r3
 800704e:	f003 0301 	and.w	r3, r3, #1
 8007052:	b2da      	uxtb	r2, r3
 8007054:	683b      	ldr	r3, [r7, #0]
 8007056:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800705e:	0a9b      	lsrs	r3, r3, #10
 8007060:	b2db      	uxtb	r3, r3
 8007062:	f003 0303 	and.w	r3, r3, #3
 8007066:	b2da      	uxtb	r2, r3
 8007068:	683b      	ldr	r3, [r7, #0]
 800706a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007072:	0a1b      	lsrs	r3, r3, #8
 8007074:	b2db      	uxtb	r3, r3
 8007076:	f003 0303 	and.w	r3, r3, #3
 800707a:	b2da      	uxtb	r2, r3
 800707c:	683b      	ldr	r3, [r7, #0]
 800707e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007086:	085b      	lsrs	r3, r3, #1
 8007088:	b2db      	uxtb	r3, r3
 800708a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800708e:	b2da      	uxtb	r2, r3
 8007090:	683b      	ldr	r3, [r7, #0]
 8007092:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8007096:	683b      	ldr	r3, [r7, #0]
 8007098:	2201      	movs	r2, #1
 800709a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800709e:	2300      	movs	r3, #0
}
 80070a0:	4618      	mov	r0, r3
 80070a2:	370c      	adds	r7, #12
 80070a4:	46bd      	mov	sp, r7
 80070a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070aa:	4770      	bx	lr
 80070ac:	004005ff 	.word	0x004005ff

080070b0 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 80070b0:	b480      	push	{r7}
 80070b2:	b083      	sub	sp, #12
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	6078      	str	r0, [r7, #4]
 80070b8:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80070be:	683b      	ldr	r3, [r7, #0]
 80070c0:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80070c6:	683b      	ldr	r3, [r7, #0]
 80070c8:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80070ce:	683b      	ldr	r3, [r7, #0]
 80070d0:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80070d6:	683b      	ldr	r3, [r7, #0]
 80070d8:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80070de:	683b      	ldr	r3, [r7, #0]
 80070e0:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80070e6:	683b      	ldr	r3, [r7, #0]
 80070e8:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80070ee:	683b      	ldr	r3, [r7, #0]
 80070f0:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80070f6:	683b      	ldr	r3, [r7, #0]
 80070f8:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 80070fa:	2300      	movs	r3, #0
}
 80070fc:	4618      	mov	r0, r3
 80070fe:	370c      	adds	r7, #12
 8007100:	46bd      	mov	sp, r7
 8007102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007106:	4770      	bx	lr

08007108 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8007108:	b580      	push	{r7, lr}
 800710a:	b086      	sub	sp, #24
 800710c:	af00      	add	r7, sp, #0
 800710e:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8007110:	2300      	movs	r3, #0
 8007112:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8007114:	f107 030c 	add.w	r3, r7, #12
 8007118:	4619      	mov	r1, r3
 800711a:	6878      	ldr	r0, [r7, #4]
 800711c:	f000 fa7e 	bl	800761c <SD_SendStatus>
 8007120:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007122:	697b      	ldr	r3, [r7, #20]
 8007124:	2b00      	cmp	r3, #0
 8007126:	d005      	beq.n	8007134 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800712c:	697b      	ldr	r3, [r7, #20]
 800712e:	431a      	orrs	r2, r3
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	0a5b      	lsrs	r3, r3, #9
 8007138:	f003 030f 	and.w	r3, r3, #15
 800713c:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800713e:	693b      	ldr	r3, [r7, #16]
}
 8007140:	4618      	mov	r0, r3
 8007142:	3718      	adds	r7, #24
 8007144:	46bd      	mov	sp, r7
 8007146:	bd80      	pop	{r7, pc}

08007148 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007148:	b480      	push	{r7}
 800714a:	b085      	sub	sp, #20
 800714c:	af00      	add	r7, sp, #0
 800714e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007154:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007164:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8007166:	bf00      	nop
 8007168:	3714      	adds	r7, #20
 800716a:	46bd      	mov	sp, r7
 800716c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007170:	4770      	bx	lr

08007172 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007172:	b580      	push	{r7, lr}
 8007174:	b084      	sub	sp, #16
 8007176:	af00      	add	r7, sp, #0
 8007178:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800717e:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007184:	2b82      	cmp	r3, #130	; 0x82
 8007186:	d111      	bne.n	80071ac <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	4618      	mov	r0, r3
 800718e:	f002 f92f 	bl	80093f0 <SDMMC_CmdStopTransfer>
 8007192:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007194:	68bb      	ldr	r3, [r7, #8]
 8007196:	2b00      	cmp	r3, #0
 8007198:	d008      	beq.n	80071ac <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800719e:	68bb      	ldr	r3, [r7, #8]
 80071a0:	431a      	orrs	r2, r3
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 80071a6:	68f8      	ldr	r0, [r7, #12]
 80071a8:	f7ff fdd4 	bl	8006d54 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	f022 0208 	bic.w	r2, r2, #8
 80071ba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	f240 523a 	movw	r2, #1338	; 0x53a
 80071c4:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	2201      	movs	r2, #1
 80071ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	2200      	movs	r2, #0
 80071d2:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 80071d4:	68f8      	ldr	r0, [r7, #12]
 80071d6:	f002 fd4f 	bl	8009c78 <HAL_SD_RxCpltCallback>
#endif
}
 80071da:	bf00      	nop
 80071dc:	3710      	adds	r7, #16
 80071de:	46bd      	mov	sp, r7
 80071e0:	bd80      	pop	{r7, pc}
	...

080071e4 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 80071e4:	b580      	push	{r7, lr}
 80071e6:	b086      	sub	sp, #24
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071f0:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 80071f2:	6878      	ldr	r0, [r7, #4]
 80071f4:	f7fc f94c 	bl	8003490 <HAL_DMA_GetError>
 80071f8:	4603      	mov	r3, r0
 80071fa:	2b02      	cmp	r3, #2
 80071fc:	d03e      	beq.n	800727c <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 80071fe:	697b      	ldr	r3, [r7, #20]
 8007200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007202:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007204:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8007206:	697b      	ldr	r3, [r7, #20]
 8007208:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800720a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800720c:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 800720e:	693b      	ldr	r3, [r7, #16]
 8007210:	2b01      	cmp	r3, #1
 8007212:	d002      	beq.n	800721a <SD_DMAError+0x36>
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	2b01      	cmp	r3, #1
 8007218:	d12d      	bne.n	8007276 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800721a:	697b      	ldr	r3, [r7, #20]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	4a19      	ldr	r2, [pc, #100]	; (8007284 <SD_DMAError+0xa0>)
 8007220:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8007222:	697b      	ldr	r3, [r7, #20]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007228:	697b      	ldr	r3, [r7, #20]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8007230:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8007232:	697b      	ldr	r3, [r7, #20]
 8007234:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007236:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800723a:	697b      	ldr	r3, [r7, #20]
 800723c:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800723e:	6978      	ldr	r0, [r7, #20]
 8007240:	f7ff ff62 	bl	8007108 <HAL_SD_GetCardState>
 8007244:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8007246:	68bb      	ldr	r3, [r7, #8]
 8007248:	2b06      	cmp	r3, #6
 800724a:	d002      	beq.n	8007252 <SD_DMAError+0x6e>
 800724c:	68bb      	ldr	r3, [r7, #8]
 800724e:	2b05      	cmp	r3, #5
 8007250:	d10a      	bne.n	8007268 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8007252:	697b      	ldr	r3, [r7, #20]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	4618      	mov	r0, r3
 8007258:	f002 f8ca 	bl	80093f0 <SDMMC_CmdStopTransfer>
 800725c:	4602      	mov	r2, r0
 800725e:	697b      	ldr	r3, [r7, #20]
 8007260:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007262:	431a      	orrs	r2, r3
 8007264:	697b      	ldr	r3, [r7, #20]
 8007266:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8007268:	697b      	ldr	r3, [r7, #20]
 800726a:	2201      	movs	r2, #1
 800726c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007270:	697b      	ldr	r3, [r7, #20]
 8007272:	2200      	movs	r2, #0
 8007274:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 8007276:	6978      	ldr	r0, [r7, #20]
 8007278:	f7ff fd6c 	bl	8006d54 <HAL_SD_ErrorCallback>
#endif
  }
}
 800727c:	bf00      	nop
 800727e:	3718      	adds	r7, #24
 8007280:	46bd      	mov	sp, r7
 8007282:	bd80      	pop	{r7, pc}
 8007284:	004005ff 	.word	0x004005ff

08007288 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8007288:	b580      	push	{r7, lr}
 800728a:	b084      	sub	sp, #16
 800728c:	af00      	add	r7, sp, #0
 800728e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007294:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	f240 523a 	movw	r2, #1338	; 0x53a
 800729e:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 80072a0:	68f8      	ldr	r0, [r7, #12]
 80072a2:	f7ff ff31 	bl	8007108 <HAL_SD_GetCardState>
 80072a6:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	2201      	movs	r2, #1
 80072ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	2200      	movs	r2, #0
 80072b4:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80072b6:	68bb      	ldr	r3, [r7, #8]
 80072b8:	2b06      	cmp	r3, #6
 80072ba:	d002      	beq.n	80072c2 <SD_DMATxAbort+0x3a>
 80072bc:	68bb      	ldr	r3, [r7, #8]
 80072be:	2b05      	cmp	r3, #5
 80072c0:	d10a      	bne.n	80072d8 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	4618      	mov	r0, r3
 80072c8:	f002 f892 	bl	80093f0 <SDMMC_CmdStopTransfer>
 80072cc:	4602      	mov	r2, r0
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072d2:	431a      	orrs	r2, r3
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d103      	bne.n	80072e8 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 80072e0:	68f8      	ldr	r0, [r7, #12]
 80072e2:	f002 fcb5 	bl	8009c50 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 80072e6:	e002      	b.n	80072ee <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 80072e8:	68f8      	ldr	r0, [r7, #12]
 80072ea:	f7ff fd33 	bl	8006d54 <HAL_SD_ErrorCallback>
}
 80072ee:	bf00      	nop
 80072f0:	3710      	adds	r7, #16
 80072f2:	46bd      	mov	sp, r7
 80072f4:	bd80      	pop	{r7, pc}

080072f6 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 80072f6:	b580      	push	{r7, lr}
 80072f8:	b084      	sub	sp, #16
 80072fa:	af00      	add	r7, sp, #0
 80072fc:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007302:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	f240 523a 	movw	r2, #1338	; 0x53a
 800730c:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800730e:	68f8      	ldr	r0, [r7, #12]
 8007310:	f7ff fefa 	bl	8007108 <HAL_SD_GetCardState>
 8007314:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	2201      	movs	r2, #1
 800731a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	2200      	movs	r2, #0
 8007322:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8007324:	68bb      	ldr	r3, [r7, #8]
 8007326:	2b06      	cmp	r3, #6
 8007328:	d002      	beq.n	8007330 <SD_DMARxAbort+0x3a>
 800732a:	68bb      	ldr	r3, [r7, #8]
 800732c:	2b05      	cmp	r3, #5
 800732e:	d10a      	bne.n	8007346 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	4618      	mov	r0, r3
 8007336:	f002 f85b 	bl	80093f0 <SDMMC_CmdStopTransfer>
 800733a:	4602      	mov	r2, r0
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007340:	431a      	orrs	r2, r3
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800734a:	2b00      	cmp	r3, #0
 800734c:	d103      	bne.n	8007356 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800734e:	68f8      	ldr	r0, [r7, #12]
 8007350:	f002 fc7e 	bl	8009c50 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8007354:	e002      	b.n	800735c <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8007356:	68f8      	ldr	r0, [r7, #12]
 8007358:	f7ff fcfc 	bl	8006d54 <HAL_SD_ErrorCallback>
}
 800735c:	bf00      	nop
 800735e:	3710      	adds	r7, #16
 8007360:	46bd      	mov	sp, r7
 8007362:	bd80      	pop	{r7, pc}

08007364 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8007364:	b5b0      	push	{r4, r5, r7, lr}
 8007366:	b094      	sub	sp, #80	; 0x50
 8007368:	af04      	add	r7, sp, #16
 800736a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800736c:	2301      	movs	r3, #1
 800736e:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	4618      	mov	r0, r3
 8007376:	f001 ff0c 	bl	8009192 <SDIO_GetPowerState>
 800737a:	4603      	mov	r3, r0
 800737c:	2b00      	cmp	r3, #0
 800737e:	d102      	bne.n	8007386 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007380:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8007384:	e0b8      	b.n	80074f8 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800738a:	2b03      	cmp	r3, #3
 800738c:	d02f      	beq.n	80073ee <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	4618      	mov	r0, r3
 8007394:	f002 f8f3 	bl	800957e <SDMMC_CmdSendCID>
 8007398:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800739a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800739c:	2b00      	cmp	r3, #0
 800739e:	d001      	beq.n	80073a4 <SD_InitCard+0x40>
    {
      return errorstate;
 80073a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80073a2:	e0a9      	b.n	80074f8 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	2100      	movs	r1, #0
 80073aa:	4618      	mov	r0, r3
 80073ac:	f001 ff36 	bl	800921c <SDIO_GetResponse>
 80073b0:	4602      	mov	r2, r0
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	2104      	movs	r1, #4
 80073bc:	4618      	mov	r0, r3
 80073be:	f001 ff2d 	bl	800921c <SDIO_GetResponse>
 80073c2:	4602      	mov	r2, r0
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	2108      	movs	r1, #8
 80073ce:	4618      	mov	r0, r3
 80073d0:	f001 ff24 	bl	800921c <SDIO_GetResponse>
 80073d4:	4602      	mov	r2, r0
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	210c      	movs	r1, #12
 80073e0:	4618      	mov	r0, r3
 80073e2:	f001 ff1b 	bl	800921c <SDIO_GetResponse>
 80073e6:	4602      	mov	r2, r0
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073f2:	2b03      	cmp	r3, #3
 80073f4:	d00d      	beq.n	8007412 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	f107 020e 	add.w	r2, r7, #14
 80073fe:	4611      	mov	r1, r2
 8007400:	4618      	mov	r0, r3
 8007402:	f002 f8f9 	bl	80095f8 <SDMMC_CmdSetRelAdd>
 8007406:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8007408:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800740a:	2b00      	cmp	r3, #0
 800740c:	d001      	beq.n	8007412 <SD_InitCard+0xae>
    {
      return errorstate;
 800740e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007410:	e072      	b.n	80074f8 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007416:	2b03      	cmp	r3, #3
 8007418:	d036      	beq.n	8007488 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800741a:	89fb      	ldrh	r3, [r7, #14]
 800741c:	461a      	mov	r2, r3
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681a      	ldr	r2, [r3, #0]
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800742a:	041b      	lsls	r3, r3, #16
 800742c:	4619      	mov	r1, r3
 800742e:	4610      	mov	r0, r2
 8007430:	f002 f8c3 	bl	80095ba <SDMMC_CmdSendCSD>
 8007434:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8007436:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007438:	2b00      	cmp	r3, #0
 800743a:	d001      	beq.n	8007440 <SD_InitCard+0xdc>
    {
      return errorstate;
 800743c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800743e:	e05b      	b.n	80074f8 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	2100      	movs	r1, #0
 8007446:	4618      	mov	r0, r3
 8007448:	f001 fee8 	bl	800921c <SDIO_GetResponse>
 800744c:	4602      	mov	r2, r0
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	2104      	movs	r1, #4
 8007458:	4618      	mov	r0, r3
 800745a:	f001 fedf 	bl	800921c <SDIO_GetResponse>
 800745e:	4602      	mov	r2, r0
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	2108      	movs	r1, #8
 800746a:	4618      	mov	r0, r3
 800746c:	f001 fed6 	bl	800921c <SDIO_GetResponse>
 8007470:	4602      	mov	r2, r0
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	210c      	movs	r1, #12
 800747c:	4618      	mov	r0, r3
 800747e:	f001 fecd 	bl	800921c <SDIO_GetResponse>
 8007482:	4602      	mov	r2, r0
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	2104      	movs	r1, #4
 800748e:	4618      	mov	r0, r3
 8007490:	f001 fec4 	bl	800921c <SDIO_GetResponse>
 8007494:	4603      	mov	r3, r0
 8007496:	0d1a      	lsrs	r2, r3, #20
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800749c:	f107 0310 	add.w	r3, r7, #16
 80074a0:	4619      	mov	r1, r3
 80074a2:	6878      	ldr	r0, [r7, #4]
 80074a4:	f7ff fc60 	bl	8006d68 <HAL_SD_GetCardCSD>
 80074a8:	4603      	mov	r3, r0
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d002      	beq.n	80074b4 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80074ae:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80074b2:	e021      	b.n	80074f8 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	6819      	ldr	r1, [r3, #0]
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80074bc:	041b      	lsls	r3, r3, #16
 80074be:	2200      	movs	r2, #0
 80074c0:	461c      	mov	r4, r3
 80074c2:	4615      	mov	r5, r2
 80074c4:	4622      	mov	r2, r4
 80074c6:	462b      	mov	r3, r5
 80074c8:	4608      	mov	r0, r1
 80074ca:	f001 ffb3 	bl	8009434 <SDMMC_CmdSelDesel>
 80074ce:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 80074d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d001      	beq.n	80074da <SD_InitCard+0x176>
  {
    return errorstate;
 80074d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80074d8:	e00e      	b.n	80074f8 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681d      	ldr	r5, [r3, #0]
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	466c      	mov	r4, sp
 80074e2:	f103 0210 	add.w	r2, r3, #16
 80074e6:	ca07      	ldmia	r2, {r0, r1, r2}
 80074e8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80074ec:	3304      	adds	r3, #4
 80074ee:	cb0e      	ldmia	r3, {r1, r2, r3}
 80074f0:	4628      	mov	r0, r5
 80074f2:	f001 fdf7 	bl	80090e4 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 80074f6:	2300      	movs	r3, #0
}
 80074f8:	4618      	mov	r0, r3
 80074fa:	3740      	adds	r7, #64	; 0x40
 80074fc:	46bd      	mov	sp, r7
 80074fe:	bdb0      	pop	{r4, r5, r7, pc}

08007500 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8007500:	b580      	push	{r7, lr}
 8007502:	b086      	sub	sp, #24
 8007504:	af00      	add	r7, sp, #0
 8007506:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007508:	2300      	movs	r3, #0
 800750a:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800750c:	2300      	movs	r3, #0
 800750e:	617b      	str	r3, [r7, #20]
 8007510:	2300      	movs	r3, #0
 8007512:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	4618      	mov	r0, r3
 800751a:	f001 ffae 	bl	800947a <SDMMC_CmdGoIdleState>
 800751e:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	2b00      	cmp	r3, #0
 8007524:	d001      	beq.n	800752a <SD_PowerON+0x2a>
  {
    return errorstate;
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	e072      	b.n	8007610 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	4618      	mov	r0, r3
 8007530:	f001 ffc1 	bl	80094b6 <SDMMC_CmdOperCond>
 8007534:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	2b00      	cmp	r3, #0
 800753a:	d00d      	beq.n	8007558 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	2200      	movs	r2, #0
 8007540:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	4618      	mov	r0, r3
 8007548:	f001 ff97 	bl	800947a <SDMMC_CmdGoIdleState>
 800754c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	2b00      	cmp	r3, #0
 8007552:	d004      	beq.n	800755e <SD_PowerON+0x5e>
    {
      return errorstate;
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	e05b      	b.n	8007610 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	2201      	movs	r2, #1
 800755c:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007562:	2b01      	cmp	r3, #1
 8007564:	d137      	bne.n	80075d6 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	2100      	movs	r1, #0
 800756c:	4618      	mov	r0, r3
 800756e:	f001 ffc1 	bl	80094f4 <SDMMC_CmdAppCommand>
 8007572:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	2b00      	cmp	r3, #0
 8007578:	d02d      	beq.n	80075d6 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800757a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800757e:	e047      	b.n	8007610 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	2100      	movs	r1, #0
 8007586:	4618      	mov	r0, r3
 8007588:	f001 ffb4 	bl	80094f4 <SDMMC_CmdAppCommand>
 800758c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	2b00      	cmp	r3, #0
 8007592:	d001      	beq.n	8007598 <SD_PowerON+0x98>
    {
      return errorstate;
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	e03b      	b.n	8007610 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	491e      	ldr	r1, [pc, #120]	; (8007618 <SD_PowerON+0x118>)
 800759e:	4618      	mov	r0, r3
 80075a0:	f001 ffca 	bl	8009538 <SDMMC_CmdAppOperCommand>
 80075a4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d002      	beq.n	80075b2 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80075ac:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80075b0:	e02e      	b.n	8007610 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	2100      	movs	r1, #0
 80075b8:	4618      	mov	r0, r3
 80075ba:	f001 fe2f 	bl	800921c <SDIO_GetResponse>
 80075be:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80075c0:	697b      	ldr	r3, [r7, #20]
 80075c2:	0fdb      	lsrs	r3, r3, #31
 80075c4:	2b01      	cmp	r3, #1
 80075c6:	d101      	bne.n	80075cc <SD_PowerON+0xcc>
 80075c8:	2301      	movs	r3, #1
 80075ca:	e000      	b.n	80075ce <SD_PowerON+0xce>
 80075cc:	2300      	movs	r3, #0
 80075ce:	613b      	str	r3, [r7, #16]

    count++;
 80075d0:	68bb      	ldr	r3, [r7, #8]
 80075d2:	3301      	adds	r3, #1
 80075d4:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80075d6:	68bb      	ldr	r3, [r7, #8]
 80075d8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80075dc:	4293      	cmp	r3, r2
 80075de:	d802      	bhi.n	80075e6 <SD_PowerON+0xe6>
 80075e0:	693b      	ldr	r3, [r7, #16]
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d0cc      	beq.n	8007580 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 80075e6:	68bb      	ldr	r3, [r7, #8]
 80075e8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80075ec:	4293      	cmp	r3, r2
 80075ee:	d902      	bls.n	80075f6 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80075f0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80075f4:	e00c      	b.n	8007610 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 80075f6:	697b      	ldr	r3, [r7, #20]
 80075f8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d003      	beq.n	8007608 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	2201      	movs	r2, #1
 8007604:	645a      	str	r2, [r3, #68]	; 0x44
 8007606:	e002      	b.n	800760e <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	2200      	movs	r2, #0
 800760c:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800760e:	2300      	movs	r3, #0
}
 8007610:	4618      	mov	r0, r3
 8007612:	3718      	adds	r7, #24
 8007614:	46bd      	mov	sp, r7
 8007616:	bd80      	pop	{r7, pc}
 8007618:	c1100000 	.word	0xc1100000

0800761c <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800761c:	b580      	push	{r7, lr}
 800761e:	b084      	sub	sp, #16
 8007620:	af00      	add	r7, sp, #0
 8007622:	6078      	str	r0, [r7, #4]
 8007624:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8007626:	683b      	ldr	r3, [r7, #0]
 8007628:	2b00      	cmp	r3, #0
 800762a:	d102      	bne.n	8007632 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800762c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007630:	e018      	b.n	8007664 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681a      	ldr	r2, [r3, #0]
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800763a:	041b      	lsls	r3, r3, #16
 800763c:	4619      	mov	r1, r3
 800763e:	4610      	mov	r0, r2
 8007640:	f001 fffb 	bl	800963a <SDMMC_CmdSendStatus>
 8007644:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	2b00      	cmp	r3, #0
 800764a:	d001      	beq.n	8007650 <SD_SendStatus+0x34>
  {
    return errorstate;
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	e009      	b.n	8007664 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	2100      	movs	r1, #0
 8007656:	4618      	mov	r0, r3
 8007658:	f001 fde0 	bl	800921c <SDIO_GetResponse>
 800765c:	4602      	mov	r2, r0
 800765e:	683b      	ldr	r3, [r7, #0]
 8007660:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8007662:	2300      	movs	r3, #0
}
 8007664:	4618      	mov	r0, r3
 8007666:	3710      	adds	r7, #16
 8007668:	46bd      	mov	sp, r7
 800766a:	bd80      	pop	{r7, pc}

0800766c <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800766c:	b580      	push	{r7, lr}
 800766e:	b086      	sub	sp, #24
 8007670:	af00      	add	r7, sp, #0
 8007672:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007678:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800767e:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8007680:	693b      	ldr	r3, [r7, #16]
 8007682:	2b00      	cmp	r3, #0
 8007684:	d03f      	beq.n	8007706 <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 8007686:	2300      	movs	r3, #0
 8007688:	617b      	str	r3, [r7, #20]
 800768a:	e033      	b.n	80076f4 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	4618      	mov	r0, r3
 8007692:	f001 fd52 	bl	800913a <SDIO_ReadFIFO>
 8007696:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 8007698:	68bb      	ldr	r3, [r7, #8]
 800769a:	b2da      	uxtb	r2, r3
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	701a      	strb	r2, [r3, #0]
      tmp++;
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	3301      	adds	r3, #1
 80076a4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80076a6:	693b      	ldr	r3, [r7, #16]
 80076a8:	3b01      	subs	r3, #1
 80076aa:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 80076ac:	68bb      	ldr	r3, [r7, #8]
 80076ae:	0a1b      	lsrs	r3, r3, #8
 80076b0:	b2da      	uxtb	r2, r3
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	701a      	strb	r2, [r3, #0]
      tmp++;
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	3301      	adds	r3, #1
 80076ba:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80076bc:	693b      	ldr	r3, [r7, #16]
 80076be:	3b01      	subs	r3, #1
 80076c0:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 80076c2:	68bb      	ldr	r3, [r7, #8]
 80076c4:	0c1b      	lsrs	r3, r3, #16
 80076c6:	b2da      	uxtb	r2, r3
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	701a      	strb	r2, [r3, #0]
      tmp++;
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	3301      	adds	r3, #1
 80076d0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80076d2:	693b      	ldr	r3, [r7, #16]
 80076d4:	3b01      	subs	r3, #1
 80076d6:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 80076d8:	68bb      	ldr	r3, [r7, #8]
 80076da:	0e1b      	lsrs	r3, r3, #24
 80076dc:	b2da      	uxtb	r2, r3
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	701a      	strb	r2, [r3, #0]
      tmp++;
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	3301      	adds	r3, #1
 80076e6:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80076e8:	693b      	ldr	r3, [r7, #16]
 80076ea:	3b01      	subs	r3, #1
 80076ec:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 80076ee:	697b      	ldr	r3, [r7, #20]
 80076f0:	3301      	adds	r3, #1
 80076f2:	617b      	str	r3, [r7, #20]
 80076f4:	697b      	ldr	r3, [r7, #20]
 80076f6:	2b07      	cmp	r3, #7
 80076f8:	d9c8      	bls.n	800768c <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	68fa      	ldr	r2, [r7, #12]
 80076fe:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	693a      	ldr	r2, [r7, #16]
 8007704:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 8007706:	bf00      	nop
 8007708:	3718      	adds	r7, #24
 800770a:	46bd      	mov	sp, r7
 800770c:	bd80      	pop	{r7, pc}

0800770e <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800770e:	b580      	push	{r7, lr}
 8007710:	b086      	sub	sp, #24
 8007712:	af00      	add	r7, sp, #0
 8007714:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	6a1b      	ldr	r3, [r3, #32]
 800771a:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007720:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8007722:	693b      	ldr	r3, [r7, #16]
 8007724:	2b00      	cmp	r3, #0
 8007726:	d043      	beq.n	80077b0 <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8007728:	2300      	movs	r3, #0
 800772a:	617b      	str	r3, [r7, #20]
 800772c:	e037      	b.n	800779e <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	781b      	ldrb	r3, [r3, #0]
 8007732:	60bb      	str	r3, [r7, #8]
      tmp++;
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	3301      	adds	r3, #1
 8007738:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800773a:	693b      	ldr	r3, [r7, #16]
 800773c:	3b01      	subs	r3, #1
 800773e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	781b      	ldrb	r3, [r3, #0]
 8007744:	021a      	lsls	r2, r3, #8
 8007746:	68bb      	ldr	r3, [r7, #8]
 8007748:	4313      	orrs	r3, r2
 800774a:	60bb      	str	r3, [r7, #8]
      tmp++;
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	3301      	adds	r3, #1
 8007750:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007752:	693b      	ldr	r3, [r7, #16]
 8007754:	3b01      	subs	r3, #1
 8007756:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	781b      	ldrb	r3, [r3, #0]
 800775c:	041a      	lsls	r2, r3, #16
 800775e:	68bb      	ldr	r3, [r7, #8]
 8007760:	4313      	orrs	r3, r2
 8007762:	60bb      	str	r3, [r7, #8]
      tmp++;
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	3301      	adds	r3, #1
 8007768:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800776a:	693b      	ldr	r3, [r7, #16]
 800776c:	3b01      	subs	r3, #1
 800776e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	781b      	ldrb	r3, [r3, #0]
 8007774:	061a      	lsls	r2, r3, #24
 8007776:	68bb      	ldr	r3, [r7, #8]
 8007778:	4313      	orrs	r3, r2
 800777a:	60bb      	str	r3, [r7, #8]
      tmp++;
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	3301      	adds	r3, #1
 8007780:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007782:	693b      	ldr	r3, [r7, #16]
 8007784:	3b01      	subs	r3, #1
 8007786:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	f107 0208 	add.w	r2, r7, #8
 8007790:	4611      	mov	r1, r2
 8007792:	4618      	mov	r0, r3
 8007794:	f001 fcde 	bl	8009154 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8007798:	697b      	ldr	r3, [r7, #20]
 800779a:	3301      	adds	r3, #1
 800779c:	617b      	str	r3, [r7, #20]
 800779e:	697b      	ldr	r3, [r7, #20]
 80077a0:	2b07      	cmp	r3, #7
 80077a2:	d9c4      	bls.n	800772e <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	68fa      	ldr	r2, [r7, #12]
 80077a8:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	693a      	ldr	r2, [r7, #16]
 80077ae:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 80077b0:	bf00      	nop
 80077b2:	3718      	adds	r7, #24
 80077b4:	46bd      	mov	sp, r7
 80077b6:	bd80      	pop	{r7, pc}

080077b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80077b8:	b580      	push	{r7, lr}
 80077ba:	b082      	sub	sp, #8
 80077bc:	af00      	add	r7, sp, #0
 80077be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d101      	bne.n	80077ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80077c6:	2301      	movs	r3, #1
 80077c8:	e041      	b.n	800784e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80077d0:	b2db      	uxtb	r3, r3
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d106      	bne.n	80077e4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	2200      	movs	r2, #0
 80077da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80077de:	6878      	ldr	r0, [r7, #4]
 80077e0:	f7fa f984 	bl	8001aec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	2202      	movs	r2, #2
 80077e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681a      	ldr	r2, [r3, #0]
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	3304      	adds	r3, #4
 80077f4:	4619      	mov	r1, r3
 80077f6:	4610      	mov	r0, r2
 80077f8:	f000 fa96 	bl	8007d28 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	2201      	movs	r2, #1
 8007800:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	2201      	movs	r2, #1
 8007808:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	2201      	movs	r2, #1
 8007810:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	2201      	movs	r2, #1
 8007818:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	2201      	movs	r2, #1
 8007820:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	2201      	movs	r2, #1
 8007828:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	2201      	movs	r2, #1
 8007830:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	2201      	movs	r2, #1
 8007838:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	2201      	movs	r2, #1
 8007840:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	2201      	movs	r2, #1
 8007848:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800784c:	2300      	movs	r3, #0
}
 800784e:	4618      	mov	r0, r3
 8007850:	3708      	adds	r7, #8
 8007852:	46bd      	mov	sp, r7
 8007854:	bd80      	pop	{r7, pc}
	...

08007858 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007858:	b480      	push	{r7}
 800785a:	b085      	sub	sp, #20
 800785c:	af00      	add	r7, sp, #0
 800785e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007866:	b2db      	uxtb	r3, r3
 8007868:	2b01      	cmp	r3, #1
 800786a:	d001      	beq.n	8007870 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800786c:	2301      	movs	r3, #1
 800786e:	e04e      	b.n	800790e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	2202      	movs	r2, #2
 8007874:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	68da      	ldr	r2, [r3, #12]
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	f042 0201 	orr.w	r2, r2, #1
 8007886:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	4a23      	ldr	r2, [pc, #140]	; (800791c <HAL_TIM_Base_Start_IT+0xc4>)
 800788e:	4293      	cmp	r3, r2
 8007890:	d022      	beq.n	80078d8 <HAL_TIM_Base_Start_IT+0x80>
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800789a:	d01d      	beq.n	80078d8 <HAL_TIM_Base_Start_IT+0x80>
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	4a1f      	ldr	r2, [pc, #124]	; (8007920 <HAL_TIM_Base_Start_IT+0xc8>)
 80078a2:	4293      	cmp	r3, r2
 80078a4:	d018      	beq.n	80078d8 <HAL_TIM_Base_Start_IT+0x80>
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	4a1e      	ldr	r2, [pc, #120]	; (8007924 <HAL_TIM_Base_Start_IT+0xcc>)
 80078ac:	4293      	cmp	r3, r2
 80078ae:	d013      	beq.n	80078d8 <HAL_TIM_Base_Start_IT+0x80>
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	4a1c      	ldr	r2, [pc, #112]	; (8007928 <HAL_TIM_Base_Start_IT+0xd0>)
 80078b6:	4293      	cmp	r3, r2
 80078b8:	d00e      	beq.n	80078d8 <HAL_TIM_Base_Start_IT+0x80>
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	4a1b      	ldr	r2, [pc, #108]	; (800792c <HAL_TIM_Base_Start_IT+0xd4>)
 80078c0:	4293      	cmp	r3, r2
 80078c2:	d009      	beq.n	80078d8 <HAL_TIM_Base_Start_IT+0x80>
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	4a19      	ldr	r2, [pc, #100]	; (8007930 <HAL_TIM_Base_Start_IT+0xd8>)
 80078ca:	4293      	cmp	r3, r2
 80078cc:	d004      	beq.n	80078d8 <HAL_TIM_Base_Start_IT+0x80>
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	4a18      	ldr	r2, [pc, #96]	; (8007934 <HAL_TIM_Base_Start_IT+0xdc>)
 80078d4:	4293      	cmp	r3, r2
 80078d6:	d111      	bne.n	80078fc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	689b      	ldr	r3, [r3, #8]
 80078de:	f003 0307 	and.w	r3, r3, #7
 80078e2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	2b06      	cmp	r3, #6
 80078e8:	d010      	beq.n	800790c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	681a      	ldr	r2, [r3, #0]
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	f042 0201 	orr.w	r2, r2, #1
 80078f8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80078fa:	e007      	b.n	800790c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	681a      	ldr	r2, [r3, #0]
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	f042 0201 	orr.w	r2, r2, #1
 800790a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800790c:	2300      	movs	r3, #0
}
 800790e:	4618      	mov	r0, r3
 8007910:	3714      	adds	r7, #20
 8007912:	46bd      	mov	sp, r7
 8007914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007918:	4770      	bx	lr
 800791a:	bf00      	nop
 800791c:	40010000 	.word	0x40010000
 8007920:	40000400 	.word	0x40000400
 8007924:	40000800 	.word	0x40000800
 8007928:	40000c00 	.word	0x40000c00
 800792c:	40010400 	.word	0x40010400
 8007930:	40014000 	.word	0x40014000
 8007934:	40001800 	.word	0x40001800

08007938 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007938:	b580      	push	{r7, lr}
 800793a:	b082      	sub	sp, #8
 800793c:	af00      	add	r7, sp, #0
 800793e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	691b      	ldr	r3, [r3, #16]
 8007946:	f003 0302 	and.w	r3, r3, #2
 800794a:	2b02      	cmp	r3, #2
 800794c:	d122      	bne.n	8007994 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	68db      	ldr	r3, [r3, #12]
 8007954:	f003 0302 	and.w	r3, r3, #2
 8007958:	2b02      	cmp	r3, #2
 800795a:	d11b      	bne.n	8007994 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	f06f 0202 	mvn.w	r2, #2
 8007964:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	2201      	movs	r2, #1
 800796a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	699b      	ldr	r3, [r3, #24]
 8007972:	f003 0303 	and.w	r3, r3, #3
 8007976:	2b00      	cmp	r3, #0
 8007978:	d003      	beq.n	8007982 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800797a:	6878      	ldr	r0, [r7, #4]
 800797c:	f000 f9b5 	bl	8007cea <HAL_TIM_IC_CaptureCallback>
 8007980:	e005      	b.n	800798e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007982:	6878      	ldr	r0, [r7, #4]
 8007984:	f000 f9a7 	bl	8007cd6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007988:	6878      	ldr	r0, [r7, #4]
 800798a:	f000 f9b8 	bl	8007cfe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	2200      	movs	r2, #0
 8007992:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	691b      	ldr	r3, [r3, #16]
 800799a:	f003 0304 	and.w	r3, r3, #4
 800799e:	2b04      	cmp	r3, #4
 80079a0:	d122      	bne.n	80079e8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	68db      	ldr	r3, [r3, #12]
 80079a8:	f003 0304 	and.w	r3, r3, #4
 80079ac:	2b04      	cmp	r3, #4
 80079ae:	d11b      	bne.n	80079e8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	f06f 0204 	mvn.w	r2, #4
 80079b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	2202      	movs	r2, #2
 80079be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	699b      	ldr	r3, [r3, #24]
 80079c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d003      	beq.n	80079d6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80079ce:	6878      	ldr	r0, [r7, #4]
 80079d0:	f000 f98b 	bl	8007cea <HAL_TIM_IC_CaptureCallback>
 80079d4:	e005      	b.n	80079e2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80079d6:	6878      	ldr	r0, [r7, #4]
 80079d8:	f000 f97d 	bl	8007cd6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80079dc:	6878      	ldr	r0, [r7, #4]
 80079de:	f000 f98e 	bl	8007cfe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	2200      	movs	r2, #0
 80079e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	691b      	ldr	r3, [r3, #16]
 80079ee:	f003 0308 	and.w	r3, r3, #8
 80079f2:	2b08      	cmp	r3, #8
 80079f4:	d122      	bne.n	8007a3c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	68db      	ldr	r3, [r3, #12]
 80079fc:	f003 0308 	and.w	r3, r3, #8
 8007a00:	2b08      	cmp	r3, #8
 8007a02:	d11b      	bne.n	8007a3c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	f06f 0208 	mvn.w	r2, #8
 8007a0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	2204      	movs	r2, #4
 8007a12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	69db      	ldr	r3, [r3, #28]
 8007a1a:	f003 0303 	and.w	r3, r3, #3
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d003      	beq.n	8007a2a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007a22:	6878      	ldr	r0, [r7, #4]
 8007a24:	f000 f961 	bl	8007cea <HAL_TIM_IC_CaptureCallback>
 8007a28:	e005      	b.n	8007a36 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007a2a:	6878      	ldr	r0, [r7, #4]
 8007a2c:	f000 f953 	bl	8007cd6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007a30:	6878      	ldr	r0, [r7, #4]
 8007a32:	f000 f964 	bl	8007cfe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	2200      	movs	r2, #0
 8007a3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	691b      	ldr	r3, [r3, #16]
 8007a42:	f003 0310 	and.w	r3, r3, #16
 8007a46:	2b10      	cmp	r3, #16
 8007a48:	d122      	bne.n	8007a90 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	68db      	ldr	r3, [r3, #12]
 8007a50:	f003 0310 	and.w	r3, r3, #16
 8007a54:	2b10      	cmp	r3, #16
 8007a56:	d11b      	bne.n	8007a90 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	f06f 0210 	mvn.w	r2, #16
 8007a60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	2208      	movs	r2, #8
 8007a66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	69db      	ldr	r3, [r3, #28]
 8007a6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d003      	beq.n	8007a7e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007a76:	6878      	ldr	r0, [r7, #4]
 8007a78:	f000 f937 	bl	8007cea <HAL_TIM_IC_CaptureCallback>
 8007a7c:	e005      	b.n	8007a8a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007a7e:	6878      	ldr	r0, [r7, #4]
 8007a80:	f000 f929 	bl	8007cd6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007a84:	6878      	ldr	r0, [r7, #4]
 8007a86:	f000 f93a 	bl	8007cfe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	2200      	movs	r2, #0
 8007a8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	691b      	ldr	r3, [r3, #16]
 8007a96:	f003 0301 	and.w	r3, r3, #1
 8007a9a:	2b01      	cmp	r3, #1
 8007a9c:	d10e      	bne.n	8007abc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	68db      	ldr	r3, [r3, #12]
 8007aa4:	f003 0301 	and.w	r3, r3, #1
 8007aa8:	2b01      	cmp	r3, #1
 8007aaa:	d107      	bne.n	8007abc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	f06f 0201 	mvn.w	r2, #1
 8007ab4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007ab6:	6878      	ldr	r0, [r7, #4]
 8007ab8:	f7f9 ffa8 	bl	8001a0c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	691b      	ldr	r3, [r3, #16]
 8007ac2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ac6:	2b80      	cmp	r3, #128	; 0x80
 8007ac8:	d10e      	bne.n	8007ae8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	68db      	ldr	r3, [r3, #12]
 8007ad0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ad4:	2b80      	cmp	r3, #128	; 0x80
 8007ad6:	d107      	bne.n	8007ae8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007ae0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007ae2:	6878      	ldr	r0, [r7, #4]
 8007ae4:	f000 fae0 	bl	80080a8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	691b      	ldr	r3, [r3, #16]
 8007aee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007af2:	2b40      	cmp	r3, #64	; 0x40
 8007af4:	d10e      	bne.n	8007b14 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	68db      	ldr	r3, [r3, #12]
 8007afc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b00:	2b40      	cmp	r3, #64	; 0x40
 8007b02:	d107      	bne.n	8007b14 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007b0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007b0e:	6878      	ldr	r0, [r7, #4]
 8007b10:	f000 f8ff 	bl	8007d12 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	691b      	ldr	r3, [r3, #16]
 8007b1a:	f003 0320 	and.w	r3, r3, #32
 8007b1e:	2b20      	cmp	r3, #32
 8007b20:	d10e      	bne.n	8007b40 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	68db      	ldr	r3, [r3, #12]
 8007b28:	f003 0320 	and.w	r3, r3, #32
 8007b2c:	2b20      	cmp	r3, #32
 8007b2e:	d107      	bne.n	8007b40 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	f06f 0220 	mvn.w	r2, #32
 8007b38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007b3a:	6878      	ldr	r0, [r7, #4]
 8007b3c:	f000 faaa 	bl	8008094 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007b40:	bf00      	nop
 8007b42:	3708      	adds	r7, #8
 8007b44:	46bd      	mov	sp, r7
 8007b46:	bd80      	pop	{r7, pc}

08007b48 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007b48:	b580      	push	{r7, lr}
 8007b4a:	b084      	sub	sp, #16
 8007b4c:	af00      	add	r7, sp, #0
 8007b4e:	6078      	str	r0, [r7, #4]
 8007b50:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007b52:	2300      	movs	r3, #0
 8007b54:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007b5c:	2b01      	cmp	r3, #1
 8007b5e:	d101      	bne.n	8007b64 <HAL_TIM_ConfigClockSource+0x1c>
 8007b60:	2302      	movs	r3, #2
 8007b62:	e0b4      	b.n	8007cce <HAL_TIM_ConfigClockSource+0x186>
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	2201      	movs	r2, #1
 8007b68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	2202      	movs	r2, #2
 8007b70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	689b      	ldr	r3, [r3, #8]
 8007b7a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007b7c:	68bb      	ldr	r3, [r7, #8]
 8007b7e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007b82:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007b84:	68bb      	ldr	r3, [r7, #8]
 8007b86:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007b8a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	68ba      	ldr	r2, [r7, #8]
 8007b92:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007b94:	683b      	ldr	r3, [r7, #0]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007b9c:	d03e      	beq.n	8007c1c <HAL_TIM_ConfigClockSource+0xd4>
 8007b9e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007ba2:	f200 8087 	bhi.w	8007cb4 <HAL_TIM_ConfigClockSource+0x16c>
 8007ba6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007baa:	f000 8086 	beq.w	8007cba <HAL_TIM_ConfigClockSource+0x172>
 8007bae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007bb2:	d87f      	bhi.n	8007cb4 <HAL_TIM_ConfigClockSource+0x16c>
 8007bb4:	2b70      	cmp	r3, #112	; 0x70
 8007bb6:	d01a      	beq.n	8007bee <HAL_TIM_ConfigClockSource+0xa6>
 8007bb8:	2b70      	cmp	r3, #112	; 0x70
 8007bba:	d87b      	bhi.n	8007cb4 <HAL_TIM_ConfigClockSource+0x16c>
 8007bbc:	2b60      	cmp	r3, #96	; 0x60
 8007bbe:	d050      	beq.n	8007c62 <HAL_TIM_ConfigClockSource+0x11a>
 8007bc0:	2b60      	cmp	r3, #96	; 0x60
 8007bc2:	d877      	bhi.n	8007cb4 <HAL_TIM_ConfigClockSource+0x16c>
 8007bc4:	2b50      	cmp	r3, #80	; 0x50
 8007bc6:	d03c      	beq.n	8007c42 <HAL_TIM_ConfigClockSource+0xfa>
 8007bc8:	2b50      	cmp	r3, #80	; 0x50
 8007bca:	d873      	bhi.n	8007cb4 <HAL_TIM_ConfigClockSource+0x16c>
 8007bcc:	2b40      	cmp	r3, #64	; 0x40
 8007bce:	d058      	beq.n	8007c82 <HAL_TIM_ConfigClockSource+0x13a>
 8007bd0:	2b40      	cmp	r3, #64	; 0x40
 8007bd2:	d86f      	bhi.n	8007cb4 <HAL_TIM_ConfigClockSource+0x16c>
 8007bd4:	2b30      	cmp	r3, #48	; 0x30
 8007bd6:	d064      	beq.n	8007ca2 <HAL_TIM_ConfigClockSource+0x15a>
 8007bd8:	2b30      	cmp	r3, #48	; 0x30
 8007bda:	d86b      	bhi.n	8007cb4 <HAL_TIM_ConfigClockSource+0x16c>
 8007bdc:	2b20      	cmp	r3, #32
 8007bde:	d060      	beq.n	8007ca2 <HAL_TIM_ConfigClockSource+0x15a>
 8007be0:	2b20      	cmp	r3, #32
 8007be2:	d867      	bhi.n	8007cb4 <HAL_TIM_ConfigClockSource+0x16c>
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d05c      	beq.n	8007ca2 <HAL_TIM_ConfigClockSource+0x15a>
 8007be8:	2b10      	cmp	r3, #16
 8007bea:	d05a      	beq.n	8007ca2 <HAL_TIM_ConfigClockSource+0x15a>
 8007bec:	e062      	b.n	8007cb4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	6818      	ldr	r0, [r3, #0]
 8007bf2:	683b      	ldr	r3, [r7, #0]
 8007bf4:	6899      	ldr	r1, [r3, #8]
 8007bf6:	683b      	ldr	r3, [r7, #0]
 8007bf8:	685a      	ldr	r2, [r3, #4]
 8007bfa:	683b      	ldr	r3, [r7, #0]
 8007bfc:	68db      	ldr	r3, [r3, #12]
 8007bfe:	f000 f9ad 	bl	8007f5c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	689b      	ldr	r3, [r3, #8]
 8007c08:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007c0a:	68bb      	ldr	r3, [r7, #8]
 8007c0c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007c10:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	68ba      	ldr	r2, [r7, #8]
 8007c18:	609a      	str	r2, [r3, #8]
      break;
 8007c1a:	e04f      	b.n	8007cbc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	6818      	ldr	r0, [r3, #0]
 8007c20:	683b      	ldr	r3, [r7, #0]
 8007c22:	6899      	ldr	r1, [r3, #8]
 8007c24:	683b      	ldr	r3, [r7, #0]
 8007c26:	685a      	ldr	r2, [r3, #4]
 8007c28:	683b      	ldr	r3, [r7, #0]
 8007c2a:	68db      	ldr	r3, [r3, #12]
 8007c2c:	f000 f996 	bl	8007f5c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	689a      	ldr	r2, [r3, #8]
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007c3e:	609a      	str	r2, [r3, #8]
      break;
 8007c40:	e03c      	b.n	8007cbc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	6818      	ldr	r0, [r3, #0]
 8007c46:	683b      	ldr	r3, [r7, #0]
 8007c48:	6859      	ldr	r1, [r3, #4]
 8007c4a:	683b      	ldr	r3, [r7, #0]
 8007c4c:	68db      	ldr	r3, [r3, #12]
 8007c4e:	461a      	mov	r2, r3
 8007c50:	f000 f90a 	bl	8007e68 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	2150      	movs	r1, #80	; 0x50
 8007c5a:	4618      	mov	r0, r3
 8007c5c:	f000 f963 	bl	8007f26 <TIM_ITRx_SetConfig>
      break;
 8007c60:	e02c      	b.n	8007cbc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	6818      	ldr	r0, [r3, #0]
 8007c66:	683b      	ldr	r3, [r7, #0]
 8007c68:	6859      	ldr	r1, [r3, #4]
 8007c6a:	683b      	ldr	r3, [r7, #0]
 8007c6c:	68db      	ldr	r3, [r3, #12]
 8007c6e:	461a      	mov	r2, r3
 8007c70:	f000 f929 	bl	8007ec6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	2160      	movs	r1, #96	; 0x60
 8007c7a:	4618      	mov	r0, r3
 8007c7c:	f000 f953 	bl	8007f26 <TIM_ITRx_SetConfig>
      break;
 8007c80:	e01c      	b.n	8007cbc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	6818      	ldr	r0, [r3, #0]
 8007c86:	683b      	ldr	r3, [r7, #0]
 8007c88:	6859      	ldr	r1, [r3, #4]
 8007c8a:	683b      	ldr	r3, [r7, #0]
 8007c8c:	68db      	ldr	r3, [r3, #12]
 8007c8e:	461a      	mov	r2, r3
 8007c90:	f000 f8ea 	bl	8007e68 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	2140      	movs	r1, #64	; 0x40
 8007c9a:	4618      	mov	r0, r3
 8007c9c:	f000 f943 	bl	8007f26 <TIM_ITRx_SetConfig>
      break;
 8007ca0:	e00c      	b.n	8007cbc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681a      	ldr	r2, [r3, #0]
 8007ca6:	683b      	ldr	r3, [r7, #0]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	4619      	mov	r1, r3
 8007cac:	4610      	mov	r0, r2
 8007cae:	f000 f93a 	bl	8007f26 <TIM_ITRx_SetConfig>
      break;
 8007cb2:	e003      	b.n	8007cbc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007cb4:	2301      	movs	r3, #1
 8007cb6:	73fb      	strb	r3, [r7, #15]
      break;
 8007cb8:	e000      	b.n	8007cbc <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007cba:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	2201      	movs	r2, #1
 8007cc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	2200      	movs	r2, #0
 8007cc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007ccc:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cce:	4618      	mov	r0, r3
 8007cd0:	3710      	adds	r7, #16
 8007cd2:	46bd      	mov	sp, r7
 8007cd4:	bd80      	pop	{r7, pc}

08007cd6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007cd6:	b480      	push	{r7}
 8007cd8:	b083      	sub	sp, #12
 8007cda:	af00      	add	r7, sp, #0
 8007cdc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007cde:	bf00      	nop
 8007ce0:	370c      	adds	r7, #12
 8007ce2:	46bd      	mov	sp, r7
 8007ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce8:	4770      	bx	lr

08007cea <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007cea:	b480      	push	{r7}
 8007cec:	b083      	sub	sp, #12
 8007cee:	af00      	add	r7, sp, #0
 8007cf0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007cf2:	bf00      	nop
 8007cf4:	370c      	adds	r7, #12
 8007cf6:	46bd      	mov	sp, r7
 8007cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cfc:	4770      	bx	lr

08007cfe <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007cfe:	b480      	push	{r7}
 8007d00:	b083      	sub	sp, #12
 8007d02:	af00      	add	r7, sp, #0
 8007d04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007d06:	bf00      	nop
 8007d08:	370c      	adds	r7, #12
 8007d0a:	46bd      	mov	sp, r7
 8007d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d10:	4770      	bx	lr

08007d12 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007d12:	b480      	push	{r7}
 8007d14:	b083      	sub	sp, #12
 8007d16:	af00      	add	r7, sp, #0
 8007d18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007d1a:	bf00      	nop
 8007d1c:	370c      	adds	r7, #12
 8007d1e:	46bd      	mov	sp, r7
 8007d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d24:	4770      	bx	lr
	...

08007d28 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007d28:	b480      	push	{r7}
 8007d2a:	b085      	sub	sp, #20
 8007d2c:	af00      	add	r7, sp, #0
 8007d2e:	6078      	str	r0, [r7, #4]
 8007d30:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	4a40      	ldr	r2, [pc, #256]	; (8007e3c <TIM_Base_SetConfig+0x114>)
 8007d3c:	4293      	cmp	r3, r2
 8007d3e:	d013      	beq.n	8007d68 <TIM_Base_SetConfig+0x40>
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d46:	d00f      	beq.n	8007d68 <TIM_Base_SetConfig+0x40>
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	4a3d      	ldr	r2, [pc, #244]	; (8007e40 <TIM_Base_SetConfig+0x118>)
 8007d4c:	4293      	cmp	r3, r2
 8007d4e:	d00b      	beq.n	8007d68 <TIM_Base_SetConfig+0x40>
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	4a3c      	ldr	r2, [pc, #240]	; (8007e44 <TIM_Base_SetConfig+0x11c>)
 8007d54:	4293      	cmp	r3, r2
 8007d56:	d007      	beq.n	8007d68 <TIM_Base_SetConfig+0x40>
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	4a3b      	ldr	r2, [pc, #236]	; (8007e48 <TIM_Base_SetConfig+0x120>)
 8007d5c:	4293      	cmp	r3, r2
 8007d5e:	d003      	beq.n	8007d68 <TIM_Base_SetConfig+0x40>
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	4a3a      	ldr	r2, [pc, #232]	; (8007e4c <TIM_Base_SetConfig+0x124>)
 8007d64:	4293      	cmp	r3, r2
 8007d66:	d108      	bne.n	8007d7a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d6e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007d70:	683b      	ldr	r3, [r7, #0]
 8007d72:	685b      	ldr	r3, [r3, #4]
 8007d74:	68fa      	ldr	r2, [r7, #12]
 8007d76:	4313      	orrs	r3, r2
 8007d78:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	4a2f      	ldr	r2, [pc, #188]	; (8007e3c <TIM_Base_SetConfig+0x114>)
 8007d7e:	4293      	cmp	r3, r2
 8007d80:	d02b      	beq.n	8007dda <TIM_Base_SetConfig+0xb2>
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d88:	d027      	beq.n	8007dda <TIM_Base_SetConfig+0xb2>
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	4a2c      	ldr	r2, [pc, #176]	; (8007e40 <TIM_Base_SetConfig+0x118>)
 8007d8e:	4293      	cmp	r3, r2
 8007d90:	d023      	beq.n	8007dda <TIM_Base_SetConfig+0xb2>
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	4a2b      	ldr	r2, [pc, #172]	; (8007e44 <TIM_Base_SetConfig+0x11c>)
 8007d96:	4293      	cmp	r3, r2
 8007d98:	d01f      	beq.n	8007dda <TIM_Base_SetConfig+0xb2>
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	4a2a      	ldr	r2, [pc, #168]	; (8007e48 <TIM_Base_SetConfig+0x120>)
 8007d9e:	4293      	cmp	r3, r2
 8007da0:	d01b      	beq.n	8007dda <TIM_Base_SetConfig+0xb2>
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	4a29      	ldr	r2, [pc, #164]	; (8007e4c <TIM_Base_SetConfig+0x124>)
 8007da6:	4293      	cmp	r3, r2
 8007da8:	d017      	beq.n	8007dda <TIM_Base_SetConfig+0xb2>
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	4a28      	ldr	r2, [pc, #160]	; (8007e50 <TIM_Base_SetConfig+0x128>)
 8007dae:	4293      	cmp	r3, r2
 8007db0:	d013      	beq.n	8007dda <TIM_Base_SetConfig+0xb2>
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	4a27      	ldr	r2, [pc, #156]	; (8007e54 <TIM_Base_SetConfig+0x12c>)
 8007db6:	4293      	cmp	r3, r2
 8007db8:	d00f      	beq.n	8007dda <TIM_Base_SetConfig+0xb2>
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	4a26      	ldr	r2, [pc, #152]	; (8007e58 <TIM_Base_SetConfig+0x130>)
 8007dbe:	4293      	cmp	r3, r2
 8007dc0:	d00b      	beq.n	8007dda <TIM_Base_SetConfig+0xb2>
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	4a25      	ldr	r2, [pc, #148]	; (8007e5c <TIM_Base_SetConfig+0x134>)
 8007dc6:	4293      	cmp	r3, r2
 8007dc8:	d007      	beq.n	8007dda <TIM_Base_SetConfig+0xb2>
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	4a24      	ldr	r2, [pc, #144]	; (8007e60 <TIM_Base_SetConfig+0x138>)
 8007dce:	4293      	cmp	r3, r2
 8007dd0:	d003      	beq.n	8007dda <TIM_Base_SetConfig+0xb2>
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	4a23      	ldr	r2, [pc, #140]	; (8007e64 <TIM_Base_SetConfig+0x13c>)
 8007dd6:	4293      	cmp	r3, r2
 8007dd8:	d108      	bne.n	8007dec <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007de0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007de2:	683b      	ldr	r3, [r7, #0]
 8007de4:	68db      	ldr	r3, [r3, #12]
 8007de6:	68fa      	ldr	r2, [r7, #12]
 8007de8:	4313      	orrs	r3, r2
 8007dea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007df2:	683b      	ldr	r3, [r7, #0]
 8007df4:	695b      	ldr	r3, [r3, #20]
 8007df6:	4313      	orrs	r3, r2
 8007df8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	68fa      	ldr	r2, [r7, #12]
 8007dfe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007e00:	683b      	ldr	r3, [r7, #0]
 8007e02:	689a      	ldr	r2, [r3, #8]
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007e08:	683b      	ldr	r3, [r7, #0]
 8007e0a:	681a      	ldr	r2, [r3, #0]
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	4a0a      	ldr	r2, [pc, #40]	; (8007e3c <TIM_Base_SetConfig+0x114>)
 8007e14:	4293      	cmp	r3, r2
 8007e16:	d003      	beq.n	8007e20 <TIM_Base_SetConfig+0xf8>
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	4a0c      	ldr	r2, [pc, #48]	; (8007e4c <TIM_Base_SetConfig+0x124>)
 8007e1c:	4293      	cmp	r3, r2
 8007e1e:	d103      	bne.n	8007e28 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007e20:	683b      	ldr	r3, [r7, #0]
 8007e22:	691a      	ldr	r2, [r3, #16]
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	2201      	movs	r2, #1
 8007e2c:	615a      	str	r2, [r3, #20]
}
 8007e2e:	bf00      	nop
 8007e30:	3714      	adds	r7, #20
 8007e32:	46bd      	mov	sp, r7
 8007e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e38:	4770      	bx	lr
 8007e3a:	bf00      	nop
 8007e3c:	40010000 	.word	0x40010000
 8007e40:	40000400 	.word	0x40000400
 8007e44:	40000800 	.word	0x40000800
 8007e48:	40000c00 	.word	0x40000c00
 8007e4c:	40010400 	.word	0x40010400
 8007e50:	40014000 	.word	0x40014000
 8007e54:	40014400 	.word	0x40014400
 8007e58:	40014800 	.word	0x40014800
 8007e5c:	40001800 	.word	0x40001800
 8007e60:	40001c00 	.word	0x40001c00
 8007e64:	40002000 	.word	0x40002000

08007e68 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007e68:	b480      	push	{r7}
 8007e6a:	b087      	sub	sp, #28
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	60f8      	str	r0, [r7, #12]
 8007e70:	60b9      	str	r1, [r7, #8]
 8007e72:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	6a1b      	ldr	r3, [r3, #32]
 8007e78:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	6a1b      	ldr	r3, [r3, #32]
 8007e7e:	f023 0201 	bic.w	r2, r3, #1
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	699b      	ldr	r3, [r3, #24]
 8007e8a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007e8c:	693b      	ldr	r3, [r7, #16]
 8007e8e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007e92:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	011b      	lsls	r3, r3, #4
 8007e98:	693a      	ldr	r2, [r7, #16]
 8007e9a:	4313      	orrs	r3, r2
 8007e9c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007e9e:	697b      	ldr	r3, [r7, #20]
 8007ea0:	f023 030a 	bic.w	r3, r3, #10
 8007ea4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007ea6:	697a      	ldr	r2, [r7, #20]
 8007ea8:	68bb      	ldr	r3, [r7, #8]
 8007eaa:	4313      	orrs	r3, r2
 8007eac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	693a      	ldr	r2, [r7, #16]
 8007eb2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	697a      	ldr	r2, [r7, #20]
 8007eb8:	621a      	str	r2, [r3, #32]
}
 8007eba:	bf00      	nop
 8007ebc:	371c      	adds	r7, #28
 8007ebe:	46bd      	mov	sp, r7
 8007ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec4:	4770      	bx	lr

08007ec6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007ec6:	b480      	push	{r7}
 8007ec8:	b087      	sub	sp, #28
 8007eca:	af00      	add	r7, sp, #0
 8007ecc:	60f8      	str	r0, [r7, #12]
 8007ece:	60b9      	str	r1, [r7, #8]
 8007ed0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	6a1b      	ldr	r3, [r3, #32]
 8007ed6:	f023 0210 	bic.w	r2, r3, #16
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	699b      	ldr	r3, [r3, #24]
 8007ee2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	6a1b      	ldr	r3, [r3, #32]
 8007ee8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007eea:	697b      	ldr	r3, [r7, #20]
 8007eec:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007ef0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	031b      	lsls	r3, r3, #12
 8007ef6:	697a      	ldr	r2, [r7, #20]
 8007ef8:	4313      	orrs	r3, r2
 8007efa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007efc:	693b      	ldr	r3, [r7, #16]
 8007efe:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007f02:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007f04:	68bb      	ldr	r3, [r7, #8]
 8007f06:	011b      	lsls	r3, r3, #4
 8007f08:	693a      	ldr	r2, [r7, #16]
 8007f0a:	4313      	orrs	r3, r2
 8007f0c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	697a      	ldr	r2, [r7, #20]
 8007f12:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	693a      	ldr	r2, [r7, #16]
 8007f18:	621a      	str	r2, [r3, #32]
}
 8007f1a:	bf00      	nop
 8007f1c:	371c      	adds	r7, #28
 8007f1e:	46bd      	mov	sp, r7
 8007f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f24:	4770      	bx	lr

08007f26 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007f26:	b480      	push	{r7}
 8007f28:	b085      	sub	sp, #20
 8007f2a:	af00      	add	r7, sp, #0
 8007f2c:	6078      	str	r0, [r7, #4]
 8007f2e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	689b      	ldr	r3, [r3, #8]
 8007f34:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f3c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007f3e:	683a      	ldr	r2, [r7, #0]
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	4313      	orrs	r3, r2
 8007f44:	f043 0307 	orr.w	r3, r3, #7
 8007f48:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	68fa      	ldr	r2, [r7, #12]
 8007f4e:	609a      	str	r2, [r3, #8]
}
 8007f50:	bf00      	nop
 8007f52:	3714      	adds	r7, #20
 8007f54:	46bd      	mov	sp, r7
 8007f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f5a:	4770      	bx	lr

08007f5c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007f5c:	b480      	push	{r7}
 8007f5e:	b087      	sub	sp, #28
 8007f60:	af00      	add	r7, sp, #0
 8007f62:	60f8      	str	r0, [r7, #12]
 8007f64:	60b9      	str	r1, [r7, #8]
 8007f66:	607a      	str	r2, [r7, #4]
 8007f68:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	689b      	ldr	r3, [r3, #8]
 8007f6e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007f70:	697b      	ldr	r3, [r7, #20]
 8007f72:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007f76:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007f78:	683b      	ldr	r3, [r7, #0]
 8007f7a:	021a      	lsls	r2, r3, #8
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	431a      	orrs	r2, r3
 8007f80:	68bb      	ldr	r3, [r7, #8]
 8007f82:	4313      	orrs	r3, r2
 8007f84:	697a      	ldr	r2, [r7, #20]
 8007f86:	4313      	orrs	r3, r2
 8007f88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	697a      	ldr	r2, [r7, #20]
 8007f8e:	609a      	str	r2, [r3, #8]
}
 8007f90:	bf00      	nop
 8007f92:	371c      	adds	r7, #28
 8007f94:	46bd      	mov	sp, r7
 8007f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f9a:	4770      	bx	lr

08007f9c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007f9c:	b480      	push	{r7}
 8007f9e:	b085      	sub	sp, #20
 8007fa0:	af00      	add	r7, sp, #0
 8007fa2:	6078      	str	r0, [r7, #4]
 8007fa4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007fac:	2b01      	cmp	r3, #1
 8007fae:	d101      	bne.n	8007fb4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007fb0:	2302      	movs	r3, #2
 8007fb2:	e05a      	b.n	800806a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	2201      	movs	r2, #1
 8007fb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	2202      	movs	r2, #2
 8007fc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	685b      	ldr	r3, [r3, #4]
 8007fca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	689b      	ldr	r3, [r3, #8]
 8007fd2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007fda:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007fdc:	683b      	ldr	r3, [r7, #0]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	68fa      	ldr	r2, [r7, #12]
 8007fe2:	4313      	orrs	r3, r2
 8007fe4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	68fa      	ldr	r2, [r7, #12]
 8007fec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	4a21      	ldr	r2, [pc, #132]	; (8008078 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007ff4:	4293      	cmp	r3, r2
 8007ff6:	d022      	beq.n	800803e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008000:	d01d      	beq.n	800803e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	4a1d      	ldr	r2, [pc, #116]	; (800807c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008008:	4293      	cmp	r3, r2
 800800a:	d018      	beq.n	800803e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	4a1b      	ldr	r2, [pc, #108]	; (8008080 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8008012:	4293      	cmp	r3, r2
 8008014:	d013      	beq.n	800803e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	4a1a      	ldr	r2, [pc, #104]	; (8008084 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800801c:	4293      	cmp	r3, r2
 800801e:	d00e      	beq.n	800803e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	4a18      	ldr	r2, [pc, #96]	; (8008088 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8008026:	4293      	cmp	r3, r2
 8008028:	d009      	beq.n	800803e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	4a17      	ldr	r2, [pc, #92]	; (800808c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008030:	4293      	cmp	r3, r2
 8008032:	d004      	beq.n	800803e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	4a15      	ldr	r2, [pc, #84]	; (8008090 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800803a:	4293      	cmp	r3, r2
 800803c:	d10c      	bne.n	8008058 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800803e:	68bb      	ldr	r3, [r7, #8]
 8008040:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008044:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008046:	683b      	ldr	r3, [r7, #0]
 8008048:	685b      	ldr	r3, [r3, #4]
 800804a:	68ba      	ldr	r2, [r7, #8]
 800804c:	4313      	orrs	r3, r2
 800804e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	68ba      	ldr	r2, [r7, #8]
 8008056:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	2201      	movs	r2, #1
 800805c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	2200      	movs	r2, #0
 8008064:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008068:	2300      	movs	r3, #0
}
 800806a:	4618      	mov	r0, r3
 800806c:	3714      	adds	r7, #20
 800806e:	46bd      	mov	sp, r7
 8008070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008074:	4770      	bx	lr
 8008076:	bf00      	nop
 8008078:	40010000 	.word	0x40010000
 800807c:	40000400 	.word	0x40000400
 8008080:	40000800 	.word	0x40000800
 8008084:	40000c00 	.word	0x40000c00
 8008088:	40010400 	.word	0x40010400
 800808c:	40014000 	.word	0x40014000
 8008090:	40001800 	.word	0x40001800

08008094 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008094:	b480      	push	{r7}
 8008096:	b083      	sub	sp, #12
 8008098:	af00      	add	r7, sp, #0
 800809a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800809c:	bf00      	nop
 800809e:	370c      	adds	r7, #12
 80080a0:	46bd      	mov	sp, r7
 80080a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a6:	4770      	bx	lr

080080a8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80080a8:	b480      	push	{r7}
 80080aa:	b083      	sub	sp, #12
 80080ac:	af00      	add	r7, sp, #0
 80080ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80080b0:	bf00      	nop
 80080b2:	370c      	adds	r7, #12
 80080b4:	46bd      	mov	sp, r7
 80080b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ba:	4770      	bx	lr

080080bc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80080bc:	b580      	push	{r7, lr}
 80080be:	b082      	sub	sp, #8
 80080c0:	af00      	add	r7, sp, #0
 80080c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d101      	bne.n	80080ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80080ca:	2301      	movs	r3, #1
 80080cc:	e03f      	b.n	800814e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80080d4:	b2db      	uxtb	r3, r3
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d106      	bne.n	80080e8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	2200      	movs	r2, #0
 80080de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80080e2:	6878      	ldr	r0, [r7, #4]
 80080e4:	f7f9 fd7e 	bl	8001be4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	2224      	movs	r2, #36	; 0x24
 80080ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	68da      	ldr	r2, [r3, #12]
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80080fe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008100:	6878      	ldr	r0, [r7, #4]
 8008102:	f000 fd7b 	bl	8008bfc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	691a      	ldr	r2, [r3, #16]
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008114:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	695a      	ldr	r2, [r3, #20]
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008124:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	68da      	ldr	r2, [r3, #12]
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008134:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	2200      	movs	r2, #0
 800813a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	2220      	movs	r2, #32
 8008140:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	2220      	movs	r2, #32
 8008148:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800814c:	2300      	movs	r3, #0
}
 800814e:	4618      	mov	r0, r3
 8008150:	3708      	adds	r7, #8
 8008152:	46bd      	mov	sp, r7
 8008154:	bd80      	pop	{r7, pc}

08008156 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008156:	b580      	push	{r7, lr}
 8008158:	b08a      	sub	sp, #40	; 0x28
 800815a:	af02      	add	r7, sp, #8
 800815c:	60f8      	str	r0, [r7, #12]
 800815e:	60b9      	str	r1, [r7, #8]
 8008160:	603b      	str	r3, [r7, #0]
 8008162:	4613      	mov	r3, r2
 8008164:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008166:	2300      	movs	r3, #0
 8008168:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008170:	b2db      	uxtb	r3, r3
 8008172:	2b20      	cmp	r3, #32
 8008174:	d17c      	bne.n	8008270 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8008176:	68bb      	ldr	r3, [r7, #8]
 8008178:	2b00      	cmp	r3, #0
 800817a:	d002      	beq.n	8008182 <HAL_UART_Transmit+0x2c>
 800817c:	88fb      	ldrh	r3, [r7, #6]
 800817e:	2b00      	cmp	r3, #0
 8008180:	d101      	bne.n	8008186 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8008182:	2301      	movs	r3, #1
 8008184:	e075      	b.n	8008272 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800818c:	2b01      	cmp	r3, #1
 800818e:	d101      	bne.n	8008194 <HAL_UART_Transmit+0x3e>
 8008190:	2302      	movs	r3, #2
 8008192:	e06e      	b.n	8008272 <HAL_UART_Transmit+0x11c>
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	2201      	movs	r2, #1
 8008198:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	2200      	movs	r2, #0
 80081a0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	2221      	movs	r2, #33	; 0x21
 80081a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80081aa:	f7f9 fe31 	bl	8001e10 <HAL_GetTick>
 80081ae:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	88fa      	ldrh	r2, [r7, #6]
 80081b4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	88fa      	ldrh	r2, [r7, #6]
 80081ba:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	689b      	ldr	r3, [r3, #8]
 80081c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80081c4:	d108      	bne.n	80081d8 <HAL_UART_Transmit+0x82>
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	691b      	ldr	r3, [r3, #16]
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d104      	bne.n	80081d8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80081ce:	2300      	movs	r3, #0
 80081d0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80081d2:	68bb      	ldr	r3, [r7, #8]
 80081d4:	61bb      	str	r3, [r7, #24]
 80081d6:	e003      	b.n	80081e0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80081d8:	68bb      	ldr	r3, [r7, #8]
 80081da:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80081dc:	2300      	movs	r3, #0
 80081de:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	2200      	movs	r2, #0
 80081e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80081e8:	e02a      	b.n	8008240 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80081ea:	683b      	ldr	r3, [r7, #0]
 80081ec:	9300      	str	r3, [sp, #0]
 80081ee:	697b      	ldr	r3, [r7, #20]
 80081f0:	2200      	movs	r2, #0
 80081f2:	2180      	movs	r1, #128	; 0x80
 80081f4:	68f8      	ldr	r0, [r7, #12]
 80081f6:	f000 faf9 	bl	80087ec <UART_WaitOnFlagUntilTimeout>
 80081fa:	4603      	mov	r3, r0
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d001      	beq.n	8008204 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8008200:	2303      	movs	r3, #3
 8008202:	e036      	b.n	8008272 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8008204:	69fb      	ldr	r3, [r7, #28]
 8008206:	2b00      	cmp	r3, #0
 8008208:	d10b      	bne.n	8008222 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800820a:	69bb      	ldr	r3, [r7, #24]
 800820c:	881b      	ldrh	r3, [r3, #0]
 800820e:	461a      	mov	r2, r3
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008218:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800821a:	69bb      	ldr	r3, [r7, #24]
 800821c:	3302      	adds	r3, #2
 800821e:	61bb      	str	r3, [r7, #24]
 8008220:	e007      	b.n	8008232 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8008222:	69fb      	ldr	r3, [r7, #28]
 8008224:	781a      	ldrb	r2, [r3, #0]
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800822c:	69fb      	ldr	r3, [r7, #28]
 800822e:	3301      	adds	r3, #1
 8008230:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008236:	b29b      	uxth	r3, r3
 8008238:	3b01      	subs	r3, #1
 800823a:	b29a      	uxth	r2, r3
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008244:	b29b      	uxth	r3, r3
 8008246:	2b00      	cmp	r3, #0
 8008248:	d1cf      	bne.n	80081ea <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800824a:	683b      	ldr	r3, [r7, #0]
 800824c:	9300      	str	r3, [sp, #0]
 800824e:	697b      	ldr	r3, [r7, #20]
 8008250:	2200      	movs	r2, #0
 8008252:	2140      	movs	r1, #64	; 0x40
 8008254:	68f8      	ldr	r0, [r7, #12]
 8008256:	f000 fac9 	bl	80087ec <UART_WaitOnFlagUntilTimeout>
 800825a:	4603      	mov	r3, r0
 800825c:	2b00      	cmp	r3, #0
 800825e:	d001      	beq.n	8008264 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8008260:	2303      	movs	r3, #3
 8008262:	e006      	b.n	8008272 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	2220      	movs	r2, #32
 8008268:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800826c:	2300      	movs	r3, #0
 800826e:	e000      	b.n	8008272 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8008270:	2302      	movs	r3, #2
  }
}
 8008272:	4618      	mov	r0, r3
 8008274:	3720      	adds	r7, #32
 8008276:	46bd      	mov	sp, r7
 8008278:	bd80      	pop	{r7, pc}
	...

0800827c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800827c:	b580      	push	{r7, lr}
 800827e:	b0ba      	sub	sp, #232	; 0xe8
 8008280:	af00      	add	r7, sp, #0
 8008282:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	68db      	ldr	r3, [r3, #12]
 8008294:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	695b      	ldr	r3, [r3, #20]
 800829e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80082a2:	2300      	movs	r3, #0
 80082a4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80082a8:	2300      	movs	r3, #0
 80082aa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80082ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80082b2:	f003 030f 	and.w	r3, r3, #15
 80082b6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80082ba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d10f      	bne.n	80082e2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80082c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80082c6:	f003 0320 	and.w	r3, r3, #32
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d009      	beq.n	80082e2 <HAL_UART_IRQHandler+0x66>
 80082ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80082d2:	f003 0320 	and.w	r3, r3, #32
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d003      	beq.n	80082e2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80082da:	6878      	ldr	r0, [r7, #4]
 80082dc:	f000 fbd3 	bl	8008a86 <UART_Receive_IT>
      return;
 80082e0:	e256      	b.n	8008790 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80082e2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	f000 80de 	beq.w	80084a8 <HAL_UART_IRQHandler+0x22c>
 80082ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80082f0:	f003 0301 	and.w	r3, r3, #1
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d106      	bne.n	8008306 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80082f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80082fc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8008300:	2b00      	cmp	r3, #0
 8008302:	f000 80d1 	beq.w	80084a8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008306:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800830a:	f003 0301 	and.w	r3, r3, #1
 800830e:	2b00      	cmp	r3, #0
 8008310:	d00b      	beq.n	800832a <HAL_UART_IRQHandler+0xae>
 8008312:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008316:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800831a:	2b00      	cmp	r3, #0
 800831c:	d005      	beq.n	800832a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008322:	f043 0201 	orr.w	r2, r3, #1
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800832a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800832e:	f003 0304 	and.w	r3, r3, #4
 8008332:	2b00      	cmp	r3, #0
 8008334:	d00b      	beq.n	800834e <HAL_UART_IRQHandler+0xd2>
 8008336:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800833a:	f003 0301 	and.w	r3, r3, #1
 800833e:	2b00      	cmp	r3, #0
 8008340:	d005      	beq.n	800834e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008346:	f043 0202 	orr.w	r2, r3, #2
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800834e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008352:	f003 0302 	and.w	r3, r3, #2
 8008356:	2b00      	cmp	r3, #0
 8008358:	d00b      	beq.n	8008372 <HAL_UART_IRQHandler+0xf6>
 800835a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800835e:	f003 0301 	and.w	r3, r3, #1
 8008362:	2b00      	cmp	r3, #0
 8008364:	d005      	beq.n	8008372 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800836a:	f043 0204 	orr.w	r2, r3, #4
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8008372:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008376:	f003 0308 	and.w	r3, r3, #8
 800837a:	2b00      	cmp	r3, #0
 800837c:	d011      	beq.n	80083a2 <HAL_UART_IRQHandler+0x126>
 800837e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008382:	f003 0320 	and.w	r3, r3, #32
 8008386:	2b00      	cmp	r3, #0
 8008388:	d105      	bne.n	8008396 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800838a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800838e:	f003 0301 	and.w	r3, r3, #1
 8008392:	2b00      	cmp	r3, #0
 8008394:	d005      	beq.n	80083a2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800839a:	f043 0208 	orr.w	r2, r3, #8
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	f000 81ed 	beq.w	8008786 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80083ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80083b0:	f003 0320 	and.w	r3, r3, #32
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d008      	beq.n	80083ca <HAL_UART_IRQHandler+0x14e>
 80083b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80083bc:	f003 0320 	and.w	r3, r3, #32
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d002      	beq.n	80083ca <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80083c4:	6878      	ldr	r0, [r7, #4]
 80083c6:	f000 fb5e 	bl	8008a86 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	695b      	ldr	r3, [r3, #20]
 80083d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083d4:	2b40      	cmp	r3, #64	; 0x40
 80083d6:	bf0c      	ite	eq
 80083d8:	2301      	moveq	r3, #1
 80083da:	2300      	movne	r3, #0
 80083dc:	b2db      	uxtb	r3, r3
 80083de:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083e6:	f003 0308 	and.w	r3, r3, #8
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d103      	bne.n	80083f6 <HAL_UART_IRQHandler+0x17a>
 80083ee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d04f      	beq.n	8008496 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80083f6:	6878      	ldr	r0, [r7, #4]
 80083f8:	f000 fa66 	bl	80088c8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	695b      	ldr	r3, [r3, #20]
 8008402:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008406:	2b40      	cmp	r3, #64	; 0x40
 8008408:	d141      	bne.n	800848e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	3314      	adds	r3, #20
 8008410:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008414:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008418:	e853 3f00 	ldrex	r3, [r3]
 800841c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008420:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008424:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008428:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	3314      	adds	r3, #20
 8008432:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8008436:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800843a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800843e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8008442:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008446:	e841 2300 	strex	r3, r2, [r1]
 800844a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800844e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008452:	2b00      	cmp	r3, #0
 8008454:	d1d9      	bne.n	800840a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800845a:	2b00      	cmp	r3, #0
 800845c:	d013      	beq.n	8008486 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008462:	4a7d      	ldr	r2, [pc, #500]	; (8008658 <HAL_UART_IRQHandler+0x3dc>)
 8008464:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800846a:	4618      	mov	r0, r3
 800846c:	f7fa fe56 	bl	800311c <HAL_DMA_Abort_IT>
 8008470:	4603      	mov	r3, r0
 8008472:	2b00      	cmp	r3, #0
 8008474:	d016      	beq.n	80084a4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800847a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800847c:	687a      	ldr	r2, [r7, #4]
 800847e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008480:	4610      	mov	r0, r2
 8008482:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008484:	e00e      	b.n	80084a4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008486:	6878      	ldr	r0, [r7, #4]
 8008488:	f000 f99a 	bl	80087c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800848c:	e00a      	b.n	80084a4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800848e:	6878      	ldr	r0, [r7, #4]
 8008490:	f000 f996 	bl	80087c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008494:	e006      	b.n	80084a4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008496:	6878      	ldr	r0, [r7, #4]
 8008498:	f000 f992 	bl	80087c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	2200      	movs	r2, #0
 80084a0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80084a2:	e170      	b.n	8008786 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80084a4:	bf00      	nop
    return;
 80084a6:	e16e      	b.n	8008786 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084ac:	2b01      	cmp	r3, #1
 80084ae:	f040 814a 	bne.w	8008746 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80084b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80084b6:	f003 0310 	and.w	r3, r3, #16
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	f000 8143 	beq.w	8008746 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80084c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80084c4:	f003 0310 	and.w	r3, r3, #16
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	f000 813c 	beq.w	8008746 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80084ce:	2300      	movs	r3, #0
 80084d0:	60bb      	str	r3, [r7, #8]
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	60bb      	str	r3, [r7, #8]
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	685b      	ldr	r3, [r3, #4]
 80084e0:	60bb      	str	r3, [r7, #8]
 80084e2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	695b      	ldr	r3, [r3, #20]
 80084ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084ee:	2b40      	cmp	r3, #64	; 0x40
 80084f0:	f040 80b4 	bne.w	800865c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	685b      	ldr	r3, [r3, #4]
 80084fc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008500:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008504:	2b00      	cmp	r3, #0
 8008506:	f000 8140 	beq.w	800878a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800850e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008512:	429a      	cmp	r2, r3
 8008514:	f080 8139 	bcs.w	800878a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800851e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008524:	69db      	ldr	r3, [r3, #28]
 8008526:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800852a:	f000 8088 	beq.w	800863e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	330c      	adds	r3, #12
 8008534:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008538:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800853c:	e853 3f00 	ldrex	r3, [r3]
 8008540:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008544:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008548:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800854c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	330c      	adds	r3, #12
 8008556:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800855a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800855e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008562:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8008566:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800856a:	e841 2300 	strex	r3, r2, [r1]
 800856e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8008572:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008576:	2b00      	cmp	r3, #0
 8008578:	d1d9      	bne.n	800852e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	3314      	adds	r3, #20
 8008580:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008582:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008584:	e853 3f00 	ldrex	r3, [r3]
 8008588:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800858a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800858c:	f023 0301 	bic.w	r3, r3, #1
 8008590:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	3314      	adds	r3, #20
 800859a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800859e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80085a2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085a4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80085a6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80085aa:	e841 2300 	strex	r3, r2, [r1]
 80085ae:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80085b0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d1e1      	bne.n	800857a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	3314      	adds	r3, #20
 80085bc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085be:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80085c0:	e853 3f00 	ldrex	r3, [r3]
 80085c4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80085c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80085c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80085cc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	3314      	adds	r3, #20
 80085d6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80085da:	66fa      	str	r2, [r7, #108]	; 0x6c
 80085dc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085de:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80085e0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80085e2:	e841 2300 	strex	r3, r2, [r1]
 80085e6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80085e8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d1e3      	bne.n	80085b6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	2220      	movs	r2, #32
 80085f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	2200      	movs	r2, #0
 80085fa:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	330c      	adds	r3, #12
 8008602:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008604:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008606:	e853 3f00 	ldrex	r3, [r3]
 800860a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800860c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800860e:	f023 0310 	bic.w	r3, r3, #16
 8008612:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	330c      	adds	r3, #12
 800861c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8008620:	65ba      	str	r2, [r7, #88]	; 0x58
 8008622:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008624:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008626:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008628:	e841 2300 	strex	r3, r2, [r1]
 800862c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800862e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008630:	2b00      	cmp	r3, #0
 8008632:	d1e3      	bne.n	80085fc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008638:	4618      	mov	r0, r3
 800863a:	f7fa fcff 	bl	800303c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008646:	b29b      	uxth	r3, r3
 8008648:	1ad3      	subs	r3, r2, r3
 800864a:	b29b      	uxth	r3, r3
 800864c:	4619      	mov	r1, r3
 800864e:	6878      	ldr	r0, [r7, #4]
 8008650:	f000 f8c0 	bl	80087d4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008654:	e099      	b.n	800878a <HAL_UART_IRQHandler+0x50e>
 8008656:	bf00      	nop
 8008658:	0800898f 	.word	0x0800898f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008664:	b29b      	uxth	r3, r3
 8008666:	1ad3      	subs	r3, r2, r3
 8008668:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008670:	b29b      	uxth	r3, r3
 8008672:	2b00      	cmp	r3, #0
 8008674:	f000 808b 	beq.w	800878e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8008678:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800867c:	2b00      	cmp	r3, #0
 800867e:	f000 8086 	beq.w	800878e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	330c      	adds	r3, #12
 8008688:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800868a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800868c:	e853 3f00 	ldrex	r3, [r3]
 8008690:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008692:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008694:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008698:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	330c      	adds	r3, #12
 80086a2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80086a6:	647a      	str	r2, [r7, #68]	; 0x44
 80086a8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086aa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80086ac:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80086ae:	e841 2300 	strex	r3, r2, [r1]
 80086b2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80086b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d1e3      	bne.n	8008682 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	3314      	adds	r3, #20
 80086c0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086c4:	e853 3f00 	ldrex	r3, [r3]
 80086c8:	623b      	str	r3, [r7, #32]
   return(result);
 80086ca:	6a3b      	ldr	r3, [r7, #32]
 80086cc:	f023 0301 	bic.w	r3, r3, #1
 80086d0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	3314      	adds	r3, #20
 80086da:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80086de:	633a      	str	r2, [r7, #48]	; 0x30
 80086e0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086e2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80086e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80086e6:	e841 2300 	strex	r3, r2, [r1]
 80086ea:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80086ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d1e3      	bne.n	80086ba <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	2220      	movs	r2, #32
 80086f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	2200      	movs	r2, #0
 80086fe:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	330c      	adds	r3, #12
 8008706:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008708:	693b      	ldr	r3, [r7, #16]
 800870a:	e853 3f00 	ldrex	r3, [r3]
 800870e:	60fb      	str	r3, [r7, #12]
   return(result);
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	f023 0310 	bic.w	r3, r3, #16
 8008716:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	330c      	adds	r3, #12
 8008720:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8008724:	61fa      	str	r2, [r7, #28]
 8008726:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008728:	69b9      	ldr	r1, [r7, #24]
 800872a:	69fa      	ldr	r2, [r7, #28]
 800872c:	e841 2300 	strex	r3, r2, [r1]
 8008730:	617b      	str	r3, [r7, #20]
   return(result);
 8008732:	697b      	ldr	r3, [r7, #20]
 8008734:	2b00      	cmp	r3, #0
 8008736:	d1e3      	bne.n	8008700 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008738:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800873c:	4619      	mov	r1, r3
 800873e:	6878      	ldr	r0, [r7, #4]
 8008740:	f000 f848 	bl	80087d4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008744:	e023      	b.n	800878e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008746:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800874a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800874e:	2b00      	cmp	r3, #0
 8008750:	d009      	beq.n	8008766 <HAL_UART_IRQHandler+0x4ea>
 8008752:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008756:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800875a:	2b00      	cmp	r3, #0
 800875c:	d003      	beq.n	8008766 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800875e:	6878      	ldr	r0, [r7, #4]
 8008760:	f000 f929 	bl	80089b6 <UART_Transmit_IT>
    return;
 8008764:	e014      	b.n	8008790 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008766:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800876a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800876e:	2b00      	cmp	r3, #0
 8008770:	d00e      	beq.n	8008790 <HAL_UART_IRQHandler+0x514>
 8008772:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008776:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800877a:	2b00      	cmp	r3, #0
 800877c:	d008      	beq.n	8008790 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800877e:	6878      	ldr	r0, [r7, #4]
 8008780:	f000 f969 	bl	8008a56 <UART_EndTransmit_IT>
    return;
 8008784:	e004      	b.n	8008790 <HAL_UART_IRQHandler+0x514>
    return;
 8008786:	bf00      	nop
 8008788:	e002      	b.n	8008790 <HAL_UART_IRQHandler+0x514>
      return;
 800878a:	bf00      	nop
 800878c:	e000      	b.n	8008790 <HAL_UART_IRQHandler+0x514>
      return;
 800878e:	bf00      	nop
  }
}
 8008790:	37e8      	adds	r7, #232	; 0xe8
 8008792:	46bd      	mov	sp, r7
 8008794:	bd80      	pop	{r7, pc}
 8008796:	bf00      	nop

08008798 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008798:	b480      	push	{r7}
 800879a:	b083      	sub	sp, #12
 800879c:	af00      	add	r7, sp, #0
 800879e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80087a0:	bf00      	nop
 80087a2:	370c      	adds	r7, #12
 80087a4:	46bd      	mov	sp, r7
 80087a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087aa:	4770      	bx	lr

080087ac <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80087ac:	b480      	push	{r7}
 80087ae:	b083      	sub	sp, #12
 80087b0:	af00      	add	r7, sp, #0
 80087b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80087b4:	bf00      	nop
 80087b6:	370c      	adds	r7, #12
 80087b8:	46bd      	mov	sp, r7
 80087ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087be:	4770      	bx	lr

080087c0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80087c0:	b480      	push	{r7}
 80087c2:	b083      	sub	sp, #12
 80087c4:	af00      	add	r7, sp, #0
 80087c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80087c8:	bf00      	nop
 80087ca:	370c      	adds	r7, #12
 80087cc:	46bd      	mov	sp, r7
 80087ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d2:	4770      	bx	lr

080087d4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80087d4:	b480      	push	{r7}
 80087d6:	b083      	sub	sp, #12
 80087d8:	af00      	add	r7, sp, #0
 80087da:	6078      	str	r0, [r7, #4]
 80087dc:	460b      	mov	r3, r1
 80087de:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80087e0:	bf00      	nop
 80087e2:	370c      	adds	r7, #12
 80087e4:	46bd      	mov	sp, r7
 80087e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ea:	4770      	bx	lr

080087ec <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80087ec:	b580      	push	{r7, lr}
 80087ee:	b090      	sub	sp, #64	; 0x40
 80087f0:	af00      	add	r7, sp, #0
 80087f2:	60f8      	str	r0, [r7, #12]
 80087f4:	60b9      	str	r1, [r7, #8]
 80087f6:	603b      	str	r3, [r7, #0]
 80087f8:	4613      	mov	r3, r2
 80087fa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80087fc:	e050      	b.n	80088a0 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80087fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008800:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008804:	d04c      	beq.n	80088a0 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8008806:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008808:	2b00      	cmp	r3, #0
 800880a:	d007      	beq.n	800881c <UART_WaitOnFlagUntilTimeout+0x30>
 800880c:	f7f9 fb00 	bl	8001e10 <HAL_GetTick>
 8008810:	4602      	mov	r2, r0
 8008812:	683b      	ldr	r3, [r7, #0]
 8008814:	1ad3      	subs	r3, r2, r3
 8008816:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008818:	429a      	cmp	r2, r3
 800881a:	d241      	bcs.n	80088a0 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	330c      	adds	r3, #12
 8008822:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008824:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008826:	e853 3f00 	ldrex	r3, [r3]
 800882a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800882c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800882e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008832:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	330c      	adds	r3, #12
 800883a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800883c:	637a      	str	r2, [r7, #52]	; 0x34
 800883e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008840:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008842:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008844:	e841 2300 	strex	r3, r2, [r1]
 8008848:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800884a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800884c:	2b00      	cmp	r3, #0
 800884e:	d1e5      	bne.n	800881c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	3314      	adds	r3, #20
 8008856:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008858:	697b      	ldr	r3, [r7, #20]
 800885a:	e853 3f00 	ldrex	r3, [r3]
 800885e:	613b      	str	r3, [r7, #16]
   return(result);
 8008860:	693b      	ldr	r3, [r7, #16]
 8008862:	f023 0301 	bic.w	r3, r3, #1
 8008866:	63bb      	str	r3, [r7, #56]	; 0x38
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	3314      	adds	r3, #20
 800886e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008870:	623a      	str	r2, [r7, #32]
 8008872:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008874:	69f9      	ldr	r1, [r7, #28]
 8008876:	6a3a      	ldr	r2, [r7, #32]
 8008878:	e841 2300 	strex	r3, r2, [r1]
 800887c:	61bb      	str	r3, [r7, #24]
   return(result);
 800887e:	69bb      	ldr	r3, [r7, #24]
 8008880:	2b00      	cmp	r3, #0
 8008882:	d1e5      	bne.n	8008850 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	2220      	movs	r2, #32
 8008888:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	2220      	movs	r2, #32
 8008890:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	2200      	movs	r2, #0
 8008898:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800889c:	2303      	movs	r3, #3
 800889e:	e00f      	b.n	80088c0 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	681a      	ldr	r2, [r3, #0]
 80088a6:	68bb      	ldr	r3, [r7, #8]
 80088a8:	4013      	ands	r3, r2
 80088aa:	68ba      	ldr	r2, [r7, #8]
 80088ac:	429a      	cmp	r2, r3
 80088ae:	bf0c      	ite	eq
 80088b0:	2301      	moveq	r3, #1
 80088b2:	2300      	movne	r3, #0
 80088b4:	b2db      	uxtb	r3, r3
 80088b6:	461a      	mov	r2, r3
 80088b8:	79fb      	ldrb	r3, [r7, #7]
 80088ba:	429a      	cmp	r2, r3
 80088bc:	d09f      	beq.n	80087fe <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80088be:	2300      	movs	r3, #0
}
 80088c0:	4618      	mov	r0, r3
 80088c2:	3740      	adds	r7, #64	; 0x40
 80088c4:	46bd      	mov	sp, r7
 80088c6:	bd80      	pop	{r7, pc}

080088c8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80088c8:	b480      	push	{r7}
 80088ca:	b095      	sub	sp, #84	; 0x54
 80088cc:	af00      	add	r7, sp, #0
 80088ce:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	330c      	adds	r3, #12
 80088d6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088da:	e853 3f00 	ldrex	r3, [r3]
 80088de:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80088e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088e2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80088e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	330c      	adds	r3, #12
 80088ee:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80088f0:	643a      	str	r2, [r7, #64]	; 0x40
 80088f2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088f4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80088f6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80088f8:	e841 2300 	strex	r3, r2, [r1]
 80088fc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80088fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008900:	2b00      	cmp	r3, #0
 8008902:	d1e5      	bne.n	80088d0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	3314      	adds	r3, #20
 800890a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800890c:	6a3b      	ldr	r3, [r7, #32]
 800890e:	e853 3f00 	ldrex	r3, [r3]
 8008912:	61fb      	str	r3, [r7, #28]
   return(result);
 8008914:	69fb      	ldr	r3, [r7, #28]
 8008916:	f023 0301 	bic.w	r3, r3, #1
 800891a:	64bb      	str	r3, [r7, #72]	; 0x48
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	3314      	adds	r3, #20
 8008922:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008924:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008926:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008928:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800892a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800892c:	e841 2300 	strex	r3, r2, [r1]
 8008930:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008934:	2b00      	cmp	r3, #0
 8008936:	d1e5      	bne.n	8008904 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800893c:	2b01      	cmp	r3, #1
 800893e:	d119      	bne.n	8008974 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	330c      	adds	r3, #12
 8008946:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	e853 3f00 	ldrex	r3, [r3]
 800894e:	60bb      	str	r3, [r7, #8]
   return(result);
 8008950:	68bb      	ldr	r3, [r7, #8]
 8008952:	f023 0310 	bic.w	r3, r3, #16
 8008956:	647b      	str	r3, [r7, #68]	; 0x44
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	330c      	adds	r3, #12
 800895e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008960:	61ba      	str	r2, [r7, #24]
 8008962:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008964:	6979      	ldr	r1, [r7, #20]
 8008966:	69ba      	ldr	r2, [r7, #24]
 8008968:	e841 2300 	strex	r3, r2, [r1]
 800896c:	613b      	str	r3, [r7, #16]
   return(result);
 800896e:	693b      	ldr	r3, [r7, #16]
 8008970:	2b00      	cmp	r3, #0
 8008972:	d1e5      	bne.n	8008940 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	2220      	movs	r2, #32
 8008978:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	2200      	movs	r2, #0
 8008980:	631a      	str	r2, [r3, #48]	; 0x30
}
 8008982:	bf00      	nop
 8008984:	3754      	adds	r7, #84	; 0x54
 8008986:	46bd      	mov	sp, r7
 8008988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800898c:	4770      	bx	lr

0800898e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800898e:	b580      	push	{r7, lr}
 8008990:	b084      	sub	sp, #16
 8008992:	af00      	add	r7, sp, #0
 8008994:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800899a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	2200      	movs	r2, #0
 80089a0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	2200      	movs	r2, #0
 80089a6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80089a8:	68f8      	ldr	r0, [r7, #12]
 80089aa:	f7ff ff09 	bl	80087c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80089ae:	bf00      	nop
 80089b0:	3710      	adds	r7, #16
 80089b2:	46bd      	mov	sp, r7
 80089b4:	bd80      	pop	{r7, pc}

080089b6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80089b6:	b480      	push	{r7}
 80089b8:	b085      	sub	sp, #20
 80089ba:	af00      	add	r7, sp, #0
 80089bc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80089c4:	b2db      	uxtb	r3, r3
 80089c6:	2b21      	cmp	r3, #33	; 0x21
 80089c8:	d13e      	bne.n	8008a48 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	689b      	ldr	r3, [r3, #8]
 80089ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80089d2:	d114      	bne.n	80089fe <UART_Transmit_IT+0x48>
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	691b      	ldr	r3, [r3, #16]
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d110      	bne.n	80089fe <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	6a1b      	ldr	r3, [r3, #32]
 80089e0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	881b      	ldrh	r3, [r3, #0]
 80089e6:	461a      	mov	r2, r3
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80089f0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	6a1b      	ldr	r3, [r3, #32]
 80089f6:	1c9a      	adds	r2, r3, #2
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	621a      	str	r2, [r3, #32]
 80089fc:	e008      	b.n	8008a10 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	6a1b      	ldr	r3, [r3, #32]
 8008a02:	1c59      	adds	r1, r3, #1
 8008a04:	687a      	ldr	r2, [r7, #4]
 8008a06:	6211      	str	r1, [r2, #32]
 8008a08:	781a      	ldrb	r2, [r3, #0]
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008a14:	b29b      	uxth	r3, r3
 8008a16:	3b01      	subs	r3, #1
 8008a18:	b29b      	uxth	r3, r3
 8008a1a:	687a      	ldr	r2, [r7, #4]
 8008a1c:	4619      	mov	r1, r3
 8008a1e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d10f      	bne.n	8008a44 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	68da      	ldr	r2, [r3, #12]
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008a32:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	68da      	ldr	r2, [r3, #12]
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008a42:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008a44:	2300      	movs	r3, #0
 8008a46:	e000      	b.n	8008a4a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008a48:	2302      	movs	r3, #2
  }
}
 8008a4a:	4618      	mov	r0, r3
 8008a4c:	3714      	adds	r7, #20
 8008a4e:	46bd      	mov	sp, r7
 8008a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a54:	4770      	bx	lr

08008a56 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008a56:	b580      	push	{r7, lr}
 8008a58:	b082      	sub	sp, #8
 8008a5a:	af00      	add	r7, sp, #0
 8008a5c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	68da      	ldr	r2, [r3, #12]
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008a6c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	2220      	movs	r2, #32
 8008a72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008a76:	6878      	ldr	r0, [r7, #4]
 8008a78:	f7ff fe8e 	bl	8008798 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008a7c:	2300      	movs	r3, #0
}
 8008a7e:	4618      	mov	r0, r3
 8008a80:	3708      	adds	r7, #8
 8008a82:	46bd      	mov	sp, r7
 8008a84:	bd80      	pop	{r7, pc}

08008a86 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008a86:	b580      	push	{r7, lr}
 8008a88:	b08c      	sub	sp, #48	; 0x30
 8008a8a:	af00      	add	r7, sp, #0
 8008a8c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008a94:	b2db      	uxtb	r3, r3
 8008a96:	2b22      	cmp	r3, #34	; 0x22
 8008a98:	f040 80ab 	bne.w	8008bf2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	689b      	ldr	r3, [r3, #8]
 8008aa0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008aa4:	d117      	bne.n	8008ad6 <UART_Receive_IT+0x50>
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	691b      	ldr	r3, [r3, #16]
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d113      	bne.n	8008ad6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008aae:	2300      	movs	r3, #0
 8008ab0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ab6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	685b      	ldr	r3, [r3, #4]
 8008abe:	b29b      	uxth	r3, r3
 8008ac0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ac4:	b29a      	uxth	r2, r3
 8008ac6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ac8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ace:	1c9a      	adds	r2, r3, #2
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	629a      	str	r2, [r3, #40]	; 0x28
 8008ad4:	e026      	b.n	8008b24 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ada:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8008adc:	2300      	movs	r3, #0
 8008ade:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	689b      	ldr	r3, [r3, #8]
 8008ae4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008ae8:	d007      	beq.n	8008afa <UART_Receive_IT+0x74>
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	689b      	ldr	r3, [r3, #8]
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d10a      	bne.n	8008b08 <UART_Receive_IT+0x82>
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	691b      	ldr	r3, [r3, #16]
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d106      	bne.n	8008b08 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	685b      	ldr	r3, [r3, #4]
 8008b00:	b2da      	uxtb	r2, r3
 8008b02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b04:	701a      	strb	r2, [r3, #0]
 8008b06:	e008      	b.n	8008b1a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	685b      	ldr	r3, [r3, #4]
 8008b0e:	b2db      	uxtb	r3, r3
 8008b10:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008b14:	b2da      	uxtb	r2, r3
 8008b16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b18:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b1e:	1c5a      	adds	r2, r3, #1
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008b28:	b29b      	uxth	r3, r3
 8008b2a:	3b01      	subs	r3, #1
 8008b2c:	b29b      	uxth	r3, r3
 8008b2e:	687a      	ldr	r2, [r7, #4]
 8008b30:	4619      	mov	r1, r3
 8008b32:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d15a      	bne.n	8008bee <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	68da      	ldr	r2, [r3, #12]
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	f022 0220 	bic.w	r2, r2, #32
 8008b46:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	68da      	ldr	r2, [r3, #12]
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008b56:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	695a      	ldr	r2, [r3, #20]
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	f022 0201 	bic.w	r2, r2, #1
 8008b66:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	2220      	movs	r2, #32
 8008b6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b74:	2b01      	cmp	r3, #1
 8008b76:	d135      	bne.n	8008be4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	2200      	movs	r2, #0
 8008b7c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	330c      	adds	r3, #12
 8008b84:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b86:	697b      	ldr	r3, [r7, #20]
 8008b88:	e853 3f00 	ldrex	r3, [r3]
 8008b8c:	613b      	str	r3, [r7, #16]
   return(result);
 8008b8e:	693b      	ldr	r3, [r7, #16]
 8008b90:	f023 0310 	bic.w	r3, r3, #16
 8008b94:	627b      	str	r3, [r7, #36]	; 0x24
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	330c      	adds	r3, #12
 8008b9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b9e:	623a      	str	r2, [r7, #32]
 8008ba0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ba2:	69f9      	ldr	r1, [r7, #28]
 8008ba4:	6a3a      	ldr	r2, [r7, #32]
 8008ba6:	e841 2300 	strex	r3, r2, [r1]
 8008baa:	61bb      	str	r3, [r7, #24]
   return(result);
 8008bac:	69bb      	ldr	r3, [r7, #24]
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d1e5      	bne.n	8008b7e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	f003 0310 	and.w	r3, r3, #16
 8008bbc:	2b10      	cmp	r3, #16
 8008bbe:	d10a      	bne.n	8008bd6 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008bc0:	2300      	movs	r3, #0
 8008bc2:	60fb      	str	r3, [r7, #12]
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	60fb      	str	r3, [r7, #12]
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	685b      	ldr	r3, [r3, #4]
 8008bd2:	60fb      	str	r3, [r7, #12]
 8008bd4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008bda:	4619      	mov	r1, r3
 8008bdc:	6878      	ldr	r0, [r7, #4]
 8008bde:	f7ff fdf9 	bl	80087d4 <HAL_UARTEx_RxEventCallback>
 8008be2:	e002      	b.n	8008bea <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008be4:	6878      	ldr	r0, [r7, #4]
 8008be6:	f7ff fde1 	bl	80087ac <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008bea:	2300      	movs	r3, #0
 8008bec:	e002      	b.n	8008bf4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8008bee:	2300      	movs	r3, #0
 8008bf0:	e000      	b.n	8008bf4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8008bf2:	2302      	movs	r3, #2
  }
}
 8008bf4:	4618      	mov	r0, r3
 8008bf6:	3730      	adds	r7, #48	; 0x30
 8008bf8:	46bd      	mov	sp, r7
 8008bfa:	bd80      	pop	{r7, pc}

08008bfc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008bfc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008c00:	b0c0      	sub	sp, #256	; 0x100
 8008c02:	af00      	add	r7, sp, #0
 8008c04:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008c08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	691b      	ldr	r3, [r3, #16]
 8008c10:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008c14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c18:	68d9      	ldr	r1, [r3, #12]
 8008c1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c1e:	681a      	ldr	r2, [r3, #0]
 8008c20:	ea40 0301 	orr.w	r3, r0, r1
 8008c24:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008c26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c2a:	689a      	ldr	r2, [r3, #8]
 8008c2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c30:	691b      	ldr	r3, [r3, #16]
 8008c32:	431a      	orrs	r2, r3
 8008c34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c38:	695b      	ldr	r3, [r3, #20]
 8008c3a:	431a      	orrs	r2, r3
 8008c3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c40:	69db      	ldr	r3, [r3, #28]
 8008c42:	4313      	orrs	r3, r2
 8008c44:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008c48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	68db      	ldr	r3, [r3, #12]
 8008c50:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008c54:	f021 010c 	bic.w	r1, r1, #12
 8008c58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c5c:	681a      	ldr	r2, [r3, #0]
 8008c5e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008c62:	430b      	orrs	r3, r1
 8008c64:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008c66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	695b      	ldr	r3, [r3, #20]
 8008c6e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008c72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c76:	6999      	ldr	r1, [r3, #24]
 8008c78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c7c:	681a      	ldr	r2, [r3, #0]
 8008c7e:	ea40 0301 	orr.w	r3, r0, r1
 8008c82:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008c84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c88:	681a      	ldr	r2, [r3, #0]
 8008c8a:	4b8f      	ldr	r3, [pc, #572]	; (8008ec8 <UART_SetConfig+0x2cc>)
 8008c8c:	429a      	cmp	r2, r3
 8008c8e:	d005      	beq.n	8008c9c <UART_SetConfig+0xa0>
 8008c90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c94:	681a      	ldr	r2, [r3, #0]
 8008c96:	4b8d      	ldr	r3, [pc, #564]	; (8008ecc <UART_SetConfig+0x2d0>)
 8008c98:	429a      	cmp	r2, r3
 8008c9a:	d104      	bne.n	8008ca6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008c9c:	f7fd f84c 	bl	8005d38 <HAL_RCC_GetPCLK2Freq>
 8008ca0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8008ca4:	e003      	b.n	8008cae <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008ca6:	f7fd f833 	bl	8005d10 <HAL_RCC_GetPCLK1Freq>
 8008caa:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008cae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008cb2:	69db      	ldr	r3, [r3, #28]
 8008cb4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008cb8:	f040 810c 	bne.w	8008ed4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008cbc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008cc0:	2200      	movs	r2, #0
 8008cc2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008cc6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8008cca:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8008cce:	4622      	mov	r2, r4
 8008cd0:	462b      	mov	r3, r5
 8008cd2:	1891      	adds	r1, r2, r2
 8008cd4:	65b9      	str	r1, [r7, #88]	; 0x58
 8008cd6:	415b      	adcs	r3, r3
 8008cd8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008cda:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8008cde:	4621      	mov	r1, r4
 8008ce0:	eb12 0801 	adds.w	r8, r2, r1
 8008ce4:	4629      	mov	r1, r5
 8008ce6:	eb43 0901 	adc.w	r9, r3, r1
 8008cea:	f04f 0200 	mov.w	r2, #0
 8008cee:	f04f 0300 	mov.w	r3, #0
 8008cf2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008cf6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008cfa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008cfe:	4690      	mov	r8, r2
 8008d00:	4699      	mov	r9, r3
 8008d02:	4623      	mov	r3, r4
 8008d04:	eb18 0303 	adds.w	r3, r8, r3
 8008d08:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008d0c:	462b      	mov	r3, r5
 8008d0e:	eb49 0303 	adc.w	r3, r9, r3
 8008d12:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008d16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d1a:	685b      	ldr	r3, [r3, #4]
 8008d1c:	2200      	movs	r2, #0
 8008d1e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008d22:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8008d26:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8008d2a:	460b      	mov	r3, r1
 8008d2c:	18db      	adds	r3, r3, r3
 8008d2e:	653b      	str	r3, [r7, #80]	; 0x50
 8008d30:	4613      	mov	r3, r2
 8008d32:	eb42 0303 	adc.w	r3, r2, r3
 8008d36:	657b      	str	r3, [r7, #84]	; 0x54
 8008d38:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008d3c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8008d40:	f7f7 fa96 	bl	8000270 <__aeabi_uldivmod>
 8008d44:	4602      	mov	r2, r0
 8008d46:	460b      	mov	r3, r1
 8008d48:	4b61      	ldr	r3, [pc, #388]	; (8008ed0 <UART_SetConfig+0x2d4>)
 8008d4a:	fba3 2302 	umull	r2, r3, r3, r2
 8008d4e:	095b      	lsrs	r3, r3, #5
 8008d50:	011c      	lsls	r4, r3, #4
 8008d52:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008d56:	2200      	movs	r2, #0
 8008d58:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008d5c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8008d60:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8008d64:	4642      	mov	r2, r8
 8008d66:	464b      	mov	r3, r9
 8008d68:	1891      	adds	r1, r2, r2
 8008d6a:	64b9      	str	r1, [r7, #72]	; 0x48
 8008d6c:	415b      	adcs	r3, r3
 8008d6e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008d70:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008d74:	4641      	mov	r1, r8
 8008d76:	eb12 0a01 	adds.w	sl, r2, r1
 8008d7a:	4649      	mov	r1, r9
 8008d7c:	eb43 0b01 	adc.w	fp, r3, r1
 8008d80:	f04f 0200 	mov.w	r2, #0
 8008d84:	f04f 0300 	mov.w	r3, #0
 8008d88:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008d8c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008d90:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008d94:	4692      	mov	sl, r2
 8008d96:	469b      	mov	fp, r3
 8008d98:	4643      	mov	r3, r8
 8008d9a:	eb1a 0303 	adds.w	r3, sl, r3
 8008d9e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008da2:	464b      	mov	r3, r9
 8008da4:	eb4b 0303 	adc.w	r3, fp, r3
 8008da8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008dac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008db0:	685b      	ldr	r3, [r3, #4]
 8008db2:	2200      	movs	r2, #0
 8008db4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008db8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8008dbc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8008dc0:	460b      	mov	r3, r1
 8008dc2:	18db      	adds	r3, r3, r3
 8008dc4:	643b      	str	r3, [r7, #64]	; 0x40
 8008dc6:	4613      	mov	r3, r2
 8008dc8:	eb42 0303 	adc.w	r3, r2, r3
 8008dcc:	647b      	str	r3, [r7, #68]	; 0x44
 8008dce:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008dd2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8008dd6:	f7f7 fa4b 	bl	8000270 <__aeabi_uldivmod>
 8008dda:	4602      	mov	r2, r0
 8008ddc:	460b      	mov	r3, r1
 8008dde:	4611      	mov	r1, r2
 8008de0:	4b3b      	ldr	r3, [pc, #236]	; (8008ed0 <UART_SetConfig+0x2d4>)
 8008de2:	fba3 2301 	umull	r2, r3, r3, r1
 8008de6:	095b      	lsrs	r3, r3, #5
 8008de8:	2264      	movs	r2, #100	; 0x64
 8008dea:	fb02 f303 	mul.w	r3, r2, r3
 8008dee:	1acb      	subs	r3, r1, r3
 8008df0:	00db      	lsls	r3, r3, #3
 8008df2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8008df6:	4b36      	ldr	r3, [pc, #216]	; (8008ed0 <UART_SetConfig+0x2d4>)
 8008df8:	fba3 2302 	umull	r2, r3, r3, r2
 8008dfc:	095b      	lsrs	r3, r3, #5
 8008dfe:	005b      	lsls	r3, r3, #1
 8008e00:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008e04:	441c      	add	r4, r3
 8008e06:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008e0a:	2200      	movs	r2, #0
 8008e0c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008e10:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8008e14:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8008e18:	4642      	mov	r2, r8
 8008e1a:	464b      	mov	r3, r9
 8008e1c:	1891      	adds	r1, r2, r2
 8008e1e:	63b9      	str	r1, [r7, #56]	; 0x38
 8008e20:	415b      	adcs	r3, r3
 8008e22:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008e24:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008e28:	4641      	mov	r1, r8
 8008e2a:	1851      	adds	r1, r2, r1
 8008e2c:	6339      	str	r1, [r7, #48]	; 0x30
 8008e2e:	4649      	mov	r1, r9
 8008e30:	414b      	adcs	r3, r1
 8008e32:	637b      	str	r3, [r7, #52]	; 0x34
 8008e34:	f04f 0200 	mov.w	r2, #0
 8008e38:	f04f 0300 	mov.w	r3, #0
 8008e3c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8008e40:	4659      	mov	r1, fp
 8008e42:	00cb      	lsls	r3, r1, #3
 8008e44:	4651      	mov	r1, sl
 8008e46:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008e4a:	4651      	mov	r1, sl
 8008e4c:	00ca      	lsls	r2, r1, #3
 8008e4e:	4610      	mov	r0, r2
 8008e50:	4619      	mov	r1, r3
 8008e52:	4603      	mov	r3, r0
 8008e54:	4642      	mov	r2, r8
 8008e56:	189b      	adds	r3, r3, r2
 8008e58:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008e5c:	464b      	mov	r3, r9
 8008e5e:	460a      	mov	r2, r1
 8008e60:	eb42 0303 	adc.w	r3, r2, r3
 8008e64:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008e68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e6c:	685b      	ldr	r3, [r3, #4]
 8008e6e:	2200      	movs	r2, #0
 8008e70:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008e74:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8008e78:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8008e7c:	460b      	mov	r3, r1
 8008e7e:	18db      	adds	r3, r3, r3
 8008e80:	62bb      	str	r3, [r7, #40]	; 0x28
 8008e82:	4613      	mov	r3, r2
 8008e84:	eb42 0303 	adc.w	r3, r2, r3
 8008e88:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008e8a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008e8e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8008e92:	f7f7 f9ed 	bl	8000270 <__aeabi_uldivmod>
 8008e96:	4602      	mov	r2, r0
 8008e98:	460b      	mov	r3, r1
 8008e9a:	4b0d      	ldr	r3, [pc, #52]	; (8008ed0 <UART_SetConfig+0x2d4>)
 8008e9c:	fba3 1302 	umull	r1, r3, r3, r2
 8008ea0:	095b      	lsrs	r3, r3, #5
 8008ea2:	2164      	movs	r1, #100	; 0x64
 8008ea4:	fb01 f303 	mul.w	r3, r1, r3
 8008ea8:	1ad3      	subs	r3, r2, r3
 8008eaa:	00db      	lsls	r3, r3, #3
 8008eac:	3332      	adds	r3, #50	; 0x32
 8008eae:	4a08      	ldr	r2, [pc, #32]	; (8008ed0 <UART_SetConfig+0x2d4>)
 8008eb0:	fba2 2303 	umull	r2, r3, r2, r3
 8008eb4:	095b      	lsrs	r3, r3, #5
 8008eb6:	f003 0207 	and.w	r2, r3, #7
 8008eba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	4422      	add	r2, r4
 8008ec2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008ec4:	e105      	b.n	80090d2 <UART_SetConfig+0x4d6>
 8008ec6:	bf00      	nop
 8008ec8:	40011000 	.word	0x40011000
 8008ecc:	40011400 	.word	0x40011400
 8008ed0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008ed4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008ed8:	2200      	movs	r2, #0
 8008eda:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008ede:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8008ee2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8008ee6:	4642      	mov	r2, r8
 8008ee8:	464b      	mov	r3, r9
 8008eea:	1891      	adds	r1, r2, r2
 8008eec:	6239      	str	r1, [r7, #32]
 8008eee:	415b      	adcs	r3, r3
 8008ef0:	627b      	str	r3, [r7, #36]	; 0x24
 8008ef2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008ef6:	4641      	mov	r1, r8
 8008ef8:	1854      	adds	r4, r2, r1
 8008efa:	4649      	mov	r1, r9
 8008efc:	eb43 0501 	adc.w	r5, r3, r1
 8008f00:	f04f 0200 	mov.w	r2, #0
 8008f04:	f04f 0300 	mov.w	r3, #0
 8008f08:	00eb      	lsls	r3, r5, #3
 8008f0a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008f0e:	00e2      	lsls	r2, r4, #3
 8008f10:	4614      	mov	r4, r2
 8008f12:	461d      	mov	r5, r3
 8008f14:	4643      	mov	r3, r8
 8008f16:	18e3      	adds	r3, r4, r3
 8008f18:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008f1c:	464b      	mov	r3, r9
 8008f1e:	eb45 0303 	adc.w	r3, r5, r3
 8008f22:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008f26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008f2a:	685b      	ldr	r3, [r3, #4]
 8008f2c:	2200      	movs	r2, #0
 8008f2e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008f32:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008f36:	f04f 0200 	mov.w	r2, #0
 8008f3a:	f04f 0300 	mov.w	r3, #0
 8008f3e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8008f42:	4629      	mov	r1, r5
 8008f44:	008b      	lsls	r3, r1, #2
 8008f46:	4621      	mov	r1, r4
 8008f48:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008f4c:	4621      	mov	r1, r4
 8008f4e:	008a      	lsls	r2, r1, #2
 8008f50:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8008f54:	f7f7 f98c 	bl	8000270 <__aeabi_uldivmod>
 8008f58:	4602      	mov	r2, r0
 8008f5a:	460b      	mov	r3, r1
 8008f5c:	4b60      	ldr	r3, [pc, #384]	; (80090e0 <UART_SetConfig+0x4e4>)
 8008f5e:	fba3 2302 	umull	r2, r3, r3, r2
 8008f62:	095b      	lsrs	r3, r3, #5
 8008f64:	011c      	lsls	r4, r3, #4
 8008f66:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008f6a:	2200      	movs	r2, #0
 8008f6c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008f70:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008f74:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8008f78:	4642      	mov	r2, r8
 8008f7a:	464b      	mov	r3, r9
 8008f7c:	1891      	adds	r1, r2, r2
 8008f7e:	61b9      	str	r1, [r7, #24]
 8008f80:	415b      	adcs	r3, r3
 8008f82:	61fb      	str	r3, [r7, #28]
 8008f84:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008f88:	4641      	mov	r1, r8
 8008f8a:	1851      	adds	r1, r2, r1
 8008f8c:	6139      	str	r1, [r7, #16]
 8008f8e:	4649      	mov	r1, r9
 8008f90:	414b      	adcs	r3, r1
 8008f92:	617b      	str	r3, [r7, #20]
 8008f94:	f04f 0200 	mov.w	r2, #0
 8008f98:	f04f 0300 	mov.w	r3, #0
 8008f9c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008fa0:	4659      	mov	r1, fp
 8008fa2:	00cb      	lsls	r3, r1, #3
 8008fa4:	4651      	mov	r1, sl
 8008fa6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008faa:	4651      	mov	r1, sl
 8008fac:	00ca      	lsls	r2, r1, #3
 8008fae:	4610      	mov	r0, r2
 8008fb0:	4619      	mov	r1, r3
 8008fb2:	4603      	mov	r3, r0
 8008fb4:	4642      	mov	r2, r8
 8008fb6:	189b      	adds	r3, r3, r2
 8008fb8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008fbc:	464b      	mov	r3, r9
 8008fbe:	460a      	mov	r2, r1
 8008fc0:	eb42 0303 	adc.w	r3, r2, r3
 8008fc4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008fc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008fcc:	685b      	ldr	r3, [r3, #4]
 8008fce:	2200      	movs	r2, #0
 8008fd0:	67bb      	str	r3, [r7, #120]	; 0x78
 8008fd2:	67fa      	str	r2, [r7, #124]	; 0x7c
 8008fd4:	f04f 0200 	mov.w	r2, #0
 8008fd8:	f04f 0300 	mov.w	r3, #0
 8008fdc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8008fe0:	4649      	mov	r1, r9
 8008fe2:	008b      	lsls	r3, r1, #2
 8008fe4:	4641      	mov	r1, r8
 8008fe6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008fea:	4641      	mov	r1, r8
 8008fec:	008a      	lsls	r2, r1, #2
 8008fee:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8008ff2:	f7f7 f93d 	bl	8000270 <__aeabi_uldivmod>
 8008ff6:	4602      	mov	r2, r0
 8008ff8:	460b      	mov	r3, r1
 8008ffa:	4b39      	ldr	r3, [pc, #228]	; (80090e0 <UART_SetConfig+0x4e4>)
 8008ffc:	fba3 1302 	umull	r1, r3, r3, r2
 8009000:	095b      	lsrs	r3, r3, #5
 8009002:	2164      	movs	r1, #100	; 0x64
 8009004:	fb01 f303 	mul.w	r3, r1, r3
 8009008:	1ad3      	subs	r3, r2, r3
 800900a:	011b      	lsls	r3, r3, #4
 800900c:	3332      	adds	r3, #50	; 0x32
 800900e:	4a34      	ldr	r2, [pc, #208]	; (80090e0 <UART_SetConfig+0x4e4>)
 8009010:	fba2 2303 	umull	r2, r3, r2, r3
 8009014:	095b      	lsrs	r3, r3, #5
 8009016:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800901a:	441c      	add	r4, r3
 800901c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009020:	2200      	movs	r2, #0
 8009022:	673b      	str	r3, [r7, #112]	; 0x70
 8009024:	677a      	str	r2, [r7, #116]	; 0x74
 8009026:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800902a:	4642      	mov	r2, r8
 800902c:	464b      	mov	r3, r9
 800902e:	1891      	adds	r1, r2, r2
 8009030:	60b9      	str	r1, [r7, #8]
 8009032:	415b      	adcs	r3, r3
 8009034:	60fb      	str	r3, [r7, #12]
 8009036:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800903a:	4641      	mov	r1, r8
 800903c:	1851      	adds	r1, r2, r1
 800903e:	6039      	str	r1, [r7, #0]
 8009040:	4649      	mov	r1, r9
 8009042:	414b      	adcs	r3, r1
 8009044:	607b      	str	r3, [r7, #4]
 8009046:	f04f 0200 	mov.w	r2, #0
 800904a:	f04f 0300 	mov.w	r3, #0
 800904e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8009052:	4659      	mov	r1, fp
 8009054:	00cb      	lsls	r3, r1, #3
 8009056:	4651      	mov	r1, sl
 8009058:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800905c:	4651      	mov	r1, sl
 800905e:	00ca      	lsls	r2, r1, #3
 8009060:	4610      	mov	r0, r2
 8009062:	4619      	mov	r1, r3
 8009064:	4603      	mov	r3, r0
 8009066:	4642      	mov	r2, r8
 8009068:	189b      	adds	r3, r3, r2
 800906a:	66bb      	str	r3, [r7, #104]	; 0x68
 800906c:	464b      	mov	r3, r9
 800906e:	460a      	mov	r2, r1
 8009070:	eb42 0303 	adc.w	r3, r2, r3
 8009074:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009076:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800907a:	685b      	ldr	r3, [r3, #4]
 800907c:	2200      	movs	r2, #0
 800907e:	663b      	str	r3, [r7, #96]	; 0x60
 8009080:	667a      	str	r2, [r7, #100]	; 0x64
 8009082:	f04f 0200 	mov.w	r2, #0
 8009086:	f04f 0300 	mov.w	r3, #0
 800908a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800908e:	4649      	mov	r1, r9
 8009090:	008b      	lsls	r3, r1, #2
 8009092:	4641      	mov	r1, r8
 8009094:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009098:	4641      	mov	r1, r8
 800909a:	008a      	lsls	r2, r1, #2
 800909c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80090a0:	f7f7 f8e6 	bl	8000270 <__aeabi_uldivmod>
 80090a4:	4602      	mov	r2, r0
 80090a6:	460b      	mov	r3, r1
 80090a8:	4b0d      	ldr	r3, [pc, #52]	; (80090e0 <UART_SetConfig+0x4e4>)
 80090aa:	fba3 1302 	umull	r1, r3, r3, r2
 80090ae:	095b      	lsrs	r3, r3, #5
 80090b0:	2164      	movs	r1, #100	; 0x64
 80090b2:	fb01 f303 	mul.w	r3, r1, r3
 80090b6:	1ad3      	subs	r3, r2, r3
 80090b8:	011b      	lsls	r3, r3, #4
 80090ba:	3332      	adds	r3, #50	; 0x32
 80090bc:	4a08      	ldr	r2, [pc, #32]	; (80090e0 <UART_SetConfig+0x4e4>)
 80090be:	fba2 2303 	umull	r2, r3, r2, r3
 80090c2:	095b      	lsrs	r3, r3, #5
 80090c4:	f003 020f 	and.w	r2, r3, #15
 80090c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	4422      	add	r2, r4
 80090d0:	609a      	str	r2, [r3, #8]
}
 80090d2:	bf00      	nop
 80090d4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80090d8:	46bd      	mov	sp, r7
 80090da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80090de:	bf00      	nop
 80090e0:	51eb851f 	.word	0x51eb851f

080090e4 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 80090e4:	b084      	sub	sp, #16
 80090e6:	b480      	push	{r7}
 80090e8:	b085      	sub	sp, #20
 80090ea:	af00      	add	r7, sp, #0
 80090ec:	6078      	str	r0, [r7, #4]
 80090ee:	f107 001c 	add.w	r0, r7, #28
 80090f2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 80090f6:	2300      	movs	r3, #0
 80090f8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 80090fa:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 80090fc:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 80090fe:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8009100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8009102:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8009104:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8009106:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8009108:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800910a:	431a      	orrs	r2, r3
             Init.ClockDiv
 800910c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800910e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8009110:	68fa      	ldr	r2, [r7, #12]
 8009112:	4313      	orrs	r3, r2
 8009114:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	685b      	ldr	r3, [r3, #4]
 800911a:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800911e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009122:	68fa      	ldr	r2, [r7, #12]
 8009124:	431a      	orrs	r2, r3
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800912a:	2300      	movs	r3, #0
}
 800912c:	4618      	mov	r0, r3
 800912e:	3714      	adds	r7, #20
 8009130:	46bd      	mov	sp, r7
 8009132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009136:	b004      	add	sp, #16
 8009138:	4770      	bx	lr

0800913a <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800913a:	b480      	push	{r7}
 800913c:	b083      	sub	sp, #12
 800913e:	af00      	add	r7, sp, #0
 8009140:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8009148:	4618      	mov	r0, r3
 800914a:	370c      	adds	r7, #12
 800914c:	46bd      	mov	sp, r7
 800914e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009152:	4770      	bx	lr

08009154 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8009154:	b480      	push	{r7}
 8009156:	b083      	sub	sp, #12
 8009158:	af00      	add	r7, sp, #0
 800915a:	6078      	str	r0, [r7, #4]
 800915c:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800915e:	683b      	ldr	r3, [r7, #0]
 8009160:	681a      	ldr	r2, [r3, #0]
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009168:	2300      	movs	r3, #0
}
 800916a:	4618      	mov	r0, r3
 800916c:	370c      	adds	r7, #12
 800916e:	46bd      	mov	sp, r7
 8009170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009174:	4770      	bx	lr

08009176 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8009176:	b480      	push	{r7}
 8009178:	b083      	sub	sp, #12
 800917a:	af00      	add	r7, sp, #0
 800917c:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	2203      	movs	r2, #3
 8009182:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8009184:	2300      	movs	r3, #0
}
 8009186:	4618      	mov	r0, r3
 8009188:	370c      	adds	r7, #12
 800918a:	46bd      	mov	sp, r7
 800918c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009190:	4770      	bx	lr

08009192 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8009192:	b480      	push	{r7}
 8009194:	b083      	sub	sp, #12
 8009196:	af00      	add	r7, sp, #0
 8009198:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	f003 0303 	and.w	r3, r3, #3
}
 80091a2:	4618      	mov	r0, r3
 80091a4:	370c      	adds	r7, #12
 80091a6:	46bd      	mov	sp, r7
 80091a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ac:	4770      	bx	lr

080091ae <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 80091ae:	b480      	push	{r7}
 80091b0:	b085      	sub	sp, #20
 80091b2:	af00      	add	r7, sp, #0
 80091b4:	6078      	str	r0, [r7, #4]
 80091b6:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80091b8:	2300      	movs	r3, #0
 80091ba:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 80091bc:	683b      	ldr	r3, [r7, #0]
 80091be:	681a      	ldr	r2, [r3, #0]
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80091c4:	683b      	ldr	r3, [r7, #0]
 80091c6:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 80091c8:	683b      	ldr	r3, [r7, #0]
 80091ca:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80091cc:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 80091ce:	683b      	ldr	r3, [r7, #0]
 80091d0:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 80091d2:	431a      	orrs	r2, r3
                       Command->CPSM);
 80091d4:	683b      	ldr	r3, [r7, #0]
 80091d6:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 80091d8:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80091da:	68fa      	ldr	r2, [r7, #12]
 80091dc:	4313      	orrs	r3, r2
 80091de:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	68db      	ldr	r3, [r3, #12]
 80091e4:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80091e8:	f023 030f 	bic.w	r3, r3, #15
 80091ec:	68fa      	ldr	r2, [r7, #12]
 80091ee:	431a      	orrs	r2, r3
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 80091f4:	2300      	movs	r3, #0
}
 80091f6:	4618      	mov	r0, r3
 80091f8:	3714      	adds	r7, #20
 80091fa:	46bd      	mov	sp, r7
 80091fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009200:	4770      	bx	lr

08009202 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8009202:	b480      	push	{r7}
 8009204:	b083      	sub	sp, #12
 8009206:	af00      	add	r7, sp, #0
 8009208:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	691b      	ldr	r3, [r3, #16]
 800920e:	b2db      	uxtb	r3, r3
}
 8009210:	4618      	mov	r0, r3
 8009212:	370c      	adds	r7, #12
 8009214:	46bd      	mov	sp, r7
 8009216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800921a:	4770      	bx	lr

0800921c <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800921c:	b480      	push	{r7}
 800921e:	b085      	sub	sp, #20
 8009220:	af00      	add	r7, sp, #0
 8009222:	6078      	str	r0, [r7, #4]
 8009224:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	3314      	adds	r3, #20
 800922a:	461a      	mov	r2, r3
 800922c:	683b      	ldr	r3, [r7, #0]
 800922e:	4413      	add	r3, r2
 8009230:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	681b      	ldr	r3, [r3, #0]
}  
 8009236:	4618      	mov	r0, r3
 8009238:	3714      	adds	r7, #20
 800923a:	46bd      	mov	sp, r7
 800923c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009240:	4770      	bx	lr

08009242 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8009242:	b480      	push	{r7}
 8009244:	b085      	sub	sp, #20
 8009246:	af00      	add	r7, sp, #0
 8009248:	6078      	str	r0, [r7, #4]
 800924a:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800924c:	2300      	movs	r3, #0
 800924e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8009250:	683b      	ldr	r3, [r7, #0]
 8009252:	681a      	ldr	r2, [r3, #0]
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8009258:	683b      	ldr	r3, [r7, #0]
 800925a:	685a      	ldr	r2, [r3, #4]
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8009260:	683b      	ldr	r3, [r7, #0]
 8009262:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8009264:	683b      	ldr	r3, [r7, #0]
 8009266:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8009268:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800926a:	683b      	ldr	r3, [r7, #0]
 800926c:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800926e:	431a      	orrs	r2, r3
                       Data->DPSM);
 8009270:	683b      	ldr	r3, [r7, #0]
 8009272:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8009274:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8009276:	68fa      	ldr	r2, [r7, #12]
 8009278:	4313      	orrs	r3, r2
 800927a:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009280:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	431a      	orrs	r2, r3
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800928c:	2300      	movs	r3, #0

}
 800928e:	4618      	mov	r0, r3
 8009290:	3714      	adds	r7, #20
 8009292:	46bd      	mov	sp, r7
 8009294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009298:	4770      	bx	lr

0800929a <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800929a:	b580      	push	{r7, lr}
 800929c:	b088      	sub	sp, #32
 800929e:	af00      	add	r7, sp, #0
 80092a0:	6078      	str	r0, [r7, #4]
 80092a2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80092a4:	683b      	ldr	r3, [r7, #0]
 80092a6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80092a8:	2310      	movs	r3, #16
 80092aa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80092ac:	2340      	movs	r3, #64	; 0x40
 80092ae:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80092b0:	2300      	movs	r3, #0
 80092b2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80092b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80092b8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80092ba:	f107 0308 	add.w	r3, r7, #8
 80092be:	4619      	mov	r1, r3
 80092c0:	6878      	ldr	r0, [r7, #4]
 80092c2:	f7ff ff74 	bl	80091ae <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 80092c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80092ca:	2110      	movs	r1, #16
 80092cc:	6878      	ldr	r0, [r7, #4]
 80092ce:	f000 f9d7 	bl	8009680 <SDMMC_GetCmdResp1>
 80092d2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80092d4:	69fb      	ldr	r3, [r7, #28]
}
 80092d6:	4618      	mov	r0, r3
 80092d8:	3720      	adds	r7, #32
 80092da:	46bd      	mov	sp, r7
 80092dc:	bd80      	pop	{r7, pc}

080092de <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 80092de:	b580      	push	{r7, lr}
 80092e0:	b088      	sub	sp, #32
 80092e2:	af00      	add	r7, sp, #0
 80092e4:	6078      	str	r0, [r7, #4]
 80092e6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80092e8:	683b      	ldr	r3, [r7, #0]
 80092ea:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 80092ec:	2311      	movs	r3, #17
 80092ee:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80092f0:	2340      	movs	r3, #64	; 0x40
 80092f2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80092f4:	2300      	movs	r3, #0
 80092f6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80092f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80092fc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80092fe:	f107 0308 	add.w	r3, r7, #8
 8009302:	4619      	mov	r1, r3
 8009304:	6878      	ldr	r0, [r7, #4]
 8009306:	f7ff ff52 	bl	80091ae <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800930a:	f241 3288 	movw	r2, #5000	; 0x1388
 800930e:	2111      	movs	r1, #17
 8009310:	6878      	ldr	r0, [r7, #4]
 8009312:	f000 f9b5 	bl	8009680 <SDMMC_GetCmdResp1>
 8009316:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009318:	69fb      	ldr	r3, [r7, #28]
}
 800931a:	4618      	mov	r0, r3
 800931c:	3720      	adds	r7, #32
 800931e:	46bd      	mov	sp, r7
 8009320:	bd80      	pop	{r7, pc}

08009322 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8009322:	b580      	push	{r7, lr}
 8009324:	b088      	sub	sp, #32
 8009326:	af00      	add	r7, sp, #0
 8009328:	6078      	str	r0, [r7, #4]
 800932a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800932c:	683b      	ldr	r3, [r7, #0]
 800932e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8009330:	2312      	movs	r3, #18
 8009332:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009334:	2340      	movs	r3, #64	; 0x40
 8009336:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009338:	2300      	movs	r3, #0
 800933a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800933c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009340:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009342:	f107 0308 	add.w	r3, r7, #8
 8009346:	4619      	mov	r1, r3
 8009348:	6878      	ldr	r0, [r7, #4]
 800934a:	f7ff ff30 	bl	80091ae <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800934e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009352:	2112      	movs	r1, #18
 8009354:	6878      	ldr	r0, [r7, #4]
 8009356:	f000 f993 	bl	8009680 <SDMMC_GetCmdResp1>
 800935a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800935c:	69fb      	ldr	r3, [r7, #28]
}
 800935e:	4618      	mov	r0, r3
 8009360:	3720      	adds	r7, #32
 8009362:	46bd      	mov	sp, r7
 8009364:	bd80      	pop	{r7, pc}

08009366 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8009366:	b580      	push	{r7, lr}
 8009368:	b088      	sub	sp, #32
 800936a:	af00      	add	r7, sp, #0
 800936c:	6078      	str	r0, [r7, #4]
 800936e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8009370:	683b      	ldr	r3, [r7, #0]
 8009372:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8009374:	2318      	movs	r3, #24
 8009376:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009378:	2340      	movs	r3, #64	; 0x40
 800937a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800937c:	2300      	movs	r3, #0
 800937e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009380:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009384:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009386:	f107 0308 	add.w	r3, r7, #8
 800938a:	4619      	mov	r1, r3
 800938c:	6878      	ldr	r0, [r7, #4]
 800938e:	f7ff ff0e 	bl	80091ae <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8009392:	f241 3288 	movw	r2, #5000	; 0x1388
 8009396:	2118      	movs	r1, #24
 8009398:	6878      	ldr	r0, [r7, #4]
 800939a:	f000 f971 	bl	8009680 <SDMMC_GetCmdResp1>
 800939e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80093a0:	69fb      	ldr	r3, [r7, #28]
}
 80093a2:	4618      	mov	r0, r3
 80093a4:	3720      	adds	r7, #32
 80093a6:	46bd      	mov	sp, r7
 80093a8:	bd80      	pop	{r7, pc}

080093aa <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 80093aa:	b580      	push	{r7, lr}
 80093ac:	b088      	sub	sp, #32
 80093ae:	af00      	add	r7, sp, #0
 80093b0:	6078      	str	r0, [r7, #4]
 80093b2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80093b4:	683b      	ldr	r3, [r7, #0]
 80093b6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 80093b8:	2319      	movs	r3, #25
 80093ba:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80093bc:	2340      	movs	r3, #64	; 0x40
 80093be:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80093c0:	2300      	movs	r3, #0
 80093c2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80093c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80093c8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80093ca:	f107 0308 	add.w	r3, r7, #8
 80093ce:	4619      	mov	r1, r3
 80093d0:	6878      	ldr	r0, [r7, #4]
 80093d2:	f7ff feec 	bl	80091ae <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 80093d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80093da:	2119      	movs	r1, #25
 80093dc:	6878      	ldr	r0, [r7, #4]
 80093de:	f000 f94f 	bl	8009680 <SDMMC_GetCmdResp1>
 80093e2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80093e4:	69fb      	ldr	r3, [r7, #28]
}
 80093e6:	4618      	mov	r0, r3
 80093e8:	3720      	adds	r7, #32
 80093ea:	46bd      	mov	sp, r7
 80093ec:	bd80      	pop	{r7, pc}
	...

080093f0 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 80093f0:	b580      	push	{r7, lr}
 80093f2:	b088      	sub	sp, #32
 80093f4:	af00      	add	r7, sp, #0
 80093f6:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 80093f8:	2300      	movs	r3, #0
 80093fa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 80093fc:	230c      	movs	r3, #12
 80093fe:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009400:	2340      	movs	r3, #64	; 0x40
 8009402:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009404:	2300      	movs	r3, #0
 8009406:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009408:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800940c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800940e:	f107 0308 	add.w	r3, r7, #8
 8009412:	4619      	mov	r1, r3
 8009414:	6878      	ldr	r0, [r7, #4]
 8009416:	f7ff feca 	bl	80091ae <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800941a:	4a05      	ldr	r2, [pc, #20]	; (8009430 <SDMMC_CmdStopTransfer+0x40>)
 800941c:	210c      	movs	r1, #12
 800941e:	6878      	ldr	r0, [r7, #4]
 8009420:	f000 f92e 	bl	8009680 <SDMMC_GetCmdResp1>
 8009424:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009426:	69fb      	ldr	r3, [r7, #28]
}
 8009428:	4618      	mov	r0, r3
 800942a:	3720      	adds	r7, #32
 800942c:	46bd      	mov	sp, r7
 800942e:	bd80      	pop	{r7, pc}
 8009430:	05f5e100 	.word	0x05f5e100

08009434 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8009434:	b580      	push	{r7, lr}
 8009436:	b08a      	sub	sp, #40	; 0x28
 8009438:	af00      	add	r7, sp, #0
 800943a:	60f8      	str	r0, [r7, #12]
 800943c:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8009440:	683b      	ldr	r3, [r7, #0]
 8009442:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8009444:	2307      	movs	r3, #7
 8009446:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009448:	2340      	movs	r3, #64	; 0x40
 800944a:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800944c:	2300      	movs	r3, #0
 800944e:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009450:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009454:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009456:	f107 0310 	add.w	r3, r7, #16
 800945a:	4619      	mov	r1, r3
 800945c:	68f8      	ldr	r0, [r7, #12]
 800945e:	f7ff fea6 	bl	80091ae <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8009462:	f241 3288 	movw	r2, #5000	; 0x1388
 8009466:	2107      	movs	r1, #7
 8009468:	68f8      	ldr	r0, [r7, #12]
 800946a:	f000 f909 	bl	8009680 <SDMMC_GetCmdResp1>
 800946e:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8009470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009472:	4618      	mov	r0, r3
 8009474:	3728      	adds	r7, #40	; 0x28
 8009476:	46bd      	mov	sp, r7
 8009478:	bd80      	pop	{r7, pc}

0800947a <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800947a:	b580      	push	{r7, lr}
 800947c:	b088      	sub	sp, #32
 800947e:	af00      	add	r7, sp, #0
 8009480:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8009482:	2300      	movs	r3, #0
 8009484:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8009486:	2300      	movs	r3, #0
 8009488:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800948a:	2300      	movs	r3, #0
 800948c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800948e:	2300      	movs	r3, #0
 8009490:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009492:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009496:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009498:	f107 0308 	add.w	r3, r7, #8
 800949c:	4619      	mov	r1, r3
 800949e:	6878      	ldr	r0, [r7, #4]
 80094a0:	f7ff fe85 	bl	80091ae <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 80094a4:	6878      	ldr	r0, [r7, #4]
 80094a6:	f000 fb23 	bl	8009af0 <SDMMC_GetCmdError>
 80094aa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80094ac:	69fb      	ldr	r3, [r7, #28]
}
 80094ae:	4618      	mov	r0, r3
 80094b0:	3720      	adds	r7, #32
 80094b2:	46bd      	mov	sp, r7
 80094b4:	bd80      	pop	{r7, pc}

080094b6 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 80094b6:	b580      	push	{r7, lr}
 80094b8:	b088      	sub	sp, #32
 80094ba:	af00      	add	r7, sp, #0
 80094bc:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 80094be:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 80094c2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 80094c4:	2308      	movs	r3, #8
 80094c6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80094c8:	2340      	movs	r3, #64	; 0x40
 80094ca:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80094cc:	2300      	movs	r3, #0
 80094ce:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80094d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80094d4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80094d6:	f107 0308 	add.w	r3, r7, #8
 80094da:	4619      	mov	r1, r3
 80094dc:	6878      	ldr	r0, [r7, #4]
 80094de:	f7ff fe66 	bl	80091ae <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 80094e2:	6878      	ldr	r0, [r7, #4]
 80094e4:	f000 fab6 	bl	8009a54 <SDMMC_GetCmdResp7>
 80094e8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80094ea:	69fb      	ldr	r3, [r7, #28]
}
 80094ec:	4618      	mov	r0, r3
 80094ee:	3720      	adds	r7, #32
 80094f0:	46bd      	mov	sp, r7
 80094f2:	bd80      	pop	{r7, pc}

080094f4 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80094f4:	b580      	push	{r7, lr}
 80094f6:	b088      	sub	sp, #32
 80094f8:	af00      	add	r7, sp, #0
 80094fa:	6078      	str	r0, [r7, #4]
 80094fc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80094fe:	683b      	ldr	r3, [r7, #0]
 8009500:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8009502:	2337      	movs	r3, #55	; 0x37
 8009504:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009506:	2340      	movs	r3, #64	; 0x40
 8009508:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800950a:	2300      	movs	r3, #0
 800950c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800950e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009512:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009514:	f107 0308 	add.w	r3, r7, #8
 8009518:	4619      	mov	r1, r3
 800951a:	6878      	ldr	r0, [r7, #4]
 800951c:	f7ff fe47 	bl	80091ae <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8009520:	f241 3288 	movw	r2, #5000	; 0x1388
 8009524:	2137      	movs	r1, #55	; 0x37
 8009526:	6878      	ldr	r0, [r7, #4]
 8009528:	f000 f8aa 	bl	8009680 <SDMMC_GetCmdResp1>
 800952c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800952e:	69fb      	ldr	r3, [r7, #28]
}
 8009530:	4618      	mov	r0, r3
 8009532:	3720      	adds	r7, #32
 8009534:	46bd      	mov	sp, r7
 8009536:	bd80      	pop	{r7, pc}

08009538 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8009538:	b580      	push	{r7, lr}
 800953a:	b088      	sub	sp, #32
 800953c:	af00      	add	r7, sp, #0
 800953e:	6078      	str	r0, [r7, #4]
 8009540:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8009542:	683b      	ldr	r3, [r7, #0]
 8009544:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009548:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800954c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800954e:	2329      	movs	r3, #41	; 0x29
 8009550:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009552:	2340      	movs	r3, #64	; 0x40
 8009554:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009556:	2300      	movs	r3, #0
 8009558:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800955a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800955e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009560:	f107 0308 	add.w	r3, r7, #8
 8009564:	4619      	mov	r1, r3
 8009566:	6878      	ldr	r0, [r7, #4]
 8009568:	f7ff fe21 	bl	80091ae <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800956c:	6878      	ldr	r0, [r7, #4]
 800956e:	f000 f9bd 	bl	80098ec <SDMMC_GetCmdResp3>
 8009572:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009574:	69fb      	ldr	r3, [r7, #28]
}
 8009576:	4618      	mov	r0, r3
 8009578:	3720      	adds	r7, #32
 800957a:	46bd      	mov	sp, r7
 800957c:	bd80      	pop	{r7, pc}

0800957e <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800957e:	b580      	push	{r7, lr}
 8009580:	b088      	sub	sp, #32
 8009582:	af00      	add	r7, sp, #0
 8009584:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8009586:	2300      	movs	r3, #0
 8009588:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800958a:	2302      	movs	r3, #2
 800958c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800958e:	23c0      	movs	r3, #192	; 0xc0
 8009590:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009592:	2300      	movs	r3, #0
 8009594:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009596:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800959a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800959c:	f107 0308 	add.w	r3, r7, #8
 80095a0:	4619      	mov	r1, r3
 80095a2:	6878      	ldr	r0, [r7, #4]
 80095a4:	f7ff fe03 	bl	80091ae <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80095a8:	6878      	ldr	r0, [r7, #4]
 80095aa:	f000 f957 	bl	800985c <SDMMC_GetCmdResp2>
 80095ae:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80095b0:	69fb      	ldr	r3, [r7, #28]
}
 80095b2:	4618      	mov	r0, r3
 80095b4:	3720      	adds	r7, #32
 80095b6:	46bd      	mov	sp, r7
 80095b8:	bd80      	pop	{r7, pc}

080095ba <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80095ba:	b580      	push	{r7, lr}
 80095bc:	b088      	sub	sp, #32
 80095be:	af00      	add	r7, sp, #0
 80095c0:	6078      	str	r0, [r7, #4]
 80095c2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 80095c4:	683b      	ldr	r3, [r7, #0]
 80095c6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 80095c8:	2309      	movs	r3, #9
 80095ca:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80095cc:	23c0      	movs	r3, #192	; 0xc0
 80095ce:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80095d0:	2300      	movs	r3, #0
 80095d2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80095d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80095d8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80095da:	f107 0308 	add.w	r3, r7, #8
 80095de:	4619      	mov	r1, r3
 80095e0:	6878      	ldr	r0, [r7, #4]
 80095e2:	f7ff fde4 	bl	80091ae <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80095e6:	6878      	ldr	r0, [r7, #4]
 80095e8:	f000 f938 	bl	800985c <SDMMC_GetCmdResp2>
 80095ec:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80095ee:	69fb      	ldr	r3, [r7, #28]
}
 80095f0:	4618      	mov	r0, r3
 80095f2:	3720      	adds	r7, #32
 80095f4:	46bd      	mov	sp, r7
 80095f6:	bd80      	pop	{r7, pc}

080095f8 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 80095f8:	b580      	push	{r7, lr}
 80095fa:	b088      	sub	sp, #32
 80095fc:	af00      	add	r7, sp, #0
 80095fe:	6078      	str	r0, [r7, #4]
 8009600:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8009602:	2300      	movs	r3, #0
 8009604:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8009606:	2303      	movs	r3, #3
 8009608:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800960a:	2340      	movs	r3, #64	; 0x40
 800960c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800960e:	2300      	movs	r3, #0
 8009610:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009612:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009616:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009618:	f107 0308 	add.w	r3, r7, #8
 800961c:	4619      	mov	r1, r3
 800961e:	6878      	ldr	r0, [r7, #4]
 8009620:	f7ff fdc5 	bl	80091ae <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8009624:	683a      	ldr	r2, [r7, #0]
 8009626:	2103      	movs	r1, #3
 8009628:	6878      	ldr	r0, [r7, #4]
 800962a:	f000 f99d 	bl	8009968 <SDMMC_GetCmdResp6>
 800962e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009630:	69fb      	ldr	r3, [r7, #28]
}
 8009632:	4618      	mov	r0, r3
 8009634:	3720      	adds	r7, #32
 8009636:	46bd      	mov	sp, r7
 8009638:	bd80      	pop	{r7, pc}

0800963a <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800963a:	b580      	push	{r7, lr}
 800963c:	b088      	sub	sp, #32
 800963e:	af00      	add	r7, sp, #0
 8009640:	6078      	str	r0, [r7, #4]
 8009642:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8009644:	683b      	ldr	r3, [r7, #0]
 8009646:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8009648:	230d      	movs	r3, #13
 800964a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800964c:	2340      	movs	r3, #64	; 0x40
 800964e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009650:	2300      	movs	r3, #0
 8009652:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009654:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009658:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800965a:	f107 0308 	add.w	r3, r7, #8
 800965e:	4619      	mov	r1, r3
 8009660:	6878      	ldr	r0, [r7, #4]
 8009662:	f7ff fda4 	bl	80091ae <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8009666:	f241 3288 	movw	r2, #5000	; 0x1388
 800966a:	210d      	movs	r1, #13
 800966c:	6878      	ldr	r0, [r7, #4]
 800966e:	f000 f807 	bl	8009680 <SDMMC_GetCmdResp1>
 8009672:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009674:	69fb      	ldr	r3, [r7, #28]
}
 8009676:	4618      	mov	r0, r3
 8009678:	3720      	adds	r7, #32
 800967a:	46bd      	mov	sp, r7
 800967c:	bd80      	pop	{r7, pc}
	...

08009680 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8009680:	b580      	push	{r7, lr}
 8009682:	b088      	sub	sp, #32
 8009684:	af00      	add	r7, sp, #0
 8009686:	60f8      	str	r0, [r7, #12]
 8009688:	460b      	mov	r3, r1
 800968a:	607a      	str	r2, [r7, #4]
 800968c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800968e:	4b70      	ldr	r3, [pc, #448]	; (8009850 <SDMMC_GetCmdResp1+0x1d0>)
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	4a70      	ldr	r2, [pc, #448]	; (8009854 <SDMMC_GetCmdResp1+0x1d4>)
 8009694:	fba2 2303 	umull	r2, r3, r2, r3
 8009698:	0a5a      	lsrs	r2, r3, #9
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	fb02 f303 	mul.w	r3, r2, r3
 80096a0:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 80096a2:	69fb      	ldr	r3, [r7, #28]
 80096a4:	1e5a      	subs	r2, r3, #1
 80096a6:	61fa      	str	r2, [r7, #28]
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d102      	bne.n	80096b2 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 80096ac:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80096b0:	e0c9      	b.n	8009846 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80096b6:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80096b8:	69bb      	ldr	r3, [r7, #24]
 80096ba:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d0ef      	beq.n	80096a2 <SDMMC_GetCmdResp1+0x22>
 80096c2:	69bb      	ldr	r3, [r7, #24]
 80096c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d1ea      	bne.n	80096a2 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80096d0:	f003 0304 	and.w	r3, r3, #4
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d004      	beq.n	80096e2 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	2204      	movs	r2, #4
 80096dc:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80096de:	2304      	movs	r3, #4
 80096e0:	e0b1      	b.n	8009846 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80096e6:	f003 0301 	and.w	r3, r3, #1
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d004      	beq.n	80096f8 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	2201      	movs	r2, #1
 80096f2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80096f4:	2301      	movs	r3, #1
 80096f6:	e0a6      	b.n	8009846 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	22c5      	movs	r2, #197	; 0xc5
 80096fc:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80096fe:	68f8      	ldr	r0, [r7, #12]
 8009700:	f7ff fd7f 	bl	8009202 <SDIO_GetCommandResponse>
 8009704:	4603      	mov	r3, r0
 8009706:	461a      	mov	r2, r3
 8009708:	7afb      	ldrb	r3, [r7, #11]
 800970a:	4293      	cmp	r3, r2
 800970c:	d001      	beq.n	8009712 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800970e:	2301      	movs	r3, #1
 8009710:	e099      	b.n	8009846 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8009712:	2100      	movs	r1, #0
 8009714:	68f8      	ldr	r0, [r7, #12]
 8009716:	f7ff fd81 	bl	800921c <SDIO_GetResponse>
 800971a:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800971c:	697a      	ldr	r2, [r7, #20]
 800971e:	4b4e      	ldr	r3, [pc, #312]	; (8009858 <SDMMC_GetCmdResp1+0x1d8>)
 8009720:	4013      	ands	r3, r2
 8009722:	2b00      	cmp	r3, #0
 8009724:	d101      	bne.n	800972a <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8009726:	2300      	movs	r3, #0
 8009728:	e08d      	b.n	8009846 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800972a:	697b      	ldr	r3, [r7, #20]
 800972c:	2b00      	cmp	r3, #0
 800972e:	da02      	bge.n	8009736 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8009730:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009734:	e087      	b.n	8009846 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8009736:	697b      	ldr	r3, [r7, #20]
 8009738:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800973c:	2b00      	cmp	r3, #0
 800973e:	d001      	beq.n	8009744 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8009740:	2340      	movs	r3, #64	; 0x40
 8009742:	e080      	b.n	8009846 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8009744:	697b      	ldr	r3, [r7, #20]
 8009746:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800974a:	2b00      	cmp	r3, #0
 800974c:	d001      	beq.n	8009752 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800974e:	2380      	movs	r3, #128	; 0x80
 8009750:	e079      	b.n	8009846 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8009752:	697b      	ldr	r3, [r7, #20]
 8009754:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009758:	2b00      	cmp	r3, #0
 800975a:	d002      	beq.n	8009762 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800975c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009760:	e071      	b.n	8009846 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8009762:	697b      	ldr	r3, [r7, #20]
 8009764:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009768:	2b00      	cmp	r3, #0
 800976a:	d002      	beq.n	8009772 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800976c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009770:	e069      	b.n	8009846 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8009772:	697b      	ldr	r3, [r7, #20]
 8009774:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009778:	2b00      	cmp	r3, #0
 800977a:	d002      	beq.n	8009782 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800977c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009780:	e061      	b.n	8009846 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8009782:	697b      	ldr	r3, [r7, #20]
 8009784:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009788:	2b00      	cmp	r3, #0
 800978a:	d002      	beq.n	8009792 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800978c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009790:	e059      	b.n	8009846 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8009792:	697b      	ldr	r3, [r7, #20]
 8009794:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009798:	2b00      	cmp	r3, #0
 800979a:	d002      	beq.n	80097a2 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800979c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80097a0:	e051      	b.n	8009846 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80097a2:	697b      	ldr	r3, [r7, #20]
 80097a4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d002      	beq.n	80097b2 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80097ac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80097b0:	e049      	b.n	8009846 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80097b2:	697b      	ldr	r3, [r7, #20]
 80097b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d002      	beq.n	80097c2 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80097bc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80097c0:	e041      	b.n	8009846 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80097c2:	697b      	ldr	r3, [r7, #20]
 80097c4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d002      	beq.n	80097d2 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 80097cc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80097d0:	e039      	b.n	8009846 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80097d2:	697b      	ldr	r3, [r7, #20]
 80097d4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d002      	beq.n	80097e2 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80097dc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80097e0:	e031      	b.n	8009846 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80097e2:	697b      	ldr	r3, [r7, #20]
 80097e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d002      	beq.n	80097f2 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80097ec:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80097f0:	e029      	b.n	8009846 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80097f2:	697b      	ldr	r3, [r7, #20]
 80097f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d002      	beq.n	8009802 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80097fc:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8009800:	e021      	b.n	8009846 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8009802:	697b      	ldr	r3, [r7, #20]
 8009804:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009808:	2b00      	cmp	r3, #0
 800980a:	d002      	beq.n	8009812 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800980c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8009810:	e019      	b.n	8009846 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8009812:	697b      	ldr	r3, [r7, #20]
 8009814:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009818:	2b00      	cmp	r3, #0
 800981a:	d002      	beq.n	8009822 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800981c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8009820:	e011      	b.n	8009846 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8009822:	697b      	ldr	r3, [r7, #20]
 8009824:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009828:	2b00      	cmp	r3, #0
 800982a:	d002      	beq.n	8009832 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800982c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8009830:	e009      	b.n	8009846 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8009832:	697b      	ldr	r3, [r7, #20]
 8009834:	f003 0308 	and.w	r3, r3, #8
 8009838:	2b00      	cmp	r3, #0
 800983a:	d002      	beq.n	8009842 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800983c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8009840:	e001      	b.n	8009846 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8009842:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8009846:	4618      	mov	r0, r3
 8009848:	3720      	adds	r7, #32
 800984a:	46bd      	mov	sp, r7
 800984c:	bd80      	pop	{r7, pc}
 800984e:	bf00      	nop
 8009850:	20000000 	.word	0x20000000
 8009854:	10624dd3 	.word	0x10624dd3
 8009858:	fdffe008 	.word	0xfdffe008

0800985c <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800985c:	b480      	push	{r7}
 800985e:	b085      	sub	sp, #20
 8009860:	af00      	add	r7, sp, #0
 8009862:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009864:	4b1f      	ldr	r3, [pc, #124]	; (80098e4 <SDMMC_GetCmdResp2+0x88>)
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	4a1f      	ldr	r2, [pc, #124]	; (80098e8 <SDMMC_GetCmdResp2+0x8c>)
 800986a:	fba2 2303 	umull	r2, r3, r2, r3
 800986e:	0a5b      	lsrs	r3, r3, #9
 8009870:	f241 3288 	movw	r2, #5000	; 0x1388
 8009874:	fb02 f303 	mul.w	r3, r2, r3
 8009878:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	1e5a      	subs	r2, r3, #1
 800987e:	60fa      	str	r2, [r7, #12]
 8009880:	2b00      	cmp	r3, #0
 8009882:	d102      	bne.n	800988a <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009884:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009888:	e026      	b.n	80098d8 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800988e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009890:	68bb      	ldr	r3, [r7, #8]
 8009892:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8009896:	2b00      	cmp	r3, #0
 8009898:	d0ef      	beq.n	800987a <SDMMC_GetCmdResp2+0x1e>
 800989a:	68bb      	ldr	r3, [r7, #8]
 800989c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d1ea      	bne.n	800987a <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80098a8:	f003 0304 	and.w	r3, r3, #4
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d004      	beq.n	80098ba <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	2204      	movs	r2, #4
 80098b4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80098b6:	2304      	movs	r3, #4
 80098b8:	e00e      	b.n	80098d8 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80098be:	f003 0301 	and.w	r3, r3, #1
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d004      	beq.n	80098d0 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	2201      	movs	r2, #1
 80098ca:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80098cc:	2301      	movs	r3, #1
 80098ce:	e003      	b.n	80098d8 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	22c5      	movs	r2, #197	; 0xc5
 80098d4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80098d6:	2300      	movs	r3, #0
}
 80098d8:	4618      	mov	r0, r3
 80098da:	3714      	adds	r7, #20
 80098dc:	46bd      	mov	sp, r7
 80098de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098e2:	4770      	bx	lr
 80098e4:	20000000 	.word	0x20000000
 80098e8:	10624dd3 	.word	0x10624dd3

080098ec <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 80098ec:	b480      	push	{r7}
 80098ee:	b085      	sub	sp, #20
 80098f0:	af00      	add	r7, sp, #0
 80098f2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80098f4:	4b1a      	ldr	r3, [pc, #104]	; (8009960 <SDMMC_GetCmdResp3+0x74>)
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	4a1a      	ldr	r2, [pc, #104]	; (8009964 <SDMMC_GetCmdResp3+0x78>)
 80098fa:	fba2 2303 	umull	r2, r3, r2, r3
 80098fe:	0a5b      	lsrs	r3, r3, #9
 8009900:	f241 3288 	movw	r2, #5000	; 0x1388
 8009904:	fb02 f303 	mul.w	r3, r2, r3
 8009908:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	1e5a      	subs	r2, r3, #1
 800990e:	60fa      	str	r2, [r7, #12]
 8009910:	2b00      	cmp	r3, #0
 8009912:	d102      	bne.n	800991a <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009914:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009918:	e01b      	b.n	8009952 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800991e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009920:	68bb      	ldr	r3, [r7, #8]
 8009922:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8009926:	2b00      	cmp	r3, #0
 8009928:	d0ef      	beq.n	800990a <SDMMC_GetCmdResp3+0x1e>
 800992a:	68bb      	ldr	r3, [r7, #8]
 800992c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009930:	2b00      	cmp	r3, #0
 8009932:	d1ea      	bne.n	800990a <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009938:	f003 0304 	and.w	r3, r3, #4
 800993c:	2b00      	cmp	r3, #0
 800993e:	d004      	beq.n	800994a <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	2204      	movs	r2, #4
 8009944:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009946:	2304      	movs	r3, #4
 8009948:	e003      	b.n	8009952 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	22c5      	movs	r2, #197	; 0xc5
 800994e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8009950:	2300      	movs	r3, #0
}
 8009952:	4618      	mov	r0, r3
 8009954:	3714      	adds	r7, #20
 8009956:	46bd      	mov	sp, r7
 8009958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800995c:	4770      	bx	lr
 800995e:	bf00      	nop
 8009960:	20000000 	.word	0x20000000
 8009964:	10624dd3 	.word	0x10624dd3

08009968 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8009968:	b580      	push	{r7, lr}
 800996a:	b088      	sub	sp, #32
 800996c:	af00      	add	r7, sp, #0
 800996e:	60f8      	str	r0, [r7, #12]
 8009970:	460b      	mov	r3, r1
 8009972:	607a      	str	r2, [r7, #4]
 8009974:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009976:	4b35      	ldr	r3, [pc, #212]	; (8009a4c <SDMMC_GetCmdResp6+0xe4>)
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	4a35      	ldr	r2, [pc, #212]	; (8009a50 <SDMMC_GetCmdResp6+0xe8>)
 800997c:	fba2 2303 	umull	r2, r3, r2, r3
 8009980:	0a5b      	lsrs	r3, r3, #9
 8009982:	f241 3288 	movw	r2, #5000	; 0x1388
 8009986:	fb02 f303 	mul.w	r3, r2, r3
 800998a:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800998c:	69fb      	ldr	r3, [r7, #28]
 800998e:	1e5a      	subs	r2, r3, #1
 8009990:	61fa      	str	r2, [r7, #28]
 8009992:	2b00      	cmp	r3, #0
 8009994:	d102      	bne.n	800999c <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009996:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800999a:	e052      	b.n	8009a42 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80099a0:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80099a2:	69bb      	ldr	r3, [r7, #24]
 80099a4:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d0ef      	beq.n	800998c <SDMMC_GetCmdResp6+0x24>
 80099ac:	69bb      	ldr	r3, [r7, #24]
 80099ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d1ea      	bne.n	800998c <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80099ba:	f003 0304 	and.w	r3, r3, #4
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d004      	beq.n	80099cc <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	2204      	movs	r2, #4
 80099c6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80099c8:	2304      	movs	r3, #4
 80099ca:	e03a      	b.n	8009a42 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80099d0:	f003 0301 	and.w	r3, r3, #1
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d004      	beq.n	80099e2 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	2201      	movs	r2, #1
 80099dc:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80099de:	2301      	movs	r3, #1
 80099e0:	e02f      	b.n	8009a42 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80099e2:	68f8      	ldr	r0, [r7, #12]
 80099e4:	f7ff fc0d 	bl	8009202 <SDIO_GetCommandResponse>
 80099e8:	4603      	mov	r3, r0
 80099ea:	461a      	mov	r2, r3
 80099ec:	7afb      	ldrb	r3, [r7, #11]
 80099ee:	4293      	cmp	r3, r2
 80099f0:	d001      	beq.n	80099f6 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80099f2:	2301      	movs	r3, #1
 80099f4:	e025      	b.n	8009a42 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	22c5      	movs	r2, #197	; 0xc5
 80099fa:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80099fc:	2100      	movs	r1, #0
 80099fe:	68f8      	ldr	r0, [r7, #12]
 8009a00:	f7ff fc0c 	bl	800921c <SDIO_GetResponse>
 8009a04:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8009a06:	697b      	ldr	r3, [r7, #20]
 8009a08:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d106      	bne.n	8009a1e <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8009a10:	697b      	ldr	r3, [r7, #20]
 8009a12:	0c1b      	lsrs	r3, r3, #16
 8009a14:	b29a      	uxth	r2, r3
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8009a1a:	2300      	movs	r3, #0
 8009a1c:	e011      	b.n	8009a42 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8009a1e:	697b      	ldr	r3, [r7, #20]
 8009a20:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d002      	beq.n	8009a2e <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8009a28:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009a2c:	e009      	b.n	8009a42 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8009a2e:	697b      	ldr	r3, [r7, #20]
 8009a30:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d002      	beq.n	8009a3e <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8009a38:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009a3c:	e001      	b.n	8009a42 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8009a3e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8009a42:	4618      	mov	r0, r3
 8009a44:	3720      	adds	r7, #32
 8009a46:	46bd      	mov	sp, r7
 8009a48:	bd80      	pop	{r7, pc}
 8009a4a:	bf00      	nop
 8009a4c:	20000000 	.word	0x20000000
 8009a50:	10624dd3 	.word	0x10624dd3

08009a54 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8009a54:	b480      	push	{r7}
 8009a56:	b085      	sub	sp, #20
 8009a58:	af00      	add	r7, sp, #0
 8009a5a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009a5c:	4b22      	ldr	r3, [pc, #136]	; (8009ae8 <SDMMC_GetCmdResp7+0x94>)
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	4a22      	ldr	r2, [pc, #136]	; (8009aec <SDMMC_GetCmdResp7+0x98>)
 8009a62:	fba2 2303 	umull	r2, r3, r2, r3
 8009a66:	0a5b      	lsrs	r3, r3, #9
 8009a68:	f241 3288 	movw	r2, #5000	; 0x1388
 8009a6c:	fb02 f303 	mul.w	r3, r2, r3
 8009a70:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	1e5a      	subs	r2, r3, #1
 8009a76:	60fa      	str	r2, [r7, #12]
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d102      	bne.n	8009a82 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009a7c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009a80:	e02c      	b.n	8009adc <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a86:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009a88:	68bb      	ldr	r3, [r7, #8]
 8009a8a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d0ef      	beq.n	8009a72 <SDMMC_GetCmdResp7+0x1e>
 8009a92:	68bb      	ldr	r3, [r7, #8]
 8009a94:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	d1ea      	bne.n	8009a72 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009aa0:	f003 0304 	and.w	r3, r3, #4
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d004      	beq.n	8009ab2 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	2204      	movs	r2, #4
 8009aac:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009aae:	2304      	movs	r3, #4
 8009ab0:	e014      	b.n	8009adc <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ab6:	f003 0301 	and.w	r3, r3, #1
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d004      	beq.n	8009ac8 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	2201      	movs	r2, #1
 8009ac2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009ac4:	2301      	movs	r3, #1
 8009ac6:	e009      	b.n	8009adc <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009acc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d002      	beq.n	8009ada <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	2240      	movs	r2, #64	; 0x40
 8009ad8:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8009ada:	2300      	movs	r3, #0
  
}
 8009adc:	4618      	mov	r0, r3
 8009ade:	3714      	adds	r7, #20
 8009ae0:	46bd      	mov	sp, r7
 8009ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ae6:	4770      	bx	lr
 8009ae8:	20000000 	.word	0x20000000
 8009aec:	10624dd3 	.word	0x10624dd3

08009af0 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8009af0:	b480      	push	{r7}
 8009af2:	b085      	sub	sp, #20
 8009af4:	af00      	add	r7, sp, #0
 8009af6:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009af8:	4b11      	ldr	r3, [pc, #68]	; (8009b40 <SDMMC_GetCmdError+0x50>)
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	4a11      	ldr	r2, [pc, #68]	; (8009b44 <SDMMC_GetCmdError+0x54>)
 8009afe:	fba2 2303 	umull	r2, r3, r2, r3
 8009b02:	0a5b      	lsrs	r3, r3, #9
 8009b04:	f241 3288 	movw	r2, #5000	; 0x1388
 8009b08:	fb02 f303 	mul.w	r3, r2, r3
 8009b0c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	1e5a      	subs	r2, r3, #1
 8009b12:	60fa      	str	r2, [r7, #12]
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d102      	bne.n	8009b1e <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009b18:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009b1c:	e009      	b.n	8009b32 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d0f1      	beq.n	8009b0e <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	22c5      	movs	r2, #197	; 0xc5
 8009b2e:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8009b30:	2300      	movs	r3, #0
}
 8009b32:	4618      	mov	r0, r3
 8009b34:	3714      	adds	r7, #20
 8009b36:	46bd      	mov	sp, r7
 8009b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b3c:	4770      	bx	lr
 8009b3e:	bf00      	nop
 8009b40:	20000000 	.word	0x20000000
 8009b44:	10624dd3 	.word	0x10624dd3

08009b48 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8009b48:	b580      	push	{r7, lr}
 8009b4a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8009b4c:	4904      	ldr	r1, [pc, #16]	; (8009b60 <MX_FATFS_Init+0x18>)
 8009b4e:	4805      	ldr	r0, [pc, #20]	; (8009b64 <MX_FATFS_Init+0x1c>)
 8009b50:	f003 f85c 	bl	800cc0c <FATFS_LinkDriver>
 8009b54:	4603      	mov	r3, r0
 8009b56:	461a      	mov	r2, r3
 8009b58:	4b03      	ldr	r3, [pc, #12]	; (8009b68 <MX_FATFS_Init+0x20>)
 8009b5a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8009b5c:	bf00      	nop
 8009b5e:	bd80      	pop	{r7, pc}
 8009b60:	200014f8 	.word	0x200014f8
 8009b64:	0800e328 	.word	0x0800e328
 8009b68:	200014f4 	.word	0x200014f4

08009b6c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8009b6c:	b480      	push	{r7}
 8009b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8009b70:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8009b72:	4618      	mov	r0, r3
 8009b74:	46bd      	mov	sp, r7
 8009b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b7a:	4770      	bx	lr

08009b7c <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8009b7c:	b580      	push	{r7, lr}
 8009b7e:	b082      	sub	sp, #8
 8009b80:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8009b82:	2300      	movs	r3, #0
 8009b84:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8009b86:	f000 f888 	bl	8009c9a <BSP_SD_IsDetected>
 8009b8a:	4603      	mov	r3, r0
 8009b8c:	2b01      	cmp	r3, #1
 8009b8e:	d001      	beq.n	8009b94 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8009b90:	2301      	movs	r3, #1
 8009b92:	e005      	b.n	8009ba0 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8009b94:	4804      	ldr	r0, [pc, #16]	; (8009ba8 <BSP_SD_Init+0x2c>)
 8009b96:	f7fc fcdf 	bl	8006558 <HAL_SD_Init>
 8009b9a:	4603      	mov	r3, r0
 8009b9c:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 8009b9e:	79fb      	ldrb	r3, [r7, #7]
}
 8009ba0:	4618      	mov	r0, r3
 8009ba2:	3708      	adds	r7, #8
 8009ba4:	46bd      	mov	sp, r7
 8009ba6:	bd80      	pop	{r7, pc}
 8009ba8:	200012d8 	.word	0x200012d8

08009bac <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8009bac:	b580      	push	{r7, lr}
 8009bae:	b086      	sub	sp, #24
 8009bb0:	af00      	add	r7, sp, #0
 8009bb2:	60f8      	str	r0, [r7, #12]
 8009bb4:	60b9      	str	r1, [r7, #8]
 8009bb6:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8009bb8:	2300      	movs	r3, #0
 8009bba:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	68ba      	ldr	r2, [r7, #8]
 8009bc0:	68f9      	ldr	r1, [r7, #12]
 8009bc2:	4806      	ldr	r0, [pc, #24]	; (8009bdc <BSP_SD_ReadBlocks_DMA+0x30>)
 8009bc4:	f7fc fd78 	bl	80066b8 <HAL_SD_ReadBlocks_DMA>
 8009bc8:	4603      	mov	r3, r0
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d001      	beq.n	8009bd2 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8009bce:	2301      	movs	r3, #1
 8009bd0:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8009bd2:	7dfb      	ldrb	r3, [r7, #23]
}
 8009bd4:	4618      	mov	r0, r3
 8009bd6:	3718      	adds	r7, #24
 8009bd8:	46bd      	mov	sp, r7
 8009bda:	bd80      	pop	{r7, pc}
 8009bdc:	200012d8 	.word	0x200012d8

08009be0 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8009be0:	b580      	push	{r7, lr}
 8009be2:	b086      	sub	sp, #24
 8009be4:	af00      	add	r7, sp, #0
 8009be6:	60f8      	str	r0, [r7, #12]
 8009be8:	60b9      	str	r1, [r7, #8]
 8009bea:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8009bec:	2300      	movs	r3, #0
 8009bee:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	68ba      	ldr	r2, [r7, #8]
 8009bf4:	68f9      	ldr	r1, [r7, #12]
 8009bf6:	4806      	ldr	r0, [pc, #24]	; (8009c10 <BSP_SD_WriteBlocks_DMA+0x30>)
 8009bf8:	f7fc fe40 	bl	800687c <HAL_SD_WriteBlocks_DMA>
 8009bfc:	4603      	mov	r3, r0
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d001      	beq.n	8009c06 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8009c02:	2301      	movs	r3, #1
 8009c04:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8009c06:	7dfb      	ldrb	r3, [r7, #23]
}
 8009c08:	4618      	mov	r0, r3
 8009c0a:	3718      	adds	r7, #24
 8009c0c:	46bd      	mov	sp, r7
 8009c0e:	bd80      	pop	{r7, pc}
 8009c10:	200012d8 	.word	0x200012d8

08009c14 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8009c14:	b580      	push	{r7, lr}
 8009c16:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8009c18:	4805      	ldr	r0, [pc, #20]	; (8009c30 <BSP_SD_GetCardState+0x1c>)
 8009c1a:	f7fd fa75 	bl	8007108 <HAL_SD_GetCardState>
 8009c1e:	4603      	mov	r3, r0
 8009c20:	2b04      	cmp	r3, #4
 8009c22:	bf14      	ite	ne
 8009c24:	2301      	movne	r3, #1
 8009c26:	2300      	moveq	r3, #0
 8009c28:	b2db      	uxtb	r3, r3
}
 8009c2a:	4618      	mov	r0, r3
 8009c2c:	bd80      	pop	{r7, pc}
 8009c2e:	bf00      	nop
 8009c30:	200012d8 	.word	0x200012d8

08009c34 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8009c34:	b580      	push	{r7, lr}
 8009c36:	b082      	sub	sp, #8
 8009c38:	af00      	add	r7, sp, #0
 8009c3a:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8009c3c:	6879      	ldr	r1, [r7, #4]
 8009c3e:	4803      	ldr	r0, [pc, #12]	; (8009c4c <BSP_SD_GetCardInfo+0x18>)
 8009c40:	f7fd fa36 	bl	80070b0 <HAL_SD_GetCardInfo>
}
 8009c44:	bf00      	nop
 8009c46:	3708      	adds	r7, #8
 8009c48:	46bd      	mov	sp, r7
 8009c4a:	bd80      	pop	{r7, pc}
 8009c4c:	200012d8 	.word	0x200012d8

08009c50 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8009c50:	b580      	push	{r7, lr}
 8009c52:	b082      	sub	sp, #8
 8009c54:	af00      	add	r7, sp, #0
 8009c56:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 8009c58:	f000 f818 	bl	8009c8c <BSP_SD_AbortCallback>
}
 8009c5c:	bf00      	nop
 8009c5e:	3708      	adds	r7, #8
 8009c60:	46bd      	mov	sp, r7
 8009c62:	bd80      	pop	{r7, pc}

08009c64 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8009c64:	b580      	push	{r7, lr}
 8009c66:	b082      	sub	sp, #8
 8009c68:	af00      	add	r7, sp, #0
 8009c6a:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8009c6c:	f000 f9a8 	bl	8009fc0 <BSP_SD_WriteCpltCallback>
}
 8009c70:	bf00      	nop
 8009c72:	3708      	adds	r7, #8
 8009c74:	46bd      	mov	sp, r7
 8009c76:	bd80      	pop	{r7, pc}

08009c78 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8009c78:	b580      	push	{r7, lr}
 8009c7a:	b082      	sub	sp, #8
 8009c7c:	af00      	add	r7, sp, #0
 8009c7e:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8009c80:	f000 f9aa 	bl	8009fd8 <BSP_SD_ReadCpltCallback>
}
 8009c84:	bf00      	nop
 8009c86:	3708      	adds	r7, #8
 8009c88:	46bd      	mov	sp, r7
 8009c8a:	bd80      	pop	{r7, pc}

08009c8c <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 8009c8c:	b480      	push	{r7}
 8009c8e:	af00      	add	r7, sp, #0

}
 8009c90:	bf00      	nop
 8009c92:	46bd      	mov	sp, r7
 8009c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c98:	4770      	bx	lr

08009c9a <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8009c9a:	b580      	push	{r7, lr}
 8009c9c:	b082      	sub	sp, #8
 8009c9e:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8009ca0:	2301      	movs	r3, #1
 8009ca2:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8009ca4:	f000 f80c 	bl	8009cc0 <BSP_PlatformIsDetected>
 8009ca8:	4603      	mov	r3, r0
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d101      	bne.n	8009cb2 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8009cae:	2300      	movs	r3, #0
 8009cb0:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8009cb2:	79fb      	ldrb	r3, [r7, #7]
 8009cb4:	b2db      	uxtb	r3, r3
}
 8009cb6:	4618      	mov	r0, r3
 8009cb8:	3708      	adds	r7, #8
 8009cba:	46bd      	mov	sp, r7
 8009cbc:	bd80      	pop	{r7, pc}
	...

08009cc0 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8009cc0:	b580      	push	{r7, lr}
 8009cc2:	b082      	sub	sp, #8
 8009cc4:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8009cc6:	2301      	movs	r3, #1
 8009cc8:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8009cca:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8009cce:	4806      	ldr	r0, [pc, #24]	; (8009ce8 <BSP_PlatformIsDetected+0x28>)
 8009cd0:	f7f9 fe66 	bl	80039a0 <HAL_GPIO_ReadPin>
 8009cd4:	4603      	mov	r3, r0
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d001      	beq.n	8009cde <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 8009cda:	2300      	movs	r3, #0
 8009cdc:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 8009cde:	79fb      	ldrb	r3, [r7, #7]
}
 8009ce0:	4618      	mov	r0, r3
 8009ce2:	3708      	adds	r7, #8
 8009ce4:	46bd      	mov	sp, r7
 8009ce6:	bd80      	pop	{r7, pc}
 8009ce8:	40020400 	.word	0x40020400

08009cec <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8009cec:	b580      	push	{r7, lr}
 8009cee:	b084      	sub	sp, #16
 8009cf0:	af00      	add	r7, sp, #0
 8009cf2:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 8009cf4:	f7f8 f88c 	bl	8001e10 <HAL_GetTick>
 8009cf8:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 8009cfa:	e006      	b.n	8009d0a <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8009cfc:	f7ff ff8a 	bl	8009c14 <BSP_SD_GetCardState>
 8009d00:	4603      	mov	r3, r0
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d101      	bne.n	8009d0a <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8009d06:	2300      	movs	r3, #0
 8009d08:	e009      	b.n	8009d1e <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 8009d0a:	f7f8 f881 	bl	8001e10 <HAL_GetTick>
 8009d0e:	4602      	mov	r2, r0
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	1ad3      	subs	r3, r2, r3
 8009d14:	687a      	ldr	r2, [r7, #4]
 8009d16:	429a      	cmp	r2, r3
 8009d18:	d8f0      	bhi.n	8009cfc <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8009d1a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8009d1e:	4618      	mov	r0, r3
 8009d20:	3710      	adds	r7, #16
 8009d22:	46bd      	mov	sp, r7
 8009d24:	bd80      	pop	{r7, pc}
	...

08009d28 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8009d28:	b580      	push	{r7, lr}
 8009d2a:	b082      	sub	sp, #8
 8009d2c:	af00      	add	r7, sp, #0
 8009d2e:	4603      	mov	r3, r0
 8009d30:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8009d32:	4b0b      	ldr	r3, [pc, #44]	; (8009d60 <SD_CheckStatus+0x38>)
 8009d34:	2201      	movs	r2, #1
 8009d36:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8009d38:	f7ff ff6c 	bl	8009c14 <BSP_SD_GetCardState>
 8009d3c:	4603      	mov	r3, r0
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d107      	bne.n	8009d52 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8009d42:	4b07      	ldr	r3, [pc, #28]	; (8009d60 <SD_CheckStatus+0x38>)
 8009d44:	781b      	ldrb	r3, [r3, #0]
 8009d46:	b2db      	uxtb	r3, r3
 8009d48:	f023 0301 	bic.w	r3, r3, #1
 8009d4c:	b2da      	uxtb	r2, r3
 8009d4e:	4b04      	ldr	r3, [pc, #16]	; (8009d60 <SD_CheckStatus+0x38>)
 8009d50:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8009d52:	4b03      	ldr	r3, [pc, #12]	; (8009d60 <SD_CheckStatus+0x38>)
 8009d54:	781b      	ldrb	r3, [r3, #0]
 8009d56:	b2db      	uxtb	r3, r3
}
 8009d58:	4618      	mov	r0, r3
 8009d5a:	3708      	adds	r7, #8
 8009d5c:	46bd      	mov	sp, r7
 8009d5e:	bd80      	pop	{r7, pc}
 8009d60:	20000009 	.word	0x20000009

08009d64 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8009d64:	b580      	push	{r7, lr}
 8009d66:	b082      	sub	sp, #8
 8009d68:	af00      	add	r7, sp, #0
 8009d6a:	4603      	mov	r3, r0
 8009d6c:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8009d6e:	f7ff ff05 	bl	8009b7c <BSP_SD_Init>
 8009d72:	4603      	mov	r3, r0
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d107      	bne.n	8009d88 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 8009d78:	79fb      	ldrb	r3, [r7, #7]
 8009d7a:	4618      	mov	r0, r3
 8009d7c:	f7ff ffd4 	bl	8009d28 <SD_CheckStatus>
 8009d80:	4603      	mov	r3, r0
 8009d82:	461a      	mov	r2, r3
 8009d84:	4b04      	ldr	r3, [pc, #16]	; (8009d98 <SD_initialize+0x34>)
 8009d86:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8009d88:	4b03      	ldr	r3, [pc, #12]	; (8009d98 <SD_initialize+0x34>)
 8009d8a:	781b      	ldrb	r3, [r3, #0]
 8009d8c:	b2db      	uxtb	r3, r3
}
 8009d8e:	4618      	mov	r0, r3
 8009d90:	3708      	adds	r7, #8
 8009d92:	46bd      	mov	sp, r7
 8009d94:	bd80      	pop	{r7, pc}
 8009d96:	bf00      	nop
 8009d98:	20000009 	.word	0x20000009

08009d9c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8009d9c:	b580      	push	{r7, lr}
 8009d9e:	b082      	sub	sp, #8
 8009da0:	af00      	add	r7, sp, #0
 8009da2:	4603      	mov	r3, r0
 8009da4:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8009da6:	79fb      	ldrb	r3, [r7, #7]
 8009da8:	4618      	mov	r0, r3
 8009daa:	f7ff ffbd 	bl	8009d28 <SD_CheckStatus>
 8009dae:	4603      	mov	r3, r0
}
 8009db0:	4618      	mov	r0, r3
 8009db2:	3708      	adds	r7, #8
 8009db4:	46bd      	mov	sp, r7
 8009db6:	bd80      	pop	{r7, pc}

08009db8 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8009db8:	b580      	push	{r7, lr}
 8009dba:	b086      	sub	sp, #24
 8009dbc:	af00      	add	r7, sp, #0
 8009dbe:	60b9      	str	r1, [r7, #8]
 8009dc0:	607a      	str	r2, [r7, #4]
 8009dc2:	603b      	str	r3, [r7, #0]
 8009dc4:	4603      	mov	r3, r0
 8009dc6:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8009dc8:	2301      	movs	r3, #1
 8009dca:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8009dcc:	f247 5030 	movw	r0, #30000	; 0x7530
 8009dd0:	f7ff ff8c 	bl	8009cec <SD_CheckStatusWithTimeout>
 8009dd4:	4603      	mov	r3, r0
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	da01      	bge.n	8009dde <SD_read+0x26>
  {
    return res;
 8009dda:	7dfb      	ldrb	r3, [r7, #23]
 8009ddc:	e03b      	b.n	8009e56 <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 8009dde:	683a      	ldr	r2, [r7, #0]
 8009de0:	6879      	ldr	r1, [r7, #4]
 8009de2:	68b8      	ldr	r0, [r7, #8]
 8009de4:	f7ff fee2 	bl	8009bac <BSP_SD_ReadBlocks_DMA>
 8009de8:	4603      	mov	r3, r0
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d132      	bne.n	8009e54 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 8009dee:	4b1c      	ldr	r3, [pc, #112]	; (8009e60 <SD_read+0xa8>)
 8009df0:	2200      	movs	r2, #0
 8009df2:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 8009df4:	f7f8 f80c 	bl	8001e10 <HAL_GetTick>
 8009df8:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8009dfa:	bf00      	nop
 8009dfc:	4b18      	ldr	r3, [pc, #96]	; (8009e60 <SD_read+0xa8>)
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d108      	bne.n	8009e16 <SD_read+0x5e>
 8009e04:	f7f8 f804 	bl	8001e10 <HAL_GetTick>
 8009e08:	4602      	mov	r2, r0
 8009e0a:	693b      	ldr	r3, [r7, #16]
 8009e0c:	1ad3      	subs	r3, r2, r3
 8009e0e:	f247 522f 	movw	r2, #29999	; 0x752f
 8009e12:	4293      	cmp	r3, r2
 8009e14:	d9f2      	bls.n	8009dfc <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 8009e16:	4b12      	ldr	r3, [pc, #72]	; (8009e60 <SD_read+0xa8>)
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d102      	bne.n	8009e24 <SD_read+0x6c>
      {
        res = RES_ERROR;
 8009e1e:	2301      	movs	r3, #1
 8009e20:	75fb      	strb	r3, [r7, #23]
 8009e22:	e017      	b.n	8009e54 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 8009e24:	4b0e      	ldr	r3, [pc, #56]	; (8009e60 <SD_read+0xa8>)
 8009e26:	2200      	movs	r2, #0
 8009e28:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8009e2a:	f7f7 fff1 	bl	8001e10 <HAL_GetTick>
 8009e2e:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8009e30:	e007      	b.n	8009e42 <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8009e32:	f7ff feef 	bl	8009c14 <BSP_SD_GetCardState>
 8009e36:	4603      	mov	r3, r0
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d102      	bne.n	8009e42 <SD_read+0x8a>
          {
            res = RES_OK;
 8009e3c:	2300      	movs	r3, #0
 8009e3e:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 8009e40:	e008      	b.n	8009e54 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8009e42:	f7f7 ffe5 	bl	8001e10 <HAL_GetTick>
 8009e46:	4602      	mov	r2, r0
 8009e48:	693b      	ldr	r3, [r7, #16]
 8009e4a:	1ad3      	subs	r3, r2, r3
 8009e4c:	f247 522f 	movw	r2, #29999	; 0x752f
 8009e50:	4293      	cmp	r3, r2
 8009e52:	d9ee      	bls.n	8009e32 <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 8009e54:	7dfb      	ldrb	r3, [r7, #23]
}
 8009e56:	4618      	mov	r0, r3
 8009e58:	3718      	adds	r7, #24
 8009e5a:	46bd      	mov	sp, r7
 8009e5c:	bd80      	pop	{r7, pc}
 8009e5e:	bf00      	nop
 8009e60:	20001500 	.word	0x20001500

08009e64 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8009e64:	b580      	push	{r7, lr}
 8009e66:	b086      	sub	sp, #24
 8009e68:	af00      	add	r7, sp, #0
 8009e6a:	60b9      	str	r1, [r7, #8]
 8009e6c:	607a      	str	r2, [r7, #4]
 8009e6e:	603b      	str	r3, [r7, #0]
 8009e70:	4603      	mov	r3, r0
 8009e72:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8009e74:	2301      	movs	r3, #1
 8009e76:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 8009e78:	4b24      	ldr	r3, [pc, #144]	; (8009f0c <SD_write+0xa8>)
 8009e7a:	2200      	movs	r2, #0
 8009e7c:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8009e7e:	f247 5030 	movw	r0, #30000	; 0x7530
 8009e82:	f7ff ff33 	bl	8009cec <SD_CheckStatusWithTimeout>
 8009e86:	4603      	mov	r3, r0
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	da01      	bge.n	8009e90 <SD_write+0x2c>
  {
    return res;
 8009e8c:	7dfb      	ldrb	r3, [r7, #23]
 8009e8e:	e038      	b.n	8009f02 <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8009e90:	683a      	ldr	r2, [r7, #0]
 8009e92:	6879      	ldr	r1, [r7, #4]
 8009e94:	68b8      	ldr	r0, [r7, #8]
 8009e96:	f7ff fea3 	bl	8009be0 <BSP_SD_WriteBlocks_DMA>
 8009e9a:	4603      	mov	r3, r0
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d12f      	bne.n	8009f00 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 8009ea0:	f7f7 ffb6 	bl	8001e10 <HAL_GetTick>
 8009ea4:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8009ea6:	bf00      	nop
 8009ea8:	4b18      	ldr	r3, [pc, #96]	; (8009f0c <SD_write+0xa8>)
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d108      	bne.n	8009ec2 <SD_write+0x5e>
 8009eb0:	f7f7 ffae 	bl	8001e10 <HAL_GetTick>
 8009eb4:	4602      	mov	r2, r0
 8009eb6:	693b      	ldr	r3, [r7, #16]
 8009eb8:	1ad3      	subs	r3, r2, r3
 8009eba:	f247 522f 	movw	r2, #29999	; 0x752f
 8009ebe:	4293      	cmp	r3, r2
 8009ec0:	d9f2      	bls.n	8009ea8 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 8009ec2:	4b12      	ldr	r3, [pc, #72]	; (8009f0c <SD_write+0xa8>)
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	d102      	bne.n	8009ed0 <SD_write+0x6c>
      {
        res = RES_ERROR;
 8009eca:	2301      	movs	r3, #1
 8009ecc:	75fb      	strb	r3, [r7, #23]
 8009ece:	e017      	b.n	8009f00 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 8009ed0:	4b0e      	ldr	r3, [pc, #56]	; (8009f0c <SD_write+0xa8>)
 8009ed2:	2200      	movs	r2, #0
 8009ed4:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8009ed6:	f7f7 ff9b 	bl	8001e10 <HAL_GetTick>
 8009eda:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8009edc:	e007      	b.n	8009eee <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8009ede:	f7ff fe99 	bl	8009c14 <BSP_SD_GetCardState>
 8009ee2:	4603      	mov	r3, r0
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	d102      	bne.n	8009eee <SD_write+0x8a>
          {
            res = RES_OK;
 8009ee8:	2300      	movs	r3, #0
 8009eea:	75fb      	strb	r3, [r7, #23]
            break;
 8009eec:	e008      	b.n	8009f00 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8009eee:	f7f7 ff8f 	bl	8001e10 <HAL_GetTick>
 8009ef2:	4602      	mov	r2, r0
 8009ef4:	693b      	ldr	r3, [r7, #16]
 8009ef6:	1ad3      	subs	r3, r2, r3
 8009ef8:	f247 522f 	movw	r2, #29999	; 0x752f
 8009efc:	4293      	cmp	r3, r2
 8009efe:	d9ee      	bls.n	8009ede <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 8009f00:	7dfb      	ldrb	r3, [r7, #23]
}
 8009f02:	4618      	mov	r0, r3
 8009f04:	3718      	adds	r7, #24
 8009f06:	46bd      	mov	sp, r7
 8009f08:	bd80      	pop	{r7, pc}
 8009f0a:	bf00      	nop
 8009f0c:	200014fc 	.word	0x200014fc

08009f10 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8009f10:	b580      	push	{r7, lr}
 8009f12:	b08c      	sub	sp, #48	; 0x30
 8009f14:	af00      	add	r7, sp, #0
 8009f16:	4603      	mov	r3, r0
 8009f18:	603a      	str	r2, [r7, #0]
 8009f1a:	71fb      	strb	r3, [r7, #7]
 8009f1c:	460b      	mov	r3, r1
 8009f1e:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8009f20:	2301      	movs	r3, #1
 8009f22:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8009f26:	4b25      	ldr	r3, [pc, #148]	; (8009fbc <SD_ioctl+0xac>)
 8009f28:	781b      	ldrb	r3, [r3, #0]
 8009f2a:	b2db      	uxtb	r3, r3
 8009f2c:	f003 0301 	and.w	r3, r3, #1
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	d001      	beq.n	8009f38 <SD_ioctl+0x28>
 8009f34:	2303      	movs	r3, #3
 8009f36:	e03c      	b.n	8009fb2 <SD_ioctl+0xa2>

  switch (cmd)
 8009f38:	79bb      	ldrb	r3, [r7, #6]
 8009f3a:	2b03      	cmp	r3, #3
 8009f3c:	d834      	bhi.n	8009fa8 <SD_ioctl+0x98>
 8009f3e:	a201      	add	r2, pc, #4	; (adr r2, 8009f44 <SD_ioctl+0x34>)
 8009f40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f44:	08009f55 	.word	0x08009f55
 8009f48:	08009f5d 	.word	0x08009f5d
 8009f4c:	08009f75 	.word	0x08009f75
 8009f50:	08009f8f 	.word	0x08009f8f
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8009f54:	2300      	movs	r3, #0
 8009f56:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8009f5a:	e028      	b.n	8009fae <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8009f5c:	f107 030c 	add.w	r3, r7, #12
 8009f60:	4618      	mov	r0, r3
 8009f62:	f7ff fe67 	bl	8009c34 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8009f66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009f68:	683b      	ldr	r3, [r7, #0]
 8009f6a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8009f6c:	2300      	movs	r3, #0
 8009f6e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8009f72:	e01c      	b.n	8009fae <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8009f74:	f107 030c 	add.w	r3, r7, #12
 8009f78:	4618      	mov	r0, r3
 8009f7a:	f7ff fe5b 	bl	8009c34 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8009f7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f80:	b29a      	uxth	r2, r3
 8009f82:	683b      	ldr	r3, [r7, #0]
 8009f84:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8009f86:	2300      	movs	r3, #0
 8009f88:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8009f8c:	e00f      	b.n	8009fae <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8009f8e:	f107 030c 	add.w	r3, r7, #12
 8009f92:	4618      	mov	r0, r3
 8009f94:	f7ff fe4e 	bl	8009c34 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8009f98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f9a:	0a5a      	lsrs	r2, r3, #9
 8009f9c:	683b      	ldr	r3, [r7, #0]
 8009f9e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8009fa0:	2300      	movs	r3, #0
 8009fa2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8009fa6:	e002      	b.n	8009fae <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8009fa8:	2304      	movs	r3, #4
 8009faa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8009fae:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8009fb2:	4618      	mov	r0, r3
 8009fb4:	3730      	adds	r7, #48	; 0x30
 8009fb6:	46bd      	mov	sp, r7
 8009fb8:	bd80      	pop	{r7, pc}
 8009fba:	bf00      	nop
 8009fbc:	20000009 	.word	0x20000009

08009fc0 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8009fc0:	b480      	push	{r7}
 8009fc2:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 8009fc4:	4b03      	ldr	r3, [pc, #12]	; (8009fd4 <BSP_SD_WriteCpltCallback+0x14>)
 8009fc6:	2201      	movs	r2, #1
 8009fc8:	601a      	str	r2, [r3, #0]
}
 8009fca:	bf00      	nop
 8009fcc:	46bd      	mov	sp, r7
 8009fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fd2:	4770      	bx	lr
 8009fd4:	200014fc 	.word	0x200014fc

08009fd8 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8009fd8:	b480      	push	{r7}
 8009fda:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 8009fdc:	4b03      	ldr	r3, [pc, #12]	; (8009fec <BSP_SD_ReadCpltCallback+0x14>)
 8009fde:	2201      	movs	r2, #1
 8009fe0:	601a      	str	r2, [r3, #0]
}
 8009fe2:	bf00      	nop
 8009fe4:	46bd      	mov	sp, r7
 8009fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fea:	4770      	bx	lr
 8009fec:	20001500 	.word	0x20001500

08009ff0 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8009ff0:	b580      	push	{r7, lr}
 8009ff2:	b084      	sub	sp, #16
 8009ff4:	af00      	add	r7, sp, #0
 8009ff6:	4603      	mov	r3, r0
 8009ff8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8009ffa:	79fb      	ldrb	r3, [r7, #7]
 8009ffc:	4a08      	ldr	r2, [pc, #32]	; (800a020 <disk_status+0x30>)
 8009ffe:	009b      	lsls	r3, r3, #2
 800a000:	4413      	add	r3, r2
 800a002:	685b      	ldr	r3, [r3, #4]
 800a004:	685b      	ldr	r3, [r3, #4]
 800a006:	79fa      	ldrb	r2, [r7, #7]
 800a008:	4905      	ldr	r1, [pc, #20]	; (800a020 <disk_status+0x30>)
 800a00a:	440a      	add	r2, r1
 800a00c:	7a12      	ldrb	r2, [r2, #8]
 800a00e:	4610      	mov	r0, r2
 800a010:	4798      	blx	r3
 800a012:	4603      	mov	r3, r0
 800a014:	73fb      	strb	r3, [r7, #15]
  return stat;
 800a016:	7bfb      	ldrb	r3, [r7, #15]
}
 800a018:	4618      	mov	r0, r3
 800a01a:	3710      	adds	r7, #16
 800a01c:	46bd      	mov	sp, r7
 800a01e:	bd80      	pop	{r7, pc}
 800a020:	2000172c 	.word	0x2000172c

0800a024 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800a024:	b580      	push	{r7, lr}
 800a026:	b084      	sub	sp, #16
 800a028:	af00      	add	r7, sp, #0
 800a02a:	4603      	mov	r3, r0
 800a02c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800a02e:	2300      	movs	r3, #0
 800a030:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800a032:	79fb      	ldrb	r3, [r7, #7]
 800a034:	4a0d      	ldr	r2, [pc, #52]	; (800a06c <disk_initialize+0x48>)
 800a036:	5cd3      	ldrb	r3, [r2, r3]
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d111      	bne.n	800a060 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800a03c:	79fb      	ldrb	r3, [r7, #7]
 800a03e:	4a0b      	ldr	r2, [pc, #44]	; (800a06c <disk_initialize+0x48>)
 800a040:	2101      	movs	r1, #1
 800a042:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800a044:	79fb      	ldrb	r3, [r7, #7]
 800a046:	4a09      	ldr	r2, [pc, #36]	; (800a06c <disk_initialize+0x48>)
 800a048:	009b      	lsls	r3, r3, #2
 800a04a:	4413      	add	r3, r2
 800a04c:	685b      	ldr	r3, [r3, #4]
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	79fa      	ldrb	r2, [r7, #7]
 800a052:	4906      	ldr	r1, [pc, #24]	; (800a06c <disk_initialize+0x48>)
 800a054:	440a      	add	r2, r1
 800a056:	7a12      	ldrb	r2, [r2, #8]
 800a058:	4610      	mov	r0, r2
 800a05a:	4798      	blx	r3
 800a05c:	4603      	mov	r3, r0
 800a05e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800a060:	7bfb      	ldrb	r3, [r7, #15]
}
 800a062:	4618      	mov	r0, r3
 800a064:	3710      	adds	r7, #16
 800a066:	46bd      	mov	sp, r7
 800a068:	bd80      	pop	{r7, pc}
 800a06a:	bf00      	nop
 800a06c:	2000172c 	.word	0x2000172c

0800a070 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800a070:	b590      	push	{r4, r7, lr}
 800a072:	b087      	sub	sp, #28
 800a074:	af00      	add	r7, sp, #0
 800a076:	60b9      	str	r1, [r7, #8]
 800a078:	607a      	str	r2, [r7, #4]
 800a07a:	603b      	str	r3, [r7, #0]
 800a07c:	4603      	mov	r3, r0
 800a07e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800a080:	7bfb      	ldrb	r3, [r7, #15]
 800a082:	4a0a      	ldr	r2, [pc, #40]	; (800a0ac <disk_read+0x3c>)
 800a084:	009b      	lsls	r3, r3, #2
 800a086:	4413      	add	r3, r2
 800a088:	685b      	ldr	r3, [r3, #4]
 800a08a:	689c      	ldr	r4, [r3, #8]
 800a08c:	7bfb      	ldrb	r3, [r7, #15]
 800a08e:	4a07      	ldr	r2, [pc, #28]	; (800a0ac <disk_read+0x3c>)
 800a090:	4413      	add	r3, r2
 800a092:	7a18      	ldrb	r0, [r3, #8]
 800a094:	683b      	ldr	r3, [r7, #0]
 800a096:	687a      	ldr	r2, [r7, #4]
 800a098:	68b9      	ldr	r1, [r7, #8]
 800a09a:	47a0      	blx	r4
 800a09c:	4603      	mov	r3, r0
 800a09e:	75fb      	strb	r3, [r7, #23]
  return res;
 800a0a0:	7dfb      	ldrb	r3, [r7, #23]
}
 800a0a2:	4618      	mov	r0, r3
 800a0a4:	371c      	adds	r7, #28
 800a0a6:	46bd      	mov	sp, r7
 800a0a8:	bd90      	pop	{r4, r7, pc}
 800a0aa:	bf00      	nop
 800a0ac:	2000172c 	.word	0x2000172c

0800a0b0 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800a0b0:	b590      	push	{r4, r7, lr}
 800a0b2:	b087      	sub	sp, #28
 800a0b4:	af00      	add	r7, sp, #0
 800a0b6:	60b9      	str	r1, [r7, #8]
 800a0b8:	607a      	str	r2, [r7, #4]
 800a0ba:	603b      	str	r3, [r7, #0]
 800a0bc:	4603      	mov	r3, r0
 800a0be:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800a0c0:	7bfb      	ldrb	r3, [r7, #15]
 800a0c2:	4a0a      	ldr	r2, [pc, #40]	; (800a0ec <disk_write+0x3c>)
 800a0c4:	009b      	lsls	r3, r3, #2
 800a0c6:	4413      	add	r3, r2
 800a0c8:	685b      	ldr	r3, [r3, #4]
 800a0ca:	68dc      	ldr	r4, [r3, #12]
 800a0cc:	7bfb      	ldrb	r3, [r7, #15]
 800a0ce:	4a07      	ldr	r2, [pc, #28]	; (800a0ec <disk_write+0x3c>)
 800a0d0:	4413      	add	r3, r2
 800a0d2:	7a18      	ldrb	r0, [r3, #8]
 800a0d4:	683b      	ldr	r3, [r7, #0]
 800a0d6:	687a      	ldr	r2, [r7, #4]
 800a0d8:	68b9      	ldr	r1, [r7, #8]
 800a0da:	47a0      	blx	r4
 800a0dc:	4603      	mov	r3, r0
 800a0de:	75fb      	strb	r3, [r7, #23]
  return res;
 800a0e0:	7dfb      	ldrb	r3, [r7, #23]
}
 800a0e2:	4618      	mov	r0, r3
 800a0e4:	371c      	adds	r7, #28
 800a0e6:	46bd      	mov	sp, r7
 800a0e8:	bd90      	pop	{r4, r7, pc}
 800a0ea:	bf00      	nop
 800a0ec:	2000172c 	.word	0x2000172c

0800a0f0 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800a0f0:	b580      	push	{r7, lr}
 800a0f2:	b084      	sub	sp, #16
 800a0f4:	af00      	add	r7, sp, #0
 800a0f6:	4603      	mov	r3, r0
 800a0f8:	603a      	str	r2, [r7, #0]
 800a0fa:	71fb      	strb	r3, [r7, #7]
 800a0fc:	460b      	mov	r3, r1
 800a0fe:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800a100:	79fb      	ldrb	r3, [r7, #7]
 800a102:	4a09      	ldr	r2, [pc, #36]	; (800a128 <disk_ioctl+0x38>)
 800a104:	009b      	lsls	r3, r3, #2
 800a106:	4413      	add	r3, r2
 800a108:	685b      	ldr	r3, [r3, #4]
 800a10a:	691b      	ldr	r3, [r3, #16]
 800a10c:	79fa      	ldrb	r2, [r7, #7]
 800a10e:	4906      	ldr	r1, [pc, #24]	; (800a128 <disk_ioctl+0x38>)
 800a110:	440a      	add	r2, r1
 800a112:	7a10      	ldrb	r0, [r2, #8]
 800a114:	79b9      	ldrb	r1, [r7, #6]
 800a116:	683a      	ldr	r2, [r7, #0]
 800a118:	4798      	blx	r3
 800a11a:	4603      	mov	r3, r0
 800a11c:	73fb      	strb	r3, [r7, #15]
  return res;
 800a11e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a120:	4618      	mov	r0, r3
 800a122:	3710      	adds	r7, #16
 800a124:	46bd      	mov	sp, r7
 800a126:	bd80      	pop	{r7, pc}
 800a128:	2000172c 	.word	0x2000172c

0800a12c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800a12c:	b480      	push	{r7}
 800a12e:	b085      	sub	sp, #20
 800a130:	af00      	add	r7, sp, #0
 800a132:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	3301      	adds	r3, #1
 800a138:	781b      	ldrb	r3, [r3, #0]
 800a13a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800a13c:	89fb      	ldrh	r3, [r7, #14]
 800a13e:	021b      	lsls	r3, r3, #8
 800a140:	b21a      	sxth	r2, r3
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	781b      	ldrb	r3, [r3, #0]
 800a146:	b21b      	sxth	r3, r3
 800a148:	4313      	orrs	r3, r2
 800a14a:	b21b      	sxth	r3, r3
 800a14c:	81fb      	strh	r3, [r7, #14]
	return rv;
 800a14e:	89fb      	ldrh	r3, [r7, #14]
}
 800a150:	4618      	mov	r0, r3
 800a152:	3714      	adds	r7, #20
 800a154:	46bd      	mov	sp, r7
 800a156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a15a:	4770      	bx	lr

0800a15c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800a15c:	b480      	push	{r7}
 800a15e:	b085      	sub	sp, #20
 800a160:	af00      	add	r7, sp, #0
 800a162:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	3303      	adds	r3, #3
 800a168:	781b      	ldrb	r3, [r3, #0]
 800a16a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	021b      	lsls	r3, r3, #8
 800a170:	687a      	ldr	r2, [r7, #4]
 800a172:	3202      	adds	r2, #2
 800a174:	7812      	ldrb	r2, [r2, #0]
 800a176:	4313      	orrs	r3, r2
 800a178:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	021b      	lsls	r3, r3, #8
 800a17e:	687a      	ldr	r2, [r7, #4]
 800a180:	3201      	adds	r2, #1
 800a182:	7812      	ldrb	r2, [r2, #0]
 800a184:	4313      	orrs	r3, r2
 800a186:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	021b      	lsls	r3, r3, #8
 800a18c:	687a      	ldr	r2, [r7, #4]
 800a18e:	7812      	ldrb	r2, [r2, #0]
 800a190:	4313      	orrs	r3, r2
 800a192:	60fb      	str	r3, [r7, #12]
	return rv;
 800a194:	68fb      	ldr	r3, [r7, #12]
}
 800a196:	4618      	mov	r0, r3
 800a198:	3714      	adds	r7, #20
 800a19a:	46bd      	mov	sp, r7
 800a19c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1a0:	4770      	bx	lr

0800a1a2 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800a1a2:	b480      	push	{r7}
 800a1a4:	b083      	sub	sp, #12
 800a1a6:	af00      	add	r7, sp, #0
 800a1a8:	6078      	str	r0, [r7, #4]
 800a1aa:	460b      	mov	r3, r1
 800a1ac:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	1c5a      	adds	r2, r3, #1
 800a1b2:	607a      	str	r2, [r7, #4]
 800a1b4:	887a      	ldrh	r2, [r7, #2]
 800a1b6:	b2d2      	uxtb	r2, r2
 800a1b8:	701a      	strb	r2, [r3, #0]
 800a1ba:	887b      	ldrh	r3, [r7, #2]
 800a1bc:	0a1b      	lsrs	r3, r3, #8
 800a1be:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	1c5a      	adds	r2, r3, #1
 800a1c4:	607a      	str	r2, [r7, #4]
 800a1c6:	887a      	ldrh	r2, [r7, #2]
 800a1c8:	b2d2      	uxtb	r2, r2
 800a1ca:	701a      	strb	r2, [r3, #0]
}
 800a1cc:	bf00      	nop
 800a1ce:	370c      	adds	r7, #12
 800a1d0:	46bd      	mov	sp, r7
 800a1d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1d6:	4770      	bx	lr

0800a1d8 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800a1d8:	b480      	push	{r7}
 800a1da:	b083      	sub	sp, #12
 800a1dc:	af00      	add	r7, sp, #0
 800a1de:	6078      	str	r0, [r7, #4]
 800a1e0:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	1c5a      	adds	r2, r3, #1
 800a1e6:	607a      	str	r2, [r7, #4]
 800a1e8:	683a      	ldr	r2, [r7, #0]
 800a1ea:	b2d2      	uxtb	r2, r2
 800a1ec:	701a      	strb	r2, [r3, #0]
 800a1ee:	683b      	ldr	r3, [r7, #0]
 800a1f0:	0a1b      	lsrs	r3, r3, #8
 800a1f2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	1c5a      	adds	r2, r3, #1
 800a1f8:	607a      	str	r2, [r7, #4]
 800a1fa:	683a      	ldr	r2, [r7, #0]
 800a1fc:	b2d2      	uxtb	r2, r2
 800a1fe:	701a      	strb	r2, [r3, #0]
 800a200:	683b      	ldr	r3, [r7, #0]
 800a202:	0a1b      	lsrs	r3, r3, #8
 800a204:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	1c5a      	adds	r2, r3, #1
 800a20a:	607a      	str	r2, [r7, #4]
 800a20c:	683a      	ldr	r2, [r7, #0]
 800a20e:	b2d2      	uxtb	r2, r2
 800a210:	701a      	strb	r2, [r3, #0]
 800a212:	683b      	ldr	r3, [r7, #0]
 800a214:	0a1b      	lsrs	r3, r3, #8
 800a216:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	1c5a      	adds	r2, r3, #1
 800a21c:	607a      	str	r2, [r7, #4]
 800a21e:	683a      	ldr	r2, [r7, #0]
 800a220:	b2d2      	uxtb	r2, r2
 800a222:	701a      	strb	r2, [r3, #0]
}
 800a224:	bf00      	nop
 800a226:	370c      	adds	r7, #12
 800a228:	46bd      	mov	sp, r7
 800a22a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a22e:	4770      	bx	lr

0800a230 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800a230:	b480      	push	{r7}
 800a232:	b087      	sub	sp, #28
 800a234:	af00      	add	r7, sp, #0
 800a236:	60f8      	str	r0, [r7, #12]
 800a238:	60b9      	str	r1, [r7, #8]
 800a23a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800a240:	68bb      	ldr	r3, [r7, #8]
 800a242:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	2b00      	cmp	r3, #0
 800a248:	d00d      	beq.n	800a266 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800a24a:	693a      	ldr	r2, [r7, #16]
 800a24c:	1c53      	adds	r3, r2, #1
 800a24e:	613b      	str	r3, [r7, #16]
 800a250:	697b      	ldr	r3, [r7, #20]
 800a252:	1c59      	adds	r1, r3, #1
 800a254:	6179      	str	r1, [r7, #20]
 800a256:	7812      	ldrb	r2, [r2, #0]
 800a258:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	3b01      	subs	r3, #1
 800a25e:	607b      	str	r3, [r7, #4]
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	2b00      	cmp	r3, #0
 800a264:	d1f1      	bne.n	800a24a <mem_cpy+0x1a>
	}
}
 800a266:	bf00      	nop
 800a268:	371c      	adds	r7, #28
 800a26a:	46bd      	mov	sp, r7
 800a26c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a270:	4770      	bx	lr

0800a272 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800a272:	b480      	push	{r7}
 800a274:	b087      	sub	sp, #28
 800a276:	af00      	add	r7, sp, #0
 800a278:	60f8      	str	r0, [r7, #12]
 800a27a:	60b9      	str	r1, [r7, #8]
 800a27c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800a282:	697b      	ldr	r3, [r7, #20]
 800a284:	1c5a      	adds	r2, r3, #1
 800a286:	617a      	str	r2, [r7, #20]
 800a288:	68ba      	ldr	r2, [r7, #8]
 800a28a:	b2d2      	uxtb	r2, r2
 800a28c:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	3b01      	subs	r3, #1
 800a292:	607b      	str	r3, [r7, #4]
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	2b00      	cmp	r3, #0
 800a298:	d1f3      	bne.n	800a282 <mem_set+0x10>
}
 800a29a:	bf00      	nop
 800a29c:	bf00      	nop
 800a29e:	371c      	adds	r7, #28
 800a2a0:	46bd      	mov	sp, r7
 800a2a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2a6:	4770      	bx	lr

0800a2a8 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800a2a8:	b480      	push	{r7}
 800a2aa:	b089      	sub	sp, #36	; 0x24
 800a2ac:	af00      	add	r7, sp, #0
 800a2ae:	60f8      	str	r0, [r7, #12]
 800a2b0:	60b9      	str	r1, [r7, #8]
 800a2b2:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	61fb      	str	r3, [r7, #28]
 800a2b8:	68bb      	ldr	r3, [r7, #8]
 800a2ba:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800a2bc:	2300      	movs	r3, #0
 800a2be:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800a2c0:	69fb      	ldr	r3, [r7, #28]
 800a2c2:	1c5a      	adds	r2, r3, #1
 800a2c4:	61fa      	str	r2, [r7, #28]
 800a2c6:	781b      	ldrb	r3, [r3, #0]
 800a2c8:	4619      	mov	r1, r3
 800a2ca:	69bb      	ldr	r3, [r7, #24]
 800a2cc:	1c5a      	adds	r2, r3, #1
 800a2ce:	61ba      	str	r2, [r7, #24]
 800a2d0:	781b      	ldrb	r3, [r3, #0]
 800a2d2:	1acb      	subs	r3, r1, r3
 800a2d4:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	3b01      	subs	r3, #1
 800a2da:	607b      	str	r3, [r7, #4]
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d002      	beq.n	800a2e8 <mem_cmp+0x40>
 800a2e2:	697b      	ldr	r3, [r7, #20]
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d0eb      	beq.n	800a2c0 <mem_cmp+0x18>

	return r;
 800a2e8:	697b      	ldr	r3, [r7, #20]
}
 800a2ea:	4618      	mov	r0, r3
 800a2ec:	3724      	adds	r7, #36	; 0x24
 800a2ee:	46bd      	mov	sp, r7
 800a2f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2f4:	4770      	bx	lr

0800a2f6 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800a2f6:	b480      	push	{r7}
 800a2f8:	b083      	sub	sp, #12
 800a2fa:	af00      	add	r7, sp, #0
 800a2fc:	6078      	str	r0, [r7, #4]
 800a2fe:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800a300:	e002      	b.n	800a308 <chk_chr+0x12>
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	3301      	adds	r3, #1
 800a306:	607b      	str	r3, [r7, #4]
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	781b      	ldrb	r3, [r3, #0]
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d005      	beq.n	800a31c <chk_chr+0x26>
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	781b      	ldrb	r3, [r3, #0]
 800a314:	461a      	mov	r2, r3
 800a316:	683b      	ldr	r3, [r7, #0]
 800a318:	4293      	cmp	r3, r2
 800a31a:	d1f2      	bne.n	800a302 <chk_chr+0xc>
	return *str;
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	781b      	ldrb	r3, [r3, #0]
}
 800a320:	4618      	mov	r0, r3
 800a322:	370c      	adds	r7, #12
 800a324:	46bd      	mov	sp, r7
 800a326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a32a:	4770      	bx	lr

0800a32c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800a32c:	b480      	push	{r7}
 800a32e:	b085      	sub	sp, #20
 800a330:	af00      	add	r7, sp, #0
 800a332:	6078      	str	r0, [r7, #4]
 800a334:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800a336:	2300      	movs	r3, #0
 800a338:	60bb      	str	r3, [r7, #8]
 800a33a:	68bb      	ldr	r3, [r7, #8]
 800a33c:	60fb      	str	r3, [r7, #12]
 800a33e:	e029      	b.n	800a394 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800a340:	4a27      	ldr	r2, [pc, #156]	; (800a3e0 <chk_lock+0xb4>)
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	011b      	lsls	r3, r3, #4
 800a346:	4413      	add	r3, r2
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	d01d      	beq.n	800a38a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800a34e:	4a24      	ldr	r2, [pc, #144]	; (800a3e0 <chk_lock+0xb4>)
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	011b      	lsls	r3, r3, #4
 800a354:	4413      	add	r3, r2
 800a356:	681a      	ldr	r2, [r3, #0]
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	429a      	cmp	r2, r3
 800a35e:	d116      	bne.n	800a38e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800a360:	4a1f      	ldr	r2, [pc, #124]	; (800a3e0 <chk_lock+0xb4>)
 800a362:	68fb      	ldr	r3, [r7, #12]
 800a364:	011b      	lsls	r3, r3, #4
 800a366:	4413      	add	r3, r2
 800a368:	3304      	adds	r3, #4
 800a36a:	681a      	ldr	r2, [r3, #0]
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800a370:	429a      	cmp	r2, r3
 800a372:	d10c      	bne.n	800a38e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800a374:	4a1a      	ldr	r2, [pc, #104]	; (800a3e0 <chk_lock+0xb4>)
 800a376:	68fb      	ldr	r3, [r7, #12]
 800a378:	011b      	lsls	r3, r3, #4
 800a37a:	4413      	add	r3, r2
 800a37c:	3308      	adds	r3, #8
 800a37e:	681a      	ldr	r2, [r3, #0]
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800a384:	429a      	cmp	r2, r3
 800a386:	d102      	bne.n	800a38e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800a388:	e007      	b.n	800a39a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800a38a:	2301      	movs	r3, #1
 800a38c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800a38e:	68fb      	ldr	r3, [r7, #12]
 800a390:	3301      	adds	r3, #1
 800a392:	60fb      	str	r3, [r7, #12]
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	2b01      	cmp	r3, #1
 800a398:	d9d2      	bls.n	800a340 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	2b02      	cmp	r3, #2
 800a39e:	d109      	bne.n	800a3b4 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800a3a0:	68bb      	ldr	r3, [r7, #8]
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	d102      	bne.n	800a3ac <chk_lock+0x80>
 800a3a6:	683b      	ldr	r3, [r7, #0]
 800a3a8:	2b02      	cmp	r3, #2
 800a3aa:	d101      	bne.n	800a3b0 <chk_lock+0x84>
 800a3ac:	2300      	movs	r3, #0
 800a3ae:	e010      	b.n	800a3d2 <chk_lock+0xa6>
 800a3b0:	2312      	movs	r3, #18
 800a3b2:	e00e      	b.n	800a3d2 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800a3b4:	683b      	ldr	r3, [r7, #0]
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d108      	bne.n	800a3cc <chk_lock+0xa0>
 800a3ba:	4a09      	ldr	r2, [pc, #36]	; (800a3e0 <chk_lock+0xb4>)
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	011b      	lsls	r3, r3, #4
 800a3c0:	4413      	add	r3, r2
 800a3c2:	330c      	adds	r3, #12
 800a3c4:	881b      	ldrh	r3, [r3, #0]
 800a3c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a3ca:	d101      	bne.n	800a3d0 <chk_lock+0xa4>
 800a3cc:	2310      	movs	r3, #16
 800a3ce:	e000      	b.n	800a3d2 <chk_lock+0xa6>
 800a3d0:	2300      	movs	r3, #0
}
 800a3d2:	4618      	mov	r0, r3
 800a3d4:	3714      	adds	r7, #20
 800a3d6:	46bd      	mov	sp, r7
 800a3d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3dc:	4770      	bx	lr
 800a3de:	bf00      	nop
 800a3e0:	2000150c 	.word	0x2000150c

0800a3e4 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800a3e4:	b480      	push	{r7}
 800a3e6:	b083      	sub	sp, #12
 800a3e8:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800a3ea:	2300      	movs	r3, #0
 800a3ec:	607b      	str	r3, [r7, #4]
 800a3ee:	e002      	b.n	800a3f6 <enq_lock+0x12>
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	3301      	adds	r3, #1
 800a3f4:	607b      	str	r3, [r7, #4]
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	2b01      	cmp	r3, #1
 800a3fa:	d806      	bhi.n	800a40a <enq_lock+0x26>
 800a3fc:	4a09      	ldr	r2, [pc, #36]	; (800a424 <enq_lock+0x40>)
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	011b      	lsls	r3, r3, #4
 800a402:	4413      	add	r3, r2
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	2b00      	cmp	r3, #0
 800a408:	d1f2      	bne.n	800a3f0 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	2b02      	cmp	r3, #2
 800a40e:	bf14      	ite	ne
 800a410:	2301      	movne	r3, #1
 800a412:	2300      	moveq	r3, #0
 800a414:	b2db      	uxtb	r3, r3
}
 800a416:	4618      	mov	r0, r3
 800a418:	370c      	adds	r7, #12
 800a41a:	46bd      	mov	sp, r7
 800a41c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a420:	4770      	bx	lr
 800a422:	bf00      	nop
 800a424:	2000150c 	.word	0x2000150c

0800a428 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800a428:	b480      	push	{r7}
 800a42a:	b085      	sub	sp, #20
 800a42c:	af00      	add	r7, sp, #0
 800a42e:	6078      	str	r0, [r7, #4]
 800a430:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800a432:	2300      	movs	r3, #0
 800a434:	60fb      	str	r3, [r7, #12]
 800a436:	e01f      	b.n	800a478 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800a438:	4a41      	ldr	r2, [pc, #260]	; (800a540 <inc_lock+0x118>)
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	011b      	lsls	r3, r3, #4
 800a43e:	4413      	add	r3, r2
 800a440:	681a      	ldr	r2, [r3, #0]
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	429a      	cmp	r2, r3
 800a448:	d113      	bne.n	800a472 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800a44a:	4a3d      	ldr	r2, [pc, #244]	; (800a540 <inc_lock+0x118>)
 800a44c:	68fb      	ldr	r3, [r7, #12]
 800a44e:	011b      	lsls	r3, r3, #4
 800a450:	4413      	add	r3, r2
 800a452:	3304      	adds	r3, #4
 800a454:	681a      	ldr	r2, [r3, #0]
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800a45a:	429a      	cmp	r2, r3
 800a45c:	d109      	bne.n	800a472 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800a45e:	4a38      	ldr	r2, [pc, #224]	; (800a540 <inc_lock+0x118>)
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	011b      	lsls	r3, r3, #4
 800a464:	4413      	add	r3, r2
 800a466:	3308      	adds	r3, #8
 800a468:	681a      	ldr	r2, [r3, #0]
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800a46e:	429a      	cmp	r2, r3
 800a470:	d006      	beq.n	800a480 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	3301      	adds	r3, #1
 800a476:	60fb      	str	r3, [r7, #12]
 800a478:	68fb      	ldr	r3, [r7, #12]
 800a47a:	2b01      	cmp	r3, #1
 800a47c:	d9dc      	bls.n	800a438 <inc_lock+0x10>
 800a47e:	e000      	b.n	800a482 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800a480:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800a482:	68fb      	ldr	r3, [r7, #12]
 800a484:	2b02      	cmp	r3, #2
 800a486:	d132      	bne.n	800a4ee <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800a488:	2300      	movs	r3, #0
 800a48a:	60fb      	str	r3, [r7, #12]
 800a48c:	e002      	b.n	800a494 <inc_lock+0x6c>
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	3301      	adds	r3, #1
 800a492:	60fb      	str	r3, [r7, #12]
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	2b01      	cmp	r3, #1
 800a498:	d806      	bhi.n	800a4a8 <inc_lock+0x80>
 800a49a:	4a29      	ldr	r2, [pc, #164]	; (800a540 <inc_lock+0x118>)
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	011b      	lsls	r3, r3, #4
 800a4a0:	4413      	add	r3, r2
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	d1f2      	bne.n	800a48e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	2b02      	cmp	r3, #2
 800a4ac:	d101      	bne.n	800a4b2 <inc_lock+0x8a>
 800a4ae:	2300      	movs	r3, #0
 800a4b0:	e040      	b.n	800a534 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	681a      	ldr	r2, [r3, #0]
 800a4b6:	4922      	ldr	r1, [pc, #136]	; (800a540 <inc_lock+0x118>)
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	011b      	lsls	r3, r3, #4
 800a4bc:	440b      	add	r3, r1
 800a4be:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	689a      	ldr	r2, [r3, #8]
 800a4c4:	491e      	ldr	r1, [pc, #120]	; (800a540 <inc_lock+0x118>)
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	011b      	lsls	r3, r3, #4
 800a4ca:	440b      	add	r3, r1
 800a4cc:	3304      	adds	r3, #4
 800a4ce:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	695a      	ldr	r2, [r3, #20]
 800a4d4:	491a      	ldr	r1, [pc, #104]	; (800a540 <inc_lock+0x118>)
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	011b      	lsls	r3, r3, #4
 800a4da:	440b      	add	r3, r1
 800a4dc:	3308      	adds	r3, #8
 800a4de:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800a4e0:	4a17      	ldr	r2, [pc, #92]	; (800a540 <inc_lock+0x118>)
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	011b      	lsls	r3, r3, #4
 800a4e6:	4413      	add	r3, r2
 800a4e8:	330c      	adds	r3, #12
 800a4ea:	2200      	movs	r2, #0
 800a4ec:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800a4ee:	683b      	ldr	r3, [r7, #0]
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d009      	beq.n	800a508 <inc_lock+0xe0>
 800a4f4:	4a12      	ldr	r2, [pc, #72]	; (800a540 <inc_lock+0x118>)
 800a4f6:	68fb      	ldr	r3, [r7, #12]
 800a4f8:	011b      	lsls	r3, r3, #4
 800a4fa:	4413      	add	r3, r2
 800a4fc:	330c      	adds	r3, #12
 800a4fe:	881b      	ldrh	r3, [r3, #0]
 800a500:	2b00      	cmp	r3, #0
 800a502:	d001      	beq.n	800a508 <inc_lock+0xe0>
 800a504:	2300      	movs	r3, #0
 800a506:	e015      	b.n	800a534 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800a508:	683b      	ldr	r3, [r7, #0]
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d108      	bne.n	800a520 <inc_lock+0xf8>
 800a50e:	4a0c      	ldr	r2, [pc, #48]	; (800a540 <inc_lock+0x118>)
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	011b      	lsls	r3, r3, #4
 800a514:	4413      	add	r3, r2
 800a516:	330c      	adds	r3, #12
 800a518:	881b      	ldrh	r3, [r3, #0]
 800a51a:	3301      	adds	r3, #1
 800a51c:	b29a      	uxth	r2, r3
 800a51e:	e001      	b.n	800a524 <inc_lock+0xfc>
 800a520:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a524:	4906      	ldr	r1, [pc, #24]	; (800a540 <inc_lock+0x118>)
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	011b      	lsls	r3, r3, #4
 800a52a:	440b      	add	r3, r1
 800a52c:	330c      	adds	r3, #12
 800a52e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800a530:	68fb      	ldr	r3, [r7, #12]
 800a532:	3301      	adds	r3, #1
}
 800a534:	4618      	mov	r0, r3
 800a536:	3714      	adds	r7, #20
 800a538:	46bd      	mov	sp, r7
 800a53a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a53e:	4770      	bx	lr
 800a540:	2000150c 	.word	0x2000150c

0800a544 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800a544:	b480      	push	{r7}
 800a546:	b085      	sub	sp, #20
 800a548:	af00      	add	r7, sp, #0
 800a54a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800a54c:	2300      	movs	r3, #0
 800a54e:	60fb      	str	r3, [r7, #12]
 800a550:	e010      	b.n	800a574 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800a552:	4a0d      	ldr	r2, [pc, #52]	; (800a588 <clear_lock+0x44>)
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	011b      	lsls	r3, r3, #4
 800a558:	4413      	add	r3, r2
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	687a      	ldr	r2, [r7, #4]
 800a55e:	429a      	cmp	r2, r3
 800a560:	d105      	bne.n	800a56e <clear_lock+0x2a>
 800a562:	4a09      	ldr	r2, [pc, #36]	; (800a588 <clear_lock+0x44>)
 800a564:	68fb      	ldr	r3, [r7, #12]
 800a566:	011b      	lsls	r3, r3, #4
 800a568:	4413      	add	r3, r2
 800a56a:	2200      	movs	r2, #0
 800a56c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	3301      	adds	r3, #1
 800a572:	60fb      	str	r3, [r7, #12]
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	2b01      	cmp	r3, #1
 800a578:	d9eb      	bls.n	800a552 <clear_lock+0xe>
	}
}
 800a57a:	bf00      	nop
 800a57c:	bf00      	nop
 800a57e:	3714      	adds	r7, #20
 800a580:	46bd      	mov	sp, r7
 800a582:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a586:	4770      	bx	lr
 800a588:	2000150c 	.word	0x2000150c

0800a58c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800a58c:	b580      	push	{r7, lr}
 800a58e:	b086      	sub	sp, #24
 800a590:	af00      	add	r7, sp, #0
 800a592:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800a594:	2300      	movs	r3, #0
 800a596:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	78db      	ldrb	r3, [r3, #3]
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	d034      	beq.n	800a60a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a5a4:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	7858      	ldrb	r0, [r3, #1]
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800a5b0:	2301      	movs	r3, #1
 800a5b2:	697a      	ldr	r2, [r7, #20]
 800a5b4:	f7ff fd7c 	bl	800a0b0 <disk_write>
 800a5b8:	4603      	mov	r3, r0
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	d002      	beq.n	800a5c4 <sync_window+0x38>
			res = FR_DISK_ERR;
 800a5be:	2301      	movs	r3, #1
 800a5c0:	73fb      	strb	r3, [r7, #15]
 800a5c2:	e022      	b.n	800a60a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	2200      	movs	r2, #0
 800a5c8:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5ce:	697a      	ldr	r2, [r7, #20]
 800a5d0:	1ad2      	subs	r2, r2, r3
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	6a1b      	ldr	r3, [r3, #32]
 800a5d6:	429a      	cmp	r2, r3
 800a5d8:	d217      	bcs.n	800a60a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	789b      	ldrb	r3, [r3, #2]
 800a5de:	613b      	str	r3, [r7, #16]
 800a5e0:	e010      	b.n	800a604 <sync_window+0x78>
					wsect += fs->fsize;
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	6a1b      	ldr	r3, [r3, #32]
 800a5e6:	697a      	ldr	r2, [r7, #20]
 800a5e8:	4413      	add	r3, r2
 800a5ea:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	7858      	ldrb	r0, [r3, #1]
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800a5f6:	2301      	movs	r3, #1
 800a5f8:	697a      	ldr	r2, [r7, #20]
 800a5fa:	f7ff fd59 	bl	800a0b0 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800a5fe:	693b      	ldr	r3, [r7, #16]
 800a600:	3b01      	subs	r3, #1
 800a602:	613b      	str	r3, [r7, #16]
 800a604:	693b      	ldr	r3, [r7, #16]
 800a606:	2b01      	cmp	r3, #1
 800a608:	d8eb      	bhi.n	800a5e2 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800a60a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a60c:	4618      	mov	r0, r3
 800a60e:	3718      	adds	r7, #24
 800a610:	46bd      	mov	sp, r7
 800a612:	bd80      	pop	{r7, pc}

0800a614 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800a614:	b580      	push	{r7, lr}
 800a616:	b084      	sub	sp, #16
 800a618:	af00      	add	r7, sp, #0
 800a61a:	6078      	str	r0, [r7, #4]
 800a61c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800a61e:	2300      	movs	r3, #0
 800a620:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a626:	683a      	ldr	r2, [r7, #0]
 800a628:	429a      	cmp	r2, r3
 800a62a:	d01b      	beq.n	800a664 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800a62c:	6878      	ldr	r0, [r7, #4]
 800a62e:	f7ff ffad 	bl	800a58c <sync_window>
 800a632:	4603      	mov	r3, r0
 800a634:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800a636:	7bfb      	ldrb	r3, [r7, #15]
 800a638:	2b00      	cmp	r3, #0
 800a63a:	d113      	bne.n	800a664 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	7858      	ldrb	r0, [r3, #1]
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800a646:	2301      	movs	r3, #1
 800a648:	683a      	ldr	r2, [r7, #0]
 800a64a:	f7ff fd11 	bl	800a070 <disk_read>
 800a64e:	4603      	mov	r3, r0
 800a650:	2b00      	cmp	r3, #0
 800a652:	d004      	beq.n	800a65e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800a654:	f04f 33ff 	mov.w	r3, #4294967295
 800a658:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800a65a:	2301      	movs	r3, #1
 800a65c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	683a      	ldr	r2, [r7, #0]
 800a662:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 800a664:	7bfb      	ldrb	r3, [r7, #15]
}
 800a666:	4618      	mov	r0, r3
 800a668:	3710      	adds	r7, #16
 800a66a:	46bd      	mov	sp, r7
 800a66c:	bd80      	pop	{r7, pc}
	...

0800a670 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800a670:	b580      	push	{r7, lr}
 800a672:	b084      	sub	sp, #16
 800a674:	af00      	add	r7, sp, #0
 800a676:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800a678:	6878      	ldr	r0, [r7, #4]
 800a67a:	f7ff ff87 	bl	800a58c <sync_window>
 800a67e:	4603      	mov	r3, r0
 800a680:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800a682:	7bfb      	ldrb	r3, [r7, #15]
 800a684:	2b00      	cmp	r3, #0
 800a686:	d159      	bne.n	800a73c <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	781b      	ldrb	r3, [r3, #0]
 800a68c:	2b03      	cmp	r3, #3
 800a68e:	d149      	bne.n	800a724 <sync_fs+0xb4>
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	791b      	ldrb	r3, [r3, #4]
 800a694:	2b01      	cmp	r3, #1
 800a696:	d145      	bne.n	800a724 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	899b      	ldrh	r3, [r3, #12]
 800a6a2:	461a      	mov	r2, r3
 800a6a4:	2100      	movs	r1, #0
 800a6a6:	f7ff fde4 	bl	800a272 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	3338      	adds	r3, #56	; 0x38
 800a6ae:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800a6b2:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800a6b6:	4618      	mov	r0, r3
 800a6b8:	f7ff fd73 	bl	800a1a2 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	3338      	adds	r3, #56	; 0x38
 800a6c0:	4921      	ldr	r1, [pc, #132]	; (800a748 <sync_fs+0xd8>)
 800a6c2:	4618      	mov	r0, r3
 800a6c4:	f7ff fd88 	bl	800a1d8 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	3338      	adds	r3, #56	; 0x38
 800a6cc:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800a6d0:	491e      	ldr	r1, [pc, #120]	; (800a74c <sync_fs+0xdc>)
 800a6d2:	4618      	mov	r0, r3
 800a6d4:	f7ff fd80 	bl	800a1d8 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	3338      	adds	r3, #56	; 0x38
 800a6dc:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	699b      	ldr	r3, [r3, #24]
 800a6e4:	4619      	mov	r1, r3
 800a6e6:	4610      	mov	r0, r2
 800a6e8:	f7ff fd76 	bl	800a1d8 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	3338      	adds	r3, #56	; 0x38
 800a6f0:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	695b      	ldr	r3, [r3, #20]
 800a6f8:	4619      	mov	r1, r3
 800a6fa:	4610      	mov	r0, r2
 800a6fc:	f7ff fd6c 	bl	800a1d8 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a704:	1c5a      	adds	r2, r3, #1
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	7858      	ldrb	r0, [r3, #1]
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a718:	2301      	movs	r3, #1
 800a71a:	f7ff fcc9 	bl	800a0b0 <disk_write>
			fs->fsi_flag = 0;
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	2200      	movs	r2, #0
 800a722:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	785b      	ldrb	r3, [r3, #1]
 800a728:	2200      	movs	r2, #0
 800a72a:	2100      	movs	r1, #0
 800a72c:	4618      	mov	r0, r3
 800a72e:	f7ff fcdf 	bl	800a0f0 <disk_ioctl>
 800a732:	4603      	mov	r3, r0
 800a734:	2b00      	cmp	r3, #0
 800a736:	d001      	beq.n	800a73c <sync_fs+0xcc>
 800a738:	2301      	movs	r3, #1
 800a73a:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800a73c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a73e:	4618      	mov	r0, r3
 800a740:	3710      	adds	r7, #16
 800a742:	46bd      	mov	sp, r7
 800a744:	bd80      	pop	{r7, pc}
 800a746:	bf00      	nop
 800a748:	41615252 	.word	0x41615252
 800a74c:	61417272 	.word	0x61417272

0800a750 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800a750:	b480      	push	{r7}
 800a752:	b083      	sub	sp, #12
 800a754:	af00      	add	r7, sp, #0
 800a756:	6078      	str	r0, [r7, #4]
 800a758:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800a75a:	683b      	ldr	r3, [r7, #0]
 800a75c:	3b02      	subs	r3, #2
 800a75e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	69db      	ldr	r3, [r3, #28]
 800a764:	3b02      	subs	r3, #2
 800a766:	683a      	ldr	r2, [r7, #0]
 800a768:	429a      	cmp	r2, r3
 800a76a:	d301      	bcc.n	800a770 <clust2sect+0x20>
 800a76c:	2300      	movs	r3, #0
 800a76e:	e008      	b.n	800a782 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	895b      	ldrh	r3, [r3, #10]
 800a774:	461a      	mov	r2, r3
 800a776:	683b      	ldr	r3, [r7, #0]
 800a778:	fb03 f202 	mul.w	r2, r3, r2
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a780:	4413      	add	r3, r2
}
 800a782:	4618      	mov	r0, r3
 800a784:	370c      	adds	r7, #12
 800a786:	46bd      	mov	sp, r7
 800a788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a78c:	4770      	bx	lr

0800a78e <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800a78e:	b580      	push	{r7, lr}
 800a790:	b086      	sub	sp, #24
 800a792:	af00      	add	r7, sp, #0
 800a794:	6078      	str	r0, [r7, #4]
 800a796:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800a79e:	683b      	ldr	r3, [r7, #0]
 800a7a0:	2b01      	cmp	r3, #1
 800a7a2:	d904      	bls.n	800a7ae <get_fat+0x20>
 800a7a4:	693b      	ldr	r3, [r7, #16]
 800a7a6:	69db      	ldr	r3, [r3, #28]
 800a7a8:	683a      	ldr	r2, [r7, #0]
 800a7aa:	429a      	cmp	r2, r3
 800a7ac:	d302      	bcc.n	800a7b4 <get_fat+0x26>
		val = 1;	/* Internal error */
 800a7ae:	2301      	movs	r3, #1
 800a7b0:	617b      	str	r3, [r7, #20]
 800a7b2:	e0bb      	b.n	800a92c <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800a7b4:	f04f 33ff 	mov.w	r3, #4294967295
 800a7b8:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800a7ba:	693b      	ldr	r3, [r7, #16]
 800a7bc:	781b      	ldrb	r3, [r3, #0]
 800a7be:	2b03      	cmp	r3, #3
 800a7c0:	f000 8083 	beq.w	800a8ca <get_fat+0x13c>
 800a7c4:	2b03      	cmp	r3, #3
 800a7c6:	f300 80a7 	bgt.w	800a918 <get_fat+0x18a>
 800a7ca:	2b01      	cmp	r3, #1
 800a7cc:	d002      	beq.n	800a7d4 <get_fat+0x46>
 800a7ce:	2b02      	cmp	r3, #2
 800a7d0:	d056      	beq.n	800a880 <get_fat+0xf2>
 800a7d2:	e0a1      	b.n	800a918 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800a7d4:	683b      	ldr	r3, [r7, #0]
 800a7d6:	60fb      	str	r3, [r7, #12]
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	085b      	lsrs	r3, r3, #1
 800a7dc:	68fa      	ldr	r2, [r7, #12]
 800a7de:	4413      	add	r3, r2
 800a7e0:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a7e2:	693b      	ldr	r3, [r7, #16]
 800a7e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a7e6:	693b      	ldr	r3, [r7, #16]
 800a7e8:	899b      	ldrh	r3, [r3, #12]
 800a7ea:	4619      	mov	r1, r3
 800a7ec:	68fb      	ldr	r3, [r7, #12]
 800a7ee:	fbb3 f3f1 	udiv	r3, r3, r1
 800a7f2:	4413      	add	r3, r2
 800a7f4:	4619      	mov	r1, r3
 800a7f6:	6938      	ldr	r0, [r7, #16]
 800a7f8:	f7ff ff0c 	bl	800a614 <move_window>
 800a7fc:	4603      	mov	r3, r0
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	f040 808d 	bne.w	800a91e <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 800a804:	68fb      	ldr	r3, [r7, #12]
 800a806:	1c5a      	adds	r2, r3, #1
 800a808:	60fa      	str	r2, [r7, #12]
 800a80a:	693a      	ldr	r2, [r7, #16]
 800a80c:	8992      	ldrh	r2, [r2, #12]
 800a80e:	fbb3 f1f2 	udiv	r1, r3, r2
 800a812:	fb01 f202 	mul.w	r2, r1, r2
 800a816:	1a9b      	subs	r3, r3, r2
 800a818:	693a      	ldr	r2, [r7, #16]
 800a81a:	4413      	add	r3, r2
 800a81c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800a820:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a822:	693b      	ldr	r3, [r7, #16]
 800a824:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a826:	693b      	ldr	r3, [r7, #16]
 800a828:	899b      	ldrh	r3, [r3, #12]
 800a82a:	4619      	mov	r1, r3
 800a82c:	68fb      	ldr	r3, [r7, #12]
 800a82e:	fbb3 f3f1 	udiv	r3, r3, r1
 800a832:	4413      	add	r3, r2
 800a834:	4619      	mov	r1, r3
 800a836:	6938      	ldr	r0, [r7, #16]
 800a838:	f7ff feec 	bl	800a614 <move_window>
 800a83c:	4603      	mov	r3, r0
 800a83e:	2b00      	cmp	r3, #0
 800a840:	d16f      	bne.n	800a922 <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 800a842:	693b      	ldr	r3, [r7, #16]
 800a844:	899b      	ldrh	r3, [r3, #12]
 800a846:	461a      	mov	r2, r3
 800a848:	68fb      	ldr	r3, [r7, #12]
 800a84a:	fbb3 f1f2 	udiv	r1, r3, r2
 800a84e:	fb01 f202 	mul.w	r2, r1, r2
 800a852:	1a9b      	subs	r3, r3, r2
 800a854:	693a      	ldr	r2, [r7, #16]
 800a856:	4413      	add	r3, r2
 800a858:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800a85c:	021b      	lsls	r3, r3, #8
 800a85e:	461a      	mov	r2, r3
 800a860:	68bb      	ldr	r3, [r7, #8]
 800a862:	4313      	orrs	r3, r2
 800a864:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800a866:	683b      	ldr	r3, [r7, #0]
 800a868:	f003 0301 	and.w	r3, r3, #1
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	d002      	beq.n	800a876 <get_fat+0xe8>
 800a870:	68bb      	ldr	r3, [r7, #8]
 800a872:	091b      	lsrs	r3, r3, #4
 800a874:	e002      	b.n	800a87c <get_fat+0xee>
 800a876:	68bb      	ldr	r3, [r7, #8]
 800a878:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a87c:	617b      	str	r3, [r7, #20]
			break;
 800a87e:	e055      	b.n	800a92c <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800a880:	693b      	ldr	r3, [r7, #16]
 800a882:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a884:	693b      	ldr	r3, [r7, #16]
 800a886:	899b      	ldrh	r3, [r3, #12]
 800a888:	085b      	lsrs	r3, r3, #1
 800a88a:	b29b      	uxth	r3, r3
 800a88c:	4619      	mov	r1, r3
 800a88e:	683b      	ldr	r3, [r7, #0]
 800a890:	fbb3 f3f1 	udiv	r3, r3, r1
 800a894:	4413      	add	r3, r2
 800a896:	4619      	mov	r1, r3
 800a898:	6938      	ldr	r0, [r7, #16]
 800a89a:	f7ff febb 	bl	800a614 <move_window>
 800a89e:	4603      	mov	r3, r0
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	d140      	bne.n	800a926 <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800a8a4:	693b      	ldr	r3, [r7, #16]
 800a8a6:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800a8aa:	683b      	ldr	r3, [r7, #0]
 800a8ac:	005b      	lsls	r3, r3, #1
 800a8ae:	693a      	ldr	r2, [r7, #16]
 800a8b0:	8992      	ldrh	r2, [r2, #12]
 800a8b2:	fbb3 f0f2 	udiv	r0, r3, r2
 800a8b6:	fb00 f202 	mul.w	r2, r0, r2
 800a8ba:	1a9b      	subs	r3, r3, r2
 800a8bc:	440b      	add	r3, r1
 800a8be:	4618      	mov	r0, r3
 800a8c0:	f7ff fc34 	bl	800a12c <ld_word>
 800a8c4:	4603      	mov	r3, r0
 800a8c6:	617b      	str	r3, [r7, #20]
			break;
 800a8c8:	e030      	b.n	800a92c <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800a8ca:	693b      	ldr	r3, [r7, #16]
 800a8cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a8ce:	693b      	ldr	r3, [r7, #16]
 800a8d0:	899b      	ldrh	r3, [r3, #12]
 800a8d2:	089b      	lsrs	r3, r3, #2
 800a8d4:	b29b      	uxth	r3, r3
 800a8d6:	4619      	mov	r1, r3
 800a8d8:	683b      	ldr	r3, [r7, #0]
 800a8da:	fbb3 f3f1 	udiv	r3, r3, r1
 800a8de:	4413      	add	r3, r2
 800a8e0:	4619      	mov	r1, r3
 800a8e2:	6938      	ldr	r0, [r7, #16]
 800a8e4:	f7ff fe96 	bl	800a614 <move_window>
 800a8e8:	4603      	mov	r3, r0
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	d11d      	bne.n	800a92a <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800a8ee:	693b      	ldr	r3, [r7, #16]
 800a8f0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800a8f4:	683b      	ldr	r3, [r7, #0]
 800a8f6:	009b      	lsls	r3, r3, #2
 800a8f8:	693a      	ldr	r2, [r7, #16]
 800a8fa:	8992      	ldrh	r2, [r2, #12]
 800a8fc:	fbb3 f0f2 	udiv	r0, r3, r2
 800a900:	fb00 f202 	mul.w	r2, r0, r2
 800a904:	1a9b      	subs	r3, r3, r2
 800a906:	440b      	add	r3, r1
 800a908:	4618      	mov	r0, r3
 800a90a:	f7ff fc27 	bl	800a15c <ld_dword>
 800a90e:	4603      	mov	r3, r0
 800a910:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800a914:	617b      	str	r3, [r7, #20]
			break;
 800a916:	e009      	b.n	800a92c <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800a918:	2301      	movs	r3, #1
 800a91a:	617b      	str	r3, [r7, #20]
 800a91c:	e006      	b.n	800a92c <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a91e:	bf00      	nop
 800a920:	e004      	b.n	800a92c <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a922:	bf00      	nop
 800a924:	e002      	b.n	800a92c <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800a926:	bf00      	nop
 800a928:	e000      	b.n	800a92c <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800a92a:	bf00      	nop
		}
	}

	return val;
 800a92c:	697b      	ldr	r3, [r7, #20]
}
 800a92e:	4618      	mov	r0, r3
 800a930:	3718      	adds	r7, #24
 800a932:	46bd      	mov	sp, r7
 800a934:	bd80      	pop	{r7, pc}

0800a936 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800a936:	b590      	push	{r4, r7, lr}
 800a938:	b089      	sub	sp, #36	; 0x24
 800a93a:	af00      	add	r7, sp, #0
 800a93c:	60f8      	str	r0, [r7, #12]
 800a93e:	60b9      	str	r1, [r7, #8]
 800a940:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800a942:	2302      	movs	r3, #2
 800a944:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800a946:	68bb      	ldr	r3, [r7, #8]
 800a948:	2b01      	cmp	r3, #1
 800a94a:	f240 8102 	bls.w	800ab52 <put_fat+0x21c>
 800a94e:	68fb      	ldr	r3, [r7, #12]
 800a950:	69db      	ldr	r3, [r3, #28]
 800a952:	68ba      	ldr	r2, [r7, #8]
 800a954:	429a      	cmp	r2, r3
 800a956:	f080 80fc 	bcs.w	800ab52 <put_fat+0x21c>
		switch (fs->fs_type) {
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	781b      	ldrb	r3, [r3, #0]
 800a95e:	2b03      	cmp	r3, #3
 800a960:	f000 80b6 	beq.w	800aad0 <put_fat+0x19a>
 800a964:	2b03      	cmp	r3, #3
 800a966:	f300 80fd 	bgt.w	800ab64 <put_fat+0x22e>
 800a96a:	2b01      	cmp	r3, #1
 800a96c:	d003      	beq.n	800a976 <put_fat+0x40>
 800a96e:	2b02      	cmp	r3, #2
 800a970:	f000 8083 	beq.w	800aa7a <put_fat+0x144>
 800a974:	e0f6      	b.n	800ab64 <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800a976:	68bb      	ldr	r3, [r7, #8]
 800a978:	61bb      	str	r3, [r7, #24]
 800a97a:	69bb      	ldr	r3, [r7, #24]
 800a97c:	085b      	lsrs	r3, r3, #1
 800a97e:	69ba      	ldr	r2, [r7, #24]
 800a980:	4413      	add	r3, r2
 800a982:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800a984:	68fb      	ldr	r3, [r7, #12]
 800a986:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a988:	68fb      	ldr	r3, [r7, #12]
 800a98a:	899b      	ldrh	r3, [r3, #12]
 800a98c:	4619      	mov	r1, r3
 800a98e:	69bb      	ldr	r3, [r7, #24]
 800a990:	fbb3 f3f1 	udiv	r3, r3, r1
 800a994:	4413      	add	r3, r2
 800a996:	4619      	mov	r1, r3
 800a998:	68f8      	ldr	r0, [r7, #12]
 800a99a:	f7ff fe3b 	bl	800a614 <move_window>
 800a99e:	4603      	mov	r3, r0
 800a9a0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a9a2:	7ffb      	ldrb	r3, [r7, #31]
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	f040 80d6 	bne.w	800ab56 <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 800a9aa:	68fb      	ldr	r3, [r7, #12]
 800a9ac:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800a9b0:	69bb      	ldr	r3, [r7, #24]
 800a9b2:	1c5a      	adds	r2, r3, #1
 800a9b4:	61ba      	str	r2, [r7, #24]
 800a9b6:	68fa      	ldr	r2, [r7, #12]
 800a9b8:	8992      	ldrh	r2, [r2, #12]
 800a9ba:	fbb3 f0f2 	udiv	r0, r3, r2
 800a9be:	fb00 f202 	mul.w	r2, r0, r2
 800a9c2:	1a9b      	subs	r3, r3, r2
 800a9c4:	440b      	add	r3, r1
 800a9c6:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800a9c8:	68bb      	ldr	r3, [r7, #8]
 800a9ca:	f003 0301 	and.w	r3, r3, #1
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d00d      	beq.n	800a9ee <put_fat+0xb8>
 800a9d2:	697b      	ldr	r3, [r7, #20]
 800a9d4:	781b      	ldrb	r3, [r3, #0]
 800a9d6:	b25b      	sxtb	r3, r3
 800a9d8:	f003 030f 	and.w	r3, r3, #15
 800a9dc:	b25a      	sxtb	r2, r3
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	b2db      	uxtb	r3, r3
 800a9e2:	011b      	lsls	r3, r3, #4
 800a9e4:	b25b      	sxtb	r3, r3
 800a9e6:	4313      	orrs	r3, r2
 800a9e8:	b25b      	sxtb	r3, r3
 800a9ea:	b2db      	uxtb	r3, r3
 800a9ec:	e001      	b.n	800a9f2 <put_fat+0xbc>
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	b2db      	uxtb	r3, r3
 800a9f2:	697a      	ldr	r2, [r7, #20]
 800a9f4:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800a9f6:	68fb      	ldr	r3, [r7, #12]
 800a9f8:	2201      	movs	r2, #1
 800a9fa:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800a9fc:	68fb      	ldr	r3, [r7, #12]
 800a9fe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800aa00:	68fb      	ldr	r3, [r7, #12]
 800aa02:	899b      	ldrh	r3, [r3, #12]
 800aa04:	4619      	mov	r1, r3
 800aa06:	69bb      	ldr	r3, [r7, #24]
 800aa08:	fbb3 f3f1 	udiv	r3, r3, r1
 800aa0c:	4413      	add	r3, r2
 800aa0e:	4619      	mov	r1, r3
 800aa10:	68f8      	ldr	r0, [r7, #12]
 800aa12:	f7ff fdff 	bl	800a614 <move_window>
 800aa16:	4603      	mov	r3, r0
 800aa18:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800aa1a:	7ffb      	ldrb	r3, [r7, #31]
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	f040 809c 	bne.w	800ab5a <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 800aa22:	68fb      	ldr	r3, [r7, #12]
 800aa24:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800aa28:	68fb      	ldr	r3, [r7, #12]
 800aa2a:	899b      	ldrh	r3, [r3, #12]
 800aa2c:	461a      	mov	r2, r3
 800aa2e:	69bb      	ldr	r3, [r7, #24]
 800aa30:	fbb3 f0f2 	udiv	r0, r3, r2
 800aa34:	fb00 f202 	mul.w	r2, r0, r2
 800aa38:	1a9b      	subs	r3, r3, r2
 800aa3a:	440b      	add	r3, r1
 800aa3c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800aa3e:	68bb      	ldr	r3, [r7, #8]
 800aa40:	f003 0301 	and.w	r3, r3, #1
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	d003      	beq.n	800aa50 <put_fat+0x11a>
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	091b      	lsrs	r3, r3, #4
 800aa4c:	b2db      	uxtb	r3, r3
 800aa4e:	e00e      	b.n	800aa6e <put_fat+0x138>
 800aa50:	697b      	ldr	r3, [r7, #20]
 800aa52:	781b      	ldrb	r3, [r3, #0]
 800aa54:	b25b      	sxtb	r3, r3
 800aa56:	f023 030f 	bic.w	r3, r3, #15
 800aa5a:	b25a      	sxtb	r2, r3
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	0a1b      	lsrs	r3, r3, #8
 800aa60:	b25b      	sxtb	r3, r3
 800aa62:	f003 030f 	and.w	r3, r3, #15
 800aa66:	b25b      	sxtb	r3, r3
 800aa68:	4313      	orrs	r3, r2
 800aa6a:	b25b      	sxtb	r3, r3
 800aa6c:	b2db      	uxtb	r3, r3
 800aa6e:	697a      	ldr	r2, [r7, #20]
 800aa70:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800aa72:	68fb      	ldr	r3, [r7, #12]
 800aa74:	2201      	movs	r2, #1
 800aa76:	70da      	strb	r2, [r3, #3]
			break;
 800aa78:	e074      	b.n	800ab64 <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800aa7a:	68fb      	ldr	r3, [r7, #12]
 800aa7c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800aa7e:	68fb      	ldr	r3, [r7, #12]
 800aa80:	899b      	ldrh	r3, [r3, #12]
 800aa82:	085b      	lsrs	r3, r3, #1
 800aa84:	b29b      	uxth	r3, r3
 800aa86:	4619      	mov	r1, r3
 800aa88:	68bb      	ldr	r3, [r7, #8]
 800aa8a:	fbb3 f3f1 	udiv	r3, r3, r1
 800aa8e:	4413      	add	r3, r2
 800aa90:	4619      	mov	r1, r3
 800aa92:	68f8      	ldr	r0, [r7, #12]
 800aa94:	f7ff fdbe 	bl	800a614 <move_window>
 800aa98:	4603      	mov	r3, r0
 800aa9a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800aa9c:	7ffb      	ldrb	r3, [r7, #31]
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	d15d      	bne.n	800ab5e <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800aaa2:	68fb      	ldr	r3, [r7, #12]
 800aaa4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800aaa8:	68bb      	ldr	r3, [r7, #8]
 800aaaa:	005b      	lsls	r3, r3, #1
 800aaac:	68fa      	ldr	r2, [r7, #12]
 800aaae:	8992      	ldrh	r2, [r2, #12]
 800aab0:	fbb3 f0f2 	udiv	r0, r3, r2
 800aab4:	fb00 f202 	mul.w	r2, r0, r2
 800aab8:	1a9b      	subs	r3, r3, r2
 800aaba:	440b      	add	r3, r1
 800aabc:	687a      	ldr	r2, [r7, #4]
 800aabe:	b292      	uxth	r2, r2
 800aac0:	4611      	mov	r1, r2
 800aac2:	4618      	mov	r0, r3
 800aac4:	f7ff fb6d 	bl	800a1a2 <st_word>
			fs->wflag = 1;
 800aac8:	68fb      	ldr	r3, [r7, #12]
 800aaca:	2201      	movs	r2, #1
 800aacc:	70da      	strb	r2, [r3, #3]
			break;
 800aace:	e049      	b.n	800ab64 <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800aad0:	68fb      	ldr	r3, [r7, #12]
 800aad2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800aad4:	68fb      	ldr	r3, [r7, #12]
 800aad6:	899b      	ldrh	r3, [r3, #12]
 800aad8:	089b      	lsrs	r3, r3, #2
 800aada:	b29b      	uxth	r3, r3
 800aadc:	4619      	mov	r1, r3
 800aade:	68bb      	ldr	r3, [r7, #8]
 800aae0:	fbb3 f3f1 	udiv	r3, r3, r1
 800aae4:	4413      	add	r3, r2
 800aae6:	4619      	mov	r1, r3
 800aae8:	68f8      	ldr	r0, [r7, #12]
 800aaea:	f7ff fd93 	bl	800a614 <move_window>
 800aaee:	4603      	mov	r3, r0
 800aaf0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800aaf2:	7ffb      	ldrb	r3, [r7, #31]
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	d134      	bne.n	800ab62 <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800aafe:	68fb      	ldr	r3, [r7, #12]
 800ab00:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800ab04:	68bb      	ldr	r3, [r7, #8]
 800ab06:	009b      	lsls	r3, r3, #2
 800ab08:	68fa      	ldr	r2, [r7, #12]
 800ab0a:	8992      	ldrh	r2, [r2, #12]
 800ab0c:	fbb3 f0f2 	udiv	r0, r3, r2
 800ab10:	fb00 f202 	mul.w	r2, r0, r2
 800ab14:	1a9b      	subs	r3, r3, r2
 800ab16:	440b      	add	r3, r1
 800ab18:	4618      	mov	r0, r3
 800ab1a:	f7ff fb1f 	bl	800a15c <ld_dword>
 800ab1e:	4603      	mov	r3, r0
 800ab20:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800ab24:	4323      	orrs	r3, r4
 800ab26:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800ab28:	68fb      	ldr	r3, [r7, #12]
 800ab2a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800ab2e:	68bb      	ldr	r3, [r7, #8]
 800ab30:	009b      	lsls	r3, r3, #2
 800ab32:	68fa      	ldr	r2, [r7, #12]
 800ab34:	8992      	ldrh	r2, [r2, #12]
 800ab36:	fbb3 f0f2 	udiv	r0, r3, r2
 800ab3a:	fb00 f202 	mul.w	r2, r0, r2
 800ab3e:	1a9b      	subs	r3, r3, r2
 800ab40:	440b      	add	r3, r1
 800ab42:	6879      	ldr	r1, [r7, #4]
 800ab44:	4618      	mov	r0, r3
 800ab46:	f7ff fb47 	bl	800a1d8 <st_dword>
			fs->wflag = 1;
 800ab4a:	68fb      	ldr	r3, [r7, #12]
 800ab4c:	2201      	movs	r2, #1
 800ab4e:	70da      	strb	r2, [r3, #3]
			break;
 800ab50:	e008      	b.n	800ab64 <put_fat+0x22e>
		}
	}
 800ab52:	bf00      	nop
 800ab54:	e006      	b.n	800ab64 <put_fat+0x22e>
			if (res != FR_OK) break;
 800ab56:	bf00      	nop
 800ab58:	e004      	b.n	800ab64 <put_fat+0x22e>
			if (res != FR_OK) break;
 800ab5a:	bf00      	nop
 800ab5c:	e002      	b.n	800ab64 <put_fat+0x22e>
			if (res != FR_OK) break;
 800ab5e:	bf00      	nop
 800ab60:	e000      	b.n	800ab64 <put_fat+0x22e>
			if (res != FR_OK) break;
 800ab62:	bf00      	nop
	return res;
 800ab64:	7ffb      	ldrb	r3, [r7, #31]
}
 800ab66:	4618      	mov	r0, r3
 800ab68:	3724      	adds	r7, #36	; 0x24
 800ab6a:	46bd      	mov	sp, r7
 800ab6c:	bd90      	pop	{r4, r7, pc}

0800ab6e <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800ab6e:	b580      	push	{r7, lr}
 800ab70:	b088      	sub	sp, #32
 800ab72:	af00      	add	r7, sp, #0
 800ab74:	60f8      	str	r0, [r7, #12]
 800ab76:	60b9      	str	r1, [r7, #8]
 800ab78:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800ab7a:	2300      	movs	r3, #0
 800ab7c:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800ab7e:	68fb      	ldr	r3, [r7, #12]
 800ab80:	681b      	ldr	r3, [r3, #0]
 800ab82:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800ab84:	68bb      	ldr	r3, [r7, #8]
 800ab86:	2b01      	cmp	r3, #1
 800ab88:	d904      	bls.n	800ab94 <remove_chain+0x26>
 800ab8a:	69bb      	ldr	r3, [r7, #24]
 800ab8c:	69db      	ldr	r3, [r3, #28]
 800ab8e:	68ba      	ldr	r2, [r7, #8]
 800ab90:	429a      	cmp	r2, r3
 800ab92:	d301      	bcc.n	800ab98 <remove_chain+0x2a>
 800ab94:	2302      	movs	r3, #2
 800ab96:	e04b      	b.n	800ac30 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	d00c      	beq.n	800abb8 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800ab9e:	f04f 32ff 	mov.w	r2, #4294967295
 800aba2:	6879      	ldr	r1, [r7, #4]
 800aba4:	69b8      	ldr	r0, [r7, #24]
 800aba6:	f7ff fec6 	bl	800a936 <put_fat>
 800abaa:	4603      	mov	r3, r0
 800abac:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800abae:	7ffb      	ldrb	r3, [r7, #31]
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	d001      	beq.n	800abb8 <remove_chain+0x4a>
 800abb4:	7ffb      	ldrb	r3, [r7, #31]
 800abb6:	e03b      	b.n	800ac30 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800abb8:	68b9      	ldr	r1, [r7, #8]
 800abba:	68f8      	ldr	r0, [r7, #12]
 800abbc:	f7ff fde7 	bl	800a78e <get_fat>
 800abc0:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800abc2:	697b      	ldr	r3, [r7, #20]
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	d031      	beq.n	800ac2c <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800abc8:	697b      	ldr	r3, [r7, #20]
 800abca:	2b01      	cmp	r3, #1
 800abcc:	d101      	bne.n	800abd2 <remove_chain+0x64>
 800abce:	2302      	movs	r3, #2
 800abd0:	e02e      	b.n	800ac30 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800abd2:	697b      	ldr	r3, [r7, #20]
 800abd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800abd8:	d101      	bne.n	800abde <remove_chain+0x70>
 800abda:	2301      	movs	r3, #1
 800abdc:	e028      	b.n	800ac30 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800abde:	2200      	movs	r2, #0
 800abe0:	68b9      	ldr	r1, [r7, #8]
 800abe2:	69b8      	ldr	r0, [r7, #24]
 800abe4:	f7ff fea7 	bl	800a936 <put_fat>
 800abe8:	4603      	mov	r3, r0
 800abea:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800abec:	7ffb      	ldrb	r3, [r7, #31]
 800abee:	2b00      	cmp	r3, #0
 800abf0:	d001      	beq.n	800abf6 <remove_chain+0x88>
 800abf2:	7ffb      	ldrb	r3, [r7, #31]
 800abf4:	e01c      	b.n	800ac30 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800abf6:	69bb      	ldr	r3, [r7, #24]
 800abf8:	699a      	ldr	r2, [r3, #24]
 800abfa:	69bb      	ldr	r3, [r7, #24]
 800abfc:	69db      	ldr	r3, [r3, #28]
 800abfe:	3b02      	subs	r3, #2
 800ac00:	429a      	cmp	r2, r3
 800ac02:	d20b      	bcs.n	800ac1c <remove_chain+0xae>
			fs->free_clst++;
 800ac04:	69bb      	ldr	r3, [r7, #24]
 800ac06:	699b      	ldr	r3, [r3, #24]
 800ac08:	1c5a      	adds	r2, r3, #1
 800ac0a:	69bb      	ldr	r3, [r7, #24]
 800ac0c:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 800ac0e:	69bb      	ldr	r3, [r7, #24]
 800ac10:	791b      	ldrb	r3, [r3, #4]
 800ac12:	f043 0301 	orr.w	r3, r3, #1
 800ac16:	b2da      	uxtb	r2, r3
 800ac18:	69bb      	ldr	r3, [r7, #24]
 800ac1a:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800ac1c:	697b      	ldr	r3, [r7, #20]
 800ac1e:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800ac20:	69bb      	ldr	r3, [r7, #24]
 800ac22:	69db      	ldr	r3, [r3, #28]
 800ac24:	68ba      	ldr	r2, [r7, #8]
 800ac26:	429a      	cmp	r2, r3
 800ac28:	d3c6      	bcc.n	800abb8 <remove_chain+0x4a>
 800ac2a:	e000      	b.n	800ac2e <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800ac2c:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800ac2e:	2300      	movs	r3, #0
}
 800ac30:	4618      	mov	r0, r3
 800ac32:	3720      	adds	r7, #32
 800ac34:	46bd      	mov	sp, r7
 800ac36:	bd80      	pop	{r7, pc}

0800ac38 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800ac38:	b580      	push	{r7, lr}
 800ac3a:	b088      	sub	sp, #32
 800ac3c:	af00      	add	r7, sp, #0
 800ac3e:	6078      	str	r0, [r7, #4]
 800ac40:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800ac48:	683b      	ldr	r3, [r7, #0]
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	d10d      	bne.n	800ac6a <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800ac4e:	693b      	ldr	r3, [r7, #16]
 800ac50:	695b      	ldr	r3, [r3, #20]
 800ac52:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800ac54:	69bb      	ldr	r3, [r7, #24]
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d004      	beq.n	800ac64 <create_chain+0x2c>
 800ac5a:	693b      	ldr	r3, [r7, #16]
 800ac5c:	69db      	ldr	r3, [r3, #28]
 800ac5e:	69ba      	ldr	r2, [r7, #24]
 800ac60:	429a      	cmp	r2, r3
 800ac62:	d31b      	bcc.n	800ac9c <create_chain+0x64>
 800ac64:	2301      	movs	r3, #1
 800ac66:	61bb      	str	r3, [r7, #24]
 800ac68:	e018      	b.n	800ac9c <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800ac6a:	6839      	ldr	r1, [r7, #0]
 800ac6c:	6878      	ldr	r0, [r7, #4]
 800ac6e:	f7ff fd8e 	bl	800a78e <get_fat>
 800ac72:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800ac74:	68fb      	ldr	r3, [r7, #12]
 800ac76:	2b01      	cmp	r3, #1
 800ac78:	d801      	bhi.n	800ac7e <create_chain+0x46>
 800ac7a:	2301      	movs	r3, #1
 800ac7c:	e070      	b.n	800ad60 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800ac7e:	68fb      	ldr	r3, [r7, #12]
 800ac80:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac84:	d101      	bne.n	800ac8a <create_chain+0x52>
 800ac86:	68fb      	ldr	r3, [r7, #12]
 800ac88:	e06a      	b.n	800ad60 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800ac8a:	693b      	ldr	r3, [r7, #16]
 800ac8c:	69db      	ldr	r3, [r3, #28]
 800ac8e:	68fa      	ldr	r2, [r7, #12]
 800ac90:	429a      	cmp	r2, r3
 800ac92:	d201      	bcs.n	800ac98 <create_chain+0x60>
 800ac94:	68fb      	ldr	r3, [r7, #12]
 800ac96:	e063      	b.n	800ad60 <create_chain+0x128>
		scl = clst;
 800ac98:	683b      	ldr	r3, [r7, #0]
 800ac9a:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800ac9c:	69bb      	ldr	r3, [r7, #24]
 800ac9e:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800aca0:	69fb      	ldr	r3, [r7, #28]
 800aca2:	3301      	adds	r3, #1
 800aca4:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800aca6:	693b      	ldr	r3, [r7, #16]
 800aca8:	69db      	ldr	r3, [r3, #28]
 800acaa:	69fa      	ldr	r2, [r7, #28]
 800acac:	429a      	cmp	r2, r3
 800acae:	d307      	bcc.n	800acc0 <create_chain+0x88>
				ncl = 2;
 800acb0:	2302      	movs	r3, #2
 800acb2:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800acb4:	69fa      	ldr	r2, [r7, #28]
 800acb6:	69bb      	ldr	r3, [r7, #24]
 800acb8:	429a      	cmp	r2, r3
 800acba:	d901      	bls.n	800acc0 <create_chain+0x88>
 800acbc:	2300      	movs	r3, #0
 800acbe:	e04f      	b.n	800ad60 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800acc0:	69f9      	ldr	r1, [r7, #28]
 800acc2:	6878      	ldr	r0, [r7, #4]
 800acc4:	f7ff fd63 	bl	800a78e <get_fat>
 800acc8:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800acca:	68fb      	ldr	r3, [r7, #12]
 800accc:	2b00      	cmp	r3, #0
 800acce:	d00e      	beq.n	800acee <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800acd0:	68fb      	ldr	r3, [r7, #12]
 800acd2:	2b01      	cmp	r3, #1
 800acd4:	d003      	beq.n	800acde <create_chain+0xa6>
 800acd6:	68fb      	ldr	r3, [r7, #12]
 800acd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800acdc:	d101      	bne.n	800ace2 <create_chain+0xaa>
 800acde:	68fb      	ldr	r3, [r7, #12]
 800ace0:	e03e      	b.n	800ad60 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800ace2:	69fa      	ldr	r2, [r7, #28]
 800ace4:	69bb      	ldr	r3, [r7, #24]
 800ace6:	429a      	cmp	r2, r3
 800ace8:	d1da      	bne.n	800aca0 <create_chain+0x68>
 800acea:	2300      	movs	r3, #0
 800acec:	e038      	b.n	800ad60 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800acee:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800acf0:	f04f 32ff 	mov.w	r2, #4294967295
 800acf4:	69f9      	ldr	r1, [r7, #28]
 800acf6:	6938      	ldr	r0, [r7, #16]
 800acf8:	f7ff fe1d 	bl	800a936 <put_fat>
 800acfc:	4603      	mov	r3, r0
 800acfe:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800ad00:	7dfb      	ldrb	r3, [r7, #23]
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	d109      	bne.n	800ad1a <create_chain+0xe2>
 800ad06:	683b      	ldr	r3, [r7, #0]
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	d006      	beq.n	800ad1a <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800ad0c:	69fa      	ldr	r2, [r7, #28]
 800ad0e:	6839      	ldr	r1, [r7, #0]
 800ad10:	6938      	ldr	r0, [r7, #16]
 800ad12:	f7ff fe10 	bl	800a936 <put_fat>
 800ad16:	4603      	mov	r3, r0
 800ad18:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800ad1a:	7dfb      	ldrb	r3, [r7, #23]
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	d116      	bne.n	800ad4e <create_chain+0x116>
		fs->last_clst = ncl;
 800ad20:	693b      	ldr	r3, [r7, #16]
 800ad22:	69fa      	ldr	r2, [r7, #28]
 800ad24:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800ad26:	693b      	ldr	r3, [r7, #16]
 800ad28:	699a      	ldr	r2, [r3, #24]
 800ad2a:	693b      	ldr	r3, [r7, #16]
 800ad2c:	69db      	ldr	r3, [r3, #28]
 800ad2e:	3b02      	subs	r3, #2
 800ad30:	429a      	cmp	r2, r3
 800ad32:	d804      	bhi.n	800ad3e <create_chain+0x106>
 800ad34:	693b      	ldr	r3, [r7, #16]
 800ad36:	699b      	ldr	r3, [r3, #24]
 800ad38:	1e5a      	subs	r2, r3, #1
 800ad3a:	693b      	ldr	r3, [r7, #16]
 800ad3c:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 800ad3e:	693b      	ldr	r3, [r7, #16]
 800ad40:	791b      	ldrb	r3, [r3, #4]
 800ad42:	f043 0301 	orr.w	r3, r3, #1
 800ad46:	b2da      	uxtb	r2, r3
 800ad48:	693b      	ldr	r3, [r7, #16]
 800ad4a:	711a      	strb	r2, [r3, #4]
 800ad4c:	e007      	b.n	800ad5e <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800ad4e:	7dfb      	ldrb	r3, [r7, #23]
 800ad50:	2b01      	cmp	r3, #1
 800ad52:	d102      	bne.n	800ad5a <create_chain+0x122>
 800ad54:	f04f 33ff 	mov.w	r3, #4294967295
 800ad58:	e000      	b.n	800ad5c <create_chain+0x124>
 800ad5a:	2301      	movs	r3, #1
 800ad5c:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800ad5e:	69fb      	ldr	r3, [r7, #28]
}
 800ad60:	4618      	mov	r0, r3
 800ad62:	3720      	adds	r7, #32
 800ad64:	46bd      	mov	sp, r7
 800ad66:	bd80      	pop	{r7, pc}

0800ad68 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800ad68:	b480      	push	{r7}
 800ad6a:	b087      	sub	sp, #28
 800ad6c:	af00      	add	r7, sp, #0
 800ad6e:	6078      	str	r0, [r7, #4]
 800ad70:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	681b      	ldr	r3, [r3, #0]
 800ad76:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad7c:	3304      	adds	r3, #4
 800ad7e:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800ad80:	68fb      	ldr	r3, [r7, #12]
 800ad82:	899b      	ldrh	r3, [r3, #12]
 800ad84:	461a      	mov	r2, r3
 800ad86:	683b      	ldr	r3, [r7, #0]
 800ad88:	fbb3 f3f2 	udiv	r3, r3, r2
 800ad8c:	68fa      	ldr	r2, [r7, #12]
 800ad8e:	8952      	ldrh	r2, [r2, #10]
 800ad90:	fbb3 f3f2 	udiv	r3, r3, r2
 800ad94:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800ad96:	693b      	ldr	r3, [r7, #16]
 800ad98:	1d1a      	adds	r2, r3, #4
 800ad9a:	613a      	str	r2, [r7, #16]
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800ada0:	68bb      	ldr	r3, [r7, #8]
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	d101      	bne.n	800adaa <clmt_clust+0x42>
 800ada6:	2300      	movs	r3, #0
 800ada8:	e010      	b.n	800adcc <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 800adaa:	697a      	ldr	r2, [r7, #20]
 800adac:	68bb      	ldr	r3, [r7, #8]
 800adae:	429a      	cmp	r2, r3
 800adb0:	d307      	bcc.n	800adc2 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 800adb2:	697a      	ldr	r2, [r7, #20]
 800adb4:	68bb      	ldr	r3, [r7, #8]
 800adb6:	1ad3      	subs	r3, r2, r3
 800adb8:	617b      	str	r3, [r7, #20]
 800adba:	693b      	ldr	r3, [r7, #16]
 800adbc:	3304      	adds	r3, #4
 800adbe:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800adc0:	e7e9      	b.n	800ad96 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 800adc2:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800adc4:	693b      	ldr	r3, [r7, #16]
 800adc6:	681a      	ldr	r2, [r3, #0]
 800adc8:	697b      	ldr	r3, [r7, #20]
 800adca:	4413      	add	r3, r2
}
 800adcc:	4618      	mov	r0, r3
 800adce:	371c      	adds	r7, #28
 800add0:	46bd      	mov	sp, r7
 800add2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800add6:	4770      	bx	lr

0800add8 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800add8:	b580      	push	{r7, lr}
 800adda:	b086      	sub	sp, #24
 800addc:	af00      	add	r7, sp, #0
 800adde:	6078      	str	r0, [r7, #4]
 800ade0:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	681b      	ldr	r3, [r3, #0]
 800ade6:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800ade8:	683b      	ldr	r3, [r7, #0]
 800adea:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800adee:	d204      	bcs.n	800adfa <dir_sdi+0x22>
 800adf0:	683b      	ldr	r3, [r7, #0]
 800adf2:	f003 031f 	and.w	r3, r3, #31
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	d001      	beq.n	800adfe <dir_sdi+0x26>
		return FR_INT_ERR;
 800adfa:	2302      	movs	r3, #2
 800adfc:	e071      	b.n	800aee2 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	683a      	ldr	r2, [r7, #0]
 800ae02:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	689b      	ldr	r3, [r3, #8]
 800ae08:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800ae0a:	697b      	ldr	r3, [r7, #20]
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	d106      	bne.n	800ae1e <dir_sdi+0x46>
 800ae10:	693b      	ldr	r3, [r7, #16]
 800ae12:	781b      	ldrb	r3, [r3, #0]
 800ae14:	2b02      	cmp	r3, #2
 800ae16:	d902      	bls.n	800ae1e <dir_sdi+0x46>
		clst = fs->dirbase;
 800ae18:	693b      	ldr	r3, [r7, #16]
 800ae1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae1c:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800ae1e:	697b      	ldr	r3, [r7, #20]
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	d10c      	bne.n	800ae3e <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800ae24:	683b      	ldr	r3, [r7, #0]
 800ae26:	095b      	lsrs	r3, r3, #5
 800ae28:	693a      	ldr	r2, [r7, #16]
 800ae2a:	8912      	ldrh	r2, [r2, #8]
 800ae2c:	4293      	cmp	r3, r2
 800ae2e:	d301      	bcc.n	800ae34 <dir_sdi+0x5c>
 800ae30:	2302      	movs	r3, #2
 800ae32:	e056      	b.n	800aee2 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 800ae34:	693b      	ldr	r3, [r7, #16]
 800ae36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	61da      	str	r2, [r3, #28]
 800ae3c:	e02d      	b.n	800ae9a <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800ae3e:	693b      	ldr	r3, [r7, #16]
 800ae40:	895b      	ldrh	r3, [r3, #10]
 800ae42:	461a      	mov	r2, r3
 800ae44:	693b      	ldr	r3, [r7, #16]
 800ae46:	899b      	ldrh	r3, [r3, #12]
 800ae48:	fb02 f303 	mul.w	r3, r2, r3
 800ae4c:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800ae4e:	e019      	b.n	800ae84 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	6979      	ldr	r1, [r7, #20]
 800ae54:	4618      	mov	r0, r3
 800ae56:	f7ff fc9a 	bl	800a78e <get_fat>
 800ae5a:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800ae5c:	697b      	ldr	r3, [r7, #20]
 800ae5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae62:	d101      	bne.n	800ae68 <dir_sdi+0x90>
 800ae64:	2301      	movs	r3, #1
 800ae66:	e03c      	b.n	800aee2 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800ae68:	697b      	ldr	r3, [r7, #20]
 800ae6a:	2b01      	cmp	r3, #1
 800ae6c:	d904      	bls.n	800ae78 <dir_sdi+0xa0>
 800ae6e:	693b      	ldr	r3, [r7, #16]
 800ae70:	69db      	ldr	r3, [r3, #28]
 800ae72:	697a      	ldr	r2, [r7, #20]
 800ae74:	429a      	cmp	r2, r3
 800ae76:	d301      	bcc.n	800ae7c <dir_sdi+0xa4>
 800ae78:	2302      	movs	r3, #2
 800ae7a:	e032      	b.n	800aee2 <dir_sdi+0x10a>
			ofs -= csz;
 800ae7c:	683a      	ldr	r2, [r7, #0]
 800ae7e:	68fb      	ldr	r3, [r7, #12]
 800ae80:	1ad3      	subs	r3, r2, r3
 800ae82:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800ae84:	683a      	ldr	r2, [r7, #0]
 800ae86:	68fb      	ldr	r3, [r7, #12]
 800ae88:	429a      	cmp	r2, r3
 800ae8a:	d2e1      	bcs.n	800ae50 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 800ae8c:	6979      	ldr	r1, [r7, #20]
 800ae8e:	6938      	ldr	r0, [r7, #16]
 800ae90:	f7ff fc5e 	bl	800a750 <clust2sect>
 800ae94:	4602      	mov	r2, r0
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	697a      	ldr	r2, [r7, #20]
 800ae9e:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	69db      	ldr	r3, [r3, #28]
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	d101      	bne.n	800aeac <dir_sdi+0xd4>
 800aea8:	2302      	movs	r3, #2
 800aeaa:	e01a      	b.n	800aee2 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	69da      	ldr	r2, [r3, #28]
 800aeb0:	693b      	ldr	r3, [r7, #16]
 800aeb2:	899b      	ldrh	r3, [r3, #12]
 800aeb4:	4619      	mov	r1, r3
 800aeb6:	683b      	ldr	r3, [r7, #0]
 800aeb8:	fbb3 f3f1 	udiv	r3, r3, r1
 800aebc:	441a      	add	r2, r3
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800aec2:	693b      	ldr	r3, [r7, #16]
 800aec4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800aec8:	693b      	ldr	r3, [r7, #16]
 800aeca:	899b      	ldrh	r3, [r3, #12]
 800aecc:	461a      	mov	r2, r3
 800aece:	683b      	ldr	r3, [r7, #0]
 800aed0:	fbb3 f0f2 	udiv	r0, r3, r2
 800aed4:	fb00 f202 	mul.w	r2, r0, r2
 800aed8:	1a9b      	subs	r3, r3, r2
 800aeda:	18ca      	adds	r2, r1, r3
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800aee0:	2300      	movs	r3, #0
}
 800aee2:	4618      	mov	r0, r3
 800aee4:	3718      	adds	r7, #24
 800aee6:	46bd      	mov	sp, r7
 800aee8:	bd80      	pop	{r7, pc}

0800aeea <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800aeea:	b580      	push	{r7, lr}
 800aeec:	b086      	sub	sp, #24
 800aeee:	af00      	add	r7, sp, #0
 800aef0:	6078      	str	r0, [r7, #4]
 800aef2:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	681b      	ldr	r3, [r3, #0]
 800aef8:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	695b      	ldr	r3, [r3, #20]
 800aefe:	3320      	adds	r3, #32
 800af00:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	69db      	ldr	r3, [r3, #28]
 800af06:	2b00      	cmp	r3, #0
 800af08:	d003      	beq.n	800af12 <dir_next+0x28>
 800af0a:	68bb      	ldr	r3, [r7, #8]
 800af0c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800af10:	d301      	bcc.n	800af16 <dir_next+0x2c>
 800af12:	2304      	movs	r3, #4
 800af14:	e0bb      	b.n	800b08e <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800af16:	68fb      	ldr	r3, [r7, #12]
 800af18:	899b      	ldrh	r3, [r3, #12]
 800af1a:	461a      	mov	r2, r3
 800af1c:	68bb      	ldr	r3, [r7, #8]
 800af1e:	fbb3 f1f2 	udiv	r1, r3, r2
 800af22:	fb01 f202 	mul.w	r2, r1, r2
 800af26:	1a9b      	subs	r3, r3, r2
 800af28:	2b00      	cmp	r3, #0
 800af2a:	f040 809d 	bne.w	800b068 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	69db      	ldr	r3, [r3, #28]
 800af32:	1c5a      	adds	r2, r3, #1
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	699b      	ldr	r3, [r3, #24]
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	d10b      	bne.n	800af58 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800af40:	68bb      	ldr	r3, [r7, #8]
 800af42:	095b      	lsrs	r3, r3, #5
 800af44:	68fa      	ldr	r2, [r7, #12]
 800af46:	8912      	ldrh	r2, [r2, #8]
 800af48:	4293      	cmp	r3, r2
 800af4a:	f0c0 808d 	bcc.w	800b068 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	2200      	movs	r2, #0
 800af52:	61da      	str	r2, [r3, #28]
 800af54:	2304      	movs	r3, #4
 800af56:	e09a      	b.n	800b08e <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800af58:	68fb      	ldr	r3, [r7, #12]
 800af5a:	899b      	ldrh	r3, [r3, #12]
 800af5c:	461a      	mov	r2, r3
 800af5e:	68bb      	ldr	r3, [r7, #8]
 800af60:	fbb3 f3f2 	udiv	r3, r3, r2
 800af64:	68fa      	ldr	r2, [r7, #12]
 800af66:	8952      	ldrh	r2, [r2, #10]
 800af68:	3a01      	subs	r2, #1
 800af6a:	4013      	ands	r3, r2
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	d17b      	bne.n	800b068 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800af70:	687a      	ldr	r2, [r7, #4]
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	699b      	ldr	r3, [r3, #24]
 800af76:	4619      	mov	r1, r3
 800af78:	4610      	mov	r0, r2
 800af7a:	f7ff fc08 	bl	800a78e <get_fat>
 800af7e:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800af80:	697b      	ldr	r3, [r7, #20]
 800af82:	2b01      	cmp	r3, #1
 800af84:	d801      	bhi.n	800af8a <dir_next+0xa0>
 800af86:	2302      	movs	r3, #2
 800af88:	e081      	b.n	800b08e <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800af8a:	697b      	ldr	r3, [r7, #20]
 800af8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af90:	d101      	bne.n	800af96 <dir_next+0xac>
 800af92:	2301      	movs	r3, #1
 800af94:	e07b      	b.n	800b08e <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800af96:	68fb      	ldr	r3, [r7, #12]
 800af98:	69db      	ldr	r3, [r3, #28]
 800af9a:	697a      	ldr	r2, [r7, #20]
 800af9c:	429a      	cmp	r2, r3
 800af9e:	d359      	bcc.n	800b054 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800afa0:	683b      	ldr	r3, [r7, #0]
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	d104      	bne.n	800afb0 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	2200      	movs	r2, #0
 800afaa:	61da      	str	r2, [r3, #28]
 800afac:	2304      	movs	r3, #4
 800afae:	e06e      	b.n	800b08e <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800afb0:	687a      	ldr	r2, [r7, #4]
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	699b      	ldr	r3, [r3, #24]
 800afb6:	4619      	mov	r1, r3
 800afb8:	4610      	mov	r0, r2
 800afba:	f7ff fe3d 	bl	800ac38 <create_chain>
 800afbe:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800afc0:	697b      	ldr	r3, [r7, #20]
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	d101      	bne.n	800afca <dir_next+0xe0>
 800afc6:	2307      	movs	r3, #7
 800afc8:	e061      	b.n	800b08e <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800afca:	697b      	ldr	r3, [r7, #20]
 800afcc:	2b01      	cmp	r3, #1
 800afce:	d101      	bne.n	800afd4 <dir_next+0xea>
 800afd0:	2302      	movs	r3, #2
 800afd2:	e05c      	b.n	800b08e <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800afd4:	697b      	ldr	r3, [r7, #20]
 800afd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800afda:	d101      	bne.n	800afe0 <dir_next+0xf6>
 800afdc:	2301      	movs	r3, #1
 800afde:	e056      	b.n	800b08e <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800afe0:	68f8      	ldr	r0, [r7, #12]
 800afe2:	f7ff fad3 	bl	800a58c <sync_window>
 800afe6:	4603      	mov	r3, r0
 800afe8:	2b00      	cmp	r3, #0
 800afea:	d001      	beq.n	800aff0 <dir_next+0x106>
 800afec:	2301      	movs	r3, #1
 800afee:	e04e      	b.n	800b08e <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800aff0:	68fb      	ldr	r3, [r7, #12]
 800aff2:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800aff6:	68fb      	ldr	r3, [r7, #12]
 800aff8:	899b      	ldrh	r3, [r3, #12]
 800affa:	461a      	mov	r2, r3
 800affc:	2100      	movs	r1, #0
 800affe:	f7ff f938 	bl	800a272 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800b002:	2300      	movs	r3, #0
 800b004:	613b      	str	r3, [r7, #16]
 800b006:	6979      	ldr	r1, [r7, #20]
 800b008:	68f8      	ldr	r0, [r7, #12]
 800b00a:	f7ff fba1 	bl	800a750 <clust2sect>
 800b00e:	4602      	mov	r2, r0
 800b010:	68fb      	ldr	r3, [r7, #12]
 800b012:	635a      	str	r2, [r3, #52]	; 0x34
 800b014:	e012      	b.n	800b03c <dir_next+0x152>
						fs->wflag = 1;
 800b016:	68fb      	ldr	r3, [r7, #12]
 800b018:	2201      	movs	r2, #1
 800b01a:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800b01c:	68f8      	ldr	r0, [r7, #12]
 800b01e:	f7ff fab5 	bl	800a58c <sync_window>
 800b022:	4603      	mov	r3, r0
 800b024:	2b00      	cmp	r3, #0
 800b026:	d001      	beq.n	800b02c <dir_next+0x142>
 800b028:	2301      	movs	r3, #1
 800b02a:	e030      	b.n	800b08e <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800b02c:	693b      	ldr	r3, [r7, #16]
 800b02e:	3301      	adds	r3, #1
 800b030:	613b      	str	r3, [r7, #16]
 800b032:	68fb      	ldr	r3, [r7, #12]
 800b034:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b036:	1c5a      	adds	r2, r3, #1
 800b038:	68fb      	ldr	r3, [r7, #12]
 800b03a:	635a      	str	r2, [r3, #52]	; 0x34
 800b03c:	68fb      	ldr	r3, [r7, #12]
 800b03e:	895b      	ldrh	r3, [r3, #10]
 800b040:	461a      	mov	r2, r3
 800b042:	693b      	ldr	r3, [r7, #16]
 800b044:	4293      	cmp	r3, r2
 800b046:	d3e6      	bcc.n	800b016 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800b048:	68fb      	ldr	r3, [r7, #12]
 800b04a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b04c:	693b      	ldr	r3, [r7, #16]
 800b04e:	1ad2      	subs	r2, r2, r3
 800b050:	68fb      	ldr	r3, [r7, #12]
 800b052:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	697a      	ldr	r2, [r7, #20]
 800b058:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800b05a:	6979      	ldr	r1, [r7, #20]
 800b05c:	68f8      	ldr	r0, [r7, #12]
 800b05e:	f7ff fb77 	bl	800a750 <clust2sect>
 800b062:	4602      	mov	r2, r0
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	68ba      	ldr	r2, [r7, #8]
 800b06c:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800b06e:	68fb      	ldr	r3, [r7, #12]
 800b070:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800b074:	68fb      	ldr	r3, [r7, #12]
 800b076:	899b      	ldrh	r3, [r3, #12]
 800b078:	461a      	mov	r2, r3
 800b07a:	68bb      	ldr	r3, [r7, #8]
 800b07c:	fbb3 f0f2 	udiv	r0, r3, r2
 800b080:	fb00 f202 	mul.w	r2, r0, r2
 800b084:	1a9b      	subs	r3, r3, r2
 800b086:	18ca      	adds	r2, r1, r3
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800b08c:	2300      	movs	r3, #0
}
 800b08e:	4618      	mov	r0, r3
 800b090:	3718      	adds	r7, #24
 800b092:	46bd      	mov	sp, r7
 800b094:	bd80      	pop	{r7, pc}

0800b096 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800b096:	b580      	push	{r7, lr}
 800b098:	b086      	sub	sp, #24
 800b09a:	af00      	add	r7, sp, #0
 800b09c:	6078      	str	r0, [r7, #4]
 800b09e:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	681b      	ldr	r3, [r3, #0]
 800b0a4:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800b0a6:	2100      	movs	r1, #0
 800b0a8:	6878      	ldr	r0, [r7, #4]
 800b0aa:	f7ff fe95 	bl	800add8 <dir_sdi>
 800b0ae:	4603      	mov	r3, r0
 800b0b0:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800b0b2:	7dfb      	ldrb	r3, [r7, #23]
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	d12b      	bne.n	800b110 <dir_alloc+0x7a>
		n = 0;
 800b0b8:	2300      	movs	r3, #0
 800b0ba:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	69db      	ldr	r3, [r3, #28]
 800b0c0:	4619      	mov	r1, r3
 800b0c2:	68f8      	ldr	r0, [r7, #12]
 800b0c4:	f7ff faa6 	bl	800a614 <move_window>
 800b0c8:	4603      	mov	r3, r0
 800b0ca:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800b0cc:	7dfb      	ldrb	r3, [r7, #23]
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	d11d      	bne.n	800b10e <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	6a1b      	ldr	r3, [r3, #32]
 800b0d6:	781b      	ldrb	r3, [r3, #0]
 800b0d8:	2be5      	cmp	r3, #229	; 0xe5
 800b0da:	d004      	beq.n	800b0e6 <dir_alloc+0x50>
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	6a1b      	ldr	r3, [r3, #32]
 800b0e0:	781b      	ldrb	r3, [r3, #0]
 800b0e2:	2b00      	cmp	r3, #0
 800b0e4:	d107      	bne.n	800b0f6 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800b0e6:	693b      	ldr	r3, [r7, #16]
 800b0e8:	3301      	adds	r3, #1
 800b0ea:	613b      	str	r3, [r7, #16]
 800b0ec:	693a      	ldr	r2, [r7, #16]
 800b0ee:	683b      	ldr	r3, [r7, #0]
 800b0f0:	429a      	cmp	r2, r3
 800b0f2:	d102      	bne.n	800b0fa <dir_alloc+0x64>
 800b0f4:	e00c      	b.n	800b110 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800b0f6:	2300      	movs	r3, #0
 800b0f8:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800b0fa:	2101      	movs	r1, #1
 800b0fc:	6878      	ldr	r0, [r7, #4]
 800b0fe:	f7ff fef4 	bl	800aeea <dir_next>
 800b102:	4603      	mov	r3, r0
 800b104:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800b106:	7dfb      	ldrb	r3, [r7, #23]
 800b108:	2b00      	cmp	r3, #0
 800b10a:	d0d7      	beq.n	800b0bc <dir_alloc+0x26>
 800b10c:	e000      	b.n	800b110 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800b10e:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800b110:	7dfb      	ldrb	r3, [r7, #23]
 800b112:	2b04      	cmp	r3, #4
 800b114:	d101      	bne.n	800b11a <dir_alloc+0x84>
 800b116:	2307      	movs	r3, #7
 800b118:	75fb      	strb	r3, [r7, #23]
	return res;
 800b11a:	7dfb      	ldrb	r3, [r7, #23]
}
 800b11c:	4618      	mov	r0, r3
 800b11e:	3718      	adds	r7, #24
 800b120:	46bd      	mov	sp, r7
 800b122:	bd80      	pop	{r7, pc}

0800b124 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800b124:	b580      	push	{r7, lr}
 800b126:	b084      	sub	sp, #16
 800b128:	af00      	add	r7, sp, #0
 800b12a:	6078      	str	r0, [r7, #4]
 800b12c:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800b12e:	683b      	ldr	r3, [r7, #0]
 800b130:	331a      	adds	r3, #26
 800b132:	4618      	mov	r0, r3
 800b134:	f7fe fffa 	bl	800a12c <ld_word>
 800b138:	4603      	mov	r3, r0
 800b13a:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	781b      	ldrb	r3, [r3, #0]
 800b140:	2b03      	cmp	r3, #3
 800b142:	d109      	bne.n	800b158 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800b144:	683b      	ldr	r3, [r7, #0]
 800b146:	3314      	adds	r3, #20
 800b148:	4618      	mov	r0, r3
 800b14a:	f7fe ffef 	bl	800a12c <ld_word>
 800b14e:	4603      	mov	r3, r0
 800b150:	041b      	lsls	r3, r3, #16
 800b152:	68fa      	ldr	r2, [r7, #12]
 800b154:	4313      	orrs	r3, r2
 800b156:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800b158:	68fb      	ldr	r3, [r7, #12]
}
 800b15a:	4618      	mov	r0, r3
 800b15c:	3710      	adds	r7, #16
 800b15e:	46bd      	mov	sp, r7
 800b160:	bd80      	pop	{r7, pc}

0800b162 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800b162:	b580      	push	{r7, lr}
 800b164:	b084      	sub	sp, #16
 800b166:	af00      	add	r7, sp, #0
 800b168:	60f8      	str	r0, [r7, #12]
 800b16a:	60b9      	str	r1, [r7, #8]
 800b16c:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800b16e:	68bb      	ldr	r3, [r7, #8]
 800b170:	331a      	adds	r3, #26
 800b172:	687a      	ldr	r2, [r7, #4]
 800b174:	b292      	uxth	r2, r2
 800b176:	4611      	mov	r1, r2
 800b178:	4618      	mov	r0, r3
 800b17a:	f7ff f812 	bl	800a1a2 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800b17e:	68fb      	ldr	r3, [r7, #12]
 800b180:	781b      	ldrb	r3, [r3, #0]
 800b182:	2b03      	cmp	r3, #3
 800b184:	d109      	bne.n	800b19a <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800b186:	68bb      	ldr	r3, [r7, #8]
 800b188:	f103 0214 	add.w	r2, r3, #20
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	0c1b      	lsrs	r3, r3, #16
 800b190:	b29b      	uxth	r3, r3
 800b192:	4619      	mov	r1, r3
 800b194:	4610      	mov	r0, r2
 800b196:	f7ff f804 	bl	800a1a2 <st_word>
	}
}
 800b19a:	bf00      	nop
 800b19c:	3710      	adds	r7, #16
 800b19e:	46bd      	mov	sp, r7
 800b1a0:	bd80      	pop	{r7, pc}
	...

0800b1a4 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800b1a4:	b590      	push	{r4, r7, lr}
 800b1a6:	b087      	sub	sp, #28
 800b1a8:	af00      	add	r7, sp, #0
 800b1aa:	6078      	str	r0, [r7, #4]
 800b1ac:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800b1ae:	683b      	ldr	r3, [r7, #0]
 800b1b0:	331a      	adds	r3, #26
 800b1b2:	4618      	mov	r0, r3
 800b1b4:	f7fe ffba 	bl	800a12c <ld_word>
 800b1b8:	4603      	mov	r3, r0
 800b1ba:	2b00      	cmp	r3, #0
 800b1bc:	d001      	beq.n	800b1c2 <cmp_lfn+0x1e>
 800b1be:	2300      	movs	r3, #0
 800b1c0:	e059      	b.n	800b276 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800b1c2:	683b      	ldr	r3, [r7, #0]
 800b1c4:	781b      	ldrb	r3, [r3, #0]
 800b1c6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b1ca:	1e5a      	subs	r2, r3, #1
 800b1cc:	4613      	mov	r3, r2
 800b1ce:	005b      	lsls	r3, r3, #1
 800b1d0:	4413      	add	r3, r2
 800b1d2:	009b      	lsls	r3, r3, #2
 800b1d4:	4413      	add	r3, r2
 800b1d6:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800b1d8:	2301      	movs	r3, #1
 800b1da:	81fb      	strh	r3, [r7, #14]
 800b1dc:	2300      	movs	r3, #0
 800b1de:	613b      	str	r3, [r7, #16]
 800b1e0:	e033      	b.n	800b24a <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800b1e2:	4a27      	ldr	r2, [pc, #156]	; (800b280 <cmp_lfn+0xdc>)
 800b1e4:	693b      	ldr	r3, [r7, #16]
 800b1e6:	4413      	add	r3, r2
 800b1e8:	781b      	ldrb	r3, [r3, #0]
 800b1ea:	461a      	mov	r2, r3
 800b1ec:	683b      	ldr	r3, [r7, #0]
 800b1ee:	4413      	add	r3, r2
 800b1f0:	4618      	mov	r0, r3
 800b1f2:	f7fe ff9b 	bl	800a12c <ld_word>
 800b1f6:	4603      	mov	r3, r0
 800b1f8:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800b1fa:	89fb      	ldrh	r3, [r7, #14]
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	d01a      	beq.n	800b236 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800b200:	697b      	ldr	r3, [r7, #20]
 800b202:	2bfe      	cmp	r3, #254	; 0xfe
 800b204:	d812      	bhi.n	800b22c <cmp_lfn+0x88>
 800b206:	89bb      	ldrh	r3, [r7, #12]
 800b208:	4618      	mov	r0, r3
 800b20a:	f001 fd4b 	bl	800cca4 <ff_wtoupper>
 800b20e:	4603      	mov	r3, r0
 800b210:	461c      	mov	r4, r3
 800b212:	697b      	ldr	r3, [r7, #20]
 800b214:	1c5a      	adds	r2, r3, #1
 800b216:	617a      	str	r2, [r7, #20]
 800b218:	005b      	lsls	r3, r3, #1
 800b21a:	687a      	ldr	r2, [r7, #4]
 800b21c:	4413      	add	r3, r2
 800b21e:	881b      	ldrh	r3, [r3, #0]
 800b220:	4618      	mov	r0, r3
 800b222:	f001 fd3f 	bl	800cca4 <ff_wtoupper>
 800b226:	4603      	mov	r3, r0
 800b228:	429c      	cmp	r4, r3
 800b22a:	d001      	beq.n	800b230 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800b22c:	2300      	movs	r3, #0
 800b22e:	e022      	b.n	800b276 <cmp_lfn+0xd2>
			}
			wc = uc;
 800b230:	89bb      	ldrh	r3, [r7, #12]
 800b232:	81fb      	strh	r3, [r7, #14]
 800b234:	e006      	b.n	800b244 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800b236:	89bb      	ldrh	r3, [r7, #12]
 800b238:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b23c:	4293      	cmp	r3, r2
 800b23e:	d001      	beq.n	800b244 <cmp_lfn+0xa0>
 800b240:	2300      	movs	r3, #0
 800b242:	e018      	b.n	800b276 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800b244:	693b      	ldr	r3, [r7, #16]
 800b246:	3301      	adds	r3, #1
 800b248:	613b      	str	r3, [r7, #16]
 800b24a:	693b      	ldr	r3, [r7, #16]
 800b24c:	2b0c      	cmp	r3, #12
 800b24e:	d9c8      	bls.n	800b1e2 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800b250:	683b      	ldr	r3, [r7, #0]
 800b252:	781b      	ldrb	r3, [r3, #0]
 800b254:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b258:	2b00      	cmp	r3, #0
 800b25a:	d00b      	beq.n	800b274 <cmp_lfn+0xd0>
 800b25c:	89fb      	ldrh	r3, [r7, #14]
 800b25e:	2b00      	cmp	r3, #0
 800b260:	d008      	beq.n	800b274 <cmp_lfn+0xd0>
 800b262:	697b      	ldr	r3, [r7, #20]
 800b264:	005b      	lsls	r3, r3, #1
 800b266:	687a      	ldr	r2, [r7, #4]
 800b268:	4413      	add	r3, r2
 800b26a:	881b      	ldrh	r3, [r3, #0]
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	d001      	beq.n	800b274 <cmp_lfn+0xd0>
 800b270:	2300      	movs	r3, #0
 800b272:	e000      	b.n	800b276 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800b274:	2301      	movs	r3, #1
}
 800b276:	4618      	mov	r0, r3
 800b278:	371c      	adds	r7, #28
 800b27a:	46bd      	mov	sp, r7
 800b27c:	bd90      	pop	{r4, r7, pc}
 800b27e:	bf00      	nop
 800b280:	0800e3bc 	.word	0x0800e3bc

0800b284 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800b284:	b580      	push	{r7, lr}
 800b286:	b088      	sub	sp, #32
 800b288:	af00      	add	r7, sp, #0
 800b28a:	60f8      	str	r0, [r7, #12]
 800b28c:	60b9      	str	r1, [r7, #8]
 800b28e:	4611      	mov	r1, r2
 800b290:	461a      	mov	r2, r3
 800b292:	460b      	mov	r3, r1
 800b294:	71fb      	strb	r3, [r7, #7]
 800b296:	4613      	mov	r3, r2
 800b298:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800b29a:	68bb      	ldr	r3, [r7, #8]
 800b29c:	330d      	adds	r3, #13
 800b29e:	79ba      	ldrb	r2, [r7, #6]
 800b2a0:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800b2a2:	68bb      	ldr	r3, [r7, #8]
 800b2a4:	330b      	adds	r3, #11
 800b2a6:	220f      	movs	r2, #15
 800b2a8:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800b2aa:	68bb      	ldr	r3, [r7, #8]
 800b2ac:	330c      	adds	r3, #12
 800b2ae:	2200      	movs	r2, #0
 800b2b0:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800b2b2:	68bb      	ldr	r3, [r7, #8]
 800b2b4:	331a      	adds	r3, #26
 800b2b6:	2100      	movs	r1, #0
 800b2b8:	4618      	mov	r0, r3
 800b2ba:	f7fe ff72 	bl	800a1a2 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800b2be:	79fb      	ldrb	r3, [r7, #7]
 800b2c0:	1e5a      	subs	r2, r3, #1
 800b2c2:	4613      	mov	r3, r2
 800b2c4:	005b      	lsls	r3, r3, #1
 800b2c6:	4413      	add	r3, r2
 800b2c8:	009b      	lsls	r3, r3, #2
 800b2ca:	4413      	add	r3, r2
 800b2cc:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800b2ce:	2300      	movs	r3, #0
 800b2d0:	82fb      	strh	r3, [r7, #22]
 800b2d2:	2300      	movs	r3, #0
 800b2d4:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800b2d6:	8afb      	ldrh	r3, [r7, #22]
 800b2d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b2dc:	4293      	cmp	r3, r2
 800b2de:	d007      	beq.n	800b2f0 <put_lfn+0x6c>
 800b2e0:	69fb      	ldr	r3, [r7, #28]
 800b2e2:	1c5a      	adds	r2, r3, #1
 800b2e4:	61fa      	str	r2, [r7, #28]
 800b2e6:	005b      	lsls	r3, r3, #1
 800b2e8:	68fa      	ldr	r2, [r7, #12]
 800b2ea:	4413      	add	r3, r2
 800b2ec:	881b      	ldrh	r3, [r3, #0]
 800b2ee:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800b2f0:	4a17      	ldr	r2, [pc, #92]	; (800b350 <put_lfn+0xcc>)
 800b2f2:	69bb      	ldr	r3, [r7, #24]
 800b2f4:	4413      	add	r3, r2
 800b2f6:	781b      	ldrb	r3, [r3, #0]
 800b2f8:	461a      	mov	r2, r3
 800b2fa:	68bb      	ldr	r3, [r7, #8]
 800b2fc:	4413      	add	r3, r2
 800b2fe:	8afa      	ldrh	r2, [r7, #22]
 800b300:	4611      	mov	r1, r2
 800b302:	4618      	mov	r0, r3
 800b304:	f7fe ff4d 	bl	800a1a2 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800b308:	8afb      	ldrh	r3, [r7, #22]
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	d102      	bne.n	800b314 <put_lfn+0x90>
 800b30e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b312:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800b314:	69bb      	ldr	r3, [r7, #24]
 800b316:	3301      	adds	r3, #1
 800b318:	61bb      	str	r3, [r7, #24]
 800b31a:	69bb      	ldr	r3, [r7, #24]
 800b31c:	2b0c      	cmp	r3, #12
 800b31e:	d9da      	bls.n	800b2d6 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800b320:	8afb      	ldrh	r3, [r7, #22]
 800b322:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b326:	4293      	cmp	r3, r2
 800b328:	d006      	beq.n	800b338 <put_lfn+0xb4>
 800b32a:	69fb      	ldr	r3, [r7, #28]
 800b32c:	005b      	lsls	r3, r3, #1
 800b32e:	68fa      	ldr	r2, [r7, #12]
 800b330:	4413      	add	r3, r2
 800b332:	881b      	ldrh	r3, [r3, #0]
 800b334:	2b00      	cmp	r3, #0
 800b336:	d103      	bne.n	800b340 <put_lfn+0xbc>
 800b338:	79fb      	ldrb	r3, [r7, #7]
 800b33a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b33e:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800b340:	68bb      	ldr	r3, [r7, #8]
 800b342:	79fa      	ldrb	r2, [r7, #7]
 800b344:	701a      	strb	r2, [r3, #0]
}
 800b346:	bf00      	nop
 800b348:	3720      	adds	r7, #32
 800b34a:	46bd      	mov	sp, r7
 800b34c:	bd80      	pop	{r7, pc}
 800b34e:	bf00      	nop
 800b350:	0800e3bc 	.word	0x0800e3bc

0800b354 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800b354:	b580      	push	{r7, lr}
 800b356:	b08c      	sub	sp, #48	; 0x30
 800b358:	af00      	add	r7, sp, #0
 800b35a:	60f8      	str	r0, [r7, #12]
 800b35c:	60b9      	str	r1, [r7, #8]
 800b35e:	607a      	str	r2, [r7, #4]
 800b360:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800b362:	220b      	movs	r2, #11
 800b364:	68b9      	ldr	r1, [r7, #8]
 800b366:	68f8      	ldr	r0, [r7, #12]
 800b368:	f7fe ff62 	bl	800a230 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800b36c:	683b      	ldr	r3, [r7, #0]
 800b36e:	2b05      	cmp	r3, #5
 800b370:	d92b      	bls.n	800b3ca <gen_numname+0x76>
		sr = seq;
 800b372:	683b      	ldr	r3, [r7, #0]
 800b374:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800b376:	e022      	b.n	800b3be <gen_numname+0x6a>
			wc = *lfn++;
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	1c9a      	adds	r2, r3, #2
 800b37c:	607a      	str	r2, [r7, #4]
 800b37e:	881b      	ldrh	r3, [r3, #0]
 800b380:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800b382:	2300      	movs	r3, #0
 800b384:	62bb      	str	r3, [r7, #40]	; 0x28
 800b386:	e017      	b.n	800b3b8 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800b388:	69fb      	ldr	r3, [r7, #28]
 800b38a:	005a      	lsls	r2, r3, #1
 800b38c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b38e:	f003 0301 	and.w	r3, r3, #1
 800b392:	4413      	add	r3, r2
 800b394:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800b396:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b398:	085b      	lsrs	r3, r3, #1
 800b39a:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800b39c:	69fb      	ldr	r3, [r7, #28]
 800b39e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b3a2:	2b00      	cmp	r3, #0
 800b3a4:	d005      	beq.n	800b3b2 <gen_numname+0x5e>
 800b3a6:	69fb      	ldr	r3, [r7, #28]
 800b3a8:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 800b3ac:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 800b3b0:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800b3b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3b4:	3301      	adds	r3, #1
 800b3b6:	62bb      	str	r3, [r7, #40]	; 0x28
 800b3b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3ba:	2b0f      	cmp	r3, #15
 800b3bc:	d9e4      	bls.n	800b388 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	881b      	ldrh	r3, [r3, #0]
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	d1d8      	bne.n	800b378 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800b3c6:	69fb      	ldr	r3, [r7, #28]
 800b3c8:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800b3ca:	2307      	movs	r3, #7
 800b3cc:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800b3ce:	683b      	ldr	r3, [r7, #0]
 800b3d0:	b2db      	uxtb	r3, r3
 800b3d2:	f003 030f 	and.w	r3, r3, #15
 800b3d6:	b2db      	uxtb	r3, r3
 800b3d8:	3330      	adds	r3, #48	; 0x30
 800b3da:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800b3de:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b3e2:	2b39      	cmp	r3, #57	; 0x39
 800b3e4:	d904      	bls.n	800b3f0 <gen_numname+0x9c>
 800b3e6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b3ea:	3307      	adds	r3, #7
 800b3ec:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800b3f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3f2:	1e5a      	subs	r2, r3, #1
 800b3f4:	62ba      	str	r2, [r7, #40]	; 0x28
 800b3f6:	3330      	adds	r3, #48	; 0x30
 800b3f8:	443b      	add	r3, r7
 800b3fa:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800b3fe:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800b402:	683b      	ldr	r3, [r7, #0]
 800b404:	091b      	lsrs	r3, r3, #4
 800b406:	603b      	str	r3, [r7, #0]
	} while (seq);
 800b408:	683b      	ldr	r3, [r7, #0]
 800b40a:	2b00      	cmp	r3, #0
 800b40c:	d1df      	bne.n	800b3ce <gen_numname+0x7a>
	ns[i] = '~';
 800b40e:	f107 0214 	add.w	r2, r7, #20
 800b412:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b414:	4413      	add	r3, r2
 800b416:	227e      	movs	r2, #126	; 0x7e
 800b418:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800b41a:	2300      	movs	r3, #0
 800b41c:	627b      	str	r3, [r7, #36]	; 0x24
 800b41e:	e002      	b.n	800b426 <gen_numname+0xd2>
 800b420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b422:	3301      	adds	r3, #1
 800b424:	627b      	str	r3, [r7, #36]	; 0x24
 800b426:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b428:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b42a:	429a      	cmp	r2, r3
 800b42c:	d205      	bcs.n	800b43a <gen_numname+0xe6>
 800b42e:	68fa      	ldr	r2, [r7, #12]
 800b430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b432:	4413      	add	r3, r2
 800b434:	781b      	ldrb	r3, [r3, #0]
 800b436:	2b20      	cmp	r3, #32
 800b438:	d1f2      	bne.n	800b420 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800b43a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b43c:	2b07      	cmp	r3, #7
 800b43e:	d807      	bhi.n	800b450 <gen_numname+0xfc>
 800b440:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b442:	1c5a      	adds	r2, r3, #1
 800b444:	62ba      	str	r2, [r7, #40]	; 0x28
 800b446:	3330      	adds	r3, #48	; 0x30
 800b448:	443b      	add	r3, r7
 800b44a:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800b44e:	e000      	b.n	800b452 <gen_numname+0xfe>
 800b450:	2120      	movs	r1, #32
 800b452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b454:	1c5a      	adds	r2, r3, #1
 800b456:	627a      	str	r2, [r7, #36]	; 0x24
 800b458:	68fa      	ldr	r2, [r7, #12]
 800b45a:	4413      	add	r3, r2
 800b45c:	460a      	mov	r2, r1
 800b45e:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800b460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b462:	2b07      	cmp	r3, #7
 800b464:	d9e9      	bls.n	800b43a <gen_numname+0xe6>
}
 800b466:	bf00      	nop
 800b468:	bf00      	nop
 800b46a:	3730      	adds	r7, #48	; 0x30
 800b46c:	46bd      	mov	sp, r7
 800b46e:	bd80      	pop	{r7, pc}

0800b470 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800b470:	b480      	push	{r7}
 800b472:	b085      	sub	sp, #20
 800b474:	af00      	add	r7, sp, #0
 800b476:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800b478:	2300      	movs	r3, #0
 800b47a:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800b47c:	230b      	movs	r3, #11
 800b47e:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800b480:	7bfb      	ldrb	r3, [r7, #15]
 800b482:	b2da      	uxtb	r2, r3
 800b484:	0852      	lsrs	r2, r2, #1
 800b486:	01db      	lsls	r3, r3, #7
 800b488:	4313      	orrs	r3, r2
 800b48a:	b2da      	uxtb	r2, r3
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	1c59      	adds	r1, r3, #1
 800b490:	6079      	str	r1, [r7, #4]
 800b492:	781b      	ldrb	r3, [r3, #0]
 800b494:	4413      	add	r3, r2
 800b496:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800b498:	68bb      	ldr	r3, [r7, #8]
 800b49a:	3b01      	subs	r3, #1
 800b49c:	60bb      	str	r3, [r7, #8]
 800b49e:	68bb      	ldr	r3, [r7, #8]
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	d1ed      	bne.n	800b480 <sum_sfn+0x10>
	return sum;
 800b4a4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b4a6:	4618      	mov	r0, r3
 800b4a8:	3714      	adds	r7, #20
 800b4aa:	46bd      	mov	sp, r7
 800b4ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4b0:	4770      	bx	lr

0800b4b2 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800b4b2:	b580      	push	{r7, lr}
 800b4b4:	b086      	sub	sp, #24
 800b4b6:	af00      	add	r7, sp, #0
 800b4b8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	681b      	ldr	r3, [r3, #0]
 800b4be:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800b4c0:	2100      	movs	r1, #0
 800b4c2:	6878      	ldr	r0, [r7, #4]
 800b4c4:	f7ff fc88 	bl	800add8 <dir_sdi>
 800b4c8:	4603      	mov	r3, r0
 800b4ca:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800b4cc:	7dfb      	ldrb	r3, [r7, #23]
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	d001      	beq.n	800b4d6 <dir_find+0x24>
 800b4d2:	7dfb      	ldrb	r3, [r7, #23]
 800b4d4:	e0a9      	b.n	800b62a <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800b4d6:	23ff      	movs	r3, #255	; 0xff
 800b4d8:	753b      	strb	r3, [r7, #20]
 800b4da:	7d3b      	ldrb	r3, [r7, #20]
 800b4dc:	757b      	strb	r3, [r7, #21]
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	f04f 32ff 	mov.w	r2, #4294967295
 800b4e4:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	69db      	ldr	r3, [r3, #28]
 800b4ea:	4619      	mov	r1, r3
 800b4ec:	6938      	ldr	r0, [r7, #16]
 800b4ee:	f7ff f891 	bl	800a614 <move_window>
 800b4f2:	4603      	mov	r3, r0
 800b4f4:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800b4f6:	7dfb      	ldrb	r3, [r7, #23]
 800b4f8:	2b00      	cmp	r3, #0
 800b4fa:	f040 8090 	bne.w	800b61e <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	6a1b      	ldr	r3, [r3, #32]
 800b502:	781b      	ldrb	r3, [r3, #0]
 800b504:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800b506:	7dbb      	ldrb	r3, [r7, #22]
 800b508:	2b00      	cmp	r3, #0
 800b50a:	d102      	bne.n	800b512 <dir_find+0x60>
 800b50c:	2304      	movs	r3, #4
 800b50e:	75fb      	strb	r3, [r7, #23]
 800b510:	e08a      	b.n	800b628 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	6a1b      	ldr	r3, [r3, #32]
 800b516:	330b      	adds	r3, #11
 800b518:	781b      	ldrb	r3, [r3, #0]
 800b51a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b51e:	73fb      	strb	r3, [r7, #15]
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	7bfa      	ldrb	r2, [r7, #15]
 800b524:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800b526:	7dbb      	ldrb	r3, [r7, #22]
 800b528:	2be5      	cmp	r3, #229	; 0xe5
 800b52a:	d007      	beq.n	800b53c <dir_find+0x8a>
 800b52c:	7bfb      	ldrb	r3, [r7, #15]
 800b52e:	f003 0308 	and.w	r3, r3, #8
 800b532:	2b00      	cmp	r3, #0
 800b534:	d009      	beq.n	800b54a <dir_find+0x98>
 800b536:	7bfb      	ldrb	r3, [r7, #15]
 800b538:	2b0f      	cmp	r3, #15
 800b53a:	d006      	beq.n	800b54a <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800b53c:	23ff      	movs	r3, #255	; 0xff
 800b53e:	757b      	strb	r3, [r7, #21]
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	f04f 32ff 	mov.w	r2, #4294967295
 800b546:	631a      	str	r2, [r3, #48]	; 0x30
 800b548:	e05e      	b.n	800b608 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800b54a:	7bfb      	ldrb	r3, [r7, #15]
 800b54c:	2b0f      	cmp	r3, #15
 800b54e:	d136      	bne.n	800b5be <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800b556:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	d154      	bne.n	800b608 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800b55e:	7dbb      	ldrb	r3, [r7, #22]
 800b560:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b564:	2b00      	cmp	r3, #0
 800b566:	d00d      	beq.n	800b584 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	6a1b      	ldr	r3, [r3, #32]
 800b56c:	7b5b      	ldrb	r3, [r3, #13]
 800b56e:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800b570:	7dbb      	ldrb	r3, [r7, #22]
 800b572:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b576:	75bb      	strb	r3, [r7, #22]
 800b578:	7dbb      	ldrb	r3, [r7, #22]
 800b57a:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	695a      	ldr	r2, [r3, #20]
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800b584:	7dba      	ldrb	r2, [r7, #22]
 800b586:	7d7b      	ldrb	r3, [r7, #21]
 800b588:	429a      	cmp	r2, r3
 800b58a:	d115      	bne.n	800b5b8 <dir_find+0x106>
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	6a1b      	ldr	r3, [r3, #32]
 800b590:	330d      	adds	r3, #13
 800b592:	781b      	ldrb	r3, [r3, #0]
 800b594:	7d3a      	ldrb	r2, [r7, #20]
 800b596:	429a      	cmp	r2, r3
 800b598:	d10e      	bne.n	800b5b8 <dir_find+0x106>
 800b59a:	693b      	ldr	r3, [r7, #16]
 800b59c:	691a      	ldr	r2, [r3, #16]
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	6a1b      	ldr	r3, [r3, #32]
 800b5a2:	4619      	mov	r1, r3
 800b5a4:	4610      	mov	r0, r2
 800b5a6:	f7ff fdfd 	bl	800b1a4 <cmp_lfn>
 800b5aa:	4603      	mov	r3, r0
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	d003      	beq.n	800b5b8 <dir_find+0x106>
 800b5b0:	7d7b      	ldrb	r3, [r7, #21]
 800b5b2:	3b01      	subs	r3, #1
 800b5b4:	b2db      	uxtb	r3, r3
 800b5b6:	e000      	b.n	800b5ba <dir_find+0x108>
 800b5b8:	23ff      	movs	r3, #255	; 0xff
 800b5ba:	757b      	strb	r3, [r7, #21]
 800b5bc:	e024      	b.n	800b608 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800b5be:	7d7b      	ldrb	r3, [r7, #21]
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	d109      	bne.n	800b5d8 <dir_find+0x126>
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	6a1b      	ldr	r3, [r3, #32]
 800b5c8:	4618      	mov	r0, r3
 800b5ca:	f7ff ff51 	bl	800b470 <sum_sfn>
 800b5ce:	4603      	mov	r3, r0
 800b5d0:	461a      	mov	r2, r3
 800b5d2:	7d3b      	ldrb	r3, [r7, #20]
 800b5d4:	4293      	cmp	r3, r2
 800b5d6:	d024      	beq.n	800b622 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800b5de:	f003 0301 	and.w	r3, r3, #1
 800b5e2:	2b00      	cmp	r3, #0
 800b5e4:	d10a      	bne.n	800b5fc <dir_find+0x14a>
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	6a18      	ldr	r0, [r3, #32]
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	3324      	adds	r3, #36	; 0x24
 800b5ee:	220b      	movs	r2, #11
 800b5f0:	4619      	mov	r1, r3
 800b5f2:	f7fe fe59 	bl	800a2a8 <mem_cmp>
 800b5f6:	4603      	mov	r3, r0
 800b5f8:	2b00      	cmp	r3, #0
 800b5fa:	d014      	beq.n	800b626 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800b5fc:	23ff      	movs	r3, #255	; 0xff
 800b5fe:	757b      	strb	r3, [r7, #21]
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	f04f 32ff 	mov.w	r2, #4294967295
 800b606:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800b608:	2100      	movs	r1, #0
 800b60a:	6878      	ldr	r0, [r7, #4]
 800b60c:	f7ff fc6d 	bl	800aeea <dir_next>
 800b610:	4603      	mov	r3, r0
 800b612:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800b614:	7dfb      	ldrb	r3, [r7, #23]
 800b616:	2b00      	cmp	r3, #0
 800b618:	f43f af65 	beq.w	800b4e6 <dir_find+0x34>
 800b61c:	e004      	b.n	800b628 <dir_find+0x176>
		if (res != FR_OK) break;
 800b61e:	bf00      	nop
 800b620:	e002      	b.n	800b628 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800b622:	bf00      	nop
 800b624:	e000      	b.n	800b628 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800b626:	bf00      	nop

	return res;
 800b628:	7dfb      	ldrb	r3, [r7, #23]
}
 800b62a:	4618      	mov	r0, r3
 800b62c:	3718      	adds	r7, #24
 800b62e:	46bd      	mov	sp, r7
 800b630:	bd80      	pop	{r7, pc}
	...

0800b634 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800b634:	b580      	push	{r7, lr}
 800b636:	b08c      	sub	sp, #48	; 0x30
 800b638:	af00      	add	r7, sp, #0
 800b63a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	681b      	ldr	r3, [r3, #0]
 800b640:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800b648:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800b64c:	2b00      	cmp	r3, #0
 800b64e:	d001      	beq.n	800b654 <dir_register+0x20>
 800b650:	2306      	movs	r3, #6
 800b652:	e0e0      	b.n	800b816 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800b654:	2300      	movs	r3, #0
 800b656:	627b      	str	r3, [r7, #36]	; 0x24
 800b658:	e002      	b.n	800b660 <dir_register+0x2c>
 800b65a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b65c:	3301      	adds	r3, #1
 800b65e:	627b      	str	r3, [r7, #36]	; 0x24
 800b660:	69fb      	ldr	r3, [r7, #28]
 800b662:	691a      	ldr	r2, [r3, #16]
 800b664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b666:	005b      	lsls	r3, r3, #1
 800b668:	4413      	add	r3, r2
 800b66a:	881b      	ldrh	r3, [r3, #0]
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	d1f4      	bne.n	800b65a <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800b676:	f107 030c 	add.w	r3, r7, #12
 800b67a:	220c      	movs	r2, #12
 800b67c:	4618      	mov	r0, r3
 800b67e:	f7fe fdd7 	bl	800a230 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800b682:	7dfb      	ldrb	r3, [r7, #23]
 800b684:	f003 0301 	and.w	r3, r3, #1
 800b688:	2b00      	cmp	r3, #0
 800b68a:	d032      	beq.n	800b6f2 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	2240      	movs	r2, #64	; 0x40
 800b690:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 800b694:	2301      	movs	r3, #1
 800b696:	62bb      	str	r3, [r7, #40]	; 0x28
 800b698:	e016      	b.n	800b6c8 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	f103 0024 	add.w	r0, r3, #36	; 0x24
 800b6a0:	69fb      	ldr	r3, [r7, #28]
 800b6a2:	691a      	ldr	r2, [r3, #16]
 800b6a4:	f107 010c 	add.w	r1, r7, #12
 800b6a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6aa:	f7ff fe53 	bl	800b354 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800b6ae:	6878      	ldr	r0, [r7, #4]
 800b6b0:	f7ff feff 	bl	800b4b2 <dir_find>
 800b6b4:	4603      	mov	r3, r0
 800b6b6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 800b6ba:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b6be:	2b00      	cmp	r3, #0
 800b6c0:	d106      	bne.n	800b6d0 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800b6c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6c4:	3301      	adds	r3, #1
 800b6c6:	62bb      	str	r3, [r7, #40]	; 0x28
 800b6c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6ca:	2b63      	cmp	r3, #99	; 0x63
 800b6cc:	d9e5      	bls.n	800b69a <dir_register+0x66>
 800b6ce:	e000      	b.n	800b6d2 <dir_register+0x9e>
			if (res != FR_OK) break;
 800b6d0:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800b6d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6d4:	2b64      	cmp	r3, #100	; 0x64
 800b6d6:	d101      	bne.n	800b6dc <dir_register+0xa8>
 800b6d8:	2307      	movs	r3, #7
 800b6da:	e09c      	b.n	800b816 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800b6dc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b6e0:	2b04      	cmp	r3, #4
 800b6e2:	d002      	beq.n	800b6ea <dir_register+0xb6>
 800b6e4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b6e8:	e095      	b.n	800b816 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800b6ea:	7dfa      	ldrb	r2, [r7, #23]
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800b6f2:	7dfb      	ldrb	r3, [r7, #23]
 800b6f4:	f003 0302 	and.w	r3, r3, #2
 800b6f8:	2b00      	cmp	r3, #0
 800b6fa:	d007      	beq.n	800b70c <dir_register+0xd8>
 800b6fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6fe:	330c      	adds	r3, #12
 800b700:	4a47      	ldr	r2, [pc, #284]	; (800b820 <dir_register+0x1ec>)
 800b702:	fba2 2303 	umull	r2, r3, r2, r3
 800b706:	089b      	lsrs	r3, r3, #2
 800b708:	3301      	adds	r3, #1
 800b70a:	e000      	b.n	800b70e <dir_register+0xda>
 800b70c:	2301      	movs	r3, #1
 800b70e:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800b710:	6a39      	ldr	r1, [r7, #32]
 800b712:	6878      	ldr	r0, [r7, #4]
 800b714:	f7ff fcbf 	bl	800b096 <dir_alloc>
 800b718:	4603      	mov	r3, r0
 800b71a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800b71e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b722:	2b00      	cmp	r3, #0
 800b724:	d148      	bne.n	800b7b8 <dir_register+0x184>
 800b726:	6a3b      	ldr	r3, [r7, #32]
 800b728:	3b01      	subs	r3, #1
 800b72a:	623b      	str	r3, [r7, #32]
 800b72c:	6a3b      	ldr	r3, [r7, #32]
 800b72e:	2b00      	cmp	r3, #0
 800b730:	d042      	beq.n	800b7b8 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	695a      	ldr	r2, [r3, #20]
 800b736:	6a3b      	ldr	r3, [r7, #32]
 800b738:	015b      	lsls	r3, r3, #5
 800b73a:	1ad3      	subs	r3, r2, r3
 800b73c:	4619      	mov	r1, r3
 800b73e:	6878      	ldr	r0, [r7, #4]
 800b740:	f7ff fb4a 	bl	800add8 <dir_sdi>
 800b744:	4603      	mov	r3, r0
 800b746:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800b74a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b74e:	2b00      	cmp	r3, #0
 800b750:	d132      	bne.n	800b7b8 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	3324      	adds	r3, #36	; 0x24
 800b756:	4618      	mov	r0, r3
 800b758:	f7ff fe8a 	bl	800b470 <sum_sfn>
 800b75c:	4603      	mov	r3, r0
 800b75e:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	69db      	ldr	r3, [r3, #28]
 800b764:	4619      	mov	r1, r3
 800b766:	69f8      	ldr	r0, [r7, #28]
 800b768:	f7fe ff54 	bl	800a614 <move_window>
 800b76c:	4603      	mov	r3, r0
 800b76e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 800b772:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b776:	2b00      	cmp	r3, #0
 800b778:	d11d      	bne.n	800b7b6 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800b77a:	69fb      	ldr	r3, [r7, #28]
 800b77c:	6918      	ldr	r0, [r3, #16]
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	6a19      	ldr	r1, [r3, #32]
 800b782:	6a3b      	ldr	r3, [r7, #32]
 800b784:	b2da      	uxtb	r2, r3
 800b786:	7efb      	ldrb	r3, [r7, #27]
 800b788:	f7ff fd7c 	bl	800b284 <put_lfn>
				fs->wflag = 1;
 800b78c:	69fb      	ldr	r3, [r7, #28]
 800b78e:	2201      	movs	r2, #1
 800b790:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800b792:	2100      	movs	r1, #0
 800b794:	6878      	ldr	r0, [r7, #4]
 800b796:	f7ff fba8 	bl	800aeea <dir_next>
 800b79a:	4603      	mov	r3, r0
 800b79c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 800b7a0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b7a4:	2b00      	cmp	r3, #0
 800b7a6:	d107      	bne.n	800b7b8 <dir_register+0x184>
 800b7a8:	6a3b      	ldr	r3, [r7, #32]
 800b7aa:	3b01      	subs	r3, #1
 800b7ac:	623b      	str	r3, [r7, #32]
 800b7ae:	6a3b      	ldr	r3, [r7, #32]
 800b7b0:	2b00      	cmp	r3, #0
 800b7b2:	d1d5      	bne.n	800b760 <dir_register+0x12c>
 800b7b4:	e000      	b.n	800b7b8 <dir_register+0x184>
				if (res != FR_OK) break;
 800b7b6:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800b7b8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b7bc:	2b00      	cmp	r3, #0
 800b7be:	d128      	bne.n	800b812 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	69db      	ldr	r3, [r3, #28]
 800b7c4:	4619      	mov	r1, r3
 800b7c6:	69f8      	ldr	r0, [r7, #28]
 800b7c8:	f7fe ff24 	bl	800a614 <move_window>
 800b7cc:	4603      	mov	r3, r0
 800b7ce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800b7d2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	d11b      	bne.n	800b812 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	6a1b      	ldr	r3, [r3, #32]
 800b7de:	2220      	movs	r2, #32
 800b7e0:	2100      	movs	r1, #0
 800b7e2:	4618      	mov	r0, r3
 800b7e4:	f7fe fd45 	bl	800a272 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	6a18      	ldr	r0, [r3, #32]
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	3324      	adds	r3, #36	; 0x24
 800b7f0:	220b      	movs	r2, #11
 800b7f2:	4619      	mov	r1, r3
 800b7f4:	f7fe fd1c 	bl	800a230 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	6a1b      	ldr	r3, [r3, #32]
 800b802:	330c      	adds	r3, #12
 800b804:	f002 0218 	and.w	r2, r2, #24
 800b808:	b2d2      	uxtb	r2, r2
 800b80a:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800b80c:	69fb      	ldr	r3, [r7, #28]
 800b80e:	2201      	movs	r2, #1
 800b810:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800b812:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800b816:	4618      	mov	r0, r3
 800b818:	3730      	adds	r7, #48	; 0x30
 800b81a:	46bd      	mov	sp, r7
 800b81c:	bd80      	pop	{r7, pc}
 800b81e:	bf00      	nop
 800b820:	4ec4ec4f 	.word	0x4ec4ec4f

0800b824 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800b824:	b580      	push	{r7, lr}
 800b826:	b08a      	sub	sp, #40	; 0x28
 800b828:	af00      	add	r7, sp, #0
 800b82a:	6078      	str	r0, [r7, #4]
 800b82c:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800b82e:	683b      	ldr	r3, [r7, #0]
 800b830:	681b      	ldr	r3, [r3, #0]
 800b832:	613b      	str	r3, [r7, #16]
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	681b      	ldr	r3, [r3, #0]
 800b838:	691b      	ldr	r3, [r3, #16]
 800b83a:	60fb      	str	r3, [r7, #12]
 800b83c:	2300      	movs	r3, #0
 800b83e:	617b      	str	r3, [r7, #20]
 800b840:	697b      	ldr	r3, [r7, #20]
 800b842:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800b844:	69bb      	ldr	r3, [r7, #24]
 800b846:	1c5a      	adds	r2, r3, #1
 800b848:	61ba      	str	r2, [r7, #24]
 800b84a:	693a      	ldr	r2, [r7, #16]
 800b84c:	4413      	add	r3, r2
 800b84e:	781b      	ldrb	r3, [r3, #0]
 800b850:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800b852:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b854:	2b1f      	cmp	r3, #31
 800b856:	d940      	bls.n	800b8da <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800b858:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b85a:	2b2f      	cmp	r3, #47	; 0x2f
 800b85c:	d006      	beq.n	800b86c <create_name+0x48>
 800b85e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b860:	2b5c      	cmp	r3, #92	; 0x5c
 800b862:	d110      	bne.n	800b886 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800b864:	e002      	b.n	800b86c <create_name+0x48>
 800b866:	69bb      	ldr	r3, [r7, #24]
 800b868:	3301      	adds	r3, #1
 800b86a:	61bb      	str	r3, [r7, #24]
 800b86c:	693a      	ldr	r2, [r7, #16]
 800b86e:	69bb      	ldr	r3, [r7, #24]
 800b870:	4413      	add	r3, r2
 800b872:	781b      	ldrb	r3, [r3, #0]
 800b874:	2b2f      	cmp	r3, #47	; 0x2f
 800b876:	d0f6      	beq.n	800b866 <create_name+0x42>
 800b878:	693a      	ldr	r2, [r7, #16]
 800b87a:	69bb      	ldr	r3, [r7, #24]
 800b87c:	4413      	add	r3, r2
 800b87e:	781b      	ldrb	r3, [r3, #0]
 800b880:	2b5c      	cmp	r3, #92	; 0x5c
 800b882:	d0f0      	beq.n	800b866 <create_name+0x42>
			break;
 800b884:	e02a      	b.n	800b8dc <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800b886:	697b      	ldr	r3, [r7, #20]
 800b888:	2bfe      	cmp	r3, #254	; 0xfe
 800b88a:	d901      	bls.n	800b890 <create_name+0x6c>
 800b88c:	2306      	movs	r3, #6
 800b88e:	e17d      	b.n	800bb8c <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 800b890:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b892:	b2db      	uxtb	r3, r3
 800b894:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800b896:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b898:	2101      	movs	r1, #1
 800b89a:	4618      	mov	r0, r3
 800b89c:	f001 f9c6 	bl	800cc2c <ff_convert>
 800b8a0:	4603      	mov	r3, r0
 800b8a2:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800b8a4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b8a6:	2b00      	cmp	r3, #0
 800b8a8:	d101      	bne.n	800b8ae <create_name+0x8a>
 800b8aa:	2306      	movs	r3, #6
 800b8ac:	e16e      	b.n	800bb8c <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800b8ae:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b8b0:	2b7f      	cmp	r3, #127	; 0x7f
 800b8b2:	d809      	bhi.n	800b8c8 <create_name+0xa4>
 800b8b4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b8b6:	4619      	mov	r1, r3
 800b8b8:	488d      	ldr	r0, [pc, #564]	; (800baf0 <create_name+0x2cc>)
 800b8ba:	f7fe fd1c 	bl	800a2f6 <chk_chr>
 800b8be:	4603      	mov	r3, r0
 800b8c0:	2b00      	cmp	r3, #0
 800b8c2:	d001      	beq.n	800b8c8 <create_name+0xa4>
 800b8c4:	2306      	movs	r3, #6
 800b8c6:	e161      	b.n	800bb8c <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 800b8c8:	697b      	ldr	r3, [r7, #20]
 800b8ca:	1c5a      	adds	r2, r3, #1
 800b8cc:	617a      	str	r2, [r7, #20]
 800b8ce:	005b      	lsls	r3, r3, #1
 800b8d0:	68fa      	ldr	r2, [r7, #12]
 800b8d2:	4413      	add	r3, r2
 800b8d4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800b8d6:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800b8d8:	e7b4      	b.n	800b844 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800b8da:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800b8dc:	693a      	ldr	r2, [r7, #16]
 800b8de:	69bb      	ldr	r3, [r7, #24]
 800b8e0:	441a      	add	r2, r3
 800b8e2:	683b      	ldr	r3, [r7, #0]
 800b8e4:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800b8e6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b8e8:	2b1f      	cmp	r3, #31
 800b8ea:	d801      	bhi.n	800b8f0 <create_name+0xcc>
 800b8ec:	2304      	movs	r3, #4
 800b8ee:	e000      	b.n	800b8f2 <create_name+0xce>
 800b8f0:	2300      	movs	r3, #0
 800b8f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800b8f6:	e011      	b.n	800b91c <create_name+0xf8>
		w = lfn[di - 1];
 800b8f8:	697b      	ldr	r3, [r7, #20]
 800b8fa:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800b8fe:	3b01      	subs	r3, #1
 800b900:	005b      	lsls	r3, r3, #1
 800b902:	68fa      	ldr	r2, [r7, #12]
 800b904:	4413      	add	r3, r2
 800b906:	881b      	ldrh	r3, [r3, #0]
 800b908:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800b90a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b90c:	2b20      	cmp	r3, #32
 800b90e:	d002      	beq.n	800b916 <create_name+0xf2>
 800b910:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b912:	2b2e      	cmp	r3, #46	; 0x2e
 800b914:	d106      	bne.n	800b924 <create_name+0x100>
		di--;
 800b916:	697b      	ldr	r3, [r7, #20]
 800b918:	3b01      	subs	r3, #1
 800b91a:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800b91c:	697b      	ldr	r3, [r7, #20]
 800b91e:	2b00      	cmp	r3, #0
 800b920:	d1ea      	bne.n	800b8f8 <create_name+0xd4>
 800b922:	e000      	b.n	800b926 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800b924:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800b926:	697b      	ldr	r3, [r7, #20]
 800b928:	005b      	lsls	r3, r3, #1
 800b92a:	68fa      	ldr	r2, [r7, #12]
 800b92c:	4413      	add	r3, r2
 800b92e:	2200      	movs	r2, #0
 800b930:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800b932:	697b      	ldr	r3, [r7, #20]
 800b934:	2b00      	cmp	r3, #0
 800b936:	d101      	bne.n	800b93c <create_name+0x118>
 800b938:	2306      	movs	r3, #6
 800b93a:	e127      	b.n	800bb8c <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	3324      	adds	r3, #36	; 0x24
 800b940:	220b      	movs	r2, #11
 800b942:	2120      	movs	r1, #32
 800b944:	4618      	mov	r0, r3
 800b946:	f7fe fc94 	bl	800a272 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800b94a:	2300      	movs	r3, #0
 800b94c:	61bb      	str	r3, [r7, #24]
 800b94e:	e002      	b.n	800b956 <create_name+0x132>
 800b950:	69bb      	ldr	r3, [r7, #24]
 800b952:	3301      	adds	r3, #1
 800b954:	61bb      	str	r3, [r7, #24]
 800b956:	69bb      	ldr	r3, [r7, #24]
 800b958:	005b      	lsls	r3, r3, #1
 800b95a:	68fa      	ldr	r2, [r7, #12]
 800b95c:	4413      	add	r3, r2
 800b95e:	881b      	ldrh	r3, [r3, #0]
 800b960:	2b20      	cmp	r3, #32
 800b962:	d0f5      	beq.n	800b950 <create_name+0x12c>
 800b964:	69bb      	ldr	r3, [r7, #24]
 800b966:	005b      	lsls	r3, r3, #1
 800b968:	68fa      	ldr	r2, [r7, #12]
 800b96a:	4413      	add	r3, r2
 800b96c:	881b      	ldrh	r3, [r3, #0]
 800b96e:	2b2e      	cmp	r3, #46	; 0x2e
 800b970:	d0ee      	beq.n	800b950 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800b972:	69bb      	ldr	r3, [r7, #24]
 800b974:	2b00      	cmp	r3, #0
 800b976:	d009      	beq.n	800b98c <create_name+0x168>
 800b978:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b97c:	f043 0303 	orr.w	r3, r3, #3
 800b980:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800b984:	e002      	b.n	800b98c <create_name+0x168>
 800b986:	697b      	ldr	r3, [r7, #20]
 800b988:	3b01      	subs	r3, #1
 800b98a:	617b      	str	r3, [r7, #20]
 800b98c:	697b      	ldr	r3, [r7, #20]
 800b98e:	2b00      	cmp	r3, #0
 800b990:	d009      	beq.n	800b9a6 <create_name+0x182>
 800b992:	697b      	ldr	r3, [r7, #20]
 800b994:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800b998:	3b01      	subs	r3, #1
 800b99a:	005b      	lsls	r3, r3, #1
 800b99c:	68fa      	ldr	r2, [r7, #12]
 800b99e:	4413      	add	r3, r2
 800b9a0:	881b      	ldrh	r3, [r3, #0]
 800b9a2:	2b2e      	cmp	r3, #46	; 0x2e
 800b9a4:	d1ef      	bne.n	800b986 <create_name+0x162>

	i = b = 0; ni = 8;
 800b9a6:	2300      	movs	r3, #0
 800b9a8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800b9ac:	2300      	movs	r3, #0
 800b9ae:	623b      	str	r3, [r7, #32]
 800b9b0:	2308      	movs	r3, #8
 800b9b2:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800b9b4:	69bb      	ldr	r3, [r7, #24]
 800b9b6:	1c5a      	adds	r2, r3, #1
 800b9b8:	61ba      	str	r2, [r7, #24]
 800b9ba:	005b      	lsls	r3, r3, #1
 800b9bc:	68fa      	ldr	r2, [r7, #12]
 800b9be:	4413      	add	r3, r2
 800b9c0:	881b      	ldrh	r3, [r3, #0]
 800b9c2:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800b9c4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b9c6:	2b00      	cmp	r3, #0
 800b9c8:	f000 8090 	beq.w	800baec <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800b9cc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b9ce:	2b20      	cmp	r3, #32
 800b9d0:	d006      	beq.n	800b9e0 <create_name+0x1bc>
 800b9d2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b9d4:	2b2e      	cmp	r3, #46	; 0x2e
 800b9d6:	d10a      	bne.n	800b9ee <create_name+0x1ca>
 800b9d8:	69ba      	ldr	r2, [r7, #24]
 800b9da:	697b      	ldr	r3, [r7, #20]
 800b9dc:	429a      	cmp	r2, r3
 800b9de:	d006      	beq.n	800b9ee <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800b9e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b9e4:	f043 0303 	orr.w	r3, r3, #3
 800b9e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b9ec:	e07d      	b.n	800baea <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800b9ee:	6a3a      	ldr	r2, [r7, #32]
 800b9f0:	69fb      	ldr	r3, [r7, #28]
 800b9f2:	429a      	cmp	r2, r3
 800b9f4:	d203      	bcs.n	800b9fe <create_name+0x1da>
 800b9f6:	69ba      	ldr	r2, [r7, #24]
 800b9f8:	697b      	ldr	r3, [r7, #20]
 800b9fa:	429a      	cmp	r2, r3
 800b9fc:	d123      	bne.n	800ba46 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800b9fe:	69fb      	ldr	r3, [r7, #28]
 800ba00:	2b0b      	cmp	r3, #11
 800ba02:	d106      	bne.n	800ba12 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800ba04:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ba08:	f043 0303 	orr.w	r3, r3, #3
 800ba0c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ba10:	e075      	b.n	800bafe <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800ba12:	69ba      	ldr	r2, [r7, #24]
 800ba14:	697b      	ldr	r3, [r7, #20]
 800ba16:	429a      	cmp	r2, r3
 800ba18:	d005      	beq.n	800ba26 <create_name+0x202>
 800ba1a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ba1e:	f043 0303 	orr.w	r3, r3, #3
 800ba22:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800ba26:	69ba      	ldr	r2, [r7, #24]
 800ba28:	697b      	ldr	r3, [r7, #20]
 800ba2a:	429a      	cmp	r2, r3
 800ba2c:	d866      	bhi.n	800bafc <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800ba2e:	697b      	ldr	r3, [r7, #20]
 800ba30:	61bb      	str	r3, [r7, #24]
 800ba32:	2308      	movs	r3, #8
 800ba34:	623b      	str	r3, [r7, #32]
 800ba36:	230b      	movs	r3, #11
 800ba38:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800ba3a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ba3e:	009b      	lsls	r3, r3, #2
 800ba40:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800ba44:	e051      	b.n	800baea <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800ba46:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ba48:	2b7f      	cmp	r3, #127	; 0x7f
 800ba4a:	d914      	bls.n	800ba76 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800ba4c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ba4e:	2100      	movs	r1, #0
 800ba50:	4618      	mov	r0, r3
 800ba52:	f001 f8eb 	bl	800cc2c <ff_convert>
 800ba56:	4603      	mov	r3, r0
 800ba58:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800ba5a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ba5c:	2b00      	cmp	r3, #0
 800ba5e:	d004      	beq.n	800ba6a <create_name+0x246>
 800ba60:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ba62:	3b80      	subs	r3, #128	; 0x80
 800ba64:	4a23      	ldr	r2, [pc, #140]	; (800baf4 <create_name+0x2d0>)
 800ba66:	5cd3      	ldrb	r3, [r2, r3]
 800ba68:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800ba6a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ba6e:	f043 0302 	orr.w	r3, r3, #2
 800ba72:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800ba76:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	d007      	beq.n	800ba8c <create_name+0x268>
 800ba7c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ba7e:	4619      	mov	r1, r3
 800ba80:	481d      	ldr	r0, [pc, #116]	; (800baf8 <create_name+0x2d4>)
 800ba82:	f7fe fc38 	bl	800a2f6 <chk_chr>
 800ba86:	4603      	mov	r3, r0
 800ba88:	2b00      	cmp	r3, #0
 800ba8a:	d008      	beq.n	800ba9e <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800ba8c:	235f      	movs	r3, #95	; 0x5f
 800ba8e:	84bb      	strh	r3, [r7, #36]	; 0x24
 800ba90:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ba94:	f043 0303 	orr.w	r3, r3, #3
 800ba98:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ba9c:	e01b      	b.n	800bad6 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800ba9e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800baa0:	2b40      	cmp	r3, #64	; 0x40
 800baa2:	d909      	bls.n	800bab8 <create_name+0x294>
 800baa4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800baa6:	2b5a      	cmp	r3, #90	; 0x5a
 800baa8:	d806      	bhi.n	800bab8 <create_name+0x294>
					b |= 2;
 800baaa:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800baae:	f043 0302 	orr.w	r3, r3, #2
 800bab2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800bab6:	e00e      	b.n	800bad6 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800bab8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800baba:	2b60      	cmp	r3, #96	; 0x60
 800babc:	d90b      	bls.n	800bad6 <create_name+0x2b2>
 800babe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bac0:	2b7a      	cmp	r3, #122	; 0x7a
 800bac2:	d808      	bhi.n	800bad6 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800bac4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800bac8:	f043 0301 	orr.w	r3, r3, #1
 800bacc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800bad0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bad2:	3b20      	subs	r3, #32
 800bad4:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800bad6:	6a3b      	ldr	r3, [r7, #32]
 800bad8:	1c5a      	adds	r2, r3, #1
 800bada:	623a      	str	r2, [r7, #32]
 800badc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800bade:	b2d1      	uxtb	r1, r2
 800bae0:	687a      	ldr	r2, [r7, #4]
 800bae2:	4413      	add	r3, r2
 800bae4:	460a      	mov	r2, r1
 800bae6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 800baea:	e763      	b.n	800b9b4 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800baec:	bf00      	nop
 800baee:	e006      	b.n	800bafe <create_name+0x2da>
 800baf0:	0800e2c0 	.word	0x0800e2c0
 800baf4:	0800e33c 	.word	0x0800e33c
 800baf8:	0800e2cc 	.word	0x0800e2cc
			if (si > di) break;			/* No extension */
 800bafc:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800bb04:	2be5      	cmp	r3, #229	; 0xe5
 800bb06:	d103      	bne.n	800bb10 <create_name+0x2ec>
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	2205      	movs	r2, #5
 800bb0c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 800bb10:	69fb      	ldr	r3, [r7, #28]
 800bb12:	2b08      	cmp	r3, #8
 800bb14:	d104      	bne.n	800bb20 <create_name+0x2fc>
 800bb16:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800bb1a:	009b      	lsls	r3, r3, #2
 800bb1c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800bb20:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800bb24:	f003 030c 	and.w	r3, r3, #12
 800bb28:	2b0c      	cmp	r3, #12
 800bb2a:	d005      	beq.n	800bb38 <create_name+0x314>
 800bb2c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800bb30:	f003 0303 	and.w	r3, r3, #3
 800bb34:	2b03      	cmp	r3, #3
 800bb36:	d105      	bne.n	800bb44 <create_name+0x320>
 800bb38:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bb3c:	f043 0302 	orr.w	r3, r3, #2
 800bb40:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800bb44:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bb48:	f003 0302 	and.w	r3, r3, #2
 800bb4c:	2b00      	cmp	r3, #0
 800bb4e:	d117      	bne.n	800bb80 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800bb50:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800bb54:	f003 0303 	and.w	r3, r3, #3
 800bb58:	2b01      	cmp	r3, #1
 800bb5a:	d105      	bne.n	800bb68 <create_name+0x344>
 800bb5c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bb60:	f043 0310 	orr.w	r3, r3, #16
 800bb64:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800bb68:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800bb6c:	f003 030c 	and.w	r3, r3, #12
 800bb70:	2b04      	cmp	r3, #4
 800bb72:	d105      	bne.n	800bb80 <create_name+0x35c>
 800bb74:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bb78:	f043 0308 	orr.w	r3, r3, #8
 800bb7c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800bb86:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 800bb8a:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800bb8c:	4618      	mov	r0, r3
 800bb8e:	3728      	adds	r7, #40	; 0x28
 800bb90:	46bd      	mov	sp, r7
 800bb92:	bd80      	pop	{r7, pc}

0800bb94 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800bb94:	b580      	push	{r7, lr}
 800bb96:	b086      	sub	sp, #24
 800bb98:	af00      	add	r7, sp, #0
 800bb9a:	6078      	str	r0, [r7, #4]
 800bb9c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800bba2:	693b      	ldr	r3, [r7, #16]
 800bba4:	681b      	ldr	r3, [r3, #0]
 800bba6:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800bba8:	e002      	b.n	800bbb0 <follow_path+0x1c>
 800bbaa:	683b      	ldr	r3, [r7, #0]
 800bbac:	3301      	adds	r3, #1
 800bbae:	603b      	str	r3, [r7, #0]
 800bbb0:	683b      	ldr	r3, [r7, #0]
 800bbb2:	781b      	ldrb	r3, [r3, #0]
 800bbb4:	2b2f      	cmp	r3, #47	; 0x2f
 800bbb6:	d0f8      	beq.n	800bbaa <follow_path+0x16>
 800bbb8:	683b      	ldr	r3, [r7, #0]
 800bbba:	781b      	ldrb	r3, [r3, #0]
 800bbbc:	2b5c      	cmp	r3, #92	; 0x5c
 800bbbe:	d0f4      	beq.n	800bbaa <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800bbc0:	693b      	ldr	r3, [r7, #16]
 800bbc2:	2200      	movs	r2, #0
 800bbc4:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800bbc6:	683b      	ldr	r3, [r7, #0]
 800bbc8:	781b      	ldrb	r3, [r3, #0]
 800bbca:	2b1f      	cmp	r3, #31
 800bbcc:	d80a      	bhi.n	800bbe4 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	2280      	movs	r2, #128	; 0x80
 800bbd2:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800bbd6:	2100      	movs	r1, #0
 800bbd8:	6878      	ldr	r0, [r7, #4]
 800bbda:	f7ff f8fd 	bl	800add8 <dir_sdi>
 800bbde:	4603      	mov	r3, r0
 800bbe0:	75fb      	strb	r3, [r7, #23]
 800bbe2:	e048      	b.n	800bc76 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800bbe4:	463b      	mov	r3, r7
 800bbe6:	4619      	mov	r1, r3
 800bbe8:	6878      	ldr	r0, [r7, #4]
 800bbea:	f7ff fe1b 	bl	800b824 <create_name>
 800bbee:	4603      	mov	r3, r0
 800bbf0:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800bbf2:	7dfb      	ldrb	r3, [r7, #23]
 800bbf4:	2b00      	cmp	r3, #0
 800bbf6:	d139      	bne.n	800bc6c <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 800bbf8:	6878      	ldr	r0, [r7, #4]
 800bbfa:	f7ff fc5a 	bl	800b4b2 <dir_find>
 800bbfe:	4603      	mov	r3, r0
 800bc00:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800bc08:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800bc0a:	7dfb      	ldrb	r3, [r7, #23]
 800bc0c:	2b00      	cmp	r3, #0
 800bc0e:	d00a      	beq.n	800bc26 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800bc10:	7dfb      	ldrb	r3, [r7, #23]
 800bc12:	2b04      	cmp	r3, #4
 800bc14:	d12c      	bne.n	800bc70 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800bc16:	7afb      	ldrb	r3, [r7, #11]
 800bc18:	f003 0304 	and.w	r3, r3, #4
 800bc1c:	2b00      	cmp	r3, #0
 800bc1e:	d127      	bne.n	800bc70 <follow_path+0xdc>
 800bc20:	2305      	movs	r3, #5
 800bc22:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800bc24:	e024      	b.n	800bc70 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800bc26:	7afb      	ldrb	r3, [r7, #11]
 800bc28:	f003 0304 	and.w	r3, r3, #4
 800bc2c:	2b00      	cmp	r3, #0
 800bc2e:	d121      	bne.n	800bc74 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800bc30:	693b      	ldr	r3, [r7, #16]
 800bc32:	799b      	ldrb	r3, [r3, #6]
 800bc34:	f003 0310 	and.w	r3, r3, #16
 800bc38:	2b00      	cmp	r3, #0
 800bc3a:	d102      	bne.n	800bc42 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800bc3c:	2305      	movs	r3, #5
 800bc3e:	75fb      	strb	r3, [r7, #23]
 800bc40:	e019      	b.n	800bc76 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800bc42:	68fb      	ldr	r3, [r7, #12]
 800bc44:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	695b      	ldr	r3, [r3, #20]
 800bc4c:	68fa      	ldr	r2, [r7, #12]
 800bc4e:	8992      	ldrh	r2, [r2, #12]
 800bc50:	fbb3 f0f2 	udiv	r0, r3, r2
 800bc54:	fb00 f202 	mul.w	r2, r0, r2
 800bc58:	1a9b      	subs	r3, r3, r2
 800bc5a:	440b      	add	r3, r1
 800bc5c:	4619      	mov	r1, r3
 800bc5e:	68f8      	ldr	r0, [r7, #12]
 800bc60:	f7ff fa60 	bl	800b124 <ld_clust>
 800bc64:	4602      	mov	r2, r0
 800bc66:	693b      	ldr	r3, [r7, #16]
 800bc68:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800bc6a:	e7bb      	b.n	800bbe4 <follow_path+0x50>
			if (res != FR_OK) break;
 800bc6c:	bf00      	nop
 800bc6e:	e002      	b.n	800bc76 <follow_path+0xe2>
				break;
 800bc70:	bf00      	nop
 800bc72:	e000      	b.n	800bc76 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800bc74:	bf00      	nop
			}
		}
	}

	return res;
 800bc76:	7dfb      	ldrb	r3, [r7, #23]
}
 800bc78:	4618      	mov	r0, r3
 800bc7a:	3718      	adds	r7, #24
 800bc7c:	46bd      	mov	sp, r7
 800bc7e:	bd80      	pop	{r7, pc}

0800bc80 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800bc80:	b480      	push	{r7}
 800bc82:	b087      	sub	sp, #28
 800bc84:	af00      	add	r7, sp, #0
 800bc86:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800bc88:	f04f 33ff 	mov.w	r3, #4294967295
 800bc8c:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	681b      	ldr	r3, [r3, #0]
 800bc92:	2b00      	cmp	r3, #0
 800bc94:	d031      	beq.n	800bcfa <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	681b      	ldr	r3, [r3, #0]
 800bc9a:	617b      	str	r3, [r7, #20]
 800bc9c:	e002      	b.n	800bca4 <get_ldnumber+0x24>
 800bc9e:	697b      	ldr	r3, [r7, #20]
 800bca0:	3301      	adds	r3, #1
 800bca2:	617b      	str	r3, [r7, #20]
 800bca4:	697b      	ldr	r3, [r7, #20]
 800bca6:	781b      	ldrb	r3, [r3, #0]
 800bca8:	2b1f      	cmp	r3, #31
 800bcaa:	d903      	bls.n	800bcb4 <get_ldnumber+0x34>
 800bcac:	697b      	ldr	r3, [r7, #20]
 800bcae:	781b      	ldrb	r3, [r3, #0]
 800bcb0:	2b3a      	cmp	r3, #58	; 0x3a
 800bcb2:	d1f4      	bne.n	800bc9e <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800bcb4:	697b      	ldr	r3, [r7, #20]
 800bcb6:	781b      	ldrb	r3, [r3, #0]
 800bcb8:	2b3a      	cmp	r3, #58	; 0x3a
 800bcba:	d11c      	bne.n	800bcf6 <get_ldnumber+0x76>
			tp = *path;
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	681b      	ldr	r3, [r3, #0]
 800bcc0:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800bcc2:	68fb      	ldr	r3, [r7, #12]
 800bcc4:	1c5a      	adds	r2, r3, #1
 800bcc6:	60fa      	str	r2, [r7, #12]
 800bcc8:	781b      	ldrb	r3, [r3, #0]
 800bcca:	3b30      	subs	r3, #48	; 0x30
 800bccc:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800bcce:	68bb      	ldr	r3, [r7, #8]
 800bcd0:	2b09      	cmp	r3, #9
 800bcd2:	d80e      	bhi.n	800bcf2 <get_ldnumber+0x72>
 800bcd4:	68fa      	ldr	r2, [r7, #12]
 800bcd6:	697b      	ldr	r3, [r7, #20]
 800bcd8:	429a      	cmp	r2, r3
 800bcda:	d10a      	bne.n	800bcf2 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800bcdc:	68bb      	ldr	r3, [r7, #8]
 800bcde:	2b00      	cmp	r3, #0
 800bce0:	d107      	bne.n	800bcf2 <get_ldnumber+0x72>
					vol = (int)i;
 800bce2:	68bb      	ldr	r3, [r7, #8]
 800bce4:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800bce6:	697b      	ldr	r3, [r7, #20]
 800bce8:	3301      	adds	r3, #1
 800bcea:	617b      	str	r3, [r7, #20]
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	697a      	ldr	r2, [r7, #20]
 800bcf0:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800bcf2:	693b      	ldr	r3, [r7, #16]
 800bcf4:	e002      	b.n	800bcfc <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800bcf6:	2300      	movs	r3, #0
 800bcf8:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800bcfa:	693b      	ldr	r3, [r7, #16]
}
 800bcfc:	4618      	mov	r0, r3
 800bcfe:	371c      	adds	r7, #28
 800bd00:	46bd      	mov	sp, r7
 800bd02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd06:	4770      	bx	lr

0800bd08 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800bd08:	b580      	push	{r7, lr}
 800bd0a:	b082      	sub	sp, #8
 800bd0c:	af00      	add	r7, sp, #0
 800bd0e:	6078      	str	r0, [r7, #4]
 800bd10:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	2200      	movs	r2, #0
 800bd16:	70da      	strb	r2, [r3, #3]
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	f04f 32ff 	mov.w	r2, #4294967295
 800bd1e:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800bd20:	6839      	ldr	r1, [r7, #0]
 800bd22:	6878      	ldr	r0, [r7, #4]
 800bd24:	f7fe fc76 	bl	800a614 <move_window>
 800bd28:	4603      	mov	r3, r0
 800bd2a:	2b00      	cmp	r3, #0
 800bd2c:	d001      	beq.n	800bd32 <check_fs+0x2a>
 800bd2e:	2304      	movs	r3, #4
 800bd30:	e038      	b.n	800bda4 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	3338      	adds	r3, #56	; 0x38
 800bd36:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800bd3a:	4618      	mov	r0, r3
 800bd3c:	f7fe f9f6 	bl	800a12c <ld_word>
 800bd40:	4603      	mov	r3, r0
 800bd42:	461a      	mov	r2, r3
 800bd44:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800bd48:	429a      	cmp	r2, r3
 800bd4a:	d001      	beq.n	800bd50 <check_fs+0x48>
 800bd4c:	2303      	movs	r3, #3
 800bd4e:	e029      	b.n	800bda4 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800bd56:	2be9      	cmp	r3, #233	; 0xe9
 800bd58:	d009      	beq.n	800bd6e <check_fs+0x66>
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800bd60:	2beb      	cmp	r3, #235	; 0xeb
 800bd62:	d11e      	bne.n	800bda2 <check_fs+0x9a>
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800bd6a:	2b90      	cmp	r3, #144	; 0x90
 800bd6c:	d119      	bne.n	800bda2 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	3338      	adds	r3, #56	; 0x38
 800bd72:	3336      	adds	r3, #54	; 0x36
 800bd74:	4618      	mov	r0, r3
 800bd76:	f7fe f9f1 	bl	800a15c <ld_dword>
 800bd7a:	4603      	mov	r3, r0
 800bd7c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800bd80:	4a0a      	ldr	r2, [pc, #40]	; (800bdac <check_fs+0xa4>)
 800bd82:	4293      	cmp	r3, r2
 800bd84:	d101      	bne.n	800bd8a <check_fs+0x82>
 800bd86:	2300      	movs	r3, #0
 800bd88:	e00c      	b.n	800bda4 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	3338      	adds	r3, #56	; 0x38
 800bd8e:	3352      	adds	r3, #82	; 0x52
 800bd90:	4618      	mov	r0, r3
 800bd92:	f7fe f9e3 	bl	800a15c <ld_dword>
 800bd96:	4603      	mov	r3, r0
 800bd98:	4a05      	ldr	r2, [pc, #20]	; (800bdb0 <check_fs+0xa8>)
 800bd9a:	4293      	cmp	r3, r2
 800bd9c:	d101      	bne.n	800bda2 <check_fs+0x9a>
 800bd9e:	2300      	movs	r3, #0
 800bda0:	e000      	b.n	800bda4 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800bda2:	2302      	movs	r3, #2
}
 800bda4:	4618      	mov	r0, r3
 800bda6:	3708      	adds	r7, #8
 800bda8:	46bd      	mov	sp, r7
 800bdaa:	bd80      	pop	{r7, pc}
 800bdac:	00544146 	.word	0x00544146
 800bdb0:	33544146 	.word	0x33544146

0800bdb4 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800bdb4:	b580      	push	{r7, lr}
 800bdb6:	b096      	sub	sp, #88	; 0x58
 800bdb8:	af00      	add	r7, sp, #0
 800bdba:	60f8      	str	r0, [r7, #12]
 800bdbc:	60b9      	str	r1, [r7, #8]
 800bdbe:	4613      	mov	r3, r2
 800bdc0:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800bdc2:	68bb      	ldr	r3, [r7, #8]
 800bdc4:	2200      	movs	r2, #0
 800bdc6:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800bdc8:	68f8      	ldr	r0, [r7, #12]
 800bdca:	f7ff ff59 	bl	800bc80 <get_ldnumber>
 800bdce:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800bdd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bdd2:	2b00      	cmp	r3, #0
 800bdd4:	da01      	bge.n	800bdda <find_volume+0x26>
 800bdd6:	230b      	movs	r3, #11
 800bdd8:	e265      	b.n	800c2a6 <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800bdda:	4a9f      	ldr	r2, [pc, #636]	; (800c058 <find_volume+0x2a4>)
 800bddc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bdde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bde2:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800bde4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bde6:	2b00      	cmp	r3, #0
 800bde8:	d101      	bne.n	800bdee <find_volume+0x3a>
 800bdea:	230c      	movs	r3, #12
 800bdec:	e25b      	b.n	800c2a6 <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800bdee:	68bb      	ldr	r3, [r7, #8]
 800bdf0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bdf2:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800bdf4:	79fb      	ldrb	r3, [r7, #7]
 800bdf6:	f023 0301 	bic.w	r3, r3, #1
 800bdfa:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800bdfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdfe:	781b      	ldrb	r3, [r3, #0]
 800be00:	2b00      	cmp	r3, #0
 800be02:	d01a      	beq.n	800be3a <find_volume+0x86>
		stat = disk_status(fs->drv);
 800be04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be06:	785b      	ldrb	r3, [r3, #1]
 800be08:	4618      	mov	r0, r3
 800be0a:	f7fe f8f1 	bl	8009ff0 <disk_status>
 800be0e:	4603      	mov	r3, r0
 800be10:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800be14:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800be18:	f003 0301 	and.w	r3, r3, #1
 800be1c:	2b00      	cmp	r3, #0
 800be1e:	d10c      	bne.n	800be3a <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800be20:	79fb      	ldrb	r3, [r7, #7]
 800be22:	2b00      	cmp	r3, #0
 800be24:	d007      	beq.n	800be36 <find_volume+0x82>
 800be26:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800be2a:	f003 0304 	and.w	r3, r3, #4
 800be2e:	2b00      	cmp	r3, #0
 800be30:	d001      	beq.n	800be36 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800be32:	230a      	movs	r3, #10
 800be34:	e237      	b.n	800c2a6 <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 800be36:	2300      	movs	r3, #0
 800be38:	e235      	b.n	800c2a6 <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800be3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be3c:	2200      	movs	r2, #0
 800be3e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800be40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800be42:	b2da      	uxtb	r2, r3
 800be44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be46:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800be48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be4a:	785b      	ldrb	r3, [r3, #1]
 800be4c:	4618      	mov	r0, r3
 800be4e:	f7fe f8e9 	bl	800a024 <disk_initialize>
 800be52:	4603      	mov	r3, r0
 800be54:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800be58:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800be5c:	f003 0301 	and.w	r3, r3, #1
 800be60:	2b00      	cmp	r3, #0
 800be62:	d001      	beq.n	800be68 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800be64:	2303      	movs	r3, #3
 800be66:	e21e      	b.n	800c2a6 <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800be68:	79fb      	ldrb	r3, [r7, #7]
 800be6a:	2b00      	cmp	r3, #0
 800be6c:	d007      	beq.n	800be7e <find_volume+0xca>
 800be6e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800be72:	f003 0304 	and.w	r3, r3, #4
 800be76:	2b00      	cmp	r3, #0
 800be78:	d001      	beq.n	800be7e <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800be7a:	230a      	movs	r3, #10
 800be7c:	e213      	b.n	800c2a6 <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800be7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be80:	7858      	ldrb	r0, [r3, #1]
 800be82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be84:	330c      	adds	r3, #12
 800be86:	461a      	mov	r2, r3
 800be88:	2102      	movs	r1, #2
 800be8a:	f7fe f931 	bl	800a0f0 <disk_ioctl>
 800be8e:	4603      	mov	r3, r0
 800be90:	2b00      	cmp	r3, #0
 800be92:	d001      	beq.n	800be98 <find_volume+0xe4>
 800be94:	2301      	movs	r3, #1
 800be96:	e206      	b.n	800c2a6 <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800be98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be9a:	899b      	ldrh	r3, [r3, #12]
 800be9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bea0:	d80d      	bhi.n	800bebe <find_volume+0x10a>
 800bea2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bea4:	899b      	ldrh	r3, [r3, #12]
 800bea6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800beaa:	d308      	bcc.n	800bebe <find_volume+0x10a>
 800beac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800beae:	899b      	ldrh	r3, [r3, #12]
 800beb0:	461a      	mov	r2, r3
 800beb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800beb4:	899b      	ldrh	r3, [r3, #12]
 800beb6:	3b01      	subs	r3, #1
 800beb8:	4013      	ands	r3, r2
 800beba:	2b00      	cmp	r3, #0
 800bebc:	d001      	beq.n	800bec2 <find_volume+0x10e>
 800bebe:	2301      	movs	r3, #1
 800bec0:	e1f1      	b.n	800c2a6 <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800bec2:	2300      	movs	r3, #0
 800bec4:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800bec6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800bec8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800beca:	f7ff ff1d 	bl	800bd08 <check_fs>
 800bece:	4603      	mov	r3, r0
 800bed0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800bed4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800bed8:	2b02      	cmp	r3, #2
 800beda:	d149      	bne.n	800bf70 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800bedc:	2300      	movs	r3, #0
 800bede:	643b      	str	r3, [r7, #64]	; 0x40
 800bee0:	e01e      	b.n	800bf20 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800bee2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bee4:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800bee8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800beea:	011b      	lsls	r3, r3, #4
 800beec:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800bef0:	4413      	add	r3, r2
 800bef2:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800bef4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bef6:	3304      	adds	r3, #4
 800bef8:	781b      	ldrb	r3, [r3, #0]
 800befa:	2b00      	cmp	r3, #0
 800befc:	d006      	beq.n	800bf0c <find_volume+0x158>
 800befe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf00:	3308      	adds	r3, #8
 800bf02:	4618      	mov	r0, r3
 800bf04:	f7fe f92a 	bl	800a15c <ld_dword>
 800bf08:	4602      	mov	r2, r0
 800bf0a:	e000      	b.n	800bf0e <find_volume+0x15a>
 800bf0c:	2200      	movs	r2, #0
 800bf0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bf10:	009b      	lsls	r3, r3, #2
 800bf12:	3358      	adds	r3, #88	; 0x58
 800bf14:	443b      	add	r3, r7
 800bf16:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800bf1a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bf1c:	3301      	adds	r3, #1
 800bf1e:	643b      	str	r3, [r7, #64]	; 0x40
 800bf20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bf22:	2b03      	cmp	r3, #3
 800bf24:	d9dd      	bls.n	800bee2 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800bf26:	2300      	movs	r3, #0
 800bf28:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800bf2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bf2c:	2b00      	cmp	r3, #0
 800bf2e:	d002      	beq.n	800bf36 <find_volume+0x182>
 800bf30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bf32:	3b01      	subs	r3, #1
 800bf34:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800bf36:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bf38:	009b      	lsls	r3, r3, #2
 800bf3a:	3358      	adds	r3, #88	; 0x58
 800bf3c:	443b      	add	r3, r7
 800bf3e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800bf42:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800bf44:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bf46:	2b00      	cmp	r3, #0
 800bf48:	d005      	beq.n	800bf56 <find_volume+0x1a2>
 800bf4a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800bf4c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800bf4e:	f7ff fedb 	bl	800bd08 <check_fs>
 800bf52:	4603      	mov	r3, r0
 800bf54:	e000      	b.n	800bf58 <find_volume+0x1a4>
 800bf56:	2303      	movs	r3, #3
 800bf58:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800bf5c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800bf60:	2b01      	cmp	r3, #1
 800bf62:	d905      	bls.n	800bf70 <find_volume+0x1bc>
 800bf64:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bf66:	3301      	adds	r3, #1
 800bf68:	643b      	str	r3, [r7, #64]	; 0x40
 800bf6a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bf6c:	2b03      	cmp	r3, #3
 800bf6e:	d9e2      	bls.n	800bf36 <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800bf70:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800bf74:	2b04      	cmp	r3, #4
 800bf76:	d101      	bne.n	800bf7c <find_volume+0x1c8>
 800bf78:	2301      	movs	r3, #1
 800bf7a:	e194      	b.n	800c2a6 <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800bf7c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800bf80:	2b01      	cmp	r3, #1
 800bf82:	d901      	bls.n	800bf88 <find_volume+0x1d4>
 800bf84:	230d      	movs	r3, #13
 800bf86:	e18e      	b.n	800c2a6 <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800bf88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf8a:	3338      	adds	r3, #56	; 0x38
 800bf8c:	330b      	adds	r3, #11
 800bf8e:	4618      	mov	r0, r3
 800bf90:	f7fe f8cc 	bl	800a12c <ld_word>
 800bf94:	4603      	mov	r3, r0
 800bf96:	461a      	mov	r2, r3
 800bf98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf9a:	899b      	ldrh	r3, [r3, #12]
 800bf9c:	429a      	cmp	r2, r3
 800bf9e:	d001      	beq.n	800bfa4 <find_volume+0x1f0>
 800bfa0:	230d      	movs	r3, #13
 800bfa2:	e180      	b.n	800c2a6 <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800bfa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfa6:	3338      	adds	r3, #56	; 0x38
 800bfa8:	3316      	adds	r3, #22
 800bfaa:	4618      	mov	r0, r3
 800bfac:	f7fe f8be 	bl	800a12c <ld_word>
 800bfb0:	4603      	mov	r3, r0
 800bfb2:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800bfb4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bfb6:	2b00      	cmp	r3, #0
 800bfb8:	d106      	bne.n	800bfc8 <find_volume+0x214>
 800bfba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfbc:	3338      	adds	r3, #56	; 0x38
 800bfbe:	3324      	adds	r3, #36	; 0x24
 800bfc0:	4618      	mov	r0, r3
 800bfc2:	f7fe f8cb 	bl	800a15c <ld_dword>
 800bfc6:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800bfc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfca:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800bfcc:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800bfce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfd0:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800bfd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfd6:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800bfd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfda:	789b      	ldrb	r3, [r3, #2]
 800bfdc:	2b01      	cmp	r3, #1
 800bfde:	d005      	beq.n	800bfec <find_volume+0x238>
 800bfe0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfe2:	789b      	ldrb	r3, [r3, #2]
 800bfe4:	2b02      	cmp	r3, #2
 800bfe6:	d001      	beq.n	800bfec <find_volume+0x238>
 800bfe8:	230d      	movs	r3, #13
 800bfea:	e15c      	b.n	800c2a6 <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800bfec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfee:	789b      	ldrb	r3, [r3, #2]
 800bff0:	461a      	mov	r2, r3
 800bff2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bff4:	fb02 f303 	mul.w	r3, r2, r3
 800bff8:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800bffa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bffc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c000:	b29a      	uxth	r2, r3
 800c002:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c004:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800c006:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c008:	895b      	ldrh	r3, [r3, #10]
 800c00a:	2b00      	cmp	r3, #0
 800c00c:	d008      	beq.n	800c020 <find_volume+0x26c>
 800c00e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c010:	895b      	ldrh	r3, [r3, #10]
 800c012:	461a      	mov	r2, r3
 800c014:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c016:	895b      	ldrh	r3, [r3, #10]
 800c018:	3b01      	subs	r3, #1
 800c01a:	4013      	ands	r3, r2
 800c01c:	2b00      	cmp	r3, #0
 800c01e:	d001      	beq.n	800c024 <find_volume+0x270>
 800c020:	230d      	movs	r3, #13
 800c022:	e140      	b.n	800c2a6 <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800c024:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c026:	3338      	adds	r3, #56	; 0x38
 800c028:	3311      	adds	r3, #17
 800c02a:	4618      	mov	r0, r3
 800c02c:	f7fe f87e 	bl	800a12c <ld_word>
 800c030:	4603      	mov	r3, r0
 800c032:	461a      	mov	r2, r3
 800c034:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c036:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800c038:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c03a:	891b      	ldrh	r3, [r3, #8]
 800c03c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c03e:	8992      	ldrh	r2, [r2, #12]
 800c040:	0952      	lsrs	r2, r2, #5
 800c042:	b292      	uxth	r2, r2
 800c044:	fbb3 f1f2 	udiv	r1, r3, r2
 800c048:	fb01 f202 	mul.w	r2, r1, r2
 800c04c:	1a9b      	subs	r3, r3, r2
 800c04e:	b29b      	uxth	r3, r3
 800c050:	2b00      	cmp	r3, #0
 800c052:	d003      	beq.n	800c05c <find_volume+0x2a8>
 800c054:	230d      	movs	r3, #13
 800c056:	e126      	b.n	800c2a6 <find_volume+0x4f2>
 800c058:	20001504 	.word	0x20001504

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800c05c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c05e:	3338      	adds	r3, #56	; 0x38
 800c060:	3313      	adds	r3, #19
 800c062:	4618      	mov	r0, r3
 800c064:	f7fe f862 	bl	800a12c <ld_word>
 800c068:	4603      	mov	r3, r0
 800c06a:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800c06c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c06e:	2b00      	cmp	r3, #0
 800c070:	d106      	bne.n	800c080 <find_volume+0x2cc>
 800c072:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c074:	3338      	adds	r3, #56	; 0x38
 800c076:	3320      	adds	r3, #32
 800c078:	4618      	mov	r0, r3
 800c07a:	f7fe f86f 	bl	800a15c <ld_dword>
 800c07e:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800c080:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c082:	3338      	adds	r3, #56	; 0x38
 800c084:	330e      	adds	r3, #14
 800c086:	4618      	mov	r0, r3
 800c088:	f7fe f850 	bl	800a12c <ld_word>
 800c08c:	4603      	mov	r3, r0
 800c08e:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800c090:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c092:	2b00      	cmp	r3, #0
 800c094:	d101      	bne.n	800c09a <find_volume+0x2e6>
 800c096:	230d      	movs	r3, #13
 800c098:	e105      	b.n	800c2a6 <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800c09a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800c09c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c09e:	4413      	add	r3, r2
 800c0a0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c0a2:	8911      	ldrh	r1, [r2, #8]
 800c0a4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c0a6:	8992      	ldrh	r2, [r2, #12]
 800c0a8:	0952      	lsrs	r2, r2, #5
 800c0aa:	b292      	uxth	r2, r2
 800c0ac:	fbb1 f2f2 	udiv	r2, r1, r2
 800c0b0:	b292      	uxth	r2, r2
 800c0b2:	4413      	add	r3, r2
 800c0b4:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800c0b6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c0b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0ba:	429a      	cmp	r2, r3
 800c0bc:	d201      	bcs.n	800c0c2 <find_volume+0x30e>
 800c0be:	230d      	movs	r3, #13
 800c0c0:	e0f1      	b.n	800c2a6 <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800c0c2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c0c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0c6:	1ad3      	subs	r3, r2, r3
 800c0c8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c0ca:	8952      	ldrh	r2, [r2, #10]
 800c0cc:	fbb3 f3f2 	udiv	r3, r3, r2
 800c0d0:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800c0d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0d4:	2b00      	cmp	r3, #0
 800c0d6:	d101      	bne.n	800c0dc <find_volume+0x328>
 800c0d8:	230d      	movs	r3, #13
 800c0da:	e0e4      	b.n	800c2a6 <find_volume+0x4f2>
		fmt = FS_FAT32;
 800c0dc:	2303      	movs	r3, #3
 800c0de:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800c0e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0e4:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800c0e8:	4293      	cmp	r3, r2
 800c0ea:	d802      	bhi.n	800c0f2 <find_volume+0x33e>
 800c0ec:	2302      	movs	r3, #2
 800c0ee:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800c0f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0f4:	f640 72f5 	movw	r2, #4085	; 0xff5
 800c0f8:	4293      	cmp	r3, r2
 800c0fa:	d802      	bhi.n	800c102 <find_volume+0x34e>
 800c0fc:	2301      	movs	r3, #1
 800c0fe:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800c102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c104:	1c9a      	adds	r2, r3, #2
 800c106:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c108:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 800c10a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c10c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c10e:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800c110:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800c112:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c114:	441a      	add	r2, r3
 800c116:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c118:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 800c11a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c11c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c11e:	441a      	add	r2, r3
 800c120:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c122:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 800c124:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c128:	2b03      	cmp	r3, #3
 800c12a:	d11e      	bne.n	800c16a <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800c12c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c12e:	3338      	adds	r3, #56	; 0x38
 800c130:	332a      	adds	r3, #42	; 0x2a
 800c132:	4618      	mov	r0, r3
 800c134:	f7fd fffa 	bl	800a12c <ld_word>
 800c138:	4603      	mov	r3, r0
 800c13a:	2b00      	cmp	r3, #0
 800c13c:	d001      	beq.n	800c142 <find_volume+0x38e>
 800c13e:	230d      	movs	r3, #13
 800c140:	e0b1      	b.n	800c2a6 <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800c142:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c144:	891b      	ldrh	r3, [r3, #8]
 800c146:	2b00      	cmp	r3, #0
 800c148:	d001      	beq.n	800c14e <find_volume+0x39a>
 800c14a:	230d      	movs	r3, #13
 800c14c:	e0ab      	b.n	800c2a6 <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800c14e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c150:	3338      	adds	r3, #56	; 0x38
 800c152:	332c      	adds	r3, #44	; 0x2c
 800c154:	4618      	mov	r0, r3
 800c156:	f7fe f801 	bl	800a15c <ld_dword>
 800c15a:	4602      	mov	r2, r0
 800c15c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c15e:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800c160:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c162:	69db      	ldr	r3, [r3, #28]
 800c164:	009b      	lsls	r3, r3, #2
 800c166:	647b      	str	r3, [r7, #68]	; 0x44
 800c168:	e01f      	b.n	800c1aa <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800c16a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c16c:	891b      	ldrh	r3, [r3, #8]
 800c16e:	2b00      	cmp	r3, #0
 800c170:	d101      	bne.n	800c176 <find_volume+0x3c2>
 800c172:	230d      	movs	r3, #13
 800c174:	e097      	b.n	800c2a6 <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800c176:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c178:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c17a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c17c:	441a      	add	r2, r3
 800c17e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c180:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800c182:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c186:	2b02      	cmp	r3, #2
 800c188:	d103      	bne.n	800c192 <find_volume+0x3de>
 800c18a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c18c:	69db      	ldr	r3, [r3, #28]
 800c18e:	005b      	lsls	r3, r3, #1
 800c190:	e00a      	b.n	800c1a8 <find_volume+0x3f4>
 800c192:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c194:	69da      	ldr	r2, [r3, #28]
 800c196:	4613      	mov	r3, r2
 800c198:	005b      	lsls	r3, r3, #1
 800c19a:	4413      	add	r3, r2
 800c19c:	085a      	lsrs	r2, r3, #1
 800c19e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1a0:	69db      	ldr	r3, [r3, #28]
 800c1a2:	f003 0301 	and.w	r3, r3, #1
 800c1a6:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800c1a8:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800c1aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1ac:	6a1a      	ldr	r2, [r3, #32]
 800c1ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1b0:	899b      	ldrh	r3, [r3, #12]
 800c1b2:	4619      	mov	r1, r3
 800c1b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c1b6:	440b      	add	r3, r1
 800c1b8:	3b01      	subs	r3, #1
 800c1ba:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c1bc:	8989      	ldrh	r1, [r1, #12]
 800c1be:	fbb3 f3f1 	udiv	r3, r3, r1
 800c1c2:	429a      	cmp	r2, r3
 800c1c4:	d201      	bcs.n	800c1ca <find_volume+0x416>
 800c1c6:	230d      	movs	r3, #13
 800c1c8:	e06d      	b.n	800c2a6 <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800c1ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1cc:	f04f 32ff 	mov.w	r2, #4294967295
 800c1d0:	619a      	str	r2, [r3, #24]
 800c1d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1d4:	699a      	ldr	r2, [r3, #24]
 800c1d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1d8:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 800c1da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1dc:	2280      	movs	r2, #128	; 0x80
 800c1de:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800c1e0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c1e4:	2b03      	cmp	r3, #3
 800c1e6:	d149      	bne.n	800c27c <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800c1e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1ea:	3338      	adds	r3, #56	; 0x38
 800c1ec:	3330      	adds	r3, #48	; 0x30
 800c1ee:	4618      	mov	r0, r3
 800c1f0:	f7fd ff9c 	bl	800a12c <ld_word>
 800c1f4:	4603      	mov	r3, r0
 800c1f6:	2b01      	cmp	r3, #1
 800c1f8:	d140      	bne.n	800c27c <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 800c1fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c1fc:	3301      	adds	r3, #1
 800c1fe:	4619      	mov	r1, r3
 800c200:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c202:	f7fe fa07 	bl	800a614 <move_window>
 800c206:	4603      	mov	r3, r0
 800c208:	2b00      	cmp	r3, #0
 800c20a:	d137      	bne.n	800c27c <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 800c20c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c20e:	2200      	movs	r2, #0
 800c210:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800c212:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c214:	3338      	adds	r3, #56	; 0x38
 800c216:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800c21a:	4618      	mov	r0, r3
 800c21c:	f7fd ff86 	bl	800a12c <ld_word>
 800c220:	4603      	mov	r3, r0
 800c222:	461a      	mov	r2, r3
 800c224:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800c228:	429a      	cmp	r2, r3
 800c22a:	d127      	bne.n	800c27c <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800c22c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c22e:	3338      	adds	r3, #56	; 0x38
 800c230:	4618      	mov	r0, r3
 800c232:	f7fd ff93 	bl	800a15c <ld_dword>
 800c236:	4603      	mov	r3, r0
 800c238:	4a1d      	ldr	r2, [pc, #116]	; (800c2b0 <find_volume+0x4fc>)
 800c23a:	4293      	cmp	r3, r2
 800c23c:	d11e      	bne.n	800c27c <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800c23e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c240:	3338      	adds	r3, #56	; 0x38
 800c242:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800c246:	4618      	mov	r0, r3
 800c248:	f7fd ff88 	bl	800a15c <ld_dword>
 800c24c:	4603      	mov	r3, r0
 800c24e:	4a19      	ldr	r2, [pc, #100]	; (800c2b4 <find_volume+0x500>)
 800c250:	4293      	cmp	r3, r2
 800c252:	d113      	bne.n	800c27c <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800c254:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c256:	3338      	adds	r3, #56	; 0x38
 800c258:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800c25c:	4618      	mov	r0, r3
 800c25e:	f7fd ff7d 	bl	800a15c <ld_dword>
 800c262:	4602      	mov	r2, r0
 800c264:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c266:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800c268:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c26a:	3338      	adds	r3, #56	; 0x38
 800c26c:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800c270:	4618      	mov	r0, r3
 800c272:	f7fd ff73 	bl	800a15c <ld_dword>
 800c276:	4602      	mov	r2, r0
 800c278:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c27a:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800c27c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c27e:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800c282:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800c284:	4b0c      	ldr	r3, [pc, #48]	; (800c2b8 <find_volume+0x504>)
 800c286:	881b      	ldrh	r3, [r3, #0]
 800c288:	3301      	adds	r3, #1
 800c28a:	b29a      	uxth	r2, r3
 800c28c:	4b0a      	ldr	r3, [pc, #40]	; (800c2b8 <find_volume+0x504>)
 800c28e:	801a      	strh	r2, [r3, #0]
 800c290:	4b09      	ldr	r3, [pc, #36]	; (800c2b8 <find_volume+0x504>)
 800c292:	881a      	ldrh	r2, [r3, #0]
 800c294:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c296:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800c298:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c29a:	4a08      	ldr	r2, [pc, #32]	; (800c2bc <find_volume+0x508>)
 800c29c:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800c29e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c2a0:	f7fe f950 	bl	800a544 <clear_lock>
#endif
	return FR_OK;
 800c2a4:	2300      	movs	r3, #0
}
 800c2a6:	4618      	mov	r0, r3
 800c2a8:	3758      	adds	r7, #88	; 0x58
 800c2aa:	46bd      	mov	sp, r7
 800c2ac:	bd80      	pop	{r7, pc}
 800c2ae:	bf00      	nop
 800c2b0:	41615252 	.word	0x41615252
 800c2b4:	61417272 	.word	0x61417272
 800c2b8:	20001508 	.word	0x20001508
 800c2bc:	2000152c 	.word	0x2000152c

0800c2c0 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800c2c0:	b580      	push	{r7, lr}
 800c2c2:	b084      	sub	sp, #16
 800c2c4:	af00      	add	r7, sp, #0
 800c2c6:	6078      	str	r0, [r7, #4]
 800c2c8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800c2ca:	2309      	movs	r3, #9
 800c2cc:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	2b00      	cmp	r3, #0
 800c2d2:	d01c      	beq.n	800c30e <validate+0x4e>
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	681b      	ldr	r3, [r3, #0]
 800c2d8:	2b00      	cmp	r3, #0
 800c2da:	d018      	beq.n	800c30e <validate+0x4e>
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	681b      	ldr	r3, [r3, #0]
 800c2e0:	781b      	ldrb	r3, [r3, #0]
 800c2e2:	2b00      	cmp	r3, #0
 800c2e4:	d013      	beq.n	800c30e <validate+0x4e>
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	889a      	ldrh	r2, [r3, #4]
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	681b      	ldr	r3, [r3, #0]
 800c2ee:	88db      	ldrh	r3, [r3, #6]
 800c2f0:	429a      	cmp	r2, r3
 800c2f2:	d10c      	bne.n	800c30e <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	681b      	ldr	r3, [r3, #0]
 800c2f8:	785b      	ldrb	r3, [r3, #1]
 800c2fa:	4618      	mov	r0, r3
 800c2fc:	f7fd fe78 	bl	8009ff0 <disk_status>
 800c300:	4603      	mov	r3, r0
 800c302:	f003 0301 	and.w	r3, r3, #1
 800c306:	2b00      	cmp	r3, #0
 800c308:	d101      	bne.n	800c30e <validate+0x4e>
			res = FR_OK;
 800c30a:	2300      	movs	r3, #0
 800c30c:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800c30e:	7bfb      	ldrb	r3, [r7, #15]
 800c310:	2b00      	cmp	r3, #0
 800c312:	d102      	bne.n	800c31a <validate+0x5a>
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	681b      	ldr	r3, [r3, #0]
 800c318:	e000      	b.n	800c31c <validate+0x5c>
 800c31a:	2300      	movs	r3, #0
 800c31c:	683a      	ldr	r2, [r7, #0]
 800c31e:	6013      	str	r3, [r2, #0]
	return res;
 800c320:	7bfb      	ldrb	r3, [r7, #15]
}
 800c322:	4618      	mov	r0, r3
 800c324:	3710      	adds	r7, #16
 800c326:	46bd      	mov	sp, r7
 800c328:	bd80      	pop	{r7, pc}
	...

0800c32c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800c32c:	b580      	push	{r7, lr}
 800c32e:	b088      	sub	sp, #32
 800c330:	af00      	add	r7, sp, #0
 800c332:	60f8      	str	r0, [r7, #12]
 800c334:	60b9      	str	r1, [r7, #8]
 800c336:	4613      	mov	r3, r2
 800c338:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800c33a:	68bb      	ldr	r3, [r7, #8]
 800c33c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800c33e:	f107 0310 	add.w	r3, r7, #16
 800c342:	4618      	mov	r0, r3
 800c344:	f7ff fc9c 	bl	800bc80 <get_ldnumber>
 800c348:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800c34a:	69fb      	ldr	r3, [r7, #28]
 800c34c:	2b00      	cmp	r3, #0
 800c34e:	da01      	bge.n	800c354 <f_mount+0x28>
 800c350:	230b      	movs	r3, #11
 800c352:	e02b      	b.n	800c3ac <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800c354:	4a17      	ldr	r2, [pc, #92]	; (800c3b4 <f_mount+0x88>)
 800c356:	69fb      	ldr	r3, [r7, #28]
 800c358:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c35c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800c35e:	69bb      	ldr	r3, [r7, #24]
 800c360:	2b00      	cmp	r3, #0
 800c362:	d005      	beq.n	800c370 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800c364:	69b8      	ldr	r0, [r7, #24]
 800c366:	f7fe f8ed 	bl	800a544 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800c36a:	69bb      	ldr	r3, [r7, #24]
 800c36c:	2200      	movs	r2, #0
 800c36e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800c370:	68fb      	ldr	r3, [r7, #12]
 800c372:	2b00      	cmp	r3, #0
 800c374:	d002      	beq.n	800c37c <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800c376:	68fb      	ldr	r3, [r7, #12]
 800c378:	2200      	movs	r2, #0
 800c37a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800c37c:	68fa      	ldr	r2, [r7, #12]
 800c37e:	490d      	ldr	r1, [pc, #52]	; (800c3b4 <f_mount+0x88>)
 800c380:	69fb      	ldr	r3, [r7, #28]
 800c382:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800c386:	68fb      	ldr	r3, [r7, #12]
 800c388:	2b00      	cmp	r3, #0
 800c38a:	d002      	beq.n	800c392 <f_mount+0x66>
 800c38c:	79fb      	ldrb	r3, [r7, #7]
 800c38e:	2b01      	cmp	r3, #1
 800c390:	d001      	beq.n	800c396 <f_mount+0x6a>
 800c392:	2300      	movs	r3, #0
 800c394:	e00a      	b.n	800c3ac <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800c396:	f107 010c 	add.w	r1, r7, #12
 800c39a:	f107 0308 	add.w	r3, r7, #8
 800c39e:	2200      	movs	r2, #0
 800c3a0:	4618      	mov	r0, r3
 800c3a2:	f7ff fd07 	bl	800bdb4 <find_volume>
 800c3a6:	4603      	mov	r3, r0
 800c3a8:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800c3aa:	7dfb      	ldrb	r3, [r7, #23]
}
 800c3ac:	4618      	mov	r0, r3
 800c3ae:	3720      	adds	r7, #32
 800c3b0:	46bd      	mov	sp, r7
 800c3b2:	bd80      	pop	{r7, pc}
 800c3b4:	20001504 	.word	0x20001504

0800c3b8 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800c3b8:	b580      	push	{r7, lr}
 800c3ba:	b09a      	sub	sp, #104	; 0x68
 800c3bc:	af00      	add	r7, sp, #0
 800c3be:	60f8      	str	r0, [r7, #12]
 800c3c0:	60b9      	str	r1, [r7, #8]
 800c3c2:	4613      	mov	r3, r2
 800c3c4:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800c3c6:	68fb      	ldr	r3, [r7, #12]
 800c3c8:	2b00      	cmp	r3, #0
 800c3ca:	d101      	bne.n	800c3d0 <f_open+0x18>
 800c3cc:	2309      	movs	r3, #9
 800c3ce:	e1bb      	b.n	800c748 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800c3d0:	79fb      	ldrb	r3, [r7, #7]
 800c3d2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c3d6:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800c3d8:	79fa      	ldrb	r2, [r7, #7]
 800c3da:	f107 0114 	add.w	r1, r7, #20
 800c3de:	f107 0308 	add.w	r3, r7, #8
 800c3e2:	4618      	mov	r0, r3
 800c3e4:	f7ff fce6 	bl	800bdb4 <find_volume>
 800c3e8:	4603      	mov	r3, r0
 800c3ea:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 800c3ee:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800c3f2:	2b00      	cmp	r3, #0
 800c3f4:	f040 819f 	bne.w	800c736 <f_open+0x37e>
		dj.obj.fs = fs;
 800c3f8:	697b      	ldr	r3, [r7, #20]
 800c3fa:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800c3fc:	68ba      	ldr	r2, [r7, #8]
 800c3fe:	f107 0318 	add.w	r3, r7, #24
 800c402:	4611      	mov	r1, r2
 800c404:	4618      	mov	r0, r3
 800c406:	f7ff fbc5 	bl	800bb94 <follow_path>
 800c40a:	4603      	mov	r3, r0
 800c40c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800c410:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800c414:	2b00      	cmp	r3, #0
 800c416:	d11a      	bne.n	800c44e <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800c418:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800c41c:	b25b      	sxtb	r3, r3
 800c41e:	2b00      	cmp	r3, #0
 800c420:	da03      	bge.n	800c42a <f_open+0x72>
				res = FR_INVALID_NAME;
 800c422:	2306      	movs	r3, #6
 800c424:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800c428:	e011      	b.n	800c44e <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800c42a:	79fb      	ldrb	r3, [r7, #7]
 800c42c:	f023 0301 	bic.w	r3, r3, #1
 800c430:	2b00      	cmp	r3, #0
 800c432:	bf14      	ite	ne
 800c434:	2301      	movne	r3, #1
 800c436:	2300      	moveq	r3, #0
 800c438:	b2db      	uxtb	r3, r3
 800c43a:	461a      	mov	r2, r3
 800c43c:	f107 0318 	add.w	r3, r7, #24
 800c440:	4611      	mov	r1, r2
 800c442:	4618      	mov	r0, r3
 800c444:	f7fd ff72 	bl	800a32c <chk_lock>
 800c448:	4603      	mov	r3, r0
 800c44a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800c44e:	79fb      	ldrb	r3, [r7, #7]
 800c450:	f003 031c 	and.w	r3, r3, #28
 800c454:	2b00      	cmp	r3, #0
 800c456:	d07f      	beq.n	800c558 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800c458:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800c45c:	2b00      	cmp	r3, #0
 800c45e:	d017      	beq.n	800c490 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800c460:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800c464:	2b04      	cmp	r3, #4
 800c466:	d10e      	bne.n	800c486 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800c468:	f7fd ffbc 	bl	800a3e4 <enq_lock>
 800c46c:	4603      	mov	r3, r0
 800c46e:	2b00      	cmp	r3, #0
 800c470:	d006      	beq.n	800c480 <f_open+0xc8>
 800c472:	f107 0318 	add.w	r3, r7, #24
 800c476:	4618      	mov	r0, r3
 800c478:	f7ff f8dc 	bl	800b634 <dir_register>
 800c47c:	4603      	mov	r3, r0
 800c47e:	e000      	b.n	800c482 <f_open+0xca>
 800c480:	2312      	movs	r3, #18
 800c482:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800c486:	79fb      	ldrb	r3, [r7, #7]
 800c488:	f043 0308 	orr.w	r3, r3, #8
 800c48c:	71fb      	strb	r3, [r7, #7]
 800c48e:	e010      	b.n	800c4b2 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800c490:	7fbb      	ldrb	r3, [r7, #30]
 800c492:	f003 0311 	and.w	r3, r3, #17
 800c496:	2b00      	cmp	r3, #0
 800c498:	d003      	beq.n	800c4a2 <f_open+0xea>
					res = FR_DENIED;
 800c49a:	2307      	movs	r3, #7
 800c49c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800c4a0:	e007      	b.n	800c4b2 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800c4a2:	79fb      	ldrb	r3, [r7, #7]
 800c4a4:	f003 0304 	and.w	r3, r3, #4
 800c4a8:	2b00      	cmp	r3, #0
 800c4aa:	d002      	beq.n	800c4b2 <f_open+0xfa>
 800c4ac:	2308      	movs	r3, #8
 800c4ae:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800c4b2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800c4b6:	2b00      	cmp	r3, #0
 800c4b8:	d168      	bne.n	800c58c <f_open+0x1d4>
 800c4ba:	79fb      	ldrb	r3, [r7, #7]
 800c4bc:	f003 0308 	and.w	r3, r3, #8
 800c4c0:	2b00      	cmp	r3, #0
 800c4c2:	d063      	beq.n	800c58c <f_open+0x1d4>
				dw = GET_FATTIME();
 800c4c4:	f7fd fb52 	bl	8009b6c <get_fattime>
 800c4c8:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800c4ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4cc:	330e      	adds	r3, #14
 800c4ce:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800c4d0:	4618      	mov	r0, r3
 800c4d2:	f7fd fe81 	bl	800a1d8 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800c4d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4d8:	3316      	adds	r3, #22
 800c4da:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800c4dc:	4618      	mov	r0, r3
 800c4de:	f7fd fe7b 	bl	800a1d8 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800c4e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4e4:	330b      	adds	r3, #11
 800c4e6:	2220      	movs	r2, #32
 800c4e8:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800c4ea:	697b      	ldr	r3, [r7, #20]
 800c4ec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c4ee:	4611      	mov	r1, r2
 800c4f0:	4618      	mov	r0, r3
 800c4f2:	f7fe fe17 	bl	800b124 <ld_clust>
 800c4f6:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800c4f8:	697b      	ldr	r3, [r7, #20]
 800c4fa:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c4fc:	2200      	movs	r2, #0
 800c4fe:	4618      	mov	r0, r3
 800c500:	f7fe fe2f 	bl	800b162 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800c504:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c506:	331c      	adds	r3, #28
 800c508:	2100      	movs	r1, #0
 800c50a:	4618      	mov	r0, r3
 800c50c:	f7fd fe64 	bl	800a1d8 <st_dword>
					fs->wflag = 1;
 800c510:	697b      	ldr	r3, [r7, #20]
 800c512:	2201      	movs	r2, #1
 800c514:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800c516:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c518:	2b00      	cmp	r3, #0
 800c51a:	d037      	beq.n	800c58c <f_open+0x1d4>
						dw = fs->winsect;
 800c51c:	697b      	ldr	r3, [r7, #20]
 800c51e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c520:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 800c522:	f107 0318 	add.w	r3, r7, #24
 800c526:	2200      	movs	r2, #0
 800c528:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c52a:	4618      	mov	r0, r3
 800c52c:	f7fe fb1f 	bl	800ab6e <remove_chain>
 800c530:	4603      	mov	r3, r0
 800c532:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 800c536:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800c53a:	2b00      	cmp	r3, #0
 800c53c:	d126      	bne.n	800c58c <f_open+0x1d4>
							res = move_window(fs, dw);
 800c53e:	697b      	ldr	r3, [r7, #20]
 800c540:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800c542:	4618      	mov	r0, r3
 800c544:	f7fe f866 	bl	800a614 <move_window>
 800c548:	4603      	mov	r3, r0
 800c54a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800c54e:	697b      	ldr	r3, [r7, #20]
 800c550:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c552:	3a01      	subs	r2, #1
 800c554:	615a      	str	r2, [r3, #20]
 800c556:	e019      	b.n	800c58c <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800c558:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800c55c:	2b00      	cmp	r3, #0
 800c55e:	d115      	bne.n	800c58c <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800c560:	7fbb      	ldrb	r3, [r7, #30]
 800c562:	f003 0310 	and.w	r3, r3, #16
 800c566:	2b00      	cmp	r3, #0
 800c568:	d003      	beq.n	800c572 <f_open+0x1ba>
					res = FR_NO_FILE;
 800c56a:	2304      	movs	r3, #4
 800c56c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800c570:	e00c      	b.n	800c58c <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800c572:	79fb      	ldrb	r3, [r7, #7]
 800c574:	f003 0302 	and.w	r3, r3, #2
 800c578:	2b00      	cmp	r3, #0
 800c57a:	d007      	beq.n	800c58c <f_open+0x1d4>
 800c57c:	7fbb      	ldrb	r3, [r7, #30]
 800c57e:	f003 0301 	and.w	r3, r3, #1
 800c582:	2b00      	cmp	r3, #0
 800c584:	d002      	beq.n	800c58c <f_open+0x1d4>
						res = FR_DENIED;
 800c586:	2307      	movs	r3, #7
 800c588:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 800c58c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800c590:	2b00      	cmp	r3, #0
 800c592:	d128      	bne.n	800c5e6 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800c594:	79fb      	ldrb	r3, [r7, #7]
 800c596:	f003 0308 	and.w	r3, r3, #8
 800c59a:	2b00      	cmp	r3, #0
 800c59c:	d003      	beq.n	800c5a6 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800c59e:	79fb      	ldrb	r3, [r7, #7]
 800c5a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c5a4:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800c5a6:	697b      	ldr	r3, [r7, #20]
 800c5a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c5aa:	68fb      	ldr	r3, [r7, #12]
 800c5ac:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800c5ae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c5b0:	68fb      	ldr	r3, [r7, #12]
 800c5b2:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800c5b4:	79fb      	ldrb	r3, [r7, #7]
 800c5b6:	f023 0301 	bic.w	r3, r3, #1
 800c5ba:	2b00      	cmp	r3, #0
 800c5bc:	bf14      	ite	ne
 800c5be:	2301      	movne	r3, #1
 800c5c0:	2300      	moveq	r3, #0
 800c5c2:	b2db      	uxtb	r3, r3
 800c5c4:	461a      	mov	r2, r3
 800c5c6:	f107 0318 	add.w	r3, r7, #24
 800c5ca:	4611      	mov	r1, r2
 800c5cc:	4618      	mov	r0, r3
 800c5ce:	f7fd ff2b 	bl	800a428 <inc_lock>
 800c5d2:	4602      	mov	r2, r0
 800c5d4:	68fb      	ldr	r3, [r7, #12]
 800c5d6:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800c5d8:	68fb      	ldr	r3, [r7, #12]
 800c5da:	691b      	ldr	r3, [r3, #16]
 800c5dc:	2b00      	cmp	r3, #0
 800c5de:	d102      	bne.n	800c5e6 <f_open+0x22e>
 800c5e0:	2302      	movs	r3, #2
 800c5e2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800c5e6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800c5ea:	2b00      	cmp	r3, #0
 800c5ec:	f040 80a3 	bne.w	800c736 <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800c5f0:	697b      	ldr	r3, [r7, #20]
 800c5f2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c5f4:	4611      	mov	r1, r2
 800c5f6:	4618      	mov	r0, r3
 800c5f8:	f7fe fd94 	bl	800b124 <ld_clust>
 800c5fc:	4602      	mov	r2, r0
 800c5fe:	68fb      	ldr	r3, [r7, #12]
 800c600:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800c602:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c604:	331c      	adds	r3, #28
 800c606:	4618      	mov	r0, r3
 800c608:	f7fd fda8 	bl	800a15c <ld_dword>
 800c60c:	4602      	mov	r2, r0
 800c60e:	68fb      	ldr	r3, [r7, #12]
 800c610:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800c612:	68fb      	ldr	r3, [r7, #12]
 800c614:	2200      	movs	r2, #0
 800c616:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800c618:	697a      	ldr	r2, [r7, #20]
 800c61a:	68fb      	ldr	r3, [r7, #12]
 800c61c:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800c61e:	697b      	ldr	r3, [r7, #20]
 800c620:	88da      	ldrh	r2, [r3, #6]
 800c622:	68fb      	ldr	r3, [r7, #12]
 800c624:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800c626:	68fb      	ldr	r3, [r7, #12]
 800c628:	79fa      	ldrb	r2, [r7, #7]
 800c62a:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800c62c:	68fb      	ldr	r3, [r7, #12]
 800c62e:	2200      	movs	r2, #0
 800c630:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800c632:	68fb      	ldr	r3, [r7, #12]
 800c634:	2200      	movs	r2, #0
 800c636:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800c638:	68fb      	ldr	r3, [r7, #12]
 800c63a:	2200      	movs	r2, #0
 800c63c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800c63e:	68fb      	ldr	r3, [r7, #12]
 800c640:	3330      	adds	r3, #48	; 0x30
 800c642:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800c646:	2100      	movs	r1, #0
 800c648:	4618      	mov	r0, r3
 800c64a:	f7fd fe12 	bl	800a272 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800c64e:	79fb      	ldrb	r3, [r7, #7]
 800c650:	f003 0320 	and.w	r3, r3, #32
 800c654:	2b00      	cmp	r3, #0
 800c656:	d06e      	beq.n	800c736 <f_open+0x37e>
 800c658:	68fb      	ldr	r3, [r7, #12]
 800c65a:	68db      	ldr	r3, [r3, #12]
 800c65c:	2b00      	cmp	r3, #0
 800c65e:	d06a      	beq.n	800c736 <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800c660:	68fb      	ldr	r3, [r7, #12]
 800c662:	68da      	ldr	r2, [r3, #12]
 800c664:	68fb      	ldr	r3, [r7, #12]
 800c666:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800c668:	697b      	ldr	r3, [r7, #20]
 800c66a:	895b      	ldrh	r3, [r3, #10]
 800c66c:	461a      	mov	r2, r3
 800c66e:	697b      	ldr	r3, [r7, #20]
 800c670:	899b      	ldrh	r3, [r3, #12]
 800c672:	fb02 f303 	mul.w	r3, r2, r3
 800c676:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800c678:	68fb      	ldr	r3, [r7, #12]
 800c67a:	689b      	ldr	r3, [r3, #8]
 800c67c:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800c67e:	68fb      	ldr	r3, [r7, #12]
 800c680:	68db      	ldr	r3, [r3, #12]
 800c682:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c684:	e016      	b.n	800c6b4 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 800c686:	68fb      	ldr	r3, [r7, #12]
 800c688:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800c68a:	4618      	mov	r0, r3
 800c68c:	f7fe f87f 	bl	800a78e <get_fat>
 800c690:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800c692:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c694:	2b01      	cmp	r3, #1
 800c696:	d802      	bhi.n	800c69e <f_open+0x2e6>
 800c698:	2302      	movs	r3, #2
 800c69a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800c69e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c6a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c6a4:	d102      	bne.n	800c6ac <f_open+0x2f4>
 800c6a6:	2301      	movs	r3, #1
 800c6a8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800c6ac:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800c6ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c6b0:	1ad3      	subs	r3, r2, r3
 800c6b2:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c6b4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800c6b8:	2b00      	cmp	r3, #0
 800c6ba:	d103      	bne.n	800c6c4 <f_open+0x30c>
 800c6bc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800c6be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c6c0:	429a      	cmp	r2, r3
 800c6c2:	d8e0      	bhi.n	800c686 <f_open+0x2ce>
				}
				fp->clust = clst;
 800c6c4:	68fb      	ldr	r3, [r7, #12]
 800c6c6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c6c8:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800c6ca:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800c6ce:	2b00      	cmp	r3, #0
 800c6d0:	d131      	bne.n	800c736 <f_open+0x37e>
 800c6d2:	697b      	ldr	r3, [r7, #20]
 800c6d4:	899b      	ldrh	r3, [r3, #12]
 800c6d6:	461a      	mov	r2, r3
 800c6d8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c6da:	fbb3 f1f2 	udiv	r1, r3, r2
 800c6de:	fb01 f202 	mul.w	r2, r1, r2
 800c6e2:	1a9b      	subs	r3, r3, r2
 800c6e4:	2b00      	cmp	r3, #0
 800c6e6:	d026      	beq.n	800c736 <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800c6e8:	697b      	ldr	r3, [r7, #20]
 800c6ea:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800c6ec:	4618      	mov	r0, r3
 800c6ee:	f7fe f82f 	bl	800a750 <clust2sect>
 800c6f2:	64f8      	str	r0, [r7, #76]	; 0x4c
 800c6f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c6f6:	2b00      	cmp	r3, #0
 800c6f8:	d103      	bne.n	800c702 <f_open+0x34a>
						res = FR_INT_ERR;
 800c6fa:	2302      	movs	r3, #2
 800c6fc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800c700:	e019      	b.n	800c736 <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800c702:	697b      	ldr	r3, [r7, #20]
 800c704:	899b      	ldrh	r3, [r3, #12]
 800c706:	461a      	mov	r2, r3
 800c708:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c70a:	fbb3 f2f2 	udiv	r2, r3, r2
 800c70e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c710:	441a      	add	r2, r3
 800c712:	68fb      	ldr	r3, [r7, #12]
 800c714:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800c716:	697b      	ldr	r3, [r7, #20]
 800c718:	7858      	ldrb	r0, [r3, #1]
 800c71a:	68fb      	ldr	r3, [r7, #12]
 800c71c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c720:	68fb      	ldr	r3, [r7, #12]
 800c722:	6a1a      	ldr	r2, [r3, #32]
 800c724:	2301      	movs	r3, #1
 800c726:	f7fd fca3 	bl	800a070 <disk_read>
 800c72a:	4603      	mov	r3, r0
 800c72c:	2b00      	cmp	r3, #0
 800c72e:	d002      	beq.n	800c736 <f_open+0x37e>
 800c730:	2301      	movs	r3, #1
 800c732:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800c736:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800c73a:	2b00      	cmp	r3, #0
 800c73c:	d002      	beq.n	800c744 <f_open+0x38c>
 800c73e:	68fb      	ldr	r3, [r7, #12]
 800c740:	2200      	movs	r2, #0
 800c742:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800c744:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800c748:	4618      	mov	r0, r3
 800c74a:	3768      	adds	r7, #104	; 0x68
 800c74c:	46bd      	mov	sp, r7
 800c74e:	bd80      	pop	{r7, pc}

0800c750 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800c750:	b580      	push	{r7, lr}
 800c752:	b08c      	sub	sp, #48	; 0x30
 800c754:	af00      	add	r7, sp, #0
 800c756:	60f8      	str	r0, [r7, #12]
 800c758:	60b9      	str	r1, [r7, #8]
 800c75a:	607a      	str	r2, [r7, #4]
 800c75c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800c75e:	68bb      	ldr	r3, [r7, #8]
 800c760:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800c762:	683b      	ldr	r3, [r7, #0]
 800c764:	2200      	movs	r2, #0
 800c766:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800c768:	68fb      	ldr	r3, [r7, #12]
 800c76a:	f107 0210 	add.w	r2, r7, #16
 800c76e:	4611      	mov	r1, r2
 800c770:	4618      	mov	r0, r3
 800c772:	f7ff fda5 	bl	800c2c0 <validate>
 800c776:	4603      	mov	r3, r0
 800c778:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800c77c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c780:	2b00      	cmp	r3, #0
 800c782:	d107      	bne.n	800c794 <f_write+0x44>
 800c784:	68fb      	ldr	r3, [r7, #12]
 800c786:	7d5b      	ldrb	r3, [r3, #21]
 800c788:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800c78c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c790:	2b00      	cmp	r3, #0
 800c792:	d002      	beq.n	800c79a <f_write+0x4a>
 800c794:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c798:	e16a      	b.n	800ca70 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800c79a:	68fb      	ldr	r3, [r7, #12]
 800c79c:	7d1b      	ldrb	r3, [r3, #20]
 800c79e:	f003 0302 	and.w	r3, r3, #2
 800c7a2:	2b00      	cmp	r3, #0
 800c7a4:	d101      	bne.n	800c7aa <f_write+0x5a>
 800c7a6:	2307      	movs	r3, #7
 800c7a8:	e162      	b.n	800ca70 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800c7aa:	68fb      	ldr	r3, [r7, #12]
 800c7ac:	699a      	ldr	r2, [r3, #24]
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	441a      	add	r2, r3
 800c7b2:	68fb      	ldr	r3, [r7, #12]
 800c7b4:	699b      	ldr	r3, [r3, #24]
 800c7b6:	429a      	cmp	r2, r3
 800c7b8:	f080 814c 	bcs.w	800ca54 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800c7bc:	68fb      	ldr	r3, [r7, #12]
 800c7be:	699b      	ldr	r3, [r3, #24]
 800c7c0:	43db      	mvns	r3, r3
 800c7c2:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800c7c4:	e146      	b.n	800ca54 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800c7c6:	68fb      	ldr	r3, [r7, #12]
 800c7c8:	699b      	ldr	r3, [r3, #24]
 800c7ca:	693a      	ldr	r2, [r7, #16]
 800c7cc:	8992      	ldrh	r2, [r2, #12]
 800c7ce:	fbb3 f1f2 	udiv	r1, r3, r2
 800c7d2:	fb01 f202 	mul.w	r2, r1, r2
 800c7d6:	1a9b      	subs	r3, r3, r2
 800c7d8:	2b00      	cmp	r3, #0
 800c7da:	f040 80f1 	bne.w	800c9c0 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800c7de:	68fb      	ldr	r3, [r7, #12]
 800c7e0:	699b      	ldr	r3, [r3, #24]
 800c7e2:	693a      	ldr	r2, [r7, #16]
 800c7e4:	8992      	ldrh	r2, [r2, #12]
 800c7e6:	fbb3 f3f2 	udiv	r3, r3, r2
 800c7ea:	693a      	ldr	r2, [r7, #16]
 800c7ec:	8952      	ldrh	r2, [r2, #10]
 800c7ee:	3a01      	subs	r2, #1
 800c7f0:	4013      	ands	r3, r2
 800c7f2:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800c7f4:	69bb      	ldr	r3, [r7, #24]
 800c7f6:	2b00      	cmp	r3, #0
 800c7f8:	d143      	bne.n	800c882 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800c7fa:	68fb      	ldr	r3, [r7, #12]
 800c7fc:	699b      	ldr	r3, [r3, #24]
 800c7fe:	2b00      	cmp	r3, #0
 800c800:	d10c      	bne.n	800c81c <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800c802:	68fb      	ldr	r3, [r7, #12]
 800c804:	689b      	ldr	r3, [r3, #8]
 800c806:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800c808:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c80a:	2b00      	cmp	r3, #0
 800c80c:	d11a      	bne.n	800c844 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800c80e:	68fb      	ldr	r3, [r7, #12]
 800c810:	2100      	movs	r1, #0
 800c812:	4618      	mov	r0, r3
 800c814:	f7fe fa10 	bl	800ac38 <create_chain>
 800c818:	62b8      	str	r0, [r7, #40]	; 0x28
 800c81a:	e013      	b.n	800c844 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800c81c:	68fb      	ldr	r3, [r7, #12]
 800c81e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c820:	2b00      	cmp	r3, #0
 800c822:	d007      	beq.n	800c834 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800c824:	68fb      	ldr	r3, [r7, #12]
 800c826:	699b      	ldr	r3, [r3, #24]
 800c828:	4619      	mov	r1, r3
 800c82a:	68f8      	ldr	r0, [r7, #12]
 800c82c:	f7fe fa9c 	bl	800ad68 <clmt_clust>
 800c830:	62b8      	str	r0, [r7, #40]	; 0x28
 800c832:	e007      	b.n	800c844 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800c834:	68fa      	ldr	r2, [r7, #12]
 800c836:	68fb      	ldr	r3, [r7, #12]
 800c838:	69db      	ldr	r3, [r3, #28]
 800c83a:	4619      	mov	r1, r3
 800c83c:	4610      	mov	r0, r2
 800c83e:	f7fe f9fb 	bl	800ac38 <create_chain>
 800c842:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800c844:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c846:	2b00      	cmp	r3, #0
 800c848:	f000 8109 	beq.w	800ca5e <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800c84c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c84e:	2b01      	cmp	r3, #1
 800c850:	d104      	bne.n	800c85c <f_write+0x10c>
 800c852:	68fb      	ldr	r3, [r7, #12]
 800c854:	2202      	movs	r2, #2
 800c856:	755a      	strb	r2, [r3, #21]
 800c858:	2302      	movs	r3, #2
 800c85a:	e109      	b.n	800ca70 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800c85c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c85e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c862:	d104      	bne.n	800c86e <f_write+0x11e>
 800c864:	68fb      	ldr	r3, [r7, #12]
 800c866:	2201      	movs	r2, #1
 800c868:	755a      	strb	r2, [r3, #21]
 800c86a:	2301      	movs	r3, #1
 800c86c:	e100      	b.n	800ca70 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 800c86e:	68fb      	ldr	r3, [r7, #12]
 800c870:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c872:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800c874:	68fb      	ldr	r3, [r7, #12]
 800c876:	689b      	ldr	r3, [r3, #8]
 800c878:	2b00      	cmp	r3, #0
 800c87a:	d102      	bne.n	800c882 <f_write+0x132>
 800c87c:	68fb      	ldr	r3, [r7, #12]
 800c87e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c880:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800c882:	68fb      	ldr	r3, [r7, #12]
 800c884:	7d1b      	ldrb	r3, [r3, #20]
 800c886:	b25b      	sxtb	r3, r3
 800c888:	2b00      	cmp	r3, #0
 800c88a:	da18      	bge.n	800c8be <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c88c:	693b      	ldr	r3, [r7, #16]
 800c88e:	7858      	ldrb	r0, [r3, #1]
 800c890:	68fb      	ldr	r3, [r7, #12]
 800c892:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c896:	68fb      	ldr	r3, [r7, #12]
 800c898:	6a1a      	ldr	r2, [r3, #32]
 800c89a:	2301      	movs	r3, #1
 800c89c:	f7fd fc08 	bl	800a0b0 <disk_write>
 800c8a0:	4603      	mov	r3, r0
 800c8a2:	2b00      	cmp	r3, #0
 800c8a4:	d004      	beq.n	800c8b0 <f_write+0x160>
 800c8a6:	68fb      	ldr	r3, [r7, #12]
 800c8a8:	2201      	movs	r2, #1
 800c8aa:	755a      	strb	r2, [r3, #21]
 800c8ac:	2301      	movs	r3, #1
 800c8ae:	e0df      	b.n	800ca70 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 800c8b0:	68fb      	ldr	r3, [r7, #12]
 800c8b2:	7d1b      	ldrb	r3, [r3, #20]
 800c8b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c8b8:	b2da      	uxtb	r2, r3
 800c8ba:	68fb      	ldr	r3, [r7, #12]
 800c8bc:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800c8be:	693a      	ldr	r2, [r7, #16]
 800c8c0:	68fb      	ldr	r3, [r7, #12]
 800c8c2:	69db      	ldr	r3, [r3, #28]
 800c8c4:	4619      	mov	r1, r3
 800c8c6:	4610      	mov	r0, r2
 800c8c8:	f7fd ff42 	bl	800a750 <clust2sect>
 800c8cc:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800c8ce:	697b      	ldr	r3, [r7, #20]
 800c8d0:	2b00      	cmp	r3, #0
 800c8d2:	d104      	bne.n	800c8de <f_write+0x18e>
 800c8d4:	68fb      	ldr	r3, [r7, #12]
 800c8d6:	2202      	movs	r2, #2
 800c8d8:	755a      	strb	r2, [r3, #21]
 800c8da:	2302      	movs	r3, #2
 800c8dc:	e0c8      	b.n	800ca70 <f_write+0x320>
			sect += csect;
 800c8de:	697a      	ldr	r2, [r7, #20]
 800c8e0:	69bb      	ldr	r3, [r7, #24]
 800c8e2:	4413      	add	r3, r2
 800c8e4:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800c8e6:	693b      	ldr	r3, [r7, #16]
 800c8e8:	899b      	ldrh	r3, [r3, #12]
 800c8ea:	461a      	mov	r2, r3
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	fbb3 f3f2 	udiv	r3, r3, r2
 800c8f2:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800c8f4:	6a3b      	ldr	r3, [r7, #32]
 800c8f6:	2b00      	cmp	r3, #0
 800c8f8:	d043      	beq.n	800c982 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800c8fa:	69ba      	ldr	r2, [r7, #24]
 800c8fc:	6a3b      	ldr	r3, [r7, #32]
 800c8fe:	4413      	add	r3, r2
 800c900:	693a      	ldr	r2, [r7, #16]
 800c902:	8952      	ldrh	r2, [r2, #10]
 800c904:	4293      	cmp	r3, r2
 800c906:	d905      	bls.n	800c914 <f_write+0x1c4>
					cc = fs->csize - csect;
 800c908:	693b      	ldr	r3, [r7, #16]
 800c90a:	895b      	ldrh	r3, [r3, #10]
 800c90c:	461a      	mov	r2, r3
 800c90e:	69bb      	ldr	r3, [r7, #24]
 800c910:	1ad3      	subs	r3, r2, r3
 800c912:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c914:	693b      	ldr	r3, [r7, #16]
 800c916:	7858      	ldrb	r0, [r3, #1]
 800c918:	6a3b      	ldr	r3, [r7, #32]
 800c91a:	697a      	ldr	r2, [r7, #20]
 800c91c:	69f9      	ldr	r1, [r7, #28]
 800c91e:	f7fd fbc7 	bl	800a0b0 <disk_write>
 800c922:	4603      	mov	r3, r0
 800c924:	2b00      	cmp	r3, #0
 800c926:	d004      	beq.n	800c932 <f_write+0x1e2>
 800c928:	68fb      	ldr	r3, [r7, #12]
 800c92a:	2201      	movs	r2, #1
 800c92c:	755a      	strb	r2, [r3, #21]
 800c92e:	2301      	movs	r3, #1
 800c930:	e09e      	b.n	800ca70 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800c932:	68fb      	ldr	r3, [r7, #12]
 800c934:	6a1a      	ldr	r2, [r3, #32]
 800c936:	697b      	ldr	r3, [r7, #20]
 800c938:	1ad3      	subs	r3, r2, r3
 800c93a:	6a3a      	ldr	r2, [r7, #32]
 800c93c:	429a      	cmp	r2, r3
 800c93e:	d918      	bls.n	800c972 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800c940:	68fb      	ldr	r3, [r7, #12]
 800c942:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800c946:	68fb      	ldr	r3, [r7, #12]
 800c948:	6a1a      	ldr	r2, [r3, #32]
 800c94a:	697b      	ldr	r3, [r7, #20]
 800c94c:	1ad3      	subs	r3, r2, r3
 800c94e:	693a      	ldr	r2, [r7, #16]
 800c950:	8992      	ldrh	r2, [r2, #12]
 800c952:	fb02 f303 	mul.w	r3, r2, r3
 800c956:	69fa      	ldr	r2, [r7, #28]
 800c958:	18d1      	adds	r1, r2, r3
 800c95a:	693b      	ldr	r3, [r7, #16]
 800c95c:	899b      	ldrh	r3, [r3, #12]
 800c95e:	461a      	mov	r2, r3
 800c960:	f7fd fc66 	bl	800a230 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800c964:	68fb      	ldr	r3, [r7, #12]
 800c966:	7d1b      	ldrb	r3, [r3, #20]
 800c968:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c96c:	b2da      	uxtb	r2, r3
 800c96e:	68fb      	ldr	r3, [r7, #12]
 800c970:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800c972:	693b      	ldr	r3, [r7, #16]
 800c974:	899b      	ldrh	r3, [r3, #12]
 800c976:	461a      	mov	r2, r3
 800c978:	6a3b      	ldr	r3, [r7, #32]
 800c97a:	fb02 f303 	mul.w	r3, r2, r3
 800c97e:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800c980:	e04b      	b.n	800ca1a <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800c982:	68fb      	ldr	r3, [r7, #12]
 800c984:	6a1b      	ldr	r3, [r3, #32]
 800c986:	697a      	ldr	r2, [r7, #20]
 800c988:	429a      	cmp	r2, r3
 800c98a:	d016      	beq.n	800c9ba <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 800c98c:	68fb      	ldr	r3, [r7, #12]
 800c98e:	699a      	ldr	r2, [r3, #24]
 800c990:	68fb      	ldr	r3, [r7, #12]
 800c992:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800c994:	429a      	cmp	r2, r3
 800c996:	d210      	bcs.n	800c9ba <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800c998:	693b      	ldr	r3, [r7, #16]
 800c99a:	7858      	ldrb	r0, [r3, #1]
 800c99c:	68fb      	ldr	r3, [r7, #12]
 800c99e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c9a2:	2301      	movs	r3, #1
 800c9a4:	697a      	ldr	r2, [r7, #20]
 800c9a6:	f7fd fb63 	bl	800a070 <disk_read>
 800c9aa:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800c9ac:	2b00      	cmp	r3, #0
 800c9ae:	d004      	beq.n	800c9ba <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 800c9b0:	68fb      	ldr	r3, [r7, #12]
 800c9b2:	2201      	movs	r2, #1
 800c9b4:	755a      	strb	r2, [r3, #21]
 800c9b6:	2301      	movs	r3, #1
 800c9b8:	e05a      	b.n	800ca70 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 800c9ba:	68fb      	ldr	r3, [r7, #12]
 800c9bc:	697a      	ldr	r2, [r7, #20]
 800c9be:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800c9c0:	693b      	ldr	r3, [r7, #16]
 800c9c2:	899b      	ldrh	r3, [r3, #12]
 800c9c4:	4618      	mov	r0, r3
 800c9c6:	68fb      	ldr	r3, [r7, #12]
 800c9c8:	699b      	ldr	r3, [r3, #24]
 800c9ca:	693a      	ldr	r2, [r7, #16]
 800c9cc:	8992      	ldrh	r2, [r2, #12]
 800c9ce:	fbb3 f1f2 	udiv	r1, r3, r2
 800c9d2:	fb01 f202 	mul.w	r2, r1, r2
 800c9d6:	1a9b      	subs	r3, r3, r2
 800c9d8:	1ac3      	subs	r3, r0, r3
 800c9da:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800c9dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	429a      	cmp	r2, r3
 800c9e2:	d901      	bls.n	800c9e8 <f_write+0x298>
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800c9e8:	68fb      	ldr	r3, [r7, #12]
 800c9ea:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c9ee:	68fb      	ldr	r3, [r7, #12]
 800c9f0:	699b      	ldr	r3, [r3, #24]
 800c9f2:	693a      	ldr	r2, [r7, #16]
 800c9f4:	8992      	ldrh	r2, [r2, #12]
 800c9f6:	fbb3 f0f2 	udiv	r0, r3, r2
 800c9fa:	fb00 f202 	mul.w	r2, r0, r2
 800c9fe:	1a9b      	subs	r3, r3, r2
 800ca00:	440b      	add	r3, r1
 800ca02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ca04:	69f9      	ldr	r1, [r7, #28]
 800ca06:	4618      	mov	r0, r3
 800ca08:	f7fd fc12 	bl	800a230 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800ca0c:	68fb      	ldr	r3, [r7, #12]
 800ca0e:	7d1b      	ldrb	r3, [r3, #20]
 800ca10:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800ca14:	b2da      	uxtb	r2, r3
 800ca16:	68fb      	ldr	r3, [r7, #12]
 800ca18:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800ca1a:	69fa      	ldr	r2, [r7, #28]
 800ca1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca1e:	4413      	add	r3, r2
 800ca20:	61fb      	str	r3, [r7, #28]
 800ca22:	68fb      	ldr	r3, [r7, #12]
 800ca24:	699a      	ldr	r2, [r3, #24]
 800ca26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca28:	441a      	add	r2, r3
 800ca2a:	68fb      	ldr	r3, [r7, #12]
 800ca2c:	619a      	str	r2, [r3, #24]
 800ca2e:	68fb      	ldr	r3, [r7, #12]
 800ca30:	68da      	ldr	r2, [r3, #12]
 800ca32:	68fb      	ldr	r3, [r7, #12]
 800ca34:	699b      	ldr	r3, [r3, #24]
 800ca36:	429a      	cmp	r2, r3
 800ca38:	bf38      	it	cc
 800ca3a:	461a      	movcc	r2, r3
 800ca3c:	68fb      	ldr	r3, [r7, #12]
 800ca3e:	60da      	str	r2, [r3, #12]
 800ca40:	683b      	ldr	r3, [r7, #0]
 800ca42:	681a      	ldr	r2, [r3, #0]
 800ca44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca46:	441a      	add	r2, r3
 800ca48:	683b      	ldr	r3, [r7, #0]
 800ca4a:	601a      	str	r2, [r3, #0]
 800ca4c:	687a      	ldr	r2, [r7, #4]
 800ca4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca50:	1ad3      	subs	r3, r2, r3
 800ca52:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	2b00      	cmp	r3, #0
 800ca58:	f47f aeb5 	bne.w	800c7c6 <f_write+0x76>
 800ca5c:	e000      	b.n	800ca60 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800ca5e:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800ca60:	68fb      	ldr	r3, [r7, #12]
 800ca62:	7d1b      	ldrb	r3, [r3, #20]
 800ca64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ca68:	b2da      	uxtb	r2, r3
 800ca6a:	68fb      	ldr	r3, [r7, #12]
 800ca6c:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800ca6e:	2300      	movs	r3, #0
}
 800ca70:	4618      	mov	r0, r3
 800ca72:	3730      	adds	r7, #48	; 0x30
 800ca74:	46bd      	mov	sp, r7
 800ca76:	bd80      	pop	{r7, pc}

0800ca78 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800ca78:	b580      	push	{r7, lr}
 800ca7a:	b086      	sub	sp, #24
 800ca7c:	af00      	add	r7, sp, #0
 800ca7e:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	f107 0208 	add.w	r2, r7, #8
 800ca86:	4611      	mov	r1, r2
 800ca88:	4618      	mov	r0, r3
 800ca8a:	f7ff fc19 	bl	800c2c0 <validate>
 800ca8e:	4603      	mov	r3, r0
 800ca90:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800ca92:	7dfb      	ldrb	r3, [r7, #23]
 800ca94:	2b00      	cmp	r3, #0
 800ca96:	d168      	bne.n	800cb6a <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	7d1b      	ldrb	r3, [r3, #20]
 800ca9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800caa0:	2b00      	cmp	r3, #0
 800caa2:	d062      	beq.n	800cb6a <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	7d1b      	ldrb	r3, [r3, #20]
 800caa8:	b25b      	sxtb	r3, r3
 800caaa:	2b00      	cmp	r3, #0
 800caac:	da15      	bge.n	800cada <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800caae:	68bb      	ldr	r3, [r7, #8]
 800cab0:	7858      	ldrb	r0, [r3, #1]
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	6a1a      	ldr	r2, [r3, #32]
 800cabc:	2301      	movs	r3, #1
 800cabe:	f7fd faf7 	bl	800a0b0 <disk_write>
 800cac2:	4603      	mov	r3, r0
 800cac4:	2b00      	cmp	r3, #0
 800cac6:	d001      	beq.n	800cacc <f_sync+0x54>
 800cac8:	2301      	movs	r3, #1
 800caca:	e04f      	b.n	800cb6c <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	7d1b      	ldrb	r3, [r3, #20]
 800cad0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cad4:	b2da      	uxtb	r2, r3
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800cada:	f7fd f847 	bl	8009b6c <get_fattime>
 800cade:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800cae0:	68ba      	ldr	r2, [r7, #8]
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cae6:	4619      	mov	r1, r3
 800cae8:	4610      	mov	r0, r2
 800caea:	f7fd fd93 	bl	800a614 <move_window>
 800caee:	4603      	mov	r3, r0
 800caf0:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800caf2:	7dfb      	ldrb	r3, [r7, #23]
 800caf4:	2b00      	cmp	r3, #0
 800caf6:	d138      	bne.n	800cb6a <f_sync+0xf2>
					dir = fp->dir_ptr;
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cafc:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800cafe:	68fb      	ldr	r3, [r7, #12]
 800cb00:	330b      	adds	r3, #11
 800cb02:	781a      	ldrb	r2, [r3, #0]
 800cb04:	68fb      	ldr	r3, [r7, #12]
 800cb06:	330b      	adds	r3, #11
 800cb08:	f042 0220 	orr.w	r2, r2, #32
 800cb0c:	b2d2      	uxtb	r2, r2
 800cb0e:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	6818      	ldr	r0, [r3, #0]
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	689b      	ldr	r3, [r3, #8]
 800cb18:	461a      	mov	r2, r3
 800cb1a:	68f9      	ldr	r1, [r7, #12]
 800cb1c:	f7fe fb21 	bl	800b162 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800cb20:	68fb      	ldr	r3, [r7, #12]
 800cb22:	f103 021c 	add.w	r2, r3, #28
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	68db      	ldr	r3, [r3, #12]
 800cb2a:	4619      	mov	r1, r3
 800cb2c:	4610      	mov	r0, r2
 800cb2e:	f7fd fb53 	bl	800a1d8 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800cb32:	68fb      	ldr	r3, [r7, #12]
 800cb34:	3316      	adds	r3, #22
 800cb36:	6939      	ldr	r1, [r7, #16]
 800cb38:	4618      	mov	r0, r3
 800cb3a:	f7fd fb4d 	bl	800a1d8 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800cb3e:	68fb      	ldr	r3, [r7, #12]
 800cb40:	3312      	adds	r3, #18
 800cb42:	2100      	movs	r1, #0
 800cb44:	4618      	mov	r0, r3
 800cb46:	f7fd fb2c 	bl	800a1a2 <st_word>
					fs->wflag = 1;
 800cb4a:	68bb      	ldr	r3, [r7, #8]
 800cb4c:	2201      	movs	r2, #1
 800cb4e:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800cb50:	68bb      	ldr	r3, [r7, #8]
 800cb52:	4618      	mov	r0, r3
 800cb54:	f7fd fd8c 	bl	800a670 <sync_fs>
 800cb58:	4603      	mov	r3, r0
 800cb5a:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	7d1b      	ldrb	r3, [r3, #20]
 800cb60:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cb64:	b2da      	uxtb	r2, r3
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800cb6a:	7dfb      	ldrb	r3, [r7, #23]
}
 800cb6c:	4618      	mov	r0, r3
 800cb6e:	3718      	adds	r7, #24
 800cb70:	46bd      	mov	sp, r7
 800cb72:	bd80      	pop	{r7, pc}

0800cb74 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800cb74:	b480      	push	{r7}
 800cb76:	b087      	sub	sp, #28
 800cb78:	af00      	add	r7, sp, #0
 800cb7a:	60f8      	str	r0, [r7, #12]
 800cb7c:	60b9      	str	r1, [r7, #8]
 800cb7e:	4613      	mov	r3, r2
 800cb80:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800cb82:	2301      	movs	r3, #1
 800cb84:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800cb86:	2300      	movs	r3, #0
 800cb88:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800cb8a:	4b1f      	ldr	r3, [pc, #124]	; (800cc08 <FATFS_LinkDriverEx+0x94>)
 800cb8c:	7a5b      	ldrb	r3, [r3, #9]
 800cb8e:	b2db      	uxtb	r3, r3
 800cb90:	2b00      	cmp	r3, #0
 800cb92:	d131      	bne.n	800cbf8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800cb94:	4b1c      	ldr	r3, [pc, #112]	; (800cc08 <FATFS_LinkDriverEx+0x94>)
 800cb96:	7a5b      	ldrb	r3, [r3, #9]
 800cb98:	b2db      	uxtb	r3, r3
 800cb9a:	461a      	mov	r2, r3
 800cb9c:	4b1a      	ldr	r3, [pc, #104]	; (800cc08 <FATFS_LinkDriverEx+0x94>)
 800cb9e:	2100      	movs	r1, #0
 800cba0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800cba2:	4b19      	ldr	r3, [pc, #100]	; (800cc08 <FATFS_LinkDriverEx+0x94>)
 800cba4:	7a5b      	ldrb	r3, [r3, #9]
 800cba6:	b2db      	uxtb	r3, r3
 800cba8:	4a17      	ldr	r2, [pc, #92]	; (800cc08 <FATFS_LinkDriverEx+0x94>)
 800cbaa:	009b      	lsls	r3, r3, #2
 800cbac:	4413      	add	r3, r2
 800cbae:	68fa      	ldr	r2, [r7, #12]
 800cbb0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800cbb2:	4b15      	ldr	r3, [pc, #84]	; (800cc08 <FATFS_LinkDriverEx+0x94>)
 800cbb4:	7a5b      	ldrb	r3, [r3, #9]
 800cbb6:	b2db      	uxtb	r3, r3
 800cbb8:	461a      	mov	r2, r3
 800cbba:	4b13      	ldr	r3, [pc, #76]	; (800cc08 <FATFS_LinkDriverEx+0x94>)
 800cbbc:	4413      	add	r3, r2
 800cbbe:	79fa      	ldrb	r2, [r7, #7]
 800cbc0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800cbc2:	4b11      	ldr	r3, [pc, #68]	; (800cc08 <FATFS_LinkDriverEx+0x94>)
 800cbc4:	7a5b      	ldrb	r3, [r3, #9]
 800cbc6:	b2db      	uxtb	r3, r3
 800cbc8:	1c5a      	adds	r2, r3, #1
 800cbca:	b2d1      	uxtb	r1, r2
 800cbcc:	4a0e      	ldr	r2, [pc, #56]	; (800cc08 <FATFS_LinkDriverEx+0x94>)
 800cbce:	7251      	strb	r1, [r2, #9]
 800cbd0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800cbd2:	7dbb      	ldrb	r3, [r7, #22]
 800cbd4:	3330      	adds	r3, #48	; 0x30
 800cbd6:	b2da      	uxtb	r2, r3
 800cbd8:	68bb      	ldr	r3, [r7, #8]
 800cbda:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800cbdc:	68bb      	ldr	r3, [r7, #8]
 800cbde:	3301      	adds	r3, #1
 800cbe0:	223a      	movs	r2, #58	; 0x3a
 800cbe2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800cbe4:	68bb      	ldr	r3, [r7, #8]
 800cbe6:	3302      	adds	r3, #2
 800cbe8:	222f      	movs	r2, #47	; 0x2f
 800cbea:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800cbec:	68bb      	ldr	r3, [r7, #8]
 800cbee:	3303      	adds	r3, #3
 800cbf0:	2200      	movs	r2, #0
 800cbf2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800cbf4:	2300      	movs	r3, #0
 800cbf6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800cbf8:	7dfb      	ldrb	r3, [r7, #23]
}
 800cbfa:	4618      	mov	r0, r3
 800cbfc:	371c      	adds	r7, #28
 800cbfe:	46bd      	mov	sp, r7
 800cc00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc04:	4770      	bx	lr
 800cc06:	bf00      	nop
 800cc08:	2000172c 	.word	0x2000172c

0800cc0c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800cc0c:	b580      	push	{r7, lr}
 800cc0e:	b082      	sub	sp, #8
 800cc10:	af00      	add	r7, sp, #0
 800cc12:	6078      	str	r0, [r7, #4]
 800cc14:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800cc16:	2200      	movs	r2, #0
 800cc18:	6839      	ldr	r1, [r7, #0]
 800cc1a:	6878      	ldr	r0, [r7, #4]
 800cc1c:	f7ff ffaa 	bl	800cb74 <FATFS_LinkDriverEx>
 800cc20:	4603      	mov	r3, r0
}
 800cc22:	4618      	mov	r0, r3
 800cc24:	3708      	adds	r7, #8
 800cc26:	46bd      	mov	sp, r7
 800cc28:	bd80      	pop	{r7, pc}
	...

0800cc2c <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800cc2c:	b480      	push	{r7}
 800cc2e:	b085      	sub	sp, #20
 800cc30:	af00      	add	r7, sp, #0
 800cc32:	4603      	mov	r3, r0
 800cc34:	6039      	str	r1, [r7, #0]
 800cc36:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800cc38:	88fb      	ldrh	r3, [r7, #6]
 800cc3a:	2b7f      	cmp	r3, #127	; 0x7f
 800cc3c:	d802      	bhi.n	800cc44 <ff_convert+0x18>
		c = chr;
 800cc3e:	88fb      	ldrh	r3, [r7, #6]
 800cc40:	81fb      	strh	r3, [r7, #14]
 800cc42:	e025      	b.n	800cc90 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800cc44:	683b      	ldr	r3, [r7, #0]
 800cc46:	2b00      	cmp	r3, #0
 800cc48:	d00b      	beq.n	800cc62 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800cc4a:	88fb      	ldrh	r3, [r7, #6]
 800cc4c:	2bff      	cmp	r3, #255	; 0xff
 800cc4e:	d805      	bhi.n	800cc5c <ff_convert+0x30>
 800cc50:	88fb      	ldrh	r3, [r7, #6]
 800cc52:	3b80      	subs	r3, #128	; 0x80
 800cc54:	4a12      	ldr	r2, [pc, #72]	; (800cca0 <ff_convert+0x74>)
 800cc56:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cc5a:	e000      	b.n	800cc5e <ff_convert+0x32>
 800cc5c:	2300      	movs	r3, #0
 800cc5e:	81fb      	strh	r3, [r7, #14]
 800cc60:	e016      	b.n	800cc90 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800cc62:	2300      	movs	r3, #0
 800cc64:	81fb      	strh	r3, [r7, #14]
 800cc66:	e009      	b.n	800cc7c <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800cc68:	89fb      	ldrh	r3, [r7, #14]
 800cc6a:	4a0d      	ldr	r2, [pc, #52]	; (800cca0 <ff_convert+0x74>)
 800cc6c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cc70:	88fa      	ldrh	r2, [r7, #6]
 800cc72:	429a      	cmp	r2, r3
 800cc74:	d006      	beq.n	800cc84 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800cc76:	89fb      	ldrh	r3, [r7, #14]
 800cc78:	3301      	adds	r3, #1
 800cc7a:	81fb      	strh	r3, [r7, #14]
 800cc7c:	89fb      	ldrh	r3, [r7, #14]
 800cc7e:	2b7f      	cmp	r3, #127	; 0x7f
 800cc80:	d9f2      	bls.n	800cc68 <ff_convert+0x3c>
 800cc82:	e000      	b.n	800cc86 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800cc84:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800cc86:	89fb      	ldrh	r3, [r7, #14]
 800cc88:	3380      	adds	r3, #128	; 0x80
 800cc8a:	b29b      	uxth	r3, r3
 800cc8c:	b2db      	uxtb	r3, r3
 800cc8e:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800cc90:	89fb      	ldrh	r3, [r7, #14]
}
 800cc92:	4618      	mov	r0, r3
 800cc94:	3714      	adds	r7, #20
 800cc96:	46bd      	mov	sp, r7
 800cc98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc9c:	4770      	bx	lr
 800cc9e:	bf00      	nop
 800cca0:	0800e3cc 	.word	0x0800e3cc

0800cca4 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800cca4:	b480      	push	{r7}
 800cca6:	b087      	sub	sp, #28
 800cca8:	af00      	add	r7, sp, #0
 800ccaa:	4603      	mov	r3, r0
 800ccac:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800ccae:	88fb      	ldrh	r3, [r7, #6]
 800ccb0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ccb4:	d201      	bcs.n	800ccba <ff_wtoupper+0x16>
 800ccb6:	4b3e      	ldr	r3, [pc, #248]	; (800cdb0 <ff_wtoupper+0x10c>)
 800ccb8:	e000      	b.n	800ccbc <ff_wtoupper+0x18>
 800ccba:	4b3e      	ldr	r3, [pc, #248]	; (800cdb4 <ff_wtoupper+0x110>)
 800ccbc:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800ccbe:	697b      	ldr	r3, [r7, #20]
 800ccc0:	1c9a      	adds	r2, r3, #2
 800ccc2:	617a      	str	r2, [r7, #20]
 800ccc4:	881b      	ldrh	r3, [r3, #0]
 800ccc6:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800ccc8:	8a7b      	ldrh	r3, [r7, #18]
 800ccca:	2b00      	cmp	r3, #0
 800cccc:	d068      	beq.n	800cda0 <ff_wtoupper+0xfc>
 800ccce:	88fa      	ldrh	r2, [r7, #6]
 800ccd0:	8a7b      	ldrh	r3, [r7, #18]
 800ccd2:	429a      	cmp	r2, r3
 800ccd4:	d364      	bcc.n	800cda0 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800ccd6:	697b      	ldr	r3, [r7, #20]
 800ccd8:	1c9a      	adds	r2, r3, #2
 800ccda:	617a      	str	r2, [r7, #20]
 800ccdc:	881b      	ldrh	r3, [r3, #0]
 800ccde:	823b      	strh	r3, [r7, #16]
 800cce0:	8a3b      	ldrh	r3, [r7, #16]
 800cce2:	0a1b      	lsrs	r3, r3, #8
 800cce4:	81fb      	strh	r3, [r7, #14]
 800cce6:	8a3b      	ldrh	r3, [r7, #16]
 800cce8:	b2db      	uxtb	r3, r3
 800ccea:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800ccec:	88fa      	ldrh	r2, [r7, #6]
 800ccee:	8a79      	ldrh	r1, [r7, #18]
 800ccf0:	8a3b      	ldrh	r3, [r7, #16]
 800ccf2:	440b      	add	r3, r1
 800ccf4:	429a      	cmp	r2, r3
 800ccf6:	da49      	bge.n	800cd8c <ff_wtoupper+0xe8>
			switch (cmd) {
 800ccf8:	89fb      	ldrh	r3, [r7, #14]
 800ccfa:	2b08      	cmp	r3, #8
 800ccfc:	d84f      	bhi.n	800cd9e <ff_wtoupper+0xfa>
 800ccfe:	a201      	add	r2, pc, #4	; (adr r2, 800cd04 <ff_wtoupper+0x60>)
 800cd00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd04:	0800cd29 	.word	0x0800cd29
 800cd08:	0800cd3b 	.word	0x0800cd3b
 800cd0c:	0800cd51 	.word	0x0800cd51
 800cd10:	0800cd59 	.word	0x0800cd59
 800cd14:	0800cd61 	.word	0x0800cd61
 800cd18:	0800cd69 	.word	0x0800cd69
 800cd1c:	0800cd71 	.word	0x0800cd71
 800cd20:	0800cd79 	.word	0x0800cd79
 800cd24:	0800cd81 	.word	0x0800cd81
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800cd28:	88fa      	ldrh	r2, [r7, #6]
 800cd2a:	8a7b      	ldrh	r3, [r7, #18]
 800cd2c:	1ad3      	subs	r3, r2, r3
 800cd2e:	005b      	lsls	r3, r3, #1
 800cd30:	697a      	ldr	r2, [r7, #20]
 800cd32:	4413      	add	r3, r2
 800cd34:	881b      	ldrh	r3, [r3, #0]
 800cd36:	80fb      	strh	r3, [r7, #6]
 800cd38:	e027      	b.n	800cd8a <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800cd3a:	88fa      	ldrh	r2, [r7, #6]
 800cd3c:	8a7b      	ldrh	r3, [r7, #18]
 800cd3e:	1ad3      	subs	r3, r2, r3
 800cd40:	b29b      	uxth	r3, r3
 800cd42:	f003 0301 	and.w	r3, r3, #1
 800cd46:	b29b      	uxth	r3, r3
 800cd48:	88fa      	ldrh	r2, [r7, #6]
 800cd4a:	1ad3      	subs	r3, r2, r3
 800cd4c:	80fb      	strh	r3, [r7, #6]
 800cd4e:	e01c      	b.n	800cd8a <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800cd50:	88fb      	ldrh	r3, [r7, #6]
 800cd52:	3b10      	subs	r3, #16
 800cd54:	80fb      	strh	r3, [r7, #6]
 800cd56:	e018      	b.n	800cd8a <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800cd58:	88fb      	ldrh	r3, [r7, #6]
 800cd5a:	3b20      	subs	r3, #32
 800cd5c:	80fb      	strh	r3, [r7, #6]
 800cd5e:	e014      	b.n	800cd8a <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800cd60:	88fb      	ldrh	r3, [r7, #6]
 800cd62:	3b30      	subs	r3, #48	; 0x30
 800cd64:	80fb      	strh	r3, [r7, #6]
 800cd66:	e010      	b.n	800cd8a <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800cd68:	88fb      	ldrh	r3, [r7, #6]
 800cd6a:	3b1a      	subs	r3, #26
 800cd6c:	80fb      	strh	r3, [r7, #6]
 800cd6e:	e00c      	b.n	800cd8a <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800cd70:	88fb      	ldrh	r3, [r7, #6]
 800cd72:	3308      	adds	r3, #8
 800cd74:	80fb      	strh	r3, [r7, #6]
 800cd76:	e008      	b.n	800cd8a <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800cd78:	88fb      	ldrh	r3, [r7, #6]
 800cd7a:	3b50      	subs	r3, #80	; 0x50
 800cd7c:	80fb      	strh	r3, [r7, #6]
 800cd7e:	e004      	b.n	800cd8a <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800cd80:	88fb      	ldrh	r3, [r7, #6]
 800cd82:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 800cd86:	80fb      	strh	r3, [r7, #6]
 800cd88:	bf00      	nop
			}
			break;
 800cd8a:	e008      	b.n	800cd9e <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800cd8c:	89fb      	ldrh	r3, [r7, #14]
 800cd8e:	2b00      	cmp	r3, #0
 800cd90:	d195      	bne.n	800ccbe <ff_wtoupper+0x1a>
 800cd92:	8a3b      	ldrh	r3, [r7, #16]
 800cd94:	005b      	lsls	r3, r3, #1
 800cd96:	697a      	ldr	r2, [r7, #20]
 800cd98:	4413      	add	r3, r2
 800cd9a:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800cd9c:	e78f      	b.n	800ccbe <ff_wtoupper+0x1a>
			break;
 800cd9e:	bf00      	nop
	}

	return chr;
 800cda0:	88fb      	ldrh	r3, [r7, #6]
}
 800cda2:	4618      	mov	r0, r3
 800cda4:	371c      	adds	r7, #28
 800cda6:	46bd      	mov	sp, r7
 800cda8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdac:	4770      	bx	lr
 800cdae:	bf00      	nop
 800cdb0:	0800e4cc 	.word	0x0800e4cc
 800cdb4:	0800e6c0 	.word	0x0800e6c0

0800cdb8 <__errno>:
 800cdb8:	4b01      	ldr	r3, [pc, #4]	; (800cdc0 <__errno+0x8>)
 800cdba:	6818      	ldr	r0, [r3, #0]
 800cdbc:	4770      	bx	lr
 800cdbe:	bf00      	nop
 800cdc0:	2000000c 	.word	0x2000000c

0800cdc4 <__libc_init_array>:
 800cdc4:	b570      	push	{r4, r5, r6, lr}
 800cdc6:	4d0d      	ldr	r5, [pc, #52]	; (800cdfc <__libc_init_array+0x38>)
 800cdc8:	4c0d      	ldr	r4, [pc, #52]	; (800ce00 <__libc_init_array+0x3c>)
 800cdca:	1b64      	subs	r4, r4, r5
 800cdcc:	10a4      	asrs	r4, r4, #2
 800cdce:	2600      	movs	r6, #0
 800cdd0:	42a6      	cmp	r6, r4
 800cdd2:	d109      	bne.n	800cde8 <__libc_init_array+0x24>
 800cdd4:	4d0b      	ldr	r5, [pc, #44]	; (800ce04 <__libc_init_array+0x40>)
 800cdd6:	4c0c      	ldr	r4, [pc, #48]	; (800ce08 <__libc_init_array+0x44>)
 800cdd8:	f001 f98a 	bl	800e0f0 <_init>
 800cddc:	1b64      	subs	r4, r4, r5
 800cdde:	10a4      	asrs	r4, r4, #2
 800cde0:	2600      	movs	r6, #0
 800cde2:	42a6      	cmp	r6, r4
 800cde4:	d105      	bne.n	800cdf2 <__libc_init_array+0x2e>
 800cde6:	bd70      	pop	{r4, r5, r6, pc}
 800cde8:	f855 3b04 	ldr.w	r3, [r5], #4
 800cdec:	4798      	blx	r3
 800cdee:	3601      	adds	r6, #1
 800cdf0:	e7ee      	b.n	800cdd0 <__libc_init_array+0xc>
 800cdf2:	f855 3b04 	ldr.w	r3, [r5], #4
 800cdf6:	4798      	blx	r3
 800cdf8:	3601      	adds	r6, #1
 800cdfa:	e7f2      	b.n	800cde2 <__libc_init_array+0x1e>
 800cdfc:	0800e81c 	.word	0x0800e81c
 800ce00:	0800e81c 	.word	0x0800e81c
 800ce04:	0800e81c 	.word	0x0800e81c
 800ce08:	0800e820 	.word	0x0800e820

0800ce0c <memset>:
 800ce0c:	4402      	add	r2, r0
 800ce0e:	4603      	mov	r3, r0
 800ce10:	4293      	cmp	r3, r2
 800ce12:	d100      	bne.n	800ce16 <memset+0xa>
 800ce14:	4770      	bx	lr
 800ce16:	f803 1b01 	strb.w	r1, [r3], #1
 800ce1a:	e7f9      	b.n	800ce10 <memset+0x4>

0800ce1c <iprintf>:
 800ce1c:	b40f      	push	{r0, r1, r2, r3}
 800ce1e:	4b0a      	ldr	r3, [pc, #40]	; (800ce48 <iprintf+0x2c>)
 800ce20:	b513      	push	{r0, r1, r4, lr}
 800ce22:	681c      	ldr	r4, [r3, #0]
 800ce24:	b124      	cbz	r4, 800ce30 <iprintf+0x14>
 800ce26:	69a3      	ldr	r3, [r4, #24]
 800ce28:	b913      	cbnz	r3, 800ce30 <iprintf+0x14>
 800ce2a:	4620      	mov	r0, r4
 800ce2c:	f000 f886 	bl	800cf3c <__sinit>
 800ce30:	ab05      	add	r3, sp, #20
 800ce32:	9a04      	ldr	r2, [sp, #16]
 800ce34:	68a1      	ldr	r1, [r4, #8]
 800ce36:	9301      	str	r3, [sp, #4]
 800ce38:	4620      	mov	r0, r4
 800ce3a:	f000 fb39 	bl	800d4b0 <_vfiprintf_r>
 800ce3e:	b002      	add	sp, #8
 800ce40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ce44:	b004      	add	sp, #16
 800ce46:	4770      	bx	lr
 800ce48:	2000000c 	.word	0x2000000c

0800ce4c <siprintf>:
 800ce4c:	b40e      	push	{r1, r2, r3}
 800ce4e:	b500      	push	{lr}
 800ce50:	b09c      	sub	sp, #112	; 0x70
 800ce52:	ab1d      	add	r3, sp, #116	; 0x74
 800ce54:	9002      	str	r0, [sp, #8]
 800ce56:	9006      	str	r0, [sp, #24]
 800ce58:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ce5c:	4809      	ldr	r0, [pc, #36]	; (800ce84 <siprintf+0x38>)
 800ce5e:	9107      	str	r1, [sp, #28]
 800ce60:	9104      	str	r1, [sp, #16]
 800ce62:	4909      	ldr	r1, [pc, #36]	; (800ce88 <siprintf+0x3c>)
 800ce64:	f853 2b04 	ldr.w	r2, [r3], #4
 800ce68:	9105      	str	r1, [sp, #20]
 800ce6a:	6800      	ldr	r0, [r0, #0]
 800ce6c:	9301      	str	r3, [sp, #4]
 800ce6e:	a902      	add	r1, sp, #8
 800ce70:	f000 f9f4 	bl	800d25c <_svfiprintf_r>
 800ce74:	9b02      	ldr	r3, [sp, #8]
 800ce76:	2200      	movs	r2, #0
 800ce78:	701a      	strb	r2, [r3, #0]
 800ce7a:	b01c      	add	sp, #112	; 0x70
 800ce7c:	f85d eb04 	ldr.w	lr, [sp], #4
 800ce80:	b003      	add	sp, #12
 800ce82:	4770      	bx	lr
 800ce84:	2000000c 	.word	0x2000000c
 800ce88:	ffff0208 	.word	0xffff0208

0800ce8c <std>:
 800ce8c:	2300      	movs	r3, #0
 800ce8e:	b510      	push	{r4, lr}
 800ce90:	4604      	mov	r4, r0
 800ce92:	e9c0 3300 	strd	r3, r3, [r0]
 800ce96:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ce9a:	6083      	str	r3, [r0, #8]
 800ce9c:	8181      	strh	r1, [r0, #12]
 800ce9e:	6643      	str	r3, [r0, #100]	; 0x64
 800cea0:	81c2      	strh	r2, [r0, #14]
 800cea2:	6183      	str	r3, [r0, #24]
 800cea4:	4619      	mov	r1, r3
 800cea6:	2208      	movs	r2, #8
 800cea8:	305c      	adds	r0, #92	; 0x5c
 800ceaa:	f7ff ffaf 	bl	800ce0c <memset>
 800ceae:	4b05      	ldr	r3, [pc, #20]	; (800cec4 <std+0x38>)
 800ceb0:	6263      	str	r3, [r4, #36]	; 0x24
 800ceb2:	4b05      	ldr	r3, [pc, #20]	; (800cec8 <std+0x3c>)
 800ceb4:	62a3      	str	r3, [r4, #40]	; 0x28
 800ceb6:	4b05      	ldr	r3, [pc, #20]	; (800cecc <std+0x40>)
 800ceb8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ceba:	4b05      	ldr	r3, [pc, #20]	; (800ced0 <std+0x44>)
 800cebc:	6224      	str	r4, [r4, #32]
 800cebe:	6323      	str	r3, [r4, #48]	; 0x30
 800cec0:	bd10      	pop	{r4, pc}
 800cec2:	bf00      	nop
 800cec4:	0800da59 	.word	0x0800da59
 800cec8:	0800da7b 	.word	0x0800da7b
 800cecc:	0800dab3 	.word	0x0800dab3
 800ced0:	0800dad7 	.word	0x0800dad7

0800ced4 <_cleanup_r>:
 800ced4:	4901      	ldr	r1, [pc, #4]	; (800cedc <_cleanup_r+0x8>)
 800ced6:	f000 b8af 	b.w	800d038 <_fwalk_reent>
 800ceda:	bf00      	nop
 800cedc:	0800ddb1 	.word	0x0800ddb1

0800cee0 <__sfmoreglue>:
 800cee0:	b570      	push	{r4, r5, r6, lr}
 800cee2:	2268      	movs	r2, #104	; 0x68
 800cee4:	1e4d      	subs	r5, r1, #1
 800cee6:	4355      	muls	r5, r2
 800cee8:	460e      	mov	r6, r1
 800ceea:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ceee:	f000 f8e5 	bl	800d0bc <_malloc_r>
 800cef2:	4604      	mov	r4, r0
 800cef4:	b140      	cbz	r0, 800cf08 <__sfmoreglue+0x28>
 800cef6:	2100      	movs	r1, #0
 800cef8:	e9c0 1600 	strd	r1, r6, [r0]
 800cefc:	300c      	adds	r0, #12
 800cefe:	60a0      	str	r0, [r4, #8]
 800cf00:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800cf04:	f7ff ff82 	bl	800ce0c <memset>
 800cf08:	4620      	mov	r0, r4
 800cf0a:	bd70      	pop	{r4, r5, r6, pc}

0800cf0c <__sfp_lock_acquire>:
 800cf0c:	4801      	ldr	r0, [pc, #4]	; (800cf14 <__sfp_lock_acquire+0x8>)
 800cf0e:	f000 b8b3 	b.w	800d078 <__retarget_lock_acquire_recursive>
 800cf12:	bf00      	nop
 800cf14:	20001739 	.word	0x20001739

0800cf18 <__sfp_lock_release>:
 800cf18:	4801      	ldr	r0, [pc, #4]	; (800cf20 <__sfp_lock_release+0x8>)
 800cf1a:	f000 b8ae 	b.w	800d07a <__retarget_lock_release_recursive>
 800cf1e:	bf00      	nop
 800cf20:	20001739 	.word	0x20001739

0800cf24 <__sinit_lock_acquire>:
 800cf24:	4801      	ldr	r0, [pc, #4]	; (800cf2c <__sinit_lock_acquire+0x8>)
 800cf26:	f000 b8a7 	b.w	800d078 <__retarget_lock_acquire_recursive>
 800cf2a:	bf00      	nop
 800cf2c:	2000173a 	.word	0x2000173a

0800cf30 <__sinit_lock_release>:
 800cf30:	4801      	ldr	r0, [pc, #4]	; (800cf38 <__sinit_lock_release+0x8>)
 800cf32:	f000 b8a2 	b.w	800d07a <__retarget_lock_release_recursive>
 800cf36:	bf00      	nop
 800cf38:	2000173a 	.word	0x2000173a

0800cf3c <__sinit>:
 800cf3c:	b510      	push	{r4, lr}
 800cf3e:	4604      	mov	r4, r0
 800cf40:	f7ff fff0 	bl	800cf24 <__sinit_lock_acquire>
 800cf44:	69a3      	ldr	r3, [r4, #24]
 800cf46:	b11b      	cbz	r3, 800cf50 <__sinit+0x14>
 800cf48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cf4c:	f7ff bff0 	b.w	800cf30 <__sinit_lock_release>
 800cf50:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800cf54:	6523      	str	r3, [r4, #80]	; 0x50
 800cf56:	4b13      	ldr	r3, [pc, #76]	; (800cfa4 <__sinit+0x68>)
 800cf58:	4a13      	ldr	r2, [pc, #76]	; (800cfa8 <__sinit+0x6c>)
 800cf5a:	681b      	ldr	r3, [r3, #0]
 800cf5c:	62a2      	str	r2, [r4, #40]	; 0x28
 800cf5e:	42a3      	cmp	r3, r4
 800cf60:	bf04      	itt	eq
 800cf62:	2301      	moveq	r3, #1
 800cf64:	61a3      	streq	r3, [r4, #24]
 800cf66:	4620      	mov	r0, r4
 800cf68:	f000 f820 	bl	800cfac <__sfp>
 800cf6c:	6060      	str	r0, [r4, #4]
 800cf6e:	4620      	mov	r0, r4
 800cf70:	f000 f81c 	bl	800cfac <__sfp>
 800cf74:	60a0      	str	r0, [r4, #8]
 800cf76:	4620      	mov	r0, r4
 800cf78:	f000 f818 	bl	800cfac <__sfp>
 800cf7c:	2200      	movs	r2, #0
 800cf7e:	60e0      	str	r0, [r4, #12]
 800cf80:	2104      	movs	r1, #4
 800cf82:	6860      	ldr	r0, [r4, #4]
 800cf84:	f7ff ff82 	bl	800ce8c <std>
 800cf88:	68a0      	ldr	r0, [r4, #8]
 800cf8a:	2201      	movs	r2, #1
 800cf8c:	2109      	movs	r1, #9
 800cf8e:	f7ff ff7d 	bl	800ce8c <std>
 800cf92:	68e0      	ldr	r0, [r4, #12]
 800cf94:	2202      	movs	r2, #2
 800cf96:	2112      	movs	r1, #18
 800cf98:	f7ff ff78 	bl	800ce8c <std>
 800cf9c:	2301      	movs	r3, #1
 800cf9e:	61a3      	str	r3, [r4, #24]
 800cfa0:	e7d2      	b.n	800cf48 <__sinit+0xc>
 800cfa2:	bf00      	nop
 800cfa4:	0800e77c 	.word	0x0800e77c
 800cfa8:	0800ced5 	.word	0x0800ced5

0800cfac <__sfp>:
 800cfac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cfae:	4607      	mov	r7, r0
 800cfb0:	f7ff ffac 	bl	800cf0c <__sfp_lock_acquire>
 800cfb4:	4b1e      	ldr	r3, [pc, #120]	; (800d030 <__sfp+0x84>)
 800cfb6:	681e      	ldr	r6, [r3, #0]
 800cfb8:	69b3      	ldr	r3, [r6, #24]
 800cfba:	b913      	cbnz	r3, 800cfc2 <__sfp+0x16>
 800cfbc:	4630      	mov	r0, r6
 800cfbe:	f7ff ffbd 	bl	800cf3c <__sinit>
 800cfc2:	3648      	adds	r6, #72	; 0x48
 800cfc4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800cfc8:	3b01      	subs	r3, #1
 800cfca:	d503      	bpl.n	800cfd4 <__sfp+0x28>
 800cfcc:	6833      	ldr	r3, [r6, #0]
 800cfce:	b30b      	cbz	r3, 800d014 <__sfp+0x68>
 800cfd0:	6836      	ldr	r6, [r6, #0]
 800cfd2:	e7f7      	b.n	800cfc4 <__sfp+0x18>
 800cfd4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800cfd8:	b9d5      	cbnz	r5, 800d010 <__sfp+0x64>
 800cfda:	4b16      	ldr	r3, [pc, #88]	; (800d034 <__sfp+0x88>)
 800cfdc:	60e3      	str	r3, [r4, #12]
 800cfde:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800cfe2:	6665      	str	r5, [r4, #100]	; 0x64
 800cfe4:	f000 f847 	bl	800d076 <__retarget_lock_init_recursive>
 800cfe8:	f7ff ff96 	bl	800cf18 <__sfp_lock_release>
 800cfec:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800cff0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800cff4:	6025      	str	r5, [r4, #0]
 800cff6:	61a5      	str	r5, [r4, #24]
 800cff8:	2208      	movs	r2, #8
 800cffa:	4629      	mov	r1, r5
 800cffc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800d000:	f7ff ff04 	bl	800ce0c <memset>
 800d004:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800d008:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800d00c:	4620      	mov	r0, r4
 800d00e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d010:	3468      	adds	r4, #104	; 0x68
 800d012:	e7d9      	b.n	800cfc8 <__sfp+0x1c>
 800d014:	2104      	movs	r1, #4
 800d016:	4638      	mov	r0, r7
 800d018:	f7ff ff62 	bl	800cee0 <__sfmoreglue>
 800d01c:	4604      	mov	r4, r0
 800d01e:	6030      	str	r0, [r6, #0]
 800d020:	2800      	cmp	r0, #0
 800d022:	d1d5      	bne.n	800cfd0 <__sfp+0x24>
 800d024:	f7ff ff78 	bl	800cf18 <__sfp_lock_release>
 800d028:	230c      	movs	r3, #12
 800d02a:	603b      	str	r3, [r7, #0]
 800d02c:	e7ee      	b.n	800d00c <__sfp+0x60>
 800d02e:	bf00      	nop
 800d030:	0800e77c 	.word	0x0800e77c
 800d034:	ffff0001 	.word	0xffff0001

0800d038 <_fwalk_reent>:
 800d038:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d03c:	4606      	mov	r6, r0
 800d03e:	4688      	mov	r8, r1
 800d040:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800d044:	2700      	movs	r7, #0
 800d046:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d04a:	f1b9 0901 	subs.w	r9, r9, #1
 800d04e:	d505      	bpl.n	800d05c <_fwalk_reent+0x24>
 800d050:	6824      	ldr	r4, [r4, #0]
 800d052:	2c00      	cmp	r4, #0
 800d054:	d1f7      	bne.n	800d046 <_fwalk_reent+0xe>
 800d056:	4638      	mov	r0, r7
 800d058:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d05c:	89ab      	ldrh	r3, [r5, #12]
 800d05e:	2b01      	cmp	r3, #1
 800d060:	d907      	bls.n	800d072 <_fwalk_reent+0x3a>
 800d062:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d066:	3301      	adds	r3, #1
 800d068:	d003      	beq.n	800d072 <_fwalk_reent+0x3a>
 800d06a:	4629      	mov	r1, r5
 800d06c:	4630      	mov	r0, r6
 800d06e:	47c0      	blx	r8
 800d070:	4307      	orrs	r7, r0
 800d072:	3568      	adds	r5, #104	; 0x68
 800d074:	e7e9      	b.n	800d04a <_fwalk_reent+0x12>

0800d076 <__retarget_lock_init_recursive>:
 800d076:	4770      	bx	lr

0800d078 <__retarget_lock_acquire_recursive>:
 800d078:	4770      	bx	lr

0800d07a <__retarget_lock_release_recursive>:
 800d07a:	4770      	bx	lr

0800d07c <sbrk_aligned>:
 800d07c:	b570      	push	{r4, r5, r6, lr}
 800d07e:	4e0e      	ldr	r6, [pc, #56]	; (800d0b8 <sbrk_aligned+0x3c>)
 800d080:	460c      	mov	r4, r1
 800d082:	6831      	ldr	r1, [r6, #0]
 800d084:	4605      	mov	r5, r0
 800d086:	b911      	cbnz	r1, 800d08e <sbrk_aligned+0x12>
 800d088:	f000 fcd6 	bl	800da38 <_sbrk_r>
 800d08c:	6030      	str	r0, [r6, #0]
 800d08e:	4621      	mov	r1, r4
 800d090:	4628      	mov	r0, r5
 800d092:	f000 fcd1 	bl	800da38 <_sbrk_r>
 800d096:	1c43      	adds	r3, r0, #1
 800d098:	d00a      	beq.n	800d0b0 <sbrk_aligned+0x34>
 800d09a:	1cc4      	adds	r4, r0, #3
 800d09c:	f024 0403 	bic.w	r4, r4, #3
 800d0a0:	42a0      	cmp	r0, r4
 800d0a2:	d007      	beq.n	800d0b4 <sbrk_aligned+0x38>
 800d0a4:	1a21      	subs	r1, r4, r0
 800d0a6:	4628      	mov	r0, r5
 800d0a8:	f000 fcc6 	bl	800da38 <_sbrk_r>
 800d0ac:	3001      	adds	r0, #1
 800d0ae:	d101      	bne.n	800d0b4 <sbrk_aligned+0x38>
 800d0b0:	f04f 34ff 	mov.w	r4, #4294967295
 800d0b4:	4620      	mov	r0, r4
 800d0b6:	bd70      	pop	{r4, r5, r6, pc}
 800d0b8:	20001740 	.word	0x20001740

0800d0bc <_malloc_r>:
 800d0bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d0c0:	1ccd      	adds	r5, r1, #3
 800d0c2:	f025 0503 	bic.w	r5, r5, #3
 800d0c6:	3508      	adds	r5, #8
 800d0c8:	2d0c      	cmp	r5, #12
 800d0ca:	bf38      	it	cc
 800d0cc:	250c      	movcc	r5, #12
 800d0ce:	2d00      	cmp	r5, #0
 800d0d0:	4607      	mov	r7, r0
 800d0d2:	db01      	blt.n	800d0d8 <_malloc_r+0x1c>
 800d0d4:	42a9      	cmp	r1, r5
 800d0d6:	d905      	bls.n	800d0e4 <_malloc_r+0x28>
 800d0d8:	230c      	movs	r3, #12
 800d0da:	603b      	str	r3, [r7, #0]
 800d0dc:	2600      	movs	r6, #0
 800d0de:	4630      	mov	r0, r6
 800d0e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d0e4:	4e2e      	ldr	r6, [pc, #184]	; (800d1a0 <_malloc_r+0xe4>)
 800d0e6:	f000 ff3f 	bl	800df68 <__malloc_lock>
 800d0ea:	6833      	ldr	r3, [r6, #0]
 800d0ec:	461c      	mov	r4, r3
 800d0ee:	bb34      	cbnz	r4, 800d13e <_malloc_r+0x82>
 800d0f0:	4629      	mov	r1, r5
 800d0f2:	4638      	mov	r0, r7
 800d0f4:	f7ff ffc2 	bl	800d07c <sbrk_aligned>
 800d0f8:	1c43      	adds	r3, r0, #1
 800d0fa:	4604      	mov	r4, r0
 800d0fc:	d14d      	bne.n	800d19a <_malloc_r+0xde>
 800d0fe:	6834      	ldr	r4, [r6, #0]
 800d100:	4626      	mov	r6, r4
 800d102:	2e00      	cmp	r6, #0
 800d104:	d140      	bne.n	800d188 <_malloc_r+0xcc>
 800d106:	6823      	ldr	r3, [r4, #0]
 800d108:	4631      	mov	r1, r6
 800d10a:	4638      	mov	r0, r7
 800d10c:	eb04 0803 	add.w	r8, r4, r3
 800d110:	f000 fc92 	bl	800da38 <_sbrk_r>
 800d114:	4580      	cmp	r8, r0
 800d116:	d13a      	bne.n	800d18e <_malloc_r+0xd2>
 800d118:	6821      	ldr	r1, [r4, #0]
 800d11a:	3503      	adds	r5, #3
 800d11c:	1a6d      	subs	r5, r5, r1
 800d11e:	f025 0503 	bic.w	r5, r5, #3
 800d122:	3508      	adds	r5, #8
 800d124:	2d0c      	cmp	r5, #12
 800d126:	bf38      	it	cc
 800d128:	250c      	movcc	r5, #12
 800d12a:	4629      	mov	r1, r5
 800d12c:	4638      	mov	r0, r7
 800d12e:	f7ff ffa5 	bl	800d07c <sbrk_aligned>
 800d132:	3001      	adds	r0, #1
 800d134:	d02b      	beq.n	800d18e <_malloc_r+0xd2>
 800d136:	6823      	ldr	r3, [r4, #0]
 800d138:	442b      	add	r3, r5
 800d13a:	6023      	str	r3, [r4, #0]
 800d13c:	e00e      	b.n	800d15c <_malloc_r+0xa0>
 800d13e:	6822      	ldr	r2, [r4, #0]
 800d140:	1b52      	subs	r2, r2, r5
 800d142:	d41e      	bmi.n	800d182 <_malloc_r+0xc6>
 800d144:	2a0b      	cmp	r2, #11
 800d146:	d916      	bls.n	800d176 <_malloc_r+0xba>
 800d148:	1961      	adds	r1, r4, r5
 800d14a:	42a3      	cmp	r3, r4
 800d14c:	6025      	str	r5, [r4, #0]
 800d14e:	bf18      	it	ne
 800d150:	6059      	strne	r1, [r3, #4]
 800d152:	6863      	ldr	r3, [r4, #4]
 800d154:	bf08      	it	eq
 800d156:	6031      	streq	r1, [r6, #0]
 800d158:	5162      	str	r2, [r4, r5]
 800d15a:	604b      	str	r3, [r1, #4]
 800d15c:	4638      	mov	r0, r7
 800d15e:	f104 060b 	add.w	r6, r4, #11
 800d162:	f000 ff07 	bl	800df74 <__malloc_unlock>
 800d166:	f026 0607 	bic.w	r6, r6, #7
 800d16a:	1d23      	adds	r3, r4, #4
 800d16c:	1af2      	subs	r2, r6, r3
 800d16e:	d0b6      	beq.n	800d0de <_malloc_r+0x22>
 800d170:	1b9b      	subs	r3, r3, r6
 800d172:	50a3      	str	r3, [r4, r2]
 800d174:	e7b3      	b.n	800d0de <_malloc_r+0x22>
 800d176:	6862      	ldr	r2, [r4, #4]
 800d178:	42a3      	cmp	r3, r4
 800d17a:	bf0c      	ite	eq
 800d17c:	6032      	streq	r2, [r6, #0]
 800d17e:	605a      	strne	r2, [r3, #4]
 800d180:	e7ec      	b.n	800d15c <_malloc_r+0xa0>
 800d182:	4623      	mov	r3, r4
 800d184:	6864      	ldr	r4, [r4, #4]
 800d186:	e7b2      	b.n	800d0ee <_malloc_r+0x32>
 800d188:	4634      	mov	r4, r6
 800d18a:	6876      	ldr	r6, [r6, #4]
 800d18c:	e7b9      	b.n	800d102 <_malloc_r+0x46>
 800d18e:	230c      	movs	r3, #12
 800d190:	603b      	str	r3, [r7, #0]
 800d192:	4638      	mov	r0, r7
 800d194:	f000 feee 	bl	800df74 <__malloc_unlock>
 800d198:	e7a1      	b.n	800d0de <_malloc_r+0x22>
 800d19a:	6025      	str	r5, [r4, #0]
 800d19c:	e7de      	b.n	800d15c <_malloc_r+0xa0>
 800d19e:	bf00      	nop
 800d1a0:	2000173c 	.word	0x2000173c

0800d1a4 <__ssputs_r>:
 800d1a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d1a8:	688e      	ldr	r6, [r1, #8]
 800d1aa:	429e      	cmp	r6, r3
 800d1ac:	4682      	mov	sl, r0
 800d1ae:	460c      	mov	r4, r1
 800d1b0:	4690      	mov	r8, r2
 800d1b2:	461f      	mov	r7, r3
 800d1b4:	d838      	bhi.n	800d228 <__ssputs_r+0x84>
 800d1b6:	898a      	ldrh	r2, [r1, #12]
 800d1b8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d1bc:	d032      	beq.n	800d224 <__ssputs_r+0x80>
 800d1be:	6825      	ldr	r5, [r4, #0]
 800d1c0:	6909      	ldr	r1, [r1, #16]
 800d1c2:	eba5 0901 	sub.w	r9, r5, r1
 800d1c6:	6965      	ldr	r5, [r4, #20]
 800d1c8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d1cc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d1d0:	3301      	adds	r3, #1
 800d1d2:	444b      	add	r3, r9
 800d1d4:	106d      	asrs	r5, r5, #1
 800d1d6:	429d      	cmp	r5, r3
 800d1d8:	bf38      	it	cc
 800d1da:	461d      	movcc	r5, r3
 800d1dc:	0553      	lsls	r3, r2, #21
 800d1de:	d531      	bpl.n	800d244 <__ssputs_r+0xa0>
 800d1e0:	4629      	mov	r1, r5
 800d1e2:	f7ff ff6b 	bl	800d0bc <_malloc_r>
 800d1e6:	4606      	mov	r6, r0
 800d1e8:	b950      	cbnz	r0, 800d200 <__ssputs_r+0x5c>
 800d1ea:	230c      	movs	r3, #12
 800d1ec:	f8ca 3000 	str.w	r3, [sl]
 800d1f0:	89a3      	ldrh	r3, [r4, #12]
 800d1f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d1f6:	81a3      	strh	r3, [r4, #12]
 800d1f8:	f04f 30ff 	mov.w	r0, #4294967295
 800d1fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d200:	6921      	ldr	r1, [r4, #16]
 800d202:	464a      	mov	r2, r9
 800d204:	f000 fe88 	bl	800df18 <memcpy>
 800d208:	89a3      	ldrh	r3, [r4, #12]
 800d20a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d20e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d212:	81a3      	strh	r3, [r4, #12]
 800d214:	6126      	str	r6, [r4, #16]
 800d216:	6165      	str	r5, [r4, #20]
 800d218:	444e      	add	r6, r9
 800d21a:	eba5 0509 	sub.w	r5, r5, r9
 800d21e:	6026      	str	r6, [r4, #0]
 800d220:	60a5      	str	r5, [r4, #8]
 800d222:	463e      	mov	r6, r7
 800d224:	42be      	cmp	r6, r7
 800d226:	d900      	bls.n	800d22a <__ssputs_r+0x86>
 800d228:	463e      	mov	r6, r7
 800d22a:	6820      	ldr	r0, [r4, #0]
 800d22c:	4632      	mov	r2, r6
 800d22e:	4641      	mov	r1, r8
 800d230:	f000 fe80 	bl	800df34 <memmove>
 800d234:	68a3      	ldr	r3, [r4, #8]
 800d236:	1b9b      	subs	r3, r3, r6
 800d238:	60a3      	str	r3, [r4, #8]
 800d23a:	6823      	ldr	r3, [r4, #0]
 800d23c:	4433      	add	r3, r6
 800d23e:	6023      	str	r3, [r4, #0]
 800d240:	2000      	movs	r0, #0
 800d242:	e7db      	b.n	800d1fc <__ssputs_r+0x58>
 800d244:	462a      	mov	r2, r5
 800d246:	f000 fee7 	bl	800e018 <_realloc_r>
 800d24a:	4606      	mov	r6, r0
 800d24c:	2800      	cmp	r0, #0
 800d24e:	d1e1      	bne.n	800d214 <__ssputs_r+0x70>
 800d250:	6921      	ldr	r1, [r4, #16]
 800d252:	4650      	mov	r0, sl
 800d254:	f000 fe94 	bl	800df80 <_free_r>
 800d258:	e7c7      	b.n	800d1ea <__ssputs_r+0x46>
	...

0800d25c <_svfiprintf_r>:
 800d25c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d260:	4698      	mov	r8, r3
 800d262:	898b      	ldrh	r3, [r1, #12]
 800d264:	061b      	lsls	r3, r3, #24
 800d266:	b09d      	sub	sp, #116	; 0x74
 800d268:	4607      	mov	r7, r0
 800d26a:	460d      	mov	r5, r1
 800d26c:	4614      	mov	r4, r2
 800d26e:	d50e      	bpl.n	800d28e <_svfiprintf_r+0x32>
 800d270:	690b      	ldr	r3, [r1, #16]
 800d272:	b963      	cbnz	r3, 800d28e <_svfiprintf_r+0x32>
 800d274:	2140      	movs	r1, #64	; 0x40
 800d276:	f7ff ff21 	bl	800d0bc <_malloc_r>
 800d27a:	6028      	str	r0, [r5, #0]
 800d27c:	6128      	str	r0, [r5, #16]
 800d27e:	b920      	cbnz	r0, 800d28a <_svfiprintf_r+0x2e>
 800d280:	230c      	movs	r3, #12
 800d282:	603b      	str	r3, [r7, #0]
 800d284:	f04f 30ff 	mov.w	r0, #4294967295
 800d288:	e0d1      	b.n	800d42e <_svfiprintf_r+0x1d2>
 800d28a:	2340      	movs	r3, #64	; 0x40
 800d28c:	616b      	str	r3, [r5, #20]
 800d28e:	2300      	movs	r3, #0
 800d290:	9309      	str	r3, [sp, #36]	; 0x24
 800d292:	2320      	movs	r3, #32
 800d294:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d298:	f8cd 800c 	str.w	r8, [sp, #12]
 800d29c:	2330      	movs	r3, #48	; 0x30
 800d29e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800d448 <_svfiprintf_r+0x1ec>
 800d2a2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d2a6:	f04f 0901 	mov.w	r9, #1
 800d2aa:	4623      	mov	r3, r4
 800d2ac:	469a      	mov	sl, r3
 800d2ae:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d2b2:	b10a      	cbz	r2, 800d2b8 <_svfiprintf_r+0x5c>
 800d2b4:	2a25      	cmp	r2, #37	; 0x25
 800d2b6:	d1f9      	bne.n	800d2ac <_svfiprintf_r+0x50>
 800d2b8:	ebba 0b04 	subs.w	fp, sl, r4
 800d2bc:	d00b      	beq.n	800d2d6 <_svfiprintf_r+0x7a>
 800d2be:	465b      	mov	r3, fp
 800d2c0:	4622      	mov	r2, r4
 800d2c2:	4629      	mov	r1, r5
 800d2c4:	4638      	mov	r0, r7
 800d2c6:	f7ff ff6d 	bl	800d1a4 <__ssputs_r>
 800d2ca:	3001      	adds	r0, #1
 800d2cc:	f000 80aa 	beq.w	800d424 <_svfiprintf_r+0x1c8>
 800d2d0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d2d2:	445a      	add	r2, fp
 800d2d4:	9209      	str	r2, [sp, #36]	; 0x24
 800d2d6:	f89a 3000 	ldrb.w	r3, [sl]
 800d2da:	2b00      	cmp	r3, #0
 800d2dc:	f000 80a2 	beq.w	800d424 <_svfiprintf_r+0x1c8>
 800d2e0:	2300      	movs	r3, #0
 800d2e2:	f04f 32ff 	mov.w	r2, #4294967295
 800d2e6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d2ea:	f10a 0a01 	add.w	sl, sl, #1
 800d2ee:	9304      	str	r3, [sp, #16]
 800d2f0:	9307      	str	r3, [sp, #28]
 800d2f2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d2f6:	931a      	str	r3, [sp, #104]	; 0x68
 800d2f8:	4654      	mov	r4, sl
 800d2fa:	2205      	movs	r2, #5
 800d2fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d300:	4851      	ldr	r0, [pc, #324]	; (800d448 <_svfiprintf_r+0x1ec>)
 800d302:	f7f2 ff65 	bl	80001d0 <memchr>
 800d306:	9a04      	ldr	r2, [sp, #16]
 800d308:	b9d8      	cbnz	r0, 800d342 <_svfiprintf_r+0xe6>
 800d30a:	06d0      	lsls	r0, r2, #27
 800d30c:	bf44      	itt	mi
 800d30e:	2320      	movmi	r3, #32
 800d310:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d314:	0711      	lsls	r1, r2, #28
 800d316:	bf44      	itt	mi
 800d318:	232b      	movmi	r3, #43	; 0x2b
 800d31a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d31e:	f89a 3000 	ldrb.w	r3, [sl]
 800d322:	2b2a      	cmp	r3, #42	; 0x2a
 800d324:	d015      	beq.n	800d352 <_svfiprintf_r+0xf6>
 800d326:	9a07      	ldr	r2, [sp, #28]
 800d328:	4654      	mov	r4, sl
 800d32a:	2000      	movs	r0, #0
 800d32c:	f04f 0c0a 	mov.w	ip, #10
 800d330:	4621      	mov	r1, r4
 800d332:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d336:	3b30      	subs	r3, #48	; 0x30
 800d338:	2b09      	cmp	r3, #9
 800d33a:	d94e      	bls.n	800d3da <_svfiprintf_r+0x17e>
 800d33c:	b1b0      	cbz	r0, 800d36c <_svfiprintf_r+0x110>
 800d33e:	9207      	str	r2, [sp, #28]
 800d340:	e014      	b.n	800d36c <_svfiprintf_r+0x110>
 800d342:	eba0 0308 	sub.w	r3, r0, r8
 800d346:	fa09 f303 	lsl.w	r3, r9, r3
 800d34a:	4313      	orrs	r3, r2
 800d34c:	9304      	str	r3, [sp, #16]
 800d34e:	46a2      	mov	sl, r4
 800d350:	e7d2      	b.n	800d2f8 <_svfiprintf_r+0x9c>
 800d352:	9b03      	ldr	r3, [sp, #12]
 800d354:	1d19      	adds	r1, r3, #4
 800d356:	681b      	ldr	r3, [r3, #0]
 800d358:	9103      	str	r1, [sp, #12]
 800d35a:	2b00      	cmp	r3, #0
 800d35c:	bfbb      	ittet	lt
 800d35e:	425b      	neglt	r3, r3
 800d360:	f042 0202 	orrlt.w	r2, r2, #2
 800d364:	9307      	strge	r3, [sp, #28]
 800d366:	9307      	strlt	r3, [sp, #28]
 800d368:	bfb8      	it	lt
 800d36a:	9204      	strlt	r2, [sp, #16]
 800d36c:	7823      	ldrb	r3, [r4, #0]
 800d36e:	2b2e      	cmp	r3, #46	; 0x2e
 800d370:	d10c      	bne.n	800d38c <_svfiprintf_r+0x130>
 800d372:	7863      	ldrb	r3, [r4, #1]
 800d374:	2b2a      	cmp	r3, #42	; 0x2a
 800d376:	d135      	bne.n	800d3e4 <_svfiprintf_r+0x188>
 800d378:	9b03      	ldr	r3, [sp, #12]
 800d37a:	1d1a      	adds	r2, r3, #4
 800d37c:	681b      	ldr	r3, [r3, #0]
 800d37e:	9203      	str	r2, [sp, #12]
 800d380:	2b00      	cmp	r3, #0
 800d382:	bfb8      	it	lt
 800d384:	f04f 33ff 	movlt.w	r3, #4294967295
 800d388:	3402      	adds	r4, #2
 800d38a:	9305      	str	r3, [sp, #20]
 800d38c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800d458 <_svfiprintf_r+0x1fc>
 800d390:	7821      	ldrb	r1, [r4, #0]
 800d392:	2203      	movs	r2, #3
 800d394:	4650      	mov	r0, sl
 800d396:	f7f2 ff1b 	bl	80001d0 <memchr>
 800d39a:	b140      	cbz	r0, 800d3ae <_svfiprintf_r+0x152>
 800d39c:	2340      	movs	r3, #64	; 0x40
 800d39e:	eba0 000a 	sub.w	r0, r0, sl
 800d3a2:	fa03 f000 	lsl.w	r0, r3, r0
 800d3a6:	9b04      	ldr	r3, [sp, #16]
 800d3a8:	4303      	orrs	r3, r0
 800d3aa:	3401      	adds	r4, #1
 800d3ac:	9304      	str	r3, [sp, #16]
 800d3ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d3b2:	4826      	ldr	r0, [pc, #152]	; (800d44c <_svfiprintf_r+0x1f0>)
 800d3b4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d3b8:	2206      	movs	r2, #6
 800d3ba:	f7f2 ff09 	bl	80001d0 <memchr>
 800d3be:	2800      	cmp	r0, #0
 800d3c0:	d038      	beq.n	800d434 <_svfiprintf_r+0x1d8>
 800d3c2:	4b23      	ldr	r3, [pc, #140]	; (800d450 <_svfiprintf_r+0x1f4>)
 800d3c4:	bb1b      	cbnz	r3, 800d40e <_svfiprintf_r+0x1b2>
 800d3c6:	9b03      	ldr	r3, [sp, #12]
 800d3c8:	3307      	adds	r3, #7
 800d3ca:	f023 0307 	bic.w	r3, r3, #7
 800d3ce:	3308      	adds	r3, #8
 800d3d0:	9303      	str	r3, [sp, #12]
 800d3d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d3d4:	4433      	add	r3, r6
 800d3d6:	9309      	str	r3, [sp, #36]	; 0x24
 800d3d8:	e767      	b.n	800d2aa <_svfiprintf_r+0x4e>
 800d3da:	fb0c 3202 	mla	r2, ip, r2, r3
 800d3de:	460c      	mov	r4, r1
 800d3e0:	2001      	movs	r0, #1
 800d3e2:	e7a5      	b.n	800d330 <_svfiprintf_r+0xd4>
 800d3e4:	2300      	movs	r3, #0
 800d3e6:	3401      	adds	r4, #1
 800d3e8:	9305      	str	r3, [sp, #20]
 800d3ea:	4619      	mov	r1, r3
 800d3ec:	f04f 0c0a 	mov.w	ip, #10
 800d3f0:	4620      	mov	r0, r4
 800d3f2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d3f6:	3a30      	subs	r2, #48	; 0x30
 800d3f8:	2a09      	cmp	r2, #9
 800d3fa:	d903      	bls.n	800d404 <_svfiprintf_r+0x1a8>
 800d3fc:	2b00      	cmp	r3, #0
 800d3fe:	d0c5      	beq.n	800d38c <_svfiprintf_r+0x130>
 800d400:	9105      	str	r1, [sp, #20]
 800d402:	e7c3      	b.n	800d38c <_svfiprintf_r+0x130>
 800d404:	fb0c 2101 	mla	r1, ip, r1, r2
 800d408:	4604      	mov	r4, r0
 800d40a:	2301      	movs	r3, #1
 800d40c:	e7f0      	b.n	800d3f0 <_svfiprintf_r+0x194>
 800d40e:	ab03      	add	r3, sp, #12
 800d410:	9300      	str	r3, [sp, #0]
 800d412:	462a      	mov	r2, r5
 800d414:	4b0f      	ldr	r3, [pc, #60]	; (800d454 <_svfiprintf_r+0x1f8>)
 800d416:	a904      	add	r1, sp, #16
 800d418:	4638      	mov	r0, r7
 800d41a:	f3af 8000 	nop.w
 800d41e:	1c42      	adds	r2, r0, #1
 800d420:	4606      	mov	r6, r0
 800d422:	d1d6      	bne.n	800d3d2 <_svfiprintf_r+0x176>
 800d424:	89ab      	ldrh	r3, [r5, #12]
 800d426:	065b      	lsls	r3, r3, #25
 800d428:	f53f af2c 	bmi.w	800d284 <_svfiprintf_r+0x28>
 800d42c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d42e:	b01d      	add	sp, #116	; 0x74
 800d430:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d434:	ab03      	add	r3, sp, #12
 800d436:	9300      	str	r3, [sp, #0]
 800d438:	462a      	mov	r2, r5
 800d43a:	4b06      	ldr	r3, [pc, #24]	; (800d454 <_svfiprintf_r+0x1f8>)
 800d43c:	a904      	add	r1, sp, #16
 800d43e:	4638      	mov	r0, r7
 800d440:	f000 f9d4 	bl	800d7ec <_printf_i>
 800d444:	e7eb      	b.n	800d41e <_svfiprintf_r+0x1c2>
 800d446:	bf00      	nop
 800d448:	0800e7e0 	.word	0x0800e7e0
 800d44c:	0800e7ea 	.word	0x0800e7ea
 800d450:	00000000 	.word	0x00000000
 800d454:	0800d1a5 	.word	0x0800d1a5
 800d458:	0800e7e6 	.word	0x0800e7e6

0800d45c <__sfputc_r>:
 800d45c:	6893      	ldr	r3, [r2, #8]
 800d45e:	3b01      	subs	r3, #1
 800d460:	2b00      	cmp	r3, #0
 800d462:	b410      	push	{r4}
 800d464:	6093      	str	r3, [r2, #8]
 800d466:	da08      	bge.n	800d47a <__sfputc_r+0x1e>
 800d468:	6994      	ldr	r4, [r2, #24]
 800d46a:	42a3      	cmp	r3, r4
 800d46c:	db01      	blt.n	800d472 <__sfputc_r+0x16>
 800d46e:	290a      	cmp	r1, #10
 800d470:	d103      	bne.n	800d47a <__sfputc_r+0x1e>
 800d472:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d476:	f000 bb33 	b.w	800dae0 <__swbuf_r>
 800d47a:	6813      	ldr	r3, [r2, #0]
 800d47c:	1c58      	adds	r0, r3, #1
 800d47e:	6010      	str	r0, [r2, #0]
 800d480:	7019      	strb	r1, [r3, #0]
 800d482:	4608      	mov	r0, r1
 800d484:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d488:	4770      	bx	lr

0800d48a <__sfputs_r>:
 800d48a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d48c:	4606      	mov	r6, r0
 800d48e:	460f      	mov	r7, r1
 800d490:	4614      	mov	r4, r2
 800d492:	18d5      	adds	r5, r2, r3
 800d494:	42ac      	cmp	r4, r5
 800d496:	d101      	bne.n	800d49c <__sfputs_r+0x12>
 800d498:	2000      	movs	r0, #0
 800d49a:	e007      	b.n	800d4ac <__sfputs_r+0x22>
 800d49c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d4a0:	463a      	mov	r2, r7
 800d4a2:	4630      	mov	r0, r6
 800d4a4:	f7ff ffda 	bl	800d45c <__sfputc_r>
 800d4a8:	1c43      	adds	r3, r0, #1
 800d4aa:	d1f3      	bne.n	800d494 <__sfputs_r+0xa>
 800d4ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d4b0 <_vfiprintf_r>:
 800d4b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d4b4:	460d      	mov	r5, r1
 800d4b6:	b09d      	sub	sp, #116	; 0x74
 800d4b8:	4614      	mov	r4, r2
 800d4ba:	4698      	mov	r8, r3
 800d4bc:	4606      	mov	r6, r0
 800d4be:	b118      	cbz	r0, 800d4c8 <_vfiprintf_r+0x18>
 800d4c0:	6983      	ldr	r3, [r0, #24]
 800d4c2:	b90b      	cbnz	r3, 800d4c8 <_vfiprintf_r+0x18>
 800d4c4:	f7ff fd3a 	bl	800cf3c <__sinit>
 800d4c8:	4b89      	ldr	r3, [pc, #548]	; (800d6f0 <_vfiprintf_r+0x240>)
 800d4ca:	429d      	cmp	r5, r3
 800d4cc:	d11b      	bne.n	800d506 <_vfiprintf_r+0x56>
 800d4ce:	6875      	ldr	r5, [r6, #4]
 800d4d0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d4d2:	07d9      	lsls	r1, r3, #31
 800d4d4:	d405      	bmi.n	800d4e2 <_vfiprintf_r+0x32>
 800d4d6:	89ab      	ldrh	r3, [r5, #12]
 800d4d8:	059a      	lsls	r2, r3, #22
 800d4da:	d402      	bmi.n	800d4e2 <_vfiprintf_r+0x32>
 800d4dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d4de:	f7ff fdcb 	bl	800d078 <__retarget_lock_acquire_recursive>
 800d4e2:	89ab      	ldrh	r3, [r5, #12]
 800d4e4:	071b      	lsls	r3, r3, #28
 800d4e6:	d501      	bpl.n	800d4ec <_vfiprintf_r+0x3c>
 800d4e8:	692b      	ldr	r3, [r5, #16]
 800d4ea:	b9eb      	cbnz	r3, 800d528 <_vfiprintf_r+0x78>
 800d4ec:	4629      	mov	r1, r5
 800d4ee:	4630      	mov	r0, r6
 800d4f0:	f000 fb5a 	bl	800dba8 <__swsetup_r>
 800d4f4:	b1c0      	cbz	r0, 800d528 <_vfiprintf_r+0x78>
 800d4f6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d4f8:	07dc      	lsls	r4, r3, #31
 800d4fa:	d50e      	bpl.n	800d51a <_vfiprintf_r+0x6a>
 800d4fc:	f04f 30ff 	mov.w	r0, #4294967295
 800d500:	b01d      	add	sp, #116	; 0x74
 800d502:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d506:	4b7b      	ldr	r3, [pc, #492]	; (800d6f4 <_vfiprintf_r+0x244>)
 800d508:	429d      	cmp	r5, r3
 800d50a:	d101      	bne.n	800d510 <_vfiprintf_r+0x60>
 800d50c:	68b5      	ldr	r5, [r6, #8]
 800d50e:	e7df      	b.n	800d4d0 <_vfiprintf_r+0x20>
 800d510:	4b79      	ldr	r3, [pc, #484]	; (800d6f8 <_vfiprintf_r+0x248>)
 800d512:	429d      	cmp	r5, r3
 800d514:	bf08      	it	eq
 800d516:	68f5      	ldreq	r5, [r6, #12]
 800d518:	e7da      	b.n	800d4d0 <_vfiprintf_r+0x20>
 800d51a:	89ab      	ldrh	r3, [r5, #12]
 800d51c:	0598      	lsls	r0, r3, #22
 800d51e:	d4ed      	bmi.n	800d4fc <_vfiprintf_r+0x4c>
 800d520:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d522:	f7ff fdaa 	bl	800d07a <__retarget_lock_release_recursive>
 800d526:	e7e9      	b.n	800d4fc <_vfiprintf_r+0x4c>
 800d528:	2300      	movs	r3, #0
 800d52a:	9309      	str	r3, [sp, #36]	; 0x24
 800d52c:	2320      	movs	r3, #32
 800d52e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d532:	f8cd 800c 	str.w	r8, [sp, #12]
 800d536:	2330      	movs	r3, #48	; 0x30
 800d538:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800d6fc <_vfiprintf_r+0x24c>
 800d53c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d540:	f04f 0901 	mov.w	r9, #1
 800d544:	4623      	mov	r3, r4
 800d546:	469a      	mov	sl, r3
 800d548:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d54c:	b10a      	cbz	r2, 800d552 <_vfiprintf_r+0xa2>
 800d54e:	2a25      	cmp	r2, #37	; 0x25
 800d550:	d1f9      	bne.n	800d546 <_vfiprintf_r+0x96>
 800d552:	ebba 0b04 	subs.w	fp, sl, r4
 800d556:	d00b      	beq.n	800d570 <_vfiprintf_r+0xc0>
 800d558:	465b      	mov	r3, fp
 800d55a:	4622      	mov	r2, r4
 800d55c:	4629      	mov	r1, r5
 800d55e:	4630      	mov	r0, r6
 800d560:	f7ff ff93 	bl	800d48a <__sfputs_r>
 800d564:	3001      	adds	r0, #1
 800d566:	f000 80aa 	beq.w	800d6be <_vfiprintf_r+0x20e>
 800d56a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d56c:	445a      	add	r2, fp
 800d56e:	9209      	str	r2, [sp, #36]	; 0x24
 800d570:	f89a 3000 	ldrb.w	r3, [sl]
 800d574:	2b00      	cmp	r3, #0
 800d576:	f000 80a2 	beq.w	800d6be <_vfiprintf_r+0x20e>
 800d57a:	2300      	movs	r3, #0
 800d57c:	f04f 32ff 	mov.w	r2, #4294967295
 800d580:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d584:	f10a 0a01 	add.w	sl, sl, #1
 800d588:	9304      	str	r3, [sp, #16]
 800d58a:	9307      	str	r3, [sp, #28]
 800d58c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d590:	931a      	str	r3, [sp, #104]	; 0x68
 800d592:	4654      	mov	r4, sl
 800d594:	2205      	movs	r2, #5
 800d596:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d59a:	4858      	ldr	r0, [pc, #352]	; (800d6fc <_vfiprintf_r+0x24c>)
 800d59c:	f7f2 fe18 	bl	80001d0 <memchr>
 800d5a0:	9a04      	ldr	r2, [sp, #16]
 800d5a2:	b9d8      	cbnz	r0, 800d5dc <_vfiprintf_r+0x12c>
 800d5a4:	06d1      	lsls	r1, r2, #27
 800d5a6:	bf44      	itt	mi
 800d5a8:	2320      	movmi	r3, #32
 800d5aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d5ae:	0713      	lsls	r3, r2, #28
 800d5b0:	bf44      	itt	mi
 800d5b2:	232b      	movmi	r3, #43	; 0x2b
 800d5b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d5b8:	f89a 3000 	ldrb.w	r3, [sl]
 800d5bc:	2b2a      	cmp	r3, #42	; 0x2a
 800d5be:	d015      	beq.n	800d5ec <_vfiprintf_r+0x13c>
 800d5c0:	9a07      	ldr	r2, [sp, #28]
 800d5c2:	4654      	mov	r4, sl
 800d5c4:	2000      	movs	r0, #0
 800d5c6:	f04f 0c0a 	mov.w	ip, #10
 800d5ca:	4621      	mov	r1, r4
 800d5cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d5d0:	3b30      	subs	r3, #48	; 0x30
 800d5d2:	2b09      	cmp	r3, #9
 800d5d4:	d94e      	bls.n	800d674 <_vfiprintf_r+0x1c4>
 800d5d6:	b1b0      	cbz	r0, 800d606 <_vfiprintf_r+0x156>
 800d5d8:	9207      	str	r2, [sp, #28]
 800d5da:	e014      	b.n	800d606 <_vfiprintf_r+0x156>
 800d5dc:	eba0 0308 	sub.w	r3, r0, r8
 800d5e0:	fa09 f303 	lsl.w	r3, r9, r3
 800d5e4:	4313      	orrs	r3, r2
 800d5e6:	9304      	str	r3, [sp, #16]
 800d5e8:	46a2      	mov	sl, r4
 800d5ea:	e7d2      	b.n	800d592 <_vfiprintf_r+0xe2>
 800d5ec:	9b03      	ldr	r3, [sp, #12]
 800d5ee:	1d19      	adds	r1, r3, #4
 800d5f0:	681b      	ldr	r3, [r3, #0]
 800d5f2:	9103      	str	r1, [sp, #12]
 800d5f4:	2b00      	cmp	r3, #0
 800d5f6:	bfbb      	ittet	lt
 800d5f8:	425b      	neglt	r3, r3
 800d5fa:	f042 0202 	orrlt.w	r2, r2, #2
 800d5fe:	9307      	strge	r3, [sp, #28]
 800d600:	9307      	strlt	r3, [sp, #28]
 800d602:	bfb8      	it	lt
 800d604:	9204      	strlt	r2, [sp, #16]
 800d606:	7823      	ldrb	r3, [r4, #0]
 800d608:	2b2e      	cmp	r3, #46	; 0x2e
 800d60a:	d10c      	bne.n	800d626 <_vfiprintf_r+0x176>
 800d60c:	7863      	ldrb	r3, [r4, #1]
 800d60e:	2b2a      	cmp	r3, #42	; 0x2a
 800d610:	d135      	bne.n	800d67e <_vfiprintf_r+0x1ce>
 800d612:	9b03      	ldr	r3, [sp, #12]
 800d614:	1d1a      	adds	r2, r3, #4
 800d616:	681b      	ldr	r3, [r3, #0]
 800d618:	9203      	str	r2, [sp, #12]
 800d61a:	2b00      	cmp	r3, #0
 800d61c:	bfb8      	it	lt
 800d61e:	f04f 33ff 	movlt.w	r3, #4294967295
 800d622:	3402      	adds	r4, #2
 800d624:	9305      	str	r3, [sp, #20]
 800d626:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800d70c <_vfiprintf_r+0x25c>
 800d62a:	7821      	ldrb	r1, [r4, #0]
 800d62c:	2203      	movs	r2, #3
 800d62e:	4650      	mov	r0, sl
 800d630:	f7f2 fdce 	bl	80001d0 <memchr>
 800d634:	b140      	cbz	r0, 800d648 <_vfiprintf_r+0x198>
 800d636:	2340      	movs	r3, #64	; 0x40
 800d638:	eba0 000a 	sub.w	r0, r0, sl
 800d63c:	fa03 f000 	lsl.w	r0, r3, r0
 800d640:	9b04      	ldr	r3, [sp, #16]
 800d642:	4303      	orrs	r3, r0
 800d644:	3401      	adds	r4, #1
 800d646:	9304      	str	r3, [sp, #16]
 800d648:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d64c:	482c      	ldr	r0, [pc, #176]	; (800d700 <_vfiprintf_r+0x250>)
 800d64e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d652:	2206      	movs	r2, #6
 800d654:	f7f2 fdbc 	bl	80001d0 <memchr>
 800d658:	2800      	cmp	r0, #0
 800d65a:	d03f      	beq.n	800d6dc <_vfiprintf_r+0x22c>
 800d65c:	4b29      	ldr	r3, [pc, #164]	; (800d704 <_vfiprintf_r+0x254>)
 800d65e:	bb1b      	cbnz	r3, 800d6a8 <_vfiprintf_r+0x1f8>
 800d660:	9b03      	ldr	r3, [sp, #12]
 800d662:	3307      	adds	r3, #7
 800d664:	f023 0307 	bic.w	r3, r3, #7
 800d668:	3308      	adds	r3, #8
 800d66a:	9303      	str	r3, [sp, #12]
 800d66c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d66e:	443b      	add	r3, r7
 800d670:	9309      	str	r3, [sp, #36]	; 0x24
 800d672:	e767      	b.n	800d544 <_vfiprintf_r+0x94>
 800d674:	fb0c 3202 	mla	r2, ip, r2, r3
 800d678:	460c      	mov	r4, r1
 800d67a:	2001      	movs	r0, #1
 800d67c:	e7a5      	b.n	800d5ca <_vfiprintf_r+0x11a>
 800d67e:	2300      	movs	r3, #0
 800d680:	3401      	adds	r4, #1
 800d682:	9305      	str	r3, [sp, #20]
 800d684:	4619      	mov	r1, r3
 800d686:	f04f 0c0a 	mov.w	ip, #10
 800d68a:	4620      	mov	r0, r4
 800d68c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d690:	3a30      	subs	r2, #48	; 0x30
 800d692:	2a09      	cmp	r2, #9
 800d694:	d903      	bls.n	800d69e <_vfiprintf_r+0x1ee>
 800d696:	2b00      	cmp	r3, #0
 800d698:	d0c5      	beq.n	800d626 <_vfiprintf_r+0x176>
 800d69a:	9105      	str	r1, [sp, #20]
 800d69c:	e7c3      	b.n	800d626 <_vfiprintf_r+0x176>
 800d69e:	fb0c 2101 	mla	r1, ip, r1, r2
 800d6a2:	4604      	mov	r4, r0
 800d6a4:	2301      	movs	r3, #1
 800d6a6:	e7f0      	b.n	800d68a <_vfiprintf_r+0x1da>
 800d6a8:	ab03      	add	r3, sp, #12
 800d6aa:	9300      	str	r3, [sp, #0]
 800d6ac:	462a      	mov	r2, r5
 800d6ae:	4b16      	ldr	r3, [pc, #88]	; (800d708 <_vfiprintf_r+0x258>)
 800d6b0:	a904      	add	r1, sp, #16
 800d6b2:	4630      	mov	r0, r6
 800d6b4:	f3af 8000 	nop.w
 800d6b8:	4607      	mov	r7, r0
 800d6ba:	1c78      	adds	r0, r7, #1
 800d6bc:	d1d6      	bne.n	800d66c <_vfiprintf_r+0x1bc>
 800d6be:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d6c0:	07d9      	lsls	r1, r3, #31
 800d6c2:	d405      	bmi.n	800d6d0 <_vfiprintf_r+0x220>
 800d6c4:	89ab      	ldrh	r3, [r5, #12]
 800d6c6:	059a      	lsls	r2, r3, #22
 800d6c8:	d402      	bmi.n	800d6d0 <_vfiprintf_r+0x220>
 800d6ca:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d6cc:	f7ff fcd5 	bl	800d07a <__retarget_lock_release_recursive>
 800d6d0:	89ab      	ldrh	r3, [r5, #12]
 800d6d2:	065b      	lsls	r3, r3, #25
 800d6d4:	f53f af12 	bmi.w	800d4fc <_vfiprintf_r+0x4c>
 800d6d8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d6da:	e711      	b.n	800d500 <_vfiprintf_r+0x50>
 800d6dc:	ab03      	add	r3, sp, #12
 800d6de:	9300      	str	r3, [sp, #0]
 800d6e0:	462a      	mov	r2, r5
 800d6e2:	4b09      	ldr	r3, [pc, #36]	; (800d708 <_vfiprintf_r+0x258>)
 800d6e4:	a904      	add	r1, sp, #16
 800d6e6:	4630      	mov	r0, r6
 800d6e8:	f000 f880 	bl	800d7ec <_printf_i>
 800d6ec:	e7e4      	b.n	800d6b8 <_vfiprintf_r+0x208>
 800d6ee:	bf00      	nop
 800d6f0:	0800e7a0 	.word	0x0800e7a0
 800d6f4:	0800e7c0 	.word	0x0800e7c0
 800d6f8:	0800e780 	.word	0x0800e780
 800d6fc:	0800e7e0 	.word	0x0800e7e0
 800d700:	0800e7ea 	.word	0x0800e7ea
 800d704:	00000000 	.word	0x00000000
 800d708:	0800d48b 	.word	0x0800d48b
 800d70c:	0800e7e6 	.word	0x0800e7e6

0800d710 <_printf_common>:
 800d710:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d714:	4616      	mov	r6, r2
 800d716:	4699      	mov	r9, r3
 800d718:	688a      	ldr	r2, [r1, #8]
 800d71a:	690b      	ldr	r3, [r1, #16]
 800d71c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d720:	4293      	cmp	r3, r2
 800d722:	bfb8      	it	lt
 800d724:	4613      	movlt	r3, r2
 800d726:	6033      	str	r3, [r6, #0]
 800d728:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d72c:	4607      	mov	r7, r0
 800d72e:	460c      	mov	r4, r1
 800d730:	b10a      	cbz	r2, 800d736 <_printf_common+0x26>
 800d732:	3301      	adds	r3, #1
 800d734:	6033      	str	r3, [r6, #0]
 800d736:	6823      	ldr	r3, [r4, #0]
 800d738:	0699      	lsls	r1, r3, #26
 800d73a:	bf42      	ittt	mi
 800d73c:	6833      	ldrmi	r3, [r6, #0]
 800d73e:	3302      	addmi	r3, #2
 800d740:	6033      	strmi	r3, [r6, #0]
 800d742:	6825      	ldr	r5, [r4, #0]
 800d744:	f015 0506 	ands.w	r5, r5, #6
 800d748:	d106      	bne.n	800d758 <_printf_common+0x48>
 800d74a:	f104 0a19 	add.w	sl, r4, #25
 800d74e:	68e3      	ldr	r3, [r4, #12]
 800d750:	6832      	ldr	r2, [r6, #0]
 800d752:	1a9b      	subs	r3, r3, r2
 800d754:	42ab      	cmp	r3, r5
 800d756:	dc26      	bgt.n	800d7a6 <_printf_common+0x96>
 800d758:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d75c:	1e13      	subs	r3, r2, #0
 800d75e:	6822      	ldr	r2, [r4, #0]
 800d760:	bf18      	it	ne
 800d762:	2301      	movne	r3, #1
 800d764:	0692      	lsls	r2, r2, #26
 800d766:	d42b      	bmi.n	800d7c0 <_printf_common+0xb0>
 800d768:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d76c:	4649      	mov	r1, r9
 800d76e:	4638      	mov	r0, r7
 800d770:	47c0      	blx	r8
 800d772:	3001      	adds	r0, #1
 800d774:	d01e      	beq.n	800d7b4 <_printf_common+0xa4>
 800d776:	6823      	ldr	r3, [r4, #0]
 800d778:	68e5      	ldr	r5, [r4, #12]
 800d77a:	6832      	ldr	r2, [r6, #0]
 800d77c:	f003 0306 	and.w	r3, r3, #6
 800d780:	2b04      	cmp	r3, #4
 800d782:	bf08      	it	eq
 800d784:	1aad      	subeq	r5, r5, r2
 800d786:	68a3      	ldr	r3, [r4, #8]
 800d788:	6922      	ldr	r2, [r4, #16]
 800d78a:	bf0c      	ite	eq
 800d78c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d790:	2500      	movne	r5, #0
 800d792:	4293      	cmp	r3, r2
 800d794:	bfc4      	itt	gt
 800d796:	1a9b      	subgt	r3, r3, r2
 800d798:	18ed      	addgt	r5, r5, r3
 800d79a:	2600      	movs	r6, #0
 800d79c:	341a      	adds	r4, #26
 800d79e:	42b5      	cmp	r5, r6
 800d7a0:	d11a      	bne.n	800d7d8 <_printf_common+0xc8>
 800d7a2:	2000      	movs	r0, #0
 800d7a4:	e008      	b.n	800d7b8 <_printf_common+0xa8>
 800d7a6:	2301      	movs	r3, #1
 800d7a8:	4652      	mov	r2, sl
 800d7aa:	4649      	mov	r1, r9
 800d7ac:	4638      	mov	r0, r7
 800d7ae:	47c0      	blx	r8
 800d7b0:	3001      	adds	r0, #1
 800d7b2:	d103      	bne.n	800d7bc <_printf_common+0xac>
 800d7b4:	f04f 30ff 	mov.w	r0, #4294967295
 800d7b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d7bc:	3501      	adds	r5, #1
 800d7be:	e7c6      	b.n	800d74e <_printf_common+0x3e>
 800d7c0:	18e1      	adds	r1, r4, r3
 800d7c2:	1c5a      	adds	r2, r3, #1
 800d7c4:	2030      	movs	r0, #48	; 0x30
 800d7c6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d7ca:	4422      	add	r2, r4
 800d7cc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d7d0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d7d4:	3302      	adds	r3, #2
 800d7d6:	e7c7      	b.n	800d768 <_printf_common+0x58>
 800d7d8:	2301      	movs	r3, #1
 800d7da:	4622      	mov	r2, r4
 800d7dc:	4649      	mov	r1, r9
 800d7de:	4638      	mov	r0, r7
 800d7e0:	47c0      	blx	r8
 800d7e2:	3001      	adds	r0, #1
 800d7e4:	d0e6      	beq.n	800d7b4 <_printf_common+0xa4>
 800d7e6:	3601      	adds	r6, #1
 800d7e8:	e7d9      	b.n	800d79e <_printf_common+0x8e>
	...

0800d7ec <_printf_i>:
 800d7ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d7f0:	7e0f      	ldrb	r7, [r1, #24]
 800d7f2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d7f4:	2f78      	cmp	r7, #120	; 0x78
 800d7f6:	4691      	mov	r9, r2
 800d7f8:	4680      	mov	r8, r0
 800d7fa:	460c      	mov	r4, r1
 800d7fc:	469a      	mov	sl, r3
 800d7fe:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800d802:	d807      	bhi.n	800d814 <_printf_i+0x28>
 800d804:	2f62      	cmp	r7, #98	; 0x62
 800d806:	d80a      	bhi.n	800d81e <_printf_i+0x32>
 800d808:	2f00      	cmp	r7, #0
 800d80a:	f000 80d8 	beq.w	800d9be <_printf_i+0x1d2>
 800d80e:	2f58      	cmp	r7, #88	; 0x58
 800d810:	f000 80a3 	beq.w	800d95a <_printf_i+0x16e>
 800d814:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d818:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d81c:	e03a      	b.n	800d894 <_printf_i+0xa8>
 800d81e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d822:	2b15      	cmp	r3, #21
 800d824:	d8f6      	bhi.n	800d814 <_printf_i+0x28>
 800d826:	a101      	add	r1, pc, #4	; (adr r1, 800d82c <_printf_i+0x40>)
 800d828:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d82c:	0800d885 	.word	0x0800d885
 800d830:	0800d899 	.word	0x0800d899
 800d834:	0800d815 	.word	0x0800d815
 800d838:	0800d815 	.word	0x0800d815
 800d83c:	0800d815 	.word	0x0800d815
 800d840:	0800d815 	.word	0x0800d815
 800d844:	0800d899 	.word	0x0800d899
 800d848:	0800d815 	.word	0x0800d815
 800d84c:	0800d815 	.word	0x0800d815
 800d850:	0800d815 	.word	0x0800d815
 800d854:	0800d815 	.word	0x0800d815
 800d858:	0800d9a5 	.word	0x0800d9a5
 800d85c:	0800d8c9 	.word	0x0800d8c9
 800d860:	0800d987 	.word	0x0800d987
 800d864:	0800d815 	.word	0x0800d815
 800d868:	0800d815 	.word	0x0800d815
 800d86c:	0800d9c7 	.word	0x0800d9c7
 800d870:	0800d815 	.word	0x0800d815
 800d874:	0800d8c9 	.word	0x0800d8c9
 800d878:	0800d815 	.word	0x0800d815
 800d87c:	0800d815 	.word	0x0800d815
 800d880:	0800d98f 	.word	0x0800d98f
 800d884:	682b      	ldr	r3, [r5, #0]
 800d886:	1d1a      	adds	r2, r3, #4
 800d888:	681b      	ldr	r3, [r3, #0]
 800d88a:	602a      	str	r2, [r5, #0]
 800d88c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d890:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d894:	2301      	movs	r3, #1
 800d896:	e0a3      	b.n	800d9e0 <_printf_i+0x1f4>
 800d898:	6820      	ldr	r0, [r4, #0]
 800d89a:	6829      	ldr	r1, [r5, #0]
 800d89c:	0606      	lsls	r6, r0, #24
 800d89e:	f101 0304 	add.w	r3, r1, #4
 800d8a2:	d50a      	bpl.n	800d8ba <_printf_i+0xce>
 800d8a4:	680e      	ldr	r6, [r1, #0]
 800d8a6:	602b      	str	r3, [r5, #0]
 800d8a8:	2e00      	cmp	r6, #0
 800d8aa:	da03      	bge.n	800d8b4 <_printf_i+0xc8>
 800d8ac:	232d      	movs	r3, #45	; 0x2d
 800d8ae:	4276      	negs	r6, r6
 800d8b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d8b4:	485e      	ldr	r0, [pc, #376]	; (800da30 <_printf_i+0x244>)
 800d8b6:	230a      	movs	r3, #10
 800d8b8:	e019      	b.n	800d8ee <_printf_i+0x102>
 800d8ba:	680e      	ldr	r6, [r1, #0]
 800d8bc:	602b      	str	r3, [r5, #0]
 800d8be:	f010 0f40 	tst.w	r0, #64	; 0x40
 800d8c2:	bf18      	it	ne
 800d8c4:	b236      	sxthne	r6, r6
 800d8c6:	e7ef      	b.n	800d8a8 <_printf_i+0xbc>
 800d8c8:	682b      	ldr	r3, [r5, #0]
 800d8ca:	6820      	ldr	r0, [r4, #0]
 800d8cc:	1d19      	adds	r1, r3, #4
 800d8ce:	6029      	str	r1, [r5, #0]
 800d8d0:	0601      	lsls	r1, r0, #24
 800d8d2:	d501      	bpl.n	800d8d8 <_printf_i+0xec>
 800d8d4:	681e      	ldr	r6, [r3, #0]
 800d8d6:	e002      	b.n	800d8de <_printf_i+0xf2>
 800d8d8:	0646      	lsls	r6, r0, #25
 800d8da:	d5fb      	bpl.n	800d8d4 <_printf_i+0xe8>
 800d8dc:	881e      	ldrh	r6, [r3, #0]
 800d8de:	4854      	ldr	r0, [pc, #336]	; (800da30 <_printf_i+0x244>)
 800d8e0:	2f6f      	cmp	r7, #111	; 0x6f
 800d8e2:	bf0c      	ite	eq
 800d8e4:	2308      	moveq	r3, #8
 800d8e6:	230a      	movne	r3, #10
 800d8e8:	2100      	movs	r1, #0
 800d8ea:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d8ee:	6865      	ldr	r5, [r4, #4]
 800d8f0:	60a5      	str	r5, [r4, #8]
 800d8f2:	2d00      	cmp	r5, #0
 800d8f4:	bfa2      	ittt	ge
 800d8f6:	6821      	ldrge	r1, [r4, #0]
 800d8f8:	f021 0104 	bicge.w	r1, r1, #4
 800d8fc:	6021      	strge	r1, [r4, #0]
 800d8fe:	b90e      	cbnz	r6, 800d904 <_printf_i+0x118>
 800d900:	2d00      	cmp	r5, #0
 800d902:	d04d      	beq.n	800d9a0 <_printf_i+0x1b4>
 800d904:	4615      	mov	r5, r2
 800d906:	fbb6 f1f3 	udiv	r1, r6, r3
 800d90a:	fb03 6711 	mls	r7, r3, r1, r6
 800d90e:	5dc7      	ldrb	r7, [r0, r7]
 800d910:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800d914:	4637      	mov	r7, r6
 800d916:	42bb      	cmp	r3, r7
 800d918:	460e      	mov	r6, r1
 800d91a:	d9f4      	bls.n	800d906 <_printf_i+0x11a>
 800d91c:	2b08      	cmp	r3, #8
 800d91e:	d10b      	bne.n	800d938 <_printf_i+0x14c>
 800d920:	6823      	ldr	r3, [r4, #0]
 800d922:	07de      	lsls	r6, r3, #31
 800d924:	d508      	bpl.n	800d938 <_printf_i+0x14c>
 800d926:	6923      	ldr	r3, [r4, #16]
 800d928:	6861      	ldr	r1, [r4, #4]
 800d92a:	4299      	cmp	r1, r3
 800d92c:	bfde      	ittt	le
 800d92e:	2330      	movle	r3, #48	; 0x30
 800d930:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d934:	f105 35ff 	addle.w	r5, r5, #4294967295
 800d938:	1b52      	subs	r2, r2, r5
 800d93a:	6122      	str	r2, [r4, #16]
 800d93c:	f8cd a000 	str.w	sl, [sp]
 800d940:	464b      	mov	r3, r9
 800d942:	aa03      	add	r2, sp, #12
 800d944:	4621      	mov	r1, r4
 800d946:	4640      	mov	r0, r8
 800d948:	f7ff fee2 	bl	800d710 <_printf_common>
 800d94c:	3001      	adds	r0, #1
 800d94e:	d14c      	bne.n	800d9ea <_printf_i+0x1fe>
 800d950:	f04f 30ff 	mov.w	r0, #4294967295
 800d954:	b004      	add	sp, #16
 800d956:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d95a:	4835      	ldr	r0, [pc, #212]	; (800da30 <_printf_i+0x244>)
 800d95c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800d960:	6829      	ldr	r1, [r5, #0]
 800d962:	6823      	ldr	r3, [r4, #0]
 800d964:	f851 6b04 	ldr.w	r6, [r1], #4
 800d968:	6029      	str	r1, [r5, #0]
 800d96a:	061d      	lsls	r5, r3, #24
 800d96c:	d514      	bpl.n	800d998 <_printf_i+0x1ac>
 800d96e:	07df      	lsls	r7, r3, #31
 800d970:	bf44      	itt	mi
 800d972:	f043 0320 	orrmi.w	r3, r3, #32
 800d976:	6023      	strmi	r3, [r4, #0]
 800d978:	b91e      	cbnz	r6, 800d982 <_printf_i+0x196>
 800d97a:	6823      	ldr	r3, [r4, #0]
 800d97c:	f023 0320 	bic.w	r3, r3, #32
 800d980:	6023      	str	r3, [r4, #0]
 800d982:	2310      	movs	r3, #16
 800d984:	e7b0      	b.n	800d8e8 <_printf_i+0xfc>
 800d986:	6823      	ldr	r3, [r4, #0]
 800d988:	f043 0320 	orr.w	r3, r3, #32
 800d98c:	6023      	str	r3, [r4, #0]
 800d98e:	2378      	movs	r3, #120	; 0x78
 800d990:	4828      	ldr	r0, [pc, #160]	; (800da34 <_printf_i+0x248>)
 800d992:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d996:	e7e3      	b.n	800d960 <_printf_i+0x174>
 800d998:	0659      	lsls	r1, r3, #25
 800d99a:	bf48      	it	mi
 800d99c:	b2b6      	uxthmi	r6, r6
 800d99e:	e7e6      	b.n	800d96e <_printf_i+0x182>
 800d9a0:	4615      	mov	r5, r2
 800d9a2:	e7bb      	b.n	800d91c <_printf_i+0x130>
 800d9a4:	682b      	ldr	r3, [r5, #0]
 800d9a6:	6826      	ldr	r6, [r4, #0]
 800d9a8:	6961      	ldr	r1, [r4, #20]
 800d9aa:	1d18      	adds	r0, r3, #4
 800d9ac:	6028      	str	r0, [r5, #0]
 800d9ae:	0635      	lsls	r5, r6, #24
 800d9b0:	681b      	ldr	r3, [r3, #0]
 800d9b2:	d501      	bpl.n	800d9b8 <_printf_i+0x1cc>
 800d9b4:	6019      	str	r1, [r3, #0]
 800d9b6:	e002      	b.n	800d9be <_printf_i+0x1d2>
 800d9b8:	0670      	lsls	r0, r6, #25
 800d9ba:	d5fb      	bpl.n	800d9b4 <_printf_i+0x1c8>
 800d9bc:	8019      	strh	r1, [r3, #0]
 800d9be:	2300      	movs	r3, #0
 800d9c0:	6123      	str	r3, [r4, #16]
 800d9c2:	4615      	mov	r5, r2
 800d9c4:	e7ba      	b.n	800d93c <_printf_i+0x150>
 800d9c6:	682b      	ldr	r3, [r5, #0]
 800d9c8:	1d1a      	adds	r2, r3, #4
 800d9ca:	602a      	str	r2, [r5, #0]
 800d9cc:	681d      	ldr	r5, [r3, #0]
 800d9ce:	6862      	ldr	r2, [r4, #4]
 800d9d0:	2100      	movs	r1, #0
 800d9d2:	4628      	mov	r0, r5
 800d9d4:	f7f2 fbfc 	bl	80001d0 <memchr>
 800d9d8:	b108      	cbz	r0, 800d9de <_printf_i+0x1f2>
 800d9da:	1b40      	subs	r0, r0, r5
 800d9dc:	6060      	str	r0, [r4, #4]
 800d9de:	6863      	ldr	r3, [r4, #4]
 800d9e0:	6123      	str	r3, [r4, #16]
 800d9e2:	2300      	movs	r3, #0
 800d9e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d9e8:	e7a8      	b.n	800d93c <_printf_i+0x150>
 800d9ea:	6923      	ldr	r3, [r4, #16]
 800d9ec:	462a      	mov	r2, r5
 800d9ee:	4649      	mov	r1, r9
 800d9f0:	4640      	mov	r0, r8
 800d9f2:	47d0      	blx	sl
 800d9f4:	3001      	adds	r0, #1
 800d9f6:	d0ab      	beq.n	800d950 <_printf_i+0x164>
 800d9f8:	6823      	ldr	r3, [r4, #0]
 800d9fa:	079b      	lsls	r3, r3, #30
 800d9fc:	d413      	bmi.n	800da26 <_printf_i+0x23a>
 800d9fe:	68e0      	ldr	r0, [r4, #12]
 800da00:	9b03      	ldr	r3, [sp, #12]
 800da02:	4298      	cmp	r0, r3
 800da04:	bfb8      	it	lt
 800da06:	4618      	movlt	r0, r3
 800da08:	e7a4      	b.n	800d954 <_printf_i+0x168>
 800da0a:	2301      	movs	r3, #1
 800da0c:	4632      	mov	r2, r6
 800da0e:	4649      	mov	r1, r9
 800da10:	4640      	mov	r0, r8
 800da12:	47d0      	blx	sl
 800da14:	3001      	adds	r0, #1
 800da16:	d09b      	beq.n	800d950 <_printf_i+0x164>
 800da18:	3501      	adds	r5, #1
 800da1a:	68e3      	ldr	r3, [r4, #12]
 800da1c:	9903      	ldr	r1, [sp, #12]
 800da1e:	1a5b      	subs	r3, r3, r1
 800da20:	42ab      	cmp	r3, r5
 800da22:	dcf2      	bgt.n	800da0a <_printf_i+0x21e>
 800da24:	e7eb      	b.n	800d9fe <_printf_i+0x212>
 800da26:	2500      	movs	r5, #0
 800da28:	f104 0619 	add.w	r6, r4, #25
 800da2c:	e7f5      	b.n	800da1a <_printf_i+0x22e>
 800da2e:	bf00      	nop
 800da30:	0800e7f1 	.word	0x0800e7f1
 800da34:	0800e802 	.word	0x0800e802

0800da38 <_sbrk_r>:
 800da38:	b538      	push	{r3, r4, r5, lr}
 800da3a:	4d06      	ldr	r5, [pc, #24]	; (800da54 <_sbrk_r+0x1c>)
 800da3c:	2300      	movs	r3, #0
 800da3e:	4604      	mov	r4, r0
 800da40:	4608      	mov	r0, r1
 800da42:	602b      	str	r3, [r5, #0]
 800da44:	f7f3 ff9a 	bl	800197c <_sbrk>
 800da48:	1c43      	adds	r3, r0, #1
 800da4a:	d102      	bne.n	800da52 <_sbrk_r+0x1a>
 800da4c:	682b      	ldr	r3, [r5, #0]
 800da4e:	b103      	cbz	r3, 800da52 <_sbrk_r+0x1a>
 800da50:	6023      	str	r3, [r4, #0]
 800da52:	bd38      	pop	{r3, r4, r5, pc}
 800da54:	20001744 	.word	0x20001744

0800da58 <__sread>:
 800da58:	b510      	push	{r4, lr}
 800da5a:	460c      	mov	r4, r1
 800da5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800da60:	f000 fb0a 	bl	800e078 <_read_r>
 800da64:	2800      	cmp	r0, #0
 800da66:	bfab      	itete	ge
 800da68:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800da6a:	89a3      	ldrhlt	r3, [r4, #12]
 800da6c:	181b      	addge	r3, r3, r0
 800da6e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800da72:	bfac      	ite	ge
 800da74:	6563      	strge	r3, [r4, #84]	; 0x54
 800da76:	81a3      	strhlt	r3, [r4, #12]
 800da78:	bd10      	pop	{r4, pc}

0800da7a <__swrite>:
 800da7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800da7e:	461f      	mov	r7, r3
 800da80:	898b      	ldrh	r3, [r1, #12]
 800da82:	05db      	lsls	r3, r3, #23
 800da84:	4605      	mov	r5, r0
 800da86:	460c      	mov	r4, r1
 800da88:	4616      	mov	r6, r2
 800da8a:	d505      	bpl.n	800da98 <__swrite+0x1e>
 800da8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800da90:	2302      	movs	r3, #2
 800da92:	2200      	movs	r2, #0
 800da94:	f000 f9c8 	bl	800de28 <_lseek_r>
 800da98:	89a3      	ldrh	r3, [r4, #12]
 800da9a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800da9e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800daa2:	81a3      	strh	r3, [r4, #12]
 800daa4:	4632      	mov	r2, r6
 800daa6:	463b      	mov	r3, r7
 800daa8:	4628      	mov	r0, r5
 800daaa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800daae:	f000 b869 	b.w	800db84 <_write_r>

0800dab2 <__sseek>:
 800dab2:	b510      	push	{r4, lr}
 800dab4:	460c      	mov	r4, r1
 800dab6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800daba:	f000 f9b5 	bl	800de28 <_lseek_r>
 800dabe:	1c43      	adds	r3, r0, #1
 800dac0:	89a3      	ldrh	r3, [r4, #12]
 800dac2:	bf15      	itete	ne
 800dac4:	6560      	strne	r0, [r4, #84]	; 0x54
 800dac6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800daca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800dace:	81a3      	strheq	r3, [r4, #12]
 800dad0:	bf18      	it	ne
 800dad2:	81a3      	strhne	r3, [r4, #12]
 800dad4:	bd10      	pop	{r4, pc}

0800dad6 <__sclose>:
 800dad6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dada:	f000 b8d3 	b.w	800dc84 <_close_r>
	...

0800dae0 <__swbuf_r>:
 800dae0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dae2:	460e      	mov	r6, r1
 800dae4:	4614      	mov	r4, r2
 800dae6:	4605      	mov	r5, r0
 800dae8:	b118      	cbz	r0, 800daf2 <__swbuf_r+0x12>
 800daea:	6983      	ldr	r3, [r0, #24]
 800daec:	b90b      	cbnz	r3, 800daf2 <__swbuf_r+0x12>
 800daee:	f7ff fa25 	bl	800cf3c <__sinit>
 800daf2:	4b21      	ldr	r3, [pc, #132]	; (800db78 <__swbuf_r+0x98>)
 800daf4:	429c      	cmp	r4, r3
 800daf6:	d12b      	bne.n	800db50 <__swbuf_r+0x70>
 800daf8:	686c      	ldr	r4, [r5, #4]
 800dafa:	69a3      	ldr	r3, [r4, #24]
 800dafc:	60a3      	str	r3, [r4, #8]
 800dafe:	89a3      	ldrh	r3, [r4, #12]
 800db00:	071a      	lsls	r2, r3, #28
 800db02:	d52f      	bpl.n	800db64 <__swbuf_r+0x84>
 800db04:	6923      	ldr	r3, [r4, #16]
 800db06:	b36b      	cbz	r3, 800db64 <__swbuf_r+0x84>
 800db08:	6923      	ldr	r3, [r4, #16]
 800db0a:	6820      	ldr	r0, [r4, #0]
 800db0c:	1ac0      	subs	r0, r0, r3
 800db0e:	6963      	ldr	r3, [r4, #20]
 800db10:	b2f6      	uxtb	r6, r6
 800db12:	4283      	cmp	r3, r0
 800db14:	4637      	mov	r7, r6
 800db16:	dc04      	bgt.n	800db22 <__swbuf_r+0x42>
 800db18:	4621      	mov	r1, r4
 800db1a:	4628      	mov	r0, r5
 800db1c:	f000 f948 	bl	800ddb0 <_fflush_r>
 800db20:	bb30      	cbnz	r0, 800db70 <__swbuf_r+0x90>
 800db22:	68a3      	ldr	r3, [r4, #8]
 800db24:	3b01      	subs	r3, #1
 800db26:	60a3      	str	r3, [r4, #8]
 800db28:	6823      	ldr	r3, [r4, #0]
 800db2a:	1c5a      	adds	r2, r3, #1
 800db2c:	6022      	str	r2, [r4, #0]
 800db2e:	701e      	strb	r6, [r3, #0]
 800db30:	6963      	ldr	r3, [r4, #20]
 800db32:	3001      	adds	r0, #1
 800db34:	4283      	cmp	r3, r0
 800db36:	d004      	beq.n	800db42 <__swbuf_r+0x62>
 800db38:	89a3      	ldrh	r3, [r4, #12]
 800db3a:	07db      	lsls	r3, r3, #31
 800db3c:	d506      	bpl.n	800db4c <__swbuf_r+0x6c>
 800db3e:	2e0a      	cmp	r6, #10
 800db40:	d104      	bne.n	800db4c <__swbuf_r+0x6c>
 800db42:	4621      	mov	r1, r4
 800db44:	4628      	mov	r0, r5
 800db46:	f000 f933 	bl	800ddb0 <_fflush_r>
 800db4a:	b988      	cbnz	r0, 800db70 <__swbuf_r+0x90>
 800db4c:	4638      	mov	r0, r7
 800db4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800db50:	4b0a      	ldr	r3, [pc, #40]	; (800db7c <__swbuf_r+0x9c>)
 800db52:	429c      	cmp	r4, r3
 800db54:	d101      	bne.n	800db5a <__swbuf_r+0x7a>
 800db56:	68ac      	ldr	r4, [r5, #8]
 800db58:	e7cf      	b.n	800dafa <__swbuf_r+0x1a>
 800db5a:	4b09      	ldr	r3, [pc, #36]	; (800db80 <__swbuf_r+0xa0>)
 800db5c:	429c      	cmp	r4, r3
 800db5e:	bf08      	it	eq
 800db60:	68ec      	ldreq	r4, [r5, #12]
 800db62:	e7ca      	b.n	800dafa <__swbuf_r+0x1a>
 800db64:	4621      	mov	r1, r4
 800db66:	4628      	mov	r0, r5
 800db68:	f000 f81e 	bl	800dba8 <__swsetup_r>
 800db6c:	2800      	cmp	r0, #0
 800db6e:	d0cb      	beq.n	800db08 <__swbuf_r+0x28>
 800db70:	f04f 37ff 	mov.w	r7, #4294967295
 800db74:	e7ea      	b.n	800db4c <__swbuf_r+0x6c>
 800db76:	bf00      	nop
 800db78:	0800e7a0 	.word	0x0800e7a0
 800db7c:	0800e7c0 	.word	0x0800e7c0
 800db80:	0800e780 	.word	0x0800e780

0800db84 <_write_r>:
 800db84:	b538      	push	{r3, r4, r5, lr}
 800db86:	4d07      	ldr	r5, [pc, #28]	; (800dba4 <_write_r+0x20>)
 800db88:	4604      	mov	r4, r0
 800db8a:	4608      	mov	r0, r1
 800db8c:	4611      	mov	r1, r2
 800db8e:	2200      	movs	r2, #0
 800db90:	602a      	str	r2, [r5, #0]
 800db92:	461a      	mov	r2, r3
 800db94:	f7f3 f8e2 	bl	8000d5c <_write>
 800db98:	1c43      	adds	r3, r0, #1
 800db9a:	d102      	bne.n	800dba2 <_write_r+0x1e>
 800db9c:	682b      	ldr	r3, [r5, #0]
 800db9e:	b103      	cbz	r3, 800dba2 <_write_r+0x1e>
 800dba0:	6023      	str	r3, [r4, #0]
 800dba2:	bd38      	pop	{r3, r4, r5, pc}
 800dba4:	20001744 	.word	0x20001744

0800dba8 <__swsetup_r>:
 800dba8:	4b32      	ldr	r3, [pc, #200]	; (800dc74 <__swsetup_r+0xcc>)
 800dbaa:	b570      	push	{r4, r5, r6, lr}
 800dbac:	681d      	ldr	r5, [r3, #0]
 800dbae:	4606      	mov	r6, r0
 800dbb0:	460c      	mov	r4, r1
 800dbb2:	b125      	cbz	r5, 800dbbe <__swsetup_r+0x16>
 800dbb4:	69ab      	ldr	r3, [r5, #24]
 800dbb6:	b913      	cbnz	r3, 800dbbe <__swsetup_r+0x16>
 800dbb8:	4628      	mov	r0, r5
 800dbba:	f7ff f9bf 	bl	800cf3c <__sinit>
 800dbbe:	4b2e      	ldr	r3, [pc, #184]	; (800dc78 <__swsetup_r+0xd0>)
 800dbc0:	429c      	cmp	r4, r3
 800dbc2:	d10f      	bne.n	800dbe4 <__swsetup_r+0x3c>
 800dbc4:	686c      	ldr	r4, [r5, #4]
 800dbc6:	89a3      	ldrh	r3, [r4, #12]
 800dbc8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800dbcc:	0719      	lsls	r1, r3, #28
 800dbce:	d42c      	bmi.n	800dc2a <__swsetup_r+0x82>
 800dbd0:	06dd      	lsls	r5, r3, #27
 800dbd2:	d411      	bmi.n	800dbf8 <__swsetup_r+0x50>
 800dbd4:	2309      	movs	r3, #9
 800dbd6:	6033      	str	r3, [r6, #0]
 800dbd8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800dbdc:	81a3      	strh	r3, [r4, #12]
 800dbde:	f04f 30ff 	mov.w	r0, #4294967295
 800dbe2:	e03e      	b.n	800dc62 <__swsetup_r+0xba>
 800dbe4:	4b25      	ldr	r3, [pc, #148]	; (800dc7c <__swsetup_r+0xd4>)
 800dbe6:	429c      	cmp	r4, r3
 800dbe8:	d101      	bne.n	800dbee <__swsetup_r+0x46>
 800dbea:	68ac      	ldr	r4, [r5, #8]
 800dbec:	e7eb      	b.n	800dbc6 <__swsetup_r+0x1e>
 800dbee:	4b24      	ldr	r3, [pc, #144]	; (800dc80 <__swsetup_r+0xd8>)
 800dbf0:	429c      	cmp	r4, r3
 800dbf2:	bf08      	it	eq
 800dbf4:	68ec      	ldreq	r4, [r5, #12]
 800dbf6:	e7e6      	b.n	800dbc6 <__swsetup_r+0x1e>
 800dbf8:	0758      	lsls	r0, r3, #29
 800dbfa:	d512      	bpl.n	800dc22 <__swsetup_r+0x7a>
 800dbfc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800dbfe:	b141      	cbz	r1, 800dc12 <__swsetup_r+0x6a>
 800dc00:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800dc04:	4299      	cmp	r1, r3
 800dc06:	d002      	beq.n	800dc0e <__swsetup_r+0x66>
 800dc08:	4630      	mov	r0, r6
 800dc0a:	f000 f9b9 	bl	800df80 <_free_r>
 800dc0e:	2300      	movs	r3, #0
 800dc10:	6363      	str	r3, [r4, #52]	; 0x34
 800dc12:	89a3      	ldrh	r3, [r4, #12]
 800dc14:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800dc18:	81a3      	strh	r3, [r4, #12]
 800dc1a:	2300      	movs	r3, #0
 800dc1c:	6063      	str	r3, [r4, #4]
 800dc1e:	6923      	ldr	r3, [r4, #16]
 800dc20:	6023      	str	r3, [r4, #0]
 800dc22:	89a3      	ldrh	r3, [r4, #12]
 800dc24:	f043 0308 	orr.w	r3, r3, #8
 800dc28:	81a3      	strh	r3, [r4, #12]
 800dc2a:	6923      	ldr	r3, [r4, #16]
 800dc2c:	b94b      	cbnz	r3, 800dc42 <__swsetup_r+0x9a>
 800dc2e:	89a3      	ldrh	r3, [r4, #12]
 800dc30:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800dc34:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800dc38:	d003      	beq.n	800dc42 <__swsetup_r+0x9a>
 800dc3a:	4621      	mov	r1, r4
 800dc3c:	4630      	mov	r0, r6
 800dc3e:	f000 f92b 	bl	800de98 <__smakebuf_r>
 800dc42:	89a0      	ldrh	r0, [r4, #12]
 800dc44:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800dc48:	f010 0301 	ands.w	r3, r0, #1
 800dc4c:	d00a      	beq.n	800dc64 <__swsetup_r+0xbc>
 800dc4e:	2300      	movs	r3, #0
 800dc50:	60a3      	str	r3, [r4, #8]
 800dc52:	6963      	ldr	r3, [r4, #20]
 800dc54:	425b      	negs	r3, r3
 800dc56:	61a3      	str	r3, [r4, #24]
 800dc58:	6923      	ldr	r3, [r4, #16]
 800dc5a:	b943      	cbnz	r3, 800dc6e <__swsetup_r+0xc6>
 800dc5c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800dc60:	d1ba      	bne.n	800dbd8 <__swsetup_r+0x30>
 800dc62:	bd70      	pop	{r4, r5, r6, pc}
 800dc64:	0781      	lsls	r1, r0, #30
 800dc66:	bf58      	it	pl
 800dc68:	6963      	ldrpl	r3, [r4, #20]
 800dc6a:	60a3      	str	r3, [r4, #8]
 800dc6c:	e7f4      	b.n	800dc58 <__swsetup_r+0xb0>
 800dc6e:	2000      	movs	r0, #0
 800dc70:	e7f7      	b.n	800dc62 <__swsetup_r+0xba>
 800dc72:	bf00      	nop
 800dc74:	2000000c 	.word	0x2000000c
 800dc78:	0800e7a0 	.word	0x0800e7a0
 800dc7c:	0800e7c0 	.word	0x0800e7c0
 800dc80:	0800e780 	.word	0x0800e780

0800dc84 <_close_r>:
 800dc84:	b538      	push	{r3, r4, r5, lr}
 800dc86:	4d06      	ldr	r5, [pc, #24]	; (800dca0 <_close_r+0x1c>)
 800dc88:	2300      	movs	r3, #0
 800dc8a:	4604      	mov	r4, r0
 800dc8c:	4608      	mov	r0, r1
 800dc8e:	602b      	str	r3, [r5, #0]
 800dc90:	f7f3 fe3f 	bl	8001912 <_close>
 800dc94:	1c43      	adds	r3, r0, #1
 800dc96:	d102      	bne.n	800dc9e <_close_r+0x1a>
 800dc98:	682b      	ldr	r3, [r5, #0]
 800dc9a:	b103      	cbz	r3, 800dc9e <_close_r+0x1a>
 800dc9c:	6023      	str	r3, [r4, #0]
 800dc9e:	bd38      	pop	{r3, r4, r5, pc}
 800dca0:	20001744 	.word	0x20001744

0800dca4 <__sflush_r>:
 800dca4:	898a      	ldrh	r2, [r1, #12]
 800dca6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dcaa:	4605      	mov	r5, r0
 800dcac:	0710      	lsls	r0, r2, #28
 800dcae:	460c      	mov	r4, r1
 800dcb0:	d458      	bmi.n	800dd64 <__sflush_r+0xc0>
 800dcb2:	684b      	ldr	r3, [r1, #4]
 800dcb4:	2b00      	cmp	r3, #0
 800dcb6:	dc05      	bgt.n	800dcc4 <__sflush_r+0x20>
 800dcb8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800dcba:	2b00      	cmp	r3, #0
 800dcbc:	dc02      	bgt.n	800dcc4 <__sflush_r+0x20>
 800dcbe:	2000      	movs	r0, #0
 800dcc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dcc4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800dcc6:	2e00      	cmp	r6, #0
 800dcc8:	d0f9      	beq.n	800dcbe <__sflush_r+0x1a>
 800dcca:	2300      	movs	r3, #0
 800dccc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800dcd0:	682f      	ldr	r7, [r5, #0]
 800dcd2:	602b      	str	r3, [r5, #0]
 800dcd4:	d032      	beq.n	800dd3c <__sflush_r+0x98>
 800dcd6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800dcd8:	89a3      	ldrh	r3, [r4, #12]
 800dcda:	075a      	lsls	r2, r3, #29
 800dcdc:	d505      	bpl.n	800dcea <__sflush_r+0x46>
 800dcde:	6863      	ldr	r3, [r4, #4]
 800dce0:	1ac0      	subs	r0, r0, r3
 800dce2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800dce4:	b10b      	cbz	r3, 800dcea <__sflush_r+0x46>
 800dce6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800dce8:	1ac0      	subs	r0, r0, r3
 800dcea:	2300      	movs	r3, #0
 800dcec:	4602      	mov	r2, r0
 800dcee:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800dcf0:	6a21      	ldr	r1, [r4, #32]
 800dcf2:	4628      	mov	r0, r5
 800dcf4:	47b0      	blx	r6
 800dcf6:	1c43      	adds	r3, r0, #1
 800dcf8:	89a3      	ldrh	r3, [r4, #12]
 800dcfa:	d106      	bne.n	800dd0a <__sflush_r+0x66>
 800dcfc:	6829      	ldr	r1, [r5, #0]
 800dcfe:	291d      	cmp	r1, #29
 800dd00:	d82c      	bhi.n	800dd5c <__sflush_r+0xb8>
 800dd02:	4a2a      	ldr	r2, [pc, #168]	; (800ddac <__sflush_r+0x108>)
 800dd04:	40ca      	lsrs	r2, r1
 800dd06:	07d6      	lsls	r6, r2, #31
 800dd08:	d528      	bpl.n	800dd5c <__sflush_r+0xb8>
 800dd0a:	2200      	movs	r2, #0
 800dd0c:	6062      	str	r2, [r4, #4]
 800dd0e:	04d9      	lsls	r1, r3, #19
 800dd10:	6922      	ldr	r2, [r4, #16]
 800dd12:	6022      	str	r2, [r4, #0]
 800dd14:	d504      	bpl.n	800dd20 <__sflush_r+0x7c>
 800dd16:	1c42      	adds	r2, r0, #1
 800dd18:	d101      	bne.n	800dd1e <__sflush_r+0x7a>
 800dd1a:	682b      	ldr	r3, [r5, #0]
 800dd1c:	b903      	cbnz	r3, 800dd20 <__sflush_r+0x7c>
 800dd1e:	6560      	str	r0, [r4, #84]	; 0x54
 800dd20:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800dd22:	602f      	str	r7, [r5, #0]
 800dd24:	2900      	cmp	r1, #0
 800dd26:	d0ca      	beq.n	800dcbe <__sflush_r+0x1a>
 800dd28:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800dd2c:	4299      	cmp	r1, r3
 800dd2e:	d002      	beq.n	800dd36 <__sflush_r+0x92>
 800dd30:	4628      	mov	r0, r5
 800dd32:	f000 f925 	bl	800df80 <_free_r>
 800dd36:	2000      	movs	r0, #0
 800dd38:	6360      	str	r0, [r4, #52]	; 0x34
 800dd3a:	e7c1      	b.n	800dcc0 <__sflush_r+0x1c>
 800dd3c:	6a21      	ldr	r1, [r4, #32]
 800dd3e:	2301      	movs	r3, #1
 800dd40:	4628      	mov	r0, r5
 800dd42:	47b0      	blx	r6
 800dd44:	1c41      	adds	r1, r0, #1
 800dd46:	d1c7      	bne.n	800dcd8 <__sflush_r+0x34>
 800dd48:	682b      	ldr	r3, [r5, #0]
 800dd4a:	2b00      	cmp	r3, #0
 800dd4c:	d0c4      	beq.n	800dcd8 <__sflush_r+0x34>
 800dd4e:	2b1d      	cmp	r3, #29
 800dd50:	d001      	beq.n	800dd56 <__sflush_r+0xb2>
 800dd52:	2b16      	cmp	r3, #22
 800dd54:	d101      	bne.n	800dd5a <__sflush_r+0xb6>
 800dd56:	602f      	str	r7, [r5, #0]
 800dd58:	e7b1      	b.n	800dcbe <__sflush_r+0x1a>
 800dd5a:	89a3      	ldrh	r3, [r4, #12]
 800dd5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dd60:	81a3      	strh	r3, [r4, #12]
 800dd62:	e7ad      	b.n	800dcc0 <__sflush_r+0x1c>
 800dd64:	690f      	ldr	r7, [r1, #16]
 800dd66:	2f00      	cmp	r7, #0
 800dd68:	d0a9      	beq.n	800dcbe <__sflush_r+0x1a>
 800dd6a:	0793      	lsls	r3, r2, #30
 800dd6c:	680e      	ldr	r6, [r1, #0]
 800dd6e:	bf08      	it	eq
 800dd70:	694b      	ldreq	r3, [r1, #20]
 800dd72:	600f      	str	r7, [r1, #0]
 800dd74:	bf18      	it	ne
 800dd76:	2300      	movne	r3, #0
 800dd78:	eba6 0807 	sub.w	r8, r6, r7
 800dd7c:	608b      	str	r3, [r1, #8]
 800dd7e:	f1b8 0f00 	cmp.w	r8, #0
 800dd82:	dd9c      	ble.n	800dcbe <__sflush_r+0x1a>
 800dd84:	6a21      	ldr	r1, [r4, #32]
 800dd86:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800dd88:	4643      	mov	r3, r8
 800dd8a:	463a      	mov	r2, r7
 800dd8c:	4628      	mov	r0, r5
 800dd8e:	47b0      	blx	r6
 800dd90:	2800      	cmp	r0, #0
 800dd92:	dc06      	bgt.n	800dda2 <__sflush_r+0xfe>
 800dd94:	89a3      	ldrh	r3, [r4, #12]
 800dd96:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dd9a:	81a3      	strh	r3, [r4, #12]
 800dd9c:	f04f 30ff 	mov.w	r0, #4294967295
 800dda0:	e78e      	b.n	800dcc0 <__sflush_r+0x1c>
 800dda2:	4407      	add	r7, r0
 800dda4:	eba8 0800 	sub.w	r8, r8, r0
 800dda8:	e7e9      	b.n	800dd7e <__sflush_r+0xda>
 800ddaa:	bf00      	nop
 800ddac:	20400001 	.word	0x20400001

0800ddb0 <_fflush_r>:
 800ddb0:	b538      	push	{r3, r4, r5, lr}
 800ddb2:	690b      	ldr	r3, [r1, #16]
 800ddb4:	4605      	mov	r5, r0
 800ddb6:	460c      	mov	r4, r1
 800ddb8:	b913      	cbnz	r3, 800ddc0 <_fflush_r+0x10>
 800ddba:	2500      	movs	r5, #0
 800ddbc:	4628      	mov	r0, r5
 800ddbe:	bd38      	pop	{r3, r4, r5, pc}
 800ddc0:	b118      	cbz	r0, 800ddca <_fflush_r+0x1a>
 800ddc2:	6983      	ldr	r3, [r0, #24]
 800ddc4:	b90b      	cbnz	r3, 800ddca <_fflush_r+0x1a>
 800ddc6:	f7ff f8b9 	bl	800cf3c <__sinit>
 800ddca:	4b14      	ldr	r3, [pc, #80]	; (800de1c <_fflush_r+0x6c>)
 800ddcc:	429c      	cmp	r4, r3
 800ddce:	d11b      	bne.n	800de08 <_fflush_r+0x58>
 800ddd0:	686c      	ldr	r4, [r5, #4]
 800ddd2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ddd6:	2b00      	cmp	r3, #0
 800ddd8:	d0ef      	beq.n	800ddba <_fflush_r+0xa>
 800ddda:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800dddc:	07d0      	lsls	r0, r2, #31
 800ddde:	d404      	bmi.n	800ddea <_fflush_r+0x3a>
 800dde0:	0599      	lsls	r1, r3, #22
 800dde2:	d402      	bmi.n	800ddea <_fflush_r+0x3a>
 800dde4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800dde6:	f7ff f947 	bl	800d078 <__retarget_lock_acquire_recursive>
 800ddea:	4628      	mov	r0, r5
 800ddec:	4621      	mov	r1, r4
 800ddee:	f7ff ff59 	bl	800dca4 <__sflush_r>
 800ddf2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ddf4:	07da      	lsls	r2, r3, #31
 800ddf6:	4605      	mov	r5, r0
 800ddf8:	d4e0      	bmi.n	800ddbc <_fflush_r+0xc>
 800ddfa:	89a3      	ldrh	r3, [r4, #12]
 800ddfc:	059b      	lsls	r3, r3, #22
 800ddfe:	d4dd      	bmi.n	800ddbc <_fflush_r+0xc>
 800de00:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800de02:	f7ff f93a 	bl	800d07a <__retarget_lock_release_recursive>
 800de06:	e7d9      	b.n	800ddbc <_fflush_r+0xc>
 800de08:	4b05      	ldr	r3, [pc, #20]	; (800de20 <_fflush_r+0x70>)
 800de0a:	429c      	cmp	r4, r3
 800de0c:	d101      	bne.n	800de12 <_fflush_r+0x62>
 800de0e:	68ac      	ldr	r4, [r5, #8]
 800de10:	e7df      	b.n	800ddd2 <_fflush_r+0x22>
 800de12:	4b04      	ldr	r3, [pc, #16]	; (800de24 <_fflush_r+0x74>)
 800de14:	429c      	cmp	r4, r3
 800de16:	bf08      	it	eq
 800de18:	68ec      	ldreq	r4, [r5, #12]
 800de1a:	e7da      	b.n	800ddd2 <_fflush_r+0x22>
 800de1c:	0800e7a0 	.word	0x0800e7a0
 800de20:	0800e7c0 	.word	0x0800e7c0
 800de24:	0800e780 	.word	0x0800e780

0800de28 <_lseek_r>:
 800de28:	b538      	push	{r3, r4, r5, lr}
 800de2a:	4d07      	ldr	r5, [pc, #28]	; (800de48 <_lseek_r+0x20>)
 800de2c:	4604      	mov	r4, r0
 800de2e:	4608      	mov	r0, r1
 800de30:	4611      	mov	r1, r2
 800de32:	2200      	movs	r2, #0
 800de34:	602a      	str	r2, [r5, #0]
 800de36:	461a      	mov	r2, r3
 800de38:	f7f3 fd92 	bl	8001960 <_lseek>
 800de3c:	1c43      	adds	r3, r0, #1
 800de3e:	d102      	bne.n	800de46 <_lseek_r+0x1e>
 800de40:	682b      	ldr	r3, [r5, #0]
 800de42:	b103      	cbz	r3, 800de46 <_lseek_r+0x1e>
 800de44:	6023      	str	r3, [r4, #0]
 800de46:	bd38      	pop	{r3, r4, r5, pc}
 800de48:	20001744 	.word	0x20001744

0800de4c <__swhatbuf_r>:
 800de4c:	b570      	push	{r4, r5, r6, lr}
 800de4e:	460e      	mov	r6, r1
 800de50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800de54:	2900      	cmp	r1, #0
 800de56:	b096      	sub	sp, #88	; 0x58
 800de58:	4614      	mov	r4, r2
 800de5a:	461d      	mov	r5, r3
 800de5c:	da08      	bge.n	800de70 <__swhatbuf_r+0x24>
 800de5e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800de62:	2200      	movs	r2, #0
 800de64:	602a      	str	r2, [r5, #0]
 800de66:	061a      	lsls	r2, r3, #24
 800de68:	d410      	bmi.n	800de8c <__swhatbuf_r+0x40>
 800de6a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800de6e:	e00e      	b.n	800de8e <__swhatbuf_r+0x42>
 800de70:	466a      	mov	r2, sp
 800de72:	f000 f913 	bl	800e09c <_fstat_r>
 800de76:	2800      	cmp	r0, #0
 800de78:	dbf1      	blt.n	800de5e <__swhatbuf_r+0x12>
 800de7a:	9a01      	ldr	r2, [sp, #4]
 800de7c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800de80:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800de84:	425a      	negs	r2, r3
 800de86:	415a      	adcs	r2, r3
 800de88:	602a      	str	r2, [r5, #0]
 800de8a:	e7ee      	b.n	800de6a <__swhatbuf_r+0x1e>
 800de8c:	2340      	movs	r3, #64	; 0x40
 800de8e:	2000      	movs	r0, #0
 800de90:	6023      	str	r3, [r4, #0]
 800de92:	b016      	add	sp, #88	; 0x58
 800de94:	bd70      	pop	{r4, r5, r6, pc}
	...

0800de98 <__smakebuf_r>:
 800de98:	898b      	ldrh	r3, [r1, #12]
 800de9a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800de9c:	079d      	lsls	r5, r3, #30
 800de9e:	4606      	mov	r6, r0
 800dea0:	460c      	mov	r4, r1
 800dea2:	d507      	bpl.n	800deb4 <__smakebuf_r+0x1c>
 800dea4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800dea8:	6023      	str	r3, [r4, #0]
 800deaa:	6123      	str	r3, [r4, #16]
 800deac:	2301      	movs	r3, #1
 800deae:	6163      	str	r3, [r4, #20]
 800deb0:	b002      	add	sp, #8
 800deb2:	bd70      	pop	{r4, r5, r6, pc}
 800deb4:	ab01      	add	r3, sp, #4
 800deb6:	466a      	mov	r2, sp
 800deb8:	f7ff ffc8 	bl	800de4c <__swhatbuf_r>
 800debc:	9900      	ldr	r1, [sp, #0]
 800debe:	4605      	mov	r5, r0
 800dec0:	4630      	mov	r0, r6
 800dec2:	f7ff f8fb 	bl	800d0bc <_malloc_r>
 800dec6:	b948      	cbnz	r0, 800dedc <__smakebuf_r+0x44>
 800dec8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800decc:	059a      	lsls	r2, r3, #22
 800dece:	d4ef      	bmi.n	800deb0 <__smakebuf_r+0x18>
 800ded0:	f023 0303 	bic.w	r3, r3, #3
 800ded4:	f043 0302 	orr.w	r3, r3, #2
 800ded8:	81a3      	strh	r3, [r4, #12]
 800deda:	e7e3      	b.n	800dea4 <__smakebuf_r+0xc>
 800dedc:	4b0d      	ldr	r3, [pc, #52]	; (800df14 <__smakebuf_r+0x7c>)
 800dede:	62b3      	str	r3, [r6, #40]	; 0x28
 800dee0:	89a3      	ldrh	r3, [r4, #12]
 800dee2:	6020      	str	r0, [r4, #0]
 800dee4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dee8:	81a3      	strh	r3, [r4, #12]
 800deea:	9b00      	ldr	r3, [sp, #0]
 800deec:	6163      	str	r3, [r4, #20]
 800deee:	9b01      	ldr	r3, [sp, #4]
 800def0:	6120      	str	r0, [r4, #16]
 800def2:	b15b      	cbz	r3, 800df0c <__smakebuf_r+0x74>
 800def4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800def8:	4630      	mov	r0, r6
 800defa:	f000 f8e1 	bl	800e0c0 <_isatty_r>
 800defe:	b128      	cbz	r0, 800df0c <__smakebuf_r+0x74>
 800df00:	89a3      	ldrh	r3, [r4, #12]
 800df02:	f023 0303 	bic.w	r3, r3, #3
 800df06:	f043 0301 	orr.w	r3, r3, #1
 800df0a:	81a3      	strh	r3, [r4, #12]
 800df0c:	89a0      	ldrh	r0, [r4, #12]
 800df0e:	4305      	orrs	r5, r0
 800df10:	81a5      	strh	r5, [r4, #12]
 800df12:	e7cd      	b.n	800deb0 <__smakebuf_r+0x18>
 800df14:	0800ced5 	.word	0x0800ced5

0800df18 <memcpy>:
 800df18:	440a      	add	r2, r1
 800df1a:	4291      	cmp	r1, r2
 800df1c:	f100 33ff 	add.w	r3, r0, #4294967295
 800df20:	d100      	bne.n	800df24 <memcpy+0xc>
 800df22:	4770      	bx	lr
 800df24:	b510      	push	{r4, lr}
 800df26:	f811 4b01 	ldrb.w	r4, [r1], #1
 800df2a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800df2e:	4291      	cmp	r1, r2
 800df30:	d1f9      	bne.n	800df26 <memcpy+0xe>
 800df32:	bd10      	pop	{r4, pc}

0800df34 <memmove>:
 800df34:	4288      	cmp	r0, r1
 800df36:	b510      	push	{r4, lr}
 800df38:	eb01 0402 	add.w	r4, r1, r2
 800df3c:	d902      	bls.n	800df44 <memmove+0x10>
 800df3e:	4284      	cmp	r4, r0
 800df40:	4623      	mov	r3, r4
 800df42:	d807      	bhi.n	800df54 <memmove+0x20>
 800df44:	1e43      	subs	r3, r0, #1
 800df46:	42a1      	cmp	r1, r4
 800df48:	d008      	beq.n	800df5c <memmove+0x28>
 800df4a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800df4e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800df52:	e7f8      	b.n	800df46 <memmove+0x12>
 800df54:	4402      	add	r2, r0
 800df56:	4601      	mov	r1, r0
 800df58:	428a      	cmp	r2, r1
 800df5a:	d100      	bne.n	800df5e <memmove+0x2a>
 800df5c:	bd10      	pop	{r4, pc}
 800df5e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800df62:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800df66:	e7f7      	b.n	800df58 <memmove+0x24>

0800df68 <__malloc_lock>:
 800df68:	4801      	ldr	r0, [pc, #4]	; (800df70 <__malloc_lock+0x8>)
 800df6a:	f7ff b885 	b.w	800d078 <__retarget_lock_acquire_recursive>
 800df6e:	bf00      	nop
 800df70:	20001738 	.word	0x20001738

0800df74 <__malloc_unlock>:
 800df74:	4801      	ldr	r0, [pc, #4]	; (800df7c <__malloc_unlock+0x8>)
 800df76:	f7ff b880 	b.w	800d07a <__retarget_lock_release_recursive>
 800df7a:	bf00      	nop
 800df7c:	20001738 	.word	0x20001738

0800df80 <_free_r>:
 800df80:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800df82:	2900      	cmp	r1, #0
 800df84:	d044      	beq.n	800e010 <_free_r+0x90>
 800df86:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800df8a:	9001      	str	r0, [sp, #4]
 800df8c:	2b00      	cmp	r3, #0
 800df8e:	f1a1 0404 	sub.w	r4, r1, #4
 800df92:	bfb8      	it	lt
 800df94:	18e4      	addlt	r4, r4, r3
 800df96:	f7ff ffe7 	bl	800df68 <__malloc_lock>
 800df9a:	4a1e      	ldr	r2, [pc, #120]	; (800e014 <_free_r+0x94>)
 800df9c:	9801      	ldr	r0, [sp, #4]
 800df9e:	6813      	ldr	r3, [r2, #0]
 800dfa0:	b933      	cbnz	r3, 800dfb0 <_free_r+0x30>
 800dfa2:	6063      	str	r3, [r4, #4]
 800dfa4:	6014      	str	r4, [r2, #0]
 800dfa6:	b003      	add	sp, #12
 800dfa8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800dfac:	f7ff bfe2 	b.w	800df74 <__malloc_unlock>
 800dfb0:	42a3      	cmp	r3, r4
 800dfb2:	d908      	bls.n	800dfc6 <_free_r+0x46>
 800dfb4:	6825      	ldr	r5, [r4, #0]
 800dfb6:	1961      	adds	r1, r4, r5
 800dfb8:	428b      	cmp	r3, r1
 800dfba:	bf01      	itttt	eq
 800dfbc:	6819      	ldreq	r1, [r3, #0]
 800dfbe:	685b      	ldreq	r3, [r3, #4]
 800dfc0:	1949      	addeq	r1, r1, r5
 800dfc2:	6021      	streq	r1, [r4, #0]
 800dfc4:	e7ed      	b.n	800dfa2 <_free_r+0x22>
 800dfc6:	461a      	mov	r2, r3
 800dfc8:	685b      	ldr	r3, [r3, #4]
 800dfca:	b10b      	cbz	r3, 800dfd0 <_free_r+0x50>
 800dfcc:	42a3      	cmp	r3, r4
 800dfce:	d9fa      	bls.n	800dfc6 <_free_r+0x46>
 800dfd0:	6811      	ldr	r1, [r2, #0]
 800dfd2:	1855      	adds	r5, r2, r1
 800dfd4:	42a5      	cmp	r5, r4
 800dfd6:	d10b      	bne.n	800dff0 <_free_r+0x70>
 800dfd8:	6824      	ldr	r4, [r4, #0]
 800dfda:	4421      	add	r1, r4
 800dfdc:	1854      	adds	r4, r2, r1
 800dfde:	42a3      	cmp	r3, r4
 800dfe0:	6011      	str	r1, [r2, #0]
 800dfe2:	d1e0      	bne.n	800dfa6 <_free_r+0x26>
 800dfe4:	681c      	ldr	r4, [r3, #0]
 800dfe6:	685b      	ldr	r3, [r3, #4]
 800dfe8:	6053      	str	r3, [r2, #4]
 800dfea:	4421      	add	r1, r4
 800dfec:	6011      	str	r1, [r2, #0]
 800dfee:	e7da      	b.n	800dfa6 <_free_r+0x26>
 800dff0:	d902      	bls.n	800dff8 <_free_r+0x78>
 800dff2:	230c      	movs	r3, #12
 800dff4:	6003      	str	r3, [r0, #0]
 800dff6:	e7d6      	b.n	800dfa6 <_free_r+0x26>
 800dff8:	6825      	ldr	r5, [r4, #0]
 800dffa:	1961      	adds	r1, r4, r5
 800dffc:	428b      	cmp	r3, r1
 800dffe:	bf04      	itt	eq
 800e000:	6819      	ldreq	r1, [r3, #0]
 800e002:	685b      	ldreq	r3, [r3, #4]
 800e004:	6063      	str	r3, [r4, #4]
 800e006:	bf04      	itt	eq
 800e008:	1949      	addeq	r1, r1, r5
 800e00a:	6021      	streq	r1, [r4, #0]
 800e00c:	6054      	str	r4, [r2, #4]
 800e00e:	e7ca      	b.n	800dfa6 <_free_r+0x26>
 800e010:	b003      	add	sp, #12
 800e012:	bd30      	pop	{r4, r5, pc}
 800e014:	2000173c 	.word	0x2000173c

0800e018 <_realloc_r>:
 800e018:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e01c:	4680      	mov	r8, r0
 800e01e:	4614      	mov	r4, r2
 800e020:	460e      	mov	r6, r1
 800e022:	b921      	cbnz	r1, 800e02e <_realloc_r+0x16>
 800e024:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e028:	4611      	mov	r1, r2
 800e02a:	f7ff b847 	b.w	800d0bc <_malloc_r>
 800e02e:	b92a      	cbnz	r2, 800e03c <_realloc_r+0x24>
 800e030:	f7ff ffa6 	bl	800df80 <_free_r>
 800e034:	4625      	mov	r5, r4
 800e036:	4628      	mov	r0, r5
 800e038:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e03c:	f000 f850 	bl	800e0e0 <_malloc_usable_size_r>
 800e040:	4284      	cmp	r4, r0
 800e042:	4607      	mov	r7, r0
 800e044:	d802      	bhi.n	800e04c <_realloc_r+0x34>
 800e046:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800e04a:	d812      	bhi.n	800e072 <_realloc_r+0x5a>
 800e04c:	4621      	mov	r1, r4
 800e04e:	4640      	mov	r0, r8
 800e050:	f7ff f834 	bl	800d0bc <_malloc_r>
 800e054:	4605      	mov	r5, r0
 800e056:	2800      	cmp	r0, #0
 800e058:	d0ed      	beq.n	800e036 <_realloc_r+0x1e>
 800e05a:	42bc      	cmp	r4, r7
 800e05c:	4622      	mov	r2, r4
 800e05e:	4631      	mov	r1, r6
 800e060:	bf28      	it	cs
 800e062:	463a      	movcs	r2, r7
 800e064:	f7ff ff58 	bl	800df18 <memcpy>
 800e068:	4631      	mov	r1, r6
 800e06a:	4640      	mov	r0, r8
 800e06c:	f7ff ff88 	bl	800df80 <_free_r>
 800e070:	e7e1      	b.n	800e036 <_realloc_r+0x1e>
 800e072:	4635      	mov	r5, r6
 800e074:	e7df      	b.n	800e036 <_realloc_r+0x1e>
	...

0800e078 <_read_r>:
 800e078:	b538      	push	{r3, r4, r5, lr}
 800e07a:	4d07      	ldr	r5, [pc, #28]	; (800e098 <_read_r+0x20>)
 800e07c:	4604      	mov	r4, r0
 800e07e:	4608      	mov	r0, r1
 800e080:	4611      	mov	r1, r2
 800e082:	2200      	movs	r2, #0
 800e084:	602a      	str	r2, [r5, #0]
 800e086:	461a      	mov	r2, r3
 800e088:	f7f3 fc26 	bl	80018d8 <_read>
 800e08c:	1c43      	adds	r3, r0, #1
 800e08e:	d102      	bne.n	800e096 <_read_r+0x1e>
 800e090:	682b      	ldr	r3, [r5, #0]
 800e092:	b103      	cbz	r3, 800e096 <_read_r+0x1e>
 800e094:	6023      	str	r3, [r4, #0]
 800e096:	bd38      	pop	{r3, r4, r5, pc}
 800e098:	20001744 	.word	0x20001744

0800e09c <_fstat_r>:
 800e09c:	b538      	push	{r3, r4, r5, lr}
 800e09e:	4d07      	ldr	r5, [pc, #28]	; (800e0bc <_fstat_r+0x20>)
 800e0a0:	2300      	movs	r3, #0
 800e0a2:	4604      	mov	r4, r0
 800e0a4:	4608      	mov	r0, r1
 800e0a6:	4611      	mov	r1, r2
 800e0a8:	602b      	str	r3, [r5, #0]
 800e0aa:	f7f3 fc3e 	bl	800192a <_fstat>
 800e0ae:	1c43      	adds	r3, r0, #1
 800e0b0:	d102      	bne.n	800e0b8 <_fstat_r+0x1c>
 800e0b2:	682b      	ldr	r3, [r5, #0]
 800e0b4:	b103      	cbz	r3, 800e0b8 <_fstat_r+0x1c>
 800e0b6:	6023      	str	r3, [r4, #0]
 800e0b8:	bd38      	pop	{r3, r4, r5, pc}
 800e0ba:	bf00      	nop
 800e0bc:	20001744 	.word	0x20001744

0800e0c0 <_isatty_r>:
 800e0c0:	b538      	push	{r3, r4, r5, lr}
 800e0c2:	4d06      	ldr	r5, [pc, #24]	; (800e0dc <_isatty_r+0x1c>)
 800e0c4:	2300      	movs	r3, #0
 800e0c6:	4604      	mov	r4, r0
 800e0c8:	4608      	mov	r0, r1
 800e0ca:	602b      	str	r3, [r5, #0]
 800e0cc:	f7f3 fc3d 	bl	800194a <_isatty>
 800e0d0:	1c43      	adds	r3, r0, #1
 800e0d2:	d102      	bne.n	800e0da <_isatty_r+0x1a>
 800e0d4:	682b      	ldr	r3, [r5, #0]
 800e0d6:	b103      	cbz	r3, 800e0da <_isatty_r+0x1a>
 800e0d8:	6023      	str	r3, [r4, #0]
 800e0da:	bd38      	pop	{r3, r4, r5, pc}
 800e0dc:	20001744 	.word	0x20001744

0800e0e0 <_malloc_usable_size_r>:
 800e0e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e0e4:	1f18      	subs	r0, r3, #4
 800e0e6:	2b00      	cmp	r3, #0
 800e0e8:	bfbc      	itt	lt
 800e0ea:	580b      	ldrlt	r3, [r1, r0]
 800e0ec:	18c0      	addlt	r0, r0, r3
 800e0ee:	4770      	bx	lr

0800e0f0 <_init>:
 800e0f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e0f2:	bf00      	nop
 800e0f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e0f6:	bc08      	pop	{r3}
 800e0f8:	469e      	mov	lr, r3
 800e0fa:	4770      	bx	lr

0800e0fc <_fini>:
 800e0fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e0fe:	bf00      	nop
 800e100:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e102:	bc08      	pop	{r3}
 800e104:	469e      	mov	lr, r3
 800e106:	4770      	bx	lr
