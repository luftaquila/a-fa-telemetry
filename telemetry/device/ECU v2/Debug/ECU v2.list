
ECU v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ded0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006c4  0800e060  0800e060  0001e060  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e724  0800e724  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  0800e724  0800e724  0001e724  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e72c  0800e72c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e72c  0800e72c  0001e72c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e730  0800e730  0001e730  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800e734  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          000016c8  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20001738  20001738  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   00021d5a  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004cc6  00000000  00000000  00041dfa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001c48  00000000  00000000  00046ac0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001a18  00000000  00000000  00048708  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00029cf2  00000000  00000000  0004a120  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00028341  00000000  00000000  00073e12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000eb8a2  00000000  00000000  0009c153  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001879f5  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007ecc  00000000  00000000  00187a48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800e048 	.word	0x0800e048

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	0800e048 	.word	0x0800e048

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc2;
ADC_HandleTypeDef hadc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b084      	sub	sp, #16
 8000588:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800058a:	463b      	mov	r3, r7
 800058c:	2200      	movs	r2, #0
 800058e:	601a      	str	r2, [r3, #0]
 8000590:	605a      	str	r2, [r3, #4]
 8000592:	609a      	str	r2, [r3, #8]
 8000594:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000596:	4b21      	ldr	r3, [pc, #132]	; (800061c <MX_ADC1_Init+0x98>)
 8000598:	4a21      	ldr	r2, [pc, #132]	; (8000620 <MX_ADC1_Init+0x9c>)
 800059a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800059c:	4b1f      	ldr	r3, [pc, #124]	; (800061c <MX_ADC1_Init+0x98>)
 800059e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80005a2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80005a4:	4b1d      	ldr	r3, [pc, #116]	; (800061c <MX_ADC1_Init+0x98>)
 80005a6:	2200      	movs	r2, #0
 80005a8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80005aa:	4b1c      	ldr	r3, [pc, #112]	; (800061c <MX_ADC1_Init+0x98>)
 80005ac:	2200      	movs	r2, #0
 80005ae:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80005b0:	4b1a      	ldr	r3, [pc, #104]	; (800061c <MX_ADC1_Init+0x98>)
 80005b2:	2200      	movs	r2, #0
 80005b4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005b6:	4b19      	ldr	r3, [pc, #100]	; (800061c <MX_ADC1_Init+0x98>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005be:	4b17      	ldr	r3, [pc, #92]	; (800061c <MX_ADC1_Init+0x98>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005c4:	4b15      	ldr	r3, [pc, #84]	; (800061c <MX_ADC1_Init+0x98>)
 80005c6:	4a17      	ldr	r2, [pc, #92]	; (8000624 <MX_ADC1_Init+0xa0>)
 80005c8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005ca:	4b14      	ldr	r3, [pc, #80]	; (800061c <MX_ADC1_Init+0x98>)
 80005cc:	2200      	movs	r2, #0
 80005ce:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80005d0:	4b12      	ldr	r3, [pc, #72]	; (800061c <MX_ADC1_Init+0x98>)
 80005d2:	2201      	movs	r2, #1
 80005d4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80005d6:	4b11      	ldr	r3, [pc, #68]	; (800061c <MX_ADC1_Init+0x98>)
 80005d8:	2200      	movs	r2, #0
 80005da:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80005de:	4b0f      	ldr	r3, [pc, #60]	; (800061c <MX_ADC1_Init+0x98>)
 80005e0:	2201      	movs	r2, #1
 80005e2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80005e4:	480d      	ldr	r0, [pc, #52]	; (800061c <MX_ADC1_Init+0x98>)
 80005e6:	f001 fbef 	bl	8001dc8 <HAL_ADC_Init>
 80005ea:	4603      	mov	r3, r0
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d001      	beq.n	80005f4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80005f0:	f000 fc92 	bl	8000f18 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80005f4:	2310      	movs	r3, #16
 80005f6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80005f8:	2301      	movs	r3, #1
 80005fa:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80005fc:	2300      	movs	r3, #0
 80005fe:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000600:	463b      	mov	r3, r7
 8000602:	4619      	mov	r1, r3
 8000604:	4805      	ldr	r0, [pc, #20]	; (800061c <MX_ADC1_Init+0x98>)
 8000606:	f001 fd51 	bl	80020ac <HAL_ADC_ConfigChannel>
 800060a:	4603      	mov	r3, r0
 800060c:	2b00      	cmp	r3, #0
 800060e:	d001      	beq.n	8000614 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000610:	f000 fc82 	bl	8000f18 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000614:	bf00      	nop
 8000616:	3710      	adds	r7, #16
 8000618:	46bd      	mov	sp, r7
 800061a:	bd80      	pop	{r7, pc}
 800061c:	2000008c 	.word	0x2000008c
 8000620:	40012000 	.word	0x40012000
 8000624:	0f000001 	.word	0x0f000001

08000628 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b084      	sub	sp, #16
 800062c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800062e:	463b      	mov	r3, r7
 8000630:	2200      	movs	r2, #0
 8000632:	601a      	str	r2, [r3, #0]
 8000634:	605a      	str	r2, [r3, #4]
 8000636:	609a      	str	r2, [r3, #8]
 8000638:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 800063a:	4b21      	ldr	r3, [pc, #132]	; (80006c0 <MX_ADC2_Init+0x98>)
 800063c:	4a21      	ldr	r2, [pc, #132]	; (80006c4 <MX_ADC2_Init+0x9c>)
 800063e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000640:	4b1f      	ldr	r3, [pc, #124]	; (80006c0 <MX_ADC2_Init+0x98>)
 8000642:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000646:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000648:	4b1d      	ldr	r3, [pc, #116]	; (80006c0 <MX_ADC2_Init+0x98>)
 800064a:	2200      	movs	r2, #0
 800064c:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 800064e:	4b1c      	ldr	r3, [pc, #112]	; (80006c0 <MX_ADC2_Init+0x98>)
 8000650:	2200      	movs	r2, #0
 8000652:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000654:	4b1a      	ldr	r3, [pc, #104]	; (80006c0 <MX_ADC2_Init+0x98>)
 8000656:	2200      	movs	r2, #0
 8000658:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800065a:	4b19      	ldr	r3, [pc, #100]	; (80006c0 <MX_ADC2_Init+0x98>)
 800065c:	2200      	movs	r2, #0
 800065e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000662:	4b17      	ldr	r3, [pc, #92]	; (80006c0 <MX_ADC2_Init+0x98>)
 8000664:	2200      	movs	r2, #0
 8000666:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000668:	4b15      	ldr	r3, [pc, #84]	; (80006c0 <MX_ADC2_Init+0x98>)
 800066a:	4a17      	ldr	r2, [pc, #92]	; (80006c8 <MX_ADC2_Init+0xa0>)
 800066c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800066e:	4b14      	ldr	r3, [pc, #80]	; (80006c0 <MX_ADC2_Init+0x98>)
 8000670:	2200      	movs	r2, #0
 8000672:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8000674:	4b12      	ldr	r3, [pc, #72]	; (80006c0 <MX_ADC2_Init+0x98>)
 8000676:	2201      	movs	r2, #1
 8000678:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 800067a:	4b11      	ldr	r3, [pc, #68]	; (80006c0 <MX_ADC2_Init+0x98>)
 800067c:	2200      	movs	r2, #0
 800067e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000682:	4b0f      	ldr	r3, [pc, #60]	; (80006c0 <MX_ADC2_Init+0x98>)
 8000684:	2201      	movs	r2, #1
 8000686:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000688:	480d      	ldr	r0, [pc, #52]	; (80006c0 <MX_ADC2_Init+0x98>)
 800068a:	f001 fb9d 	bl	8001dc8 <HAL_ADC_Init>
 800068e:	4603      	mov	r3, r0
 8000690:	2b00      	cmp	r3, #0
 8000692:	d001      	beq.n	8000698 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8000694:	f000 fc40 	bl	8000f18 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000698:	2300      	movs	r3, #0
 800069a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800069c:	2301      	movs	r3, #1
 800069e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80006a0:	2300      	movs	r3, #0
 80006a2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80006a4:	463b      	mov	r3, r7
 80006a6:	4619      	mov	r1, r3
 80006a8:	4805      	ldr	r0, [pc, #20]	; (80006c0 <MX_ADC2_Init+0x98>)
 80006aa:	f001 fcff 	bl	80020ac <HAL_ADC_ConfigChannel>
 80006ae:	4603      	mov	r3, r0
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d001      	beq.n	80006b8 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 80006b4:	f000 fc30 	bl	8000f18 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80006b8:	bf00      	nop
 80006ba:	3710      	adds	r7, #16
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}
 80006c0:	200000d4 	.word	0x200000d4
 80006c4:	40012100 	.word	0x40012100
 80006c8:	0f000001 	.word	0x0f000001

080006cc <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b084      	sub	sp, #16
 80006d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006d2:	463b      	mov	r3, r7
 80006d4:	2200      	movs	r2, #0
 80006d6:	601a      	str	r2, [r3, #0]
 80006d8:	605a      	str	r2, [r3, #4]
 80006da:	609a      	str	r2, [r3, #8]
 80006dc:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 80006de:	4b21      	ldr	r3, [pc, #132]	; (8000764 <MX_ADC3_Init+0x98>)
 80006e0:	4a21      	ldr	r2, [pc, #132]	; (8000768 <MX_ADC3_Init+0x9c>)
 80006e2:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80006e4:	4b1f      	ldr	r3, [pc, #124]	; (8000764 <MX_ADC3_Init+0x98>)
 80006e6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80006ea:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80006ec:	4b1d      	ldr	r3, [pc, #116]	; (8000764 <MX_ADC3_Init+0x98>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 80006f2:	4b1c      	ldr	r3, [pc, #112]	; (8000764 <MX_ADC3_Init+0x98>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80006f8:	4b1a      	ldr	r3, [pc, #104]	; (8000764 <MX_ADC3_Init+0x98>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80006fe:	4b19      	ldr	r3, [pc, #100]	; (8000764 <MX_ADC3_Init+0x98>)
 8000700:	2200      	movs	r2, #0
 8000702:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000706:	4b17      	ldr	r3, [pc, #92]	; (8000764 <MX_ADC3_Init+0x98>)
 8000708:	2200      	movs	r2, #0
 800070a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800070c:	4b15      	ldr	r3, [pc, #84]	; (8000764 <MX_ADC3_Init+0x98>)
 800070e:	4a17      	ldr	r2, [pc, #92]	; (800076c <MX_ADC3_Init+0xa0>)
 8000710:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000712:	4b14      	ldr	r3, [pc, #80]	; (8000764 <MX_ADC3_Init+0x98>)
 8000714:	2200      	movs	r2, #0
 8000716:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8000718:	4b12      	ldr	r3, [pc, #72]	; (8000764 <MX_ADC3_Init+0x98>)
 800071a:	2201      	movs	r2, #1
 800071c:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 800071e:	4b11      	ldr	r3, [pc, #68]	; (8000764 <MX_ADC3_Init+0x98>)
 8000720:	2200      	movs	r2, #0
 8000722:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000726:	4b0f      	ldr	r3, [pc, #60]	; (8000764 <MX_ADC3_Init+0x98>)
 8000728:	2201      	movs	r2, #1
 800072a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800072c:	480d      	ldr	r0, [pc, #52]	; (8000764 <MX_ADC3_Init+0x98>)
 800072e:	f001 fb4b 	bl	8001dc8 <HAL_ADC_Init>
 8000732:	4603      	mov	r3, r0
 8000734:	2b00      	cmp	r3, #0
 8000736:	d001      	beq.n	800073c <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8000738:	f000 fbee 	bl	8000f18 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 800073c:	230a      	movs	r3, #10
 800073e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000740:	2301      	movs	r3, #1
 8000742:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000744:	2300      	movs	r3, #0
 8000746:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000748:	463b      	mov	r3, r7
 800074a:	4619      	mov	r1, r3
 800074c:	4805      	ldr	r0, [pc, #20]	; (8000764 <MX_ADC3_Init+0x98>)
 800074e:	f001 fcad 	bl	80020ac <HAL_ADC_ConfigChannel>
 8000752:	4603      	mov	r3, r0
 8000754:	2b00      	cmp	r3, #0
 8000756:	d001      	beq.n	800075c <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8000758:	f000 fbde 	bl	8000f18 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 800075c:	bf00      	nop
 800075e:	3710      	adds	r7, #16
 8000760:	46bd      	mov	sp, r7
 8000762:	bd80      	pop	{r7, pc}
 8000764:	2000011c 	.word	0x2000011c
 8000768:	40012200 	.word	0x40012200
 800076c:	0f000001 	.word	0x0f000001

08000770 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b08c      	sub	sp, #48	; 0x30
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000778:	f107 031c 	add.w	r3, r7, #28
 800077c:	2200      	movs	r2, #0
 800077e:	601a      	str	r2, [r3, #0]
 8000780:	605a      	str	r2, [r3, #4]
 8000782:	609a      	str	r2, [r3, #8]
 8000784:	60da      	str	r2, [r3, #12]
 8000786:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	4a44      	ldr	r2, [pc, #272]	; (80008a0 <HAL_ADC_MspInit+0x130>)
 800078e:	4293      	cmp	r3, r2
 8000790:	d116      	bne.n	80007c0 <HAL_ADC_MspInit+0x50>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000792:	2300      	movs	r3, #0
 8000794:	61bb      	str	r3, [r7, #24]
 8000796:	4b43      	ldr	r3, [pc, #268]	; (80008a4 <HAL_ADC_MspInit+0x134>)
 8000798:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800079a:	4a42      	ldr	r2, [pc, #264]	; (80008a4 <HAL_ADC_MspInit+0x134>)
 800079c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80007a0:	6453      	str	r3, [r2, #68]	; 0x44
 80007a2:	4b40      	ldr	r3, [pc, #256]	; (80008a4 <HAL_ADC_MspInit+0x134>)
 80007a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80007aa:	61bb      	str	r3, [r7, #24]
 80007ac:	69bb      	ldr	r3, [r7, #24]

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80007ae:	2200      	movs	r2, #0
 80007b0:	2100      	movs	r1, #0
 80007b2:	2012      	movs	r0, #18
 80007b4:	f002 fab1 	bl	8002d1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80007b8:	2012      	movs	r0, #18
 80007ba:	f002 faca 	bl	8002d52 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 80007be:	e06a      	b.n	8000896 <HAL_ADC_MspInit+0x126>
  else if(adcHandle->Instance==ADC2)
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	4a38      	ldr	r2, [pc, #224]	; (80008a8 <HAL_ADC_MspInit+0x138>)
 80007c6:	4293      	cmp	r3, r2
 80007c8:	d130      	bne.n	800082c <HAL_ADC_MspInit+0xbc>
    __HAL_RCC_ADC2_CLK_ENABLE();
 80007ca:	2300      	movs	r3, #0
 80007cc:	617b      	str	r3, [r7, #20]
 80007ce:	4b35      	ldr	r3, [pc, #212]	; (80008a4 <HAL_ADC_MspInit+0x134>)
 80007d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007d2:	4a34      	ldr	r2, [pc, #208]	; (80008a4 <HAL_ADC_MspInit+0x134>)
 80007d4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80007d8:	6453      	str	r3, [r2, #68]	; 0x44
 80007da:	4b32      	ldr	r3, [pc, #200]	; (80008a4 <HAL_ADC_MspInit+0x134>)
 80007dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007de:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80007e2:	617b      	str	r3, [r7, #20]
 80007e4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007e6:	2300      	movs	r3, #0
 80007e8:	613b      	str	r3, [r7, #16]
 80007ea:	4b2e      	ldr	r3, [pc, #184]	; (80008a4 <HAL_ADC_MspInit+0x134>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ee:	4a2d      	ldr	r2, [pc, #180]	; (80008a4 <HAL_ADC_MspInit+0x134>)
 80007f0:	f043 0301 	orr.w	r3, r3, #1
 80007f4:	6313      	str	r3, [r2, #48]	; 0x30
 80007f6:	4b2b      	ldr	r3, [pc, #172]	; (80008a4 <HAL_ADC_MspInit+0x134>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fa:	f003 0301 	and.w	r3, r3, #1
 80007fe:	613b      	str	r3, [r7, #16]
 8000800:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000802:	230f      	movs	r3, #15
 8000804:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000806:	2303      	movs	r3, #3
 8000808:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080a:	2300      	movs	r3, #0
 800080c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800080e:	f107 031c 	add.w	r3, r7, #28
 8000812:	4619      	mov	r1, r3
 8000814:	4825      	ldr	r0, [pc, #148]	; (80008ac <HAL_ADC_MspInit+0x13c>)
 8000816:	f002 fed3 	bl	80035c0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800081a:	2200      	movs	r2, #0
 800081c:	2100      	movs	r1, #0
 800081e:	2012      	movs	r0, #18
 8000820:	f002 fa7b 	bl	8002d1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000824:	2012      	movs	r0, #18
 8000826:	f002 fa94 	bl	8002d52 <HAL_NVIC_EnableIRQ>
}
 800082a:	e034      	b.n	8000896 <HAL_ADC_MspInit+0x126>
  else if(adcHandle->Instance==ADC3)
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	4a1f      	ldr	r2, [pc, #124]	; (80008b0 <HAL_ADC_MspInit+0x140>)
 8000832:	4293      	cmp	r3, r2
 8000834:	d12f      	bne.n	8000896 <HAL_ADC_MspInit+0x126>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8000836:	2300      	movs	r3, #0
 8000838:	60fb      	str	r3, [r7, #12]
 800083a:	4b1a      	ldr	r3, [pc, #104]	; (80008a4 <HAL_ADC_MspInit+0x134>)
 800083c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800083e:	4a19      	ldr	r2, [pc, #100]	; (80008a4 <HAL_ADC_MspInit+0x134>)
 8000840:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000844:	6453      	str	r3, [r2, #68]	; 0x44
 8000846:	4b17      	ldr	r3, [pc, #92]	; (80008a4 <HAL_ADC_MspInit+0x134>)
 8000848:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800084a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800084e:	60fb      	str	r3, [r7, #12]
 8000850:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000852:	2300      	movs	r3, #0
 8000854:	60bb      	str	r3, [r7, #8]
 8000856:	4b13      	ldr	r3, [pc, #76]	; (80008a4 <HAL_ADC_MspInit+0x134>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085a:	4a12      	ldr	r2, [pc, #72]	; (80008a4 <HAL_ADC_MspInit+0x134>)
 800085c:	f043 0304 	orr.w	r3, r3, #4
 8000860:	6313      	str	r3, [r2, #48]	; 0x30
 8000862:	4b10      	ldr	r3, [pc, #64]	; (80008a4 <HAL_ADC_MspInit+0x134>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000866:	f003 0304 	and.w	r3, r3, #4
 800086a:	60bb      	str	r3, [r7, #8]
 800086c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 800086e:	230f      	movs	r3, #15
 8000870:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000872:	2303      	movs	r3, #3
 8000874:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000876:	2300      	movs	r3, #0
 8000878:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800087a:	f107 031c 	add.w	r3, r7, #28
 800087e:	4619      	mov	r1, r3
 8000880:	480c      	ldr	r0, [pc, #48]	; (80008b4 <HAL_ADC_MspInit+0x144>)
 8000882:	f002 fe9d 	bl	80035c0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8000886:	2200      	movs	r2, #0
 8000888:	2100      	movs	r1, #0
 800088a:	2012      	movs	r0, #18
 800088c:	f002 fa45 	bl	8002d1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000890:	2012      	movs	r0, #18
 8000892:	f002 fa5e 	bl	8002d52 <HAL_NVIC_EnableIRQ>
}
 8000896:	bf00      	nop
 8000898:	3730      	adds	r7, #48	; 0x30
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	40012000 	.word	0x40012000
 80008a4:	40023800 	.word	0x40023800
 80008a8:	40012100 	.word	0x40012100
 80008ac:	40020000 	.word	0x40020000
 80008b0:	40012200 	.word	0x40012200
 80008b4:	40020800 	.word	0x40020800

080008b8 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80008bc:	4b18      	ldr	r3, [pc, #96]	; (8000920 <MX_CAN1_Init+0x68>)
 80008be:	4a19      	ldr	r2, [pc, #100]	; (8000924 <MX_CAN1_Init+0x6c>)
 80008c0:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 12;
 80008c2:	4b17      	ldr	r3, [pc, #92]	; (8000920 <MX_CAN1_Init+0x68>)
 80008c4:	220c      	movs	r2, #12
 80008c6:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_SILENT;
 80008c8:	4b15      	ldr	r3, [pc, #84]	; (8000920 <MX_CAN1_Init+0x68>)
 80008ca:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80008ce:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80008d0:	4b13      	ldr	r3, [pc, #76]	; (8000920 <MX_CAN1_Init+0x68>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_11TQ;
 80008d6:	4b12      	ldr	r3, [pc, #72]	; (8000920 <MX_CAN1_Init+0x68>)
 80008d8:	f44f 2220 	mov.w	r2, #655360	; 0xa0000
 80008dc:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 80008de:	4b10      	ldr	r3, [pc, #64]	; (8000920 <MX_CAN1_Init+0x68>)
 80008e0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80008e4:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80008e6:	4b0e      	ldr	r3, [pc, #56]	; (8000920 <MX_CAN1_Init+0x68>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = ENABLE;
 80008ec:	4b0c      	ldr	r3, [pc, #48]	; (8000920 <MX_CAN1_Init+0x68>)
 80008ee:	2201      	movs	r2, #1
 80008f0:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = ENABLE;
 80008f2:	4b0b      	ldr	r3, [pc, #44]	; (8000920 <MX_CAN1_Init+0x68>)
 80008f4:	2201      	movs	r2, #1
 80008f6:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80008f8:	4b09      	ldr	r3, [pc, #36]	; (8000920 <MX_CAN1_Init+0x68>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80008fe:	4b08      	ldr	r3, [pc, #32]	; (8000920 <MX_CAN1_Init+0x68>)
 8000900:	2200      	movs	r2, #0
 8000902:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000904:	4b06      	ldr	r3, [pc, #24]	; (8000920 <MX_CAN1_Init+0x68>)
 8000906:	2200      	movs	r2, #0
 8000908:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800090a:	4805      	ldr	r0, [pc, #20]	; (8000920 <MX_CAN1_Init+0x68>)
 800090c:	f001 fdf6 	bl	80024fc <HAL_CAN_Init>
 8000910:	4603      	mov	r3, r0
 8000912:	2b00      	cmp	r3, #0
 8000914:	d001      	beq.n	800091a <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 8000916:	f000 faff 	bl	8000f18 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 800091a:	bf00      	nop
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	20000164 	.word	0x20000164
 8000924:	40006400 	.word	0x40006400

08000928 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b08a      	sub	sp, #40	; 0x28
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000930:	f107 0314 	add.w	r3, r7, #20
 8000934:	2200      	movs	r2, #0
 8000936:	601a      	str	r2, [r3, #0]
 8000938:	605a      	str	r2, [r3, #4]
 800093a:	609a      	str	r2, [r3, #8]
 800093c:	60da      	str	r2, [r3, #12]
 800093e:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	4a21      	ldr	r2, [pc, #132]	; (80009cc <HAL_CAN_MspInit+0xa4>)
 8000946:	4293      	cmp	r3, r2
 8000948:	d13c      	bne.n	80009c4 <HAL_CAN_MspInit+0x9c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800094a:	2300      	movs	r3, #0
 800094c:	613b      	str	r3, [r7, #16]
 800094e:	4b20      	ldr	r3, [pc, #128]	; (80009d0 <HAL_CAN_MspInit+0xa8>)
 8000950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000952:	4a1f      	ldr	r2, [pc, #124]	; (80009d0 <HAL_CAN_MspInit+0xa8>)
 8000954:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000958:	6413      	str	r3, [r2, #64]	; 0x40
 800095a:	4b1d      	ldr	r3, [pc, #116]	; (80009d0 <HAL_CAN_MspInit+0xa8>)
 800095c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800095e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000962:	613b      	str	r3, [r7, #16]
 8000964:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000966:	2300      	movs	r3, #0
 8000968:	60fb      	str	r3, [r7, #12]
 800096a:	4b19      	ldr	r3, [pc, #100]	; (80009d0 <HAL_CAN_MspInit+0xa8>)
 800096c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096e:	4a18      	ldr	r2, [pc, #96]	; (80009d0 <HAL_CAN_MspInit+0xa8>)
 8000970:	f043 0301 	orr.w	r3, r3, #1
 8000974:	6313      	str	r3, [r2, #48]	; 0x30
 8000976:	4b16      	ldr	r3, [pc, #88]	; (80009d0 <HAL_CAN_MspInit+0xa8>)
 8000978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097a:	f003 0301 	and.w	r3, r3, #1
 800097e:	60fb      	str	r3, [r7, #12]
 8000980:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000982:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000986:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000988:	2302      	movs	r3, #2
 800098a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098c:	2300      	movs	r3, #0
 800098e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000990:	2303      	movs	r3, #3
 8000992:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000994:	2309      	movs	r3, #9
 8000996:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000998:	f107 0314 	add.w	r3, r7, #20
 800099c:	4619      	mov	r1, r3
 800099e:	480d      	ldr	r0, [pc, #52]	; (80009d4 <HAL_CAN_MspInit+0xac>)
 80009a0:	f002 fe0e 	bl	80035c0 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);
 80009a4:	2200      	movs	r2, #0
 80009a6:	2100      	movs	r1, #0
 80009a8:	2013      	movs	r0, #19
 80009aa:	f002 f9b6 	bl	8002d1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 80009ae:	2013      	movs	r0, #19
 80009b0:	f002 f9cf 	bl	8002d52 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 80009b4:	2200      	movs	r2, #0
 80009b6:	2100      	movs	r1, #0
 80009b8:	2014      	movs	r0, #20
 80009ba:	f002 f9ae 	bl	8002d1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80009be:	2014      	movs	r0, #20
 80009c0:	f002 f9c7 	bl	8002d52 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 80009c4:	bf00      	nop
 80009c6:	3728      	adds	r7, #40	; 0x28
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bd80      	pop	{r7, pc}
 80009cc:	40006400 	.word	0x40006400
 80009d0:	40023800 	.word	0x40023800
 80009d4:	40020000 	.word	0x40020000

080009d8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b082      	sub	sp, #8
 80009dc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80009de:	2300      	movs	r3, #0
 80009e0:	607b      	str	r3, [r7, #4]
 80009e2:	4b10      	ldr	r3, [pc, #64]	; (8000a24 <MX_DMA_Init+0x4c>)
 80009e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e6:	4a0f      	ldr	r2, [pc, #60]	; (8000a24 <MX_DMA_Init+0x4c>)
 80009e8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80009ec:	6313      	str	r3, [r2, #48]	; 0x30
 80009ee:	4b0d      	ldr	r3, [pc, #52]	; (8000a24 <MX_DMA_Init+0x4c>)
 80009f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80009f6:	607b      	str	r3, [r7, #4]
 80009f8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 80009fa:	2200      	movs	r2, #0
 80009fc:	2100      	movs	r1, #0
 80009fe:	203b      	movs	r0, #59	; 0x3b
 8000a00:	f002 f98b 	bl	8002d1a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8000a04:	203b      	movs	r0, #59	; 0x3b
 8000a06:	f002 f9a4 	bl	8002d52 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	2100      	movs	r1, #0
 8000a0e:	2045      	movs	r0, #69	; 0x45
 8000a10:	f002 f983 	bl	8002d1a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8000a14:	2045      	movs	r0, #69	; 0x45
 8000a16:	f002 f99c 	bl	8002d52 <HAL_NVIC_EnableIRQ>

}
 8000a1a:	bf00      	nop
 8000a1c:	3708      	adds	r7, #8
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	40023800 	.word	0x40023800

08000a28 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b08a      	sub	sp, #40	; 0x28
 8000a2c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a2e:	f107 0314 	add.w	r3, r7, #20
 8000a32:	2200      	movs	r2, #0
 8000a34:	601a      	str	r2, [r3, #0]
 8000a36:	605a      	str	r2, [r3, #4]
 8000a38:	609a      	str	r2, [r3, #8]
 8000a3a:	60da      	str	r2, [r3, #12]
 8000a3c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a3e:	2300      	movs	r3, #0
 8000a40:	613b      	str	r3, [r7, #16]
 8000a42:	4b3a      	ldr	r3, [pc, #232]	; (8000b2c <MX_GPIO_Init+0x104>)
 8000a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a46:	4a39      	ldr	r2, [pc, #228]	; (8000b2c <MX_GPIO_Init+0x104>)
 8000a48:	f043 0304 	orr.w	r3, r3, #4
 8000a4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a4e:	4b37      	ldr	r3, [pc, #220]	; (8000b2c <MX_GPIO_Init+0x104>)
 8000a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a52:	f003 0304 	and.w	r3, r3, #4
 8000a56:	613b      	str	r3, [r7, #16]
 8000a58:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	60fb      	str	r3, [r7, #12]
 8000a5e:	4b33      	ldr	r3, [pc, #204]	; (8000b2c <MX_GPIO_Init+0x104>)
 8000a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a62:	4a32      	ldr	r2, [pc, #200]	; (8000b2c <MX_GPIO_Init+0x104>)
 8000a64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a68:	6313      	str	r3, [r2, #48]	; 0x30
 8000a6a:	4b30      	ldr	r3, [pc, #192]	; (8000b2c <MX_GPIO_Init+0x104>)
 8000a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a72:	60fb      	str	r3, [r7, #12]
 8000a74:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a76:	2300      	movs	r3, #0
 8000a78:	60bb      	str	r3, [r7, #8]
 8000a7a:	4b2c      	ldr	r3, [pc, #176]	; (8000b2c <MX_GPIO_Init+0x104>)
 8000a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7e:	4a2b      	ldr	r2, [pc, #172]	; (8000b2c <MX_GPIO_Init+0x104>)
 8000a80:	f043 0301 	orr.w	r3, r3, #1
 8000a84:	6313      	str	r3, [r2, #48]	; 0x30
 8000a86:	4b29      	ldr	r3, [pc, #164]	; (8000b2c <MX_GPIO_Init+0x104>)
 8000a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8a:	f003 0301 	and.w	r3, r3, #1
 8000a8e:	60bb      	str	r3, [r7, #8]
 8000a90:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a92:	2300      	movs	r3, #0
 8000a94:	607b      	str	r3, [r7, #4]
 8000a96:	4b25      	ldr	r3, [pc, #148]	; (8000b2c <MX_GPIO_Init+0x104>)
 8000a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9a:	4a24      	ldr	r2, [pc, #144]	; (8000b2c <MX_GPIO_Init+0x104>)
 8000a9c:	f043 0302 	orr.w	r3, r3, #2
 8000aa0:	6313      	str	r3, [r2, #48]	; 0x30
 8000aa2:	4b22      	ldr	r3, [pc, #136]	; (8000b2c <MX_GPIO_Init+0x104>)
 8000aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa6:	f003 0302 	and.w	r3, r3, #2
 8000aaa:	607b      	str	r3, [r7, #4]
 8000aac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000aae:	2300      	movs	r3, #0
 8000ab0:	603b      	str	r3, [r7, #0]
 8000ab2:	4b1e      	ldr	r3, [pc, #120]	; (8000b2c <MX_GPIO_Init+0x104>)
 8000ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab6:	4a1d      	ldr	r2, [pc, #116]	; (8000b2c <MX_GPIO_Init+0x104>)
 8000ab8:	f043 0308 	orr.w	r3, r3, #8
 8000abc:	6313      	str	r3, [r2, #48]	; 0x30
 8000abe:	4b1b      	ldr	r3, [pc, #108]	; (8000b2c <MX_GPIO_Init+0x104>)
 8000ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac2:	f003 0308 	and.w	r3, r3, #8
 8000ac6:	603b      	str	r3, [r7, #0]
 8000ac8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED1_Pin|LED2_Pin|LED3_Pin|LED4_Pin, GPIO_PIN_RESET);
 8000aca:	2200      	movs	r2, #0
 8000acc:	21f0      	movs	r1, #240	; 0xf0
 8000ace:	4818      	ldr	r0, [pc, #96]	; (8000b30 <MX_GPIO_Init+0x108>)
 8000ad0:	f002 ff2a 	bl	8003928 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin|LED4_Pin;
 8000ad4:	23f0      	movs	r3, #240	; 0xf0
 8000ad6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ad8:	2301      	movs	r3, #1
 8000ada:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000adc:	2302      	movs	r3, #2
 8000ade:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ae4:	f107 0314 	add.w	r3, r7, #20
 8000ae8:	4619      	mov	r1, r3
 8000aea:	4811      	ldr	r0, [pc, #68]	; (8000b30 <MX_GPIO_Init+0x108>)
 8000aec:	f002 fd68 	bl	80035c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SDIO_DETECT_Pin;
 8000af0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000af4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000af6:	2300      	movs	r3, #0
 8000af8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000afa:	2302      	movs	r3, #2
 8000afc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SDIO_DETECT_GPIO_Port, &GPIO_InitStruct);
 8000afe:	f107 0314 	add.w	r3, r7, #20
 8000b02:	4619      	mov	r1, r3
 8000b04:	480b      	ldr	r0, [pc, #44]	; (8000b34 <MX_GPIO_Init+0x10c>)
 8000b06:	f002 fd5b 	bl	80035c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin */
  GPIO_InitStruct.Pin = RTD_ACTIVE_Pin|HV_ACTIVE_Pin|BMS_FAULT_Pin|IMD_FAULT_Pin
 8000b0a:	f44f 43f8 	mov.w	r3, #31744	; 0x7c00
 8000b0e:	617b      	str	r3, [r7, #20]
                          |BSPD_FAULT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b10:	2300      	movs	r3, #0
 8000b12:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b14:	2300      	movs	r3, #0
 8000b16:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b18:	f107 0314 	add.w	r3, r7, #20
 8000b1c:	4619      	mov	r1, r3
 8000b1e:	4806      	ldr	r0, [pc, #24]	; (8000b38 <MX_GPIO_Init+0x110>)
 8000b20:	f002 fd4e 	bl	80035c0 <HAL_GPIO_Init>

}
 8000b24:	bf00      	nop
 8000b26:	3728      	adds	r7, #40	; 0x28
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bd80      	pop	{r7, pc}
 8000b2c:	40023800 	.word	0x40023800
 8000b30:	40020000 	.word	0x40020000
 8000b34:	40020400 	.word	0x40020400
 8000b38:	40020c00 	.word	0x40020c00

08000b3c <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000b40:	4b12      	ldr	r3, [pc, #72]	; (8000b8c <MX_I2C1_Init+0x50>)
 8000b42:	4a13      	ldr	r2, [pc, #76]	; (8000b90 <MX_I2C1_Init+0x54>)
 8000b44:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000b46:	4b11      	ldr	r3, [pc, #68]	; (8000b8c <MX_I2C1_Init+0x50>)
 8000b48:	4a12      	ldr	r2, [pc, #72]	; (8000b94 <MX_I2C1_Init+0x58>)
 8000b4a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000b4c:	4b0f      	ldr	r3, [pc, #60]	; (8000b8c <MX_I2C1_Init+0x50>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000b52:	4b0e      	ldr	r3, [pc, #56]	; (8000b8c <MX_I2C1_Init+0x50>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b58:	4b0c      	ldr	r3, [pc, #48]	; (8000b8c <MX_I2C1_Init+0x50>)
 8000b5a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000b5e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b60:	4b0a      	ldr	r3, [pc, #40]	; (8000b8c <MX_I2C1_Init+0x50>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000b66:	4b09      	ldr	r3, [pc, #36]	; (8000b8c <MX_I2C1_Init+0x50>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b6c:	4b07      	ldr	r3, [pc, #28]	; (8000b8c <MX_I2C1_Init+0x50>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b72:	4b06      	ldr	r3, [pc, #24]	; (8000b8c <MX_I2C1_Init+0x50>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000b78:	4804      	ldr	r0, [pc, #16]	; (8000b8c <MX_I2C1_Init+0x50>)
 8000b7a:	f002 feef 	bl	800395c <HAL_I2C_Init>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d001      	beq.n	8000b88 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000b84:	f000 f9c8 	bl	8000f18 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000b88:	bf00      	nop
 8000b8a:	bd80      	pop	{r7, pc}
 8000b8c:	2000018c 	.word	0x2000018c
 8000b90:	40005400 	.word	0x40005400
 8000b94:	00061a80 	.word	0x00061a80

08000b98 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000b9c:	4b12      	ldr	r3, [pc, #72]	; (8000be8 <MX_I2C2_Init+0x50>)
 8000b9e:	4a13      	ldr	r2, [pc, #76]	; (8000bec <MX_I2C2_Init+0x54>)
 8000ba0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8000ba2:	4b11      	ldr	r3, [pc, #68]	; (8000be8 <MX_I2C2_Init+0x50>)
 8000ba4:	4a12      	ldr	r2, [pc, #72]	; (8000bf0 <MX_I2C2_Init+0x58>)
 8000ba6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000ba8:	4b0f      	ldr	r3, [pc, #60]	; (8000be8 <MX_I2C2_Init+0x50>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000bae:	4b0e      	ldr	r3, [pc, #56]	; (8000be8 <MX_I2C2_Init+0x50>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000bb4:	4b0c      	ldr	r3, [pc, #48]	; (8000be8 <MX_I2C2_Init+0x50>)
 8000bb6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000bba:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000bbc:	4b0a      	ldr	r3, [pc, #40]	; (8000be8 <MX_I2C2_Init+0x50>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000bc2:	4b09      	ldr	r3, [pc, #36]	; (8000be8 <MX_I2C2_Init+0x50>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000bc8:	4b07      	ldr	r3, [pc, #28]	; (8000be8 <MX_I2C2_Init+0x50>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000bce:	4b06      	ldr	r3, [pc, #24]	; (8000be8 <MX_I2C2_Init+0x50>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000bd4:	4804      	ldr	r0, [pc, #16]	; (8000be8 <MX_I2C2_Init+0x50>)
 8000bd6:	f002 fec1 	bl	800395c <HAL_I2C_Init>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d001      	beq.n	8000be4 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000be0:	f000 f99a 	bl	8000f18 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000be4:	bf00      	nop
 8000be6:	bd80      	pop	{r7, pc}
 8000be8:	200001e0 	.word	0x200001e0
 8000bec:	40005800 	.word	0x40005800
 8000bf0:	00061a80 	.word	0x00061a80

08000bf4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b08c      	sub	sp, #48	; 0x30
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bfc:	f107 031c 	add.w	r3, r7, #28
 8000c00:	2200      	movs	r2, #0
 8000c02:	601a      	str	r2, [r3, #0]
 8000c04:	605a      	str	r2, [r3, #4]
 8000c06:	609a      	str	r2, [r3, #8]
 8000c08:	60da      	str	r2, [r3, #12]
 8000c0a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	4a3a      	ldr	r2, [pc, #232]	; (8000cfc <HAL_I2C_MspInit+0x108>)
 8000c12:	4293      	cmp	r3, r2
 8000c14:	d134      	bne.n	8000c80 <HAL_I2C_MspInit+0x8c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c16:	2300      	movs	r3, #0
 8000c18:	61bb      	str	r3, [r7, #24]
 8000c1a:	4b39      	ldr	r3, [pc, #228]	; (8000d00 <HAL_I2C_MspInit+0x10c>)
 8000c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1e:	4a38      	ldr	r2, [pc, #224]	; (8000d00 <HAL_I2C_MspInit+0x10c>)
 8000c20:	f043 0302 	orr.w	r3, r3, #2
 8000c24:	6313      	str	r3, [r2, #48]	; 0x30
 8000c26:	4b36      	ldr	r3, [pc, #216]	; (8000d00 <HAL_I2C_MspInit+0x10c>)
 8000c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2a:	f003 0302 	and.w	r3, r3, #2
 8000c2e:	61bb      	str	r3, [r7, #24]
 8000c30:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000c32:	23c0      	movs	r3, #192	; 0xc0
 8000c34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c36:	2312      	movs	r3, #18
 8000c38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c3e:	2303      	movs	r3, #3
 8000c40:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c42:	2304      	movs	r3, #4
 8000c44:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c46:	f107 031c 	add.w	r3, r7, #28
 8000c4a:	4619      	mov	r1, r3
 8000c4c:	482d      	ldr	r0, [pc, #180]	; (8000d04 <HAL_I2C_MspInit+0x110>)
 8000c4e:	f002 fcb7 	bl	80035c0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c52:	2300      	movs	r3, #0
 8000c54:	617b      	str	r3, [r7, #20]
 8000c56:	4b2a      	ldr	r3, [pc, #168]	; (8000d00 <HAL_I2C_MspInit+0x10c>)
 8000c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c5a:	4a29      	ldr	r2, [pc, #164]	; (8000d00 <HAL_I2C_MspInit+0x10c>)
 8000c5c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c60:	6413      	str	r3, [r2, #64]	; 0x40
 8000c62:	4b27      	ldr	r3, [pc, #156]	; (8000d00 <HAL_I2C_MspInit+0x10c>)
 8000c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c66:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c6a:	617b      	str	r3, [r7, #20]
 8000c6c:	697b      	ldr	r3, [r7, #20]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000c6e:	2200      	movs	r2, #0
 8000c70:	2100      	movs	r1, #0
 8000c72:	201f      	movs	r0, #31
 8000c74:	f002 f851 	bl	8002d1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000c78:	201f      	movs	r0, #31
 8000c7a:	f002 f86a 	bl	8002d52 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8000c7e:	e039      	b.n	8000cf4 <HAL_I2C_MspInit+0x100>
  else if(i2cHandle->Instance==I2C2)
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	4a20      	ldr	r2, [pc, #128]	; (8000d08 <HAL_I2C_MspInit+0x114>)
 8000c86:	4293      	cmp	r3, r2
 8000c88:	d134      	bne.n	8000cf4 <HAL_I2C_MspInit+0x100>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	613b      	str	r3, [r7, #16]
 8000c8e:	4b1c      	ldr	r3, [pc, #112]	; (8000d00 <HAL_I2C_MspInit+0x10c>)
 8000c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c92:	4a1b      	ldr	r2, [pc, #108]	; (8000d00 <HAL_I2C_MspInit+0x10c>)
 8000c94:	f043 0302 	orr.w	r3, r3, #2
 8000c98:	6313      	str	r3, [r2, #48]	; 0x30
 8000c9a:	4b19      	ldr	r3, [pc, #100]	; (8000d00 <HAL_I2C_MspInit+0x10c>)
 8000c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9e:	f003 0302 	and.w	r3, r3, #2
 8000ca2:	613b      	str	r3, [r7, #16]
 8000ca4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000ca6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000caa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000cac:	2312      	movs	r3, #18
 8000cae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cb4:	2303      	movs	r3, #3
 8000cb6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000cb8:	2304      	movs	r3, #4
 8000cba:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cbc:	f107 031c 	add.w	r3, r7, #28
 8000cc0:	4619      	mov	r1, r3
 8000cc2:	4810      	ldr	r0, [pc, #64]	; (8000d04 <HAL_I2C_MspInit+0x110>)
 8000cc4:	f002 fc7c 	bl	80035c0 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000cc8:	2300      	movs	r3, #0
 8000cca:	60fb      	str	r3, [r7, #12]
 8000ccc:	4b0c      	ldr	r3, [pc, #48]	; (8000d00 <HAL_I2C_MspInit+0x10c>)
 8000cce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cd0:	4a0b      	ldr	r2, [pc, #44]	; (8000d00 <HAL_I2C_MspInit+0x10c>)
 8000cd2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000cd6:	6413      	str	r3, [r2, #64]	; 0x40
 8000cd8:	4b09      	ldr	r3, [pc, #36]	; (8000d00 <HAL_I2C_MspInit+0x10c>)
 8000cda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cdc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000ce0:	60fb      	str	r3, [r7, #12]
 8000ce2:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	2100      	movs	r1, #0
 8000ce8:	2021      	movs	r0, #33	; 0x21
 8000cea:	f002 f816 	bl	8002d1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8000cee:	2021      	movs	r0, #33	; 0x21
 8000cf0:	f002 f82f 	bl	8002d52 <HAL_NVIC_EnableIRQ>
}
 8000cf4:	bf00      	nop
 8000cf6:	3730      	adds	r7, #48	; 0x30
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bd80      	pop	{r7, pc}
 8000cfc:	40005400 	.word	0x40005400
 8000d00:	40023800 	.word	0x40023800
 8000d04:	40020400 	.word	0x40020400
 8000d08:	40005800 	.word	0x40005800

08000d0c <_write>:
int ECU_SETUP(void);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, uint8_t *ptr, int len) {
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b084      	sub	sp, #16
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	60f8      	str	r0, [r7, #12]
 8000d14:	60b9      	str	r1, [r7, #8]
 8000d16:	607a      	str	r2, [r7, #4]
   HAL_UART_Transmit(&huart1, (uint8_t *)ptr, (uint16_t)len, 100);
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	b29a      	uxth	r2, r3
 8000d1c:	2364      	movs	r3, #100	; 0x64
 8000d1e:	68b9      	ldr	r1, [r7, #8]
 8000d20:	4803      	ldr	r0, [pc, #12]	; (8000d30 <_write+0x24>)
 8000d22:	f007 f9c4 	bl	80080ae <HAL_UART_Transmit>
   return (len);
 8000d26:	687b      	ldr	r3, [r7, #4]
}
 8000d28:	4618      	mov	r0, r3
 8000d2a:	3710      	adds	r7, #16
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bd80      	pop	{r7, pc}
 8000d30:	20001458 	.word	0x20001458

08000d34 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b084      	sub	sp, #16
 8000d38:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d3a:	f000 ffaf 	bl	8001c9c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d3e:	f000 f86b 	bl	8000e18 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d42:	f7ff fe71 	bl	8000a28 <MX_GPIO_Init>
  MX_DMA_Init();
 8000d46:	f7ff fe47 	bl	80009d8 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000d4a:	f000 fea3 	bl	8001a94 <MX_USART1_UART_Init>
  MX_I2C2_Init();
 8000d4e:	f7ff ff23 	bl	8000b98 <MX_I2C2_Init>
  MX_SDIO_SD_Init();
 8000d52:	f000 fb89 	bl	8001468 <MX_SDIO_SD_Init>
  MX_RTC_Init();
 8000d56:	f000 f9d9 	bl	800110c <MX_RTC_Init>
  MX_FATFS_Init();
 8000d5a:	f008 fea1 	bl	8009aa0 <MX_FATFS_Init>
  MX_ADC1_Init();
 8000d5e:	f7ff fc11 	bl	8000584 <MX_ADC1_Init>
  MX_I2C1_Init();
 8000d62:	f7ff feeb 	bl	8000b3c <MX_I2C1_Init>
  MX_CAN1_Init();
 8000d66:	f7ff fda7 	bl	80008b8 <MX_CAN1_Init>
  MX_ADC2_Init();
 8000d6a:	f7ff fc5d 	bl	8000628 <MX_ADC2_Init>
  MX_ADC3_Init();
 8000d6e:	f7ff fcad 	bl	80006cc <MX_ADC3_Init>
  MX_USART2_UART_Init();
 8000d72:	f000 feb9 	bl	8001ae8 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8000d76:	f000 fe13 	bl	80019a0 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  uint64_t boot = RTC_read();
 8000d7a:	f000 f8fb 	bl	8000f74 <RTC_read>
 8000d7e:	e9c7 0102 	strd	r0, r1, [r7, #8]

  int ret;
  ret = ECU_SETUP();
 8000d82:	f000 f8b7 	bl	8000ef4 <ECU_SETUP>
 8000d86:	6078      	str	r0, [r7, #4]
  if (ret != 0) {
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d00c      	beq.n	8000da8 <main+0x74>
    #ifdef DEBUG_MODE
      printf("[%8lu] [ERR] ECU setup failed: %d\n", HAL_GetTick(), ret);
 8000d8e:	f000 ffeb 	bl	8001d68 <HAL_GetTick>
 8000d92:	4603      	mov	r3, r0
 8000d94:	687a      	ldr	r2, [r7, #4]
 8000d96:	4619      	mov	r1, r3
 8000d98:	4818      	ldr	r0, [pc, #96]	; (8000dfc <main+0xc8>)
 8000d9a:	f00b ffeb 	bl	800cd74 <iprintf>
    #endif
    err = ERR_ECU;
 8000d9e:	4b18      	ldr	r3, [pc, #96]	; (8000e00 <main+0xcc>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	701a      	strb	r2, [r3, #0]
    Error_Handler();
 8000da4:	f000 f8b8 	bl	8000f18 <Error_Handler>
  }

  ret = SD_SETUP(&logfile, boot);
 8000da8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000dac:	4815      	ldr	r0, [pc, #84]	; (8000e04 <main+0xd0>)
 8000dae:	f000 fa31 	bl	8001214 <SD_SETUP>
 8000db2:	6078      	str	r0, [r7, #4]
  if (ret != 0) {
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d007      	beq.n	8000dca <main+0x96>
    #ifdef DEBUG_MODE
      printf("[%8lu] [ERR] SD setup failed: %d\n", HAL_GetTick(), ret);
 8000dba:	f000 ffd5 	bl	8001d68 <HAL_GetTick>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	687a      	ldr	r2, [r7, #4]
 8000dc2:	4619      	mov	r1, r3
 8000dc4:	4810      	ldr	r0, [pc, #64]	; (8000e08 <main+0xd4>)
 8000dc6:	f00b ffd5 	bl	800cd74 <iprintf>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1) {

    int ret = SD_WRITE(&logfile, "test");
 8000dca:	4910      	ldr	r1, [pc, #64]	; (8000e0c <main+0xd8>)
 8000dcc:	480d      	ldr	r0, [pc, #52]	; (8000e04 <main+0xd0>)
 8000dce:	f000 fb0b 	bl	80013e8 <SD_WRITE>
 8000dd2:	6038      	str	r0, [r7, #0]

    if (timer_flag[TIMER_SD]) {
 8000dd4:	4b0e      	ldr	r3, [pc, #56]	; (8000e10 <main+0xdc>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d0f6      	beq.n	8000dca <main+0x96>
      timer_flag[TIMER_SD] = false;
 8000ddc:	4b0c      	ldr	r3, [pc, #48]	; (8000e10 <main+0xdc>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	601a      	str	r2, [r3, #0]
      ret = SD_SYNC(&logfile);
 8000de2:	4808      	ldr	r0, [pc, #32]	; (8000e04 <main+0xd0>)
 8000de4:	f000 fb24 	bl	8001430 <SD_SYNC>
 8000de8:	6038      	str	r0, [r7, #0]
      #ifdef DEBUG_MODE
        printf("[%8lu] [INF] SD SYNC: %d\n", HAL_GetTick(), ret);
 8000dea:	f000 ffbd 	bl	8001d68 <HAL_GetTick>
 8000dee:	4603      	mov	r3, r0
 8000df0:	683a      	ldr	r2, [r7, #0]
 8000df2:	4619      	mov	r1, r3
 8000df4:	4807      	ldr	r0, [pc, #28]	; (8000e14 <main+0xe0>)
 8000df6:	f00b ffbd 	bl	800cd74 <iprintf>
  while (1) {
 8000dfa:	e7e6      	b.n	8000dca <main+0x96>
 8000dfc:	0800e060 	.word	0x0800e060
 8000e00:	20000234 	.word	0x20000234
 8000e04:	20000238 	.word	0x20000238
 8000e08:	0800e084 	.word	0x0800e084
 8000e0c:	0800e0a8 	.word	0x0800e0a8
 8000e10:	20001268 	.word	0x20001268
 8000e14:	0800e0b0 	.word	0x0800e0b0

08000e18 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b094      	sub	sp, #80	; 0x50
 8000e1c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e1e:	f107 0320 	add.w	r3, r7, #32
 8000e22:	2230      	movs	r2, #48	; 0x30
 8000e24:	2100      	movs	r1, #0
 8000e26:	4618      	mov	r0, r3
 8000e28:	f00b ff9c 	bl	800cd64 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e2c:	f107 030c 	add.w	r3, r7, #12
 8000e30:	2200      	movs	r2, #0
 8000e32:	601a      	str	r2, [r3, #0]
 8000e34:	605a      	str	r2, [r3, #4]
 8000e36:	609a      	str	r2, [r3, #8]
 8000e38:	60da      	str	r2, [r3, #12]
 8000e3a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	60bb      	str	r3, [r7, #8]
 8000e40:	4b2a      	ldr	r3, [pc, #168]	; (8000eec <SystemClock_Config+0xd4>)
 8000e42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e44:	4a29      	ldr	r2, [pc, #164]	; (8000eec <SystemClock_Config+0xd4>)
 8000e46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e4a:	6413      	str	r3, [r2, #64]	; 0x40
 8000e4c:	4b27      	ldr	r3, [pc, #156]	; (8000eec <SystemClock_Config+0xd4>)
 8000e4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e54:	60bb      	str	r3, [r7, #8]
 8000e56:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e58:	2300      	movs	r3, #0
 8000e5a:	607b      	str	r3, [r7, #4]
 8000e5c:	4b24      	ldr	r3, [pc, #144]	; (8000ef0 <SystemClock_Config+0xd8>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	4a23      	ldr	r2, [pc, #140]	; (8000ef0 <SystemClock_Config+0xd8>)
 8000e62:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e66:	6013      	str	r3, [r2, #0]
 8000e68:	4b21      	ldr	r3, [pc, #132]	; (8000ef0 <SystemClock_Config+0xd8>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e70:	607b      	str	r3, [r7, #4]
 8000e72:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8000e74:	2305      	movs	r3, #5
 8000e76:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e78:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e7c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000e7e:	2301      	movs	r3, #1
 8000e80:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e82:	2302      	movs	r3, #2
 8000e84:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e86:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000e8a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000e8c:	2304      	movs	r3, #4
 8000e8e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000e90:	23a8      	movs	r3, #168	; 0xa8
 8000e92:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e94:	2302      	movs	r3, #2
 8000e96:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000e98:	2307      	movs	r3, #7
 8000e9a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e9c:	f107 0320 	add.w	r3, r7, #32
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	f004 fa65 	bl	8005370 <HAL_RCC_OscConfig>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d001      	beq.n	8000eb0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000eac:	f000 f834 	bl	8000f18 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000eb0:	230f      	movs	r3, #15
 8000eb2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000eb4:	2302      	movs	r3, #2
 8000eb6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000ebc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000ec0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000ec2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ec6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000ec8:	f107 030c 	add.w	r3, r7, #12
 8000ecc:	2105      	movs	r1, #5
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f004 fcc6 	bl	8005860 <HAL_RCC_ClockConfig>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d001      	beq.n	8000ede <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000eda:	f000 f81d 	bl	8000f18 <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8000ede:	f004 fda5 	bl	8005a2c <HAL_RCC_EnableCSS>
}
 8000ee2:	bf00      	nop
 8000ee4:	3750      	adds	r7, #80	; 0x50
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	40023800 	.word	0x40023800
 8000ef0:	40007000 	.word	0x40007000

08000ef4 <ECU_SETUP>:

/* USER CODE BEGIN 4 */
int ECU_SETUP(void) {
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	af00      	add	r7, sp, #0

  HAL_GPIO_WritePin(GPIOA, LED3_Pin, GPIO_PIN_RESET);
 8000ef8:	2200      	movs	r2, #0
 8000efa:	2140      	movs	r1, #64	; 0x40
 8000efc:	4805      	ldr	r0, [pc, #20]	; (8000f14 <ECU_SETUP+0x20>)
 8000efe:	f002 fd13 	bl	8003928 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, LED4_Pin, GPIO_PIN_SET);
 8000f02:	2201      	movs	r2, #1
 8000f04:	2180      	movs	r1, #128	; 0x80
 8000f06:	4803      	ldr	r0, [pc, #12]	; (8000f14 <ECU_SETUP+0x20>)
 8000f08:	f002 fd0e 	bl	8003928 <HAL_GPIO_WritePin>

  return 0;
 8000f0c:	2300      	movs	r3, #0
}
 8000f0e:	4618      	mov	r0, r3
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	40020000 	.word	0x40020000

08000f18 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  // __disable_irq();

  printf("[%8lu] [ERR] Error Handler code: %d\n", HAL_GetTick(), err);
 8000f1c:	f000 ff24 	bl	8001d68 <HAL_GetTick>
 8000f20:	4603      	mov	r3, r0
 8000f22:	4a11      	ldr	r2, [pc, #68]	; (8000f68 <Error_Handler+0x50>)
 8000f24:	7812      	ldrb	r2, [r2, #0]
 8000f26:	4619      	mov	r1, r3
 8000f28:	4810      	ldr	r0, [pc, #64]	; (8000f6c <Error_Handler+0x54>)
 8000f2a:	f00b ff23 	bl	800cd74 <iprintf>

  while (1) {
    HAL_GPIO_WritePin(GPIOA, LED3_Pin, GPIO_PIN_SET);
 8000f2e:	2201      	movs	r2, #1
 8000f30:	2140      	movs	r1, #64	; 0x40
 8000f32:	480f      	ldr	r0, [pc, #60]	; (8000f70 <Error_Handler+0x58>)
 8000f34:	f002 fcf8 	bl	8003928 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, LED4_Pin, GPIO_PIN_RESET);
 8000f38:	2200      	movs	r2, #0
 8000f3a:	2180      	movs	r1, #128	; 0x80
 8000f3c:	480c      	ldr	r0, [pc, #48]	; (8000f70 <Error_Handler+0x58>)
 8000f3e:	f002 fcf3 	bl	8003928 <HAL_GPIO_WritePin>
    HAL_Delay(500);
 8000f42:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000f46:	f000 ff1b 	bl	8001d80 <HAL_Delay>
    HAL_GPIO_WritePin(GPIOA, LED3_Pin, GPIO_PIN_RESET);
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	2140      	movs	r1, #64	; 0x40
 8000f4e:	4808      	ldr	r0, [pc, #32]	; (8000f70 <Error_Handler+0x58>)
 8000f50:	f002 fcea 	bl	8003928 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, LED4_Pin, GPIO_PIN_SET);
 8000f54:	2201      	movs	r2, #1
 8000f56:	2180      	movs	r1, #128	; 0x80
 8000f58:	4805      	ldr	r0, [pc, #20]	; (8000f70 <Error_Handler+0x58>)
 8000f5a:	f002 fce5 	bl	8003928 <HAL_GPIO_WritePin>
    HAL_Delay(500);
 8000f5e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000f62:	f000 ff0d 	bl	8001d80 <HAL_Delay>
    HAL_GPIO_WritePin(GPIOA, LED3_Pin, GPIO_PIN_SET);
 8000f66:	e7e2      	b.n	8000f2e <Error_Handler+0x16>
 8000f68:	20000234 	.word	0x20000234
 8000f6c:	0800e0cc 	.word	0x0800e0cc
 8000f70:	40020000 	.word	0x40020000

08000f74 <RTC_read>:
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "rtc.h"

/* USER CODE BEGIN 0 */
uint64_t RTC_read() {
 8000f74:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000f78:	b0a0      	sub	sp, #128	; 0x80
 8000f7a:	af00      	add	r7, sp, #0
	uint64_t result = 0;
 8000f7c:	f04f 0200 	mov.w	r2, #0
 8000f80:	f04f 0300 	mov.w	r3, #0
 8000f84:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78

	RTC_DateTypeDef sDate;
	RTC_TimeTypeDef sTime;

	HAL_RTC_GetTime(&hrtc, &sTime, FORMAT_BIN);
 8000f88:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	4619      	mov	r1, r3
 8000f90:	485d      	ldr	r0, [pc, #372]	; (8001108 <RTC_read+0x194>)
 8000f92:	f005 f89f 	bl	80060d4 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &sDate, FORMAT_BIN);
 8000f96:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	4619      	mov	r1, r3
 8000f9e:	485a      	ldr	r0, [pc, #360]	; (8001108 <RTC_read+0x194>)
 8000fa0:	f005 f97a 	bl	8006298 <HAL_RTC_GetDate>

	result |= (uint64_t)(sTime.SubSeconds);
 8000fa4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	461c      	mov	r4, r3
 8000faa:	4615      	mov	r5, r2
 8000fac:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8000fb0:	ea42 0a04 	orr.w	sl, r2, r4
 8000fb4:	ea43 0b05 	orr.w	fp, r3, r5
 8000fb8:	e9c7 ab1e 	strd	sl, fp, [r7, #120]	; 0x78
	result |= (uint64_t)(sTime.Seconds) << 8;
 8000fbc:	f897 3062 	ldrb.w	r3, [r7, #98]	; 0x62
 8000fc0:	b2db      	uxtb	r3, r3
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	4698      	mov	r8, r3
 8000fc6:	4691      	mov	r9, r2
 8000fc8:	f04f 0000 	mov.w	r0, #0
 8000fcc:	f04f 0100 	mov.w	r1, #0
 8000fd0:	ea4f 2109 	mov.w	r1, r9, lsl #8
 8000fd4:	ea41 6118 	orr.w	r1, r1, r8, lsr #24
 8000fd8:	ea4f 2008 	mov.w	r0, r8, lsl #8
 8000fdc:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8000fe0:	ea42 0400 	orr.w	r4, r2, r0
 8000fe4:	62bc      	str	r4, [r7, #40]	; 0x28
 8000fe6:	430b      	orrs	r3, r1
 8000fe8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000fea:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8000fee:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
	result |= (uint64_t)(sTime.Minutes) << 16;
 8000ff2:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
 8000ff6:	b2db      	uxtb	r3, r3
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	65bb      	str	r3, [r7, #88]	; 0x58
 8000ffc:	65fa      	str	r2, [r7, #92]	; 0x5c
 8000ffe:	f04f 0000 	mov.w	r0, #0
 8001002:	f04f 0100 	mov.w	r1, #0
 8001006:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 800100a:	462b      	mov	r3, r5
 800100c:	0419      	lsls	r1, r3, #16
 800100e:	4623      	mov	r3, r4
 8001010:	ea41 4113 	orr.w	r1, r1, r3, lsr #16
 8001014:	4623      	mov	r3, r4
 8001016:	0418      	lsls	r0, r3, #16
 8001018:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 800101c:	ea42 0400 	orr.w	r4, r2, r0
 8001020:	623c      	str	r4, [r7, #32]
 8001022:	430b      	orrs	r3, r1
 8001024:	627b      	str	r3, [r7, #36]	; 0x24
 8001026:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800102a:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
	result |= (uint64_t)(sTime.Hours) << 24;
 800102e:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 8001032:	b2db      	uxtb	r3, r3
 8001034:	2200      	movs	r2, #0
 8001036:	653b      	str	r3, [r7, #80]	; 0x50
 8001038:	657a      	str	r2, [r7, #84]	; 0x54
 800103a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800103e:	460b      	mov	r3, r1
 8001040:	0a1b      	lsrs	r3, r3, #8
 8001042:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001044:	460b      	mov	r3, r1
 8001046:	061b      	lsls	r3, r3, #24
 8001048:	64bb      	str	r3, [r7, #72]	; 0x48
 800104a:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 800104e:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8001052:	4621      	mov	r1, r4
 8001054:	4311      	orrs	r1, r2
 8001056:	61b9      	str	r1, [r7, #24]
 8001058:	4629      	mov	r1, r5
 800105a:	4319      	orrs	r1, r3
 800105c:	61f9      	str	r1, [r7, #28]
 800105e:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8001062:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
	result |= (uint64_t)(sDate.Date) << 32;
 8001066:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 800106a:	b2db      	uxtb	r3, r3
 800106c:	2200      	movs	r2, #0
 800106e:	643b      	str	r3, [r7, #64]	; 0x40
 8001070:	647a      	str	r2, [r7, #68]	; 0x44
 8001072:	f04f 0200 	mov.w	r2, #0
 8001076:	f04f 0300 	mov.w	r3, #0
 800107a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800107c:	000b      	movs	r3, r1
 800107e:	2200      	movs	r2, #0
 8001080:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8001084:	ea40 0402 	orr.w	r4, r0, r2
 8001088:	613c      	str	r4, [r7, #16]
 800108a:	430b      	orrs	r3, r1
 800108c:	617b      	str	r3, [r7, #20]
 800108e:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8001092:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
	result |= (uint64_t)(sDate.Month) << 40;
 8001096:	f897 3075 	ldrb.w	r3, [r7, #117]	; 0x75
 800109a:	b2db      	uxtb	r3, r3
 800109c:	2200      	movs	r2, #0
 800109e:	63bb      	str	r3, [r7, #56]	; 0x38
 80010a0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80010a2:	f04f 0200 	mov.w	r2, #0
 80010a6:	f04f 0300 	mov.w	r3, #0
 80010aa:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80010ac:	020b      	lsls	r3, r1, #8
 80010ae:	2200      	movs	r2, #0
 80010b0:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 80010b4:	ea40 0402 	orr.w	r4, r0, r2
 80010b8:	60bc      	str	r4, [r7, #8]
 80010ba:	430b      	orrs	r3, r1
 80010bc:	60fb      	str	r3, [r7, #12]
 80010be:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80010c2:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
	result |= (uint64_t)(sDate.Year) << 48;
 80010c6:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80010ca:	b2db      	uxtb	r3, r3
 80010cc:	2200      	movs	r2, #0
 80010ce:	633b      	str	r3, [r7, #48]	; 0x30
 80010d0:	637a      	str	r2, [r7, #52]	; 0x34
 80010d2:	f04f 0200 	mov.w	r2, #0
 80010d6:	f04f 0300 	mov.w	r3, #0
 80010da:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80010dc:	040b      	lsls	r3, r1, #16
 80010de:	2200      	movs	r2, #0
 80010e0:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 80010e4:	ea40 0402 	orr.w	r4, r0, r2
 80010e8:	603c      	str	r4, [r7, #0]
 80010ea:	430b      	orrs	r3, r1
 80010ec:	607b      	str	r3, [r7, #4]
 80010ee:	e9d7 3400 	ldrd	r3, r4, [r7]
 80010f2:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78

	return result;
 80010f6:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
}
 80010fa:	4610      	mov	r0, r2
 80010fc:	4619      	mov	r1, r3
 80010fe:	3780      	adds	r7, #128	; 0x80
 8001100:	46bd      	mov	sp, r7
 8001102:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001106:	bf00      	nop
 8001108:	20001288 	.word	0x20001288

0800110c <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b086      	sub	sp, #24
 8001110:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001112:	1d3b      	adds	r3, r7, #4
 8001114:	2200      	movs	r2, #0
 8001116:	601a      	str	r2, [r3, #0]
 8001118:	605a      	str	r2, [r3, #4]
 800111a:	609a      	str	r2, [r3, #8]
 800111c:	60da      	str	r2, [r3, #12]
 800111e:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001120:	2300      	movs	r3, #0
 8001122:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001124:	4b24      	ldr	r3, [pc, #144]	; (80011b8 <MX_RTC_Init+0xac>)
 8001126:	4a25      	ldr	r2, [pc, #148]	; (80011bc <MX_RTC_Init+0xb0>)
 8001128:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800112a:	4b23      	ldr	r3, [pc, #140]	; (80011b8 <MX_RTC_Init+0xac>)
 800112c:	2200      	movs	r2, #0
 800112e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001130:	4b21      	ldr	r3, [pc, #132]	; (80011b8 <MX_RTC_Init+0xac>)
 8001132:	227f      	movs	r2, #127	; 0x7f
 8001134:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001136:	4b20      	ldr	r3, [pc, #128]	; (80011b8 <MX_RTC_Init+0xac>)
 8001138:	22ff      	movs	r2, #255	; 0xff
 800113a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800113c:	4b1e      	ldr	r3, [pc, #120]	; (80011b8 <MX_RTC_Init+0xac>)
 800113e:	2200      	movs	r2, #0
 8001140:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001142:	4b1d      	ldr	r3, [pc, #116]	; (80011b8 <MX_RTC_Init+0xac>)
 8001144:	2200      	movs	r2, #0
 8001146:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001148:	4b1b      	ldr	r3, [pc, #108]	; (80011b8 <MX_RTC_Init+0xac>)
 800114a:	2200      	movs	r2, #0
 800114c:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800114e:	481a      	ldr	r0, [pc, #104]	; (80011b8 <MX_RTC_Init+0xac>)
 8001150:	f004 feb0 	bl	8005eb4 <HAL_RTC_Init>
 8001154:	4603      	mov	r3, r0
 8001156:	2b00      	cmp	r3, #0
 8001158:	d001      	beq.n	800115e <MX_RTC_Init+0x52>
  {
    Error_Handler();
 800115a:	f7ff fedd 	bl	8000f18 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 800115e:	2300      	movs	r3, #0
 8001160:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8001162:	2300      	movs	r3, #0
 8001164:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8001166:	2300      	movs	r3, #0
 8001168:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800116a:	2300      	movs	r3, #0
 800116c:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800116e:	2300      	movs	r3, #0
 8001170:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001172:	1d3b      	adds	r3, r7, #4
 8001174:	2201      	movs	r2, #1
 8001176:	4619      	mov	r1, r3
 8001178:	480f      	ldr	r0, [pc, #60]	; (80011b8 <MX_RTC_Init+0xac>)
 800117a:	f004 ff11 	bl	8005fa0 <HAL_RTC_SetTime>
 800117e:	4603      	mov	r3, r0
 8001180:	2b00      	cmp	r3, #0
 8001182:	d001      	beq.n	8001188 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8001184:	f7ff fec8 	bl	8000f18 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_SUNDAY;
 8001188:	2307      	movs	r3, #7
 800118a:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 800118c:	2301      	movs	r3, #1
 800118e:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8001190:	2301      	movs	r3, #1
 8001192:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x23;
 8001194:	2323      	movs	r3, #35	; 0x23
 8001196:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001198:	463b      	mov	r3, r7
 800119a:	2201      	movs	r2, #1
 800119c:	4619      	mov	r1, r3
 800119e:	4806      	ldr	r0, [pc, #24]	; (80011b8 <MX_RTC_Init+0xac>)
 80011a0:	f004 fff6 	bl	8006190 <HAL_RTC_SetDate>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d001      	beq.n	80011ae <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 80011aa:	f7ff feb5 	bl	8000f18 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80011ae:	bf00      	nop
 80011b0:	3718      	adds	r7, #24
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	20001288 	.word	0x20001288
 80011bc:	40002800 	.word	0x40002800

080011c0 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b086      	sub	sp, #24
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011c8:	f107 0308 	add.w	r3, r7, #8
 80011cc:	2200      	movs	r2, #0
 80011ce:	601a      	str	r2, [r3, #0]
 80011d0:	605a      	str	r2, [r3, #4]
 80011d2:	609a      	str	r2, [r3, #8]
 80011d4:	60da      	str	r2, [r3, #12]
  if(rtcHandle->Instance==RTC)
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	4a0c      	ldr	r2, [pc, #48]	; (800120c <HAL_RTC_MspInit+0x4c>)
 80011dc:	4293      	cmp	r3, r2
 80011de:	d111      	bne.n	8001204 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80011e0:	2302      	movs	r3, #2
 80011e2:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80011e4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011e8:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011ea:	f107 0308 	add.w	r3, r7, #8
 80011ee:	4618      	mov	r0, r3
 80011f0:	f004 fd7e 	bl	8005cf0 <HAL_RCCEx_PeriphCLKConfig>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d001      	beq.n	80011fe <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 80011fa:	f7ff fe8d 	bl	8000f18 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80011fe:	4b04      	ldr	r3, [pc, #16]	; (8001210 <HAL_RTC_MspInit+0x50>)
 8001200:	2201      	movs	r2, #1
 8001202:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001204:	bf00      	nop
 8001206:	3718      	adds	r7, #24
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}
 800120c:	40002800 	.word	0x40002800
 8001210:	42470e3c 	.word	0x42470e3c

08001214 <SD_SETUP>:
#include "sdio.h"

/* USER CODE BEGIN 0 */
char logname[30];

int SD_SETUP(FIL* file, uint64_t boot) {
 8001214:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001216:	f5ad 5d83 	sub.w	sp, sp, #4192	; 0x1060
 800121a:	b081      	sub	sp, #4
 800121c:	af04      	add	r7, sp, #16
 800121e:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8001222:	f841 0c44 	str.w	r0, [r1, #-68]
 8001226:	f107 0110 	add.w	r1, r7, #16
 800122a:	3910      	subs	r1, #16
 800122c:	e9c1 2300 	strd	r2, r3, [r1]
  FATFS SD_FATFS;

  disk_initialize((BYTE) 0);
 8001230:	2000      	movs	r0, #0
 8001232:	f008 fea3 	bl	8009f7c <disk_initialize>
  int ret = f_mount(&SD_FATFS, "", 0);
 8001236:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800123a:	3b1c      	subs	r3, #28
 800123c:	2200      	movs	r2, #0
 800123e:	4964      	ldr	r1, [pc, #400]	; (80013d0 <SD_SETUP+0x1bc>)
 8001240:	4618      	mov	r0, r3
 8001242:	f00b f81f 	bl	800c284 <f_mount>
 8001246:	4603      	mov	r3, r0
 8001248:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800124c:	f102 020c 	add.w	r2, r2, #12
 8001250:	6013      	str	r3, [r2, #0]
  if (ret != FR_OK) {
 8001252:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8001256:	f103 030c 	add.w	r3, r3, #12
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	2b00      	cmp	r3, #0
 800125e:	d00e      	beq.n	800127e <SD_SETUP+0x6a>
    #ifdef DEBUG_MODE
      printf("[%8lu] [ERR] SD mount failed: %d\n", HAL_GetTick(), ret);
 8001260:	f000 fd82 	bl	8001d68 <HAL_GetTick>
 8001264:	4603      	mov	r3, r0
 8001266:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800126a:	f102 020c 	add.w	r2, r2, #12
 800126e:	6812      	ldr	r2, [r2, #0]
 8001270:	4619      	mov	r1, r3
 8001272:	4858      	ldr	r0, [pc, #352]	; (80013d4 <SD_SETUP+0x1c0>)
 8001274:	f00b fd7e 	bl	800cd74 <iprintf>
    #endif
    return -1;
 8001278:	f04f 33ff 	mov.w	r3, #4294967295
 800127c:	e0a2      	b.n	80013c4 <SD_SETUP+0x1b0>
  }

  sprintf(logname, "A-FA 20%02lu-%02lu-%02lu %02lu-%02lu-%02lu.log",
         (uint32_t)(boot >> 48), (uint32_t)(boot << 16 >> 56), (uint32_t)(boot << 24 >> 56),
 800127e:	f107 0310 	add.w	r3, r7, #16
 8001282:	3b10      	subs	r3, #16
 8001284:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001288:	f04f 0200 	mov.w	r2, #0
 800128c:	f04f 0300 	mov.w	r3, #0
 8001290:	0c0a      	lsrs	r2, r1, #16
 8001292:	2300      	movs	r3, #0
  sprintf(logname, "A-FA 20%02lu-%02lu-%02lu %02lu-%02lu-%02lu.log",
 8001294:	4694      	mov	ip, r2
         (uint32_t)(boot >> 48), (uint32_t)(boot << 16 >> 56), (uint32_t)(boot << 24 >> 56),
 8001296:	f107 0310 	add.w	r3, r7, #16
 800129a:	3b10      	subs	r3, #16
 800129c:	e9d3 0100 	ldrd	r0, r1, [r3]
 80012a0:	f04f 0200 	mov.w	r2, #0
 80012a4:	f04f 0300 	mov.w	r3, #0
 80012a8:	040b      	lsls	r3, r1, #16
 80012aa:	ea43 4310 	orr.w	r3, r3, r0, lsr #16
 80012ae:	0402      	lsls	r2, r0, #16
 80012b0:	f04f 0000 	mov.w	r0, #0
 80012b4:	f04f 0100 	mov.w	r1, #0
 80012b8:	0e18      	lsrs	r0, r3, #24
 80012ba:	2100      	movs	r1, #0
  sprintf(logname, "A-FA 20%02lu-%02lu-%02lu %02lu-%02lu-%02lu.log",
 80012bc:	4686      	mov	lr, r0
         (uint32_t)(boot >> 48), (uint32_t)(boot << 16 >> 56), (uint32_t)(boot << 24 >> 56),
 80012be:	f107 0310 	add.w	r3, r7, #16
 80012c2:	3b10      	subs	r3, #16
 80012c4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80012c8:	f04f 0200 	mov.w	r2, #0
 80012cc:	f04f 0300 	mov.w	r3, #0
 80012d0:	060b      	lsls	r3, r1, #24
 80012d2:	ea43 2310 	orr.w	r3, r3, r0, lsr #8
 80012d6:	0602      	lsls	r2, r0, #24
 80012d8:	f04f 0000 	mov.w	r0, #0
 80012dc:	f04f 0100 	mov.w	r1, #0
 80012e0:	0e18      	lsrs	r0, r3, #24
 80012e2:	2100      	movs	r1, #0
  sprintf(logname, "A-FA 20%02lu-%02lu-%02lu %02lu-%02lu-%02lu.log",
 80012e4:	4604      	mov	r4, r0
         (uint32_t)(boot << 32 >> 56), (uint32_t)(boot << 40 >> 56), (uint32_t)(boot << 48 >> 56));
 80012e6:	f107 0310 	add.w	r3, r7, #16
 80012ea:	3b10      	subs	r3, #16
 80012ec:	e9d3 0100 	ldrd	r0, r1, [r3]
 80012f0:	f04f 0200 	mov.w	r2, #0
 80012f4:	f04f 0300 	mov.w	r3, #0
 80012f8:	0003      	movs	r3, r0
 80012fa:	2200      	movs	r2, #0
 80012fc:	f04f 0000 	mov.w	r0, #0
 8001300:	f04f 0100 	mov.w	r1, #0
 8001304:	0e18      	lsrs	r0, r3, #24
 8001306:	2100      	movs	r1, #0
  sprintf(logname, "A-FA 20%02lu-%02lu-%02lu %02lu-%02lu-%02lu.log",
 8001308:	4605      	mov	r5, r0
         (uint32_t)(boot << 32 >> 56), (uint32_t)(boot << 40 >> 56), (uint32_t)(boot << 48 >> 56));
 800130a:	f107 0310 	add.w	r3, r7, #16
 800130e:	3b10      	subs	r3, #16
 8001310:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001314:	f04f 0200 	mov.w	r2, #0
 8001318:	f04f 0300 	mov.w	r3, #0
 800131c:	0203      	lsls	r3, r0, #8
 800131e:	2200      	movs	r2, #0
 8001320:	f04f 0000 	mov.w	r0, #0
 8001324:	f04f 0100 	mov.w	r1, #0
 8001328:	0e18      	lsrs	r0, r3, #24
 800132a:	2100      	movs	r1, #0
  sprintf(logname, "A-FA 20%02lu-%02lu-%02lu %02lu-%02lu-%02lu.log",
 800132c:	4606      	mov	r6, r0
         (uint32_t)(boot << 32 >> 56), (uint32_t)(boot << 40 >> 56), (uint32_t)(boot << 48 >> 56));
 800132e:	f107 0310 	add.w	r3, r7, #16
 8001332:	3b10      	subs	r3, #16
 8001334:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001338:	f04f 0200 	mov.w	r2, #0
 800133c:	f04f 0300 	mov.w	r3, #0
 8001340:	0403      	lsls	r3, r0, #16
 8001342:	2200      	movs	r2, #0
 8001344:	f04f 0000 	mov.w	r0, #0
 8001348:	f04f 0100 	mov.w	r1, #0
 800134c:	0e18      	lsrs	r0, r3, #24
 800134e:	2100      	movs	r1, #0
  sprintf(logname, "A-FA 20%02lu-%02lu-%02lu %02lu-%02lu-%02lu.log",
 8001350:	4603      	mov	r3, r0
 8001352:	9303      	str	r3, [sp, #12]
 8001354:	9602      	str	r6, [sp, #8]
 8001356:	9501      	str	r5, [sp, #4]
 8001358:	9400      	str	r4, [sp, #0]
 800135a:	4673      	mov	r3, lr
 800135c:	4662      	mov	r2, ip
 800135e:	491e      	ldr	r1, [pc, #120]	; (80013d8 <SD_SETUP+0x1c4>)
 8001360:	481e      	ldr	r0, [pc, #120]	; (80013dc <SD_SETUP+0x1c8>)
 8001362:	f00b fd1f 	bl	800cda4 <siprintf>

  ret = f_open(file, logname, FA_OPEN_APPEND | FA_WRITE);
 8001366:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800136a:	2232      	movs	r2, #50	; 0x32
 800136c:	491b      	ldr	r1, [pc, #108]	; (80013dc <SD_SETUP+0x1c8>)
 800136e:	f853 0c44 	ldr.w	r0, [r3, #-68]
 8001372:	f00a ffcd 	bl	800c310 <f_open>
 8001376:	4603      	mov	r3, r0
 8001378:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800137c:	f102 020c 	add.w	r2, r2, #12
 8001380:	6013      	str	r3, [r2, #0]
  if (ret != FR_OK) {
 8001382:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8001386:	f103 030c 	add.w	r3, r3, #12
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	2b00      	cmp	r3, #0
 800138e:	d011      	beq.n	80013b4 <SD_SETUP+0x1a0>
    #ifdef DEBUG_MODE
      printf("[%8lu] [ERR] SD open failed: %d\n", HAL_GetTick(), ret);
 8001390:	f000 fcea 	bl	8001d68 <HAL_GetTick>
 8001394:	4603      	mov	r3, r0
 8001396:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800139a:	f102 020c 	add.w	r2, r2, #12
 800139e:	6812      	ldr	r2, [r2, #0]
 80013a0:	4619      	mov	r1, r3
 80013a2:	480f      	ldr	r0, [pc, #60]	; (80013e0 <SD_SETUP+0x1cc>)
 80013a4:	f00b fce6 	bl	800cd74 <iprintf>
    #endif
    return ret;
 80013a8:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80013ac:	f103 030c 	add.w	r3, r3, #12
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	e007      	b.n	80013c4 <SD_SETUP+0x1b0>
  }

  HAL_TIM_Base_Start_IT(&htim1);
 80013b4:	480b      	ldr	r0, [pc, #44]	; (80013e4 <SD_SETUP+0x1d0>)
 80013b6:	f006 f9fb 	bl	80077b0 <HAL_TIM_Base_Start_IT>

  return ret;
 80013ba:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80013be:	f103 030c 	add.w	r3, r3, #12
 80013c2:	681b      	ldr	r3, [r3, #0]
}
 80013c4:	4618      	mov	r0, r3
 80013c6:	f507 5782 	add.w	r7, r7, #4160	; 0x1040
 80013ca:	3714      	adds	r7, #20
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013d0:	0800e0f4 	.word	0x0800e0f4
 80013d4:	0800e0f8 	.word	0x0800e0f8
 80013d8:	0800e11c 	.word	0x0800e11c
 80013dc:	200012a8 	.word	0x200012a8
 80013e0:	0800e14c 	.word	0x0800e14c
 80013e4:	20001410 	.word	0x20001410

080013e8 <SD_WRITE>:

int SD_WRITE(FIL *file, char *data) {
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b084      	sub	sp, #16
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
 80013f0:	6039      	str	r1, [r7, #0]
  uint32_t written_count;
  int ret = f_write(file, data, strlen(data), (void *)&written_count);
 80013f2:	6838      	ldr	r0, [r7, #0]
 80013f4:	f7fe feec 	bl	80001d0 <strlen>
 80013f8:	4602      	mov	r2, r0
 80013fa:	f107 0308 	add.w	r3, r7, #8
 80013fe:	6839      	ldr	r1, [r7, #0]
 8001400:	6878      	ldr	r0, [r7, #4]
 8001402:	f00b f951 	bl	800c6a8 <f_write>
 8001406:	4603      	mov	r3, r0
 8001408:	60fb      	str	r3, [r7, #12]
  if (ret != FR_OK) {
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	2b00      	cmp	r3, #0
 800140e:	d007      	beq.n	8001420 <SD_WRITE+0x38>
    #ifdef DEBUG_MODE
      printf("[%8lu] [ERR] SD write failed: %d\n", HAL_GetTick(), ret);
 8001410:	f000 fcaa 	bl	8001d68 <HAL_GetTick>
 8001414:	4603      	mov	r3, r0
 8001416:	68fa      	ldr	r2, [r7, #12]
 8001418:	4619      	mov	r1, r3
 800141a:	4804      	ldr	r0, [pc, #16]	; (800142c <SD_WRITE+0x44>)
 800141c:	f00b fcaa 	bl	800cd74 <iprintf>
    #endif
  }

  return ret;
 8001420:	68fb      	ldr	r3, [r7, #12]
}
 8001422:	4618      	mov	r0, r3
 8001424:	3710      	adds	r7, #16
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}
 800142a:	bf00      	nop
 800142c:	0800e170 	.word	0x0800e170

08001430 <SD_SYNC>:

int SD_SYNC(FIL *file) {
 8001430:	b580      	push	{r7, lr}
 8001432:	b084      	sub	sp, #16
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
  int ret = f_sync(file);
 8001438:	6878      	ldr	r0, [r7, #4]
 800143a:	f00b fac9 	bl	800c9d0 <f_sync>
 800143e:	4603      	mov	r3, r0
 8001440:	60fb      	str	r3, [r7, #12]
  if (ret != FR_OK) {
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	2b00      	cmp	r3, #0
 8001446:	d007      	beq.n	8001458 <SD_SYNC+0x28>
    #ifdef DEBUG_MODE
      printf("[%8lu] [ERR] SD sync failed: %d\n", HAL_GetTick(), ret);
 8001448:	f000 fc8e 	bl	8001d68 <HAL_GetTick>
 800144c:	4603      	mov	r3, r0
 800144e:	68fa      	ldr	r2, [r7, #12]
 8001450:	4619      	mov	r1, r3
 8001452:	4804      	ldr	r0, [pc, #16]	; (8001464 <SD_SYNC+0x34>)
 8001454:	f00b fc8e 	bl	800cd74 <iprintf>
    #endif
  }

  return ret;
 8001458:	68fb      	ldr	r3, [r7, #12]
}
 800145a:	4618      	mov	r0, r3
 800145c:	3710      	adds	r7, #16
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	0800e194 	.word	0x0800e194

08001468 <MX_SDIO_SD_Init>:
DMA_HandleTypeDef hdma_sdio_tx;

/* SDIO init function */

void MX_SDIO_SD_Init(void)
{
 8001468:	b480      	push	{r7}
 800146a:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 800146c:	4b0d      	ldr	r3, [pc, #52]	; (80014a4 <MX_SDIO_SD_Init+0x3c>)
 800146e:	4a0e      	ldr	r2, [pc, #56]	; (80014a8 <MX_SDIO_SD_Init+0x40>)
 8001470:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8001472:	4b0c      	ldr	r3, [pc, #48]	; (80014a4 <MX_SDIO_SD_Init+0x3c>)
 8001474:	2200      	movs	r2, #0
 8001476:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8001478:	4b0a      	ldr	r3, [pc, #40]	; (80014a4 <MX_SDIO_SD_Init+0x3c>)
 800147a:	2200      	movs	r2, #0
 800147c:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800147e:	4b09      	ldr	r3, [pc, #36]	; (80014a4 <MX_SDIO_SD_Init+0x3c>)
 8001480:	2200      	movs	r2, #0
 8001482:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8001484:	4b07      	ldr	r3, [pc, #28]	; (80014a4 <MX_SDIO_SD_Init+0x3c>)
 8001486:	2200      	movs	r2, #0
 8001488:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_ENABLE;
 800148a:	4b06      	ldr	r3, [pc, #24]	; (80014a4 <MX_SDIO_SD_Init+0x3c>)
 800148c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001490:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 12;
 8001492:	4b04      	ldr	r3, [pc, #16]	; (80014a4 <MX_SDIO_SD_Init+0x3c>)
 8001494:	220c      	movs	r2, #12
 8001496:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8001498:	bf00      	nop
 800149a:	46bd      	mov	sp, r7
 800149c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a0:	4770      	bx	lr
 80014a2:	bf00      	nop
 80014a4:	200012c8 	.word	0x200012c8
 80014a8:	40012c00 	.word	0x40012c00

080014ac <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b08a      	sub	sp, #40	; 0x28
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014b4:	f107 0314 	add.w	r3, r7, #20
 80014b8:	2200      	movs	r2, #0
 80014ba:	601a      	str	r2, [r3, #0]
 80014bc:	605a      	str	r2, [r3, #4]
 80014be:	609a      	str	r2, [r3, #8]
 80014c0:	60da      	str	r2, [r3, #12]
 80014c2:	611a      	str	r2, [r3, #16]
  if(sdHandle->Instance==SDIO)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4a70      	ldr	r2, [pc, #448]	; (800168c <HAL_SD_MspInit+0x1e0>)
 80014ca:	4293      	cmp	r3, r2
 80014cc:	f040 80da 	bne.w	8001684 <HAL_SD_MspInit+0x1d8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* SDIO clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 80014d0:	2300      	movs	r3, #0
 80014d2:	613b      	str	r3, [r7, #16]
 80014d4:	4b6e      	ldr	r3, [pc, #440]	; (8001690 <HAL_SD_MspInit+0x1e4>)
 80014d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014d8:	4a6d      	ldr	r2, [pc, #436]	; (8001690 <HAL_SD_MspInit+0x1e4>)
 80014da:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80014de:	6453      	str	r3, [r2, #68]	; 0x44
 80014e0:	4b6b      	ldr	r3, [pc, #428]	; (8001690 <HAL_SD_MspInit+0x1e4>)
 80014e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80014e8:	613b      	str	r3, [r7, #16]
 80014ea:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80014ec:	2300      	movs	r3, #0
 80014ee:	60fb      	str	r3, [r7, #12]
 80014f0:	4b67      	ldr	r3, [pc, #412]	; (8001690 <HAL_SD_MspInit+0x1e4>)
 80014f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f4:	4a66      	ldr	r2, [pc, #408]	; (8001690 <HAL_SD_MspInit+0x1e4>)
 80014f6:	f043 0304 	orr.w	r3, r3, #4
 80014fa:	6313      	str	r3, [r2, #48]	; 0x30
 80014fc:	4b64      	ldr	r3, [pc, #400]	; (8001690 <HAL_SD_MspInit+0x1e4>)
 80014fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001500:	f003 0304 	and.w	r3, r3, #4
 8001504:	60fb      	str	r3, [r7, #12]
 8001506:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001508:	2300      	movs	r3, #0
 800150a:	60bb      	str	r3, [r7, #8]
 800150c:	4b60      	ldr	r3, [pc, #384]	; (8001690 <HAL_SD_MspInit+0x1e4>)
 800150e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001510:	4a5f      	ldr	r2, [pc, #380]	; (8001690 <HAL_SD_MspInit+0x1e4>)
 8001512:	f043 0308 	orr.w	r3, r3, #8
 8001516:	6313      	str	r3, [r2, #48]	; 0x30
 8001518:	4b5d      	ldr	r3, [pc, #372]	; (8001690 <HAL_SD_MspInit+0x1e4>)
 800151a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800151c:	f003 0308 	and.w	r3, r3, #8
 8001520:	60bb      	str	r3, [r7, #8]
 8001522:	68bb      	ldr	r3, [r7, #8]
    /**SDIO GPIO Configuration
    PC8     ------> SDIO_D0
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001524:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001528:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800152a:	2302      	movs	r3, #2
 800152c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800152e:	2301      	movs	r3, #1
 8001530:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001532:	2303      	movs	r3, #3
 8001534:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001536:	230c      	movs	r3, #12
 8001538:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800153a:	f107 0314 	add.w	r3, r7, #20
 800153e:	4619      	mov	r1, r3
 8001540:	4854      	ldr	r0, [pc, #336]	; (8001694 <HAL_SD_MspInit+0x1e8>)
 8001542:	f002 f83d 	bl	80035c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001546:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800154a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800154c:	2302      	movs	r3, #2
 800154e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001550:	2300      	movs	r3, #0
 8001552:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001554:	2303      	movs	r3, #3
 8001556:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001558:	230c      	movs	r3, #12
 800155a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800155c:	f107 0314 	add.w	r3, r7, #20
 8001560:	4619      	mov	r1, r3
 8001562:	484c      	ldr	r0, [pc, #304]	; (8001694 <HAL_SD_MspInit+0x1e8>)
 8001564:	f002 f82c 	bl	80035c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001568:	2304      	movs	r3, #4
 800156a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800156c:	2302      	movs	r3, #2
 800156e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001570:	2301      	movs	r3, #1
 8001572:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001574:	2303      	movs	r3, #3
 8001576:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001578:	230c      	movs	r3, #12
 800157a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800157c:	f107 0314 	add.w	r3, r7, #20
 8001580:	4619      	mov	r1, r3
 8001582:	4845      	ldr	r0, [pc, #276]	; (8001698 <HAL_SD_MspInit+0x1ec>)
 8001584:	f002 f81c 	bl	80035c0 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 8001588:	4b44      	ldr	r3, [pc, #272]	; (800169c <HAL_SD_MspInit+0x1f0>)
 800158a:	4a45      	ldr	r2, [pc, #276]	; (80016a0 <HAL_SD_MspInit+0x1f4>)
 800158c:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 800158e:	4b43      	ldr	r3, [pc, #268]	; (800169c <HAL_SD_MspInit+0x1f0>)
 8001590:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001594:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001596:	4b41      	ldr	r3, [pc, #260]	; (800169c <HAL_SD_MspInit+0x1f0>)
 8001598:	2200      	movs	r2, #0
 800159a:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800159c:	4b3f      	ldr	r3, [pc, #252]	; (800169c <HAL_SD_MspInit+0x1f0>)
 800159e:	2200      	movs	r2, #0
 80015a0:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 80015a2:	4b3e      	ldr	r3, [pc, #248]	; (800169c <HAL_SD_MspInit+0x1f0>)
 80015a4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80015a8:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80015aa:	4b3c      	ldr	r3, [pc, #240]	; (800169c <HAL_SD_MspInit+0x1f0>)
 80015ac:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80015b0:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80015b2:	4b3a      	ldr	r3, [pc, #232]	; (800169c <HAL_SD_MspInit+0x1f0>)
 80015b4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80015b8:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 80015ba:	4b38      	ldr	r3, [pc, #224]	; (800169c <HAL_SD_MspInit+0x1f0>)
 80015bc:	2220      	movs	r2, #32
 80015be:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 80015c0:	4b36      	ldr	r3, [pc, #216]	; (800169c <HAL_SD_MspInit+0x1f0>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80015c6:	4b35      	ldr	r3, [pc, #212]	; (800169c <HAL_SD_MspInit+0x1f0>)
 80015c8:	2204      	movs	r2, #4
 80015ca:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80015cc:	4b33      	ldr	r3, [pc, #204]	; (800169c <HAL_SD_MspInit+0x1f0>)
 80015ce:	2203      	movs	r2, #3
 80015d0:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 80015d2:	4b32      	ldr	r3, [pc, #200]	; (800169c <HAL_SD_MspInit+0x1f0>)
 80015d4:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80015d8:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 80015da:	4b30      	ldr	r3, [pc, #192]	; (800169c <HAL_SD_MspInit+0x1f0>)
 80015dc:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80015e0:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 80015e2:	482e      	ldr	r0, [pc, #184]	; (800169c <HAL_SD_MspInit+0x1f0>)
 80015e4:	f001 fbd0 	bl	8002d88 <HAL_DMA_Init>
 80015e8:	4603      	mov	r3, r0
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d001      	beq.n	80015f2 <HAL_SD_MspInit+0x146>
    {
      Error_Handler();
 80015ee:	f7ff fc93 	bl	8000f18 <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmarx,hdma_sdio_rx);
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	4a29      	ldr	r2, [pc, #164]	; (800169c <HAL_SD_MspInit+0x1f0>)
 80015f6:	641a      	str	r2, [r3, #64]	; 0x40
 80015f8:	4a28      	ldr	r2, [pc, #160]	; (800169c <HAL_SD_MspInit+0x1f0>)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 80015fe:	4b29      	ldr	r3, [pc, #164]	; (80016a4 <HAL_SD_MspInit+0x1f8>)
 8001600:	4a29      	ldr	r2, [pc, #164]	; (80016a8 <HAL_SD_MspInit+0x1fc>)
 8001602:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 8001604:	4b27      	ldr	r3, [pc, #156]	; (80016a4 <HAL_SD_MspInit+0x1f8>)
 8001606:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800160a:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800160c:	4b25      	ldr	r3, [pc, #148]	; (80016a4 <HAL_SD_MspInit+0x1f8>)
 800160e:	2240      	movs	r2, #64	; 0x40
 8001610:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001612:	4b24      	ldr	r3, [pc, #144]	; (80016a4 <HAL_SD_MspInit+0x1f8>)
 8001614:	2200      	movs	r2, #0
 8001616:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001618:	4b22      	ldr	r3, [pc, #136]	; (80016a4 <HAL_SD_MspInit+0x1f8>)
 800161a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800161e:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001620:	4b20      	ldr	r3, [pc, #128]	; (80016a4 <HAL_SD_MspInit+0x1f8>)
 8001622:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001626:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001628:	4b1e      	ldr	r3, [pc, #120]	; (80016a4 <HAL_SD_MspInit+0x1f8>)
 800162a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800162e:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 8001630:	4b1c      	ldr	r3, [pc, #112]	; (80016a4 <HAL_SD_MspInit+0x1f8>)
 8001632:	2220      	movs	r2, #32
 8001634:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001636:	4b1b      	ldr	r3, [pc, #108]	; (80016a4 <HAL_SD_MspInit+0x1f8>)
 8001638:	2200      	movs	r2, #0
 800163a:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800163c:	4b19      	ldr	r3, [pc, #100]	; (80016a4 <HAL_SD_MspInit+0x1f8>)
 800163e:	2204      	movs	r2, #4
 8001640:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001642:	4b18      	ldr	r3, [pc, #96]	; (80016a4 <HAL_SD_MspInit+0x1f8>)
 8001644:	2203      	movs	r2, #3
 8001646:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 8001648:	4b16      	ldr	r3, [pc, #88]	; (80016a4 <HAL_SD_MspInit+0x1f8>)
 800164a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800164e:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8001650:	4b14      	ldr	r3, [pc, #80]	; (80016a4 <HAL_SD_MspInit+0x1f8>)
 8001652:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001656:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 8001658:	4812      	ldr	r0, [pc, #72]	; (80016a4 <HAL_SD_MspInit+0x1f8>)
 800165a:	f001 fb95 	bl	8002d88 <HAL_DMA_Init>
 800165e:	4603      	mov	r3, r0
 8001660:	2b00      	cmp	r3, #0
 8001662:	d001      	beq.n	8001668 <HAL_SD_MspInit+0x1bc>
    {
      Error_Handler();
 8001664:	f7ff fc58 	bl	8000f18 <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmatx,hdma_sdio_tx);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	4a0e      	ldr	r2, [pc, #56]	; (80016a4 <HAL_SD_MspInit+0x1f8>)
 800166c:	63da      	str	r2, [r3, #60]	; 0x3c
 800166e:	4a0d      	ldr	r2, [pc, #52]	; (80016a4 <HAL_SD_MspInit+0x1f8>)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 8001674:	2200      	movs	r2, #0
 8001676:	2100      	movs	r1, #0
 8001678:	2031      	movs	r0, #49	; 0x31
 800167a:	f001 fb4e 	bl	8002d1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 800167e:	2031      	movs	r0, #49	; 0x31
 8001680:	f001 fb67 	bl	8002d52 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }
}
 8001684:	bf00      	nop
 8001686:	3728      	adds	r7, #40	; 0x28
 8001688:	46bd      	mov	sp, r7
 800168a:	bd80      	pop	{r7, pc}
 800168c:	40012c00 	.word	0x40012c00
 8001690:	40023800 	.word	0x40023800
 8001694:	40020800 	.word	0x40020800
 8001698:	40020c00 	.word	0x40020c00
 800169c:	2000134c 	.word	0x2000134c
 80016a0:	40026458 	.word	0x40026458
 80016a4:	200013ac 	.word	0x200013ac
 80016a8:	400264a0 	.word	0x400264a0

080016ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016ac:	b480      	push	{r7}
 80016ae:	b083      	sub	sp, #12
 80016b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016b2:	2300      	movs	r3, #0
 80016b4:	607b      	str	r3, [r7, #4]
 80016b6:	4b10      	ldr	r3, [pc, #64]	; (80016f8 <HAL_MspInit+0x4c>)
 80016b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016ba:	4a0f      	ldr	r2, [pc, #60]	; (80016f8 <HAL_MspInit+0x4c>)
 80016bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016c0:	6453      	str	r3, [r2, #68]	; 0x44
 80016c2:	4b0d      	ldr	r3, [pc, #52]	; (80016f8 <HAL_MspInit+0x4c>)
 80016c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016ca:	607b      	str	r3, [r7, #4]
 80016cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016ce:	2300      	movs	r3, #0
 80016d0:	603b      	str	r3, [r7, #0]
 80016d2:	4b09      	ldr	r3, [pc, #36]	; (80016f8 <HAL_MspInit+0x4c>)
 80016d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016d6:	4a08      	ldr	r2, [pc, #32]	; (80016f8 <HAL_MspInit+0x4c>)
 80016d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016dc:	6413      	str	r3, [r2, #64]	; 0x40
 80016de:	4b06      	ldr	r3, [pc, #24]	; (80016f8 <HAL_MspInit+0x4c>)
 80016e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016e6:	603b      	str	r3, [r7, #0]
 80016e8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016ea:	bf00      	nop
 80016ec:	370c      	adds	r7, #12
 80016ee:	46bd      	mov	sp, r7
 80016f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f4:	4770      	bx	lr
 80016f6:	bf00      	nop
 80016f8:	40023800 	.word	0x40023800

080016fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8001700:	f004 fada 	bl	8005cb8 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001704:	e7fe      	b.n	8001704 <NMI_Handler+0x8>

08001706 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001706:	b480      	push	{r7}
 8001708:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800170a:	e7fe      	b.n	800170a <HardFault_Handler+0x4>

0800170c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800170c:	b480      	push	{r7}
 800170e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001710:	e7fe      	b.n	8001710 <MemManage_Handler+0x4>

08001712 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001712:	b480      	push	{r7}
 8001714:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001716:	e7fe      	b.n	8001716 <BusFault_Handler+0x4>

08001718 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001718:	b480      	push	{r7}
 800171a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800171c:	e7fe      	b.n	800171c <UsageFault_Handler+0x4>

0800171e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800171e:	b480      	push	{r7}
 8001720:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001722:	bf00      	nop
 8001724:	46bd      	mov	sp, r7
 8001726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172a:	4770      	bx	lr

0800172c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800172c:	b480      	push	{r7}
 800172e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001730:	bf00      	nop
 8001732:	46bd      	mov	sp, r7
 8001734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001738:	4770      	bx	lr

0800173a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800173a:	b480      	push	{r7}
 800173c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800173e:	bf00      	nop
 8001740:	46bd      	mov	sp, r7
 8001742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001746:	4770      	bx	lr

08001748 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800174c:	f000 faf8 	bl	8001d40 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001750:	bf00      	nop
 8001752:	bd80      	pop	{r7, pc}

08001754 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001758:	4805      	ldr	r0, [pc, #20]	; (8001770 <ADC_IRQHandler+0x1c>)
 800175a:	f000 fb78 	bl	8001e4e <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 800175e:	4805      	ldr	r0, [pc, #20]	; (8001774 <ADC_IRQHandler+0x20>)
 8001760:	f000 fb75 	bl	8001e4e <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc3);
 8001764:	4804      	ldr	r0, [pc, #16]	; (8001778 <ADC_IRQHandler+0x24>)
 8001766:	f000 fb72 	bl	8001e4e <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800176a:	bf00      	nop
 800176c:	bd80      	pop	{r7, pc}
 800176e:	bf00      	nop
 8001770:	2000008c 	.word	0x2000008c
 8001774:	200000d4 	.word	0x200000d4
 8001778:	2000011c 	.word	0x2000011c

0800177c <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001780:	4802      	ldr	r0, [pc, #8]	; (800178c <CAN1_TX_IRQHandler+0x10>)
 8001782:	f000 ffb6 	bl	80026f2 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8001786:	bf00      	nop
 8001788:	bd80      	pop	{r7, pc}
 800178a:	bf00      	nop
 800178c:	20000164 	.word	0x20000164

08001790 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001794:	4802      	ldr	r0, [pc, #8]	; (80017a0 <CAN1_RX0_IRQHandler+0x10>)
 8001796:	f000 ffac 	bl	80026f2 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 800179a:	bf00      	nop
 800179c:	bd80      	pop	{r7, pc}
 800179e:	bf00      	nop
 80017a0:	20000164 	.word	0x20000164

080017a4 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80017a8:	4802      	ldr	r0, [pc, #8]	; (80017b4 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80017aa:	f006 f871 	bl	8007890 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80017ae:	bf00      	nop
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	20001410 	.word	0x20001410

080017b8 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80017bc:	4802      	ldr	r0, [pc, #8]	; (80017c8 <I2C1_EV_IRQHandler+0x10>)
 80017be:	f002 fa11 	bl	8003be4 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80017c2:	bf00      	nop
 80017c4:	bd80      	pop	{r7, pc}
 80017c6:	bf00      	nop
 80017c8:	2000018c 	.word	0x2000018c

080017cc <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 80017d0:	4802      	ldr	r0, [pc, #8]	; (80017dc <I2C2_EV_IRQHandler+0x10>)
 80017d2:	f002 fa07 	bl	8003be4 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 80017d6:	bf00      	nop
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	200001e0 	.word	0x200001e0

080017e0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80017e4:	4802      	ldr	r0, [pc, #8]	; (80017f0 <USART1_IRQHandler+0x10>)
 80017e6:	f006 fcf5 	bl	80081d4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80017ea:	bf00      	nop
 80017ec:	bd80      	pop	{r7, pc}
 80017ee:	bf00      	nop
 80017f0:	20001458 	.word	0x20001458

080017f4 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 80017f8:	4802      	ldr	r0, [pc, #8]	; (8001804 <SDIO_IRQHandler+0x10>)
 80017fa:	f005 f8d1 	bl	80069a0 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 80017fe:	bf00      	nop
 8001800:	bd80      	pop	{r7, pc}
 8001802:	bf00      	nop
 8001804:	200012c8 	.word	0x200012c8

08001808 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 800180c:	4802      	ldr	r0, [pc, #8]	; (8001818 <DMA2_Stream3_IRQHandler+0x10>)
 800180e:	f001 fc53 	bl	80030b8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8001812:	bf00      	nop
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	2000134c 	.word	0x2000134c

0800181c <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8001820:	4802      	ldr	r0, [pc, #8]	; (800182c <DMA2_Stream6_IRQHandler+0x10>)
 8001822:	f001 fc49 	bl	80030b8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8001826:	bf00      	nop
 8001828:	bd80      	pop	{r7, pc}
 800182a:	bf00      	nop
 800182c:	200013ac 	.word	0x200013ac

08001830 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b086      	sub	sp, #24
 8001834:	af00      	add	r7, sp, #0
 8001836:	60f8      	str	r0, [r7, #12]
 8001838:	60b9      	str	r1, [r7, #8]
 800183a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800183c:	2300      	movs	r3, #0
 800183e:	617b      	str	r3, [r7, #20]
 8001840:	e00a      	b.n	8001858 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001842:	f3af 8000 	nop.w
 8001846:	4601      	mov	r1, r0
 8001848:	68bb      	ldr	r3, [r7, #8]
 800184a:	1c5a      	adds	r2, r3, #1
 800184c:	60ba      	str	r2, [r7, #8]
 800184e:	b2ca      	uxtb	r2, r1
 8001850:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001852:	697b      	ldr	r3, [r7, #20]
 8001854:	3301      	adds	r3, #1
 8001856:	617b      	str	r3, [r7, #20]
 8001858:	697a      	ldr	r2, [r7, #20]
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	429a      	cmp	r2, r3
 800185e:	dbf0      	blt.n	8001842 <_read+0x12>
  }

  return len;
 8001860:	687b      	ldr	r3, [r7, #4]
}
 8001862:	4618      	mov	r0, r3
 8001864:	3718      	adds	r7, #24
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}

0800186a <_close>:
  }
  return len;
}

int _close(int file)
{
 800186a:	b480      	push	{r7}
 800186c:	b083      	sub	sp, #12
 800186e:	af00      	add	r7, sp, #0
 8001870:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001872:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001876:	4618      	mov	r0, r3
 8001878:	370c      	adds	r7, #12
 800187a:	46bd      	mov	sp, r7
 800187c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001880:	4770      	bx	lr

08001882 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001882:	b480      	push	{r7}
 8001884:	b083      	sub	sp, #12
 8001886:	af00      	add	r7, sp, #0
 8001888:	6078      	str	r0, [r7, #4]
 800188a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001892:	605a      	str	r2, [r3, #4]
  return 0;
 8001894:	2300      	movs	r3, #0
}
 8001896:	4618      	mov	r0, r3
 8001898:	370c      	adds	r7, #12
 800189a:	46bd      	mov	sp, r7
 800189c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a0:	4770      	bx	lr

080018a2 <_isatty>:

int _isatty(int file)
{
 80018a2:	b480      	push	{r7}
 80018a4:	b083      	sub	sp, #12
 80018a6:	af00      	add	r7, sp, #0
 80018a8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80018aa:	2301      	movs	r3, #1
}
 80018ac:	4618      	mov	r0, r3
 80018ae:	370c      	adds	r7, #12
 80018b0:	46bd      	mov	sp, r7
 80018b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b6:	4770      	bx	lr

080018b8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80018b8:	b480      	push	{r7}
 80018ba:	b085      	sub	sp, #20
 80018bc:	af00      	add	r7, sp, #0
 80018be:	60f8      	str	r0, [r7, #12]
 80018c0:	60b9      	str	r1, [r7, #8]
 80018c2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80018c4:	2300      	movs	r3, #0
}
 80018c6:	4618      	mov	r0, r3
 80018c8:	3714      	adds	r7, #20
 80018ca:	46bd      	mov	sp, r7
 80018cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d0:	4770      	bx	lr
	...

080018d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b086      	sub	sp, #24
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018dc:	4a14      	ldr	r2, [pc, #80]	; (8001930 <_sbrk+0x5c>)
 80018de:	4b15      	ldr	r3, [pc, #84]	; (8001934 <_sbrk+0x60>)
 80018e0:	1ad3      	subs	r3, r2, r3
 80018e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018e4:	697b      	ldr	r3, [r7, #20]
 80018e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018e8:	4b13      	ldr	r3, [pc, #76]	; (8001938 <_sbrk+0x64>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d102      	bne.n	80018f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018f0:	4b11      	ldr	r3, [pc, #68]	; (8001938 <_sbrk+0x64>)
 80018f2:	4a12      	ldr	r2, [pc, #72]	; (800193c <_sbrk+0x68>)
 80018f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018f6:	4b10      	ldr	r3, [pc, #64]	; (8001938 <_sbrk+0x64>)
 80018f8:	681a      	ldr	r2, [r3, #0]
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	4413      	add	r3, r2
 80018fe:	693a      	ldr	r2, [r7, #16]
 8001900:	429a      	cmp	r2, r3
 8001902:	d207      	bcs.n	8001914 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001904:	f00b fa04 	bl	800cd10 <__errno>
 8001908:	4603      	mov	r3, r0
 800190a:	220c      	movs	r2, #12
 800190c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800190e:	f04f 33ff 	mov.w	r3, #4294967295
 8001912:	e009      	b.n	8001928 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001914:	4b08      	ldr	r3, [pc, #32]	; (8001938 <_sbrk+0x64>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800191a:	4b07      	ldr	r3, [pc, #28]	; (8001938 <_sbrk+0x64>)
 800191c:	681a      	ldr	r2, [r3, #0]
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	4413      	add	r3, r2
 8001922:	4a05      	ldr	r2, [pc, #20]	; (8001938 <_sbrk+0x64>)
 8001924:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001926:	68fb      	ldr	r3, [r7, #12]
}
 8001928:	4618      	mov	r0, r3
 800192a:	3718      	adds	r7, #24
 800192c:	46bd      	mov	sp, r7
 800192e:	bd80      	pop	{r7, pc}
 8001930:	20020000 	.word	0x20020000
 8001934:	00000400 	.word	0x00000400
 8001938:	2000140c 	.word	0x2000140c
 800193c:	20001738 	.word	0x20001738

08001940 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001940:	b480      	push	{r7}
 8001942:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001944:	4b06      	ldr	r3, [pc, #24]	; (8001960 <SystemInit+0x20>)
 8001946:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800194a:	4a05      	ldr	r2, [pc, #20]	; (8001960 <SystemInit+0x20>)
 800194c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001950:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001954:	bf00      	nop
 8001956:	46bd      	mov	sp, r7
 8001958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195c:	4770      	bx	lr
 800195e:	bf00      	nop
 8001960:	e000ed00 	.word	0xe000ed00

08001964 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "tim.h"

/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001964:	b580      	push	{r7, lr}
 8001966:	b082      	sub	sp, #8
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM1) {
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	4a08      	ldr	r2, [pc, #32]	; (8001994 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8001972:	4293      	cmp	r3, r2
 8001974:	d109      	bne.n	800198a <HAL_TIM_PeriodElapsedCallback+0x26>
    #ifdef DEBUG_MODE
      printf("[%8lu] [INF] TIMER IRQ\n", HAL_GetTick());
 8001976:	f000 f9f7 	bl	8001d68 <HAL_GetTick>
 800197a:	4603      	mov	r3, r0
 800197c:	4619      	mov	r1, r3
 800197e:	4806      	ldr	r0, [pc, #24]	; (8001998 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8001980:	f00b f9f8 	bl	800cd74 <iprintf>
    #endif

    timer_flag[TIMER_SD] = true;
 8001984:	4b05      	ldr	r3, [pc, #20]	; (800199c <HAL_TIM_PeriodElapsedCallback+0x38>)
 8001986:	2201      	movs	r2, #1
 8001988:	601a      	str	r2, [r3, #0]
	}
}
 800198a:	bf00      	nop
 800198c:	3708      	adds	r7, #8
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}
 8001992:	bf00      	nop
 8001994:	40010000 	.word	0x40010000
 8001998:	0800e1b8 	.word	0x0800e1b8
 800199c:	20001268 	.word	0x20001268

080019a0 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b086      	sub	sp, #24
 80019a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019a6:	f107 0308 	add.w	r3, r7, #8
 80019aa:	2200      	movs	r2, #0
 80019ac:	601a      	str	r2, [r3, #0]
 80019ae:	605a      	str	r2, [r3, #4]
 80019b0:	609a      	str	r2, [r3, #8]
 80019b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019b4:	463b      	mov	r3, r7
 80019b6:	2200      	movs	r2, #0
 80019b8:	601a      	str	r2, [r3, #0]
 80019ba:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80019bc:	4b1f      	ldr	r3, [pc, #124]	; (8001a3c <MX_TIM1_Init+0x9c>)
 80019be:	4a20      	ldr	r2, [pc, #128]	; (8001a40 <MX_TIM1_Init+0xa0>)
 80019c0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 8400 - 1;
 80019c2:	4b1e      	ldr	r3, [pc, #120]	; (8001a3c <MX_TIM1_Init+0x9c>)
 80019c4:	f242 02cf 	movw	r2, #8399	; 0x20cf
 80019c8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019ca:	4b1c      	ldr	r3, [pc, #112]	; (8001a3c <MX_TIM1_Init+0x9c>)
 80019cc:	2200      	movs	r2, #0
 80019ce:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 20000 - 1;
 80019d0:	4b1a      	ldr	r3, [pc, #104]	; (8001a3c <MX_TIM1_Init+0x9c>)
 80019d2:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80019d6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019d8:	4b18      	ldr	r3, [pc, #96]	; (8001a3c <MX_TIM1_Init+0x9c>)
 80019da:	2200      	movs	r2, #0
 80019dc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80019de:	4b17      	ldr	r3, [pc, #92]	; (8001a3c <MX_TIM1_Init+0x9c>)
 80019e0:	2200      	movs	r2, #0
 80019e2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019e4:	4b15      	ldr	r3, [pc, #84]	; (8001a3c <MX_TIM1_Init+0x9c>)
 80019e6:	2200      	movs	r2, #0
 80019e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80019ea:	4814      	ldr	r0, [pc, #80]	; (8001a3c <MX_TIM1_Init+0x9c>)
 80019ec:	f005 fe90 	bl	8007710 <HAL_TIM_Base_Init>
 80019f0:	4603      	mov	r3, r0
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d001      	beq.n	80019fa <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 80019f6:	f7ff fa8f 	bl	8000f18 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019fe:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001a00:	f107 0308 	add.w	r3, r7, #8
 8001a04:	4619      	mov	r1, r3
 8001a06:	480d      	ldr	r0, [pc, #52]	; (8001a3c <MX_TIM1_Init+0x9c>)
 8001a08:	f006 f84a 	bl	8007aa0 <HAL_TIM_ConfigClockSource>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d001      	beq.n	8001a16 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8001a12:	f7ff fa81 	bl	8000f18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a16:	2300      	movs	r3, #0
 8001a18:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001a1e:	463b      	mov	r3, r7
 8001a20:	4619      	mov	r1, r3
 8001a22:	4806      	ldr	r0, [pc, #24]	; (8001a3c <MX_TIM1_Init+0x9c>)
 8001a24:	f006 fa66 	bl	8007ef4 <HAL_TIMEx_MasterConfigSynchronization>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d001      	beq.n	8001a32 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8001a2e:	f7ff fa73 	bl	8000f18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001a32:	bf00      	nop
 8001a34:	3718      	adds	r7, #24
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	bf00      	nop
 8001a3c:	20001410 	.word	0x20001410
 8001a40:	40010000 	.word	0x40010000

08001a44 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b084      	sub	sp, #16
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	4a0e      	ldr	r2, [pc, #56]	; (8001a8c <HAL_TIM_Base_MspInit+0x48>)
 8001a52:	4293      	cmp	r3, r2
 8001a54:	d115      	bne.n	8001a82 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001a56:	2300      	movs	r3, #0
 8001a58:	60fb      	str	r3, [r7, #12]
 8001a5a:	4b0d      	ldr	r3, [pc, #52]	; (8001a90 <HAL_TIM_Base_MspInit+0x4c>)
 8001a5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a5e:	4a0c      	ldr	r2, [pc, #48]	; (8001a90 <HAL_TIM_Base_MspInit+0x4c>)
 8001a60:	f043 0301 	orr.w	r3, r3, #1
 8001a64:	6453      	str	r3, [r2, #68]	; 0x44
 8001a66:	4b0a      	ldr	r3, [pc, #40]	; (8001a90 <HAL_TIM_Base_MspInit+0x4c>)
 8001a68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a6a:	f003 0301 	and.w	r3, r3, #1
 8001a6e:	60fb      	str	r3, [r7, #12]
 8001a70:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8001a72:	2200      	movs	r2, #0
 8001a74:	2100      	movs	r1, #0
 8001a76:	2019      	movs	r0, #25
 8001a78:	f001 f94f 	bl	8002d1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001a7c:	2019      	movs	r0, #25
 8001a7e:	f001 f968 	bl	8002d52 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001a82:	bf00      	nop
 8001a84:	3710      	adds	r7, #16
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}
 8001a8a:	bf00      	nop
 8001a8c:	40010000 	.word	0x40010000
 8001a90:	40023800 	.word	0x40023800

08001a94 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001a98:	4b11      	ldr	r3, [pc, #68]	; (8001ae0 <MX_USART1_UART_Init+0x4c>)
 8001a9a:	4a12      	ldr	r2, [pc, #72]	; (8001ae4 <MX_USART1_UART_Init+0x50>)
 8001a9c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001a9e:	4b10      	ldr	r3, [pc, #64]	; (8001ae0 <MX_USART1_UART_Init+0x4c>)
 8001aa0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001aa4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001aa6:	4b0e      	ldr	r3, [pc, #56]	; (8001ae0 <MX_USART1_UART_Init+0x4c>)
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001aac:	4b0c      	ldr	r3, [pc, #48]	; (8001ae0 <MX_USART1_UART_Init+0x4c>)
 8001aae:	2200      	movs	r2, #0
 8001ab0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001ab2:	4b0b      	ldr	r3, [pc, #44]	; (8001ae0 <MX_USART1_UART_Init+0x4c>)
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001ab8:	4b09      	ldr	r3, [pc, #36]	; (8001ae0 <MX_USART1_UART_Init+0x4c>)
 8001aba:	220c      	movs	r2, #12
 8001abc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001abe:	4b08      	ldr	r3, [pc, #32]	; (8001ae0 <MX_USART1_UART_Init+0x4c>)
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ac4:	4b06      	ldr	r3, [pc, #24]	; (8001ae0 <MX_USART1_UART_Init+0x4c>)
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001aca:	4805      	ldr	r0, [pc, #20]	; (8001ae0 <MX_USART1_UART_Init+0x4c>)
 8001acc:	f006 faa2 	bl	8008014 <HAL_UART_Init>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d001      	beq.n	8001ada <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001ad6:	f7ff fa1f 	bl	8000f18 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001ada:	bf00      	nop
 8001adc:	bd80      	pop	{r7, pc}
 8001ade:	bf00      	nop
 8001ae0:	20001458 	.word	0x20001458
 8001ae4:	40011000 	.word	0x40011000

08001ae8 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001aec:	4b11      	ldr	r3, [pc, #68]	; (8001b34 <MX_USART2_UART_Init+0x4c>)
 8001aee:	4a12      	ldr	r2, [pc, #72]	; (8001b38 <MX_USART2_UART_Init+0x50>)
 8001af0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001af2:	4b10      	ldr	r3, [pc, #64]	; (8001b34 <MX_USART2_UART_Init+0x4c>)
 8001af4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001af8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001afa:	4b0e      	ldr	r3, [pc, #56]	; (8001b34 <MX_USART2_UART_Init+0x4c>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001b00:	4b0c      	ldr	r3, [pc, #48]	; (8001b34 <MX_USART2_UART_Init+0x4c>)
 8001b02:	2200      	movs	r2, #0
 8001b04:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001b06:	4b0b      	ldr	r3, [pc, #44]	; (8001b34 <MX_USART2_UART_Init+0x4c>)
 8001b08:	2200      	movs	r2, #0
 8001b0a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001b0c:	4b09      	ldr	r3, [pc, #36]	; (8001b34 <MX_USART2_UART_Init+0x4c>)
 8001b0e:	220c      	movs	r2, #12
 8001b10:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b12:	4b08      	ldr	r3, [pc, #32]	; (8001b34 <MX_USART2_UART_Init+0x4c>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b18:	4b06      	ldr	r3, [pc, #24]	; (8001b34 <MX_USART2_UART_Init+0x4c>)
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001b1e:	4805      	ldr	r0, [pc, #20]	; (8001b34 <MX_USART2_UART_Init+0x4c>)
 8001b20:	f006 fa78 	bl	8008014 <HAL_UART_Init>
 8001b24:	4603      	mov	r3, r0
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d001      	beq.n	8001b2e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001b2a:	f7ff f9f5 	bl	8000f18 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001b2e:	bf00      	nop
 8001b30:	bd80      	pop	{r7, pc}
 8001b32:	bf00      	nop
 8001b34:	2000149c 	.word	0x2000149c
 8001b38:	40004400 	.word	0x40004400

08001b3c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b08c      	sub	sp, #48	; 0x30
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b44:	f107 031c 	add.w	r3, r7, #28
 8001b48:	2200      	movs	r2, #0
 8001b4a:	601a      	str	r2, [r3, #0]
 8001b4c:	605a      	str	r2, [r3, #4]
 8001b4e:	609a      	str	r2, [r3, #8]
 8001b50:	60da      	str	r2, [r3, #12]
 8001b52:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4a36      	ldr	r2, [pc, #216]	; (8001c34 <HAL_UART_MspInit+0xf8>)
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d135      	bne.n	8001bca <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001b5e:	2300      	movs	r3, #0
 8001b60:	61bb      	str	r3, [r7, #24]
 8001b62:	4b35      	ldr	r3, [pc, #212]	; (8001c38 <HAL_UART_MspInit+0xfc>)
 8001b64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b66:	4a34      	ldr	r2, [pc, #208]	; (8001c38 <HAL_UART_MspInit+0xfc>)
 8001b68:	f043 0310 	orr.w	r3, r3, #16
 8001b6c:	6453      	str	r3, [r2, #68]	; 0x44
 8001b6e:	4b32      	ldr	r3, [pc, #200]	; (8001c38 <HAL_UART_MspInit+0xfc>)
 8001b70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b72:	f003 0310 	and.w	r3, r3, #16
 8001b76:	61bb      	str	r3, [r7, #24]
 8001b78:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	617b      	str	r3, [r7, #20]
 8001b7e:	4b2e      	ldr	r3, [pc, #184]	; (8001c38 <HAL_UART_MspInit+0xfc>)
 8001b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b82:	4a2d      	ldr	r2, [pc, #180]	; (8001c38 <HAL_UART_MspInit+0xfc>)
 8001b84:	f043 0301 	orr.w	r3, r3, #1
 8001b88:	6313      	str	r3, [r2, #48]	; 0x30
 8001b8a:	4b2b      	ldr	r3, [pc, #172]	; (8001c38 <HAL_UART_MspInit+0xfc>)
 8001b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b8e:	f003 0301 	and.w	r3, r3, #1
 8001b92:	617b      	str	r3, [r7, #20]
 8001b94:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001b96:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001b9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b9c:	2302      	movs	r3, #2
 8001b9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ba4:	2303      	movs	r3, #3
 8001ba6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001ba8:	2307      	movs	r3, #7
 8001baa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bac:	f107 031c 	add.w	r3, r7, #28
 8001bb0:	4619      	mov	r1, r3
 8001bb2:	4822      	ldr	r0, [pc, #136]	; (8001c3c <HAL_UART_MspInit+0x100>)
 8001bb4:	f001 fd04 	bl	80035c0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001bb8:	2200      	movs	r2, #0
 8001bba:	2100      	movs	r1, #0
 8001bbc:	2025      	movs	r0, #37	; 0x25
 8001bbe:	f001 f8ac 	bl	8002d1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001bc2:	2025      	movs	r0, #37	; 0x25
 8001bc4:	f001 f8c5 	bl	8002d52 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001bc8:	e030      	b.n	8001c2c <HAL_UART_MspInit+0xf0>
  else if(uartHandle->Instance==USART2)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	4a1c      	ldr	r2, [pc, #112]	; (8001c40 <HAL_UART_MspInit+0x104>)
 8001bd0:	4293      	cmp	r3, r2
 8001bd2:	d12b      	bne.n	8001c2c <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	613b      	str	r3, [r7, #16]
 8001bd8:	4b17      	ldr	r3, [pc, #92]	; (8001c38 <HAL_UART_MspInit+0xfc>)
 8001bda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bdc:	4a16      	ldr	r2, [pc, #88]	; (8001c38 <HAL_UART_MspInit+0xfc>)
 8001bde:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001be2:	6413      	str	r3, [r2, #64]	; 0x40
 8001be4:	4b14      	ldr	r3, [pc, #80]	; (8001c38 <HAL_UART_MspInit+0xfc>)
 8001be6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001be8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bec:	613b      	str	r3, [r7, #16]
 8001bee:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	60fb      	str	r3, [r7, #12]
 8001bf4:	4b10      	ldr	r3, [pc, #64]	; (8001c38 <HAL_UART_MspInit+0xfc>)
 8001bf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bf8:	4a0f      	ldr	r2, [pc, #60]	; (8001c38 <HAL_UART_MspInit+0xfc>)
 8001bfa:	f043 0308 	orr.w	r3, r3, #8
 8001bfe:	6313      	str	r3, [r2, #48]	; 0x30
 8001c00:	4b0d      	ldr	r3, [pc, #52]	; (8001c38 <HAL_UART_MspInit+0xfc>)
 8001c02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c04:	f003 0308 	and.w	r3, r3, #8
 8001c08:	60fb      	str	r3, [r7, #12]
 8001c0a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001c0c:	2360      	movs	r3, #96	; 0x60
 8001c0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c10:	2302      	movs	r3, #2
 8001c12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c14:	2300      	movs	r3, #0
 8001c16:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c18:	2303      	movs	r3, #3
 8001c1a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001c1c:	2307      	movs	r3, #7
 8001c1e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c20:	f107 031c 	add.w	r3, r7, #28
 8001c24:	4619      	mov	r1, r3
 8001c26:	4807      	ldr	r0, [pc, #28]	; (8001c44 <HAL_UART_MspInit+0x108>)
 8001c28:	f001 fcca 	bl	80035c0 <HAL_GPIO_Init>
}
 8001c2c:	bf00      	nop
 8001c2e:	3730      	adds	r7, #48	; 0x30
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd80      	pop	{r7, pc}
 8001c34:	40011000 	.word	0x40011000
 8001c38:	40023800 	.word	0x40023800
 8001c3c:	40020000 	.word	0x40020000
 8001c40:	40004400 	.word	0x40004400
 8001c44:	40020c00 	.word	0x40020c00

08001c48 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001c48:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c80 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001c4c:	480d      	ldr	r0, [pc, #52]	; (8001c84 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001c4e:	490e      	ldr	r1, [pc, #56]	; (8001c88 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001c50:	4a0e      	ldr	r2, [pc, #56]	; (8001c8c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001c52:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c54:	e002      	b.n	8001c5c <LoopCopyDataInit>

08001c56 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c56:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c58:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c5a:	3304      	adds	r3, #4

08001c5c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c5c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c5e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c60:	d3f9      	bcc.n	8001c56 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c62:	4a0b      	ldr	r2, [pc, #44]	; (8001c90 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001c64:	4c0b      	ldr	r4, [pc, #44]	; (8001c94 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001c66:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c68:	e001      	b.n	8001c6e <LoopFillZerobss>

08001c6a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c6a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c6c:	3204      	adds	r2, #4

08001c6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c6e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c70:	d3fb      	bcc.n	8001c6a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001c72:	f7ff fe65 	bl	8001940 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001c76:	f00b f851 	bl	800cd1c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c7a:	f7ff f85b 	bl	8000d34 <main>
  bx  lr    
 8001c7e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001c80:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001c84:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c88:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001c8c:	0800e734 	.word	0x0800e734
  ldr r2, =_sbss
 8001c90:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001c94:	20001738 	.word	0x20001738

08001c98 <CAN1_RX1_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c98:	e7fe      	b.n	8001c98 <CAN1_RX1_IRQHandler>
	...

08001c9c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001ca0:	4b0e      	ldr	r3, [pc, #56]	; (8001cdc <HAL_Init+0x40>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4a0d      	ldr	r2, [pc, #52]	; (8001cdc <HAL_Init+0x40>)
 8001ca6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001caa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001cac:	4b0b      	ldr	r3, [pc, #44]	; (8001cdc <HAL_Init+0x40>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4a0a      	ldr	r2, [pc, #40]	; (8001cdc <HAL_Init+0x40>)
 8001cb2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001cb6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001cb8:	4b08      	ldr	r3, [pc, #32]	; (8001cdc <HAL_Init+0x40>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4a07      	ldr	r2, [pc, #28]	; (8001cdc <HAL_Init+0x40>)
 8001cbe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cc2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001cc4:	2003      	movs	r0, #3
 8001cc6:	f001 f81d 	bl	8002d04 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001cca:	2000      	movs	r0, #0
 8001ccc:	f000 f808 	bl	8001ce0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001cd0:	f7ff fcec 	bl	80016ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001cd4:	2300      	movs	r3, #0
}
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	bd80      	pop	{r7, pc}
 8001cda:	bf00      	nop
 8001cdc:	40023c00 	.word	0x40023c00

08001ce0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b082      	sub	sp, #8
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ce8:	4b12      	ldr	r3, [pc, #72]	; (8001d34 <HAL_InitTick+0x54>)
 8001cea:	681a      	ldr	r2, [r3, #0]
 8001cec:	4b12      	ldr	r3, [pc, #72]	; (8001d38 <HAL_InitTick+0x58>)
 8001cee:	781b      	ldrb	r3, [r3, #0]
 8001cf0:	4619      	mov	r1, r3
 8001cf2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001cf6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001cfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cfe:	4618      	mov	r0, r3
 8001d00:	f001 f835 	bl	8002d6e <HAL_SYSTICK_Config>
 8001d04:	4603      	mov	r3, r0
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d001      	beq.n	8001d0e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	e00e      	b.n	8001d2c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	2b0f      	cmp	r3, #15
 8001d12:	d80a      	bhi.n	8001d2a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d14:	2200      	movs	r2, #0
 8001d16:	6879      	ldr	r1, [r7, #4]
 8001d18:	f04f 30ff 	mov.w	r0, #4294967295
 8001d1c:	f000 fffd 	bl	8002d1a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d20:	4a06      	ldr	r2, [pc, #24]	; (8001d3c <HAL_InitTick+0x5c>)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d26:	2300      	movs	r3, #0
 8001d28:	e000      	b.n	8001d2c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d2a:	2301      	movs	r3, #1
}
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	3708      	adds	r7, #8
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bd80      	pop	{r7, pc}
 8001d34:	20000000 	.word	0x20000000
 8001d38:	20000008 	.word	0x20000008
 8001d3c:	20000004 	.word	0x20000004

08001d40 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d40:	b480      	push	{r7}
 8001d42:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d44:	4b06      	ldr	r3, [pc, #24]	; (8001d60 <HAL_IncTick+0x20>)
 8001d46:	781b      	ldrb	r3, [r3, #0]
 8001d48:	461a      	mov	r2, r3
 8001d4a:	4b06      	ldr	r3, [pc, #24]	; (8001d64 <HAL_IncTick+0x24>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4413      	add	r3, r2
 8001d50:	4a04      	ldr	r2, [pc, #16]	; (8001d64 <HAL_IncTick+0x24>)
 8001d52:	6013      	str	r3, [r2, #0]
}
 8001d54:	bf00      	nop
 8001d56:	46bd      	mov	sp, r7
 8001d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5c:	4770      	bx	lr
 8001d5e:	bf00      	nop
 8001d60:	20000008 	.word	0x20000008
 8001d64:	200014e0 	.word	0x200014e0

08001d68 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	af00      	add	r7, sp, #0
  return uwTick;
 8001d6c:	4b03      	ldr	r3, [pc, #12]	; (8001d7c <HAL_GetTick+0x14>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
}
 8001d70:	4618      	mov	r0, r3
 8001d72:	46bd      	mov	sp, r7
 8001d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d78:	4770      	bx	lr
 8001d7a:	bf00      	nop
 8001d7c:	200014e0 	.word	0x200014e0

08001d80 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b084      	sub	sp, #16
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d88:	f7ff ffee 	bl	8001d68 <HAL_GetTick>
 8001d8c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d98:	d005      	beq.n	8001da6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d9a:	4b0a      	ldr	r3, [pc, #40]	; (8001dc4 <HAL_Delay+0x44>)
 8001d9c:	781b      	ldrb	r3, [r3, #0]
 8001d9e:	461a      	mov	r2, r3
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	4413      	add	r3, r2
 8001da4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001da6:	bf00      	nop
 8001da8:	f7ff ffde 	bl	8001d68 <HAL_GetTick>
 8001dac:	4602      	mov	r2, r0
 8001dae:	68bb      	ldr	r3, [r7, #8]
 8001db0:	1ad3      	subs	r3, r2, r3
 8001db2:	68fa      	ldr	r2, [r7, #12]
 8001db4:	429a      	cmp	r2, r3
 8001db6:	d8f7      	bhi.n	8001da8 <HAL_Delay+0x28>
  {
  }
}
 8001db8:	bf00      	nop
 8001dba:	bf00      	nop
 8001dbc:	3710      	adds	r7, #16
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd80      	pop	{r7, pc}
 8001dc2:	bf00      	nop
 8001dc4:	20000008 	.word	0x20000008

08001dc8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b084      	sub	sp, #16
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d101      	bne.n	8001dde <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001dda:	2301      	movs	r3, #1
 8001ddc:	e033      	b.n	8001e46 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d109      	bne.n	8001dfa <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001de6:	6878      	ldr	r0, [r7, #4]
 8001de8:	f7fe fcc2 	bl	8000770 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2200      	movs	r2, #0
 8001df0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	2200      	movs	r2, #0
 8001df6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dfe:	f003 0310 	and.w	r3, r3, #16
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d118      	bne.n	8001e38 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e0a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001e0e:	f023 0302 	bic.w	r3, r3, #2
 8001e12:	f043 0202 	orr.w	r2, r3, #2
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001e1a:	6878      	ldr	r0, [r7, #4]
 8001e1c:	f000 fa68 	bl	80022f0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2200      	movs	r2, #0
 8001e24:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e2a:	f023 0303 	bic.w	r3, r3, #3
 8001e2e:	f043 0201 	orr.w	r2, r3, #1
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	641a      	str	r2, [r3, #64]	; 0x40
 8001e36:	e001      	b.n	8001e3c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001e38:	2301      	movs	r3, #1
 8001e3a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2200      	movs	r2, #0
 8001e40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001e44:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e46:	4618      	mov	r0, r3
 8001e48:	3710      	adds	r7, #16
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bd80      	pop	{r7, pc}

08001e4e <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001e4e:	b580      	push	{r7, lr}
 8001e50:	b086      	sub	sp, #24
 8001e52:	af00      	add	r7, sp, #0
 8001e54:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8001e56:	2300      	movs	r3, #0
 8001e58:	617b      	str	r3, [r7, #20]
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	f003 0302 	and.w	r3, r3, #2
 8001e74:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8001e76:	68bb      	ldr	r3, [r7, #8]
 8001e78:	f003 0320 	and.w	r3, r3, #32
 8001e7c:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8001e7e:	697b      	ldr	r3, [r7, #20]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d049      	beq.n	8001f18 <HAL_ADC_IRQHandler+0xca>
 8001e84:	693b      	ldr	r3, [r7, #16]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d046      	beq.n	8001f18 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e8e:	f003 0310 	and.w	r3, r3, #16
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d105      	bne.n	8001ea2 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e9a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	689b      	ldr	r3, [r3, #8]
 8001ea8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d12b      	bne.n	8001f08 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d127      	bne.n	8001f08 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ebe:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d006      	beq.n	8001ed4 <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	689b      	ldr	r3, [r3, #8]
 8001ecc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d119      	bne.n	8001f08 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	685a      	ldr	r2, [r3, #4]
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f022 0220 	bic.w	r2, r2, #32
 8001ee2:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ee8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ef4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d105      	bne.n	8001f08 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f00:	f043 0201 	orr.w	r2, r3, #1
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001f08:	6878      	ldr	r0, [r7, #4]
 8001f0a:	f000 f8b0 	bl	800206e <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f06f 0212 	mvn.w	r2, #18
 8001f16:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	f003 0304 	and.w	r3, r3, #4
 8001f1e:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8001f20:	68bb      	ldr	r3, [r7, #8]
 8001f22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f26:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8001f28:	697b      	ldr	r3, [r7, #20]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d057      	beq.n	8001fde <HAL_ADC_IRQHandler+0x190>
 8001f2e:	693b      	ldr	r3, [r7, #16]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d054      	beq.n	8001fde <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f38:	f003 0310 	and.w	r3, r3, #16
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d105      	bne.n	8001f4c <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f44:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	689b      	ldr	r3, [r3, #8]
 8001f52:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d139      	bne.n	8001fce <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f60:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d006      	beq.n	8001f76 <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	689b      	ldr	r3, [r3, #8]
 8001f6e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d12b      	bne.n	8001fce <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d124      	bne.n	8001fce <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	689b      	ldr	r3, [r3, #8]
 8001f8a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d11d      	bne.n	8001fce <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d119      	bne.n	8001fce <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	685a      	ldr	r2, [r3, #4]
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001fa8:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fae:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d105      	bne.n	8001fce <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fc6:	f043 0201 	orr.w	r2, r3, #1
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001fce:	6878      	ldr	r0, [r7, #4]
 8001fd0:	f000 fa8a 	bl	80024e8 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f06f 020c 	mvn.w	r2, #12
 8001fdc:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	f003 0301 	and.w	r3, r3, #1
 8001fe4:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8001fe6:	68bb      	ldr	r3, [r7, #8]
 8001fe8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fec:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8001fee:	697b      	ldr	r3, [r7, #20]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d017      	beq.n	8002024 <HAL_ADC_IRQHandler+0x1d6>
 8001ff4:	693b      	ldr	r3, [r7, #16]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d014      	beq.n	8002024 <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f003 0301 	and.w	r3, r3, #1
 8002004:	2b01      	cmp	r3, #1
 8002006:	d10d      	bne.n	8002024 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800200c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002014:	6878      	ldr	r0, [r7, #4]
 8002016:	f000 f834 	bl	8002082 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f06f 0201 	mvn.w	r2, #1
 8002022:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	f003 0320 	and.w	r3, r3, #32
 800202a:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 800202c:	68bb      	ldr	r3, [r7, #8]
 800202e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002032:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8002034:	697b      	ldr	r3, [r7, #20]
 8002036:	2b00      	cmp	r3, #0
 8002038:	d015      	beq.n	8002066 <HAL_ADC_IRQHandler+0x218>
 800203a:	693b      	ldr	r3, [r7, #16]
 800203c:	2b00      	cmp	r3, #0
 800203e:	d012      	beq.n	8002066 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002044:	f043 0202 	orr.w	r2, r3, #2
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f06f 0220 	mvn.w	r2, #32
 8002054:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002056:	6878      	ldr	r0, [r7, #4]
 8002058:	f000 f81d 	bl	8002096 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f06f 0220 	mvn.w	r2, #32
 8002064:	601a      	str	r2, [r3, #0]
  }
}
 8002066:	bf00      	nop
 8002068:	3718      	adds	r7, #24
 800206a:	46bd      	mov	sp, r7
 800206c:	bd80      	pop	{r7, pc}

0800206e <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800206e:	b480      	push	{r7}
 8002070:	b083      	sub	sp, #12
 8002072:	af00      	add	r7, sp, #0
 8002074:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8002076:	bf00      	nop
 8002078:	370c      	adds	r7, #12
 800207a:	46bd      	mov	sp, r7
 800207c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002080:	4770      	bx	lr

08002082 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8002082:	b480      	push	{r7}
 8002084:	b083      	sub	sp, #12
 8002086:	af00      	add	r7, sp, #0
 8002088:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 800208a:	bf00      	nop
 800208c:	370c      	adds	r7, #12
 800208e:	46bd      	mov	sp, r7
 8002090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002094:	4770      	bx	lr

08002096 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002096:	b480      	push	{r7}
 8002098:	b083      	sub	sp, #12
 800209a:	af00      	add	r7, sp, #0
 800209c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800209e:	bf00      	nop
 80020a0:	370c      	adds	r7, #12
 80020a2:	46bd      	mov	sp, r7
 80020a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a8:	4770      	bx	lr
	...

080020ac <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80020ac:	b480      	push	{r7}
 80020ae:	b085      	sub	sp, #20
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
 80020b4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80020b6:	2300      	movs	r3, #0
 80020b8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80020c0:	2b01      	cmp	r3, #1
 80020c2:	d101      	bne.n	80020c8 <HAL_ADC_ConfigChannel+0x1c>
 80020c4:	2302      	movs	r3, #2
 80020c6:	e105      	b.n	80022d4 <HAL_ADC_ConfigChannel+0x228>
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2201      	movs	r2, #1
 80020cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	2b09      	cmp	r3, #9
 80020d6:	d925      	bls.n	8002124 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	68d9      	ldr	r1, [r3, #12]
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	b29b      	uxth	r3, r3
 80020e4:	461a      	mov	r2, r3
 80020e6:	4613      	mov	r3, r2
 80020e8:	005b      	lsls	r3, r3, #1
 80020ea:	4413      	add	r3, r2
 80020ec:	3b1e      	subs	r3, #30
 80020ee:	2207      	movs	r2, #7
 80020f0:	fa02 f303 	lsl.w	r3, r2, r3
 80020f4:	43da      	mvns	r2, r3
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	400a      	ands	r2, r1
 80020fc:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	68d9      	ldr	r1, [r3, #12]
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	689a      	ldr	r2, [r3, #8]
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	b29b      	uxth	r3, r3
 800210e:	4618      	mov	r0, r3
 8002110:	4603      	mov	r3, r0
 8002112:	005b      	lsls	r3, r3, #1
 8002114:	4403      	add	r3, r0
 8002116:	3b1e      	subs	r3, #30
 8002118:	409a      	lsls	r2, r3
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	430a      	orrs	r2, r1
 8002120:	60da      	str	r2, [r3, #12]
 8002122:	e022      	b.n	800216a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	6919      	ldr	r1, [r3, #16]
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	b29b      	uxth	r3, r3
 8002130:	461a      	mov	r2, r3
 8002132:	4613      	mov	r3, r2
 8002134:	005b      	lsls	r3, r3, #1
 8002136:	4413      	add	r3, r2
 8002138:	2207      	movs	r2, #7
 800213a:	fa02 f303 	lsl.w	r3, r2, r3
 800213e:	43da      	mvns	r2, r3
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	400a      	ands	r2, r1
 8002146:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	6919      	ldr	r1, [r3, #16]
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	689a      	ldr	r2, [r3, #8]
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	b29b      	uxth	r3, r3
 8002158:	4618      	mov	r0, r3
 800215a:	4603      	mov	r3, r0
 800215c:	005b      	lsls	r3, r3, #1
 800215e:	4403      	add	r3, r0
 8002160:	409a      	lsls	r2, r3
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	430a      	orrs	r2, r1
 8002168:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	685b      	ldr	r3, [r3, #4]
 800216e:	2b06      	cmp	r3, #6
 8002170:	d824      	bhi.n	80021bc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	685a      	ldr	r2, [r3, #4]
 800217c:	4613      	mov	r3, r2
 800217e:	009b      	lsls	r3, r3, #2
 8002180:	4413      	add	r3, r2
 8002182:	3b05      	subs	r3, #5
 8002184:	221f      	movs	r2, #31
 8002186:	fa02 f303 	lsl.w	r3, r2, r3
 800218a:	43da      	mvns	r2, r3
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	400a      	ands	r2, r1
 8002192:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	b29b      	uxth	r3, r3
 80021a0:	4618      	mov	r0, r3
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	685a      	ldr	r2, [r3, #4]
 80021a6:	4613      	mov	r3, r2
 80021a8:	009b      	lsls	r3, r3, #2
 80021aa:	4413      	add	r3, r2
 80021ac:	3b05      	subs	r3, #5
 80021ae:	fa00 f203 	lsl.w	r2, r0, r3
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	430a      	orrs	r2, r1
 80021b8:	635a      	str	r2, [r3, #52]	; 0x34
 80021ba:	e04c      	b.n	8002256 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	2b0c      	cmp	r3, #12
 80021c2:	d824      	bhi.n	800220e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	685a      	ldr	r2, [r3, #4]
 80021ce:	4613      	mov	r3, r2
 80021d0:	009b      	lsls	r3, r3, #2
 80021d2:	4413      	add	r3, r2
 80021d4:	3b23      	subs	r3, #35	; 0x23
 80021d6:	221f      	movs	r2, #31
 80021d8:	fa02 f303 	lsl.w	r3, r2, r3
 80021dc:	43da      	mvns	r2, r3
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	400a      	ands	r2, r1
 80021e4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	b29b      	uxth	r3, r3
 80021f2:	4618      	mov	r0, r3
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	685a      	ldr	r2, [r3, #4]
 80021f8:	4613      	mov	r3, r2
 80021fa:	009b      	lsls	r3, r3, #2
 80021fc:	4413      	add	r3, r2
 80021fe:	3b23      	subs	r3, #35	; 0x23
 8002200:	fa00 f203 	lsl.w	r2, r0, r3
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	430a      	orrs	r2, r1
 800220a:	631a      	str	r2, [r3, #48]	; 0x30
 800220c:	e023      	b.n	8002256 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	685a      	ldr	r2, [r3, #4]
 8002218:	4613      	mov	r3, r2
 800221a:	009b      	lsls	r3, r3, #2
 800221c:	4413      	add	r3, r2
 800221e:	3b41      	subs	r3, #65	; 0x41
 8002220:	221f      	movs	r2, #31
 8002222:	fa02 f303 	lsl.w	r3, r2, r3
 8002226:	43da      	mvns	r2, r3
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	400a      	ands	r2, r1
 800222e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	b29b      	uxth	r3, r3
 800223c:	4618      	mov	r0, r3
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	685a      	ldr	r2, [r3, #4]
 8002242:	4613      	mov	r3, r2
 8002244:	009b      	lsls	r3, r3, #2
 8002246:	4413      	add	r3, r2
 8002248:	3b41      	subs	r3, #65	; 0x41
 800224a:	fa00 f203 	lsl.w	r2, r0, r3
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	430a      	orrs	r2, r1
 8002254:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002256:	4b22      	ldr	r3, [pc, #136]	; (80022e0 <HAL_ADC_ConfigChannel+0x234>)
 8002258:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	4a21      	ldr	r2, [pc, #132]	; (80022e4 <HAL_ADC_ConfigChannel+0x238>)
 8002260:	4293      	cmp	r3, r2
 8002262:	d109      	bne.n	8002278 <HAL_ADC_ConfigChannel+0x1cc>
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	2b12      	cmp	r3, #18
 800226a:	d105      	bne.n	8002278 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4a19      	ldr	r2, [pc, #100]	; (80022e4 <HAL_ADC_ConfigChannel+0x238>)
 800227e:	4293      	cmp	r3, r2
 8002280:	d123      	bne.n	80022ca <HAL_ADC_ConfigChannel+0x21e>
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	2b10      	cmp	r3, #16
 8002288:	d003      	beq.n	8002292 <HAL_ADC_ConfigChannel+0x1e6>
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	2b11      	cmp	r3, #17
 8002290:	d11b      	bne.n	80022ca <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	2b10      	cmp	r3, #16
 80022a4:	d111      	bne.n	80022ca <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80022a6:	4b10      	ldr	r3, [pc, #64]	; (80022e8 <HAL_ADC_ConfigChannel+0x23c>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	4a10      	ldr	r2, [pc, #64]	; (80022ec <HAL_ADC_ConfigChannel+0x240>)
 80022ac:	fba2 2303 	umull	r2, r3, r2, r3
 80022b0:	0c9a      	lsrs	r2, r3, #18
 80022b2:	4613      	mov	r3, r2
 80022b4:	009b      	lsls	r3, r3, #2
 80022b6:	4413      	add	r3, r2
 80022b8:	005b      	lsls	r3, r3, #1
 80022ba:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80022bc:	e002      	b.n	80022c4 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80022be:	68bb      	ldr	r3, [r7, #8]
 80022c0:	3b01      	subs	r3, #1
 80022c2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80022c4:	68bb      	ldr	r3, [r7, #8]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d1f9      	bne.n	80022be <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	2200      	movs	r2, #0
 80022ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80022d2:	2300      	movs	r3, #0
}
 80022d4:	4618      	mov	r0, r3
 80022d6:	3714      	adds	r7, #20
 80022d8:	46bd      	mov	sp, r7
 80022da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022de:	4770      	bx	lr
 80022e0:	40012300 	.word	0x40012300
 80022e4:	40012000 	.word	0x40012000
 80022e8:	20000000 	.word	0x20000000
 80022ec:	431bde83 	.word	0x431bde83

080022f0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80022f0:	b480      	push	{r7}
 80022f2:	b085      	sub	sp, #20
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80022f8:	4b79      	ldr	r3, [pc, #484]	; (80024e0 <ADC_Init+0x1f0>)
 80022fa:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	685a      	ldr	r2, [r3, #4]
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	431a      	orrs	r2, r3
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	685a      	ldr	r2, [r3, #4]
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002324:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	6859      	ldr	r1, [r3, #4]
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	691b      	ldr	r3, [r3, #16]
 8002330:	021a      	lsls	r2, r3, #8
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	430a      	orrs	r2, r1
 8002338:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	685a      	ldr	r2, [r3, #4]
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002348:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	6859      	ldr	r1, [r3, #4]
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	689a      	ldr	r2, [r3, #8]
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	430a      	orrs	r2, r1
 800235a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	689a      	ldr	r2, [r3, #8]
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800236a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	6899      	ldr	r1, [r3, #8]
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	68da      	ldr	r2, [r3, #12]
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	430a      	orrs	r2, r1
 800237c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002382:	4a58      	ldr	r2, [pc, #352]	; (80024e4 <ADC_Init+0x1f4>)
 8002384:	4293      	cmp	r3, r2
 8002386:	d022      	beq.n	80023ce <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	689a      	ldr	r2, [r3, #8]
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002396:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	6899      	ldr	r1, [r3, #8]
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	430a      	orrs	r2, r1
 80023a8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	689a      	ldr	r2, [r3, #8]
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80023b8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	6899      	ldr	r1, [r3, #8]
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	430a      	orrs	r2, r1
 80023ca:	609a      	str	r2, [r3, #8]
 80023cc:	e00f      	b.n	80023ee <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	689a      	ldr	r2, [r3, #8]
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80023dc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	689a      	ldr	r2, [r3, #8]
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80023ec:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	689a      	ldr	r2, [r3, #8]
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f022 0202 	bic.w	r2, r2, #2
 80023fc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	6899      	ldr	r1, [r3, #8]
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	7e1b      	ldrb	r3, [r3, #24]
 8002408:	005a      	lsls	r2, r3, #1
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	430a      	orrs	r2, r1
 8002410:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d01b      	beq.n	8002454 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	685a      	ldr	r2, [r3, #4]
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800242a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	685a      	ldr	r2, [r3, #4]
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800243a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	6859      	ldr	r1, [r3, #4]
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002446:	3b01      	subs	r3, #1
 8002448:	035a      	lsls	r2, r3, #13
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	430a      	orrs	r2, r1
 8002450:	605a      	str	r2, [r3, #4]
 8002452:	e007      	b.n	8002464 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	685a      	ldr	r2, [r3, #4]
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002462:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002472:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	69db      	ldr	r3, [r3, #28]
 800247e:	3b01      	subs	r3, #1
 8002480:	051a      	lsls	r2, r3, #20
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	430a      	orrs	r2, r1
 8002488:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	689a      	ldr	r2, [r3, #8]
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002498:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	6899      	ldr	r1, [r3, #8]
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80024a6:	025a      	lsls	r2, r3, #9
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	430a      	orrs	r2, r1
 80024ae:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	689a      	ldr	r2, [r3, #8]
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80024be:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	6899      	ldr	r1, [r3, #8]
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	695b      	ldr	r3, [r3, #20]
 80024ca:	029a      	lsls	r2, r3, #10
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	430a      	orrs	r2, r1
 80024d2:	609a      	str	r2, [r3, #8]
}
 80024d4:	bf00      	nop
 80024d6:	3714      	adds	r7, #20
 80024d8:	46bd      	mov	sp, r7
 80024da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024de:	4770      	bx	lr
 80024e0:	40012300 	.word	0x40012300
 80024e4:	0f000001 	.word	0x0f000001

080024e8 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80024e8:	b480      	push	{r7}
 80024ea:	b083      	sub	sp, #12
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80024f0:	bf00      	nop
 80024f2:	370c      	adds	r7, #12
 80024f4:	46bd      	mov	sp, r7
 80024f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fa:	4770      	bx	lr

080024fc <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b084      	sub	sp, #16
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2b00      	cmp	r3, #0
 8002508:	d101      	bne.n	800250e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800250a:	2301      	movs	r3, #1
 800250c:	e0ed      	b.n	80026ea <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002514:	b2db      	uxtb	r3, r3
 8002516:	2b00      	cmp	r3, #0
 8002518:	d102      	bne.n	8002520 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800251a:	6878      	ldr	r0, [r7, #4]
 800251c:	f7fe fa04 	bl	8000928 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	681a      	ldr	r2, [r3, #0]
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f042 0201 	orr.w	r2, r2, #1
 800252e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002530:	f7ff fc1a 	bl	8001d68 <HAL_GetTick>
 8002534:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002536:	e012      	b.n	800255e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002538:	f7ff fc16 	bl	8001d68 <HAL_GetTick>
 800253c:	4602      	mov	r2, r0
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	1ad3      	subs	r3, r2, r3
 8002542:	2b0a      	cmp	r3, #10
 8002544:	d90b      	bls.n	800255e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800254a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	2205      	movs	r2, #5
 8002556:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800255a:	2301      	movs	r3, #1
 800255c:	e0c5      	b.n	80026ea <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	f003 0301 	and.w	r3, r3, #1
 8002568:	2b00      	cmp	r3, #0
 800256a:	d0e5      	beq.n	8002538 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	681a      	ldr	r2, [r3, #0]
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f022 0202 	bic.w	r2, r2, #2
 800257a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800257c:	f7ff fbf4 	bl	8001d68 <HAL_GetTick>
 8002580:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002582:	e012      	b.n	80025aa <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002584:	f7ff fbf0 	bl	8001d68 <HAL_GetTick>
 8002588:	4602      	mov	r2, r0
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	1ad3      	subs	r3, r2, r3
 800258e:	2b0a      	cmp	r3, #10
 8002590:	d90b      	bls.n	80025aa <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002596:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	2205      	movs	r2, #5
 80025a2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80025a6:	2301      	movs	r3, #1
 80025a8:	e09f      	b.n	80026ea <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	f003 0302 	and.w	r3, r3, #2
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d1e5      	bne.n	8002584 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	7e1b      	ldrb	r3, [r3, #24]
 80025bc:	2b01      	cmp	r3, #1
 80025be:	d108      	bne.n	80025d2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	681a      	ldr	r2, [r3, #0]
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80025ce:	601a      	str	r2, [r3, #0]
 80025d0:	e007      	b.n	80025e2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	681a      	ldr	r2, [r3, #0]
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80025e0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	7e5b      	ldrb	r3, [r3, #25]
 80025e6:	2b01      	cmp	r3, #1
 80025e8:	d108      	bne.n	80025fc <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	681a      	ldr	r2, [r3, #0]
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80025f8:	601a      	str	r2, [r3, #0]
 80025fa:	e007      	b.n	800260c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	681a      	ldr	r2, [r3, #0]
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800260a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	7e9b      	ldrb	r3, [r3, #26]
 8002610:	2b01      	cmp	r3, #1
 8002612:	d108      	bne.n	8002626 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	681a      	ldr	r2, [r3, #0]
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f042 0220 	orr.w	r2, r2, #32
 8002622:	601a      	str	r2, [r3, #0]
 8002624:	e007      	b.n	8002636 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	681a      	ldr	r2, [r3, #0]
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f022 0220 	bic.w	r2, r2, #32
 8002634:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	7edb      	ldrb	r3, [r3, #27]
 800263a:	2b01      	cmp	r3, #1
 800263c:	d108      	bne.n	8002650 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	681a      	ldr	r2, [r3, #0]
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f022 0210 	bic.w	r2, r2, #16
 800264c:	601a      	str	r2, [r3, #0]
 800264e:	e007      	b.n	8002660 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	681a      	ldr	r2, [r3, #0]
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f042 0210 	orr.w	r2, r2, #16
 800265e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	7f1b      	ldrb	r3, [r3, #28]
 8002664:	2b01      	cmp	r3, #1
 8002666:	d108      	bne.n	800267a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	681a      	ldr	r2, [r3, #0]
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f042 0208 	orr.w	r2, r2, #8
 8002676:	601a      	str	r2, [r3, #0]
 8002678:	e007      	b.n	800268a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	681a      	ldr	r2, [r3, #0]
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f022 0208 	bic.w	r2, r2, #8
 8002688:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	7f5b      	ldrb	r3, [r3, #29]
 800268e:	2b01      	cmp	r3, #1
 8002690:	d108      	bne.n	80026a4 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	681a      	ldr	r2, [r3, #0]
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f042 0204 	orr.w	r2, r2, #4
 80026a0:	601a      	str	r2, [r3, #0]
 80026a2:	e007      	b.n	80026b4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	681a      	ldr	r2, [r3, #0]
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f022 0204 	bic.w	r2, r2, #4
 80026b2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	689a      	ldr	r2, [r3, #8]
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	68db      	ldr	r3, [r3, #12]
 80026bc:	431a      	orrs	r2, r3
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	691b      	ldr	r3, [r3, #16]
 80026c2:	431a      	orrs	r2, r3
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	695b      	ldr	r3, [r3, #20]
 80026c8:	ea42 0103 	orr.w	r1, r2, r3
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	1e5a      	subs	r2, r3, #1
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	430a      	orrs	r2, r1
 80026d8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	2200      	movs	r2, #0
 80026de:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2201      	movs	r2, #1
 80026e4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80026e8:	2300      	movs	r3, #0
}
 80026ea:	4618      	mov	r0, r3
 80026ec:	3710      	adds	r7, #16
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bd80      	pop	{r7, pc}

080026f2 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80026f2:	b580      	push	{r7, lr}
 80026f4:	b08a      	sub	sp, #40	; 0x28
 80026f6:	af00      	add	r7, sp, #0
 80026f8:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80026fa:	2300      	movs	r3, #0
 80026fc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	695b      	ldr	r3, [r3, #20]
 8002704:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	689b      	ldr	r3, [r3, #8]
 8002714:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	68db      	ldr	r3, [r3, #12]
 800271c:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	691b      	ldr	r3, [r3, #16]
 8002724:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	699b      	ldr	r3, [r3, #24]
 800272c:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800272e:	6a3b      	ldr	r3, [r7, #32]
 8002730:	f003 0301 	and.w	r3, r3, #1
 8002734:	2b00      	cmp	r3, #0
 8002736:	d07c      	beq.n	8002832 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002738:	69bb      	ldr	r3, [r7, #24]
 800273a:	f003 0301 	and.w	r3, r3, #1
 800273e:	2b00      	cmp	r3, #0
 8002740:	d023      	beq.n	800278a <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	2201      	movs	r2, #1
 8002748:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800274a:	69bb      	ldr	r3, [r7, #24]
 800274c:	f003 0302 	and.w	r3, r3, #2
 8002750:	2b00      	cmp	r3, #0
 8002752:	d003      	beq.n	800275c <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002754:	6878      	ldr	r0, [r7, #4]
 8002756:	f000 f983 	bl	8002a60 <HAL_CAN_TxMailbox0CompleteCallback>
 800275a:	e016      	b.n	800278a <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800275c:	69bb      	ldr	r3, [r7, #24]
 800275e:	f003 0304 	and.w	r3, r3, #4
 8002762:	2b00      	cmp	r3, #0
 8002764:	d004      	beq.n	8002770 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002768:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800276c:	627b      	str	r3, [r7, #36]	; 0x24
 800276e:	e00c      	b.n	800278a <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002770:	69bb      	ldr	r3, [r7, #24]
 8002772:	f003 0308 	and.w	r3, r3, #8
 8002776:	2b00      	cmp	r3, #0
 8002778:	d004      	beq.n	8002784 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800277a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800277c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002780:	627b      	str	r3, [r7, #36]	; 0x24
 8002782:	e002      	b.n	800278a <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002784:	6878      	ldr	r0, [r7, #4]
 8002786:	f000 f989 	bl	8002a9c <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800278a:	69bb      	ldr	r3, [r7, #24]
 800278c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002790:	2b00      	cmp	r3, #0
 8002792:	d024      	beq.n	80027de <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f44f 7280 	mov.w	r2, #256	; 0x100
 800279c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800279e:	69bb      	ldr	r3, [r7, #24]
 80027a0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d003      	beq.n	80027b0 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80027a8:	6878      	ldr	r0, [r7, #4]
 80027aa:	f000 f963 	bl	8002a74 <HAL_CAN_TxMailbox1CompleteCallback>
 80027ae:	e016      	b.n	80027de <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80027b0:	69bb      	ldr	r3, [r7, #24]
 80027b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d004      	beq.n	80027c4 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80027ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027bc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80027c0:	627b      	str	r3, [r7, #36]	; 0x24
 80027c2:	e00c      	b.n	80027de <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80027c4:	69bb      	ldr	r3, [r7, #24]
 80027c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d004      	beq.n	80027d8 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80027ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80027d4:	627b      	str	r3, [r7, #36]	; 0x24
 80027d6:	e002      	b.n	80027de <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80027d8:	6878      	ldr	r0, [r7, #4]
 80027da:	f000 f969 	bl	8002ab0 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80027de:	69bb      	ldr	r3, [r7, #24]
 80027e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d024      	beq.n	8002832 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80027f0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80027f2:	69bb      	ldr	r3, [r7, #24]
 80027f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d003      	beq.n	8002804 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80027fc:	6878      	ldr	r0, [r7, #4]
 80027fe:	f000 f943 	bl	8002a88 <HAL_CAN_TxMailbox2CompleteCallback>
 8002802:	e016      	b.n	8002832 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002804:	69bb      	ldr	r3, [r7, #24]
 8002806:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800280a:	2b00      	cmp	r3, #0
 800280c:	d004      	beq.n	8002818 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800280e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002810:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002814:	627b      	str	r3, [r7, #36]	; 0x24
 8002816:	e00c      	b.n	8002832 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002818:	69bb      	ldr	r3, [r7, #24]
 800281a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800281e:	2b00      	cmp	r3, #0
 8002820:	d004      	beq.n	800282c <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002824:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002828:	627b      	str	r3, [r7, #36]	; 0x24
 800282a:	e002      	b.n	8002832 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800282c:	6878      	ldr	r0, [r7, #4]
 800282e:	f000 f949 	bl	8002ac4 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002832:	6a3b      	ldr	r3, [r7, #32]
 8002834:	f003 0308 	and.w	r3, r3, #8
 8002838:	2b00      	cmp	r3, #0
 800283a:	d00c      	beq.n	8002856 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800283c:	697b      	ldr	r3, [r7, #20]
 800283e:	f003 0310 	and.w	r3, r3, #16
 8002842:	2b00      	cmp	r3, #0
 8002844:	d007      	beq.n	8002856 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002848:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800284c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	2210      	movs	r2, #16
 8002854:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002856:	6a3b      	ldr	r3, [r7, #32]
 8002858:	f003 0304 	and.w	r3, r3, #4
 800285c:	2b00      	cmp	r3, #0
 800285e:	d00b      	beq.n	8002878 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002860:	697b      	ldr	r3, [r7, #20]
 8002862:	f003 0308 	and.w	r3, r3, #8
 8002866:	2b00      	cmp	r3, #0
 8002868:	d006      	beq.n	8002878 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	2208      	movs	r2, #8
 8002870:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002872:	6878      	ldr	r0, [r7, #4]
 8002874:	f000 f93a 	bl	8002aec <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002878:	6a3b      	ldr	r3, [r7, #32]
 800287a:	f003 0302 	and.w	r3, r3, #2
 800287e:	2b00      	cmp	r3, #0
 8002880:	d009      	beq.n	8002896 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	68db      	ldr	r3, [r3, #12]
 8002888:	f003 0303 	and.w	r3, r3, #3
 800288c:	2b00      	cmp	r3, #0
 800288e:	d002      	beq.n	8002896 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002890:	6878      	ldr	r0, [r7, #4]
 8002892:	f000 f921 	bl	8002ad8 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002896:	6a3b      	ldr	r3, [r7, #32]
 8002898:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800289c:	2b00      	cmp	r3, #0
 800289e:	d00c      	beq.n	80028ba <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80028a0:	693b      	ldr	r3, [r7, #16]
 80028a2:	f003 0310 	and.w	r3, r3, #16
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d007      	beq.n	80028ba <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80028aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ac:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80028b0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	2210      	movs	r2, #16
 80028b8:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80028ba:	6a3b      	ldr	r3, [r7, #32]
 80028bc:	f003 0320 	and.w	r3, r3, #32
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d00b      	beq.n	80028dc <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80028c4:	693b      	ldr	r3, [r7, #16]
 80028c6:	f003 0308 	and.w	r3, r3, #8
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d006      	beq.n	80028dc <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	2208      	movs	r2, #8
 80028d4:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80028d6:	6878      	ldr	r0, [r7, #4]
 80028d8:	f000 f91c 	bl	8002b14 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80028dc:	6a3b      	ldr	r3, [r7, #32]
 80028de:	f003 0310 	and.w	r3, r3, #16
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d009      	beq.n	80028fa <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	691b      	ldr	r3, [r3, #16]
 80028ec:	f003 0303 	and.w	r3, r3, #3
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d002      	beq.n	80028fa <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80028f4:	6878      	ldr	r0, [r7, #4]
 80028f6:	f000 f903 	bl	8002b00 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80028fa:	6a3b      	ldr	r3, [r7, #32]
 80028fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002900:	2b00      	cmp	r3, #0
 8002902:	d00b      	beq.n	800291c <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002904:	69fb      	ldr	r3, [r7, #28]
 8002906:	f003 0310 	and.w	r3, r3, #16
 800290a:	2b00      	cmp	r3, #0
 800290c:	d006      	beq.n	800291c <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	2210      	movs	r2, #16
 8002914:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002916:	6878      	ldr	r0, [r7, #4]
 8002918:	f000 f906 	bl	8002b28 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800291c:	6a3b      	ldr	r3, [r7, #32]
 800291e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002922:	2b00      	cmp	r3, #0
 8002924:	d00b      	beq.n	800293e <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002926:	69fb      	ldr	r3, [r7, #28]
 8002928:	f003 0308 	and.w	r3, r3, #8
 800292c:	2b00      	cmp	r3, #0
 800292e:	d006      	beq.n	800293e <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	2208      	movs	r2, #8
 8002936:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002938:	6878      	ldr	r0, [r7, #4]
 800293a:	f000 f8ff 	bl	8002b3c <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800293e:	6a3b      	ldr	r3, [r7, #32]
 8002940:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002944:	2b00      	cmp	r3, #0
 8002946:	d07b      	beq.n	8002a40 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002948:	69fb      	ldr	r3, [r7, #28]
 800294a:	f003 0304 	and.w	r3, r3, #4
 800294e:	2b00      	cmp	r3, #0
 8002950:	d072      	beq.n	8002a38 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002952:	6a3b      	ldr	r3, [r7, #32]
 8002954:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002958:	2b00      	cmp	r3, #0
 800295a:	d008      	beq.n	800296e <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002962:	2b00      	cmp	r3, #0
 8002964:	d003      	beq.n	800296e <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002968:	f043 0301 	orr.w	r3, r3, #1
 800296c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800296e:	6a3b      	ldr	r3, [r7, #32]
 8002970:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002974:	2b00      	cmp	r3, #0
 8002976:	d008      	beq.n	800298a <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800297e:	2b00      	cmp	r3, #0
 8002980:	d003      	beq.n	800298a <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002984:	f043 0302 	orr.w	r3, r3, #2
 8002988:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800298a:	6a3b      	ldr	r3, [r7, #32]
 800298c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002990:	2b00      	cmp	r3, #0
 8002992:	d008      	beq.n	80029a6 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800299a:	2b00      	cmp	r3, #0
 800299c:	d003      	beq.n	80029a6 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800299e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029a0:	f043 0304 	orr.w	r3, r3, #4
 80029a4:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80029a6:	6a3b      	ldr	r3, [r7, #32]
 80029a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d043      	beq.n	8002a38 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d03e      	beq.n	8002a38 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80029c0:	2b60      	cmp	r3, #96	; 0x60
 80029c2:	d02b      	beq.n	8002a1c <HAL_CAN_IRQHandler+0x32a>
 80029c4:	2b60      	cmp	r3, #96	; 0x60
 80029c6:	d82e      	bhi.n	8002a26 <HAL_CAN_IRQHandler+0x334>
 80029c8:	2b50      	cmp	r3, #80	; 0x50
 80029ca:	d022      	beq.n	8002a12 <HAL_CAN_IRQHandler+0x320>
 80029cc:	2b50      	cmp	r3, #80	; 0x50
 80029ce:	d82a      	bhi.n	8002a26 <HAL_CAN_IRQHandler+0x334>
 80029d0:	2b40      	cmp	r3, #64	; 0x40
 80029d2:	d019      	beq.n	8002a08 <HAL_CAN_IRQHandler+0x316>
 80029d4:	2b40      	cmp	r3, #64	; 0x40
 80029d6:	d826      	bhi.n	8002a26 <HAL_CAN_IRQHandler+0x334>
 80029d8:	2b30      	cmp	r3, #48	; 0x30
 80029da:	d010      	beq.n	80029fe <HAL_CAN_IRQHandler+0x30c>
 80029dc:	2b30      	cmp	r3, #48	; 0x30
 80029de:	d822      	bhi.n	8002a26 <HAL_CAN_IRQHandler+0x334>
 80029e0:	2b10      	cmp	r3, #16
 80029e2:	d002      	beq.n	80029ea <HAL_CAN_IRQHandler+0x2f8>
 80029e4:	2b20      	cmp	r3, #32
 80029e6:	d005      	beq.n	80029f4 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80029e8:	e01d      	b.n	8002a26 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80029ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ec:	f043 0308 	orr.w	r3, r3, #8
 80029f0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80029f2:	e019      	b.n	8002a28 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80029f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029f6:	f043 0310 	orr.w	r3, r3, #16
 80029fa:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80029fc:	e014      	b.n	8002a28 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80029fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a00:	f043 0320 	orr.w	r3, r3, #32
 8002a04:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002a06:	e00f      	b.n	8002a28 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a0a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002a0e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002a10:	e00a      	b.n	8002a28 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a18:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002a1a:	e005      	b.n	8002a28 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a22:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002a24:	e000      	b.n	8002a28 <HAL_CAN_IRQHandler+0x336>
            break;
 8002a26:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	699a      	ldr	r2, [r3, #24]
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002a36:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	2204      	movs	r2, #4
 8002a3e:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d008      	beq.n	8002a58 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a4c:	431a      	orrs	r2, r3
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002a52:	6878      	ldr	r0, [r7, #4]
 8002a54:	f000 f87c 	bl	8002b50 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002a58:	bf00      	nop
 8002a5a:	3728      	adds	r7, #40	; 0x28
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	bd80      	pop	{r7, pc}

08002a60 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002a60:	b480      	push	{r7}
 8002a62:	b083      	sub	sp, #12
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002a68:	bf00      	nop
 8002a6a:	370c      	adds	r7, #12
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a72:	4770      	bx	lr

08002a74 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002a74:	b480      	push	{r7}
 8002a76:	b083      	sub	sp, #12
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002a7c:	bf00      	nop
 8002a7e:	370c      	adds	r7, #12
 8002a80:	46bd      	mov	sp, r7
 8002a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a86:	4770      	bx	lr

08002a88 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	b083      	sub	sp, #12
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002a90:	bf00      	nop
 8002a92:	370c      	adds	r7, #12
 8002a94:	46bd      	mov	sp, r7
 8002a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9a:	4770      	bx	lr

08002a9c <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	b083      	sub	sp, #12
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002aa4:	bf00      	nop
 8002aa6:	370c      	adds	r7, #12
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aae:	4770      	bx	lr

08002ab0 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	b083      	sub	sp, #12
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002ab8:	bf00      	nop
 8002aba:	370c      	adds	r7, #12
 8002abc:	46bd      	mov	sp, r7
 8002abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac2:	4770      	bx	lr

08002ac4 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	b083      	sub	sp, #12
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002acc:	bf00      	nop
 8002ace:	370c      	adds	r7, #12
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad6:	4770      	bx	lr

08002ad8 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	b083      	sub	sp, #12
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8002ae0:	bf00      	nop
 8002ae2:	370c      	adds	r7, #12
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aea:	4770      	bx	lr

08002aec <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002aec:	b480      	push	{r7}
 8002aee:	b083      	sub	sp, #12
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002af4:	bf00      	nop
 8002af6:	370c      	adds	r7, #12
 8002af8:	46bd      	mov	sp, r7
 8002afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afe:	4770      	bx	lr

08002b00 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002b00:	b480      	push	{r7}
 8002b02:	b083      	sub	sp, #12
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002b08:	bf00      	nop
 8002b0a:	370c      	adds	r7, #12
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b12:	4770      	bx	lr

08002b14 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002b14:	b480      	push	{r7}
 8002b16:	b083      	sub	sp, #12
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002b1c:	bf00      	nop
 8002b1e:	370c      	adds	r7, #12
 8002b20:	46bd      	mov	sp, r7
 8002b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b26:	4770      	bx	lr

08002b28 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	b083      	sub	sp, #12
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002b30:	bf00      	nop
 8002b32:	370c      	adds	r7, #12
 8002b34:	46bd      	mov	sp, r7
 8002b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3a:	4770      	bx	lr

08002b3c <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	b083      	sub	sp, #12
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002b44:	bf00      	nop
 8002b46:	370c      	adds	r7, #12
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4e:	4770      	bx	lr

08002b50 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002b50:	b480      	push	{r7}
 8002b52:	b083      	sub	sp, #12
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002b58:	bf00      	nop
 8002b5a:	370c      	adds	r7, #12
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b62:	4770      	bx	lr

08002b64 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b64:	b480      	push	{r7}
 8002b66:	b085      	sub	sp, #20
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	f003 0307 	and.w	r3, r3, #7
 8002b72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b74:	4b0c      	ldr	r3, [pc, #48]	; (8002ba8 <__NVIC_SetPriorityGrouping+0x44>)
 8002b76:	68db      	ldr	r3, [r3, #12]
 8002b78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b7a:	68ba      	ldr	r2, [r7, #8]
 8002b7c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002b80:	4013      	ands	r3, r2
 8002b82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b88:	68bb      	ldr	r3, [r7, #8]
 8002b8a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b8c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002b90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b96:	4a04      	ldr	r2, [pc, #16]	; (8002ba8 <__NVIC_SetPriorityGrouping+0x44>)
 8002b98:	68bb      	ldr	r3, [r7, #8]
 8002b9a:	60d3      	str	r3, [r2, #12]
}
 8002b9c:	bf00      	nop
 8002b9e:	3714      	adds	r7, #20
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba6:	4770      	bx	lr
 8002ba8:	e000ed00 	.word	0xe000ed00

08002bac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002bac:	b480      	push	{r7}
 8002bae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002bb0:	4b04      	ldr	r3, [pc, #16]	; (8002bc4 <__NVIC_GetPriorityGrouping+0x18>)
 8002bb2:	68db      	ldr	r3, [r3, #12]
 8002bb4:	0a1b      	lsrs	r3, r3, #8
 8002bb6:	f003 0307 	and.w	r3, r3, #7
}
 8002bba:	4618      	mov	r0, r3
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc2:	4770      	bx	lr
 8002bc4:	e000ed00 	.word	0xe000ed00

08002bc8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002bc8:	b480      	push	{r7}
 8002bca:	b083      	sub	sp, #12
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	4603      	mov	r3, r0
 8002bd0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	db0b      	blt.n	8002bf2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002bda:	79fb      	ldrb	r3, [r7, #7]
 8002bdc:	f003 021f 	and.w	r2, r3, #31
 8002be0:	4907      	ldr	r1, [pc, #28]	; (8002c00 <__NVIC_EnableIRQ+0x38>)
 8002be2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002be6:	095b      	lsrs	r3, r3, #5
 8002be8:	2001      	movs	r0, #1
 8002bea:	fa00 f202 	lsl.w	r2, r0, r2
 8002bee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002bf2:	bf00      	nop
 8002bf4:	370c      	adds	r7, #12
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfc:	4770      	bx	lr
 8002bfe:	bf00      	nop
 8002c00:	e000e100 	.word	0xe000e100

08002c04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c04:	b480      	push	{r7}
 8002c06:	b083      	sub	sp, #12
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	4603      	mov	r3, r0
 8002c0c:	6039      	str	r1, [r7, #0]
 8002c0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	db0a      	blt.n	8002c2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	b2da      	uxtb	r2, r3
 8002c1c:	490c      	ldr	r1, [pc, #48]	; (8002c50 <__NVIC_SetPriority+0x4c>)
 8002c1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c22:	0112      	lsls	r2, r2, #4
 8002c24:	b2d2      	uxtb	r2, r2
 8002c26:	440b      	add	r3, r1
 8002c28:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c2c:	e00a      	b.n	8002c44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	b2da      	uxtb	r2, r3
 8002c32:	4908      	ldr	r1, [pc, #32]	; (8002c54 <__NVIC_SetPriority+0x50>)
 8002c34:	79fb      	ldrb	r3, [r7, #7]
 8002c36:	f003 030f 	and.w	r3, r3, #15
 8002c3a:	3b04      	subs	r3, #4
 8002c3c:	0112      	lsls	r2, r2, #4
 8002c3e:	b2d2      	uxtb	r2, r2
 8002c40:	440b      	add	r3, r1
 8002c42:	761a      	strb	r2, [r3, #24]
}
 8002c44:	bf00      	nop
 8002c46:	370c      	adds	r7, #12
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4e:	4770      	bx	lr
 8002c50:	e000e100 	.word	0xe000e100
 8002c54:	e000ed00 	.word	0xe000ed00

08002c58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	b089      	sub	sp, #36	; 0x24
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	60f8      	str	r0, [r7, #12]
 8002c60:	60b9      	str	r1, [r7, #8]
 8002c62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	f003 0307 	and.w	r3, r3, #7
 8002c6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c6c:	69fb      	ldr	r3, [r7, #28]
 8002c6e:	f1c3 0307 	rsb	r3, r3, #7
 8002c72:	2b04      	cmp	r3, #4
 8002c74:	bf28      	it	cs
 8002c76:	2304      	movcs	r3, #4
 8002c78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c7a:	69fb      	ldr	r3, [r7, #28]
 8002c7c:	3304      	adds	r3, #4
 8002c7e:	2b06      	cmp	r3, #6
 8002c80:	d902      	bls.n	8002c88 <NVIC_EncodePriority+0x30>
 8002c82:	69fb      	ldr	r3, [r7, #28]
 8002c84:	3b03      	subs	r3, #3
 8002c86:	e000      	b.n	8002c8a <NVIC_EncodePriority+0x32>
 8002c88:	2300      	movs	r3, #0
 8002c8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c8c:	f04f 32ff 	mov.w	r2, #4294967295
 8002c90:	69bb      	ldr	r3, [r7, #24]
 8002c92:	fa02 f303 	lsl.w	r3, r2, r3
 8002c96:	43da      	mvns	r2, r3
 8002c98:	68bb      	ldr	r3, [r7, #8]
 8002c9a:	401a      	ands	r2, r3
 8002c9c:	697b      	ldr	r3, [r7, #20]
 8002c9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ca0:	f04f 31ff 	mov.w	r1, #4294967295
 8002ca4:	697b      	ldr	r3, [r7, #20]
 8002ca6:	fa01 f303 	lsl.w	r3, r1, r3
 8002caa:	43d9      	mvns	r1, r3
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002cb0:	4313      	orrs	r3, r2
         );
}
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	3724      	adds	r7, #36	; 0x24
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbc:	4770      	bx	lr
	...

08002cc0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b082      	sub	sp, #8
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	3b01      	subs	r3, #1
 8002ccc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002cd0:	d301      	bcc.n	8002cd6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	e00f      	b.n	8002cf6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002cd6:	4a0a      	ldr	r2, [pc, #40]	; (8002d00 <SysTick_Config+0x40>)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	3b01      	subs	r3, #1
 8002cdc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002cde:	210f      	movs	r1, #15
 8002ce0:	f04f 30ff 	mov.w	r0, #4294967295
 8002ce4:	f7ff ff8e 	bl	8002c04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ce8:	4b05      	ldr	r3, [pc, #20]	; (8002d00 <SysTick_Config+0x40>)
 8002cea:	2200      	movs	r2, #0
 8002cec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002cee:	4b04      	ldr	r3, [pc, #16]	; (8002d00 <SysTick_Config+0x40>)
 8002cf0:	2207      	movs	r2, #7
 8002cf2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002cf4:	2300      	movs	r3, #0
}
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	3708      	adds	r7, #8
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bd80      	pop	{r7, pc}
 8002cfe:	bf00      	nop
 8002d00:	e000e010 	.word	0xe000e010

08002d04 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b082      	sub	sp, #8
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d0c:	6878      	ldr	r0, [r7, #4]
 8002d0e:	f7ff ff29 	bl	8002b64 <__NVIC_SetPriorityGrouping>
}
 8002d12:	bf00      	nop
 8002d14:	3708      	adds	r7, #8
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bd80      	pop	{r7, pc}

08002d1a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002d1a:	b580      	push	{r7, lr}
 8002d1c:	b086      	sub	sp, #24
 8002d1e:	af00      	add	r7, sp, #0
 8002d20:	4603      	mov	r3, r0
 8002d22:	60b9      	str	r1, [r7, #8]
 8002d24:	607a      	str	r2, [r7, #4]
 8002d26:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002d28:	2300      	movs	r3, #0
 8002d2a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002d2c:	f7ff ff3e 	bl	8002bac <__NVIC_GetPriorityGrouping>
 8002d30:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d32:	687a      	ldr	r2, [r7, #4]
 8002d34:	68b9      	ldr	r1, [r7, #8]
 8002d36:	6978      	ldr	r0, [r7, #20]
 8002d38:	f7ff ff8e 	bl	8002c58 <NVIC_EncodePriority>
 8002d3c:	4602      	mov	r2, r0
 8002d3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d42:	4611      	mov	r1, r2
 8002d44:	4618      	mov	r0, r3
 8002d46:	f7ff ff5d 	bl	8002c04 <__NVIC_SetPriority>
}
 8002d4a:	bf00      	nop
 8002d4c:	3718      	adds	r7, #24
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bd80      	pop	{r7, pc}

08002d52 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d52:	b580      	push	{r7, lr}
 8002d54:	b082      	sub	sp, #8
 8002d56:	af00      	add	r7, sp, #0
 8002d58:	4603      	mov	r3, r0
 8002d5a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d60:	4618      	mov	r0, r3
 8002d62:	f7ff ff31 	bl	8002bc8 <__NVIC_EnableIRQ>
}
 8002d66:	bf00      	nop
 8002d68:	3708      	adds	r7, #8
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	bd80      	pop	{r7, pc}

08002d6e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002d6e:	b580      	push	{r7, lr}
 8002d70:	b082      	sub	sp, #8
 8002d72:	af00      	add	r7, sp, #0
 8002d74:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002d76:	6878      	ldr	r0, [r7, #4]
 8002d78:	f7ff ffa2 	bl	8002cc0 <SysTick_Config>
 8002d7c:	4603      	mov	r3, r0
}
 8002d7e:	4618      	mov	r0, r3
 8002d80:	3708      	adds	r7, #8
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bd80      	pop	{r7, pc}
	...

08002d88 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b086      	sub	sp, #24
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002d90:	2300      	movs	r3, #0
 8002d92:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002d94:	f7fe ffe8 	bl	8001d68 <HAL_GetTick>
 8002d98:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d101      	bne.n	8002da4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002da0:	2301      	movs	r3, #1
 8002da2:	e099      	b.n	8002ed8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2202      	movs	r2, #2
 8002da8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2200      	movs	r2, #0
 8002db0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	681a      	ldr	r2, [r3, #0]
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f022 0201 	bic.w	r2, r2, #1
 8002dc2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002dc4:	e00f      	b.n	8002de6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002dc6:	f7fe ffcf 	bl	8001d68 <HAL_GetTick>
 8002dca:	4602      	mov	r2, r0
 8002dcc:	693b      	ldr	r3, [r7, #16]
 8002dce:	1ad3      	subs	r3, r2, r3
 8002dd0:	2b05      	cmp	r3, #5
 8002dd2:	d908      	bls.n	8002de6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2220      	movs	r2, #32
 8002dd8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2203      	movs	r2, #3
 8002dde:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002de2:	2303      	movs	r3, #3
 8002de4:	e078      	b.n	8002ed8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f003 0301 	and.w	r3, r3, #1
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d1e8      	bne.n	8002dc6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002dfc:	697a      	ldr	r2, [r7, #20]
 8002dfe:	4b38      	ldr	r3, [pc, #224]	; (8002ee0 <HAL_DMA_Init+0x158>)
 8002e00:	4013      	ands	r3, r2
 8002e02:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	685a      	ldr	r2, [r3, #4]
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	689b      	ldr	r3, [r3, #8]
 8002e0c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002e12:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	691b      	ldr	r3, [r3, #16]
 8002e18:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e1e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	699b      	ldr	r3, [r3, #24]
 8002e24:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e2a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6a1b      	ldr	r3, [r3, #32]
 8002e30:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002e32:	697a      	ldr	r2, [r7, #20]
 8002e34:	4313      	orrs	r3, r2
 8002e36:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e3c:	2b04      	cmp	r3, #4
 8002e3e:	d107      	bne.n	8002e50 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e48:	4313      	orrs	r3, r2
 8002e4a:	697a      	ldr	r2, [r7, #20]
 8002e4c:	4313      	orrs	r3, r2
 8002e4e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	697a      	ldr	r2, [r7, #20]
 8002e56:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	695b      	ldr	r3, [r3, #20]
 8002e5e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002e60:	697b      	ldr	r3, [r7, #20]
 8002e62:	f023 0307 	bic.w	r3, r3, #7
 8002e66:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e6c:	697a      	ldr	r2, [r7, #20]
 8002e6e:	4313      	orrs	r3, r2
 8002e70:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e76:	2b04      	cmp	r3, #4
 8002e78:	d117      	bne.n	8002eaa <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e7e:	697a      	ldr	r2, [r7, #20]
 8002e80:	4313      	orrs	r3, r2
 8002e82:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d00e      	beq.n	8002eaa <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002e8c:	6878      	ldr	r0, [r7, #4]
 8002e8e:	f000 fb1b 	bl	80034c8 <DMA_CheckFifoParam>
 8002e92:	4603      	mov	r3, r0
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d008      	beq.n	8002eaa <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2240      	movs	r2, #64	; 0x40
 8002e9c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2201      	movs	r2, #1
 8002ea2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	e016      	b.n	8002ed8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	697a      	ldr	r2, [r7, #20]
 8002eb0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002eb2:	6878      	ldr	r0, [r7, #4]
 8002eb4:	f000 fad2 	bl	800345c <DMA_CalcBaseAndBitshift>
 8002eb8:	4603      	mov	r3, r0
 8002eba:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ec0:	223f      	movs	r2, #63	; 0x3f
 8002ec2:	409a      	lsls	r2, r3
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2200      	movs	r2, #0
 8002ecc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2201      	movs	r2, #1
 8002ed2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002ed6:	2300      	movs	r3, #0
}
 8002ed8:	4618      	mov	r0, r3
 8002eda:	3718      	adds	r7, #24
 8002edc:	46bd      	mov	sp, r7
 8002ede:	bd80      	pop	{r7, pc}
 8002ee0:	f010803f 	.word	0xf010803f

08002ee4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b086      	sub	sp, #24
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	60f8      	str	r0, [r7, #12]
 8002eec:	60b9      	str	r1, [r7, #8]
 8002eee:	607a      	str	r2, [r7, #4]
 8002ef0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002efa:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002f02:	2b01      	cmp	r3, #1
 8002f04:	d101      	bne.n	8002f0a <HAL_DMA_Start_IT+0x26>
 8002f06:	2302      	movs	r3, #2
 8002f08:	e040      	b.n	8002f8c <HAL_DMA_Start_IT+0xa8>
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	2201      	movs	r2, #1
 8002f0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002f18:	b2db      	uxtb	r3, r3
 8002f1a:	2b01      	cmp	r3, #1
 8002f1c:	d12f      	bne.n	8002f7e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	2202      	movs	r2, #2
 8002f22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	2200      	movs	r2, #0
 8002f2a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	687a      	ldr	r2, [r7, #4]
 8002f30:	68b9      	ldr	r1, [r7, #8]
 8002f32:	68f8      	ldr	r0, [r7, #12]
 8002f34:	f000 fa64 	bl	8003400 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f3c:	223f      	movs	r2, #63	; 0x3f
 8002f3e:	409a      	lsls	r2, r3
 8002f40:	693b      	ldr	r3, [r7, #16]
 8002f42:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	681a      	ldr	r2, [r3, #0]
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f042 0216 	orr.w	r2, r2, #22
 8002f52:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d007      	beq.n	8002f6c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	681a      	ldr	r2, [r3, #0]
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f042 0208 	orr.w	r2, r2, #8
 8002f6a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	681a      	ldr	r2, [r3, #0]
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f042 0201 	orr.w	r2, r2, #1
 8002f7a:	601a      	str	r2, [r3, #0]
 8002f7c:	e005      	b.n	8002f8a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	2200      	movs	r2, #0
 8002f82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002f86:	2302      	movs	r3, #2
 8002f88:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002f8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	3718      	adds	r7, #24
 8002f90:	46bd      	mov	sp, r7
 8002f92:	bd80      	pop	{r7, pc}

08002f94 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b084      	sub	sp, #16
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fa0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002fa2:	f7fe fee1 	bl	8001d68 <HAL_GetTick>
 8002fa6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002fae:	b2db      	uxtb	r3, r3
 8002fb0:	2b02      	cmp	r3, #2
 8002fb2:	d008      	beq.n	8002fc6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2280      	movs	r2, #128	; 0x80
 8002fb8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	e052      	b.n	800306c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	681a      	ldr	r2, [r3, #0]
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f022 0216 	bic.w	r2, r2, #22
 8002fd4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	695a      	ldr	r2, [r3, #20]
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002fe4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d103      	bne.n	8002ff6 <HAL_DMA_Abort+0x62>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d007      	beq.n	8003006 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	681a      	ldr	r2, [r3, #0]
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f022 0208 	bic.w	r2, r2, #8
 8003004:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	681a      	ldr	r2, [r3, #0]
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f022 0201 	bic.w	r2, r2, #1
 8003014:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003016:	e013      	b.n	8003040 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003018:	f7fe fea6 	bl	8001d68 <HAL_GetTick>
 800301c:	4602      	mov	r2, r0
 800301e:	68bb      	ldr	r3, [r7, #8]
 8003020:	1ad3      	subs	r3, r2, r3
 8003022:	2b05      	cmp	r3, #5
 8003024:	d90c      	bls.n	8003040 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2220      	movs	r2, #32
 800302a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2203      	movs	r2, #3
 8003030:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2200      	movs	r2, #0
 8003038:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800303c:	2303      	movs	r3, #3
 800303e:	e015      	b.n	800306c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f003 0301 	and.w	r3, r3, #1
 800304a:	2b00      	cmp	r3, #0
 800304c:	d1e4      	bne.n	8003018 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003052:	223f      	movs	r2, #63	; 0x3f
 8003054:	409a      	lsls	r2, r3
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2201      	movs	r2, #1
 800305e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2200      	movs	r2, #0
 8003066:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800306a:	2300      	movs	r3, #0
}
 800306c:	4618      	mov	r0, r3
 800306e:	3710      	adds	r7, #16
 8003070:	46bd      	mov	sp, r7
 8003072:	bd80      	pop	{r7, pc}

08003074 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003074:	b480      	push	{r7}
 8003076:	b083      	sub	sp, #12
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003082:	b2db      	uxtb	r3, r3
 8003084:	2b02      	cmp	r3, #2
 8003086:	d004      	beq.n	8003092 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2280      	movs	r2, #128	; 0x80
 800308c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800308e:	2301      	movs	r3, #1
 8003090:	e00c      	b.n	80030ac <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2205      	movs	r2, #5
 8003096:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	681a      	ldr	r2, [r3, #0]
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f022 0201 	bic.w	r2, r2, #1
 80030a8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80030aa:	2300      	movs	r3, #0
}
 80030ac:	4618      	mov	r0, r3
 80030ae:	370c      	adds	r7, #12
 80030b0:	46bd      	mov	sp, r7
 80030b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b6:	4770      	bx	lr

080030b8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b086      	sub	sp, #24
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80030c0:	2300      	movs	r3, #0
 80030c2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80030c4:	4b8e      	ldr	r3, [pc, #568]	; (8003300 <HAL_DMA_IRQHandler+0x248>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4a8e      	ldr	r2, [pc, #568]	; (8003304 <HAL_DMA_IRQHandler+0x24c>)
 80030ca:	fba2 2303 	umull	r2, r3, r2, r3
 80030ce:	0a9b      	lsrs	r3, r3, #10
 80030d0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030d6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80030d8:	693b      	ldr	r3, [r7, #16]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030e2:	2208      	movs	r2, #8
 80030e4:	409a      	lsls	r2, r3
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	4013      	ands	r3, r2
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d01a      	beq.n	8003124 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f003 0304 	and.w	r3, r3, #4
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d013      	beq.n	8003124 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	681a      	ldr	r2, [r3, #0]
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f022 0204 	bic.w	r2, r2, #4
 800310a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003110:	2208      	movs	r2, #8
 8003112:	409a      	lsls	r2, r3
 8003114:	693b      	ldr	r3, [r7, #16]
 8003116:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800311c:	f043 0201 	orr.w	r2, r3, #1
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003128:	2201      	movs	r2, #1
 800312a:	409a      	lsls	r2, r3
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	4013      	ands	r3, r2
 8003130:	2b00      	cmp	r3, #0
 8003132:	d012      	beq.n	800315a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	695b      	ldr	r3, [r3, #20]
 800313a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800313e:	2b00      	cmp	r3, #0
 8003140:	d00b      	beq.n	800315a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003146:	2201      	movs	r2, #1
 8003148:	409a      	lsls	r2, r3
 800314a:	693b      	ldr	r3, [r7, #16]
 800314c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003152:	f043 0202 	orr.w	r2, r3, #2
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800315e:	2204      	movs	r2, #4
 8003160:	409a      	lsls	r2, r3
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	4013      	ands	r3, r2
 8003166:	2b00      	cmp	r3, #0
 8003168:	d012      	beq.n	8003190 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f003 0302 	and.w	r3, r3, #2
 8003174:	2b00      	cmp	r3, #0
 8003176:	d00b      	beq.n	8003190 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800317c:	2204      	movs	r2, #4
 800317e:	409a      	lsls	r2, r3
 8003180:	693b      	ldr	r3, [r7, #16]
 8003182:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003188:	f043 0204 	orr.w	r2, r3, #4
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003194:	2210      	movs	r2, #16
 8003196:	409a      	lsls	r2, r3
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	4013      	ands	r3, r2
 800319c:	2b00      	cmp	r3, #0
 800319e:	d043      	beq.n	8003228 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f003 0308 	and.w	r3, r3, #8
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d03c      	beq.n	8003228 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031b2:	2210      	movs	r2, #16
 80031b4:	409a      	lsls	r2, r3
 80031b6:	693b      	ldr	r3, [r7, #16]
 80031b8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d018      	beq.n	80031fa <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d108      	bne.n	80031e8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d024      	beq.n	8003228 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031e2:	6878      	ldr	r0, [r7, #4]
 80031e4:	4798      	blx	r3
 80031e6:	e01f      	b.n	8003228 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d01b      	beq.n	8003228 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031f4:	6878      	ldr	r0, [r7, #4]
 80031f6:	4798      	blx	r3
 80031f8:	e016      	b.n	8003228 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003204:	2b00      	cmp	r3, #0
 8003206:	d107      	bne.n	8003218 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	681a      	ldr	r2, [r3, #0]
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f022 0208 	bic.w	r2, r2, #8
 8003216:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800321c:	2b00      	cmp	r3, #0
 800321e:	d003      	beq.n	8003228 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003224:	6878      	ldr	r0, [r7, #4]
 8003226:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800322c:	2220      	movs	r2, #32
 800322e:	409a      	lsls	r2, r3
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	4013      	ands	r3, r2
 8003234:	2b00      	cmp	r3, #0
 8003236:	f000 808f 	beq.w	8003358 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f003 0310 	and.w	r3, r3, #16
 8003244:	2b00      	cmp	r3, #0
 8003246:	f000 8087 	beq.w	8003358 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800324e:	2220      	movs	r2, #32
 8003250:	409a      	lsls	r2, r3
 8003252:	693b      	ldr	r3, [r7, #16]
 8003254:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800325c:	b2db      	uxtb	r3, r3
 800325e:	2b05      	cmp	r3, #5
 8003260:	d136      	bne.n	80032d0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	681a      	ldr	r2, [r3, #0]
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f022 0216 	bic.w	r2, r2, #22
 8003270:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	695a      	ldr	r2, [r3, #20]
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003280:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003286:	2b00      	cmp	r3, #0
 8003288:	d103      	bne.n	8003292 <HAL_DMA_IRQHandler+0x1da>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800328e:	2b00      	cmp	r3, #0
 8003290:	d007      	beq.n	80032a2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	681a      	ldr	r2, [r3, #0]
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f022 0208 	bic.w	r2, r2, #8
 80032a0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032a6:	223f      	movs	r2, #63	; 0x3f
 80032a8:	409a      	lsls	r2, r3
 80032aa:	693b      	ldr	r3, [r7, #16]
 80032ac:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2201      	movs	r2, #1
 80032b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2200      	movs	r2, #0
 80032ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d07e      	beq.n	80033c4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032ca:	6878      	ldr	r0, [r7, #4]
 80032cc:	4798      	blx	r3
        }
        return;
 80032ce:	e079      	b.n	80033c4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d01d      	beq.n	800331a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d10d      	bne.n	8003308 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d031      	beq.n	8003358 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032f8:	6878      	ldr	r0, [r7, #4]
 80032fa:	4798      	blx	r3
 80032fc:	e02c      	b.n	8003358 <HAL_DMA_IRQHandler+0x2a0>
 80032fe:	bf00      	nop
 8003300:	20000000 	.word	0x20000000
 8003304:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800330c:	2b00      	cmp	r3, #0
 800330e:	d023      	beq.n	8003358 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003314:	6878      	ldr	r0, [r7, #4]
 8003316:	4798      	blx	r3
 8003318:	e01e      	b.n	8003358 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003324:	2b00      	cmp	r3, #0
 8003326:	d10f      	bne.n	8003348 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	681a      	ldr	r2, [r3, #0]
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f022 0210 	bic.w	r2, r2, #16
 8003336:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2201      	movs	r2, #1
 800333c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2200      	movs	r2, #0
 8003344:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800334c:	2b00      	cmp	r3, #0
 800334e:	d003      	beq.n	8003358 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003354:	6878      	ldr	r0, [r7, #4]
 8003356:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800335c:	2b00      	cmp	r3, #0
 800335e:	d032      	beq.n	80033c6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003364:	f003 0301 	and.w	r3, r3, #1
 8003368:	2b00      	cmp	r3, #0
 800336a:	d022      	beq.n	80033b2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2205      	movs	r2, #5
 8003370:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	681a      	ldr	r2, [r3, #0]
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f022 0201 	bic.w	r2, r2, #1
 8003382:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003384:	68bb      	ldr	r3, [r7, #8]
 8003386:	3301      	adds	r3, #1
 8003388:	60bb      	str	r3, [r7, #8]
 800338a:	697a      	ldr	r2, [r7, #20]
 800338c:	429a      	cmp	r2, r3
 800338e:	d307      	bcc.n	80033a0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f003 0301 	and.w	r3, r3, #1
 800339a:	2b00      	cmp	r3, #0
 800339c:	d1f2      	bne.n	8003384 <HAL_DMA_IRQHandler+0x2cc>
 800339e:	e000      	b.n	80033a2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80033a0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	2201      	movs	r2, #1
 80033a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2200      	movs	r2, #0
 80033ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d005      	beq.n	80033c6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033be:	6878      	ldr	r0, [r7, #4]
 80033c0:	4798      	blx	r3
 80033c2:	e000      	b.n	80033c6 <HAL_DMA_IRQHandler+0x30e>
        return;
 80033c4:	bf00      	nop
    }
  }
}
 80033c6:	3718      	adds	r7, #24
 80033c8:	46bd      	mov	sp, r7
 80033ca:	bd80      	pop	{r7, pc}

080033cc <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80033cc:	b480      	push	{r7}
 80033ce:	b083      	sub	sp, #12
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80033da:	b2db      	uxtb	r3, r3
}
 80033dc:	4618      	mov	r0, r3
 80033de:	370c      	adds	r7, #12
 80033e0:	46bd      	mov	sp, r7
 80033e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e6:	4770      	bx	lr

080033e8 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80033e8:	b480      	push	{r7}
 80033ea:	b083      	sub	sp, #12
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 80033f4:	4618      	mov	r0, r3
 80033f6:	370c      	adds	r7, #12
 80033f8:	46bd      	mov	sp, r7
 80033fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fe:	4770      	bx	lr

08003400 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003400:	b480      	push	{r7}
 8003402:	b085      	sub	sp, #20
 8003404:	af00      	add	r7, sp, #0
 8003406:	60f8      	str	r0, [r7, #12]
 8003408:	60b9      	str	r1, [r7, #8]
 800340a:	607a      	str	r2, [r7, #4]
 800340c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	681a      	ldr	r2, [r3, #0]
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800341c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	683a      	ldr	r2, [r7, #0]
 8003424:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	689b      	ldr	r3, [r3, #8]
 800342a:	2b40      	cmp	r3, #64	; 0x40
 800342c:	d108      	bne.n	8003440 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	687a      	ldr	r2, [r7, #4]
 8003434:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	68ba      	ldr	r2, [r7, #8]
 800343c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800343e:	e007      	b.n	8003450 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	68ba      	ldr	r2, [r7, #8]
 8003446:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	687a      	ldr	r2, [r7, #4]
 800344e:	60da      	str	r2, [r3, #12]
}
 8003450:	bf00      	nop
 8003452:	3714      	adds	r7, #20
 8003454:	46bd      	mov	sp, r7
 8003456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345a:	4770      	bx	lr

0800345c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800345c:	b480      	push	{r7}
 800345e:	b085      	sub	sp, #20
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	b2db      	uxtb	r3, r3
 800346a:	3b10      	subs	r3, #16
 800346c:	4a14      	ldr	r2, [pc, #80]	; (80034c0 <DMA_CalcBaseAndBitshift+0x64>)
 800346e:	fba2 2303 	umull	r2, r3, r2, r3
 8003472:	091b      	lsrs	r3, r3, #4
 8003474:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003476:	4a13      	ldr	r2, [pc, #76]	; (80034c4 <DMA_CalcBaseAndBitshift+0x68>)
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	4413      	add	r3, r2
 800347c:	781b      	ldrb	r3, [r3, #0]
 800347e:	461a      	mov	r2, r3
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	2b03      	cmp	r3, #3
 8003488:	d909      	bls.n	800349e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003492:	f023 0303 	bic.w	r3, r3, #3
 8003496:	1d1a      	adds	r2, r3, #4
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	659a      	str	r2, [r3, #88]	; 0x58
 800349c:	e007      	b.n	80034ae <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80034a6:	f023 0303 	bic.w	r3, r3, #3
 80034aa:	687a      	ldr	r2, [r7, #4]
 80034ac:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80034b2:	4618      	mov	r0, r3
 80034b4:	3714      	adds	r7, #20
 80034b6:	46bd      	mov	sp, r7
 80034b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034bc:	4770      	bx	lr
 80034be:	bf00      	nop
 80034c0:	aaaaaaab 	.word	0xaaaaaaab
 80034c4:	0800e230 	.word	0x0800e230

080034c8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80034c8:	b480      	push	{r7}
 80034ca:	b085      	sub	sp, #20
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80034d0:	2300      	movs	r3, #0
 80034d2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034d8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	699b      	ldr	r3, [r3, #24]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d11f      	bne.n	8003522 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80034e2:	68bb      	ldr	r3, [r7, #8]
 80034e4:	2b03      	cmp	r3, #3
 80034e6:	d856      	bhi.n	8003596 <DMA_CheckFifoParam+0xce>
 80034e8:	a201      	add	r2, pc, #4	; (adr r2, 80034f0 <DMA_CheckFifoParam+0x28>)
 80034ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034ee:	bf00      	nop
 80034f0:	08003501 	.word	0x08003501
 80034f4:	08003513 	.word	0x08003513
 80034f8:	08003501 	.word	0x08003501
 80034fc:	08003597 	.word	0x08003597
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003504:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003508:	2b00      	cmp	r3, #0
 800350a:	d046      	beq.n	800359a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800350c:	2301      	movs	r3, #1
 800350e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003510:	e043      	b.n	800359a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003516:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800351a:	d140      	bne.n	800359e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800351c:	2301      	movs	r3, #1
 800351e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003520:	e03d      	b.n	800359e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	699b      	ldr	r3, [r3, #24]
 8003526:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800352a:	d121      	bne.n	8003570 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800352c:	68bb      	ldr	r3, [r7, #8]
 800352e:	2b03      	cmp	r3, #3
 8003530:	d837      	bhi.n	80035a2 <DMA_CheckFifoParam+0xda>
 8003532:	a201      	add	r2, pc, #4	; (adr r2, 8003538 <DMA_CheckFifoParam+0x70>)
 8003534:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003538:	08003549 	.word	0x08003549
 800353c:	0800354f 	.word	0x0800354f
 8003540:	08003549 	.word	0x08003549
 8003544:	08003561 	.word	0x08003561
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003548:	2301      	movs	r3, #1
 800354a:	73fb      	strb	r3, [r7, #15]
      break;
 800354c:	e030      	b.n	80035b0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003552:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003556:	2b00      	cmp	r3, #0
 8003558:	d025      	beq.n	80035a6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800355a:	2301      	movs	r3, #1
 800355c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800355e:	e022      	b.n	80035a6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003564:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003568:	d11f      	bne.n	80035aa <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800356a:	2301      	movs	r3, #1
 800356c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800356e:	e01c      	b.n	80035aa <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003570:	68bb      	ldr	r3, [r7, #8]
 8003572:	2b02      	cmp	r3, #2
 8003574:	d903      	bls.n	800357e <DMA_CheckFifoParam+0xb6>
 8003576:	68bb      	ldr	r3, [r7, #8]
 8003578:	2b03      	cmp	r3, #3
 800357a:	d003      	beq.n	8003584 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800357c:	e018      	b.n	80035b0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800357e:	2301      	movs	r3, #1
 8003580:	73fb      	strb	r3, [r7, #15]
      break;
 8003582:	e015      	b.n	80035b0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003588:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800358c:	2b00      	cmp	r3, #0
 800358e:	d00e      	beq.n	80035ae <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003590:	2301      	movs	r3, #1
 8003592:	73fb      	strb	r3, [r7, #15]
      break;
 8003594:	e00b      	b.n	80035ae <DMA_CheckFifoParam+0xe6>
      break;
 8003596:	bf00      	nop
 8003598:	e00a      	b.n	80035b0 <DMA_CheckFifoParam+0xe8>
      break;
 800359a:	bf00      	nop
 800359c:	e008      	b.n	80035b0 <DMA_CheckFifoParam+0xe8>
      break;
 800359e:	bf00      	nop
 80035a0:	e006      	b.n	80035b0 <DMA_CheckFifoParam+0xe8>
      break;
 80035a2:	bf00      	nop
 80035a4:	e004      	b.n	80035b0 <DMA_CheckFifoParam+0xe8>
      break;
 80035a6:	bf00      	nop
 80035a8:	e002      	b.n	80035b0 <DMA_CheckFifoParam+0xe8>
      break;   
 80035aa:	bf00      	nop
 80035ac:	e000      	b.n	80035b0 <DMA_CheckFifoParam+0xe8>
      break;
 80035ae:	bf00      	nop
    }
  } 
  
  return status; 
 80035b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80035b2:	4618      	mov	r0, r3
 80035b4:	3714      	adds	r7, #20
 80035b6:	46bd      	mov	sp, r7
 80035b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035bc:	4770      	bx	lr
 80035be:	bf00      	nop

080035c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80035c0:	b480      	push	{r7}
 80035c2:	b089      	sub	sp, #36	; 0x24
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
 80035c8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80035ca:	2300      	movs	r3, #0
 80035cc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80035ce:	2300      	movs	r3, #0
 80035d0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80035d2:	2300      	movs	r3, #0
 80035d4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80035d6:	2300      	movs	r3, #0
 80035d8:	61fb      	str	r3, [r7, #28]
 80035da:	e16b      	b.n	80038b4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80035dc:	2201      	movs	r2, #1
 80035de:	69fb      	ldr	r3, [r7, #28]
 80035e0:	fa02 f303 	lsl.w	r3, r2, r3
 80035e4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	697a      	ldr	r2, [r7, #20]
 80035ec:	4013      	ands	r3, r2
 80035ee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80035f0:	693a      	ldr	r2, [r7, #16]
 80035f2:	697b      	ldr	r3, [r7, #20]
 80035f4:	429a      	cmp	r2, r3
 80035f6:	f040 815a 	bne.w	80038ae <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	685b      	ldr	r3, [r3, #4]
 80035fe:	f003 0303 	and.w	r3, r3, #3
 8003602:	2b01      	cmp	r3, #1
 8003604:	d005      	beq.n	8003612 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	685b      	ldr	r3, [r3, #4]
 800360a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800360e:	2b02      	cmp	r3, #2
 8003610:	d130      	bne.n	8003674 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	689b      	ldr	r3, [r3, #8]
 8003616:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003618:	69fb      	ldr	r3, [r7, #28]
 800361a:	005b      	lsls	r3, r3, #1
 800361c:	2203      	movs	r2, #3
 800361e:	fa02 f303 	lsl.w	r3, r2, r3
 8003622:	43db      	mvns	r3, r3
 8003624:	69ba      	ldr	r2, [r7, #24]
 8003626:	4013      	ands	r3, r2
 8003628:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	68da      	ldr	r2, [r3, #12]
 800362e:	69fb      	ldr	r3, [r7, #28]
 8003630:	005b      	lsls	r3, r3, #1
 8003632:	fa02 f303 	lsl.w	r3, r2, r3
 8003636:	69ba      	ldr	r2, [r7, #24]
 8003638:	4313      	orrs	r3, r2
 800363a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	69ba      	ldr	r2, [r7, #24]
 8003640:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	685b      	ldr	r3, [r3, #4]
 8003646:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003648:	2201      	movs	r2, #1
 800364a:	69fb      	ldr	r3, [r7, #28]
 800364c:	fa02 f303 	lsl.w	r3, r2, r3
 8003650:	43db      	mvns	r3, r3
 8003652:	69ba      	ldr	r2, [r7, #24]
 8003654:	4013      	ands	r3, r2
 8003656:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	685b      	ldr	r3, [r3, #4]
 800365c:	091b      	lsrs	r3, r3, #4
 800365e:	f003 0201 	and.w	r2, r3, #1
 8003662:	69fb      	ldr	r3, [r7, #28]
 8003664:	fa02 f303 	lsl.w	r3, r2, r3
 8003668:	69ba      	ldr	r2, [r7, #24]
 800366a:	4313      	orrs	r3, r2
 800366c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	69ba      	ldr	r2, [r7, #24]
 8003672:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	685b      	ldr	r3, [r3, #4]
 8003678:	f003 0303 	and.w	r3, r3, #3
 800367c:	2b03      	cmp	r3, #3
 800367e:	d017      	beq.n	80036b0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	68db      	ldr	r3, [r3, #12]
 8003684:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003686:	69fb      	ldr	r3, [r7, #28]
 8003688:	005b      	lsls	r3, r3, #1
 800368a:	2203      	movs	r2, #3
 800368c:	fa02 f303 	lsl.w	r3, r2, r3
 8003690:	43db      	mvns	r3, r3
 8003692:	69ba      	ldr	r2, [r7, #24]
 8003694:	4013      	ands	r3, r2
 8003696:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	689a      	ldr	r2, [r3, #8]
 800369c:	69fb      	ldr	r3, [r7, #28]
 800369e:	005b      	lsls	r3, r3, #1
 80036a0:	fa02 f303 	lsl.w	r3, r2, r3
 80036a4:	69ba      	ldr	r2, [r7, #24]
 80036a6:	4313      	orrs	r3, r2
 80036a8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	69ba      	ldr	r2, [r7, #24]
 80036ae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	685b      	ldr	r3, [r3, #4]
 80036b4:	f003 0303 	and.w	r3, r3, #3
 80036b8:	2b02      	cmp	r3, #2
 80036ba:	d123      	bne.n	8003704 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80036bc:	69fb      	ldr	r3, [r7, #28]
 80036be:	08da      	lsrs	r2, r3, #3
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	3208      	adds	r2, #8
 80036c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80036c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80036ca:	69fb      	ldr	r3, [r7, #28]
 80036cc:	f003 0307 	and.w	r3, r3, #7
 80036d0:	009b      	lsls	r3, r3, #2
 80036d2:	220f      	movs	r2, #15
 80036d4:	fa02 f303 	lsl.w	r3, r2, r3
 80036d8:	43db      	mvns	r3, r3
 80036da:	69ba      	ldr	r2, [r7, #24]
 80036dc:	4013      	ands	r3, r2
 80036de:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	691a      	ldr	r2, [r3, #16]
 80036e4:	69fb      	ldr	r3, [r7, #28]
 80036e6:	f003 0307 	and.w	r3, r3, #7
 80036ea:	009b      	lsls	r3, r3, #2
 80036ec:	fa02 f303 	lsl.w	r3, r2, r3
 80036f0:	69ba      	ldr	r2, [r7, #24]
 80036f2:	4313      	orrs	r3, r2
 80036f4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80036f6:	69fb      	ldr	r3, [r7, #28]
 80036f8:	08da      	lsrs	r2, r3, #3
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	3208      	adds	r2, #8
 80036fe:	69b9      	ldr	r1, [r7, #24]
 8003700:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800370a:	69fb      	ldr	r3, [r7, #28]
 800370c:	005b      	lsls	r3, r3, #1
 800370e:	2203      	movs	r2, #3
 8003710:	fa02 f303 	lsl.w	r3, r2, r3
 8003714:	43db      	mvns	r3, r3
 8003716:	69ba      	ldr	r2, [r7, #24]
 8003718:	4013      	ands	r3, r2
 800371a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	685b      	ldr	r3, [r3, #4]
 8003720:	f003 0203 	and.w	r2, r3, #3
 8003724:	69fb      	ldr	r3, [r7, #28]
 8003726:	005b      	lsls	r3, r3, #1
 8003728:	fa02 f303 	lsl.w	r3, r2, r3
 800372c:	69ba      	ldr	r2, [r7, #24]
 800372e:	4313      	orrs	r3, r2
 8003730:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	69ba      	ldr	r2, [r7, #24]
 8003736:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	685b      	ldr	r3, [r3, #4]
 800373c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003740:	2b00      	cmp	r3, #0
 8003742:	f000 80b4 	beq.w	80038ae <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003746:	2300      	movs	r3, #0
 8003748:	60fb      	str	r3, [r7, #12]
 800374a:	4b60      	ldr	r3, [pc, #384]	; (80038cc <HAL_GPIO_Init+0x30c>)
 800374c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800374e:	4a5f      	ldr	r2, [pc, #380]	; (80038cc <HAL_GPIO_Init+0x30c>)
 8003750:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003754:	6453      	str	r3, [r2, #68]	; 0x44
 8003756:	4b5d      	ldr	r3, [pc, #372]	; (80038cc <HAL_GPIO_Init+0x30c>)
 8003758:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800375a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800375e:	60fb      	str	r3, [r7, #12]
 8003760:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003762:	4a5b      	ldr	r2, [pc, #364]	; (80038d0 <HAL_GPIO_Init+0x310>)
 8003764:	69fb      	ldr	r3, [r7, #28]
 8003766:	089b      	lsrs	r3, r3, #2
 8003768:	3302      	adds	r3, #2
 800376a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800376e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003770:	69fb      	ldr	r3, [r7, #28]
 8003772:	f003 0303 	and.w	r3, r3, #3
 8003776:	009b      	lsls	r3, r3, #2
 8003778:	220f      	movs	r2, #15
 800377a:	fa02 f303 	lsl.w	r3, r2, r3
 800377e:	43db      	mvns	r3, r3
 8003780:	69ba      	ldr	r2, [r7, #24]
 8003782:	4013      	ands	r3, r2
 8003784:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	4a52      	ldr	r2, [pc, #328]	; (80038d4 <HAL_GPIO_Init+0x314>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d02b      	beq.n	80037e6 <HAL_GPIO_Init+0x226>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	4a51      	ldr	r2, [pc, #324]	; (80038d8 <HAL_GPIO_Init+0x318>)
 8003792:	4293      	cmp	r3, r2
 8003794:	d025      	beq.n	80037e2 <HAL_GPIO_Init+0x222>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	4a50      	ldr	r2, [pc, #320]	; (80038dc <HAL_GPIO_Init+0x31c>)
 800379a:	4293      	cmp	r3, r2
 800379c:	d01f      	beq.n	80037de <HAL_GPIO_Init+0x21e>
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	4a4f      	ldr	r2, [pc, #316]	; (80038e0 <HAL_GPIO_Init+0x320>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d019      	beq.n	80037da <HAL_GPIO_Init+0x21a>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	4a4e      	ldr	r2, [pc, #312]	; (80038e4 <HAL_GPIO_Init+0x324>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d013      	beq.n	80037d6 <HAL_GPIO_Init+0x216>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	4a4d      	ldr	r2, [pc, #308]	; (80038e8 <HAL_GPIO_Init+0x328>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d00d      	beq.n	80037d2 <HAL_GPIO_Init+0x212>
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	4a4c      	ldr	r2, [pc, #304]	; (80038ec <HAL_GPIO_Init+0x32c>)
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d007      	beq.n	80037ce <HAL_GPIO_Init+0x20e>
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	4a4b      	ldr	r2, [pc, #300]	; (80038f0 <HAL_GPIO_Init+0x330>)
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d101      	bne.n	80037ca <HAL_GPIO_Init+0x20a>
 80037c6:	2307      	movs	r3, #7
 80037c8:	e00e      	b.n	80037e8 <HAL_GPIO_Init+0x228>
 80037ca:	2308      	movs	r3, #8
 80037cc:	e00c      	b.n	80037e8 <HAL_GPIO_Init+0x228>
 80037ce:	2306      	movs	r3, #6
 80037d0:	e00a      	b.n	80037e8 <HAL_GPIO_Init+0x228>
 80037d2:	2305      	movs	r3, #5
 80037d4:	e008      	b.n	80037e8 <HAL_GPIO_Init+0x228>
 80037d6:	2304      	movs	r3, #4
 80037d8:	e006      	b.n	80037e8 <HAL_GPIO_Init+0x228>
 80037da:	2303      	movs	r3, #3
 80037dc:	e004      	b.n	80037e8 <HAL_GPIO_Init+0x228>
 80037de:	2302      	movs	r3, #2
 80037e0:	e002      	b.n	80037e8 <HAL_GPIO_Init+0x228>
 80037e2:	2301      	movs	r3, #1
 80037e4:	e000      	b.n	80037e8 <HAL_GPIO_Init+0x228>
 80037e6:	2300      	movs	r3, #0
 80037e8:	69fa      	ldr	r2, [r7, #28]
 80037ea:	f002 0203 	and.w	r2, r2, #3
 80037ee:	0092      	lsls	r2, r2, #2
 80037f0:	4093      	lsls	r3, r2
 80037f2:	69ba      	ldr	r2, [r7, #24]
 80037f4:	4313      	orrs	r3, r2
 80037f6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80037f8:	4935      	ldr	r1, [pc, #212]	; (80038d0 <HAL_GPIO_Init+0x310>)
 80037fa:	69fb      	ldr	r3, [r7, #28]
 80037fc:	089b      	lsrs	r3, r3, #2
 80037fe:	3302      	adds	r3, #2
 8003800:	69ba      	ldr	r2, [r7, #24]
 8003802:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003806:	4b3b      	ldr	r3, [pc, #236]	; (80038f4 <HAL_GPIO_Init+0x334>)
 8003808:	689b      	ldr	r3, [r3, #8]
 800380a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800380c:	693b      	ldr	r3, [r7, #16]
 800380e:	43db      	mvns	r3, r3
 8003810:	69ba      	ldr	r2, [r7, #24]
 8003812:	4013      	ands	r3, r2
 8003814:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	685b      	ldr	r3, [r3, #4]
 800381a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800381e:	2b00      	cmp	r3, #0
 8003820:	d003      	beq.n	800382a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003822:	69ba      	ldr	r2, [r7, #24]
 8003824:	693b      	ldr	r3, [r7, #16]
 8003826:	4313      	orrs	r3, r2
 8003828:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800382a:	4a32      	ldr	r2, [pc, #200]	; (80038f4 <HAL_GPIO_Init+0x334>)
 800382c:	69bb      	ldr	r3, [r7, #24]
 800382e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003830:	4b30      	ldr	r3, [pc, #192]	; (80038f4 <HAL_GPIO_Init+0x334>)
 8003832:	68db      	ldr	r3, [r3, #12]
 8003834:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003836:	693b      	ldr	r3, [r7, #16]
 8003838:	43db      	mvns	r3, r3
 800383a:	69ba      	ldr	r2, [r7, #24]
 800383c:	4013      	ands	r3, r2
 800383e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	685b      	ldr	r3, [r3, #4]
 8003844:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003848:	2b00      	cmp	r3, #0
 800384a:	d003      	beq.n	8003854 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800384c:	69ba      	ldr	r2, [r7, #24]
 800384e:	693b      	ldr	r3, [r7, #16]
 8003850:	4313      	orrs	r3, r2
 8003852:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003854:	4a27      	ldr	r2, [pc, #156]	; (80038f4 <HAL_GPIO_Init+0x334>)
 8003856:	69bb      	ldr	r3, [r7, #24]
 8003858:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800385a:	4b26      	ldr	r3, [pc, #152]	; (80038f4 <HAL_GPIO_Init+0x334>)
 800385c:	685b      	ldr	r3, [r3, #4]
 800385e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003860:	693b      	ldr	r3, [r7, #16]
 8003862:	43db      	mvns	r3, r3
 8003864:	69ba      	ldr	r2, [r7, #24]
 8003866:	4013      	ands	r3, r2
 8003868:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	685b      	ldr	r3, [r3, #4]
 800386e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003872:	2b00      	cmp	r3, #0
 8003874:	d003      	beq.n	800387e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003876:	69ba      	ldr	r2, [r7, #24]
 8003878:	693b      	ldr	r3, [r7, #16]
 800387a:	4313      	orrs	r3, r2
 800387c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800387e:	4a1d      	ldr	r2, [pc, #116]	; (80038f4 <HAL_GPIO_Init+0x334>)
 8003880:	69bb      	ldr	r3, [r7, #24]
 8003882:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003884:	4b1b      	ldr	r3, [pc, #108]	; (80038f4 <HAL_GPIO_Init+0x334>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800388a:	693b      	ldr	r3, [r7, #16]
 800388c:	43db      	mvns	r3, r3
 800388e:	69ba      	ldr	r2, [r7, #24]
 8003890:	4013      	ands	r3, r2
 8003892:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	685b      	ldr	r3, [r3, #4]
 8003898:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800389c:	2b00      	cmp	r3, #0
 800389e:	d003      	beq.n	80038a8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80038a0:	69ba      	ldr	r2, [r7, #24]
 80038a2:	693b      	ldr	r3, [r7, #16]
 80038a4:	4313      	orrs	r3, r2
 80038a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80038a8:	4a12      	ldr	r2, [pc, #72]	; (80038f4 <HAL_GPIO_Init+0x334>)
 80038aa:	69bb      	ldr	r3, [r7, #24]
 80038ac:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80038ae:	69fb      	ldr	r3, [r7, #28]
 80038b0:	3301      	adds	r3, #1
 80038b2:	61fb      	str	r3, [r7, #28]
 80038b4:	69fb      	ldr	r3, [r7, #28]
 80038b6:	2b0f      	cmp	r3, #15
 80038b8:	f67f ae90 	bls.w	80035dc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80038bc:	bf00      	nop
 80038be:	bf00      	nop
 80038c0:	3724      	adds	r7, #36	; 0x24
 80038c2:	46bd      	mov	sp, r7
 80038c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c8:	4770      	bx	lr
 80038ca:	bf00      	nop
 80038cc:	40023800 	.word	0x40023800
 80038d0:	40013800 	.word	0x40013800
 80038d4:	40020000 	.word	0x40020000
 80038d8:	40020400 	.word	0x40020400
 80038dc:	40020800 	.word	0x40020800
 80038e0:	40020c00 	.word	0x40020c00
 80038e4:	40021000 	.word	0x40021000
 80038e8:	40021400 	.word	0x40021400
 80038ec:	40021800 	.word	0x40021800
 80038f0:	40021c00 	.word	0x40021c00
 80038f4:	40013c00 	.word	0x40013c00

080038f8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80038f8:	b480      	push	{r7}
 80038fa:	b085      	sub	sp, #20
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
 8003900:	460b      	mov	r3, r1
 8003902:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	691a      	ldr	r2, [r3, #16]
 8003908:	887b      	ldrh	r3, [r7, #2]
 800390a:	4013      	ands	r3, r2
 800390c:	2b00      	cmp	r3, #0
 800390e:	d002      	beq.n	8003916 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003910:	2301      	movs	r3, #1
 8003912:	73fb      	strb	r3, [r7, #15]
 8003914:	e001      	b.n	800391a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003916:	2300      	movs	r3, #0
 8003918:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800391a:	7bfb      	ldrb	r3, [r7, #15]
}
 800391c:	4618      	mov	r0, r3
 800391e:	3714      	adds	r7, #20
 8003920:	46bd      	mov	sp, r7
 8003922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003926:	4770      	bx	lr

08003928 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003928:	b480      	push	{r7}
 800392a:	b083      	sub	sp, #12
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
 8003930:	460b      	mov	r3, r1
 8003932:	807b      	strh	r3, [r7, #2]
 8003934:	4613      	mov	r3, r2
 8003936:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003938:	787b      	ldrb	r3, [r7, #1]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d003      	beq.n	8003946 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800393e:	887a      	ldrh	r2, [r7, #2]
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003944:	e003      	b.n	800394e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003946:	887b      	ldrh	r3, [r7, #2]
 8003948:	041a      	lsls	r2, r3, #16
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	619a      	str	r2, [r3, #24]
}
 800394e:	bf00      	nop
 8003950:	370c      	adds	r7, #12
 8003952:	46bd      	mov	sp, r7
 8003954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003958:	4770      	bx	lr
	...

0800395c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b084      	sub	sp, #16
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d101      	bne.n	800396e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800396a:	2301      	movs	r3, #1
 800396c:	e12b      	b.n	8003bc6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003974:	b2db      	uxtb	r3, r3
 8003976:	2b00      	cmp	r3, #0
 8003978:	d106      	bne.n	8003988 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2200      	movs	r2, #0
 800397e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003982:	6878      	ldr	r0, [r7, #4]
 8003984:	f7fd f936 	bl	8000bf4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2224      	movs	r2, #36	; 0x24
 800398c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	681a      	ldr	r2, [r3, #0]
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f022 0201 	bic.w	r2, r2, #1
 800399e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	681a      	ldr	r2, [r3, #0]
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80039ae:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	681a      	ldr	r2, [r3, #0]
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80039be:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80039c0:	f002 f952 	bl	8005c68 <HAL_RCC_GetPCLK1Freq>
 80039c4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	685b      	ldr	r3, [r3, #4]
 80039ca:	4a81      	ldr	r2, [pc, #516]	; (8003bd0 <HAL_I2C_Init+0x274>)
 80039cc:	4293      	cmp	r3, r2
 80039ce:	d807      	bhi.n	80039e0 <HAL_I2C_Init+0x84>
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	4a80      	ldr	r2, [pc, #512]	; (8003bd4 <HAL_I2C_Init+0x278>)
 80039d4:	4293      	cmp	r3, r2
 80039d6:	bf94      	ite	ls
 80039d8:	2301      	movls	r3, #1
 80039da:	2300      	movhi	r3, #0
 80039dc:	b2db      	uxtb	r3, r3
 80039de:	e006      	b.n	80039ee <HAL_I2C_Init+0x92>
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	4a7d      	ldr	r2, [pc, #500]	; (8003bd8 <HAL_I2C_Init+0x27c>)
 80039e4:	4293      	cmp	r3, r2
 80039e6:	bf94      	ite	ls
 80039e8:	2301      	movls	r3, #1
 80039ea:	2300      	movhi	r3, #0
 80039ec:	b2db      	uxtb	r3, r3
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d001      	beq.n	80039f6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80039f2:	2301      	movs	r3, #1
 80039f4:	e0e7      	b.n	8003bc6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	4a78      	ldr	r2, [pc, #480]	; (8003bdc <HAL_I2C_Init+0x280>)
 80039fa:	fba2 2303 	umull	r2, r3, r2, r3
 80039fe:	0c9b      	lsrs	r3, r3, #18
 8003a00:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	685b      	ldr	r3, [r3, #4]
 8003a08:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	68ba      	ldr	r2, [r7, #8]
 8003a12:	430a      	orrs	r2, r1
 8003a14:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	6a1b      	ldr	r3, [r3, #32]
 8003a1c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	685b      	ldr	r3, [r3, #4]
 8003a24:	4a6a      	ldr	r2, [pc, #424]	; (8003bd0 <HAL_I2C_Init+0x274>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d802      	bhi.n	8003a30 <HAL_I2C_Init+0xd4>
 8003a2a:	68bb      	ldr	r3, [r7, #8]
 8003a2c:	3301      	adds	r3, #1
 8003a2e:	e009      	b.n	8003a44 <HAL_I2C_Init+0xe8>
 8003a30:	68bb      	ldr	r3, [r7, #8]
 8003a32:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003a36:	fb02 f303 	mul.w	r3, r2, r3
 8003a3a:	4a69      	ldr	r2, [pc, #420]	; (8003be0 <HAL_I2C_Init+0x284>)
 8003a3c:	fba2 2303 	umull	r2, r3, r2, r3
 8003a40:	099b      	lsrs	r3, r3, #6
 8003a42:	3301      	adds	r3, #1
 8003a44:	687a      	ldr	r2, [r7, #4]
 8003a46:	6812      	ldr	r2, [r2, #0]
 8003a48:	430b      	orrs	r3, r1
 8003a4a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	69db      	ldr	r3, [r3, #28]
 8003a52:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003a56:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	685b      	ldr	r3, [r3, #4]
 8003a5e:	495c      	ldr	r1, [pc, #368]	; (8003bd0 <HAL_I2C_Init+0x274>)
 8003a60:	428b      	cmp	r3, r1
 8003a62:	d819      	bhi.n	8003a98 <HAL_I2C_Init+0x13c>
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	1e59      	subs	r1, r3, #1
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	685b      	ldr	r3, [r3, #4]
 8003a6c:	005b      	lsls	r3, r3, #1
 8003a6e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003a72:	1c59      	adds	r1, r3, #1
 8003a74:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003a78:	400b      	ands	r3, r1
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d00a      	beq.n	8003a94 <HAL_I2C_Init+0x138>
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	1e59      	subs	r1, r3, #1
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	685b      	ldr	r3, [r3, #4]
 8003a86:	005b      	lsls	r3, r3, #1
 8003a88:	fbb1 f3f3 	udiv	r3, r1, r3
 8003a8c:	3301      	adds	r3, #1
 8003a8e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a92:	e051      	b.n	8003b38 <HAL_I2C_Init+0x1dc>
 8003a94:	2304      	movs	r3, #4
 8003a96:	e04f      	b.n	8003b38 <HAL_I2C_Init+0x1dc>
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	689b      	ldr	r3, [r3, #8]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d111      	bne.n	8003ac4 <HAL_I2C_Init+0x168>
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	1e58      	subs	r0, r3, #1
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6859      	ldr	r1, [r3, #4]
 8003aa8:	460b      	mov	r3, r1
 8003aaa:	005b      	lsls	r3, r3, #1
 8003aac:	440b      	add	r3, r1
 8003aae:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ab2:	3301      	adds	r3, #1
 8003ab4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	bf0c      	ite	eq
 8003abc:	2301      	moveq	r3, #1
 8003abe:	2300      	movne	r3, #0
 8003ac0:	b2db      	uxtb	r3, r3
 8003ac2:	e012      	b.n	8003aea <HAL_I2C_Init+0x18e>
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	1e58      	subs	r0, r3, #1
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6859      	ldr	r1, [r3, #4]
 8003acc:	460b      	mov	r3, r1
 8003ace:	009b      	lsls	r3, r3, #2
 8003ad0:	440b      	add	r3, r1
 8003ad2:	0099      	lsls	r1, r3, #2
 8003ad4:	440b      	add	r3, r1
 8003ad6:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ada:	3301      	adds	r3, #1
 8003adc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	bf0c      	ite	eq
 8003ae4:	2301      	moveq	r3, #1
 8003ae6:	2300      	movne	r3, #0
 8003ae8:	b2db      	uxtb	r3, r3
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d001      	beq.n	8003af2 <HAL_I2C_Init+0x196>
 8003aee:	2301      	movs	r3, #1
 8003af0:	e022      	b.n	8003b38 <HAL_I2C_Init+0x1dc>
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	689b      	ldr	r3, [r3, #8]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d10e      	bne.n	8003b18 <HAL_I2C_Init+0x1bc>
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	1e58      	subs	r0, r3, #1
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6859      	ldr	r1, [r3, #4]
 8003b02:	460b      	mov	r3, r1
 8003b04:	005b      	lsls	r3, r3, #1
 8003b06:	440b      	add	r3, r1
 8003b08:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b0c:	3301      	adds	r3, #1
 8003b0e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b12:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b16:	e00f      	b.n	8003b38 <HAL_I2C_Init+0x1dc>
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	1e58      	subs	r0, r3, #1
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6859      	ldr	r1, [r3, #4]
 8003b20:	460b      	mov	r3, r1
 8003b22:	009b      	lsls	r3, r3, #2
 8003b24:	440b      	add	r3, r1
 8003b26:	0099      	lsls	r1, r3, #2
 8003b28:	440b      	add	r3, r1
 8003b2a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b2e:	3301      	adds	r3, #1
 8003b30:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b34:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003b38:	6879      	ldr	r1, [r7, #4]
 8003b3a:	6809      	ldr	r1, [r1, #0]
 8003b3c:	4313      	orrs	r3, r2
 8003b3e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	69da      	ldr	r2, [r3, #28]
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6a1b      	ldr	r3, [r3, #32]
 8003b52:	431a      	orrs	r2, r3
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	430a      	orrs	r2, r1
 8003b5a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	689b      	ldr	r3, [r3, #8]
 8003b62:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003b66:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003b6a:	687a      	ldr	r2, [r7, #4]
 8003b6c:	6911      	ldr	r1, [r2, #16]
 8003b6e:	687a      	ldr	r2, [r7, #4]
 8003b70:	68d2      	ldr	r2, [r2, #12]
 8003b72:	4311      	orrs	r1, r2
 8003b74:	687a      	ldr	r2, [r7, #4]
 8003b76:	6812      	ldr	r2, [r2, #0]
 8003b78:	430b      	orrs	r3, r1
 8003b7a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	68db      	ldr	r3, [r3, #12]
 8003b82:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	695a      	ldr	r2, [r3, #20]
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	699b      	ldr	r3, [r3, #24]
 8003b8e:	431a      	orrs	r2, r3
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	430a      	orrs	r2, r1
 8003b96:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	681a      	ldr	r2, [r3, #0]
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f042 0201 	orr.w	r2, r2, #1
 8003ba6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2200      	movs	r2, #0
 8003bac:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2220      	movs	r2, #32
 8003bb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2200      	movs	r2, #0
 8003bba:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003bc4:	2300      	movs	r3, #0
}
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	3710      	adds	r7, #16
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	bd80      	pop	{r7, pc}
 8003bce:	bf00      	nop
 8003bd0:	000186a0 	.word	0x000186a0
 8003bd4:	001e847f 	.word	0x001e847f
 8003bd8:	003d08ff 	.word	0x003d08ff
 8003bdc:	431bde83 	.word	0x431bde83
 8003be0:	10624dd3 	.word	0x10624dd3

08003be4 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b088      	sub	sp, #32
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8003bec:	2300      	movs	r3, #0
 8003bee:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	685b      	ldr	r3, [r3, #4]
 8003bf6:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bfc:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003c04:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c0c:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003c0e:	7bfb      	ldrb	r3, [r7, #15]
 8003c10:	2b10      	cmp	r3, #16
 8003c12:	d003      	beq.n	8003c1c <HAL_I2C_EV_IRQHandler+0x38>
 8003c14:	7bfb      	ldrb	r3, [r7, #15]
 8003c16:	2b40      	cmp	r3, #64	; 0x40
 8003c18:	f040 80c1 	bne.w	8003d9e <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	699b      	ldr	r3, [r3, #24]
 8003c22:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	695b      	ldr	r3, [r3, #20]
 8003c2a:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8003c2c:	69fb      	ldr	r3, [r7, #28]
 8003c2e:	f003 0301 	and.w	r3, r3, #1
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d10d      	bne.n	8003c52 <HAL_I2C_EV_IRQHandler+0x6e>
 8003c36:	693b      	ldr	r3, [r7, #16]
 8003c38:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8003c3c:	d003      	beq.n	8003c46 <HAL_I2C_EV_IRQHandler+0x62>
 8003c3e:	693b      	ldr	r3, [r7, #16]
 8003c40:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8003c44:	d101      	bne.n	8003c4a <HAL_I2C_EV_IRQHandler+0x66>
 8003c46:	2301      	movs	r3, #1
 8003c48:	e000      	b.n	8003c4c <HAL_I2C_EV_IRQHandler+0x68>
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	2b01      	cmp	r3, #1
 8003c4e:	f000 8132 	beq.w	8003eb6 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003c52:	69fb      	ldr	r3, [r7, #28]
 8003c54:	f003 0301 	and.w	r3, r3, #1
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d00c      	beq.n	8003c76 <HAL_I2C_EV_IRQHandler+0x92>
 8003c5c:	697b      	ldr	r3, [r7, #20]
 8003c5e:	0a5b      	lsrs	r3, r3, #9
 8003c60:	f003 0301 	and.w	r3, r3, #1
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d006      	beq.n	8003c76 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8003c68:	6878      	ldr	r0, [r7, #4]
 8003c6a:	f001 fb65 	bl	8005338 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8003c6e:	6878      	ldr	r0, [r7, #4]
 8003c70:	f000 fcdc 	bl	800462c <I2C_Master_SB>
 8003c74:	e092      	b.n	8003d9c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003c76:	69fb      	ldr	r3, [r7, #28]
 8003c78:	08db      	lsrs	r3, r3, #3
 8003c7a:	f003 0301 	and.w	r3, r3, #1
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d009      	beq.n	8003c96 <HAL_I2C_EV_IRQHandler+0xb2>
 8003c82:	697b      	ldr	r3, [r7, #20]
 8003c84:	0a5b      	lsrs	r3, r3, #9
 8003c86:	f003 0301 	and.w	r3, r3, #1
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d003      	beq.n	8003c96 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8003c8e:	6878      	ldr	r0, [r7, #4]
 8003c90:	f000 fd52 	bl	8004738 <I2C_Master_ADD10>
 8003c94:	e082      	b.n	8003d9c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003c96:	69fb      	ldr	r3, [r7, #28]
 8003c98:	085b      	lsrs	r3, r3, #1
 8003c9a:	f003 0301 	and.w	r3, r3, #1
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d009      	beq.n	8003cb6 <HAL_I2C_EV_IRQHandler+0xd2>
 8003ca2:	697b      	ldr	r3, [r7, #20]
 8003ca4:	0a5b      	lsrs	r3, r3, #9
 8003ca6:	f003 0301 	and.w	r3, r3, #1
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d003      	beq.n	8003cb6 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8003cae:	6878      	ldr	r0, [r7, #4]
 8003cb0:	f000 fd6c 	bl	800478c <I2C_Master_ADDR>
 8003cb4:	e072      	b.n	8003d9c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8003cb6:	69bb      	ldr	r3, [r7, #24]
 8003cb8:	089b      	lsrs	r3, r3, #2
 8003cba:	f003 0301 	and.w	r3, r3, #1
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d03b      	beq.n	8003d3a <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	685b      	ldr	r3, [r3, #4]
 8003cc8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ccc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003cd0:	f000 80f3 	beq.w	8003eba <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003cd4:	69fb      	ldr	r3, [r7, #28]
 8003cd6:	09db      	lsrs	r3, r3, #7
 8003cd8:	f003 0301 	and.w	r3, r3, #1
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d00f      	beq.n	8003d00 <HAL_I2C_EV_IRQHandler+0x11c>
 8003ce0:	697b      	ldr	r3, [r7, #20]
 8003ce2:	0a9b      	lsrs	r3, r3, #10
 8003ce4:	f003 0301 	and.w	r3, r3, #1
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d009      	beq.n	8003d00 <HAL_I2C_EV_IRQHandler+0x11c>
 8003cec:	69fb      	ldr	r3, [r7, #28]
 8003cee:	089b      	lsrs	r3, r3, #2
 8003cf0:	f003 0301 	and.w	r3, r3, #1
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d103      	bne.n	8003d00 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8003cf8:	6878      	ldr	r0, [r7, #4]
 8003cfa:	f000 f94c 	bl	8003f96 <I2C_MasterTransmit_TXE>
 8003cfe:	e04d      	b.n	8003d9c <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003d00:	69fb      	ldr	r3, [r7, #28]
 8003d02:	089b      	lsrs	r3, r3, #2
 8003d04:	f003 0301 	and.w	r3, r3, #1
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	f000 80d6 	beq.w	8003eba <HAL_I2C_EV_IRQHandler+0x2d6>
 8003d0e:	697b      	ldr	r3, [r7, #20]
 8003d10:	0a5b      	lsrs	r3, r3, #9
 8003d12:	f003 0301 	and.w	r3, r3, #1
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	f000 80cf 	beq.w	8003eba <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003d1c:	7bbb      	ldrb	r3, [r7, #14]
 8003d1e:	2b21      	cmp	r3, #33	; 0x21
 8003d20:	d103      	bne.n	8003d2a <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8003d22:	6878      	ldr	r0, [r7, #4]
 8003d24:	f000 f9d3 	bl	80040ce <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003d28:	e0c7      	b.n	8003eba <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8003d2a:	7bfb      	ldrb	r3, [r7, #15]
 8003d2c:	2b40      	cmp	r3, #64	; 0x40
 8003d2e:	f040 80c4 	bne.w	8003eba <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003d32:	6878      	ldr	r0, [r7, #4]
 8003d34:	f000 fa41 	bl	80041ba <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003d38:	e0bf      	b.n	8003eba <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	685b      	ldr	r3, [r3, #4]
 8003d40:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d44:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d48:	f000 80b7 	beq.w	8003eba <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003d4c:	69fb      	ldr	r3, [r7, #28]
 8003d4e:	099b      	lsrs	r3, r3, #6
 8003d50:	f003 0301 	and.w	r3, r3, #1
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d00f      	beq.n	8003d78 <HAL_I2C_EV_IRQHandler+0x194>
 8003d58:	697b      	ldr	r3, [r7, #20]
 8003d5a:	0a9b      	lsrs	r3, r3, #10
 8003d5c:	f003 0301 	and.w	r3, r3, #1
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d009      	beq.n	8003d78 <HAL_I2C_EV_IRQHandler+0x194>
 8003d64:	69fb      	ldr	r3, [r7, #28]
 8003d66:	089b      	lsrs	r3, r3, #2
 8003d68:	f003 0301 	and.w	r3, r3, #1
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d103      	bne.n	8003d78 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8003d70:	6878      	ldr	r0, [r7, #4]
 8003d72:	f000 fab6 	bl	80042e2 <I2C_MasterReceive_RXNE>
 8003d76:	e011      	b.n	8003d9c <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003d78:	69fb      	ldr	r3, [r7, #28]
 8003d7a:	089b      	lsrs	r3, r3, #2
 8003d7c:	f003 0301 	and.w	r3, r3, #1
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	f000 809a 	beq.w	8003eba <HAL_I2C_EV_IRQHandler+0x2d6>
 8003d86:	697b      	ldr	r3, [r7, #20]
 8003d88:	0a5b      	lsrs	r3, r3, #9
 8003d8a:	f003 0301 	and.w	r3, r3, #1
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	f000 8093 	beq.w	8003eba <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8003d94:	6878      	ldr	r0, [r7, #4]
 8003d96:	f000 fb5f 	bl	8004458 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003d9a:	e08e      	b.n	8003eba <HAL_I2C_EV_IRQHandler+0x2d6>
 8003d9c:	e08d      	b.n	8003eba <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d004      	beq.n	8003db0 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	695b      	ldr	r3, [r3, #20]
 8003dac:	61fb      	str	r3, [r7, #28]
 8003dae:	e007      	b.n	8003dc0 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	699b      	ldr	r3, [r3, #24]
 8003db6:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	695b      	ldr	r3, [r3, #20]
 8003dbe:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003dc0:	69fb      	ldr	r3, [r7, #28]
 8003dc2:	085b      	lsrs	r3, r3, #1
 8003dc4:	f003 0301 	and.w	r3, r3, #1
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d012      	beq.n	8003df2 <HAL_I2C_EV_IRQHandler+0x20e>
 8003dcc:	697b      	ldr	r3, [r7, #20]
 8003dce:	0a5b      	lsrs	r3, r3, #9
 8003dd0:	f003 0301 	and.w	r3, r3, #1
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d00c      	beq.n	8003df2 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d003      	beq.n	8003de8 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	699b      	ldr	r3, [r3, #24]
 8003de6:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8003de8:	69b9      	ldr	r1, [r7, #24]
 8003dea:	6878      	ldr	r0, [r7, #4]
 8003dec:	f000 ff1d 	bl	8004c2a <I2C_Slave_ADDR>
 8003df0:	e066      	b.n	8003ec0 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003df2:	69fb      	ldr	r3, [r7, #28]
 8003df4:	091b      	lsrs	r3, r3, #4
 8003df6:	f003 0301 	and.w	r3, r3, #1
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d009      	beq.n	8003e12 <HAL_I2C_EV_IRQHandler+0x22e>
 8003dfe:	697b      	ldr	r3, [r7, #20]
 8003e00:	0a5b      	lsrs	r3, r3, #9
 8003e02:	f003 0301 	and.w	r3, r3, #1
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d003      	beq.n	8003e12 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8003e0a:	6878      	ldr	r0, [r7, #4]
 8003e0c:	f000 ff58 	bl	8004cc0 <I2C_Slave_STOPF>
 8003e10:	e056      	b.n	8003ec0 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003e12:	7bbb      	ldrb	r3, [r7, #14]
 8003e14:	2b21      	cmp	r3, #33	; 0x21
 8003e16:	d002      	beq.n	8003e1e <HAL_I2C_EV_IRQHandler+0x23a>
 8003e18:	7bbb      	ldrb	r3, [r7, #14]
 8003e1a:	2b29      	cmp	r3, #41	; 0x29
 8003e1c:	d125      	bne.n	8003e6a <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003e1e:	69fb      	ldr	r3, [r7, #28]
 8003e20:	09db      	lsrs	r3, r3, #7
 8003e22:	f003 0301 	and.w	r3, r3, #1
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d00f      	beq.n	8003e4a <HAL_I2C_EV_IRQHandler+0x266>
 8003e2a:	697b      	ldr	r3, [r7, #20]
 8003e2c:	0a9b      	lsrs	r3, r3, #10
 8003e2e:	f003 0301 	and.w	r3, r3, #1
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d009      	beq.n	8003e4a <HAL_I2C_EV_IRQHandler+0x266>
 8003e36:	69fb      	ldr	r3, [r7, #28]
 8003e38:	089b      	lsrs	r3, r3, #2
 8003e3a:	f003 0301 	and.w	r3, r3, #1
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d103      	bne.n	8003e4a <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8003e42:	6878      	ldr	r0, [r7, #4]
 8003e44:	f000 fe33 	bl	8004aae <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003e48:	e039      	b.n	8003ebe <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003e4a:	69fb      	ldr	r3, [r7, #28]
 8003e4c:	089b      	lsrs	r3, r3, #2
 8003e4e:	f003 0301 	and.w	r3, r3, #1
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d033      	beq.n	8003ebe <HAL_I2C_EV_IRQHandler+0x2da>
 8003e56:	697b      	ldr	r3, [r7, #20]
 8003e58:	0a5b      	lsrs	r3, r3, #9
 8003e5a:	f003 0301 	and.w	r3, r3, #1
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d02d      	beq.n	8003ebe <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8003e62:	6878      	ldr	r0, [r7, #4]
 8003e64:	f000 fe60 	bl	8004b28 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003e68:	e029      	b.n	8003ebe <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003e6a:	69fb      	ldr	r3, [r7, #28]
 8003e6c:	099b      	lsrs	r3, r3, #6
 8003e6e:	f003 0301 	and.w	r3, r3, #1
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d00f      	beq.n	8003e96 <HAL_I2C_EV_IRQHandler+0x2b2>
 8003e76:	697b      	ldr	r3, [r7, #20]
 8003e78:	0a9b      	lsrs	r3, r3, #10
 8003e7a:	f003 0301 	and.w	r3, r3, #1
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d009      	beq.n	8003e96 <HAL_I2C_EV_IRQHandler+0x2b2>
 8003e82:	69fb      	ldr	r3, [r7, #28]
 8003e84:	089b      	lsrs	r3, r3, #2
 8003e86:	f003 0301 	and.w	r3, r3, #1
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d103      	bne.n	8003e96 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8003e8e:	6878      	ldr	r0, [r7, #4]
 8003e90:	f000 fe6b 	bl	8004b6a <I2C_SlaveReceive_RXNE>
 8003e94:	e014      	b.n	8003ec0 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003e96:	69fb      	ldr	r3, [r7, #28]
 8003e98:	089b      	lsrs	r3, r3, #2
 8003e9a:	f003 0301 	and.w	r3, r3, #1
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d00e      	beq.n	8003ec0 <HAL_I2C_EV_IRQHandler+0x2dc>
 8003ea2:	697b      	ldr	r3, [r7, #20]
 8003ea4:	0a5b      	lsrs	r3, r3, #9
 8003ea6:	f003 0301 	and.w	r3, r3, #1
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d008      	beq.n	8003ec0 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8003eae:	6878      	ldr	r0, [r7, #4]
 8003eb0:	f000 fe99 	bl	8004be6 <I2C_SlaveReceive_BTF>
 8003eb4:	e004      	b.n	8003ec0 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8003eb6:	bf00      	nop
 8003eb8:	e002      	b.n	8003ec0 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003eba:	bf00      	nop
 8003ebc:	e000      	b.n	8003ec0 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003ebe:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8003ec0:	3720      	adds	r7, #32
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	bd80      	pop	{r7, pc}

08003ec6 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003ec6:	b480      	push	{r7}
 8003ec8:	b083      	sub	sp, #12
 8003eca:	af00      	add	r7, sp, #0
 8003ecc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8003ece:	bf00      	nop
 8003ed0:	370c      	adds	r7, #12
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed8:	4770      	bx	lr

08003eda <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003eda:	b480      	push	{r7}
 8003edc:	b083      	sub	sp, #12
 8003ede:	af00      	add	r7, sp, #0
 8003ee0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8003ee2:	bf00      	nop
 8003ee4:	370c      	adds	r7, #12
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eec:	4770      	bx	lr

08003eee <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003eee:	b480      	push	{r7}
 8003ef0:	b083      	sub	sp, #12
 8003ef2:	af00      	add	r7, sp, #0
 8003ef4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003ef6:	bf00      	nop
 8003ef8:	370c      	adds	r7, #12
 8003efa:	46bd      	mov	sp, r7
 8003efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f00:	4770      	bx	lr

08003f02 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003f02:	b480      	push	{r7}
 8003f04:	b083      	sub	sp, #12
 8003f06:	af00      	add	r7, sp, #0
 8003f08:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003f0a:	bf00      	nop
 8003f0c:	370c      	adds	r7, #12
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f14:	4770      	bx	lr

08003f16 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003f16:	b480      	push	{r7}
 8003f18:	b083      	sub	sp, #12
 8003f1a:	af00      	add	r7, sp, #0
 8003f1c:	6078      	str	r0, [r7, #4]
 8003f1e:	460b      	mov	r3, r1
 8003f20:	70fb      	strb	r3, [r7, #3]
 8003f22:	4613      	mov	r3, r2
 8003f24:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003f26:	bf00      	nop
 8003f28:	370c      	adds	r7, #12
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f30:	4770      	bx	lr

08003f32 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003f32:	b480      	push	{r7}
 8003f34:	b083      	sub	sp, #12
 8003f36:	af00      	add	r7, sp, #0
 8003f38:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8003f3a:	bf00      	nop
 8003f3c:	370c      	adds	r7, #12
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f44:	4770      	bx	lr

08003f46 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003f46:	b480      	push	{r7}
 8003f48:	b083      	sub	sp, #12
 8003f4a:	af00      	add	r7, sp, #0
 8003f4c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8003f4e:	bf00      	nop
 8003f50:	370c      	adds	r7, #12
 8003f52:	46bd      	mov	sp, r7
 8003f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f58:	4770      	bx	lr

08003f5a <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003f5a:	b480      	push	{r7}
 8003f5c:	b083      	sub	sp, #12
 8003f5e:	af00      	add	r7, sp, #0
 8003f60:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8003f62:	bf00      	nop
 8003f64:	370c      	adds	r7, #12
 8003f66:	46bd      	mov	sp, r7
 8003f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6c:	4770      	bx	lr

08003f6e <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003f6e:	b480      	push	{r7}
 8003f70:	b083      	sub	sp, #12
 8003f72:	af00      	add	r7, sp, #0
 8003f74:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003f76:	bf00      	nop
 8003f78:	370c      	adds	r7, #12
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f80:	4770      	bx	lr

08003f82 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003f82:	b480      	push	{r7}
 8003f84:	b083      	sub	sp, #12
 8003f86:	af00      	add	r7, sp, #0
 8003f88:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003f8a:	bf00      	nop
 8003f8c:	370c      	adds	r7, #12
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f94:	4770      	bx	lr

08003f96 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003f96:	b580      	push	{r7, lr}
 8003f98:	b084      	sub	sp, #16
 8003f9a:	af00      	add	r7, sp, #0
 8003f9c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fa4:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003fac:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fb2:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d150      	bne.n	800405e <I2C_MasterTransmit_TXE+0xc8>
 8003fbc:	7bfb      	ldrb	r3, [r7, #15]
 8003fbe:	2b21      	cmp	r3, #33	; 0x21
 8003fc0:	d14d      	bne.n	800405e <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003fc2:	68bb      	ldr	r3, [r7, #8]
 8003fc4:	2b08      	cmp	r3, #8
 8003fc6:	d01d      	beq.n	8004004 <I2C_MasterTransmit_TXE+0x6e>
 8003fc8:	68bb      	ldr	r3, [r7, #8]
 8003fca:	2b20      	cmp	r3, #32
 8003fcc:	d01a      	beq.n	8004004 <I2C_MasterTransmit_TXE+0x6e>
 8003fce:	68bb      	ldr	r3, [r7, #8]
 8003fd0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003fd4:	d016      	beq.n	8004004 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	685a      	ldr	r2, [r3, #4]
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003fe4:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	2211      	movs	r2, #17
 8003fea:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2200      	movs	r2, #0
 8003ff0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2220      	movs	r2, #32
 8003ff8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8003ffc:	6878      	ldr	r0, [r7, #4]
 8003ffe:	f7ff ff62 	bl	8003ec6 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004002:	e060      	b.n	80040c6 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	685a      	ldr	r2, [r3, #4]
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004012:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	681a      	ldr	r2, [r3, #0]
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004022:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2200      	movs	r2, #0
 8004028:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	2220      	movs	r2, #32
 800402e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004038:	b2db      	uxtb	r3, r3
 800403a:	2b40      	cmp	r3, #64	; 0x40
 800403c:	d107      	bne.n	800404e <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2200      	movs	r2, #0
 8004042:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8004046:	6878      	ldr	r0, [r7, #4]
 8004048:	f7ff ff7d 	bl	8003f46 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800404c:	e03b      	b.n	80040c6 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	2200      	movs	r2, #0
 8004052:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004056:	6878      	ldr	r0, [r7, #4]
 8004058:	f7ff ff35 	bl	8003ec6 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800405c:	e033      	b.n	80040c6 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 800405e:	7bfb      	ldrb	r3, [r7, #15]
 8004060:	2b21      	cmp	r3, #33	; 0x21
 8004062:	d005      	beq.n	8004070 <I2C_MasterTransmit_TXE+0xda>
 8004064:	7bbb      	ldrb	r3, [r7, #14]
 8004066:	2b40      	cmp	r3, #64	; 0x40
 8004068:	d12d      	bne.n	80040c6 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 800406a:	7bfb      	ldrb	r3, [r7, #15]
 800406c:	2b22      	cmp	r3, #34	; 0x22
 800406e:	d12a      	bne.n	80040c6 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004074:	b29b      	uxth	r3, r3
 8004076:	2b00      	cmp	r3, #0
 8004078:	d108      	bne.n	800408c <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	685a      	ldr	r2, [r3, #4]
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004088:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800408a:	e01c      	b.n	80040c6 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004092:	b2db      	uxtb	r3, r3
 8004094:	2b40      	cmp	r3, #64	; 0x40
 8004096:	d103      	bne.n	80040a0 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004098:	6878      	ldr	r0, [r7, #4]
 800409a:	f000 f88e 	bl	80041ba <I2C_MemoryTransmit_TXE_BTF>
}
 800409e:	e012      	b.n	80040c6 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040a4:	781a      	ldrb	r2, [r3, #0]
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040b0:	1c5a      	adds	r2, r3, #1
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040ba:	b29b      	uxth	r3, r3
 80040bc:	3b01      	subs	r3, #1
 80040be:	b29a      	uxth	r2, r3
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80040c4:	e7ff      	b.n	80040c6 <I2C_MasterTransmit_TXE+0x130>
 80040c6:	bf00      	nop
 80040c8:	3710      	adds	r7, #16
 80040ca:	46bd      	mov	sp, r7
 80040cc:	bd80      	pop	{r7, pc}

080040ce <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80040ce:	b580      	push	{r7, lr}
 80040d0:	b084      	sub	sp, #16
 80040d2:	af00      	add	r7, sp, #0
 80040d4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040da:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040e2:	b2db      	uxtb	r3, r3
 80040e4:	2b21      	cmp	r3, #33	; 0x21
 80040e6:	d164      	bne.n	80041b2 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040ec:	b29b      	uxth	r3, r3
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d012      	beq.n	8004118 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040f6:	781a      	ldrb	r2, [r3, #0]
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004102:	1c5a      	adds	r2, r3, #1
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800410c:	b29b      	uxth	r3, r3
 800410e:	3b01      	subs	r3, #1
 8004110:	b29a      	uxth	r2, r3
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8004116:	e04c      	b.n	80041b2 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	2b08      	cmp	r3, #8
 800411c:	d01d      	beq.n	800415a <I2C_MasterTransmit_BTF+0x8c>
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	2b20      	cmp	r3, #32
 8004122:	d01a      	beq.n	800415a <I2C_MasterTransmit_BTF+0x8c>
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800412a:	d016      	beq.n	800415a <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	685a      	ldr	r2, [r3, #4]
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800413a:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2211      	movs	r2, #17
 8004140:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2200      	movs	r2, #0
 8004146:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2220      	movs	r2, #32
 800414e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004152:	6878      	ldr	r0, [r7, #4]
 8004154:	f7ff feb7 	bl	8003ec6 <HAL_I2C_MasterTxCpltCallback>
}
 8004158:	e02b      	b.n	80041b2 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	685a      	ldr	r2, [r3, #4]
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004168:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	681a      	ldr	r2, [r3, #0]
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004178:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	2200      	movs	r2, #0
 800417e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2220      	movs	r2, #32
 8004184:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800418e:	b2db      	uxtb	r3, r3
 8004190:	2b40      	cmp	r3, #64	; 0x40
 8004192:	d107      	bne.n	80041a4 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2200      	movs	r2, #0
 8004198:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 800419c:	6878      	ldr	r0, [r7, #4]
 800419e:	f7ff fed2 	bl	8003f46 <HAL_I2C_MemTxCpltCallback>
}
 80041a2:	e006      	b.n	80041b2 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2200      	movs	r2, #0
 80041a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80041ac:	6878      	ldr	r0, [r7, #4]
 80041ae:	f7ff fe8a 	bl	8003ec6 <HAL_I2C_MasterTxCpltCallback>
}
 80041b2:	bf00      	nop
 80041b4:	3710      	adds	r7, #16
 80041b6:	46bd      	mov	sp, r7
 80041b8:	bd80      	pop	{r7, pc}

080041ba <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80041ba:	b580      	push	{r7, lr}
 80041bc:	b084      	sub	sp, #16
 80041be:	af00      	add	r7, sp, #0
 80041c0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041c8:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d11d      	bne.n	800420e <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041d6:	2b01      	cmp	r3, #1
 80041d8:	d10b      	bne.n	80041f2 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041de:	b2da      	uxtb	r2, r3
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041ea:	1c9a      	adds	r2, r3, #2
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 80041f0:	e073      	b.n	80042da <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041f6:	b29b      	uxth	r3, r3
 80041f8:	121b      	asrs	r3, r3, #8
 80041fa:	b2da      	uxtb	r2, r3
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004206:	1c5a      	adds	r2, r3, #1
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	651a      	str	r2, [r3, #80]	; 0x50
}
 800420c:	e065      	b.n	80042da <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004212:	2b01      	cmp	r3, #1
 8004214:	d10b      	bne.n	800422e <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800421a:	b2da      	uxtb	r2, r3
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004226:	1c5a      	adds	r2, r3, #1
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	651a      	str	r2, [r3, #80]	; 0x50
}
 800422c:	e055      	b.n	80042da <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004232:	2b02      	cmp	r3, #2
 8004234:	d151      	bne.n	80042da <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8004236:	7bfb      	ldrb	r3, [r7, #15]
 8004238:	2b22      	cmp	r3, #34	; 0x22
 800423a:	d10d      	bne.n	8004258 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	681a      	ldr	r2, [r3, #0]
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800424a:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004250:	1c5a      	adds	r2, r3, #1
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004256:	e040      	b.n	80042da <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800425c:	b29b      	uxth	r3, r3
 800425e:	2b00      	cmp	r3, #0
 8004260:	d015      	beq.n	800428e <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8004262:	7bfb      	ldrb	r3, [r7, #15]
 8004264:	2b21      	cmp	r3, #33	; 0x21
 8004266:	d112      	bne.n	800428e <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800426c:	781a      	ldrb	r2, [r3, #0]
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004278:	1c5a      	adds	r2, r3, #1
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004282:	b29b      	uxth	r3, r3
 8004284:	3b01      	subs	r3, #1
 8004286:	b29a      	uxth	r2, r3
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800428c:	e025      	b.n	80042da <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004292:	b29b      	uxth	r3, r3
 8004294:	2b00      	cmp	r3, #0
 8004296:	d120      	bne.n	80042da <I2C_MemoryTransmit_TXE_BTF+0x120>
 8004298:	7bfb      	ldrb	r3, [r7, #15]
 800429a:	2b21      	cmp	r3, #33	; 0x21
 800429c:	d11d      	bne.n	80042da <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	685a      	ldr	r2, [r3, #4]
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80042ac:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	681a      	ldr	r2, [r3, #0]
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042bc:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	2200      	movs	r2, #0
 80042c2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2220      	movs	r2, #32
 80042c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2200      	movs	r2, #0
 80042d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80042d4:	6878      	ldr	r0, [r7, #4]
 80042d6:	f7ff fe36 	bl	8003f46 <HAL_I2C_MemTxCpltCallback>
}
 80042da:	bf00      	nop
 80042dc:	3710      	adds	r7, #16
 80042de:	46bd      	mov	sp, r7
 80042e0:	bd80      	pop	{r7, pc}

080042e2 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80042e2:	b580      	push	{r7, lr}
 80042e4:	b084      	sub	sp, #16
 80042e6:	af00      	add	r7, sp, #0
 80042e8:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042f0:	b2db      	uxtb	r3, r3
 80042f2:	2b22      	cmp	r3, #34	; 0x22
 80042f4:	f040 80ac 	bne.w	8004450 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042fc:	b29b      	uxth	r3, r3
 80042fe:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	2b03      	cmp	r3, #3
 8004304:	d921      	bls.n	800434a <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	691a      	ldr	r2, [r3, #16]
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004310:	b2d2      	uxtb	r2, r2
 8004312:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004318:	1c5a      	adds	r2, r3, #1
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004322:	b29b      	uxth	r3, r3
 8004324:	3b01      	subs	r3, #1
 8004326:	b29a      	uxth	r2, r3
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004330:	b29b      	uxth	r3, r3
 8004332:	2b03      	cmp	r3, #3
 8004334:	f040 808c 	bne.w	8004450 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	685a      	ldr	r2, [r3, #4]
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004346:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8004348:	e082      	b.n	8004450 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800434e:	2b02      	cmp	r3, #2
 8004350:	d075      	beq.n	800443e <I2C_MasterReceive_RXNE+0x15c>
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	2b01      	cmp	r3, #1
 8004356:	d002      	beq.n	800435e <I2C_MasterReceive_RXNE+0x7c>
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	2b00      	cmp	r3, #0
 800435c:	d16f      	bne.n	800443e <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800435e:	6878      	ldr	r0, [r7, #4]
 8004360:	f000 ffb8 	bl	80052d4 <I2C_WaitOnSTOPRequestThroughIT>
 8004364:	4603      	mov	r3, r0
 8004366:	2b00      	cmp	r3, #0
 8004368:	d142      	bne.n	80043f0 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	681a      	ldr	r2, [r3, #0]
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004378:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	685a      	ldr	r2, [r3, #4]
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004388:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	691a      	ldr	r2, [r3, #16]
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004394:	b2d2      	uxtb	r2, r2
 8004396:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800439c:	1c5a      	adds	r2, r3, #1
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043a6:	b29b      	uxth	r3, r3
 80043a8:	3b01      	subs	r3, #1
 80043aa:	b29a      	uxth	r2, r3
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2220      	movs	r2, #32
 80043b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80043be:	b2db      	uxtb	r3, r3
 80043c0:	2b40      	cmp	r3, #64	; 0x40
 80043c2:	d10a      	bne.n	80043da <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2200      	movs	r2, #0
 80043c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2200      	movs	r2, #0
 80043d0:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80043d2:	6878      	ldr	r0, [r7, #4]
 80043d4:	f7ff fdc1 	bl	8003f5a <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80043d8:	e03a      	b.n	8004450 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2200      	movs	r2, #0
 80043de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	2212      	movs	r2, #18
 80043e6:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80043e8:	6878      	ldr	r0, [r7, #4]
 80043ea:	f7ff fd76 	bl	8003eda <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80043ee:	e02f      	b.n	8004450 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	685a      	ldr	r2, [r3, #4]
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80043fe:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	691a      	ldr	r2, [r3, #16]
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800440a:	b2d2      	uxtb	r2, r2
 800440c:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004412:	1c5a      	adds	r2, r3, #1
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800441c:	b29b      	uxth	r3, r3
 800441e:	3b01      	subs	r3, #1
 8004420:	b29a      	uxth	r2, r3
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	2220      	movs	r2, #32
 800442a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	2200      	movs	r2, #0
 8004432:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8004436:	6878      	ldr	r0, [r7, #4]
 8004438:	f7ff fd99 	bl	8003f6e <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800443c:	e008      	b.n	8004450 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	685a      	ldr	r2, [r3, #4]
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800444c:	605a      	str	r2, [r3, #4]
}
 800444e:	e7ff      	b.n	8004450 <I2C_MasterReceive_RXNE+0x16e>
 8004450:	bf00      	nop
 8004452:	3710      	adds	r7, #16
 8004454:	46bd      	mov	sp, r7
 8004456:	bd80      	pop	{r7, pc}

08004458 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004458:	b580      	push	{r7, lr}
 800445a:	b084      	sub	sp, #16
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004464:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800446a:	b29b      	uxth	r3, r3
 800446c:	2b04      	cmp	r3, #4
 800446e:	d11b      	bne.n	80044a8 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	685a      	ldr	r2, [r3, #4]
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800447e:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	691a      	ldr	r2, [r3, #16]
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800448a:	b2d2      	uxtb	r2, r2
 800448c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004492:	1c5a      	adds	r2, r3, #1
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800449c:	b29b      	uxth	r3, r3
 800449e:	3b01      	subs	r3, #1
 80044a0:	b29a      	uxth	r2, r3
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80044a6:	e0bd      	b.n	8004624 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044ac:	b29b      	uxth	r3, r3
 80044ae:	2b03      	cmp	r3, #3
 80044b0:	d129      	bne.n	8004506 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	685a      	ldr	r2, [r3, #4]
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80044c0:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	2b04      	cmp	r3, #4
 80044c6:	d00a      	beq.n	80044de <I2C_MasterReceive_BTF+0x86>
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	2b02      	cmp	r3, #2
 80044cc:	d007      	beq.n	80044de <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	681a      	ldr	r2, [r3, #0]
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80044dc:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	691a      	ldr	r2, [r3, #16]
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044e8:	b2d2      	uxtb	r2, r2
 80044ea:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044f0:	1c5a      	adds	r2, r3, #1
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044fa:	b29b      	uxth	r3, r3
 80044fc:	3b01      	subs	r3, #1
 80044fe:	b29a      	uxth	r2, r3
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004504:	e08e      	b.n	8004624 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800450a:	b29b      	uxth	r3, r3
 800450c:	2b02      	cmp	r3, #2
 800450e:	d176      	bne.n	80045fe <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	2b01      	cmp	r3, #1
 8004514:	d002      	beq.n	800451c <I2C_MasterReceive_BTF+0xc4>
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	2b10      	cmp	r3, #16
 800451a:	d108      	bne.n	800452e <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	681a      	ldr	r2, [r3, #0]
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800452a:	601a      	str	r2, [r3, #0]
 800452c:	e019      	b.n	8004562 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	2b04      	cmp	r3, #4
 8004532:	d002      	beq.n	800453a <I2C_MasterReceive_BTF+0xe2>
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	2b02      	cmp	r3, #2
 8004538:	d108      	bne.n	800454c <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	681a      	ldr	r2, [r3, #0]
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004548:	601a      	str	r2, [r3, #0]
 800454a:	e00a      	b.n	8004562 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	2b10      	cmp	r3, #16
 8004550:	d007      	beq.n	8004562 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	681a      	ldr	r2, [r3, #0]
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004560:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	691a      	ldr	r2, [r3, #16]
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800456c:	b2d2      	uxtb	r2, r2
 800456e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004574:	1c5a      	adds	r2, r3, #1
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800457e:	b29b      	uxth	r3, r3
 8004580:	3b01      	subs	r3, #1
 8004582:	b29a      	uxth	r2, r3
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	691a      	ldr	r2, [r3, #16]
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004592:	b2d2      	uxtb	r2, r2
 8004594:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800459a:	1c5a      	adds	r2, r3, #1
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045a4:	b29b      	uxth	r3, r3
 80045a6:	3b01      	subs	r3, #1
 80045a8:	b29a      	uxth	r2, r3
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	685a      	ldr	r2, [r3, #4]
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80045bc:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	2220      	movs	r2, #32
 80045c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80045cc:	b2db      	uxtb	r3, r3
 80045ce:	2b40      	cmp	r3, #64	; 0x40
 80045d0:	d10a      	bne.n	80045e8 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	2200      	movs	r2, #0
 80045d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	2200      	movs	r2, #0
 80045de:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80045e0:	6878      	ldr	r0, [r7, #4]
 80045e2:	f7ff fcba 	bl	8003f5a <HAL_I2C_MemRxCpltCallback>
}
 80045e6:	e01d      	b.n	8004624 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2200      	movs	r2, #0
 80045ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2212      	movs	r2, #18
 80045f4:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80045f6:	6878      	ldr	r0, [r7, #4]
 80045f8:	f7ff fc6f 	bl	8003eda <HAL_I2C_MasterRxCpltCallback>
}
 80045fc:	e012      	b.n	8004624 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	691a      	ldr	r2, [r3, #16]
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004608:	b2d2      	uxtb	r2, r2
 800460a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004610:	1c5a      	adds	r2, r3, #1
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800461a:	b29b      	uxth	r3, r3
 800461c:	3b01      	subs	r3, #1
 800461e:	b29a      	uxth	r2, r3
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004624:	bf00      	nop
 8004626:	3710      	adds	r7, #16
 8004628:	46bd      	mov	sp, r7
 800462a:	bd80      	pop	{r7, pc}

0800462c <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800462c:	b480      	push	{r7}
 800462e:	b083      	sub	sp, #12
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800463a:	b2db      	uxtb	r3, r3
 800463c:	2b40      	cmp	r3, #64	; 0x40
 800463e:	d117      	bne.n	8004670 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004644:	2b00      	cmp	r3, #0
 8004646:	d109      	bne.n	800465c <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800464c:	b2db      	uxtb	r3, r3
 800464e:	461a      	mov	r2, r3
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004658:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 800465a:	e067      	b.n	800472c <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004660:	b2db      	uxtb	r3, r3
 8004662:	f043 0301 	orr.w	r3, r3, #1
 8004666:	b2da      	uxtb	r2, r3
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	611a      	str	r2, [r3, #16]
}
 800466e:	e05d      	b.n	800472c <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	691b      	ldr	r3, [r3, #16]
 8004674:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004678:	d133      	bne.n	80046e2 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004680:	b2db      	uxtb	r3, r3
 8004682:	2b21      	cmp	r3, #33	; 0x21
 8004684:	d109      	bne.n	800469a <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800468a:	b2db      	uxtb	r3, r3
 800468c:	461a      	mov	r2, r3
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004696:	611a      	str	r2, [r3, #16]
 8004698:	e008      	b.n	80046ac <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800469e:	b2db      	uxtb	r3, r3
 80046a0:	f043 0301 	orr.w	r3, r3, #1
 80046a4:	b2da      	uxtb	r2, r3
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d004      	beq.n	80046be <I2C_Master_SB+0x92>
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d108      	bne.n	80046d0 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d032      	beq.n	800472c <I2C_Master_SB+0x100>
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d02d      	beq.n	800472c <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	685a      	ldr	r2, [r3, #4]
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80046de:	605a      	str	r2, [r3, #4]
}
 80046e0:	e024      	b.n	800472c <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d10e      	bne.n	8004708 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046ee:	b29b      	uxth	r3, r3
 80046f0:	11db      	asrs	r3, r3, #7
 80046f2:	b2db      	uxtb	r3, r3
 80046f4:	f003 0306 	and.w	r3, r3, #6
 80046f8:	b2db      	uxtb	r3, r3
 80046fa:	f063 030f 	orn	r3, r3, #15
 80046fe:	b2da      	uxtb	r2, r3
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	611a      	str	r2, [r3, #16]
}
 8004706:	e011      	b.n	800472c <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800470c:	2b01      	cmp	r3, #1
 800470e:	d10d      	bne.n	800472c <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004714:	b29b      	uxth	r3, r3
 8004716:	11db      	asrs	r3, r3, #7
 8004718:	b2db      	uxtb	r3, r3
 800471a:	f003 0306 	and.w	r3, r3, #6
 800471e:	b2db      	uxtb	r3, r3
 8004720:	f063 030e 	orn	r3, r3, #14
 8004724:	b2da      	uxtb	r2, r3
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	611a      	str	r2, [r3, #16]
}
 800472c:	bf00      	nop
 800472e:	370c      	adds	r7, #12
 8004730:	46bd      	mov	sp, r7
 8004732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004736:	4770      	bx	lr

08004738 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8004738:	b480      	push	{r7}
 800473a:	b083      	sub	sp, #12
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004744:	b2da      	uxtb	r2, r3
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004750:	2b00      	cmp	r3, #0
 8004752:	d004      	beq.n	800475e <I2C_Master_ADD10+0x26>
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004758:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800475a:	2b00      	cmp	r3, #0
 800475c:	d108      	bne.n	8004770 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004762:	2b00      	cmp	r3, #0
 8004764:	d00c      	beq.n	8004780 <I2C_Master_ADD10+0x48>
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800476a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800476c:	2b00      	cmp	r3, #0
 800476e:	d007      	beq.n	8004780 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	685a      	ldr	r2, [r3, #4]
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800477e:	605a      	str	r2, [r3, #4]
  }
}
 8004780:	bf00      	nop
 8004782:	370c      	adds	r7, #12
 8004784:	46bd      	mov	sp, r7
 8004786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478a:	4770      	bx	lr

0800478c <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800478c:	b480      	push	{r7}
 800478e:	b091      	sub	sp, #68	; 0x44
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800479a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047a2:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047a8:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047b0:	b2db      	uxtb	r3, r3
 80047b2:	2b22      	cmp	r3, #34	; 0x22
 80047b4:	f040 8169 	bne.w	8004a8a <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d10f      	bne.n	80047e0 <I2C_Master_ADDR+0x54>
 80047c0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80047c4:	2b40      	cmp	r3, #64	; 0x40
 80047c6:	d10b      	bne.n	80047e0 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80047c8:	2300      	movs	r3, #0
 80047ca:	633b      	str	r3, [r7, #48]	; 0x30
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	695b      	ldr	r3, [r3, #20]
 80047d2:	633b      	str	r3, [r7, #48]	; 0x30
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	699b      	ldr	r3, [r3, #24]
 80047da:	633b      	str	r3, [r7, #48]	; 0x30
 80047dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047de:	e160      	b.n	8004aa2 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d11d      	bne.n	8004824 <I2C_Master_ADDR+0x98>
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	691b      	ldr	r3, [r3, #16]
 80047ec:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80047f0:	d118      	bne.n	8004824 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80047f2:	2300      	movs	r3, #0
 80047f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	695b      	ldr	r3, [r3, #20]
 80047fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	699b      	ldr	r3, [r3, #24]
 8004804:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004806:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	681a      	ldr	r2, [r3, #0]
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004816:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800481c:	1c5a      	adds	r2, r3, #1
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	651a      	str	r2, [r3, #80]	; 0x50
 8004822:	e13e      	b.n	8004aa2 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004828:	b29b      	uxth	r3, r3
 800482a:	2b00      	cmp	r3, #0
 800482c:	d113      	bne.n	8004856 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800482e:	2300      	movs	r3, #0
 8004830:	62bb      	str	r3, [r7, #40]	; 0x28
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	695b      	ldr	r3, [r3, #20]
 8004838:	62bb      	str	r3, [r7, #40]	; 0x28
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	699b      	ldr	r3, [r3, #24]
 8004840:	62bb      	str	r3, [r7, #40]	; 0x28
 8004842:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	681a      	ldr	r2, [r3, #0]
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004852:	601a      	str	r2, [r3, #0]
 8004854:	e115      	b.n	8004a82 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800485a:	b29b      	uxth	r3, r3
 800485c:	2b01      	cmp	r3, #1
 800485e:	f040 808a 	bne.w	8004976 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8004862:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004864:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004868:	d137      	bne.n	80048da <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	681a      	ldr	r2, [r3, #0]
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004878:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	685b      	ldr	r3, [r3, #4]
 8004880:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004884:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004888:	d113      	bne.n	80048b2 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	681a      	ldr	r2, [r3, #0]
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004898:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800489a:	2300      	movs	r3, #0
 800489c:	627b      	str	r3, [r7, #36]	; 0x24
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	695b      	ldr	r3, [r3, #20]
 80048a4:	627b      	str	r3, [r7, #36]	; 0x24
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	699b      	ldr	r3, [r3, #24]
 80048ac:	627b      	str	r3, [r7, #36]	; 0x24
 80048ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048b0:	e0e7      	b.n	8004a82 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80048b2:	2300      	movs	r3, #0
 80048b4:	623b      	str	r3, [r7, #32]
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	695b      	ldr	r3, [r3, #20]
 80048bc:	623b      	str	r3, [r7, #32]
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	699b      	ldr	r3, [r3, #24]
 80048c4:	623b      	str	r3, [r7, #32]
 80048c6:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	681a      	ldr	r2, [r3, #0]
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80048d6:	601a      	str	r2, [r3, #0]
 80048d8:	e0d3      	b.n	8004a82 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80048da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048dc:	2b08      	cmp	r3, #8
 80048de:	d02e      	beq.n	800493e <I2C_Master_ADDR+0x1b2>
 80048e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048e2:	2b20      	cmp	r3, #32
 80048e4:	d02b      	beq.n	800493e <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80048e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048e8:	2b12      	cmp	r3, #18
 80048ea:	d102      	bne.n	80048f2 <I2C_Master_ADDR+0x166>
 80048ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048ee:	2b01      	cmp	r3, #1
 80048f0:	d125      	bne.n	800493e <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80048f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048f4:	2b04      	cmp	r3, #4
 80048f6:	d00e      	beq.n	8004916 <I2C_Master_ADDR+0x18a>
 80048f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048fa:	2b02      	cmp	r3, #2
 80048fc:	d00b      	beq.n	8004916 <I2C_Master_ADDR+0x18a>
 80048fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004900:	2b10      	cmp	r3, #16
 8004902:	d008      	beq.n	8004916 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	681a      	ldr	r2, [r3, #0]
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004912:	601a      	str	r2, [r3, #0]
 8004914:	e007      	b.n	8004926 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	681a      	ldr	r2, [r3, #0]
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004924:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004926:	2300      	movs	r3, #0
 8004928:	61fb      	str	r3, [r7, #28]
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	695b      	ldr	r3, [r3, #20]
 8004930:	61fb      	str	r3, [r7, #28]
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	699b      	ldr	r3, [r3, #24]
 8004938:	61fb      	str	r3, [r7, #28]
 800493a:	69fb      	ldr	r3, [r7, #28]
 800493c:	e0a1      	b.n	8004a82 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	681a      	ldr	r2, [r3, #0]
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800494c:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800494e:	2300      	movs	r3, #0
 8004950:	61bb      	str	r3, [r7, #24]
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	695b      	ldr	r3, [r3, #20]
 8004958:	61bb      	str	r3, [r7, #24]
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	699b      	ldr	r3, [r3, #24]
 8004960:	61bb      	str	r3, [r7, #24]
 8004962:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	681a      	ldr	r2, [r3, #0]
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004972:	601a      	str	r2, [r3, #0]
 8004974:	e085      	b.n	8004a82 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800497a:	b29b      	uxth	r3, r3
 800497c:	2b02      	cmp	r3, #2
 800497e:	d14d      	bne.n	8004a1c <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004980:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004982:	2b04      	cmp	r3, #4
 8004984:	d016      	beq.n	80049b4 <I2C_Master_ADDR+0x228>
 8004986:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004988:	2b02      	cmp	r3, #2
 800498a:	d013      	beq.n	80049b4 <I2C_Master_ADDR+0x228>
 800498c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800498e:	2b10      	cmp	r3, #16
 8004990:	d010      	beq.n	80049b4 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	681a      	ldr	r2, [r3, #0]
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80049a0:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	681a      	ldr	r2, [r3, #0]
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80049b0:	601a      	str	r2, [r3, #0]
 80049b2:	e007      	b.n	80049c4 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	681a      	ldr	r2, [r3, #0]
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80049c2:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	685b      	ldr	r3, [r3, #4]
 80049ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80049ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80049d2:	d117      	bne.n	8004a04 <I2C_Master_ADDR+0x278>
 80049d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049d6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80049da:	d00b      	beq.n	80049f4 <I2C_Master_ADDR+0x268>
 80049dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049de:	2b01      	cmp	r3, #1
 80049e0:	d008      	beq.n	80049f4 <I2C_Master_ADDR+0x268>
 80049e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049e4:	2b08      	cmp	r3, #8
 80049e6:	d005      	beq.n	80049f4 <I2C_Master_ADDR+0x268>
 80049e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049ea:	2b10      	cmp	r3, #16
 80049ec:	d002      	beq.n	80049f4 <I2C_Master_ADDR+0x268>
 80049ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049f0:	2b20      	cmp	r3, #32
 80049f2:	d107      	bne.n	8004a04 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	685a      	ldr	r2, [r3, #4]
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004a02:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a04:	2300      	movs	r3, #0
 8004a06:	617b      	str	r3, [r7, #20]
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	695b      	ldr	r3, [r3, #20]
 8004a0e:	617b      	str	r3, [r7, #20]
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	699b      	ldr	r3, [r3, #24]
 8004a16:	617b      	str	r3, [r7, #20]
 8004a18:	697b      	ldr	r3, [r7, #20]
 8004a1a:	e032      	b.n	8004a82 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	681a      	ldr	r2, [r3, #0]
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004a2a:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	685b      	ldr	r3, [r3, #4]
 8004a32:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a36:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a3a:	d117      	bne.n	8004a6c <I2C_Master_ADDR+0x2e0>
 8004a3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a3e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004a42:	d00b      	beq.n	8004a5c <I2C_Master_ADDR+0x2d0>
 8004a44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a46:	2b01      	cmp	r3, #1
 8004a48:	d008      	beq.n	8004a5c <I2C_Master_ADDR+0x2d0>
 8004a4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a4c:	2b08      	cmp	r3, #8
 8004a4e:	d005      	beq.n	8004a5c <I2C_Master_ADDR+0x2d0>
 8004a50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a52:	2b10      	cmp	r3, #16
 8004a54:	d002      	beq.n	8004a5c <I2C_Master_ADDR+0x2d0>
 8004a56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a58:	2b20      	cmp	r3, #32
 8004a5a:	d107      	bne.n	8004a6c <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	685a      	ldr	r2, [r3, #4]
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004a6a:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a6c:	2300      	movs	r3, #0
 8004a6e:	613b      	str	r3, [r7, #16]
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	695b      	ldr	r3, [r3, #20]
 8004a76:	613b      	str	r3, [r7, #16]
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	699b      	ldr	r3, [r3, #24]
 8004a7e:	613b      	str	r3, [r7, #16]
 8004a80:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	2200      	movs	r2, #0
 8004a86:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8004a88:	e00b      	b.n	8004aa2 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	60fb      	str	r3, [r7, #12]
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	695b      	ldr	r3, [r3, #20]
 8004a94:	60fb      	str	r3, [r7, #12]
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	699b      	ldr	r3, [r3, #24]
 8004a9c:	60fb      	str	r3, [r7, #12]
 8004a9e:	68fb      	ldr	r3, [r7, #12]
}
 8004aa0:	e7ff      	b.n	8004aa2 <I2C_Master_ADDR+0x316>
 8004aa2:	bf00      	nop
 8004aa4:	3744      	adds	r7, #68	; 0x44
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aac:	4770      	bx	lr

08004aae <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004aae:	b580      	push	{r7, lr}
 8004ab0:	b084      	sub	sp, #16
 8004ab2:	af00      	add	r7, sp, #0
 8004ab4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004abc:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ac2:	b29b      	uxth	r3, r3
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d02b      	beq.n	8004b20 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004acc:	781a      	ldrb	r2, [r3, #0]
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ad8:	1c5a      	adds	r2, r3, #1
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ae2:	b29b      	uxth	r3, r3
 8004ae4:	3b01      	subs	r3, #1
 8004ae6:	b29a      	uxth	r2, r3
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004af0:	b29b      	uxth	r3, r3
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d114      	bne.n	8004b20 <I2C_SlaveTransmit_TXE+0x72>
 8004af6:	7bfb      	ldrb	r3, [r7, #15]
 8004af8:	2b29      	cmp	r3, #41	; 0x29
 8004afa:	d111      	bne.n	8004b20 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	685a      	ldr	r2, [r3, #4]
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b0a:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2221      	movs	r2, #33	; 0x21
 8004b10:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	2228      	movs	r2, #40	; 0x28
 8004b16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004b1a:	6878      	ldr	r0, [r7, #4]
 8004b1c:	f7ff f9e7 	bl	8003eee <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004b20:	bf00      	nop
 8004b22:	3710      	adds	r7, #16
 8004b24:	46bd      	mov	sp, r7
 8004b26:	bd80      	pop	{r7, pc}

08004b28 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004b28:	b480      	push	{r7}
 8004b2a:	b083      	sub	sp, #12
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b34:	b29b      	uxth	r3, r3
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d011      	beq.n	8004b5e <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b3e:	781a      	ldrb	r2, [r3, #0]
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b4a:	1c5a      	adds	r2, r3, #1
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b54:	b29b      	uxth	r3, r3
 8004b56:	3b01      	subs	r3, #1
 8004b58:	b29a      	uxth	r2, r3
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8004b5e:	bf00      	nop
 8004b60:	370c      	adds	r7, #12
 8004b62:	46bd      	mov	sp, r7
 8004b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b68:	4770      	bx	lr

08004b6a <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004b6a:	b580      	push	{r7, lr}
 8004b6c:	b084      	sub	sp, #16
 8004b6e:	af00      	add	r7, sp, #0
 8004b70:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b78:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b7e:	b29b      	uxth	r3, r3
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d02c      	beq.n	8004bde <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	691a      	ldr	r2, [r3, #16]
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b8e:	b2d2      	uxtb	r2, r2
 8004b90:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b96:	1c5a      	adds	r2, r3, #1
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ba0:	b29b      	uxth	r3, r3
 8004ba2:	3b01      	subs	r3, #1
 8004ba4:	b29a      	uxth	r2, r3
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bae:	b29b      	uxth	r3, r3
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d114      	bne.n	8004bde <I2C_SlaveReceive_RXNE+0x74>
 8004bb4:	7bfb      	ldrb	r3, [r7, #15]
 8004bb6:	2b2a      	cmp	r3, #42	; 0x2a
 8004bb8:	d111      	bne.n	8004bde <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	685a      	ldr	r2, [r3, #4]
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004bc8:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	2222      	movs	r2, #34	; 0x22
 8004bce:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2228      	movs	r2, #40	; 0x28
 8004bd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004bd8:	6878      	ldr	r0, [r7, #4]
 8004bda:	f7ff f992 	bl	8003f02 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004bde:	bf00      	nop
 8004be0:	3710      	adds	r7, #16
 8004be2:	46bd      	mov	sp, r7
 8004be4:	bd80      	pop	{r7, pc}

08004be6 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004be6:	b480      	push	{r7}
 8004be8:	b083      	sub	sp, #12
 8004bea:	af00      	add	r7, sp, #0
 8004bec:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bf2:	b29b      	uxth	r3, r3
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d012      	beq.n	8004c1e <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	691a      	ldr	r2, [r3, #16]
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c02:	b2d2      	uxtb	r2, r2
 8004c04:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c0a:	1c5a      	adds	r2, r3, #1
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c14:	b29b      	uxth	r3, r3
 8004c16:	3b01      	subs	r3, #1
 8004c18:	b29a      	uxth	r2, r3
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8004c1e:	bf00      	nop
 8004c20:	370c      	adds	r7, #12
 8004c22:	46bd      	mov	sp, r7
 8004c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c28:	4770      	bx	lr

08004c2a <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8004c2a:	b580      	push	{r7, lr}
 8004c2c:	b084      	sub	sp, #16
 8004c2e:	af00      	add	r7, sp, #0
 8004c30:	6078      	str	r0, [r7, #4]
 8004c32:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8004c34:	2300      	movs	r3, #0
 8004c36:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c3e:	b2db      	uxtb	r3, r3
 8004c40:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004c44:	2b28      	cmp	r3, #40	; 0x28
 8004c46:	d127      	bne.n	8004c98 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	685a      	ldr	r2, [r3, #4]
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c56:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	089b      	lsrs	r3, r3, #2
 8004c5c:	f003 0301 	and.w	r3, r3, #1
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d101      	bne.n	8004c68 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8004c64:	2301      	movs	r3, #1
 8004c66:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	09db      	lsrs	r3, r3, #7
 8004c6c:	f003 0301 	and.w	r3, r3, #1
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d103      	bne.n	8004c7c <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	68db      	ldr	r3, [r3, #12]
 8004c78:	81bb      	strh	r3, [r7, #12]
 8004c7a:	e002      	b.n	8004c82 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	699b      	ldr	r3, [r3, #24]
 8004c80:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	2200      	movs	r2, #0
 8004c86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8004c8a:	89ba      	ldrh	r2, [r7, #12]
 8004c8c:	7bfb      	ldrb	r3, [r7, #15]
 8004c8e:	4619      	mov	r1, r3
 8004c90:	6878      	ldr	r0, [r7, #4]
 8004c92:	f7ff f940 	bl	8003f16 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004c96:	e00e      	b.n	8004cb6 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c98:	2300      	movs	r3, #0
 8004c9a:	60bb      	str	r3, [r7, #8]
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	695b      	ldr	r3, [r3, #20]
 8004ca2:	60bb      	str	r3, [r7, #8]
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	699b      	ldr	r3, [r3, #24]
 8004caa:	60bb      	str	r3, [r7, #8]
 8004cac:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8004cb6:	bf00      	nop
 8004cb8:	3710      	adds	r7, #16
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	bd80      	pop	{r7, pc}
	...

08004cc0 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	b084      	sub	sp, #16
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cce:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	685a      	ldr	r2, [r3, #4]
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004cde:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8004ce0:	2300      	movs	r3, #0
 8004ce2:	60bb      	str	r3, [r7, #8]
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	695b      	ldr	r3, [r3, #20]
 8004cea:	60bb      	str	r3, [r7, #8]
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	681a      	ldr	r2, [r3, #0]
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f042 0201 	orr.w	r2, r2, #1
 8004cfa:	601a      	str	r2, [r3, #0]
 8004cfc:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	681a      	ldr	r2, [r3, #0]
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d0c:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	685b      	ldr	r3, [r3, #4]
 8004d14:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d18:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d1c:	d172      	bne.n	8004e04 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004d1e:	7bfb      	ldrb	r3, [r7, #15]
 8004d20:	2b22      	cmp	r3, #34	; 0x22
 8004d22:	d002      	beq.n	8004d2a <I2C_Slave_STOPF+0x6a>
 8004d24:	7bfb      	ldrb	r3, [r7, #15]
 8004d26:	2b2a      	cmp	r3, #42	; 0x2a
 8004d28:	d135      	bne.n	8004d96 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	685b      	ldr	r3, [r3, #4]
 8004d32:	b29a      	uxth	r2, r3
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d3c:	b29b      	uxth	r3, r3
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d005      	beq.n	8004d4e <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d46:	f043 0204 	orr.w	r2, r3, #4
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	685a      	ldr	r2, [r3, #4]
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004d5c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d62:	4618      	mov	r0, r3
 8004d64:	f7fe fb32 	bl	80033cc <HAL_DMA_GetState>
 8004d68:	4603      	mov	r3, r0
 8004d6a:	2b01      	cmp	r3, #1
 8004d6c:	d049      	beq.n	8004e02 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d72:	4a69      	ldr	r2, [pc, #420]	; (8004f18 <I2C_Slave_STOPF+0x258>)
 8004d74:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	f7fe f97a 	bl	8003074 <HAL_DMA_Abort_IT>
 8004d80:	4603      	mov	r3, r0
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d03d      	beq.n	8004e02 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d8c:	687a      	ldr	r2, [r7, #4]
 8004d8e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004d90:	4610      	mov	r0, r2
 8004d92:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004d94:	e035      	b.n	8004e02 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	685b      	ldr	r3, [r3, #4]
 8004d9e:	b29a      	uxth	r2, r3
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004da8:	b29b      	uxth	r3, r3
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d005      	beq.n	8004dba <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004db2:	f043 0204 	orr.w	r2, r3, #4
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	685a      	ldr	r2, [r3, #4]
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004dc8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004dce:	4618      	mov	r0, r3
 8004dd0:	f7fe fafc 	bl	80033cc <HAL_DMA_GetState>
 8004dd4:	4603      	mov	r3, r0
 8004dd6:	2b01      	cmp	r3, #1
 8004dd8:	d014      	beq.n	8004e04 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004dde:	4a4e      	ldr	r2, [pc, #312]	; (8004f18 <I2C_Slave_STOPF+0x258>)
 8004de0:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004de6:	4618      	mov	r0, r3
 8004de8:	f7fe f944 	bl	8003074 <HAL_DMA_Abort_IT>
 8004dec:	4603      	mov	r3, r0
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d008      	beq.n	8004e04 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004df6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004df8:	687a      	ldr	r2, [r7, #4]
 8004dfa:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004dfc:	4610      	mov	r0, r2
 8004dfe:	4798      	blx	r3
 8004e00:	e000      	b.n	8004e04 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004e02:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e08:	b29b      	uxth	r3, r3
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d03e      	beq.n	8004e8c <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	695b      	ldr	r3, [r3, #20]
 8004e14:	f003 0304 	and.w	r3, r3, #4
 8004e18:	2b04      	cmp	r3, #4
 8004e1a:	d112      	bne.n	8004e42 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	691a      	ldr	r2, [r3, #16]
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e26:	b2d2      	uxtb	r2, r2
 8004e28:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e2e:	1c5a      	adds	r2, r3, #1
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e38:	b29b      	uxth	r3, r3
 8004e3a:	3b01      	subs	r3, #1
 8004e3c:	b29a      	uxth	r2, r3
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	695b      	ldr	r3, [r3, #20]
 8004e48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e4c:	2b40      	cmp	r3, #64	; 0x40
 8004e4e:	d112      	bne.n	8004e76 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	691a      	ldr	r2, [r3, #16]
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e5a:	b2d2      	uxtb	r2, r2
 8004e5c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e62:	1c5a      	adds	r2, r3, #1
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e6c:	b29b      	uxth	r3, r3
 8004e6e:	3b01      	subs	r3, #1
 8004e70:	b29a      	uxth	r2, r3
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e7a:	b29b      	uxth	r3, r3
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d005      	beq.n	8004e8c <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e84:	f043 0204 	orr.w	r2, r3, #4
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d003      	beq.n	8004e9c <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8004e94:	6878      	ldr	r0, [r7, #4]
 8004e96:	f000 f843 	bl	8004f20 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8004e9a:	e039      	b.n	8004f10 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004e9c:	7bfb      	ldrb	r3, [r7, #15]
 8004e9e:	2b2a      	cmp	r3, #42	; 0x2a
 8004ea0:	d109      	bne.n	8004eb6 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2228      	movs	r2, #40	; 0x28
 8004eac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004eb0:	6878      	ldr	r0, [r7, #4]
 8004eb2:	f7ff f826 	bl	8003f02 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ebc:	b2db      	uxtb	r3, r3
 8004ebe:	2b28      	cmp	r3, #40	; 0x28
 8004ec0:	d111      	bne.n	8004ee6 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	4a15      	ldr	r2, [pc, #84]	; (8004f1c <I2C_Slave_STOPF+0x25c>)
 8004ec6:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2200      	movs	r2, #0
 8004ecc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	2220      	movs	r2, #32
 8004ed2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	2200      	movs	r2, #0
 8004eda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8004ede:	6878      	ldr	r0, [r7, #4]
 8004ee0:	f7ff f827 	bl	8003f32 <HAL_I2C_ListenCpltCallback>
}
 8004ee4:	e014      	b.n	8004f10 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eea:	2b22      	cmp	r3, #34	; 0x22
 8004eec:	d002      	beq.n	8004ef4 <I2C_Slave_STOPF+0x234>
 8004eee:	7bfb      	ldrb	r3, [r7, #15]
 8004ef0:	2b22      	cmp	r3, #34	; 0x22
 8004ef2:	d10d      	bne.n	8004f10 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	2220      	movs	r2, #32
 8004efe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	2200      	movs	r2, #0
 8004f06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004f0a:	6878      	ldr	r0, [r7, #4]
 8004f0c:	f7fe fff9 	bl	8003f02 <HAL_I2C_SlaveRxCpltCallback>
}
 8004f10:	bf00      	nop
 8004f12:	3710      	adds	r7, #16
 8004f14:	46bd      	mov	sp, r7
 8004f16:	bd80      	pop	{r7, pc}
 8004f18:	08005185 	.word	0x08005185
 8004f1c:	ffff0000 	.word	0xffff0000

08004f20 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8004f20:	b580      	push	{r7, lr}
 8004f22:	b084      	sub	sp, #16
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f2e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004f36:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004f38:	7bbb      	ldrb	r3, [r7, #14]
 8004f3a:	2b10      	cmp	r3, #16
 8004f3c:	d002      	beq.n	8004f44 <I2C_ITError+0x24>
 8004f3e:	7bbb      	ldrb	r3, [r7, #14]
 8004f40:	2b40      	cmp	r3, #64	; 0x40
 8004f42:	d10a      	bne.n	8004f5a <I2C_ITError+0x3a>
 8004f44:	7bfb      	ldrb	r3, [r7, #15]
 8004f46:	2b22      	cmp	r3, #34	; 0x22
 8004f48:	d107      	bne.n	8004f5a <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	681a      	ldr	r2, [r3, #0]
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004f58:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004f5a:	7bfb      	ldrb	r3, [r7, #15]
 8004f5c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004f60:	2b28      	cmp	r3, #40	; 0x28
 8004f62:	d107      	bne.n	8004f74 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2200      	movs	r2, #0
 8004f68:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	2228      	movs	r2, #40	; 0x28
 8004f6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004f72:	e015      	b.n	8004fa0 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	685b      	ldr	r3, [r3, #4]
 8004f7a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f7e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f82:	d00a      	beq.n	8004f9a <I2C_ITError+0x7a>
 8004f84:	7bfb      	ldrb	r3, [r7, #15]
 8004f86:	2b60      	cmp	r3, #96	; 0x60
 8004f88:	d007      	beq.n	8004f9a <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	2220      	movs	r2, #32
 8004f8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	2200      	movs	r2, #0
 8004f96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	685b      	ldr	r3, [r3, #4]
 8004fa6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004faa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004fae:	d162      	bne.n	8005076 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	685a      	ldr	r2, [r3, #4]
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004fbe:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fc4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004fc8:	b2db      	uxtb	r3, r3
 8004fca:	2b01      	cmp	r3, #1
 8004fcc:	d020      	beq.n	8005010 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fd2:	4a6a      	ldr	r2, [pc, #424]	; (800517c <I2C_ITError+0x25c>)
 8004fd4:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fda:	4618      	mov	r0, r3
 8004fdc:	f7fe f84a 	bl	8003074 <HAL_DMA_Abort_IT>
 8004fe0:	4603      	mov	r3, r0
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	f000 8089 	beq.w	80050fa <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	681a      	ldr	r2, [r3, #0]
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f022 0201 	bic.w	r2, r2, #1
 8004ff6:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2220      	movs	r2, #32
 8004ffc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005004:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005006:	687a      	ldr	r2, [r7, #4]
 8005008:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800500a:	4610      	mov	r0, r2
 800500c:	4798      	blx	r3
 800500e:	e074      	b.n	80050fa <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005014:	4a59      	ldr	r2, [pc, #356]	; (800517c <I2C_ITError+0x25c>)
 8005016:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800501c:	4618      	mov	r0, r3
 800501e:	f7fe f829 	bl	8003074 <HAL_DMA_Abort_IT>
 8005022:	4603      	mov	r3, r0
 8005024:	2b00      	cmp	r3, #0
 8005026:	d068      	beq.n	80050fa <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	695b      	ldr	r3, [r3, #20]
 800502e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005032:	2b40      	cmp	r3, #64	; 0x40
 8005034:	d10b      	bne.n	800504e <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	691a      	ldr	r2, [r3, #16]
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005040:	b2d2      	uxtb	r2, r2
 8005042:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005048:	1c5a      	adds	r2, r3, #1
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	681a      	ldr	r2, [r3, #0]
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f022 0201 	bic.w	r2, r2, #1
 800505c:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	2220      	movs	r2, #32
 8005062:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800506a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800506c:	687a      	ldr	r2, [r7, #4]
 800506e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005070:	4610      	mov	r0, r2
 8005072:	4798      	blx	r3
 8005074:	e041      	b.n	80050fa <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800507c:	b2db      	uxtb	r3, r3
 800507e:	2b60      	cmp	r3, #96	; 0x60
 8005080:	d125      	bne.n	80050ce <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	2220      	movs	r2, #32
 8005086:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2200      	movs	r2, #0
 800508e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	695b      	ldr	r3, [r3, #20]
 8005096:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800509a:	2b40      	cmp	r3, #64	; 0x40
 800509c:	d10b      	bne.n	80050b6 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	691a      	ldr	r2, [r3, #16]
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050a8:	b2d2      	uxtb	r2, r2
 80050aa:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050b0:	1c5a      	adds	r2, r3, #1
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	681a      	ldr	r2, [r3, #0]
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f022 0201 	bic.w	r2, r2, #1
 80050c4:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80050c6:	6878      	ldr	r0, [r7, #4]
 80050c8:	f7fe ff5b 	bl	8003f82 <HAL_I2C_AbortCpltCallback>
 80050cc:	e015      	b.n	80050fa <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	695b      	ldr	r3, [r3, #20]
 80050d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050d8:	2b40      	cmp	r3, #64	; 0x40
 80050da:	d10b      	bne.n	80050f4 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	691a      	ldr	r2, [r3, #16]
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050e6:	b2d2      	uxtb	r2, r2
 80050e8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ee:	1c5a      	adds	r2, r3, #1
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80050f4:	6878      	ldr	r0, [r7, #4]
 80050f6:	f7fe ff3a 	bl	8003f6e <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050fe:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005100:	68bb      	ldr	r3, [r7, #8]
 8005102:	f003 0301 	and.w	r3, r3, #1
 8005106:	2b00      	cmp	r3, #0
 8005108:	d10e      	bne.n	8005128 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800510a:	68bb      	ldr	r3, [r7, #8]
 800510c:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005110:	2b00      	cmp	r3, #0
 8005112:	d109      	bne.n	8005128 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005114:	68bb      	ldr	r3, [r7, #8]
 8005116:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800511a:	2b00      	cmp	r3, #0
 800511c:	d104      	bne.n	8005128 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800511e:	68bb      	ldr	r3, [r7, #8]
 8005120:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005124:	2b00      	cmp	r3, #0
 8005126:	d007      	beq.n	8005138 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	685a      	ldr	r2, [r3, #4]
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005136:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800513e:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005144:	f003 0304 	and.w	r3, r3, #4
 8005148:	2b04      	cmp	r3, #4
 800514a:	d113      	bne.n	8005174 <I2C_ITError+0x254>
 800514c:	7bfb      	ldrb	r3, [r7, #15]
 800514e:	2b28      	cmp	r3, #40	; 0x28
 8005150:	d110      	bne.n	8005174 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	4a0a      	ldr	r2, [pc, #40]	; (8005180 <I2C_ITError+0x260>)
 8005156:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2200      	movs	r2, #0
 800515c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	2220      	movs	r2, #32
 8005162:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	2200      	movs	r2, #0
 800516a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800516e:	6878      	ldr	r0, [r7, #4]
 8005170:	f7fe fedf 	bl	8003f32 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005174:	bf00      	nop
 8005176:	3710      	adds	r7, #16
 8005178:	46bd      	mov	sp, r7
 800517a:	bd80      	pop	{r7, pc}
 800517c:	08005185 	.word	0x08005185
 8005180:	ffff0000 	.word	0xffff0000

08005184 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005184:	b580      	push	{r7, lr}
 8005186:	b086      	sub	sp, #24
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800518c:	2300      	movs	r3, #0
 800518e:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005194:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005196:	697b      	ldr	r3, [r7, #20]
 8005198:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800519c:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800519e:	4b4b      	ldr	r3, [pc, #300]	; (80052cc <I2C_DMAAbort+0x148>)
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	08db      	lsrs	r3, r3, #3
 80051a4:	4a4a      	ldr	r2, [pc, #296]	; (80052d0 <I2C_DMAAbort+0x14c>)
 80051a6:	fba2 2303 	umull	r2, r3, r2, r3
 80051aa:	0a1a      	lsrs	r2, r3, #8
 80051ac:	4613      	mov	r3, r2
 80051ae:	009b      	lsls	r3, r3, #2
 80051b0:	4413      	add	r3, r2
 80051b2:	00da      	lsls	r2, r3, #3
 80051b4:	1ad3      	subs	r3, r2, r3
 80051b6:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d106      	bne.n	80051cc <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80051be:	697b      	ldr	r3, [r7, #20]
 80051c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051c2:	f043 0220 	orr.w	r2, r3, #32
 80051c6:	697b      	ldr	r3, [r7, #20]
 80051c8:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 80051ca:	e00a      	b.n	80051e2 <I2C_DMAAbort+0x5e>
    }
    count--;
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	3b01      	subs	r3, #1
 80051d0:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80051d2:	697b      	ldr	r3, [r7, #20]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80051dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80051e0:	d0ea      	beq.n	80051b8 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80051e2:	697b      	ldr	r3, [r7, #20]
 80051e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d003      	beq.n	80051f2 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80051ea:	697b      	ldr	r3, [r7, #20]
 80051ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051ee:	2200      	movs	r2, #0
 80051f0:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80051f2:	697b      	ldr	r3, [r7, #20]
 80051f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d003      	beq.n	8005202 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80051fa:	697b      	ldr	r3, [r7, #20]
 80051fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051fe:	2200      	movs	r2, #0
 8005200:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005202:	697b      	ldr	r3, [r7, #20]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	681a      	ldr	r2, [r3, #0]
 8005208:	697b      	ldr	r3, [r7, #20]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005210:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8005212:	697b      	ldr	r3, [r7, #20]
 8005214:	2200      	movs	r2, #0
 8005216:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8005218:	697b      	ldr	r3, [r7, #20]
 800521a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800521c:	2b00      	cmp	r3, #0
 800521e:	d003      	beq.n	8005228 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8005220:	697b      	ldr	r3, [r7, #20]
 8005222:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005224:	2200      	movs	r2, #0
 8005226:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8005228:	697b      	ldr	r3, [r7, #20]
 800522a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800522c:	2b00      	cmp	r3, #0
 800522e:	d003      	beq.n	8005238 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8005230:	697b      	ldr	r3, [r7, #20]
 8005232:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005234:	2200      	movs	r2, #0
 8005236:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8005238:	697b      	ldr	r3, [r7, #20]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	681a      	ldr	r2, [r3, #0]
 800523e:	697b      	ldr	r3, [r7, #20]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f022 0201 	bic.w	r2, r2, #1
 8005246:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005248:	697b      	ldr	r3, [r7, #20]
 800524a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800524e:	b2db      	uxtb	r3, r3
 8005250:	2b60      	cmp	r3, #96	; 0x60
 8005252:	d10e      	bne.n	8005272 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8005254:	697b      	ldr	r3, [r7, #20]
 8005256:	2220      	movs	r2, #32
 8005258:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800525c:	697b      	ldr	r3, [r7, #20]
 800525e:	2200      	movs	r2, #0
 8005260:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8005264:	697b      	ldr	r3, [r7, #20]
 8005266:	2200      	movs	r2, #0
 8005268:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800526a:	6978      	ldr	r0, [r7, #20]
 800526c:	f7fe fe89 	bl	8003f82 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005270:	e027      	b.n	80052c2 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005272:	7cfb      	ldrb	r3, [r7, #19]
 8005274:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005278:	2b28      	cmp	r3, #40	; 0x28
 800527a:	d117      	bne.n	80052ac <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 800527c:	697b      	ldr	r3, [r7, #20]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	681a      	ldr	r2, [r3, #0]
 8005282:	697b      	ldr	r3, [r7, #20]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f042 0201 	orr.w	r2, r2, #1
 800528a:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800528c:	697b      	ldr	r3, [r7, #20]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	681a      	ldr	r2, [r3, #0]
 8005292:	697b      	ldr	r3, [r7, #20]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800529a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800529c:	697b      	ldr	r3, [r7, #20]
 800529e:	2200      	movs	r2, #0
 80052a0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80052a2:	697b      	ldr	r3, [r7, #20]
 80052a4:	2228      	movs	r2, #40	; 0x28
 80052a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80052aa:	e007      	b.n	80052bc <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80052ac:	697b      	ldr	r3, [r7, #20]
 80052ae:	2220      	movs	r2, #32
 80052b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80052b4:	697b      	ldr	r3, [r7, #20]
 80052b6:	2200      	movs	r2, #0
 80052b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80052bc:	6978      	ldr	r0, [r7, #20]
 80052be:	f7fe fe56 	bl	8003f6e <HAL_I2C_ErrorCallback>
}
 80052c2:	bf00      	nop
 80052c4:	3718      	adds	r7, #24
 80052c6:	46bd      	mov	sp, r7
 80052c8:	bd80      	pop	{r7, pc}
 80052ca:	bf00      	nop
 80052cc:	20000000 	.word	0x20000000
 80052d0:	14f8b589 	.word	0x14f8b589

080052d4 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80052d4:	b480      	push	{r7}
 80052d6:	b085      	sub	sp, #20
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80052dc:	2300      	movs	r3, #0
 80052de:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80052e0:	4b13      	ldr	r3, [pc, #76]	; (8005330 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	08db      	lsrs	r3, r3, #3
 80052e6:	4a13      	ldr	r2, [pc, #76]	; (8005334 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80052e8:	fba2 2303 	umull	r2, r3, r2, r3
 80052ec:	0a1a      	lsrs	r2, r3, #8
 80052ee:	4613      	mov	r3, r2
 80052f0:	009b      	lsls	r3, r3, #2
 80052f2:	4413      	add	r3, r2
 80052f4:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	3b01      	subs	r3, #1
 80052fa:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d107      	bne.n	8005312 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005306:	f043 0220 	orr.w	r2, r3, #32
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800530e:	2301      	movs	r3, #1
 8005310:	e008      	b.n	8005324 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800531c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005320:	d0e9      	beq.n	80052f6 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8005322:	2300      	movs	r3, #0
}
 8005324:	4618      	mov	r0, r3
 8005326:	3714      	adds	r7, #20
 8005328:	46bd      	mov	sp, r7
 800532a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532e:	4770      	bx	lr
 8005330:	20000000 	.word	0x20000000
 8005334:	14f8b589 	.word	0x14f8b589

08005338 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8005338:	b480      	push	{r7}
 800533a:	b083      	sub	sp, #12
 800533c:	af00      	add	r7, sp, #0
 800533e:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005344:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8005348:	d103      	bne.n	8005352 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	2201      	movs	r2, #1
 800534e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8005350:	e007      	b.n	8005362 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005356:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800535a:	d102      	bne.n	8005362 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2208      	movs	r2, #8
 8005360:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8005362:	bf00      	nop
 8005364:	370c      	adds	r7, #12
 8005366:	46bd      	mov	sp, r7
 8005368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536c:	4770      	bx	lr
	...

08005370 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005370:	b580      	push	{r7, lr}
 8005372:	b086      	sub	sp, #24
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2b00      	cmp	r3, #0
 800537c:	d101      	bne.n	8005382 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800537e:	2301      	movs	r3, #1
 8005380:	e267      	b.n	8005852 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f003 0301 	and.w	r3, r3, #1
 800538a:	2b00      	cmp	r3, #0
 800538c:	d075      	beq.n	800547a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800538e:	4b88      	ldr	r3, [pc, #544]	; (80055b0 <HAL_RCC_OscConfig+0x240>)
 8005390:	689b      	ldr	r3, [r3, #8]
 8005392:	f003 030c 	and.w	r3, r3, #12
 8005396:	2b04      	cmp	r3, #4
 8005398:	d00c      	beq.n	80053b4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800539a:	4b85      	ldr	r3, [pc, #532]	; (80055b0 <HAL_RCC_OscConfig+0x240>)
 800539c:	689b      	ldr	r3, [r3, #8]
 800539e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80053a2:	2b08      	cmp	r3, #8
 80053a4:	d112      	bne.n	80053cc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80053a6:	4b82      	ldr	r3, [pc, #520]	; (80055b0 <HAL_RCC_OscConfig+0x240>)
 80053a8:	685b      	ldr	r3, [r3, #4]
 80053aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80053ae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80053b2:	d10b      	bne.n	80053cc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80053b4:	4b7e      	ldr	r3, [pc, #504]	; (80055b0 <HAL_RCC_OscConfig+0x240>)
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d05b      	beq.n	8005478 <HAL_RCC_OscConfig+0x108>
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	685b      	ldr	r3, [r3, #4]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d157      	bne.n	8005478 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80053c8:	2301      	movs	r3, #1
 80053ca:	e242      	b.n	8005852 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	685b      	ldr	r3, [r3, #4]
 80053d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80053d4:	d106      	bne.n	80053e4 <HAL_RCC_OscConfig+0x74>
 80053d6:	4b76      	ldr	r3, [pc, #472]	; (80055b0 <HAL_RCC_OscConfig+0x240>)
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	4a75      	ldr	r2, [pc, #468]	; (80055b0 <HAL_RCC_OscConfig+0x240>)
 80053dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80053e0:	6013      	str	r3, [r2, #0]
 80053e2:	e01d      	b.n	8005420 <HAL_RCC_OscConfig+0xb0>
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	685b      	ldr	r3, [r3, #4]
 80053e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80053ec:	d10c      	bne.n	8005408 <HAL_RCC_OscConfig+0x98>
 80053ee:	4b70      	ldr	r3, [pc, #448]	; (80055b0 <HAL_RCC_OscConfig+0x240>)
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	4a6f      	ldr	r2, [pc, #444]	; (80055b0 <HAL_RCC_OscConfig+0x240>)
 80053f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80053f8:	6013      	str	r3, [r2, #0]
 80053fa:	4b6d      	ldr	r3, [pc, #436]	; (80055b0 <HAL_RCC_OscConfig+0x240>)
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	4a6c      	ldr	r2, [pc, #432]	; (80055b0 <HAL_RCC_OscConfig+0x240>)
 8005400:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005404:	6013      	str	r3, [r2, #0]
 8005406:	e00b      	b.n	8005420 <HAL_RCC_OscConfig+0xb0>
 8005408:	4b69      	ldr	r3, [pc, #420]	; (80055b0 <HAL_RCC_OscConfig+0x240>)
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	4a68      	ldr	r2, [pc, #416]	; (80055b0 <HAL_RCC_OscConfig+0x240>)
 800540e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005412:	6013      	str	r3, [r2, #0]
 8005414:	4b66      	ldr	r3, [pc, #408]	; (80055b0 <HAL_RCC_OscConfig+0x240>)
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	4a65      	ldr	r2, [pc, #404]	; (80055b0 <HAL_RCC_OscConfig+0x240>)
 800541a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800541e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	685b      	ldr	r3, [r3, #4]
 8005424:	2b00      	cmp	r3, #0
 8005426:	d013      	beq.n	8005450 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005428:	f7fc fc9e 	bl	8001d68 <HAL_GetTick>
 800542c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800542e:	e008      	b.n	8005442 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005430:	f7fc fc9a 	bl	8001d68 <HAL_GetTick>
 8005434:	4602      	mov	r2, r0
 8005436:	693b      	ldr	r3, [r7, #16]
 8005438:	1ad3      	subs	r3, r2, r3
 800543a:	2b64      	cmp	r3, #100	; 0x64
 800543c:	d901      	bls.n	8005442 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800543e:	2303      	movs	r3, #3
 8005440:	e207      	b.n	8005852 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005442:	4b5b      	ldr	r3, [pc, #364]	; (80055b0 <HAL_RCC_OscConfig+0x240>)
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800544a:	2b00      	cmp	r3, #0
 800544c:	d0f0      	beq.n	8005430 <HAL_RCC_OscConfig+0xc0>
 800544e:	e014      	b.n	800547a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005450:	f7fc fc8a 	bl	8001d68 <HAL_GetTick>
 8005454:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005456:	e008      	b.n	800546a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005458:	f7fc fc86 	bl	8001d68 <HAL_GetTick>
 800545c:	4602      	mov	r2, r0
 800545e:	693b      	ldr	r3, [r7, #16]
 8005460:	1ad3      	subs	r3, r2, r3
 8005462:	2b64      	cmp	r3, #100	; 0x64
 8005464:	d901      	bls.n	800546a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005466:	2303      	movs	r3, #3
 8005468:	e1f3      	b.n	8005852 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800546a:	4b51      	ldr	r3, [pc, #324]	; (80055b0 <HAL_RCC_OscConfig+0x240>)
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005472:	2b00      	cmp	r3, #0
 8005474:	d1f0      	bne.n	8005458 <HAL_RCC_OscConfig+0xe8>
 8005476:	e000      	b.n	800547a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005478:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f003 0302 	and.w	r3, r3, #2
 8005482:	2b00      	cmp	r3, #0
 8005484:	d063      	beq.n	800554e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005486:	4b4a      	ldr	r3, [pc, #296]	; (80055b0 <HAL_RCC_OscConfig+0x240>)
 8005488:	689b      	ldr	r3, [r3, #8]
 800548a:	f003 030c 	and.w	r3, r3, #12
 800548e:	2b00      	cmp	r3, #0
 8005490:	d00b      	beq.n	80054aa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005492:	4b47      	ldr	r3, [pc, #284]	; (80055b0 <HAL_RCC_OscConfig+0x240>)
 8005494:	689b      	ldr	r3, [r3, #8]
 8005496:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800549a:	2b08      	cmp	r3, #8
 800549c:	d11c      	bne.n	80054d8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800549e:	4b44      	ldr	r3, [pc, #272]	; (80055b0 <HAL_RCC_OscConfig+0x240>)
 80054a0:	685b      	ldr	r3, [r3, #4]
 80054a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d116      	bne.n	80054d8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80054aa:	4b41      	ldr	r3, [pc, #260]	; (80055b0 <HAL_RCC_OscConfig+0x240>)
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f003 0302 	and.w	r3, r3, #2
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d005      	beq.n	80054c2 <HAL_RCC_OscConfig+0x152>
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	68db      	ldr	r3, [r3, #12]
 80054ba:	2b01      	cmp	r3, #1
 80054bc:	d001      	beq.n	80054c2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80054be:	2301      	movs	r3, #1
 80054c0:	e1c7      	b.n	8005852 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80054c2:	4b3b      	ldr	r3, [pc, #236]	; (80055b0 <HAL_RCC_OscConfig+0x240>)
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	691b      	ldr	r3, [r3, #16]
 80054ce:	00db      	lsls	r3, r3, #3
 80054d0:	4937      	ldr	r1, [pc, #220]	; (80055b0 <HAL_RCC_OscConfig+0x240>)
 80054d2:	4313      	orrs	r3, r2
 80054d4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80054d6:	e03a      	b.n	800554e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	68db      	ldr	r3, [r3, #12]
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d020      	beq.n	8005522 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80054e0:	4b34      	ldr	r3, [pc, #208]	; (80055b4 <HAL_RCC_OscConfig+0x244>)
 80054e2:	2201      	movs	r2, #1
 80054e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054e6:	f7fc fc3f 	bl	8001d68 <HAL_GetTick>
 80054ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80054ec:	e008      	b.n	8005500 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80054ee:	f7fc fc3b 	bl	8001d68 <HAL_GetTick>
 80054f2:	4602      	mov	r2, r0
 80054f4:	693b      	ldr	r3, [r7, #16]
 80054f6:	1ad3      	subs	r3, r2, r3
 80054f8:	2b02      	cmp	r3, #2
 80054fa:	d901      	bls.n	8005500 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80054fc:	2303      	movs	r3, #3
 80054fe:	e1a8      	b.n	8005852 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005500:	4b2b      	ldr	r3, [pc, #172]	; (80055b0 <HAL_RCC_OscConfig+0x240>)
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f003 0302 	and.w	r3, r3, #2
 8005508:	2b00      	cmp	r3, #0
 800550a:	d0f0      	beq.n	80054ee <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800550c:	4b28      	ldr	r3, [pc, #160]	; (80055b0 <HAL_RCC_OscConfig+0x240>)
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	691b      	ldr	r3, [r3, #16]
 8005518:	00db      	lsls	r3, r3, #3
 800551a:	4925      	ldr	r1, [pc, #148]	; (80055b0 <HAL_RCC_OscConfig+0x240>)
 800551c:	4313      	orrs	r3, r2
 800551e:	600b      	str	r3, [r1, #0]
 8005520:	e015      	b.n	800554e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005522:	4b24      	ldr	r3, [pc, #144]	; (80055b4 <HAL_RCC_OscConfig+0x244>)
 8005524:	2200      	movs	r2, #0
 8005526:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005528:	f7fc fc1e 	bl	8001d68 <HAL_GetTick>
 800552c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800552e:	e008      	b.n	8005542 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005530:	f7fc fc1a 	bl	8001d68 <HAL_GetTick>
 8005534:	4602      	mov	r2, r0
 8005536:	693b      	ldr	r3, [r7, #16]
 8005538:	1ad3      	subs	r3, r2, r3
 800553a:	2b02      	cmp	r3, #2
 800553c:	d901      	bls.n	8005542 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800553e:	2303      	movs	r3, #3
 8005540:	e187      	b.n	8005852 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005542:	4b1b      	ldr	r3, [pc, #108]	; (80055b0 <HAL_RCC_OscConfig+0x240>)
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f003 0302 	and.w	r3, r3, #2
 800554a:	2b00      	cmp	r3, #0
 800554c:	d1f0      	bne.n	8005530 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f003 0308 	and.w	r3, r3, #8
 8005556:	2b00      	cmp	r3, #0
 8005558:	d036      	beq.n	80055c8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	695b      	ldr	r3, [r3, #20]
 800555e:	2b00      	cmp	r3, #0
 8005560:	d016      	beq.n	8005590 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005562:	4b15      	ldr	r3, [pc, #84]	; (80055b8 <HAL_RCC_OscConfig+0x248>)
 8005564:	2201      	movs	r2, #1
 8005566:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005568:	f7fc fbfe 	bl	8001d68 <HAL_GetTick>
 800556c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800556e:	e008      	b.n	8005582 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005570:	f7fc fbfa 	bl	8001d68 <HAL_GetTick>
 8005574:	4602      	mov	r2, r0
 8005576:	693b      	ldr	r3, [r7, #16]
 8005578:	1ad3      	subs	r3, r2, r3
 800557a:	2b02      	cmp	r3, #2
 800557c:	d901      	bls.n	8005582 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800557e:	2303      	movs	r3, #3
 8005580:	e167      	b.n	8005852 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005582:	4b0b      	ldr	r3, [pc, #44]	; (80055b0 <HAL_RCC_OscConfig+0x240>)
 8005584:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005586:	f003 0302 	and.w	r3, r3, #2
 800558a:	2b00      	cmp	r3, #0
 800558c:	d0f0      	beq.n	8005570 <HAL_RCC_OscConfig+0x200>
 800558e:	e01b      	b.n	80055c8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005590:	4b09      	ldr	r3, [pc, #36]	; (80055b8 <HAL_RCC_OscConfig+0x248>)
 8005592:	2200      	movs	r2, #0
 8005594:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005596:	f7fc fbe7 	bl	8001d68 <HAL_GetTick>
 800559a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800559c:	e00e      	b.n	80055bc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800559e:	f7fc fbe3 	bl	8001d68 <HAL_GetTick>
 80055a2:	4602      	mov	r2, r0
 80055a4:	693b      	ldr	r3, [r7, #16]
 80055a6:	1ad3      	subs	r3, r2, r3
 80055a8:	2b02      	cmp	r3, #2
 80055aa:	d907      	bls.n	80055bc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80055ac:	2303      	movs	r3, #3
 80055ae:	e150      	b.n	8005852 <HAL_RCC_OscConfig+0x4e2>
 80055b0:	40023800 	.word	0x40023800
 80055b4:	42470000 	.word	0x42470000
 80055b8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80055bc:	4b88      	ldr	r3, [pc, #544]	; (80057e0 <HAL_RCC_OscConfig+0x470>)
 80055be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80055c0:	f003 0302 	and.w	r3, r3, #2
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d1ea      	bne.n	800559e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f003 0304 	and.w	r3, r3, #4
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	f000 8097 	beq.w	8005704 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80055d6:	2300      	movs	r3, #0
 80055d8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80055da:	4b81      	ldr	r3, [pc, #516]	; (80057e0 <HAL_RCC_OscConfig+0x470>)
 80055dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d10f      	bne.n	8005606 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80055e6:	2300      	movs	r3, #0
 80055e8:	60bb      	str	r3, [r7, #8]
 80055ea:	4b7d      	ldr	r3, [pc, #500]	; (80057e0 <HAL_RCC_OscConfig+0x470>)
 80055ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055ee:	4a7c      	ldr	r2, [pc, #496]	; (80057e0 <HAL_RCC_OscConfig+0x470>)
 80055f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80055f4:	6413      	str	r3, [r2, #64]	; 0x40
 80055f6:	4b7a      	ldr	r3, [pc, #488]	; (80057e0 <HAL_RCC_OscConfig+0x470>)
 80055f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055fe:	60bb      	str	r3, [r7, #8]
 8005600:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005602:	2301      	movs	r3, #1
 8005604:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005606:	4b77      	ldr	r3, [pc, #476]	; (80057e4 <HAL_RCC_OscConfig+0x474>)
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800560e:	2b00      	cmp	r3, #0
 8005610:	d118      	bne.n	8005644 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005612:	4b74      	ldr	r3, [pc, #464]	; (80057e4 <HAL_RCC_OscConfig+0x474>)
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	4a73      	ldr	r2, [pc, #460]	; (80057e4 <HAL_RCC_OscConfig+0x474>)
 8005618:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800561c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800561e:	f7fc fba3 	bl	8001d68 <HAL_GetTick>
 8005622:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005624:	e008      	b.n	8005638 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005626:	f7fc fb9f 	bl	8001d68 <HAL_GetTick>
 800562a:	4602      	mov	r2, r0
 800562c:	693b      	ldr	r3, [r7, #16]
 800562e:	1ad3      	subs	r3, r2, r3
 8005630:	2b02      	cmp	r3, #2
 8005632:	d901      	bls.n	8005638 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005634:	2303      	movs	r3, #3
 8005636:	e10c      	b.n	8005852 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005638:	4b6a      	ldr	r3, [pc, #424]	; (80057e4 <HAL_RCC_OscConfig+0x474>)
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005640:	2b00      	cmp	r3, #0
 8005642:	d0f0      	beq.n	8005626 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	689b      	ldr	r3, [r3, #8]
 8005648:	2b01      	cmp	r3, #1
 800564a:	d106      	bne.n	800565a <HAL_RCC_OscConfig+0x2ea>
 800564c:	4b64      	ldr	r3, [pc, #400]	; (80057e0 <HAL_RCC_OscConfig+0x470>)
 800564e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005650:	4a63      	ldr	r2, [pc, #396]	; (80057e0 <HAL_RCC_OscConfig+0x470>)
 8005652:	f043 0301 	orr.w	r3, r3, #1
 8005656:	6713      	str	r3, [r2, #112]	; 0x70
 8005658:	e01c      	b.n	8005694 <HAL_RCC_OscConfig+0x324>
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	689b      	ldr	r3, [r3, #8]
 800565e:	2b05      	cmp	r3, #5
 8005660:	d10c      	bne.n	800567c <HAL_RCC_OscConfig+0x30c>
 8005662:	4b5f      	ldr	r3, [pc, #380]	; (80057e0 <HAL_RCC_OscConfig+0x470>)
 8005664:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005666:	4a5e      	ldr	r2, [pc, #376]	; (80057e0 <HAL_RCC_OscConfig+0x470>)
 8005668:	f043 0304 	orr.w	r3, r3, #4
 800566c:	6713      	str	r3, [r2, #112]	; 0x70
 800566e:	4b5c      	ldr	r3, [pc, #368]	; (80057e0 <HAL_RCC_OscConfig+0x470>)
 8005670:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005672:	4a5b      	ldr	r2, [pc, #364]	; (80057e0 <HAL_RCC_OscConfig+0x470>)
 8005674:	f043 0301 	orr.w	r3, r3, #1
 8005678:	6713      	str	r3, [r2, #112]	; 0x70
 800567a:	e00b      	b.n	8005694 <HAL_RCC_OscConfig+0x324>
 800567c:	4b58      	ldr	r3, [pc, #352]	; (80057e0 <HAL_RCC_OscConfig+0x470>)
 800567e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005680:	4a57      	ldr	r2, [pc, #348]	; (80057e0 <HAL_RCC_OscConfig+0x470>)
 8005682:	f023 0301 	bic.w	r3, r3, #1
 8005686:	6713      	str	r3, [r2, #112]	; 0x70
 8005688:	4b55      	ldr	r3, [pc, #340]	; (80057e0 <HAL_RCC_OscConfig+0x470>)
 800568a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800568c:	4a54      	ldr	r2, [pc, #336]	; (80057e0 <HAL_RCC_OscConfig+0x470>)
 800568e:	f023 0304 	bic.w	r3, r3, #4
 8005692:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	689b      	ldr	r3, [r3, #8]
 8005698:	2b00      	cmp	r3, #0
 800569a:	d015      	beq.n	80056c8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800569c:	f7fc fb64 	bl	8001d68 <HAL_GetTick>
 80056a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80056a2:	e00a      	b.n	80056ba <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80056a4:	f7fc fb60 	bl	8001d68 <HAL_GetTick>
 80056a8:	4602      	mov	r2, r0
 80056aa:	693b      	ldr	r3, [r7, #16]
 80056ac:	1ad3      	subs	r3, r2, r3
 80056ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80056b2:	4293      	cmp	r3, r2
 80056b4:	d901      	bls.n	80056ba <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80056b6:	2303      	movs	r3, #3
 80056b8:	e0cb      	b.n	8005852 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80056ba:	4b49      	ldr	r3, [pc, #292]	; (80057e0 <HAL_RCC_OscConfig+0x470>)
 80056bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056be:	f003 0302 	and.w	r3, r3, #2
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d0ee      	beq.n	80056a4 <HAL_RCC_OscConfig+0x334>
 80056c6:	e014      	b.n	80056f2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80056c8:	f7fc fb4e 	bl	8001d68 <HAL_GetTick>
 80056cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80056ce:	e00a      	b.n	80056e6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80056d0:	f7fc fb4a 	bl	8001d68 <HAL_GetTick>
 80056d4:	4602      	mov	r2, r0
 80056d6:	693b      	ldr	r3, [r7, #16]
 80056d8:	1ad3      	subs	r3, r2, r3
 80056da:	f241 3288 	movw	r2, #5000	; 0x1388
 80056de:	4293      	cmp	r3, r2
 80056e0:	d901      	bls.n	80056e6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80056e2:	2303      	movs	r3, #3
 80056e4:	e0b5      	b.n	8005852 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80056e6:	4b3e      	ldr	r3, [pc, #248]	; (80057e0 <HAL_RCC_OscConfig+0x470>)
 80056e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056ea:	f003 0302 	and.w	r3, r3, #2
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d1ee      	bne.n	80056d0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80056f2:	7dfb      	ldrb	r3, [r7, #23]
 80056f4:	2b01      	cmp	r3, #1
 80056f6:	d105      	bne.n	8005704 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80056f8:	4b39      	ldr	r3, [pc, #228]	; (80057e0 <HAL_RCC_OscConfig+0x470>)
 80056fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056fc:	4a38      	ldr	r2, [pc, #224]	; (80057e0 <HAL_RCC_OscConfig+0x470>)
 80056fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005702:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	699b      	ldr	r3, [r3, #24]
 8005708:	2b00      	cmp	r3, #0
 800570a:	f000 80a1 	beq.w	8005850 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800570e:	4b34      	ldr	r3, [pc, #208]	; (80057e0 <HAL_RCC_OscConfig+0x470>)
 8005710:	689b      	ldr	r3, [r3, #8]
 8005712:	f003 030c 	and.w	r3, r3, #12
 8005716:	2b08      	cmp	r3, #8
 8005718:	d05c      	beq.n	80057d4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	699b      	ldr	r3, [r3, #24]
 800571e:	2b02      	cmp	r3, #2
 8005720:	d141      	bne.n	80057a6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005722:	4b31      	ldr	r3, [pc, #196]	; (80057e8 <HAL_RCC_OscConfig+0x478>)
 8005724:	2200      	movs	r2, #0
 8005726:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005728:	f7fc fb1e 	bl	8001d68 <HAL_GetTick>
 800572c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800572e:	e008      	b.n	8005742 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005730:	f7fc fb1a 	bl	8001d68 <HAL_GetTick>
 8005734:	4602      	mov	r2, r0
 8005736:	693b      	ldr	r3, [r7, #16]
 8005738:	1ad3      	subs	r3, r2, r3
 800573a:	2b02      	cmp	r3, #2
 800573c:	d901      	bls.n	8005742 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800573e:	2303      	movs	r3, #3
 8005740:	e087      	b.n	8005852 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005742:	4b27      	ldr	r3, [pc, #156]	; (80057e0 <HAL_RCC_OscConfig+0x470>)
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800574a:	2b00      	cmp	r3, #0
 800574c:	d1f0      	bne.n	8005730 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	69da      	ldr	r2, [r3, #28]
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	6a1b      	ldr	r3, [r3, #32]
 8005756:	431a      	orrs	r2, r3
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800575c:	019b      	lsls	r3, r3, #6
 800575e:	431a      	orrs	r2, r3
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005764:	085b      	lsrs	r3, r3, #1
 8005766:	3b01      	subs	r3, #1
 8005768:	041b      	lsls	r3, r3, #16
 800576a:	431a      	orrs	r2, r3
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005770:	061b      	lsls	r3, r3, #24
 8005772:	491b      	ldr	r1, [pc, #108]	; (80057e0 <HAL_RCC_OscConfig+0x470>)
 8005774:	4313      	orrs	r3, r2
 8005776:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005778:	4b1b      	ldr	r3, [pc, #108]	; (80057e8 <HAL_RCC_OscConfig+0x478>)
 800577a:	2201      	movs	r2, #1
 800577c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800577e:	f7fc faf3 	bl	8001d68 <HAL_GetTick>
 8005782:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005784:	e008      	b.n	8005798 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005786:	f7fc faef 	bl	8001d68 <HAL_GetTick>
 800578a:	4602      	mov	r2, r0
 800578c:	693b      	ldr	r3, [r7, #16]
 800578e:	1ad3      	subs	r3, r2, r3
 8005790:	2b02      	cmp	r3, #2
 8005792:	d901      	bls.n	8005798 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005794:	2303      	movs	r3, #3
 8005796:	e05c      	b.n	8005852 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005798:	4b11      	ldr	r3, [pc, #68]	; (80057e0 <HAL_RCC_OscConfig+0x470>)
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d0f0      	beq.n	8005786 <HAL_RCC_OscConfig+0x416>
 80057a4:	e054      	b.n	8005850 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80057a6:	4b10      	ldr	r3, [pc, #64]	; (80057e8 <HAL_RCC_OscConfig+0x478>)
 80057a8:	2200      	movs	r2, #0
 80057aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057ac:	f7fc fadc 	bl	8001d68 <HAL_GetTick>
 80057b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80057b2:	e008      	b.n	80057c6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80057b4:	f7fc fad8 	bl	8001d68 <HAL_GetTick>
 80057b8:	4602      	mov	r2, r0
 80057ba:	693b      	ldr	r3, [r7, #16]
 80057bc:	1ad3      	subs	r3, r2, r3
 80057be:	2b02      	cmp	r3, #2
 80057c0:	d901      	bls.n	80057c6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80057c2:	2303      	movs	r3, #3
 80057c4:	e045      	b.n	8005852 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80057c6:	4b06      	ldr	r3, [pc, #24]	; (80057e0 <HAL_RCC_OscConfig+0x470>)
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d1f0      	bne.n	80057b4 <HAL_RCC_OscConfig+0x444>
 80057d2:	e03d      	b.n	8005850 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	699b      	ldr	r3, [r3, #24]
 80057d8:	2b01      	cmp	r3, #1
 80057da:	d107      	bne.n	80057ec <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80057dc:	2301      	movs	r3, #1
 80057de:	e038      	b.n	8005852 <HAL_RCC_OscConfig+0x4e2>
 80057e0:	40023800 	.word	0x40023800
 80057e4:	40007000 	.word	0x40007000
 80057e8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80057ec:	4b1b      	ldr	r3, [pc, #108]	; (800585c <HAL_RCC_OscConfig+0x4ec>)
 80057ee:	685b      	ldr	r3, [r3, #4]
 80057f0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	699b      	ldr	r3, [r3, #24]
 80057f6:	2b01      	cmp	r3, #1
 80057f8:	d028      	beq.n	800584c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005804:	429a      	cmp	r2, r3
 8005806:	d121      	bne.n	800584c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005812:	429a      	cmp	r2, r3
 8005814:	d11a      	bne.n	800584c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005816:	68fa      	ldr	r2, [r7, #12]
 8005818:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800581c:	4013      	ands	r3, r2
 800581e:	687a      	ldr	r2, [r7, #4]
 8005820:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005822:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005824:	4293      	cmp	r3, r2
 8005826:	d111      	bne.n	800584c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005832:	085b      	lsrs	r3, r3, #1
 8005834:	3b01      	subs	r3, #1
 8005836:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005838:	429a      	cmp	r2, r3
 800583a:	d107      	bne.n	800584c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005846:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005848:	429a      	cmp	r2, r3
 800584a:	d001      	beq.n	8005850 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800584c:	2301      	movs	r3, #1
 800584e:	e000      	b.n	8005852 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005850:	2300      	movs	r3, #0
}
 8005852:	4618      	mov	r0, r3
 8005854:	3718      	adds	r7, #24
 8005856:	46bd      	mov	sp, r7
 8005858:	bd80      	pop	{r7, pc}
 800585a:	bf00      	nop
 800585c:	40023800 	.word	0x40023800

08005860 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005860:	b580      	push	{r7, lr}
 8005862:	b084      	sub	sp, #16
 8005864:	af00      	add	r7, sp, #0
 8005866:	6078      	str	r0, [r7, #4]
 8005868:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	2b00      	cmp	r3, #0
 800586e:	d101      	bne.n	8005874 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005870:	2301      	movs	r3, #1
 8005872:	e0cc      	b.n	8005a0e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005874:	4b68      	ldr	r3, [pc, #416]	; (8005a18 <HAL_RCC_ClockConfig+0x1b8>)
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f003 0307 	and.w	r3, r3, #7
 800587c:	683a      	ldr	r2, [r7, #0]
 800587e:	429a      	cmp	r2, r3
 8005880:	d90c      	bls.n	800589c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005882:	4b65      	ldr	r3, [pc, #404]	; (8005a18 <HAL_RCC_ClockConfig+0x1b8>)
 8005884:	683a      	ldr	r2, [r7, #0]
 8005886:	b2d2      	uxtb	r2, r2
 8005888:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800588a:	4b63      	ldr	r3, [pc, #396]	; (8005a18 <HAL_RCC_ClockConfig+0x1b8>)
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f003 0307 	and.w	r3, r3, #7
 8005892:	683a      	ldr	r2, [r7, #0]
 8005894:	429a      	cmp	r2, r3
 8005896:	d001      	beq.n	800589c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005898:	2301      	movs	r3, #1
 800589a:	e0b8      	b.n	8005a0e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f003 0302 	and.w	r3, r3, #2
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d020      	beq.n	80058ea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f003 0304 	and.w	r3, r3, #4
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d005      	beq.n	80058c0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80058b4:	4b59      	ldr	r3, [pc, #356]	; (8005a1c <HAL_RCC_ClockConfig+0x1bc>)
 80058b6:	689b      	ldr	r3, [r3, #8]
 80058b8:	4a58      	ldr	r2, [pc, #352]	; (8005a1c <HAL_RCC_ClockConfig+0x1bc>)
 80058ba:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80058be:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f003 0308 	and.w	r3, r3, #8
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d005      	beq.n	80058d8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80058cc:	4b53      	ldr	r3, [pc, #332]	; (8005a1c <HAL_RCC_ClockConfig+0x1bc>)
 80058ce:	689b      	ldr	r3, [r3, #8]
 80058d0:	4a52      	ldr	r2, [pc, #328]	; (8005a1c <HAL_RCC_ClockConfig+0x1bc>)
 80058d2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80058d6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80058d8:	4b50      	ldr	r3, [pc, #320]	; (8005a1c <HAL_RCC_ClockConfig+0x1bc>)
 80058da:	689b      	ldr	r3, [r3, #8]
 80058dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	689b      	ldr	r3, [r3, #8]
 80058e4:	494d      	ldr	r1, [pc, #308]	; (8005a1c <HAL_RCC_ClockConfig+0x1bc>)
 80058e6:	4313      	orrs	r3, r2
 80058e8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f003 0301 	and.w	r3, r3, #1
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d044      	beq.n	8005980 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	685b      	ldr	r3, [r3, #4]
 80058fa:	2b01      	cmp	r3, #1
 80058fc:	d107      	bne.n	800590e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80058fe:	4b47      	ldr	r3, [pc, #284]	; (8005a1c <HAL_RCC_ClockConfig+0x1bc>)
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005906:	2b00      	cmp	r3, #0
 8005908:	d119      	bne.n	800593e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800590a:	2301      	movs	r3, #1
 800590c:	e07f      	b.n	8005a0e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	685b      	ldr	r3, [r3, #4]
 8005912:	2b02      	cmp	r3, #2
 8005914:	d003      	beq.n	800591e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800591a:	2b03      	cmp	r3, #3
 800591c:	d107      	bne.n	800592e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800591e:	4b3f      	ldr	r3, [pc, #252]	; (8005a1c <HAL_RCC_ClockConfig+0x1bc>)
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005926:	2b00      	cmp	r3, #0
 8005928:	d109      	bne.n	800593e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800592a:	2301      	movs	r3, #1
 800592c:	e06f      	b.n	8005a0e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800592e:	4b3b      	ldr	r3, [pc, #236]	; (8005a1c <HAL_RCC_ClockConfig+0x1bc>)
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f003 0302 	and.w	r3, r3, #2
 8005936:	2b00      	cmp	r3, #0
 8005938:	d101      	bne.n	800593e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800593a:	2301      	movs	r3, #1
 800593c:	e067      	b.n	8005a0e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800593e:	4b37      	ldr	r3, [pc, #220]	; (8005a1c <HAL_RCC_ClockConfig+0x1bc>)
 8005940:	689b      	ldr	r3, [r3, #8]
 8005942:	f023 0203 	bic.w	r2, r3, #3
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	685b      	ldr	r3, [r3, #4]
 800594a:	4934      	ldr	r1, [pc, #208]	; (8005a1c <HAL_RCC_ClockConfig+0x1bc>)
 800594c:	4313      	orrs	r3, r2
 800594e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005950:	f7fc fa0a 	bl	8001d68 <HAL_GetTick>
 8005954:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005956:	e00a      	b.n	800596e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005958:	f7fc fa06 	bl	8001d68 <HAL_GetTick>
 800595c:	4602      	mov	r2, r0
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	1ad3      	subs	r3, r2, r3
 8005962:	f241 3288 	movw	r2, #5000	; 0x1388
 8005966:	4293      	cmp	r3, r2
 8005968:	d901      	bls.n	800596e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800596a:	2303      	movs	r3, #3
 800596c:	e04f      	b.n	8005a0e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800596e:	4b2b      	ldr	r3, [pc, #172]	; (8005a1c <HAL_RCC_ClockConfig+0x1bc>)
 8005970:	689b      	ldr	r3, [r3, #8]
 8005972:	f003 020c 	and.w	r2, r3, #12
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	685b      	ldr	r3, [r3, #4]
 800597a:	009b      	lsls	r3, r3, #2
 800597c:	429a      	cmp	r2, r3
 800597e:	d1eb      	bne.n	8005958 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005980:	4b25      	ldr	r3, [pc, #148]	; (8005a18 <HAL_RCC_ClockConfig+0x1b8>)
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f003 0307 	and.w	r3, r3, #7
 8005988:	683a      	ldr	r2, [r7, #0]
 800598a:	429a      	cmp	r2, r3
 800598c:	d20c      	bcs.n	80059a8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800598e:	4b22      	ldr	r3, [pc, #136]	; (8005a18 <HAL_RCC_ClockConfig+0x1b8>)
 8005990:	683a      	ldr	r2, [r7, #0]
 8005992:	b2d2      	uxtb	r2, r2
 8005994:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005996:	4b20      	ldr	r3, [pc, #128]	; (8005a18 <HAL_RCC_ClockConfig+0x1b8>)
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f003 0307 	and.w	r3, r3, #7
 800599e:	683a      	ldr	r2, [r7, #0]
 80059a0:	429a      	cmp	r2, r3
 80059a2:	d001      	beq.n	80059a8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80059a4:	2301      	movs	r3, #1
 80059a6:	e032      	b.n	8005a0e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	f003 0304 	and.w	r3, r3, #4
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d008      	beq.n	80059c6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80059b4:	4b19      	ldr	r3, [pc, #100]	; (8005a1c <HAL_RCC_ClockConfig+0x1bc>)
 80059b6:	689b      	ldr	r3, [r3, #8]
 80059b8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	68db      	ldr	r3, [r3, #12]
 80059c0:	4916      	ldr	r1, [pc, #88]	; (8005a1c <HAL_RCC_ClockConfig+0x1bc>)
 80059c2:	4313      	orrs	r3, r2
 80059c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f003 0308 	and.w	r3, r3, #8
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d009      	beq.n	80059e6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80059d2:	4b12      	ldr	r3, [pc, #72]	; (8005a1c <HAL_RCC_ClockConfig+0x1bc>)
 80059d4:	689b      	ldr	r3, [r3, #8]
 80059d6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	691b      	ldr	r3, [r3, #16]
 80059de:	00db      	lsls	r3, r3, #3
 80059e0:	490e      	ldr	r1, [pc, #56]	; (8005a1c <HAL_RCC_ClockConfig+0x1bc>)
 80059e2:	4313      	orrs	r3, r2
 80059e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80059e6:	f000 f82d 	bl	8005a44 <HAL_RCC_GetSysClockFreq>
 80059ea:	4602      	mov	r2, r0
 80059ec:	4b0b      	ldr	r3, [pc, #44]	; (8005a1c <HAL_RCC_ClockConfig+0x1bc>)
 80059ee:	689b      	ldr	r3, [r3, #8]
 80059f0:	091b      	lsrs	r3, r3, #4
 80059f2:	f003 030f 	and.w	r3, r3, #15
 80059f6:	490a      	ldr	r1, [pc, #40]	; (8005a20 <HAL_RCC_ClockConfig+0x1c0>)
 80059f8:	5ccb      	ldrb	r3, [r1, r3]
 80059fa:	fa22 f303 	lsr.w	r3, r2, r3
 80059fe:	4a09      	ldr	r2, [pc, #36]	; (8005a24 <HAL_RCC_ClockConfig+0x1c4>)
 8005a00:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005a02:	4b09      	ldr	r3, [pc, #36]	; (8005a28 <HAL_RCC_ClockConfig+0x1c8>)
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	4618      	mov	r0, r3
 8005a08:	f7fc f96a 	bl	8001ce0 <HAL_InitTick>

  return HAL_OK;
 8005a0c:	2300      	movs	r3, #0
}
 8005a0e:	4618      	mov	r0, r3
 8005a10:	3710      	adds	r7, #16
 8005a12:	46bd      	mov	sp, r7
 8005a14:	bd80      	pop	{r7, pc}
 8005a16:	bf00      	nop
 8005a18:	40023c00 	.word	0x40023c00
 8005a1c:	40023800 	.word	0x40023800
 8005a20:	0800e218 	.word	0x0800e218
 8005a24:	20000000 	.word	0x20000000
 8005a28:	20000004 	.word	0x20000004

08005a2c <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8005a2c:	b480      	push	{r7}
 8005a2e:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8005a30:	4b03      	ldr	r3, [pc, #12]	; (8005a40 <HAL_RCC_EnableCSS+0x14>)
 8005a32:	2201      	movs	r2, #1
 8005a34:	601a      	str	r2, [r3, #0]
}
 8005a36:	bf00      	nop
 8005a38:	46bd      	mov	sp, r7
 8005a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3e:	4770      	bx	lr
 8005a40:	4247004c 	.word	0x4247004c

08005a44 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005a44:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005a48:	b094      	sub	sp, #80	; 0x50
 8005a4a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005a4c:	2300      	movs	r3, #0
 8005a4e:	647b      	str	r3, [r7, #68]	; 0x44
 8005a50:	2300      	movs	r3, #0
 8005a52:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005a54:	2300      	movs	r3, #0
 8005a56:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005a58:	2300      	movs	r3, #0
 8005a5a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005a5c:	4b79      	ldr	r3, [pc, #484]	; (8005c44 <HAL_RCC_GetSysClockFreq+0x200>)
 8005a5e:	689b      	ldr	r3, [r3, #8]
 8005a60:	f003 030c 	and.w	r3, r3, #12
 8005a64:	2b08      	cmp	r3, #8
 8005a66:	d00d      	beq.n	8005a84 <HAL_RCC_GetSysClockFreq+0x40>
 8005a68:	2b08      	cmp	r3, #8
 8005a6a:	f200 80e1 	bhi.w	8005c30 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d002      	beq.n	8005a78 <HAL_RCC_GetSysClockFreq+0x34>
 8005a72:	2b04      	cmp	r3, #4
 8005a74:	d003      	beq.n	8005a7e <HAL_RCC_GetSysClockFreq+0x3a>
 8005a76:	e0db      	b.n	8005c30 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005a78:	4b73      	ldr	r3, [pc, #460]	; (8005c48 <HAL_RCC_GetSysClockFreq+0x204>)
 8005a7a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005a7c:	e0db      	b.n	8005c36 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005a7e:	4b73      	ldr	r3, [pc, #460]	; (8005c4c <HAL_RCC_GetSysClockFreq+0x208>)
 8005a80:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005a82:	e0d8      	b.n	8005c36 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005a84:	4b6f      	ldr	r3, [pc, #444]	; (8005c44 <HAL_RCC_GetSysClockFreq+0x200>)
 8005a86:	685b      	ldr	r3, [r3, #4]
 8005a88:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005a8c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005a8e:	4b6d      	ldr	r3, [pc, #436]	; (8005c44 <HAL_RCC_GetSysClockFreq+0x200>)
 8005a90:	685b      	ldr	r3, [r3, #4]
 8005a92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d063      	beq.n	8005b62 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005a9a:	4b6a      	ldr	r3, [pc, #424]	; (8005c44 <HAL_RCC_GetSysClockFreq+0x200>)
 8005a9c:	685b      	ldr	r3, [r3, #4]
 8005a9e:	099b      	lsrs	r3, r3, #6
 8005aa0:	2200      	movs	r2, #0
 8005aa2:	63bb      	str	r3, [r7, #56]	; 0x38
 8005aa4:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005aa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005aa8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005aac:	633b      	str	r3, [r7, #48]	; 0x30
 8005aae:	2300      	movs	r3, #0
 8005ab0:	637b      	str	r3, [r7, #52]	; 0x34
 8005ab2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005ab6:	4622      	mov	r2, r4
 8005ab8:	462b      	mov	r3, r5
 8005aba:	f04f 0000 	mov.w	r0, #0
 8005abe:	f04f 0100 	mov.w	r1, #0
 8005ac2:	0159      	lsls	r1, r3, #5
 8005ac4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005ac8:	0150      	lsls	r0, r2, #5
 8005aca:	4602      	mov	r2, r0
 8005acc:	460b      	mov	r3, r1
 8005ace:	4621      	mov	r1, r4
 8005ad0:	1a51      	subs	r1, r2, r1
 8005ad2:	6139      	str	r1, [r7, #16]
 8005ad4:	4629      	mov	r1, r5
 8005ad6:	eb63 0301 	sbc.w	r3, r3, r1
 8005ada:	617b      	str	r3, [r7, #20]
 8005adc:	f04f 0200 	mov.w	r2, #0
 8005ae0:	f04f 0300 	mov.w	r3, #0
 8005ae4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005ae8:	4659      	mov	r1, fp
 8005aea:	018b      	lsls	r3, r1, #6
 8005aec:	4651      	mov	r1, sl
 8005aee:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005af2:	4651      	mov	r1, sl
 8005af4:	018a      	lsls	r2, r1, #6
 8005af6:	4651      	mov	r1, sl
 8005af8:	ebb2 0801 	subs.w	r8, r2, r1
 8005afc:	4659      	mov	r1, fp
 8005afe:	eb63 0901 	sbc.w	r9, r3, r1
 8005b02:	f04f 0200 	mov.w	r2, #0
 8005b06:	f04f 0300 	mov.w	r3, #0
 8005b0a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005b0e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005b12:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005b16:	4690      	mov	r8, r2
 8005b18:	4699      	mov	r9, r3
 8005b1a:	4623      	mov	r3, r4
 8005b1c:	eb18 0303 	adds.w	r3, r8, r3
 8005b20:	60bb      	str	r3, [r7, #8]
 8005b22:	462b      	mov	r3, r5
 8005b24:	eb49 0303 	adc.w	r3, r9, r3
 8005b28:	60fb      	str	r3, [r7, #12]
 8005b2a:	f04f 0200 	mov.w	r2, #0
 8005b2e:	f04f 0300 	mov.w	r3, #0
 8005b32:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005b36:	4629      	mov	r1, r5
 8005b38:	024b      	lsls	r3, r1, #9
 8005b3a:	4621      	mov	r1, r4
 8005b3c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005b40:	4621      	mov	r1, r4
 8005b42:	024a      	lsls	r2, r1, #9
 8005b44:	4610      	mov	r0, r2
 8005b46:	4619      	mov	r1, r3
 8005b48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b4a:	2200      	movs	r2, #0
 8005b4c:	62bb      	str	r3, [r7, #40]	; 0x28
 8005b4e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005b50:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005b54:	f7fa fb94 	bl	8000280 <__aeabi_uldivmod>
 8005b58:	4602      	mov	r2, r0
 8005b5a:	460b      	mov	r3, r1
 8005b5c:	4613      	mov	r3, r2
 8005b5e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005b60:	e058      	b.n	8005c14 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005b62:	4b38      	ldr	r3, [pc, #224]	; (8005c44 <HAL_RCC_GetSysClockFreq+0x200>)
 8005b64:	685b      	ldr	r3, [r3, #4]
 8005b66:	099b      	lsrs	r3, r3, #6
 8005b68:	2200      	movs	r2, #0
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	4611      	mov	r1, r2
 8005b6e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005b72:	623b      	str	r3, [r7, #32]
 8005b74:	2300      	movs	r3, #0
 8005b76:	627b      	str	r3, [r7, #36]	; 0x24
 8005b78:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005b7c:	4642      	mov	r2, r8
 8005b7e:	464b      	mov	r3, r9
 8005b80:	f04f 0000 	mov.w	r0, #0
 8005b84:	f04f 0100 	mov.w	r1, #0
 8005b88:	0159      	lsls	r1, r3, #5
 8005b8a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005b8e:	0150      	lsls	r0, r2, #5
 8005b90:	4602      	mov	r2, r0
 8005b92:	460b      	mov	r3, r1
 8005b94:	4641      	mov	r1, r8
 8005b96:	ebb2 0a01 	subs.w	sl, r2, r1
 8005b9a:	4649      	mov	r1, r9
 8005b9c:	eb63 0b01 	sbc.w	fp, r3, r1
 8005ba0:	f04f 0200 	mov.w	r2, #0
 8005ba4:	f04f 0300 	mov.w	r3, #0
 8005ba8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005bac:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005bb0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005bb4:	ebb2 040a 	subs.w	r4, r2, sl
 8005bb8:	eb63 050b 	sbc.w	r5, r3, fp
 8005bbc:	f04f 0200 	mov.w	r2, #0
 8005bc0:	f04f 0300 	mov.w	r3, #0
 8005bc4:	00eb      	lsls	r3, r5, #3
 8005bc6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005bca:	00e2      	lsls	r2, r4, #3
 8005bcc:	4614      	mov	r4, r2
 8005bce:	461d      	mov	r5, r3
 8005bd0:	4643      	mov	r3, r8
 8005bd2:	18e3      	adds	r3, r4, r3
 8005bd4:	603b      	str	r3, [r7, #0]
 8005bd6:	464b      	mov	r3, r9
 8005bd8:	eb45 0303 	adc.w	r3, r5, r3
 8005bdc:	607b      	str	r3, [r7, #4]
 8005bde:	f04f 0200 	mov.w	r2, #0
 8005be2:	f04f 0300 	mov.w	r3, #0
 8005be6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005bea:	4629      	mov	r1, r5
 8005bec:	028b      	lsls	r3, r1, #10
 8005bee:	4621      	mov	r1, r4
 8005bf0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005bf4:	4621      	mov	r1, r4
 8005bf6:	028a      	lsls	r2, r1, #10
 8005bf8:	4610      	mov	r0, r2
 8005bfa:	4619      	mov	r1, r3
 8005bfc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005bfe:	2200      	movs	r2, #0
 8005c00:	61bb      	str	r3, [r7, #24]
 8005c02:	61fa      	str	r2, [r7, #28]
 8005c04:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005c08:	f7fa fb3a 	bl	8000280 <__aeabi_uldivmod>
 8005c0c:	4602      	mov	r2, r0
 8005c0e:	460b      	mov	r3, r1
 8005c10:	4613      	mov	r3, r2
 8005c12:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005c14:	4b0b      	ldr	r3, [pc, #44]	; (8005c44 <HAL_RCC_GetSysClockFreq+0x200>)
 8005c16:	685b      	ldr	r3, [r3, #4]
 8005c18:	0c1b      	lsrs	r3, r3, #16
 8005c1a:	f003 0303 	and.w	r3, r3, #3
 8005c1e:	3301      	adds	r3, #1
 8005c20:	005b      	lsls	r3, r3, #1
 8005c22:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005c24:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005c26:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c28:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c2c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005c2e:	e002      	b.n	8005c36 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005c30:	4b05      	ldr	r3, [pc, #20]	; (8005c48 <HAL_RCC_GetSysClockFreq+0x204>)
 8005c32:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005c34:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005c36:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005c38:	4618      	mov	r0, r3
 8005c3a:	3750      	adds	r7, #80	; 0x50
 8005c3c:	46bd      	mov	sp, r7
 8005c3e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005c42:	bf00      	nop
 8005c44:	40023800 	.word	0x40023800
 8005c48:	00f42400 	.word	0x00f42400
 8005c4c:	007a1200 	.word	0x007a1200

08005c50 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005c50:	b480      	push	{r7}
 8005c52:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005c54:	4b03      	ldr	r3, [pc, #12]	; (8005c64 <HAL_RCC_GetHCLKFreq+0x14>)
 8005c56:	681b      	ldr	r3, [r3, #0]
}
 8005c58:	4618      	mov	r0, r3
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c60:	4770      	bx	lr
 8005c62:	bf00      	nop
 8005c64:	20000000 	.word	0x20000000

08005c68 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005c68:	b580      	push	{r7, lr}
 8005c6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005c6c:	f7ff fff0 	bl	8005c50 <HAL_RCC_GetHCLKFreq>
 8005c70:	4602      	mov	r2, r0
 8005c72:	4b05      	ldr	r3, [pc, #20]	; (8005c88 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005c74:	689b      	ldr	r3, [r3, #8]
 8005c76:	0a9b      	lsrs	r3, r3, #10
 8005c78:	f003 0307 	and.w	r3, r3, #7
 8005c7c:	4903      	ldr	r1, [pc, #12]	; (8005c8c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005c7e:	5ccb      	ldrb	r3, [r1, r3]
 8005c80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005c84:	4618      	mov	r0, r3
 8005c86:	bd80      	pop	{r7, pc}
 8005c88:	40023800 	.word	0x40023800
 8005c8c:	0800e228 	.word	0x0800e228

08005c90 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005c90:	b580      	push	{r7, lr}
 8005c92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005c94:	f7ff ffdc 	bl	8005c50 <HAL_RCC_GetHCLKFreq>
 8005c98:	4602      	mov	r2, r0
 8005c9a:	4b05      	ldr	r3, [pc, #20]	; (8005cb0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005c9c:	689b      	ldr	r3, [r3, #8]
 8005c9e:	0b5b      	lsrs	r3, r3, #13
 8005ca0:	f003 0307 	and.w	r3, r3, #7
 8005ca4:	4903      	ldr	r1, [pc, #12]	; (8005cb4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005ca6:	5ccb      	ldrb	r3, [r1, r3]
 8005ca8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005cac:	4618      	mov	r0, r3
 8005cae:	bd80      	pop	{r7, pc}
 8005cb0:	40023800 	.word	0x40023800
 8005cb4:	0800e228 	.word	0x0800e228

08005cb8 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8005cb8:	b580      	push	{r7, lr}
 8005cba:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 8005cbc:	4b06      	ldr	r3, [pc, #24]	; (8005cd8 <HAL_RCC_NMI_IRQHandler+0x20>)
 8005cbe:	68db      	ldr	r3, [r3, #12]
 8005cc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cc4:	2b80      	cmp	r3, #128	; 0x80
 8005cc6:	d104      	bne.n	8005cd2 <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8005cc8:	f000 f80a 	bl	8005ce0 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8005ccc:	4b03      	ldr	r3, [pc, #12]	; (8005cdc <HAL_RCC_NMI_IRQHandler+0x24>)
 8005cce:	2280      	movs	r2, #128	; 0x80
 8005cd0:	701a      	strb	r2, [r3, #0]
  }
}
 8005cd2:	bf00      	nop
 8005cd4:	bd80      	pop	{r7, pc}
 8005cd6:	bf00      	nop
 8005cd8:	40023800 	.word	0x40023800
 8005cdc:	4002380e 	.word	0x4002380e

08005ce0 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8005ce0:	b480      	push	{r7}
 8005ce2:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 8005ce4:	bf00      	nop
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cec:	4770      	bx	lr
	...

08005cf0 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005cf0:	b580      	push	{r7, lr}
 8005cf2:	b086      	sub	sp, #24
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005cf8:	2300      	movs	r3, #0
 8005cfa:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005cfc:	2300      	movs	r3, #0
 8005cfe:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	f003 0301 	and.w	r3, r3, #1
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d105      	bne.n	8005d18 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d035      	beq.n	8005d84 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005d18:	4b62      	ldr	r3, [pc, #392]	; (8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8005d1a:	2200      	movs	r2, #0
 8005d1c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005d1e:	f7fc f823 	bl	8001d68 <HAL_GetTick>
 8005d22:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005d24:	e008      	b.n	8005d38 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005d26:	f7fc f81f 	bl	8001d68 <HAL_GetTick>
 8005d2a:	4602      	mov	r2, r0
 8005d2c:	697b      	ldr	r3, [r7, #20]
 8005d2e:	1ad3      	subs	r3, r2, r3
 8005d30:	2b02      	cmp	r3, #2
 8005d32:	d901      	bls.n	8005d38 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005d34:	2303      	movs	r3, #3
 8005d36:	e0b0      	b.n	8005e9a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005d38:	4b5b      	ldr	r3, [pc, #364]	; (8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d1f0      	bne.n	8005d26 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	685b      	ldr	r3, [r3, #4]
 8005d48:	019a      	lsls	r2, r3, #6
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	689b      	ldr	r3, [r3, #8]
 8005d4e:	071b      	lsls	r3, r3, #28
 8005d50:	4955      	ldr	r1, [pc, #340]	; (8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005d52:	4313      	orrs	r3, r2
 8005d54:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005d58:	4b52      	ldr	r3, [pc, #328]	; (8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8005d5a:	2201      	movs	r2, #1
 8005d5c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005d5e:	f7fc f803 	bl	8001d68 <HAL_GetTick>
 8005d62:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005d64:	e008      	b.n	8005d78 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005d66:	f7fb ffff 	bl	8001d68 <HAL_GetTick>
 8005d6a:	4602      	mov	r2, r0
 8005d6c:	697b      	ldr	r3, [r7, #20]
 8005d6e:	1ad3      	subs	r3, r2, r3
 8005d70:	2b02      	cmp	r3, #2
 8005d72:	d901      	bls.n	8005d78 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005d74:	2303      	movs	r3, #3
 8005d76:	e090      	b.n	8005e9a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005d78:	4b4b      	ldr	r3, [pc, #300]	; (8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d0f0      	beq.n	8005d66 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	f003 0302 	and.w	r3, r3, #2
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	f000 8083 	beq.w	8005e98 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005d92:	2300      	movs	r3, #0
 8005d94:	60fb      	str	r3, [r7, #12]
 8005d96:	4b44      	ldr	r3, [pc, #272]	; (8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d9a:	4a43      	ldr	r2, [pc, #268]	; (8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005d9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005da0:	6413      	str	r3, [r2, #64]	; 0x40
 8005da2:	4b41      	ldr	r3, [pc, #260]	; (8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005da6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005daa:	60fb      	str	r3, [r7, #12]
 8005dac:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005dae:	4b3f      	ldr	r3, [pc, #252]	; (8005eac <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	4a3e      	ldr	r2, [pc, #248]	; (8005eac <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005db4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005db8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005dba:	f7fb ffd5 	bl	8001d68 <HAL_GetTick>
 8005dbe:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005dc0:	e008      	b.n	8005dd4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005dc2:	f7fb ffd1 	bl	8001d68 <HAL_GetTick>
 8005dc6:	4602      	mov	r2, r0
 8005dc8:	697b      	ldr	r3, [r7, #20]
 8005dca:	1ad3      	subs	r3, r2, r3
 8005dcc:	2b02      	cmp	r3, #2
 8005dce:	d901      	bls.n	8005dd4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8005dd0:	2303      	movs	r3, #3
 8005dd2:	e062      	b.n	8005e9a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005dd4:	4b35      	ldr	r3, [pc, #212]	; (8005eac <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d0f0      	beq.n	8005dc2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005de0:	4b31      	ldr	r3, [pc, #196]	; (8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005de2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005de4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005de8:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005dea:	693b      	ldr	r3, [r7, #16]
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d02f      	beq.n	8005e50 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	68db      	ldr	r3, [r3, #12]
 8005df4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005df8:	693a      	ldr	r2, [r7, #16]
 8005dfa:	429a      	cmp	r2, r3
 8005dfc:	d028      	beq.n	8005e50 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005dfe:	4b2a      	ldr	r3, [pc, #168]	; (8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005e00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e02:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e06:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005e08:	4b29      	ldr	r3, [pc, #164]	; (8005eb0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005e0a:	2201      	movs	r2, #1
 8005e0c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005e0e:	4b28      	ldr	r3, [pc, #160]	; (8005eb0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005e10:	2200      	movs	r2, #0
 8005e12:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005e14:	4a24      	ldr	r2, [pc, #144]	; (8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005e16:	693b      	ldr	r3, [r7, #16]
 8005e18:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005e1a:	4b23      	ldr	r3, [pc, #140]	; (8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005e1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e1e:	f003 0301 	and.w	r3, r3, #1
 8005e22:	2b01      	cmp	r3, #1
 8005e24:	d114      	bne.n	8005e50 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005e26:	f7fb ff9f 	bl	8001d68 <HAL_GetTick>
 8005e2a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e2c:	e00a      	b.n	8005e44 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005e2e:	f7fb ff9b 	bl	8001d68 <HAL_GetTick>
 8005e32:	4602      	mov	r2, r0
 8005e34:	697b      	ldr	r3, [r7, #20]
 8005e36:	1ad3      	subs	r3, r2, r3
 8005e38:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e3c:	4293      	cmp	r3, r2
 8005e3e:	d901      	bls.n	8005e44 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8005e40:	2303      	movs	r3, #3
 8005e42:	e02a      	b.n	8005e9a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e44:	4b18      	ldr	r3, [pc, #96]	; (8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005e46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e48:	f003 0302 	and.w	r3, r3, #2
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d0ee      	beq.n	8005e2e <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	68db      	ldr	r3, [r3, #12]
 8005e54:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e58:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005e5c:	d10d      	bne.n	8005e7a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8005e5e:	4b12      	ldr	r3, [pc, #72]	; (8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005e60:	689b      	ldr	r3, [r3, #8]
 8005e62:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	68db      	ldr	r3, [r3, #12]
 8005e6a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005e6e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e72:	490d      	ldr	r1, [pc, #52]	; (8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005e74:	4313      	orrs	r3, r2
 8005e76:	608b      	str	r3, [r1, #8]
 8005e78:	e005      	b.n	8005e86 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8005e7a:	4b0b      	ldr	r3, [pc, #44]	; (8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005e7c:	689b      	ldr	r3, [r3, #8]
 8005e7e:	4a0a      	ldr	r2, [pc, #40]	; (8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005e80:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005e84:	6093      	str	r3, [r2, #8]
 8005e86:	4b08      	ldr	r3, [pc, #32]	; (8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005e88:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	68db      	ldr	r3, [r3, #12]
 8005e8e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005e92:	4905      	ldr	r1, [pc, #20]	; (8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005e94:	4313      	orrs	r3, r2
 8005e96:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8005e98:	2300      	movs	r3, #0
}
 8005e9a:	4618      	mov	r0, r3
 8005e9c:	3718      	adds	r7, #24
 8005e9e:	46bd      	mov	sp, r7
 8005ea0:	bd80      	pop	{r7, pc}
 8005ea2:	bf00      	nop
 8005ea4:	42470068 	.word	0x42470068
 8005ea8:	40023800 	.word	0x40023800
 8005eac:	40007000 	.word	0x40007000
 8005eb0:	42470e40 	.word	0x42470e40

08005eb4 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005eb4:	b580      	push	{r7, lr}
 8005eb6:	b084      	sub	sp, #16
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005ebc:	2301      	movs	r3, #1
 8005ebe:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d101      	bne.n	8005eca <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8005ec6:	2301      	movs	r3, #1
 8005ec8:	e066      	b.n	8005f98 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	7f5b      	ldrb	r3, [r3, #29]
 8005ece:	b2db      	uxtb	r3, r3
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d105      	bne.n	8005ee0 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8005eda:	6878      	ldr	r0, [r7, #4]
 8005edc:	f7fb f970 	bl	80011c0 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	2202      	movs	r2, #2
 8005ee4:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	22ca      	movs	r2, #202	; 0xca
 8005eec:	625a      	str	r2, [r3, #36]	; 0x24
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	2253      	movs	r2, #83	; 0x53
 8005ef4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005ef6:	6878      	ldr	r0, [r7, #4]
 8005ef8:	f000 fa45 	bl	8006386 <RTC_EnterInitMode>
 8005efc:	4603      	mov	r3, r0
 8005efe:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8005f00:	7bfb      	ldrb	r3, [r7, #15]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d12c      	bne.n	8005f60 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	689b      	ldr	r3, [r3, #8]
 8005f0c:	687a      	ldr	r2, [r7, #4]
 8005f0e:	6812      	ldr	r2, [r2, #0]
 8005f10:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005f14:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f18:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	6899      	ldr	r1, [r3, #8]
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	685a      	ldr	r2, [r3, #4]
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	691b      	ldr	r3, [r3, #16]
 8005f28:	431a      	orrs	r2, r3
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	695b      	ldr	r3, [r3, #20]
 8005f2e:	431a      	orrs	r2, r3
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	430a      	orrs	r2, r1
 8005f36:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	687a      	ldr	r2, [r7, #4]
 8005f3e:	68d2      	ldr	r2, [r2, #12]
 8005f40:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	6919      	ldr	r1, [r3, #16]
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	689b      	ldr	r3, [r3, #8]
 8005f4c:	041a      	lsls	r2, r3, #16
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	430a      	orrs	r2, r1
 8005f54:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005f56:	6878      	ldr	r0, [r7, #4]
 8005f58:	f000 fa4c 	bl	80063f4 <RTC_ExitInitMode>
 8005f5c:	4603      	mov	r3, r0
 8005f5e:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8005f60:	7bfb      	ldrb	r3, [r7, #15]
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d113      	bne.n	8005f8e <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005f74:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	699a      	ldr	r2, [r3, #24]
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	430a      	orrs	r2, r1
 8005f86:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	2201      	movs	r2, #1
 8005f8c:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	22ff      	movs	r2, #255	; 0xff
 8005f94:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 8005f96:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f98:	4618      	mov	r0, r3
 8005f9a:	3710      	adds	r7, #16
 8005f9c:	46bd      	mov	sp, r7
 8005f9e:	bd80      	pop	{r7, pc}

08005fa0 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005fa0:	b590      	push	{r4, r7, lr}
 8005fa2:	b087      	sub	sp, #28
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	60f8      	str	r0, [r7, #12]
 8005fa8:	60b9      	str	r1, [r7, #8]
 8005faa:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8005fac:	2300      	movs	r3, #0
 8005fae:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	7f1b      	ldrb	r3, [r3, #28]
 8005fb4:	2b01      	cmp	r3, #1
 8005fb6:	d101      	bne.n	8005fbc <HAL_RTC_SetTime+0x1c>
 8005fb8:	2302      	movs	r3, #2
 8005fba:	e087      	b.n	80060cc <HAL_RTC_SetTime+0x12c>
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	2201      	movs	r2, #1
 8005fc0:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	2202      	movs	r2, #2
 8005fc6:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d126      	bne.n	800601c <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	689b      	ldr	r3, [r3, #8]
 8005fd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d102      	bne.n	8005fe2 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005fdc:	68bb      	ldr	r3, [r7, #8]
 8005fde:	2200      	movs	r2, #0
 8005fe0:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005fe2:	68bb      	ldr	r3, [r7, #8]
 8005fe4:	781b      	ldrb	r3, [r3, #0]
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	f000 fa29 	bl	800643e <RTC_ByteToBcd2>
 8005fec:	4603      	mov	r3, r0
 8005fee:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005ff0:	68bb      	ldr	r3, [r7, #8]
 8005ff2:	785b      	ldrb	r3, [r3, #1]
 8005ff4:	4618      	mov	r0, r3
 8005ff6:	f000 fa22 	bl	800643e <RTC_ByteToBcd2>
 8005ffa:	4603      	mov	r3, r0
 8005ffc:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005ffe:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8006000:	68bb      	ldr	r3, [r7, #8]
 8006002:	789b      	ldrb	r3, [r3, #2]
 8006004:	4618      	mov	r0, r3
 8006006:	f000 fa1a 	bl	800643e <RTC_ByteToBcd2>
 800600a:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800600c:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8006010:	68bb      	ldr	r3, [r7, #8]
 8006012:	78db      	ldrb	r3, [r3, #3]
 8006014:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8006016:	4313      	orrs	r3, r2
 8006018:	617b      	str	r3, [r7, #20]
 800601a:	e018      	b.n	800604e <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	689b      	ldr	r3, [r3, #8]
 8006022:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006026:	2b00      	cmp	r3, #0
 8006028:	d102      	bne.n	8006030 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800602a:	68bb      	ldr	r3, [r7, #8]
 800602c:	2200      	movs	r2, #0
 800602e:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8006030:	68bb      	ldr	r3, [r7, #8]
 8006032:	781b      	ldrb	r3, [r3, #0]
 8006034:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8006036:	68bb      	ldr	r3, [r7, #8]
 8006038:	785b      	ldrb	r3, [r3, #1]
 800603a:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800603c:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 800603e:	68ba      	ldr	r2, [r7, #8]
 8006040:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8006042:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8006044:	68bb      	ldr	r3, [r7, #8]
 8006046:	78db      	ldrb	r3, [r3, #3]
 8006048:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800604a:	4313      	orrs	r3, r2
 800604c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	22ca      	movs	r2, #202	; 0xca
 8006054:	625a      	str	r2, [r3, #36]	; 0x24
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	2253      	movs	r2, #83	; 0x53
 800605c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800605e:	68f8      	ldr	r0, [r7, #12]
 8006060:	f000 f991 	bl	8006386 <RTC_EnterInitMode>
 8006064:	4603      	mov	r3, r0
 8006066:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8006068:	7cfb      	ldrb	r3, [r7, #19]
 800606a:	2b00      	cmp	r3, #0
 800606c:	d120      	bne.n	80060b0 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	681a      	ldr	r2, [r3, #0]
 8006072:	697b      	ldr	r3, [r7, #20]
 8006074:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8006078:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800607c:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	689a      	ldr	r2, [r3, #8]
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800608c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	6899      	ldr	r1, [r3, #8]
 8006094:	68bb      	ldr	r3, [r7, #8]
 8006096:	68da      	ldr	r2, [r3, #12]
 8006098:	68bb      	ldr	r3, [r7, #8]
 800609a:	691b      	ldr	r3, [r3, #16]
 800609c:	431a      	orrs	r2, r3
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	430a      	orrs	r2, r1
 80060a4:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80060a6:	68f8      	ldr	r0, [r7, #12]
 80060a8:	f000 f9a4 	bl	80063f4 <RTC_ExitInitMode>
 80060ac:	4603      	mov	r3, r0
 80060ae:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80060b0:	7cfb      	ldrb	r3, [r7, #19]
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d102      	bne.n	80060bc <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	2201      	movs	r2, #1
 80060ba:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	22ff      	movs	r2, #255	; 0xff
 80060c2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	2200      	movs	r2, #0
 80060c8:	771a      	strb	r2, [r3, #28]

  return status;
 80060ca:	7cfb      	ldrb	r3, [r7, #19]
}
 80060cc:	4618      	mov	r0, r3
 80060ce:	371c      	adds	r7, #28
 80060d0:	46bd      	mov	sp, r7
 80060d2:	bd90      	pop	{r4, r7, pc}

080060d4 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80060d4:	b580      	push	{r7, lr}
 80060d6:	b086      	sub	sp, #24
 80060d8:	af00      	add	r7, sp, #0
 80060da:	60f8      	str	r0, [r7, #12]
 80060dc:	60b9      	str	r1, [r7, #8]
 80060de:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80060e0:	2300      	movs	r3, #0
 80060e2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80060ea:	68bb      	ldr	r3, [r7, #8]
 80060ec:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	691b      	ldr	r3, [r3, #16]
 80060f4:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80060f8:	68bb      	ldr	r3, [r7, #8]
 80060fa:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8006106:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800610a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 800610c:	697b      	ldr	r3, [r7, #20]
 800610e:	0c1b      	lsrs	r3, r3, #16
 8006110:	b2db      	uxtb	r3, r3
 8006112:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006116:	b2da      	uxtb	r2, r3
 8006118:	68bb      	ldr	r3, [r7, #8]
 800611a:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800611c:	697b      	ldr	r3, [r7, #20]
 800611e:	0a1b      	lsrs	r3, r3, #8
 8006120:	b2db      	uxtb	r3, r3
 8006122:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006126:	b2da      	uxtb	r2, r3
 8006128:	68bb      	ldr	r3, [r7, #8]
 800612a:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 800612c:	697b      	ldr	r3, [r7, #20]
 800612e:	b2db      	uxtb	r3, r3
 8006130:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006134:	b2da      	uxtb	r2, r3
 8006136:	68bb      	ldr	r3, [r7, #8]
 8006138:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 800613a:	697b      	ldr	r3, [r7, #20]
 800613c:	0d9b      	lsrs	r3, r3, #22
 800613e:	b2db      	uxtb	r3, r3
 8006140:	f003 0301 	and.w	r3, r3, #1
 8006144:	b2da      	uxtb	r2, r3
 8006146:	68bb      	ldr	r3, [r7, #8]
 8006148:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	2b00      	cmp	r3, #0
 800614e:	d11a      	bne.n	8006186 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8006150:	68bb      	ldr	r3, [r7, #8]
 8006152:	781b      	ldrb	r3, [r3, #0]
 8006154:	4618      	mov	r0, r3
 8006156:	f000 f98f 	bl	8006478 <RTC_Bcd2ToByte>
 800615a:	4603      	mov	r3, r0
 800615c:	461a      	mov	r2, r3
 800615e:	68bb      	ldr	r3, [r7, #8]
 8006160:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8006162:	68bb      	ldr	r3, [r7, #8]
 8006164:	785b      	ldrb	r3, [r3, #1]
 8006166:	4618      	mov	r0, r3
 8006168:	f000 f986 	bl	8006478 <RTC_Bcd2ToByte>
 800616c:	4603      	mov	r3, r0
 800616e:	461a      	mov	r2, r3
 8006170:	68bb      	ldr	r3, [r7, #8]
 8006172:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8006174:	68bb      	ldr	r3, [r7, #8]
 8006176:	789b      	ldrb	r3, [r3, #2]
 8006178:	4618      	mov	r0, r3
 800617a:	f000 f97d 	bl	8006478 <RTC_Bcd2ToByte>
 800617e:	4603      	mov	r3, r0
 8006180:	461a      	mov	r2, r3
 8006182:	68bb      	ldr	r3, [r7, #8]
 8006184:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8006186:	2300      	movs	r3, #0
}
 8006188:	4618      	mov	r0, r3
 800618a:	3718      	adds	r7, #24
 800618c:	46bd      	mov	sp, r7
 800618e:	bd80      	pop	{r7, pc}

08006190 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006190:	b590      	push	{r4, r7, lr}
 8006192:	b087      	sub	sp, #28
 8006194:	af00      	add	r7, sp, #0
 8006196:	60f8      	str	r0, [r7, #12]
 8006198:	60b9      	str	r1, [r7, #8]
 800619a:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800619c:	2300      	movs	r3, #0
 800619e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	7f1b      	ldrb	r3, [r3, #28]
 80061a4:	2b01      	cmp	r3, #1
 80061a6:	d101      	bne.n	80061ac <HAL_RTC_SetDate+0x1c>
 80061a8:	2302      	movs	r3, #2
 80061aa:	e071      	b.n	8006290 <HAL_RTC_SetDate+0x100>
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	2201      	movs	r2, #1
 80061b0:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	2202      	movs	r2, #2
 80061b6:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d10e      	bne.n	80061dc <HAL_RTC_SetDate+0x4c>
 80061be:	68bb      	ldr	r3, [r7, #8]
 80061c0:	785b      	ldrb	r3, [r3, #1]
 80061c2:	f003 0310 	and.w	r3, r3, #16
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d008      	beq.n	80061dc <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80061ca:	68bb      	ldr	r3, [r7, #8]
 80061cc:	785b      	ldrb	r3, [r3, #1]
 80061ce:	f023 0310 	bic.w	r3, r3, #16
 80061d2:	b2db      	uxtb	r3, r3
 80061d4:	330a      	adds	r3, #10
 80061d6:	b2da      	uxtb	r2, r3
 80061d8:	68bb      	ldr	r3, [r7, #8]
 80061da:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d11c      	bne.n	800621c <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80061e2:	68bb      	ldr	r3, [r7, #8]
 80061e4:	78db      	ldrb	r3, [r3, #3]
 80061e6:	4618      	mov	r0, r3
 80061e8:	f000 f929 	bl	800643e <RTC_ByteToBcd2>
 80061ec:	4603      	mov	r3, r0
 80061ee:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80061f0:	68bb      	ldr	r3, [r7, #8]
 80061f2:	785b      	ldrb	r3, [r3, #1]
 80061f4:	4618      	mov	r0, r3
 80061f6:	f000 f922 	bl	800643e <RTC_ByteToBcd2>
 80061fa:	4603      	mov	r3, r0
 80061fc:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80061fe:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8006200:	68bb      	ldr	r3, [r7, #8]
 8006202:	789b      	ldrb	r3, [r3, #2]
 8006204:	4618      	mov	r0, r3
 8006206:	f000 f91a 	bl	800643e <RTC_ByteToBcd2>
 800620a:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800620c:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8006210:	68bb      	ldr	r3, [r7, #8]
 8006212:	781b      	ldrb	r3, [r3, #0]
 8006214:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8006216:	4313      	orrs	r3, r2
 8006218:	617b      	str	r3, [r7, #20]
 800621a:	e00e      	b.n	800623a <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800621c:	68bb      	ldr	r3, [r7, #8]
 800621e:	78db      	ldrb	r3, [r3, #3]
 8006220:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8006222:	68bb      	ldr	r3, [r7, #8]
 8006224:	785b      	ldrb	r3, [r3, #1]
 8006226:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8006228:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 800622a:	68ba      	ldr	r2, [r7, #8]
 800622c:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800622e:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8006230:	68bb      	ldr	r3, [r7, #8]
 8006232:	781b      	ldrb	r3, [r3, #0]
 8006234:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8006236:	4313      	orrs	r3, r2
 8006238:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	22ca      	movs	r2, #202	; 0xca
 8006240:	625a      	str	r2, [r3, #36]	; 0x24
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	2253      	movs	r2, #83	; 0x53
 8006248:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800624a:	68f8      	ldr	r0, [r7, #12]
 800624c:	f000 f89b 	bl	8006386 <RTC_EnterInitMode>
 8006250:	4603      	mov	r3, r0
 8006252:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8006254:	7cfb      	ldrb	r3, [r7, #19]
 8006256:	2b00      	cmp	r3, #0
 8006258:	d10c      	bne.n	8006274 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	681a      	ldr	r2, [r3, #0]
 800625e:	697b      	ldr	r3, [r7, #20]
 8006260:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006264:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006268:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800626a:	68f8      	ldr	r0, [r7, #12]
 800626c:	f000 f8c2 	bl	80063f4 <RTC_ExitInitMode>
 8006270:	4603      	mov	r3, r0
 8006272:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8006274:	7cfb      	ldrb	r3, [r7, #19]
 8006276:	2b00      	cmp	r3, #0
 8006278:	d102      	bne.n	8006280 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	2201      	movs	r2, #1
 800627e:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	22ff      	movs	r2, #255	; 0xff
 8006286:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	2200      	movs	r2, #0
 800628c:	771a      	strb	r2, [r3, #28]

  return status;
 800628e:	7cfb      	ldrb	r3, [r7, #19]
}
 8006290:	4618      	mov	r0, r3
 8006292:	371c      	adds	r7, #28
 8006294:	46bd      	mov	sp, r7
 8006296:	bd90      	pop	{r4, r7, pc}

08006298 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006298:	b580      	push	{r7, lr}
 800629a:	b086      	sub	sp, #24
 800629c:	af00      	add	r7, sp, #0
 800629e:	60f8      	str	r0, [r7, #12]
 80062a0:	60b9      	str	r1, [r7, #8]
 80062a2:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80062a4:	2300      	movs	r3, #0
 80062a6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	685b      	ldr	r3, [r3, #4]
 80062ae:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80062b2:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80062b6:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80062b8:	697b      	ldr	r3, [r7, #20]
 80062ba:	0c1b      	lsrs	r3, r3, #16
 80062bc:	b2da      	uxtb	r2, r3
 80062be:	68bb      	ldr	r3, [r7, #8]
 80062c0:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80062c2:	697b      	ldr	r3, [r7, #20]
 80062c4:	0a1b      	lsrs	r3, r3, #8
 80062c6:	b2db      	uxtb	r3, r3
 80062c8:	f003 031f 	and.w	r3, r3, #31
 80062cc:	b2da      	uxtb	r2, r3
 80062ce:	68bb      	ldr	r3, [r7, #8]
 80062d0:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 80062d2:	697b      	ldr	r3, [r7, #20]
 80062d4:	b2db      	uxtb	r3, r3
 80062d6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80062da:	b2da      	uxtb	r2, r3
 80062dc:	68bb      	ldr	r3, [r7, #8]
 80062de:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 80062e0:	697b      	ldr	r3, [r7, #20]
 80062e2:	0b5b      	lsrs	r3, r3, #13
 80062e4:	b2db      	uxtb	r3, r3
 80062e6:	f003 0307 	and.w	r3, r3, #7
 80062ea:	b2da      	uxtb	r2, r3
 80062ec:	68bb      	ldr	r3, [r7, #8]
 80062ee:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d11a      	bne.n	800632c <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80062f6:	68bb      	ldr	r3, [r7, #8]
 80062f8:	78db      	ldrb	r3, [r3, #3]
 80062fa:	4618      	mov	r0, r3
 80062fc:	f000 f8bc 	bl	8006478 <RTC_Bcd2ToByte>
 8006300:	4603      	mov	r3, r0
 8006302:	461a      	mov	r2, r3
 8006304:	68bb      	ldr	r3, [r7, #8]
 8006306:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8006308:	68bb      	ldr	r3, [r7, #8]
 800630a:	785b      	ldrb	r3, [r3, #1]
 800630c:	4618      	mov	r0, r3
 800630e:	f000 f8b3 	bl	8006478 <RTC_Bcd2ToByte>
 8006312:	4603      	mov	r3, r0
 8006314:	461a      	mov	r2, r3
 8006316:	68bb      	ldr	r3, [r7, #8]
 8006318:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800631a:	68bb      	ldr	r3, [r7, #8]
 800631c:	789b      	ldrb	r3, [r3, #2]
 800631e:	4618      	mov	r0, r3
 8006320:	f000 f8aa 	bl	8006478 <RTC_Bcd2ToByte>
 8006324:	4603      	mov	r3, r0
 8006326:	461a      	mov	r2, r3
 8006328:	68bb      	ldr	r3, [r7, #8]
 800632a:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800632c:	2300      	movs	r3, #0
}
 800632e:	4618      	mov	r0, r3
 8006330:	3718      	adds	r7, #24
 8006332:	46bd      	mov	sp, r7
 8006334:	bd80      	pop	{r7, pc}

08006336 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8006336:	b580      	push	{r7, lr}
 8006338:	b084      	sub	sp, #16
 800633a:	af00      	add	r7, sp, #0
 800633c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800633e:	2300      	movs	r3, #0
 8006340:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	68da      	ldr	r2, [r3, #12]
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006350:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006352:	f7fb fd09 	bl	8001d68 <HAL_GetTick>
 8006356:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006358:	e009      	b.n	800636e <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800635a:	f7fb fd05 	bl	8001d68 <HAL_GetTick>
 800635e:	4602      	mov	r2, r0
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	1ad3      	subs	r3, r2, r3
 8006364:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006368:	d901      	bls.n	800636e <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800636a:	2303      	movs	r3, #3
 800636c:	e007      	b.n	800637e <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	68db      	ldr	r3, [r3, #12]
 8006374:	f003 0320 	and.w	r3, r3, #32
 8006378:	2b00      	cmp	r3, #0
 800637a:	d0ee      	beq.n	800635a <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800637c:	2300      	movs	r3, #0
}
 800637e:	4618      	mov	r0, r3
 8006380:	3710      	adds	r7, #16
 8006382:	46bd      	mov	sp, r7
 8006384:	bd80      	pop	{r7, pc}

08006386 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8006386:	b580      	push	{r7, lr}
 8006388:	b084      	sub	sp, #16
 800638a:	af00      	add	r7, sp, #0
 800638c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800638e:	2300      	movs	r3, #0
 8006390:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8006392:	2300      	movs	r3, #0
 8006394:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	68db      	ldr	r3, [r3, #12]
 800639c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d122      	bne.n	80063ea <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	68da      	ldr	r2, [r3, #12]
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80063b2:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80063b4:	f7fb fcd8 	bl	8001d68 <HAL_GetTick>
 80063b8:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80063ba:	e00c      	b.n	80063d6 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80063bc:	f7fb fcd4 	bl	8001d68 <HAL_GetTick>
 80063c0:	4602      	mov	r2, r0
 80063c2:	68bb      	ldr	r3, [r7, #8]
 80063c4:	1ad3      	subs	r3, r2, r3
 80063c6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80063ca:	d904      	bls.n	80063d6 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	2204      	movs	r2, #4
 80063d0:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 80063d2:	2301      	movs	r3, #1
 80063d4:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	68db      	ldr	r3, [r3, #12]
 80063dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d102      	bne.n	80063ea <RTC_EnterInitMode+0x64>
 80063e4:	7bfb      	ldrb	r3, [r7, #15]
 80063e6:	2b01      	cmp	r3, #1
 80063e8:	d1e8      	bne.n	80063bc <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 80063ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80063ec:	4618      	mov	r0, r3
 80063ee:	3710      	adds	r7, #16
 80063f0:	46bd      	mov	sp, r7
 80063f2:	bd80      	pop	{r7, pc}

080063f4 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80063f4:	b580      	push	{r7, lr}
 80063f6:	b084      	sub	sp, #16
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80063fc:	2300      	movs	r3, #0
 80063fe:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	68da      	ldr	r2, [r3, #12]
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800640e:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	689b      	ldr	r3, [r3, #8]
 8006416:	f003 0320 	and.w	r3, r3, #32
 800641a:	2b00      	cmp	r3, #0
 800641c:	d10a      	bne.n	8006434 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800641e:	6878      	ldr	r0, [r7, #4]
 8006420:	f7ff ff89 	bl	8006336 <HAL_RTC_WaitForSynchro>
 8006424:	4603      	mov	r3, r0
 8006426:	2b00      	cmp	r3, #0
 8006428:	d004      	beq.n	8006434 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	2204      	movs	r2, #4
 800642e:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8006430:	2301      	movs	r3, #1
 8006432:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8006434:	7bfb      	ldrb	r3, [r7, #15]
}
 8006436:	4618      	mov	r0, r3
 8006438:	3710      	adds	r7, #16
 800643a:	46bd      	mov	sp, r7
 800643c:	bd80      	pop	{r7, pc}

0800643e <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 800643e:	b480      	push	{r7}
 8006440:	b085      	sub	sp, #20
 8006442:	af00      	add	r7, sp, #0
 8006444:	4603      	mov	r3, r0
 8006446:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 8006448:	2300      	movs	r3, #0
 800644a:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 800644c:	e005      	b.n	800645a <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800644e:	7bfb      	ldrb	r3, [r7, #15]
 8006450:	3301      	adds	r3, #1
 8006452:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 8006454:	79fb      	ldrb	r3, [r7, #7]
 8006456:	3b0a      	subs	r3, #10
 8006458:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 800645a:	79fb      	ldrb	r3, [r7, #7]
 800645c:	2b09      	cmp	r3, #9
 800645e:	d8f6      	bhi.n	800644e <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8006460:	7bfb      	ldrb	r3, [r7, #15]
 8006462:	011b      	lsls	r3, r3, #4
 8006464:	b2da      	uxtb	r2, r3
 8006466:	79fb      	ldrb	r3, [r7, #7]
 8006468:	4313      	orrs	r3, r2
 800646a:	b2db      	uxtb	r3, r3
}
 800646c:	4618      	mov	r0, r3
 800646e:	3714      	adds	r7, #20
 8006470:	46bd      	mov	sp, r7
 8006472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006476:	4770      	bx	lr

08006478 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8006478:	b480      	push	{r7}
 800647a:	b085      	sub	sp, #20
 800647c:	af00      	add	r7, sp, #0
 800647e:	4603      	mov	r3, r0
 8006480:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 8006482:	2300      	movs	r3, #0
 8006484:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8006486:	79fb      	ldrb	r3, [r7, #7]
 8006488:	091b      	lsrs	r3, r3, #4
 800648a:	b2db      	uxtb	r3, r3
 800648c:	461a      	mov	r2, r3
 800648e:	0092      	lsls	r2, r2, #2
 8006490:	4413      	add	r3, r2
 8006492:	005b      	lsls	r3, r3, #1
 8006494:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 8006496:	79fb      	ldrb	r3, [r7, #7]
 8006498:	f003 030f 	and.w	r3, r3, #15
 800649c:	b2da      	uxtb	r2, r3
 800649e:	7bfb      	ldrb	r3, [r7, #15]
 80064a0:	4413      	add	r3, r2
 80064a2:	b2db      	uxtb	r3, r3
}
 80064a4:	4618      	mov	r0, r3
 80064a6:	3714      	adds	r7, #20
 80064a8:	46bd      	mov	sp, r7
 80064aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ae:	4770      	bx	lr

080064b0 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80064b0:	b580      	push	{r7, lr}
 80064b2:	b082      	sub	sp, #8
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d101      	bne.n	80064c2 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80064be:	2301      	movs	r3, #1
 80064c0:	e022      	b.n	8006508 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80064c8:	b2db      	uxtb	r3, r3
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d105      	bne.n	80064da <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	2200      	movs	r2, #0
 80064d2:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80064d4:	6878      	ldr	r0, [r7, #4]
 80064d6:	f7fa ffe9 	bl	80014ac <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	2203      	movs	r2, #3
 80064de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80064e2:	6878      	ldr	r0, [r7, #4]
 80064e4:	f000 f814 	bl	8006510 <HAL_SD_InitCard>
 80064e8:	4603      	mov	r3, r0
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d001      	beq.n	80064f2 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80064ee:	2301      	movs	r3, #1
 80064f0:	e00a      	b.n	8006508 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	2200      	movs	r2, #0
 80064f6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	2200      	movs	r2, #0
 80064fc:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	2201      	movs	r2, #1
 8006502:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8006506:	2300      	movs	r3, #0
}
 8006508:	4618      	mov	r0, r3
 800650a:	3708      	adds	r7, #8
 800650c:	46bd      	mov	sp, r7
 800650e:	bd80      	pop	{r7, pc}

08006510 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8006510:	b5b0      	push	{r4, r5, r7, lr}
 8006512:	b08e      	sub	sp, #56	; 0x38
 8006514:	af04      	add	r7, sp, #16
 8006516:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8006518:	2300      	movs	r3, #0
 800651a:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 800651c:	2300      	movs	r3, #0
 800651e:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8006520:	2300      	movs	r3, #0
 8006522:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8006524:	2300      	movs	r3, #0
 8006526:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8006528:	2300      	movs	r3, #0
 800652a:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 800652c:	2376      	movs	r3, #118	; 0x76
 800652e:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681d      	ldr	r5, [r3, #0]
 8006534:	466c      	mov	r4, sp
 8006536:	f107 0314 	add.w	r3, r7, #20
 800653a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800653e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006542:	f107 0308 	add.w	r3, r7, #8
 8006546:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006548:	4628      	mov	r0, r5
 800654a:	f002 fd77 	bl	800903c <SDIO_Init>
 800654e:	4603      	mov	r3, r0
 8006550:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8006554:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006558:	2b00      	cmp	r3, #0
 800655a:	d001      	beq.n	8006560 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800655c:	2301      	movs	r3, #1
 800655e:	e04f      	b.n	8006600 <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8006560:	4b29      	ldr	r3, [pc, #164]	; (8006608 <HAL_SD_InitCard+0xf8>)
 8006562:	2200      	movs	r2, #0
 8006564:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	4618      	mov	r0, r3
 800656c:	f002 fdaf 	bl	80090ce <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8006570:	4b25      	ldr	r3, [pc, #148]	; (8006608 <HAL_SD_InitCard+0xf8>)
 8006572:	2201      	movs	r2, #1
 8006574:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 8006576:	2002      	movs	r0, #2
 8006578:	f7fb fc02 	bl	8001d80 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800657c:	6878      	ldr	r0, [r7, #4]
 800657e:	f000 ff6b 	bl	8007458 <SD_PowerON>
 8006582:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006584:	6a3b      	ldr	r3, [r7, #32]
 8006586:	2b00      	cmp	r3, #0
 8006588:	d00b      	beq.n	80065a2 <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	2201      	movs	r2, #1
 800658e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006596:	6a3b      	ldr	r3, [r7, #32]
 8006598:	431a      	orrs	r2, r3
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800659e:	2301      	movs	r3, #1
 80065a0:	e02e      	b.n	8006600 <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80065a2:	6878      	ldr	r0, [r7, #4]
 80065a4:	f000 fe8a 	bl	80072bc <SD_InitCard>
 80065a8:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80065aa:	6a3b      	ldr	r3, [r7, #32]
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d00b      	beq.n	80065c8 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	2201      	movs	r2, #1
 80065b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80065bc:	6a3b      	ldr	r3, [r7, #32]
 80065be:	431a      	orrs	r2, r3
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80065c4:	2301      	movs	r3, #1
 80065c6:	e01b      	b.n	8006600 <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80065d0:	4618      	mov	r0, r3
 80065d2:	f002 fe0e 	bl	80091f2 <SDMMC_CmdBlockLength>
 80065d6:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80065d8:	6a3b      	ldr	r3, [r7, #32]
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d00f      	beq.n	80065fe <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	4a0a      	ldr	r2, [pc, #40]	; (800660c <HAL_SD_InitCard+0xfc>)
 80065e4:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80065ea:	6a3b      	ldr	r3, [r7, #32]
 80065ec:	431a      	orrs	r2, r3
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	2201      	movs	r2, #1
 80065f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80065fa:	2301      	movs	r3, #1
 80065fc:	e000      	b.n	8006600 <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 80065fe:	2300      	movs	r3, #0
}
 8006600:	4618      	mov	r0, r3
 8006602:	3728      	adds	r7, #40	; 0x28
 8006604:	46bd      	mov	sp, r7
 8006606:	bdb0      	pop	{r4, r5, r7, pc}
 8006608:	422580a0 	.word	0x422580a0
 800660c:	004005ff 	.word	0x004005ff

08006610 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8006610:	b580      	push	{r7, lr}
 8006612:	b08c      	sub	sp, #48	; 0x30
 8006614:	af00      	add	r7, sp, #0
 8006616:	60f8      	str	r0, [r7, #12]
 8006618:	60b9      	str	r1, [r7, #8]
 800661a:	607a      	str	r2, [r7, #4]
 800661c:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8006622:	68bb      	ldr	r3, [r7, #8]
 8006624:	2b00      	cmp	r3, #0
 8006626:	d107      	bne.n	8006638 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800662c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006634:	2301      	movs	r3, #1
 8006636:	e0c0      	b.n	80067ba <HAL_SD_ReadBlocks_DMA+0x1aa>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800663e:	b2db      	uxtb	r3, r3
 8006640:	2b01      	cmp	r3, #1
 8006642:	f040 80b9 	bne.w	80067b8 <HAL_SD_ReadBlocks_DMA+0x1a8>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	2200      	movs	r2, #0
 800664a:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800664c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800664e:	683b      	ldr	r3, [r7, #0]
 8006650:	441a      	add	r2, r3
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006656:	429a      	cmp	r2, r3
 8006658:	d907      	bls.n	800666a <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800665e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8006666:	2301      	movs	r3, #1
 8006668:	e0a7      	b.n	80067ba <HAL_SD_ReadBlocks_DMA+0x1aa>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	2203      	movs	r2, #3
 800666e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	2200      	movs	r2, #0
 8006678:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006680:	68fa      	ldr	r2, [r7, #12]
 8006682:	6812      	ldr	r2, [r2, #0]
 8006684:	f443 734a 	orr.w	r3, r3, #808	; 0x328
 8006688:	f043 0302 	orr.w	r3, r3, #2
 800668c:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006692:	4a4c      	ldr	r2, [pc, #304]	; (80067c4 <HAL_SD_ReadBlocks_DMA+0x1b4>)
 8006694:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800669a:	4a4b      	ldr	r2, [pc, #300]	; (80067c8 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 800669c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066a2:	2200      	movs	r2, #0
 80066a4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066aa:	2200      	movs	r2, #0
 80066ac:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066be:	689a      	ldr	r2, [r3, #8]
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	430a      	orrs	r2, r1
 80066c8:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	6c18      	ldr	r0, [r3, #64]	; 0x40
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	3380      	adds	r3, #128	; 0x80
 80066d4:	4619      	mov	r1, r3
 80066d6:	68ba      	ldr	r2, [r7, #8]
 80066d8:	683b      	ldr	r3, [r7, #0]
 80066da:	025b      	lsls	r3, r3, #9
 80066dc:	089b      	lsrs	r3, r3, #2
 80066de:	f7fc fc01 	bl	8002ee4 <HAL_DMA_Start_IT>
 80066e2:	4603      	mov	r3, r0
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d017      	beq.n	8006718 <HAL_SD_ReadBlocks_DMA+0x108>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 80066f6:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	4a33      	ldr	r2, [pc, #204]	; (80067cc <HAL_SD_ReadBlocks_DMA+0x1bc>)
 80066fe:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006704:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	2201      	movs	r2, #1
 8006710:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8006714:	2301      	movs	r3, #1
 8006716:	e050      	b.n	80067ba <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8006718:	4b2d      	ldr	r3, [pc, #180]	; (80067d0 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800671a:	2201      	movs	r2, #1
 800671c:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006722:	2b01      	cmp	r3, #1
 8006724:	d002      	beq.n	800672c <HAL_SD_ReadBlocks_DMA+0x11c>
      {
        add *= 512U;
 8006726:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006728:	025b      	lsls	r3, r3, #9
 800672a:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800672c:	f04f 33ff 	mov.w	r3, #4294967295
 8006730:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8006732:	683b      	ldr	r3, [r7, #0]
 8006734:	025b      	lsls	r3, r3, #9
 8006736:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8006738:	2390      	movs	r3, #144	; 0x90
 800673a:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800673c:	2302      	movs	r3, #2
 800673e:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8006740:	2300      	movs	r3, #0
 8006742:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8006744:	2301      	movs	r3, #1
 8006746:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	f107 0210 	add.w	r2, r7, #16
 8006750:	4611      	mov	r1, r2
 8006752:	4618      	mov	r0, r3
 8006754:	f002 fd21 	bl	800919a <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8006758:	683b      	ldr	r3, [r7, #0]
 800675a:	2b01      	cmp	r3, #1
 800675c:	d90a      	bls.n	8006774 <HAL_SD_ReadBlocks_DMA+0x164>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	2282      	movs	r2, #130	; 0x82
 8006762:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800676a:	4618      	mov	r0, r3
 800676c:	f002 fd85 	bl	800927a <SDMMC_CmdReadMultiBlock>
 8006770:	62f8      	str	r0, [r7, #44]	; 0x2c
 8006772:	e009      	b.n	8006788 <HAL_SD_ReadBlocks_DMA+0x178>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	2281      	movs	r2, #129	; 0x81
 8006778:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006780:	4618      	mov	r0, r3
 8006782:	f002 fd58 	bl	8009236 <SDMMC_CmdReadSingleBlock>
 8006786:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8006788:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800678a:	2b00      	cmp	r3, #0
 800678c:	d012      	beq.n	80067b4 <HAL_SD_ReadBlocks_DMA+0x1a4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	4a0e      	ldr	r2, [pc, #56]	; (80067cc <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8006794:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800679a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800679c:	431a      	orrs	r2, r3
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	2201      	movs	r2, #1
 80067a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	2200      	movs	r2, #0
 80067ae:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 80067b0:	2301      	movs	r3, #1
 80067b2:	e002      	b.n	80067ba <HAL_SD_ReadBlocks_DMA+0x1aa>
      }

      return HAL_OK;
 80067b4:	2300      	movs	r3, #0
 80067b6:	e000      	b.n	80067ba <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
  }
  else
  {
    return HAL_BUSY;
 80067b8:	2302      	movs	r3, #2
  }
}
 80067ba:	4618      	mov	r0, r3
 80067bc:	3730      	adds	r7, #48	; 0x30
 80067be:	46bd      	mov	sp, r7
 80067c0:	bd80      	pop	{r7, pc}
 80067c2:	bf00      	nop
 80067c4:	080070cb 	.word	0x080070cb
 80067c8:	0800713d 	.word	0x0800713d
 80067cc:	004005ff 	.word	0x004005ff
 80067d0:	4225858c 	.word	0x4225858c

080067d4 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 80067d4:	b580      	push	{r7, lr}
 80067d6:	b08c      	sub	sp, #48	; 0x30
 80067d8:	af00      	add	r7, sp, #0
 80067da:	60f8      	str	r0, [r7, #12]
 80067dc:	60b9      	str	r1, [r7, #8]
 80067de:	607a      	str	r2, [r7, #4]
 80067e0:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 80067e6:	68bb      	ldr	r3, [r7, #8]
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d107      	bne.n	80067fc <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067f0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80067f8:	2301      	movs	r3, #1
 80067fa:	e0c5      	b.n	8006988 <HAL_SD_WriteBlocks_DMA+0x1b4>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006802:	b2db      	uxtb	r3, r3
 8006804:	2b01      	cmp	r3, #1
 8006806:	f040 80be 	bne.w	8006986 <HAL_SD_WriteBlocks_DMA+0x1b2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	2200      	movs	r2, #0
 800680e:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8006810:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006812:	683b      	ldr	r3, [r7, #0]
 8006814:	441a      	add	r2, r3
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800681a:	429a      	cmp	r2, r3
 800681c:	d907      	bls.n	800682e <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006822:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800682a:	2301      	movs	r3, #1
 800682c:	e0ac      	b.n	8006988 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	2203      	movs	r2, #3
 8006832:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	2200      	movs	r2, #0
 800683c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006844:	68fa      	ldr	r2, [r7, #12]
 8006846:	6812      	ldr	r2, [r2, #0]
 8006848:	f443 7306 	orr.w	r3, r3, #536	; 0x218
 800684c:	f043 0302 	orr.w	r3, r3, #2
 8006850:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006856:	4a4e      	ldr	r2, [pc, #312]	; (8006990 <HAL_SD_WriteBlocks_DMA+0x1bc>)
 8006858:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800685e:	4a4d      	ldr	r2, [pc, #308]	; (8006994 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 8006860:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006866:	2200      	movs	r2, #0
 8006868:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800686e:	2b01      	cmp	r3, #1
 8006870:	d002      	beq.n	8006878 <HAL_SD_WriteBlocks_DMA+0xa4>
    {
      add *= 512U;
 8006872:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006874:	025b      	lsls	r3, r3, #9
 8006876:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8006878:	683b      	ldr	r3, [r7, #0]
 800687a:	2b01      	cmp	r3, #1
 800687c:	d90a      	bls.n	8006894 <HAL_SD_WriteBlocks_DMA+0xc0>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	22a0      	movs	r2, #160	; 0xa0
 8006882:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800688a:	4618      	mov	r0, r3
 800688c:	f002 fd39 	bl	8009302 <SDMMC_CmdWriteMultiBlock>
 8006890:	62f8      	str	r0, [r7, #44]	; 0x2c
 8006892:	e009      	b.n	80068a8 <HAL_SD_WriteBlocks_DMA+0xd4>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	2290      	movs	r2, #144	; 0x90
 8006898:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80068a0:	4618      	mov	r0, r3
 80068a2:	f002 fd0c 	bl	80092be <SDMMC_CmdWriteSingleBlock>
 80068a6:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80068a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d012      	beq.n	80068d4 <HAL_SD_WriteBlocks_DMA+0x100>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	4a39      	ldr	r2, [pc, #228]	; (8006998 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 80068b4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80068ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068bc:	431a      	orrs	r2, r3
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	2201      	movs	r2, #1
 80068c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	2200      	movs	r2, #0
 80068ce:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80068d0:	2301      	movs	r3, #1
 80068d2:	e059      	b.n	8006988 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 80068d4:	4b31      	ldr	r3, [pc, #196]	; (800699c <HAL_SD_WriteBlocks_DMA+0x1c8>)
 80068d6:	2201      	movs	r2, #1
 80068d8:	601a      	str	r2, [r3, #0]

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068de:	2240      	movs	r2, #64	; 0x40
 80068e0:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068f2:	689a      	ldr	r2, [r3, #8]
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	430a      	orrs	r2, r1
 80068fc:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8006902:	68b9      	ldr	r1, [r7, #8]
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	3380      	adds	r3, #128	; 0x80
 800690a:	461a      	mov	r2, r3
 800690c:	683b      	ldr	r3, [r7, #0]
 800690e:	025b      	lsls	r3, r3, #9
 8006910:	089b      	lsrs	r3, r3, #2
 8006912:	f7fc fae7 	bl	8002ee4 <HAL_DMA_Start_IT>
 8006916:	4603      	mov	r3, r0
 8006918:	2b00      	cmp	r3, #0
 800691a:	d01c      	beq.n	8006956 <HAL_SD_WriteBlocks_DMA+0x182>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006922:	68fa      	ldr	r2, [r7, #12]
 8006924:	6812      	ldr	r2, [r2, #0]
 8006926:	f423 7306 	bic.w	r3, r3, #536	; 0x218
 800692a:	f023 0302 	bic.w	r3, r3, #2
 800692e:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	4a18      	ldr	r2, [pc, #96]	; (8006998 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 8006936:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800693c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	2201      	movs	r2, #1
 8006948:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	2200      	movs	r2, #0
 8006950:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8006952:	2301      	movs	r3, #1
 8006954:	e018      	b.n	8006988 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006956:	f04f 33ff 	mov.w	r3, #4294967295
 800695a:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800695c:	683b      	ldr	r3, [r7, #0]
 800695e:	025b      	lsls	r3, r3, #9
 8006960:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8006962:	2390      	movs	r3, #144	; 0x90
 8006964:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8006966:	2300      	movs	r3, #0
 8006968:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800696a:	2300      	movs	r3, #0
 800696c:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800696e:	2301      	movs	r3, #1
 8006970:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	f107 0210 	add.w	r2, r7, #16
 800697a:	4611      	mov	r1, r2
 800697c:	4618      	mov	r0, r3
 800697e:	f002 fc0c 	bl	800919a <SDIO_ConfigData>

      return HAL_OK;
 8006982:	2300      	movs	r3, #0
 8006984:	e000      	b.n	8006988 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_BUSY;
 8006986:	2302      	movs	r3, #2
  }
}
 8006988:	4618      	mov	r0, r3
 800698a:	3730      	adds	r7, #48	; 0x30
 800698c:	46bd      	mov	sp, r7
 800698e:	bd80      	pop	{r7, pc}
 8006990:	080070a1 	.word	0x080070a1
 8006994:	0800713d 	.word	0x0800713d
 8006998:	004005ff 	.word	0x004005ff
 800699c:	4225858c 	.word	0x4225858c

080069a0 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 80069a0:	b580      	push	{r7, lr}
 80069a2:	b084      	sub	sp, #16
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069ac:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d008      	beq.n	80069ce <HAL_SD_IRQHandler+0x2e>
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	f003 0308 	and.w	r3, r3, #8
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d003      	beq.n	80069ce <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 80069c6:	6878      	ldr	r0, [r7, #4]
 80069c8:	f000 fdfc 	bl	80075c4 <SD_Read_IT>
 80069cc:	e165      	b.n	8006c9a <HAL_SD_IRQHandler+0x2fa>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069d8:	2b00      	cmp	r3, #0
 80069da:	f000 808f 	beq.w	8006afc <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80069e6:	639a      	str	r2, [r3, #56]	; 0x38

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069ee:	687a      	ldr	r2, [r7, #4]
 80069f0:	6812      	ldr	r2, [r2, #0]
 80069f2:	f423 4343 	bic.w	r3, r3, #49920	; 0xc300
 80069f6:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 80069fa:	63d3      	str	r3, [r2, #60]	; 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	f022 0201 	bic.w	r2, r2, #1
 8006a0a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	f003 0308 	and.w	r3, r3, #8
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d039      	beq.n	8006a8a <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	f003 0302 	and.w	r3, r3, #2
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d104      	bne.n	8006a2a <HAL_SD_IRQHandler+0x8a>
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	f003 0320 	and.w	r3, r3, #32
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d011      	beq.n	8006a4e <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	4618      	mov	r0, r3
 8006a30:	f002 fc8a 	bl	8009348 <SDMMC_CmdStopTransfer>
 8006a34:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8006a36:	68bb      	ldr	r3, [r7, #8]
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d008      	beq.n	8006a4e <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006a40:	68bb      	ldr	r3, [r7, #8]
 8006a42:	431a      	orrs	r2, r3
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8006a48:	6878      	ldr	r0, [r7, #4]
 8006a4a:	f000 f92f 	bl	8006cac <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	f240 523a 	movw	r2, #1338	; 0x53a
 8006a56:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	2201      	movs	r2, #1
 8006a5c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	2200      	movs	r2, #0
 8006a64:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	f003 0301 	and.w	r3, r3, #1
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d104      	bne.n	8006a7a <HAL_SD_IRQHandler+0xda>
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	f003 0302 	and.w	r3, r3, #2
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d003      	beq.n	8006a82 <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8006a7a:	6878      	ldr	r0, [r7, #4]
 8006a7c:	f003 f8a8 	bl	8009bd0 <HAL_SD_RxCpltCallback>
 8006a80:	e10b      	b.n	8006c9a <HAL_SD_IRQHandler+0x2fa>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8006a82:	6878      	ldr	r0, [r7, #4]
 8006a84:	f003 f89a 	bl	8009bbc <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8006a88:	e107      	b.n	8006c9a <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	f000 8102 	beq.w	8006c9a <HAL_SD_IRQHandler+0x2fa>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	f003 0320 	and.w	r3, r3, #32
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d011      	beq.n	8006ac4 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	4618      	mov	r0, r3
 8006aa6:	f002 fc4f 	bl	8009348 <SDMMC_CmdStopTransfer>
 8006aaa:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8006aac:	68bb      	ldr	r3, [r7, #8]
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d008      	beq.n	8006ac4 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006ab6:	68bb      	ldr	r3, [r7, #8]
 8006ab8:	431a      	orrs	r2, r3
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8006abe:	6878      	ldr	r0, [r7, #4]
 8006ac0:	f000 f8f4 	bl	8006cac <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	f003 0301 	and.w	r3, r3, #1
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	f040 80e5 	bne.w	8006c9a <HAL_SD_IRQHandler+0x2fa>
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	f003 0302 	and.w	r3, r3, #2
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	f040 80df 	bne.w	8006c9a <HAL_SD_IRQHandler+0x2fa>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	f022 0208 	bic.w	r2, r2, #8
 8006aea:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	2201      	movs	r2, #1
 8006af0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8006af4:	6878      	ldr	r0, [r7, #4]
 8006af6:	f003 f861 	bl	8009bbc <HAL_SD_TxCpltCallback>
}
 8006afa:	e0ce      	b.n	8006c9a <HAL_SD_IRQHandler+0x2fa>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d008      	beq.n	8006b1c <HAL_SD_IRQHandler+0x17c>
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	f003 0308 	and.w	r3, r3, #8
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d003      	beq.n	8006b1c <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 8006b14:	6878      	ldr	r0, [r7, #4]
 8006b16:	f000 fda6 	bl	8007666 <SD_Write_IT>
 8006b1a:	e0be      	b.n	8006c9a <HAL_SD_IRQHandler+0x2fa>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR | SDIO_FLAG_STBITERR) != RESET)
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006b22:	f240 233a 	movw	r3, #570	; 0x23a
 8006b26:	4013      	ands	r3, r2
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	f000 80b6 	beq.w	8006c9a <HAL_SD_IRQHandler+0x2fa>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b34:	f003 0302 	and.w	r3, r3, #2
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d005      	beq.n	8006b48 <HAL_SD_IRQHandler+0x1a8>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b40:	f043 0202 	orr.w	r2, r3, #2
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b4e:	f003 0308 	and.w	r3, r3, #8
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d005      	beq.n	8006b62 <HAL_SD_IRQHandler+0x1c2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b5a:	f043 0208 	orr.w	r2, r3, #8
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b68:	f003 0320 	and.w	r3, r3, #32
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d005      	beq.n	8006b7c <HAL_SD_IRQHandler+0x1dc>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b74:	f043 0220 	orr.w	r2, r3, #32
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b82:	f003 0310 	and.w	r3, r3, #16
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d005      	beq.n	8006b96 <HAL_SD_IRQHandler+0x1f6>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b8e:	f043 0210 	orr.w	r2, r3, #16
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR) != RESET)
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b9c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d005      	beq.n	8006bb0 <HAL_SD_IRQHandler+0x210>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ba8:	f043 0208 	orr.w	r2, r3, #8
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	f240 723a 	movw	r2, #1850	; 0x73a
 8006bb8:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bc0:	687a      	ldr	r2, [r7, #4]
 8006bc2:	6812      	ldr	r2, [r2, #0]
 8006bc4:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 8006bc8:	f023 0302 	bic.w	r3, r3, #2
 8006bcc:	63d3      	str	r3, [r2, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	4618      	mov	r0, r3
 8006bd4:	f002 fbb8 	bl	8009348 <SDMMC_CmdStopTransfer>
 8006bd8:	4602      	mov	r2, r0
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bde:	431a      	orrs	r2, r3
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	f003 0308 	and.w	r3, r3, #8
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d00a      	beq.n	8006c04 <HAL_SD_IRQHandler+0x264>
      hsd->State = HAL_SD_STATE_READY;
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	2201      	movs	r2, #1
 8006bf2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	2200      	movs	r2, #0
 8006bfa:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8006bfc:	6878      	ldr	r0, [r7, #4]
 8006bfe:	f000 f855 	bl	8006cac <HAL_SD_ErrorCallback>
}
 8006c02:	e04a      	b.n	8006c9a <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d045      	beq.n	8006c9a <HAL_SD_IRQHandler+0x2fa>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	f003 0310 	and.w	r3, r3, #16
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d104      	bne.n	8006c22 <HAL_SD_IRQHandler+0x282>
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	f003 0320 	and.w	r3, r3, #32
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d011      	beq.n	8006c46 <HAL_SD_IRQHandler+0x2a6>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c26:	4a1f      	ldr	r2, [pc, #124]	; (8006ca4 <HAL_SD_IRQHandler+0x304>)
 8006c28:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c2e:	4618      	mov	r0, r3
 8006c30:	f7fc fa20 	bl	8003074 <HAL_DMA_Abort_IT>
 8006c34:	4603      	mov	r3, r0
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d02f      	beq.n	8006c9a <HAL_SD_IRQHandler+0x2fa>
          SD_DMATxAbort(hsd->hdmatx);
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c3e:	4618      	mov	r0, r3
 8006c40:	f000 face 	bl	80071e0 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8006c44:	e029      	b.n	8006c9a <HAL_SD_IRQHandler+0x2fa>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	f003 0301 	and.w	r3, r3, #1
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d104      	bne.n	8006c5a <HAL_SD_IRQHandler+0x2ba>
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	f003 0302 	and.w	r3, r3, #2
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d011      	beq.n	8006c7e <HAL_SD_IRQHandler+0x2de>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c5e:	4a12      	ldr	r2, [pc, #72]	; (8006ca8 <HAL_SD_IRQHandler+0x308>)
 8006c60:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c66:	4618      	mov	r0, r3
 8006c68:	f7fc fa04 	bl	8003074 <HAL_DMA_Abort_IT>
 8006c6c:	4603      	mov	r3, r0
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d013      	beq.n	8006c9a <HAL_SD_IRQHandler+0x2fa>
          SD_DMARxAbort(hsd->hdmarx);
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c76:	4618      	mov	r0, r3
 8006c78:	f000 fae9 	bl	800724e <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8006c7c:	e00d      	b.n	8006c9a <HAL_SD_IRQHandler+0x2fa>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	2200      	movs	r2, #0
 8006c82:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	2201      	movs	r2, #1
 8006c88:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	2200      	movs	r2, #0
 8006c90:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 8006c92:	6878      	ldr	r0, [r7, #4]
 8006c94:	f002 ff88 	bl	8009ba8 <HAL_SD_AbortCallback>
}
 8006c98:	e7ff      	b.n	8006c9a <HAL_SD_IRQHandler+0x2fa>
 8006c9a:	bf00      	nop
 8006c9c:	3710      	adds	r7, #16
 8006c9e:	46bd      	mov	sp, r7
 8006ca0:	bd80      	pop	{r7, pc}
 8006ca2:	bf00      	nop
 8006ca4:	080071e1 	.word	0x080071e1
 8006ca8:	0800724f 	.word	0x0800724f

08006cac <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8006cac:	b480      	push	{r7}
 8006cae:	b083      	sub	sp, #12
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8006cb4:	bf00      	nop
 8006cb6:	370c      	adds	r7, #12
 8006cb8:	46bd      	mov	sp, r7
 8006cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cbe:	4770      	bx	lr

08006cc0 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8006cc0:	b480      	push	{r7}
 8006cc2:	b083      	sub	sp, #12
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	6078      	str	r0, [r7, #4]
 8006cc8:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006cce:	0f9b      	lsrs	r3, r3, #30
 8006cd0:	b2da      	uxtb	r2, r3
 8006cd2:	683b      	ldr	r3, [r7, #0]
 8006cd4:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006cda:	0e9b      	lsrs	r3, r3, #26
 8006cdc:	b2db      	uxtb	r3, r3
 8006cde:	f003 030f 	and.w	r3, r3, #15
 8006ce2:	b2da      	uxtb	r2, r3
 8006ce4:	683b      	ldr	r3, [r7, #0]
 8006ce6:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006cec:	0e1b      	lsrs	r3, r3, #24
 8006cee:	b2db      	uxtb	r3, r3
 8006cf0:	f003 0303 	and.w	r3, r3, #3
 8006cf4:	b2da      	uxtb	r2, r3
 8006cf6:	683b      	ldr	r3, [r7, #0]
 8006cf8:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006cfe:	0c1b      	lsrs	r3, r3, #16
 8006d00:	b2da      	uxtb	r2, r3
 8006d02:	683b      	ldr	r3, [r7, #0]
 8006d04:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006d0a:	0a1b      	lsrs	r3, r3, #8
 8006d0c:	b2da      	uxtb	r2, r3
 8006d0e:	683b      	ldr	r3, [r7, #0]
 8006d10:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006d16:	b2da      	uxtb	r2, r3
 8006d18:	683b      	ldr	r3, [r7, #0]
 8006d1a:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006d20:	0d1b      	lsrs	r3, r3, #20
 8006d22:	b29a      	uxth	r2, r3
 8006d24:	683b      	ldr	r3, [r7, #0]
 8006d26:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006d2c:	0c1b      	lsrs	r3, r3, #16
 8006d2e:	b2db      	uxtb	r3, r3
 8006d30:	f003 030f 	and.w	r3, r3, #15
 8006d34:	b2da      	uxtb	r2, r3
 8006d36:	683b      	ldr	r3, [r7, #0]
 8006d38:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006d3e:	0bdb      	lsrs	r3, r3, #15
 8006d40:	b2db      	uxtb	r3, r3
 8006d42:	f003 0301 	and.w	r3, r3, #1
 8006d46:	b2da      	uxtb	r2, r3
 8006d48:	683b      	ldr	r3, [r7, #0]
 8006d4a:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006d50:	0b9b      	lsrs	r3, r3, #14
 8006d52:	b2db      	uxtb	r3, r3
 8006d54:	f003 0301 	and.w	r3, r3, #1
 8006d58:	b2da      	uxtb	r2, r3
 8006d5a:	683b      	ldr	r3, [r7, #0]
 8006d5c:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006d62:	0b5b      	lsrs	r3, r3, #13
 8006d64:	b2db      	uxtb	r3, r3
 8006d66:	f003 0301 	and.w	r3, r3, #1
 8006d6a:	b2da      	uxtb	r2, r3
 8006d6c:	683b      	ldr	r3, [r7, #0]
 8006d6e:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006d74:	0b1b      	lsrs	r3, r3, #12
 8006d76:	b2db      	uxtb	r3, r3
 8006d78:	f003 0301 	and.w	r3, r3, #1
 8006d7c:	b2da      	uxtb	r2, r3
 8006d7e:	683b      	ldr	r3, [r7, #0]
 8006d80:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8006d82:	683b      	ldr	r3, [r7, #0]
 8006d84:	2200      	movs	r2, #0
 8006d86:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d163      	bne.n	8006e58 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006d94:	009a      	lsls	r2, r3, #2
 8006d96:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006d9a:	4013      	ands	r3, r2
 8006d9c:	687a      	ldr	r2, [r7, #4]
 8006d9e:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8006da0:	0f92      	lsrs	r2, r2, #30
 8006da2:	431a      	orrs	r2, r3
 8006da4:	683b      	ldr	r3, [r7, #0]
 8006da6:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006dac:	0edb      	lsrs	r3, r3, #27
 8006dae:	b2db      	uxtb	r3, r3
 8006db0:	f003 0307 	and.w	r3, r3, #7
 8006db4:	b2da      	uxtb	r2, r3
 8006db6:	683b      	ldr	r3, [r7, #0]
 8006db8:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006dbe:	0e1b      	lsrs	r3, r3, #24
 8006dc0:	b2db      	uxtb	r3, r3
 8006dc2:	f003 0307 	and.w	r3, r3, #7
 8006dc6:	b2da      	uxtb	r2, r3
 8006dc8:	683b      	ldr	r3, [r7, #0]
 8006dca:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006dd0:	0d5b      	lsrs	r3, r3, #21
 8006dd2:	b2db      	uxtb	r3, r3
 8006dd4:	f003 0307 	and.w	r3, r3, #7
 8006dd8:	b2da      	uxtb	r2, r3
 8006dda:	683b      	ldr	r3, [r7, #0]
 8006ddc:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006de2:	0c9b      	lsrs	r3, r3, #18
 8006de4:	b2db      	uxtb	r3, r3
 8006de6:	f003 0307 	and.w	r3, r3, #7
 8006dea:	b2da      	uxtb	r2, r3
 8006dec:	683b      	ldr	r3, [r7, #0]
 8006dee:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006df4:	0bdb      	lsrs	r3, r3, #15
 8006df6:	b2db      	uxtb	r3, r3
 8006df8:	f003 0307 	and.w	r3, r3, #7
 8006dfc:	b2da      	uxtb	r2, r3
 8006dfe:	683b      	ldr	r3, [r7, #0]
 8006e00:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8006e02:	683b      	ldr	r3, [r7, #0]
 8006e04:	691b      	ldr	r3, [r3, #16]
 8006e06:	1c5a      	adds	r2, r3, #1
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8006e0c:	683b      	ldr	r3, [r7, #0]
 8006e0e:	7e1b      	ldrb	r3, [r3, #24]
 8006e10:	b2db      	uxtb	r3, r3
 8006e12:	f003 0307 	and.w	r3, r3, #7
 8006e16:	3302      	adds	r3, #2
 8006e18:	2201      	movs	r2, #1
 8006e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8006e1e:	687a      	ldr	r2, [r7, #4]
 8006e20:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8006e22:	fb03 f202 	mul.w	r2, r3, r2
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8006e2a:	683b      	ldr	r3, [r7, #0]
 8006e2c:	7a1b      	ldrb	r3, [r3, #8]
 8006e2e:	b2db      	uxtb	r3, r3
 8006e30:	f003 030f 	and.w	r3, r3, #15
 8006e34:	2201      	movs	r2, #1
 8006e36:	409a      	lsls	r2, r3
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e40:	687a      	ldr	r2, [r7, #4]
 8006e42:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8006e44:	0a52      	lsrs	r2, r2, #9
 8006e46:	fb03 f202 	mul.w	r2, r3, r2
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006e54:	661a      	str	r2, [r3, #96]	; 0x60
 8006e56:	e031      	b.n	8006ebc <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e5c:	2b01      	cmp	r3, #1
 8006e5e:	d11d      	bne.n	8006e9c <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006e64:	041b      	lsls	r3, r3, #16
 8006e66:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006e6e:	0c1b      	lsrs	r3, r3, #16
 8006e70:	431a      	orrs	r2, r3
 8006e72:	683b      	ldr	r3, [r7, #0]
 8006e74:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8006e76:	683b      	ldr	r3, [r7, #0]
 8006e78:	691b      	ldr	r3, [r3, #16]
 8006e7a:	3301      	adds	r3, #1
 8006e7c:	029a      	lsls	r2, r3, #10
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006e90:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	661a      	str	r2, [r3, #96]	; 0x60
 8006e9a:	e00f      	b.n	8006ebc <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	4a58      	ldr	r2, [pc, #352]	; (8007004 <HAL_SD_GetCardCSD+0x344>)
 8006ea2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ea8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	2201      	movs	r2, #1
 8006eb4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8006eb8:	2301      	movs	r3, #1
 8006eba:	e09d      	b.n	8006ff8 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006ec0:	0b9b      	lsrs	r3, r3, #14
 8006ec2:	b2db      	uxtb	r3, r3
 8006ec4:	f003 0301 	and.w	r3, r3, #1
 8006ec8:	b2da      	uxtb	r2, r3
 8006eca:	683b      	ldr	r3, [r7, #0]
 8006ecc:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006ed2:	09db      	lsrs	r3, r3, #7
 8006ed4:	b2db      	uxtb	r3, r3
 8006ed6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006eda:	b2da      	uxtb	r2, r3
 8006edc:	683b      	ldr	r3, [r7, #0]
 8006ede:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006ee4:	b2db      	uxtb	r3, r3
 8006ee6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006eea:	b2da      	uxtb	r2, r3
 8006eec:	683b      	ldr	r3, [r7, #0]
 8006eee:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ef4:	0fdb      	lsrs	r3, r3, #31
 8006ef6:	b2da      	uxtb	r2, r3
 8006ef8:	683b      	ldr	r3, [r7, #0]
 8006efa:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f00:	0f5b      	lsrs	r3, r3, #29
 8006f02:	b2db      	uxtb	r3, r3
 8006f04:	f003 0303 	and.w	r3, r3, #3
 8006f08:	b2da      	uxtb	r2, r3
 8006f0a:	683b      	ldr	r3, [r7, #0]
 8006f0c:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f12:	0e9b      	lsrs	r3, r3, #26
 8006f14:	b2db      	uxtb	r3, r3
 8006f16:	f003 0307 	and.w	r3, r3, #7
 8006f1a:	b2da      	uxtb	r2, r3
 8006f1c:	683b      	ldr	r3, [r7, #0]
 8006f1e:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f24:	0d9b      	lsrs	r3, r3, #22
 8006f26:	b2db      	uxtb	r3, r3
 8006f28:	f003 030f 	and.w	r3, r3, #15
 8006f2c:	b2da      	uxtb	r2, r3
 8006f2e:	683b      	ldr	r3, [r7, #0]
 8006f30:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f36:	0d5b      	lsrs	r3, r3, #21
 8006f38:	b2db      	uxtb	r3, r3
 8006f3a:	f003 0301 	and.w	r3, r3, #1
 8006f3e:	b2da      	uxtb	r2, r3
 8006f40:	683b      	ldr	r3, [r7, #0]
 8006f42:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8006f46:	683b      	ldr	r3, [r7, #0]
 8006f48:	2200      	movs	r2, #0
 8006f4a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f52:	0c1b      	lsrs	r3, r3, #16
 8006f54:	b2db      	uxtb	r3, r3
 8006f56:	f003 0301 	and.w	r3, r3, #1
 8006f5a:	b2da      	uxtb	r2, r3
 8006f5c:	683b      	ldr	r3, [r7, #0]
 8006f5e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f66:	0bdb      	lsrs	r3, r3, #15
 8006f68:	b2db      	uxtb	r3, r3
 8006f6a:	f003 0301 	and.w	r3, r3, #1
 8006f6e:	b2da      	uxtb	r2, r3
 8006f70:	683b      	ldr	r3, [r7, #0]
 8006f72:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f7a:	0b9b      	lsrs	r3, r3, #14
 8006f7c:	b2db      	uxtb	r3, r3
 8006f7e:	f003 0301 	and.w	r3, r3, #1
 8006f82:	b2da      	uxtb	r2, r3
 8006f84:	683b      	ldr	r3, [r7, #0]
 8006f86:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f8e:	0b5b      	lsrs	r3, r3, #13
 8006f90:	b2db      	uxtb	r3, r3
 8006f92:	f003 0301 	and.w	r3, r3, #1
 8006f96:	b2da      	uxtb	r2, r3
 8006f98:	683b      	ldr	r3, [r7, #0]
 8006f9a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fa2:	0b1b      	lsrs	r3, r3, #12
 8006fa4:	b2db      	uxtb	r3, r3
 8006fa6:	f003 0301 	and.w	r3, r3, #1
 8006faa:	b2da      	uxtb	r2, r3
 8006fac:	683b      	ldr	r3, [r7, #0]
 8006fae:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fb6:	0a9b      	lsrs	r3, r3, #10
 8006fb8:	b2db      	uxtb	r3, r3
 8006fba:	f003 0303 	and.w	r3, r3, #3
 8006fbe:	b2da      	uxtb	r2, r3
 8006fc0:	683b      	ldr	r3, [r7, #0]
 8006fc2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fca:	0a1b      	lsrs	r3, r3, #8
 8006fcc:	b2db      	uxtb	r3, r3
 8006fce:	f003 0303 	and.w	r3, r3, #3
 8006fd2:	b2da      	uxtb	r2, r3
 8006fd4:	683b      	ldr	r3, [r7, #0]
 8006fd6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fde:	085b      	lsrs	r3, r3, #1
 8006fe0:	b2db      	uxtb	r3, r3
 8006fe2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006fe6:	b2da      	uxtb	r2, r3
 8006fe8:	683b      	ldr	r3, [r7, #0]
 8006fea:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8006fee:	683b      	ldr	r3, [r7, #0]
 8006ff0:	2201      	movs	r2, #1
 8006ff2:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8006ff6:	2300      	movs	r3, #0
}
 8006ff8:	4618      	mov	r0, r3
 8006ffa:	370c      	adds	r7, #12
 8006ffc:	46bd      	mov	sp, r7
 8006ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007002:	4770      	bx	lr
 8007004:	004005ff 	.word	0x004005ff

08007008 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8007008:	b480      	push	{r7}
 800700a:	b083      	sub	sp, #12
 800700c:	af00      	add	r7, sp, #0
 800700e:	6078      	str	r0, [r7, #4]
 8007010:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007016:	683b      	ldr	r3, [r7, #0]
 8007018:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800701e:	683b      	ldr	r3, [r7, #0]
 8007020:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007026:	683b      	ldr	r3, [r7, #0]
 8007028:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800702e:	683b      	ldr	r3, [r7, #0]
 8007030:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007036:	683b      	ldr	r3, [r7, #0]
 8007038:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800703e:	683b      	ldr	r3, [r7, #0]
 8007040:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007046:	683b      	ldr	r3, [r7, #0]
 8007048:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800704e:	683b      	ldr	r3, [r7, #0]
 8007050:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8007052:	2300      	movs	r3, #0
}
 8007054:	4618      	mov	r0, r3
 8007056:	370c      	adds	r7, #12
 8007058:	46bd      	mov	sp, r7
 800705a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800705e:	4770      	bx	lr

08007060 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8007060:	b580      	push	{r7, lr}
 8007062:	b086      	sub	sp, #24
 8007064:	af00      	add	r7, sp, #0
 8007066:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8007068:	2300      	movs	r3, #0
 800706a:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800706c:	f107 030c 	add.w	r3, r7, #12
 8007070:	4619      	mov	r1, r3
 8007072:	6878      	ldr	r0, [r7, #4]
 8007074:	f000 fa7e 	bl	8007574 <SD_SendStatus>
 8007078:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800707a:	697b      	ldr	r3, [r7, #20]
 800707c:	2b00      	cmp	r3, #0
 800707e:	d005      	beq.n	800708c <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007084:	697b      	ldr	r3, [r7, #20]
 8007086:	431a      	orrs	r2, r3
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	0a5b      	lsrs	r3, r3, #9
 8007090:	f003 030f 	and.w	r3, r3, #15
 8007094:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8007096:	693b      	ldr	r3, [r7, #16]
}
 8007098:	4618      	mov	r0, r3
 800709a:	3718      	adds	r7, #24
 800709c:	46bd      	mov	sp, r7
 800709e:	bd80      	pop	{r7, pc}

080070a0 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80070a0:	b480      	push	{r7}
 80070a2:	b085      	sub	sp, #20
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070ac:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80070bc:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80070be:	bf00      	nop
 80070c0:	3714      	adds	r7, #20
 80070c2:	46bd      	mov	sp, r7
 80070c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c8:	4770      	bx	lr

080070ca <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80070ca:	b580      	push	{r7, lr}
 80070cc:	b084      	sub	sp, #16
 80070ce:	af00      	add	r7, sp, #0
 80070d0:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070d6:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070dc:	2b82      	cmp	r3, #130	; 0x82
 80070de:	d111      	bne.n	8007104 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	4618      	mov	r0, r3
 80070e6:	f002 f92f 	bl	8009348 <SDMMC_CmdStopTransfer>
 80070ea:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 80070ec:	68bb      	ldr	r3, [r7, #8]
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d008      	beq.n	8007104 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80070f6:	68bb      	ldr	r3, [r7, #8]
 80070f8:	431a      	orrs	r2, r3
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 80070fe:	68f8      	ldr	r0, [r7, #12]
 8007100:	f7ff fdd4 	bl	8006cac <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	f022 0208 	bic.w	r2, r2, #8
 8007112:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	f240 523a 	movw	r2, #1338	; 0x53a
 800711c:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	2201      	movs	r2, #1
 8007122:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	2200      	movs	r2, #0
 800712a:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 800712c:	68f8      	ldr	r0, [r7, #12]
 800712e:	f002 fd4f 	bl	8009bd0 <HAL_SD_RxCpltCallback>
#endif
}
 8007132:	bf00      	nop
 8007134:	3710      	adds	r7, #16
 8007136:	46bd      	mov	sp, r7
 8007138:	bd80      	pop	{r7, pc}
	...

0800713c <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 800713c:	b580      	push	{r7, lr}
 800713e:	b086      	sub	sp, #24
 8007140:	af00      	add	r7, sp, #0
 8007142:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007148:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800714a:	6878      	ldr	r0, [r7, #4]
 800714c:	f7fc f94c 	bl	80033e8 <HAL_DMA_GetError>
 8007150:	4603      	mov	r3, r0
 8007152:	2b02      	cmp	r3, #2
 8007154:	d03e      	beq.n	80071d4 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8007156:	697b      	ldr	r3, [r7, #20]
 8007158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800715a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800715c:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 800715e:	697b      	ldr	r3, [r7, #20]
 8007160:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007162:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007164:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8007166:	693b      	ldr	r3, [r7, #16]
 8007168:	2b01      	cmp	r3, #1
 800716a:	d002      	beq.n	8007172 <SD_DMAError+0x36>
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	2b01      	cmp	r3, #1
 8007170:	d12d      	bne.n	80071ce <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007172:	697b      	ldr	r3, [r7, #20]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	4a19      	ldr	r2, [pc, #100]	; (80071dc <SD_DMAError+0xa0>)
 8007178:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800717a:	697b      	ldr	r3, [r7, #20]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007180:	697b      	ldr	r3, [r7, #20]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8007188:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800718a:	697b      	ldr	r3, [r7, #20]
 800718c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800718e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007192:	697b      	ldr	r3, [r7, #20]
 8007194:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8007196:	6978      	ldr	r0, [r7, #20]
 8007198:	f7ff ff62 	bl	8007060 <HAL_SD_GetCardState>
 800719c:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800719e:	68bb      	ldr	r3, [r7, #8]
 80071a0:	2b06      	cmp	r3, #6
 80071a2:	d002      	beq.n	80071aa <SD_DMAError+0x6e>
 80071a4:	68bb      	ldr	r3, [r7, #8]
 80071a6:	2b05      	cmp	r3, #5
 80071a8:	d10a      	bne.n	80071c0 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80071aa:	697b      	ldr	r3, [r7, #20]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	4618      	mov	r0, r3
 80071b0:	f002 f8ca 	bl	8009348 <SDMMC_CmdStopTransfer>
 80071b4:	4602      	mov	r2, r0
 80071b6:	697b      	ldr	r3, [r7, #20]
 80071b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071ba:	431a      	orrs	r2, r3
 80071bc:	697b      	ldr	r3, [r7, #20]
 80071be:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 80071c0:	697b      	ldr	r3, [r7, #20]
 80071c2:	2201      	movs	r2, #1
 80071c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80071c8:	697b      	ldr	r3, [r7, #20]
 80071ca:	2200      	movs	r2, #0
 80071cc:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 80071ce:	6978      	ldr	r0, [r7, #20]
 80071d0:	f7ff fd6c 	bl	8006cac <HAL_SD_ErrorCallback>
#endif
  }
}
 80071d4:	bf00      	nop
 80071d6:	3718      	adds	r7, #24
 80071d8:	46bd      	mov	sp, r7
 80071da:	bd80      	pop	{r7, pc}
 80071dc:	004005ff 	.word	0x004005ff

080071e0 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 80071e0:	b580      	push	{r7, lr}
 80071e2:	b084      	sub	sp, #16
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071ec:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	f240 523a 	movw	r2, #1338	; 0x53a
 80071f6:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 80071f8:	68f8      	ldr	r0, [r7, #12]
 80071fa:	f7ff ff31 	bl	8007060 <HAL_SD_GetCardState>
 80071fe:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	2201      	movs	r2, #1
 8007204:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	2200      	movs	r2, #0
 800720c:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800720e:	68bb      	ldr	r3, [r7, #8]
 8007210:	2b06      	cmp	r3, #6
 8007212:	d002      	beq.n	800721a <SD_DMATxAbort+0x3a>
 8007214:	68bb      	ldr	r3, [r7, #8]
 8007216:	2b05      	cmp	r3, #5
 8007218:	d10a      	bne.n	8007230 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	4618      	mov	r0, r3
 8007220:	f002 f892 	bl	8009348 <SDMMC_CmdStopTransfer>
 8007224:	4602      	mov	r2, r0
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800722a:	431a      	orrs	r2, r3
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007234:	2b00      	cmp	r3, #0
 8007236:	d103      	bne.n	8007240 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8007238:	68f8      	ldr	r0, [r7, #12]
 800723a:	f002 fcb5 	bl	8009ba8 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800723e:	e002      	b.n	8007246 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8007240:	68f8      	ldr	r0, [r7, #12]
 8007242:	f7ff fd33 	bl	8006cac <HAL_SD_ErrorCallback>
}
 8007246:	bf00      	nop
 8007248:	3710      	adds	r7, #16
 800724a:	46bd      	mov	sp, r7
 800724c:	bd80      	pop	{r7, pc}

0800724e <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 800724e:	b580      	push	{r7, lr}
 8007250:	b084      	sub	sp, #16
 8007252:	af00      	add	r7, sp, #0
 8007254:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800725a:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	f240 523a 	movw	r2, #1338	; 0x53a
 8007264:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8007266:	68f8      	ldr	r0, [r7, #12]
 8007268:	f7ff fefa 	bl	8007060 <HAL_SD_GetCardState>
 800726c:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	2201      	movs	r2, #1
 8007272:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	2200      	movs	r2, #0
 800727a:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800727c:	68bb      	ldr	r3, [r7, #8]
 800727e:	2b06      	cmp	r3, #6
 8007280:	d002      	beq.n	8007288 <SD_DMARxAbort+0x3a>
 8007282:	68bb      	ldr	r3, [r7, #8]
 8007284:	2b05      	cmp	r3, #5
 8007286:	d10a      	bne.n	800729e <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	4618      	mov	r0, r3
 800728e:	f002 f85b 	bl	8009348 <SDMMC_CmdStopTransfer>
 8007292:	4602      	mov	r2, r0
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007298:	431a      	orrs	r2, r3
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d103      	bne.n	80072ae <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 80072a6:	68f8      	ldr	r0, [r7, #12]
 80072a8:	f002 fc7e 	bl	8009ba8 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 80072ac:	e002      	b.n	80072b4 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 80072ae:	68f8      	ldr	r0, [r7, #12]
 80072b0:	f7ff fcfc 	bl	8006cac <HAL_SD_ErrorCallback>
}
 80072b4:	bf00      	nop
 80072b6:	3710      	adds	r7, #16
 80072b8:	46bd      	mov	sp, r7
 80072ba:	bd80      	pop	{r7, pc}

080072bc <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80072bc:	b5b0      	push	{r4, r5, r7, lr}
 80072be:	b094      	sub	sp, #80	; 0x50
 80072c0:	af04      	add	r7, sp, #16
 80072c2:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 80072c4:	2301      	movs	r3, #1
 80072c6:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	4618      	mov	r0, r3
 80072ce:	f001 ff0c 	bl	80090ea <SDIO_GetPowerState>
 80072d2:	4603      	mov	r3, r0
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d102      	bne.n	80072de <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80072d8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80072dc:	e0b8      	b.n	8007450 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072e2:	2b03      	cmp	r3, #3
 80072e4:	d02f      	beq.n	8007346 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	4618      	mov	r0, r3
 80072ec:	f002 f8f3 	bl	80094d6 <SDMMC_CmdSendCID>
 80072f0:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80072f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d001      	beq.n	80072fc <SD_InitCard+0x40>
    {
      return errorstate;
 80072f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80072fa:	e0a9      	b.n	8007450 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	2100      	movs	r1, #0
 8007302:	4618      	mov	r0, r3
 8007304:	f001 ff36 	bl	8009174 <SDIO_GetResponse>
 8007308:	4602      	mov	r2, r0
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	2104      	movs	r1, #4
 8007314:	4618      	mov	r0, r3
 8007316:	f001 ff2d 	bl	8009174 <SDIO_GetResponse>
 800731a:	4602      	mov	r2, r0
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	2108      	movs	r1, #8
 8007326:	4618      	mov	r0, r3
 8007328:	f001 ff24 	bl	8009174 <SDIO_GetResponse>
 800732c:	4602      	mov	r2, r0
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	210c      	movs	r1, #12
 8007338:	4618      	mov	r0, r3
 800733a:	f001 ff1b 	bl	8009174 <SDIO_GetResponse>
 800733e:	4602      	mov	r2, r0
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800734a:	2b03      	cmp	r3, #3
 800734c:	d00d      	beq.n	800736a <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	f107 020e 	add.w	r2, r7, #14
 8007356:	4611      	mov	r1, r2
 8007358:	4618      	mov	r0, r3
 800735a:	f002 f8f9 	bl	8009550 <SDMMC_CmdSetRelAdd>
 800735e:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8007360:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007362:	2b00      	cmp	r3, #0
 8007364:	d001      	beq.n	800736a <SD_InitCard+0xae>
    {
      return errorstate;
 8007366:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007368:	e072      	b.n	8007450 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800736e:	2b03      	cmp	r3, #3
 8007370:	d036      	beq.n	80073e0 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8007372:	89fb      	ldrh	r3, [r7, #14]
 8007374:	461a      	mov	r2, r3
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681a      	ldr	r2, [r3, #0]
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007382:	041b      	lsls	r3, r3, #16
 8007384:	4619      	mov	r1, r3
 8007386:	4610      	mov	r0, r2
 8007388:	f002 f8c3 	bl	8009512 <SDMMC_CmdSendCSD>
 800738c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800738e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007390:	2b00      	cmp	r3, #0
 8007392:	d001      	beq.n	8007398 <SD_InitCard+0xdc>
    {
      return errorstate;
 8007394:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007396:	e05b      	b.n	8007450 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	2100      	movs	r1, #0
 800739e:	4618      	mov	r0, r3
 80073a0:	f001 fee8 	bl	8009174 <SDIO_GetResponse>
 80073a4:	4602      	mov	r2, r0
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	2104      	movs	r1, #4
 80073b0:	4618      	mov	r0, r3
 80073b2:	f001 fedf 	bl	8009174 <SDIO_GetResponse>
 80073b6:	4602      	mov	r2, r0
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	2108      	movs	r1, #8
 80073c2:	4618      	mov	r0, r3
 80073c4:	f001 fed6 	bl	8009174 <SDIO_GetResponse>
 80073c8:	4602      	mov	r2, r0
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	210c      	movs	r1, #12
 80073d4:	4618      	mov	r0, r3
 80073d6:	f001 fecd 	bl	8009174 <SDIO_GetResponse>
 80073da:	4602      	mov	r2, r0
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	2104      	movs	r1, #4
 80073e6:	4618      	mov	r0, r3
 80073e8:	f001 fec4 	bl	8009174 <SDIO_GetResponse>
 80073ec:	4603      	mov	r3, r0
 80073ee:	0d1a      	lsrs	r2, r3, #20
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80073f4:	f107 0310 	add.w	r3, r7, #16
 80073f8:	4619      	mov	r1, r3
 80073fa:	6878      	ldr	r0, [r7, #4]
 80073fc:	f7ff fc60 	bl	8006cc0 <HAL_SD_GetCardCSD>
 8007400:	4603      	mov	r3, r0
 8007402:	2b00      	cmp	r3, #0
 8007404:	d002      	beq.n	800740c <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007406:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800740a:	e021      	b.n	8007450 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	6819      	ldr	r1, [r3, #0]
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007414:	041b      	lsls	r3, r3, #16
 8007416:	2200      	movs	r2, #0
 8007418:	461c      	mov	r4, r3
 800741a:	4615      	mov	r5, r2
 800741c:	4622      	mov	r2, r4
 800741e:	462b      	mov	r3, r5
 8007420:	4608      	mov	r0, r1
 8007422:	f001 ffb3 	bl	800938c <SDMMC_CmdSelDesel>
 8007426:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8007428:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800742a:	2b00      	cmp	r3, #0
 800742c:	d001      	beq.n	8007432 <SD_InitCard+0x176>
  {
    return errorstate;
 800742e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007430:	e00e      	b.n	8007450 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681d      	ldr	r5, [r3, #0]
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	466c      	mov	r4, sp
 800743a:	f103 0210 	add.w	r2, r3, #16
 800743e:	ca07      	ldmia	r2, {r0, r1, r2}
 8007440:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007444:	3304      	adds	r3, #4
 8007446:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007448:	4628      	mov	r0, r5
 800744a:	f001 fdf7 	bl	800903c <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800744e:	2300      	movs	r3, #0
}
 8007450:	4618      	mov	r0, r3
 8007452:	3740      	adds	r7, #64	; 0x40
 8007454:	46bd      	mov	sp, r7
 8007456:	bdb0      	pop	{r4, r5, r7, pc}

08007458 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8007458:	b580      	push	{r7, lr}
 800745a:	b086      	sub	sp, #24
 800745c:	af00      	add	r7, sp, #0
 800745e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007460:	2300      	movs	r3, #0
 8007462:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8007464:	2300      	movs	r3, #0
 8007466:	617b      	str	r3, [r7, #20]
 8007468:	2300      	movs	r3, #0
 800746a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	4618      	mov	r0, r3
 8007472:	f001 ffae 	bl	80093d2 <SDMMC_CmdGoIdleState>
 8007476:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	2b00      	cmp	r3, #0
 800747c:	d001      	beq.n	8007482 <SD_PowerON+0x2a>
  {
    return errorstate;
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	e072      	b.n	8007568 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	4618      	mov	r0, r3
 8007488:	f001 ffc1 	bl	800940e <SDMMC_CmdOperCond>
 800748c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	2b00      	cmp	r3, #0
 8007492:	d00d      	beq.n	80074b0 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	2200      	movs	r2, #0
 8007498:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	4618      	mov	r0, r3
 80074a0:	f001 ff97 	bl	80093d2 <SDMMC_CmdGoIdleState>
 80074a4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d004      	beq.n	80074b6 <SD_PowerON+0x5e>
    {
      return errorstate;
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	e05b      	b.n	8007568 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	2201      	movs	r2, #1
 80074b4:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80074ba:	2b01      	cmp	r3, #1
 80074bc:	d137      	bne.n	800752e <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	2100      	movs	r1, #0
 80074c4:	4618      	mov	r0, r3
 80074c6:	f001 ffc1 	bl	800944c <SDMMC_CmdAppCommand>
 80074ca:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d02d      	beq.n	800752e <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80074d2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80074d6:	e047      	b.n	8007568 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	2100      	movs	r1, #0
 80074de:	4618      	mov	r0, r3
 80074e0:	f001 ffb4 	bl	800944c <SDMMC_CmdAppCommand>
 80074e4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d001      	beq.n	80074f0 <SD_PowerON+0x98>
    {
      return errorstate;
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	e03b      	b.n	8007568 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	491e      	ldr	r1, [pc, #120]	; (8007570 <SD_PowerON+0x118>)
 80074f6:	4618      	mov	r0, r3
 80074f8:	f001 ffca 	bl	8009490 <SDMMC_CmdAppOperCommand>
 80074fc:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	2b00      	cmp	r3, #0
 8007502:	d002      	beq.n	800750a <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007504:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007508:	e02e      	b.n	8007568 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	2100      	movs	r1, #0
 8007510:	4618      	mov	r0, r3
 8007512:	f001 fe2f 	bl	8009174 <SDIO_GetResponse>
 8007516:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8007518:	697b      	ldr	r3, [r7, #20]
 800751a:	0fdb      	lsrs	r3, r3, #31
 800751c:	2b01      	cmp	r3, #1
 800751e:	d101      	bne.n	8007524 <SD_PowerON+0xcc>
 8007520:	2301      	movs	r3, #1
 8007522:	e000      	b.n	8007526 <SD_PowerON+0xce>
 8007524:	2300      	movs	r3, #0
 8007526:	613b      	str	r3, [r7, #16]

    count++;
 8007528:	68bb      	ldr	r3, [r7, #8]
 800752a:	3301      	adds	r3, #1
 800752c:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800752e:	68bb      	ldr	r3, [r7, #8]
 8007530:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8007534:	4293      	cmp	r3, r2
 8007536:	d802      	bhi.n	800753e <SD_PowerON+0xe6>
 8007538:	693b      	ldr	r3, [r7, #16]
 800753a:	2b00      	cmp	r3, #0
 800753c:	d0cc      	beq.n	80074d8 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800753e:	68bb      	ldr	r3, [r7, #8]
 8007540:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8007544:	4293      	cmp	r3, r2
 8007546:	d902      	bls.n	800754e <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8007548:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800754c:	e00c      	b.n	8007568 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800754e:	697b      	ldr	r3, [r7, #20]
 8007550:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007554:	2b00      	cmp	r3, #0
 8007556:	d003      	beq.n	8007560 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	2201      	movs	r2, #1
 800755c:	645a      	str	r2, [r3, #68]	; 0x44
 800755e:	e002      	b.n	8007566 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	2200      	movs	r2, #0
 8007564:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8007566:	2300      	movs	r3, #0
}
 8007568:	4618      	mov	r0, r3
 800756a:	3718      	adds	r7, #24
 800756c:	46bd      	mov	sp, r7
 800756e:	bd80      	pop	{r7, pc}
 8007570:	c1100000 	.word	0xc1100000

08007574 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8007574:	b580      	push	{r7, lr}
 8007576:	b084      	sub	sp, #16
 8007578:	af00      	add	r7, sp, #0
 800757a:	6078      	str	r0, [r7, #4]
 800757c:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800757e:	683b      	ldr	r3, [r7, #0]
 8007580:	2b00      	cmp	r3, #0
 8007582:	d102      	bne.n	800758a <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8007584:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007588:	e018      	b.n	80075bc <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681a      	ldr	r2, [r3, #0]
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007592:	041b      	lsls	r3, r3, #16
 8007594:	4619      	mov	r1, r3
 8007596:	4610      	mov	r0, r2
 8007598:	f001 fffb 	bl	8009592 <SDMMC_CmdSendStatus>
 800759c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d001      	beq.n	80075a8 <SD_SendStatus+0x34>
  {
    return errorstate;
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	e009      	b.n	80075bc <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	2100      	movs	r1, #0
 80075ae:	4618      	mov	r0, r3
 80075b0:	f001 fde0 	bl	8009174 <SDIO_GetResponse>
 80075b4:	4602      	mov	r2, r0
 80075b6:	683b      	ldr	r3, [r7, #0]
 80075b8:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 80075ba:	2300      	movs	r3, #0
}
 80075bc:	4618      	mov	r0, r3
 80075be:	3710      	adds	r7, #16
 80075c0:	46bd      	mov	sp, r7
 80075c2:	bd80      	pop	{r7, pc}

080075c4 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 80075c4:	b580      	push	{r7, lr}
 80075c6:	b086      	sub	sp, #24
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075d0:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075d6:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 80075d8:	693b      	ldr	r3, [r7, #16]
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d03f      	beq.n	800765e <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 80075de:	2300      	movs	r3, #0
 80075e0:	617b      	str	r3, [r7, #20]
 80075e2:	e033      	b.n	800764c <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	4618      	mov	r0, r3
 80075ea:	f001 fd52 	bl	8009092 <SDIO_ReadFIFO>
 80075ee:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 80075f0:	68bb      	ldr	r3, [r7, #8]
 80075f2:	b2da      	uxtb	r2, r3
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	701a      	strb	r2, [r3, #0]
      tmp++;
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	3301      	adds	r3, #1
 80075fc:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80075fe:	693b      	ldr	r3, [r7, #16]
 8007600:	3b01      	subs	r3, #1
 8007602:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8007604:	68bb      	ldr	r3, [r7, #8]
 8007606:	0a1b      	lsrs	r3, r3, #8
 8007608:	b2da      	uxtb	r2, r3
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	701a      	strb	r2, [r3, #0]
      tmp++;
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	3301      	adds	r3, #1
 8007612:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007614:	693b      	ldr	r3, [r7, #16]
 8007616:	3b01      	subs	r3, #1
 8007618:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800761a:	68bb      	ldr	r3, [r7, #8]
 800761c:	0c1b      	lsrs	r3, r3, #16
 800761e:	b2da      	uxtb	r2, r3
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	701a      	strb	r2, [r3, #0]
      tmp++;
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	3301      	adds	r3, #1
 8007628:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800762a:	693b      	ldr	r3, [r7, #16]
 800762c:	3b01      	subs	r3, #1
 800762e:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8007630:	68bb      	ldr	r3, [r7, #8]
 8007632:	0e1b      	lsrs	r3, r3, #24
 8007634:	b2da      	uxtb	r2, r3
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	701a      	strb	r2, [r3, #0]
      tmp++;
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	3301      	adds	r3, #1
 800763e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007640:	693b      	ldr	r3, [r7, #16]
 8007642:	3b01      	subs	r3, #1
 8007644:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8007646:	697b      	ldr	r3, [r7, #20]
 8007648:	3301      	adds	r3, #1
 800764a:	617b      	str	r3, [r7, #20]
 800764c:	697b      	ldr	r3, [r7, #20]
 800764e:	2b07      	cmp	r3, #7
 8007650:	d9c8      	bls.n	80075e4 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	68fa      	ldr	r2, [r7, #12]
 8007656:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	693a      	ldr	r2, [r7, #16]
 800765c:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 800765e:	bf00      	nop
 8007660:	3718      	adds	r7, #24
 8007662:	46bd      	mov	sp, r7
 8007664:	bd80      	pop	{r7, pc}

08007666 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8007666:	b580      	push	{r7, lr}
 8007668:	b086      	sub	sp, #24
 800766a:	af00      	add	r7, sp, #0
 800766c:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	6a1b      	ldr	r3, [r3, #32]
 8007672:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007678:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800767a:	693b      	ldr	r3, [r7, #16]
 800767c:	2b00      	cmp	r3, #0
 800767e:	d043      	beq.n	8007708 <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8007680:	2300      	movs	r3, #0
 8007682:	617b      	str	r3, [r7, #20]
 8007684:	e037      	b.n	80076f6 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	781b      	ldrb	r3, [r3, #0]
 800768a:	60bb      	str	r3, [r7, #8]
      tmp++;
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	3301      	adds	r3, #1
 8007690:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007692:	693b      	ldr	r3, [r7, #16]
 8007694:	3b01      	subs	r3, #1
 8007696:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	781b      	ldrb	r3, [r3, #0]
 800769c:	021a      	lsls	r2, r3, #8
 800769e:	68bb      	ldr	r3, [r7, #8]
 80076a0:	4313      	orrs	r3, r2
 80076a2:	60bb      	str	r3, [r7, #8]
      tmp++;
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	3301      	adds	r3, #1
 80076a8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80076aa:	693b      	ldr	r3, [r7, #16]
 80076ac:	3b01      	subs	r3, #1
 80076ae:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	781b      	ldrb	r3, [r3, #0]
 80076b4:	041a      	lsls	r2, r3, #16
 80076b6:	68bb      	ldr	r3, [r7, #8]
 80076b8:	4313      	orrs	r3, r2
 80076ba:	60bb      	str	r3, [r7, #8]
      tmp++;
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	3301      	adds	r3, #1
 80076c0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80076c2:	693b      	ldr	r3, [r7, #16]
 80076c4:	3b01      	subs	r3, #1
 80076c6:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	781b      	ldrb	r3, [r3, #0]
 80076cc:	061a      	lsls	r2, r3, #24
 80076ce:	68bb      	ldr	r3, [r7, #8]
 80076d0:	4313      	orrs	r3, r2
 80076d2:	60bb      	str	r3, [r7, #8]
      tmp++;
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	3301      	adds	r3, #1
 80076d8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80076da:	693b      	ldr	r3, [r7, #16]
 80076dc:	3b01      	subs	r3, #1
 80076de:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	f107 0208 	add.w	r2, r7, #8
 80076e8:	4611      	mov	r1, r2
 80076ea:	4618      	mov	r0, r3
 80076ec:	f001 fcde 	bl	80090ac <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 80076f0:	697b      	ldr	r3, [r7, #20]
 80076f2:	3301      	adds	r3, #1
 80076f4:	617b      	str	r3, [r7, #20]
 80076f6:	697b      	ldr	r3, [r7, #20]
 80076f8:	2b07      	cmp	r3, #7
 80076fa:	d9c4      	bls.n	8007686 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	68fa      	ldr	r2, [r7, #12]
 8007700:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	693a      	ldr	r2, [r7, #16]
 8007706:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 8007708:	bf00      	nop
 800770a:	3718      	adds	r7, #24
 800770c:	46bd      	mov	sp, r7
 800770e:	bd80      	pop	{r7, pc}

08007710 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007710:	b580      	push	{r7, lr}
 8007712:	b082      	sub	sp, #8
 8007714:	af00      	add	r7, sp, #0
 8007716:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	2b00      	cmp	r3, #0
 800771c:	d101      	bne.n	8007722 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800771e:	2301      	movs	r3, #1
 8007720:	e041      	b.n	80077a6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007728:	b2db      	uxtb	r3, r3
 800772a:	2b00      	cmp	r3, #0
 800772c:	d106      	bne.n	800773c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	2200      	movs	r2, #0
 8007732:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007736:	6878      	ldr	r0, [r7, #4]
 8007738:	f7fa f984 	bl	8001a44 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	2202      	movs	r2, #2
 8007740:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681a      	ldr	r2, [r3, #0]
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	3304      	adds	r3, #4
 800774c:	4619      	mov	r1, r3
 800774e:	4610      	mov	r0, r2
 8007750:	f000 fa96 	bl	8007c80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	2201      	movs	r2, #1
 8007758:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	2201      	movs	r2, #1
 8007760:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	2201      	movs	r2, #1
 8007768:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	2201      	movs	r2, #1
 8007770:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	2201      	movs	r2, #1
 8007778:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	2201      	movs	r2, #1
 8007780:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	2201      	movs	r2, #1
 8007788:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	2201      	movs	r2, #1
 8007790:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	2201      	movs	r2, #1
 8007798:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	2201      	movs	r2, #1
 80077a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80077a4:	2300      	movs	r3, #0
}
 80077a6:	4618      	mov	r0, r3
 80077a8:	3708      	adds	r7, #8
 80077aa:	46bd      	mov	sp, r7
 80077ac:	bd80      	pop	{r7, pc}
	...

080077b0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80077b0:	b480      	push	{r7}
 80077b2:	b085      	sub	sp, #20
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80077be:	b2db      	uxtb	r3, r3
 80077c0:	2b01      	cmp	r3, #1
 80077c2:	d001      	beq.n	80077c8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80077c4:	2301      	movs	r3, #1
 80077c6:	e04e      	b.n	8007866 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	2202      	movs	r2, #2
 80077cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	68da      	ldr	r2, [r3, #12]
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	f042 0201 	orr.w	r2, r2, #1
 80077de:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	4a23      	ldr	r2, [pc, #140]	; (8007874 <HAL_TIM_Base_Start_IT+0xc4>)
 80077e6:	4293      	cmp	r3, r2
 80077e8:	d022      	beq.n	8007830 <HAL_TIM_Base_Start_IT+0x80>
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80077f2:	d01d      	beq.n	8007830 <HAL_TIM_Base_Start_IT+0x80>
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	4a1f      	ldr	r2, [pc, #124]	; (8007878 <HAL_TIM_Base_Start_IT+0xc8>)
 80077fa:	4293      	cmp	r3, r2
 80077fc:	d018      	beq.n	8007830 <HAL_TIM_Base_Start_IT+0x80>
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	4a1e      	ldr	r2, [pc, #120]	; (800787c <HAL_TIM_Base_Start_IT+0xcc>)
 8007804:	4293      	cmp	r3, r2
 8007806:	d013      	beq.n	8007830 <HAL_TIM_Base_Start_IT+0x80>
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	4a1c      	ldr	r2, [pc, #112]	; (8007880 <HAL_TIM_Base_Start_IT+0xd0>)
 800780e:	4293      	cmp	r3, r2
 8007810:	d00e      	beq.n	8007830 <HAL_TIM_Base_Start_IT+0x80>
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	4a1b      	ldr	r2, [pc, #108]	; (8007884 <HAL_TIM_Base_Start_IT+0xd4>)
 8007818:	4293      	cmp	r3, r2
 800781a:	d009      	beq.n	8007830 <HAL_TIM_Base_Start_IT+0x80>
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	4a19      	ldr	r2, [pc, #100]	; (8007888 <HAL_TIM_Base_Start_IT+0xd8>)
 8007822:	4293      	cmp	r3, r2
 8007824:	d004      	beq.n	8007830 <HAL_TIM_Base_Start_IT+0x80>
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	4a18      	ldr	r2, [pc, #96]	; (800788c <HAL_TIM_Base_Start_IT+0xdc>)
 800782c:	4293      	cmp	r3, r2
 800782e:	d111      	bne.n	8007854 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	689b      	ldr	r3, [r3, #8]
 8007836:	f003 0307 	and.w	r3, r3, #7
 800783a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	2b06      	cmp	r3, #6
 8007840:	d010      	beq.n	8007864 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	681a      	ldr	r2, [r3, #0]
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	f042 0201 	orr.w	r2, r2, #1
 8007850:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007852:	e007      	b.n	8007864 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	681a      	ldr	r2, [r3, #0]
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	f042 0201 	orr.w	r2, r2, #1
 8007862:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007864:	2300      	movs	r3, #0
}
 8007866:	4618      	mov	r0, r3
 8007868:	3714      	adds	r7, #20
 800786a:	46bd      	mov	sp, r7
 800786c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007870:	4770      	bx	lr
 8007872:	bf00      	nop
 8007874:	40010000 	.word	0x40010000
 8007878:	40000400 	.word	0x40000400
 800787c:	40000800 	.word	0x40000800
 8007880:	40000c00 	.word	0x40000c00
 8007884:	40010400 	.word	0x40010400
 8007888:	40014000 	.word	0x40014000
 800788c:	40001800 	.word	0x40001800

08007890 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007890:	b580      	push	{r7, lr}
 8007892:	b082      	sub	sp, #8
 8007894:	af00      	add	r7, sp, #0
 8007896:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	691b      	ldr	r3, [r3, #16]
 800789e:	f003 0302 	and.w	r3, r3, #2
 80078a2:	2b02      	cmp	r3, #2
 80078a4:	d122      	bne.n	80078ec <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	68db      	ldr	r3, [r3, #12]
 80078ac:	f003 0302 	and.w	r3, r3, #2
 80078b0:	2b02      	cmp	r3, #2
 80078b2:	d11b      	bne.n	80078ec <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	f06f 0202 	mvn.w	r2, #2
 80078bc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	2201      	movs	r2, #1
 80078c2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	699b      	ldr	r3, [r3, #24]
 80078ca:	f003 0303 	and.w	r3, r3, #3
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d003      	beq.n	80078da <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80078d2:	6878      	ldr	r0, [r7, #4]
 80078d4:	f000 f9b5 	bl	8007c42 <HAL_TIM_IC_CaptureCallback>
 80078d8:	e005      	b.n	80078e6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80078da:	6878      	ldr	r0, [r7, #4]
 80078dc:	f000 f9a7 	bl	8007c2e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80078e0:	6878      	ldr	r0, [r7, #4]
 80078e2:	f000 f9b8 	bl	8007c56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	2200      	movs	r2, #0
 80078ea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	691b      	ldr	r3, [r3, #16]
 80078f2:	f003 0304 	and.w	r3, r3, #4
 80078f6:	2b04      	cmp	r3, #4
 80078f8:	d122      	bne.n	8007940 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	68db      	ldr	r3, [r3, #12]
 8007900:	f003 0304 	and.w	r3, r3, #4
 8007904:	2b04      	cmp	r3, #4
 8007906:	d11b      	bne.n	8007940 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	f06f 0204 	mvn.w	r2, #4
 8007910:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	2202      	movs	r2, #2
 8007916:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	699b      	ldr	r3, [r3, #24]
 800791e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007922:	2b00      	cmp	r3, #0
 8007924:	d003      	beq.n	800792e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007926:	6878      	ldr	r0, [r7, #4]
 8007928:	f000 f98b 	bl	8007c42 <HAL_TIM_IC_CaptureCallback>
 800792c:	e005      	b.n	800793a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800792e:	6878      	ldr	r0, [r7, #4]
 8007930:	f000 f97d 	bl	8007c2e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007934:	6878      	ldr	r0, [r7, #4]
 8007936:	f000 f98e 	bl	8007c56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	2200      	movs	r2, #0
 800793e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	691b      	ldr	r3, [r3, #16]
 8007946:	f003 0308 	and.w	r3, r3, #8
 800794a:	2b08      	cmp	r3, #8
 800794c:	d122      	bne.n	8007994 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	68db      	ldr	r3, [r3, #12]
 8007954:	f003 0308 	and.w	r3, r3, #8
 8007958:	2b08      	cmp	r3, #8
 800795a:	d11b      	bne.n	8007994 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	f06f 0208 	mvn.w	r2, #8
 8007964:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	2204      	movs	r2, #4
 800796a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	69db      	ldr	r3, [r3, #28]
 8007972:	f003 0303 	and.w	r3, r3, #3
 8007976:	2b00      	cmp	r3, #0
 8007978:	d003      	beq.n	8007982 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800797a:	6878      	ldr	r0, [r7, #4]
 800797c:	f000 f961 	bl	8007c42 <HAL_TIM_IC_CaptureCallback>
 8007980:	e005      	b.n	800798e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007982:	6878      	ldr	r0, [r7, #4]
 8007984:	f000 f953 	bl	8007c2e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007988:	6878      	ldr	r0, [r7, #4]
 800798a:	f000 f964 	bl	8007c56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	2200      	movs	r2, #0
 8007992:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	691b      	ldr	r3, [r3, #16]
 800799a:	f003 0310 	and.w	r3, r3, #16
 800799e:	2b10      	cmp	r3, #16
 80079a0:	d122      	bne.n	80079e8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	68db      	ldr	r3, [r3, #12]
 80079a8:	f003 0310 	and.w	r3, r3, #16
 80079ac:	2b10      	cmp	r3, #16
 80079ae:	d11b      	bne.n	80079e8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	f06f 0210 	mvn.w	r2, #16
 80079b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	2208      	movs	r2, #8
 80079be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	69db      	ldr	r3, [r3, #28]
 80079c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d003      	beq.n	80079d6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80079ce:	6878      	ldr	r0, [r7, #4]
 80079d0:	f000 f937 	bl	8007c42 <HAL_TIM_IC_CaptureCallback>
 80079d4:	e005      	b.n	80079e2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80079d6:	6878      	ldr	r0, [r7, #4]
 80079d8:	f000 f929 	bl	8007c2e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80079dc:	6878      	ldr	r0, [r7, #4]
 80079de:	f000 f93a 	bl	8007c56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	2200      	movs	r2, #0
 80079e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	691b      	ldr	r3, [r3, #16]
 80079ee:	f003 0301 	and.w	r3, r3, #1
 80079f2:	2b01      	cmp	r3, #1
 80079f4:	d10e      	bne.n	8007a14 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	68db      	ldr	r3, [r3, #12]
 80079fc:	f003 0301 	and.w	r3, r3, #1
 8007a00:	2b01      	cmp	r3, #1
 8007a02:	d107      	bne.n	8007a14 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	f06f 0201 	mvn.w	r2, #1
 8007a0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007a0e:	6878      	ldr	r0, [r7, #4]
 8007a10:	f7f9 ffa8 	bl	8001964 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	691b      	ldr	r3, [r3, #16]
 8007a1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a1e:	2b80      	cmp	r3, #128	; 0x80
 8007a20:	d10e      	bne.n	8007a40 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	68db      	ldr	r3, [r3, #12]
 8007a28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a2c:	2b80      	cmp	r3, #128	; 0x80
 8007a2e:	d107      	bne.n	8007a40 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007a38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007a3a:	6878      	ldr	r0, [r7, #4]
 8007a3c:	f000 fae0 	bl	8008000 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	691b      	ldr	r3, [r3, #16]
 8007a46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a4a:	2b40      	cmp	r3, #64	; 0x40
 8007a4c:	d10e      	bne.n	8007a6c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	68db      	ldr	r3, [r3, #12]
 8007a54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a58:	2b40      	cmp	r3, #64	; 0x40
 8007a5a:	d107      	bne.n	8007a6c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007a64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007a66:	6878      	ldr	r0, [r7, #4]
 8007a68:	f000 f8ff 	bl	8007c6a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	691b      	ldr	r3, [r3, #16]
 8007a72:	f003 0320 	and.w	r3, r3, #32
 8007a76:	2b20      	cmp	r3, #32
 8007a78:	d10e      	bne.n	8007a98 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	68db      	ldr	r3, [r3, #12]
 8007a80:	f003 0320 	and.w	r3, r3, #32
 8007a84:	2b20      	cmp	r3, #32
 8007a86:	d107      	bne.n	8007a98 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	f06f 0220 	mvn.w	r2, #32
 8007a90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007a92:	6878      	ldr	r0, [r7, #4]
 8007a94:	f000 faaa 	bl	8007fec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007a98:	bf00      	nop
 8007a9a:	3708      	adds	r7, #8
 8007a9c:	46bd      	mov	sp, r7
 8007a9e:	bd80      	pop	{r7, pc}

08007aa0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007aa0:	b580      	push	{r7, lr}
 8007aa2:	b084      	sub	sp, #16
 8007aa4:	af00      	add	r7, sp, #0
 8007aa6:	6078      	str	r0, [r7, #4]
 8007aa8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007aaa:	2300      	movs	r3, #0
 8007aac:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007ab4:	2b01      	cmp	r3, #1
 8007ab6:	d101      	bne.n	8007abc <HAL_TIM_ConfigClockSource+0x1c>
 8007ab8:	2302      	movs	r3, #2
 8007aba:	e0b4      	b.n	8007c26 <HAL_TIM_ConfigClockSource+0x186>
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	2201      	movs	r2, #1
 8007ac0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	2202      	movs	r2, #2
 8007ac8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	689b      	ldr	r3, [r3, #8]
 8007ad2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007ad4:	68bb      	ldr	r3, [r7, #8]
 8007ad6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007ada:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007adc:	68bb      	ldr	r3, [r7, #8]
 8007ade:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007ae2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	68ba      	ldr	r2, [r7, #8]
 8007aea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007aec:	683b      	ldr	r3, [r7, #0]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007af4:	d03e      	beq.n	8007b74 <HAL_TIM_ConfigClockSource+0xd4>
 8007af6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007afa:	f200 8087 	bhi.w	8007c0c <HAL_TIM_ConfigClockSource+0x16c>
 8007afe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b02:	f000 8086 	beq.w	8007c12 <HAL_TIM_ConfigClockSource+0x172>
 8007b06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b0a:	d87f      	bhi.n	8007c0c <HAL_TIM_ConfigClockSource+0x16c>
 8007b0c:	2b70      	cmp	r3, #112	; 0x70
 8007b0e:	d01a      	beq.n	8007b46 <HAL_TIM_ConfigClockSource+0xa6>
 8007b10:	2b70      	cmp	r3, #112	; 0x70
 8007b12:	d87b      	bhi.n	8007c0c <HAL_TIM_ConfigClockSource+0x16c>
 8007b14:	2b60      	cmp	r3, #96	; 0x60
 8007b16:	d050      	beq.n	8007bba <HAL_TIM_ConfigClockSource+0x11a>
 8007b18:	2b60      	cmp	r3, #96	; 0x60
 8007b1a:	d877      	bhi.n	8007c0c <HAL_TIM_ConfigClockSource+0x16c>
 8007b1c:	2b50      	cmp	r3, #80	; 0x50
 8007b1e:	d03c      	beq.n	8007b9a <HAL_TIM_ConfigClockSource+0xfa>
 8007b20:	2b50      	cmp	r3, #80	; 0x50
 8007b22:	d873      	bhi.n	8007c0c <HAL_TIM_ConfigClockSource+0x16c>
 8007b24:	2b40      	cmp	r3, #64	; 0x40
 8007b26:	d058      	beq.n	8007bda <HAL_TIM_ConfigClockSource+0x13a>
 8007b28:	2b40      	cmp	r3, #64	; 0x40
 8007b2a:	d86f      	bhi.n	8007c0c <HAL_TIM_ConfigClockSource+0x16c>
 8007b2c:	2b30      	cmp	r3, #48	; 0x30
 8007b2e:	d064      	beq.n	8007bfa <HAL_TIM_ConfigClockSource+0x15a>
 8007b30:	2b30      	cmp	r3, #48	; 0x30
 8007b32:	d86b      	bhi.n	8007c0c <HAL_TIM_ConfigClockSource+0x16c>
 8007b34:	2b20      	cmp	r3, #32
 8007b36:	d060      	beq.n	8007bfa <HAL_TIM_ConfigClockSource+0x15a>
 8007b38:	2b20      	cmp	r3, #32
 8007b3a:	d867      	bhi.n	8007c0c <HAL_TIM_ConfigClockSource+0x16c>
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d05c      	beq.n	8007bfa <HAL_TIM_ConfigClockSource+0x15a>
 8007b40:	2b10      	cmp	r3, #16
 8007b42:	d05a      	beq.n	8007bfa <HAL_TIM_ConfigClockSource+0x15a>
 8007b44:	e062      	b.n	8007c0c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	6818      	ldr	r0, [r3, #0]
 8007b4a:	683b      	ldr	r3, [r7, #0]
 8007b4c:	6899      	ldr	r1, [r3, #8]
 8007b4e:	683b      	ldr	r3, [r7, #0]
 8007b50:	685a      	ldr	r2, [r3, #4]
 8007b52:	683b      	ldr	r3, [r7, #0]
 8007b54:	68db      	ldr	r3, [r3, #12]
 8007b56:	f000 f9ad 	bl	8007eb4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	689b      	ldr	r3, [r3, #8]
 8007b60:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007b62:	68bb      	ldr	r3, [r7, #8]
 8007b64:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007b68:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	68ba      	ldr	r2, [r7, #8]
 8007b70:	609a      	str	r2, [r3, #8]
      break;
 8007b72:	e04f      	b.n	8007c14 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	6818      	ldr	r0, [r3, #0]
 8007b78:	683b      	ldr	r3, [r7, #0]
 8007b7a:	6899      	ldr	r1, [r3, #8]
 8007b7c:	683b      	ldr	r3, [r7, #0]
 8007b7e:	685a      	ldr	r2, [r3, #4]
 8007b80:	683b      	ldr	r3, [r7, #0]
 8007b82:	68db      	ldr	r3, [r3, #12]
 8007b84:	f000 f996 	bl	8007eb4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	689a      	ldr	r2, [r3, #8]
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007b96:	609a      	str	r2, [r3, #8]
      break;
 8007b98:	e03c      	b.n	8007c14 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	6818      	ldr	r0, [r3, #0]
 8007b9e:	683b      	ldr	r3, [r7, #0]
 8007ba0:	6859      	ldr	r1, [r3, #4]
 8007ba2:	683b      	ldr	r3, [r7, #0]
 8007ba4:	68db      	ldr	r3, [r3, #12]
 8007ba6:	461a      	mov	r2, r3
 8007ba8:	f000 f90a 	bl	8007dc0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	2150      	movs	r1, #80	; 0x50
 8007bb2:	4618      	mov	r0, r3
 8007bb4:	f000 f963 	bl	8007e7e <TIM_ITRx_SetConfig>
      break;
 8007bb8:	e02c      	b.n	8007c14 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	6818      	ldr	r0, [r3, #0]
 8007bbe:	683b      	ldr	r3, [r7, #0]
 8007bc0:	6859      	ldr	r1, [r3, #4]
 8007bc2:	683b      	ldr	r3, [r7, #0]
 8007bc4:	68db      	ldr	r3, [r3, #12]
 8007bc6:	461a      	mov	r2, r3
 8007bc8:	f000 f929 	bl	8007e1e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	2160      	movs	r1, #96	; 0x60
 8007bd2:	4618      	mov	r0, r3
 8007bd4:	f000 f953 	bl	8007e7e <TIM_ITRx_SetConfig>
      break;
 8007bd8:	e01c      	b.n	8007c14 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	6818      	ldr	r0, [r3, #0]
 8007bde:	683b      	ldr	r3, [r7, #0]
 8007be0:	6859      	ldr	r1, [r3, #4]
 8007be2:	683b      	ldr	r3, [r7, #0]
 8007be4:	68db      	ldr	r3, [r3, #12]
 8007be6:	461a      	mov	r2, r3
 8007be8:	f000 f8ea 	bl	8007dc0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	2140      	movs	r1, #64	; 0x40
 8007bf2:	4618      	mov	r0, r3
 8007bf4:	f000 f943 	bl	8007e7e <TIM_ITRx_SetConfig>
      break;
 8007bf8:	e00c      	b.n	8007c14 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681a      	ldr	r2, [r3, #0]
 8007bfe:	683b      	ldr	r3, [r7, #0]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	4619      	mov	r1, r3
 8007c04:	4610      	mov	r0, r2
 8007c06:	f000 f93a 	bl	8007e7e <TIM_ITRx_SetConfig>
      break;
 8007c0a:	e003      	b.n	8007c14 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007c0c:	2301      	movs	r3, #1
 8007c0e:	73fb      	strb	r3, [r7, #15]
      break;
 8007c10:	e000      	b.n	8007c14 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007c12:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	2201      	movs	r2, #1
 8007c18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	2200      	movs	r2, #0
 8007c20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007c24:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c26:	4618      	mov	r0, r3
 8007c28:	3710      	adds	r7, #16
 8007c2a:	46bd      	mov	sp, r7
 8007c2c:	bd80      	pop	{r7, pc}

08007c2e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007c2e:	b480      	push	{r7}
 8007c30:	b083      	sub	sp, #12
 8007c32:	af00      	add	r7, sp, #0
 8007c34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007c36:	bf00      	nop
 8007c38:	370c      	adds	r7, #12
 8007c3a:	46bd      	mov	sp, r7
 8007c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c40:	4770      	bx	lr

08007c42 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007c42:	b480      	push	{r7}
 8007c44:	b083      	sub	sp, #12
 8007c46:	af00      	add	r7, sp, #0
 8007c48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007c4a:	bf00      	nop
 8007c4c:	370c      	adds	r7, #12
 8007c4e:	46bd      	mov	sp, r7
 8007c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c54:	4770      	bx	lr

08007c56 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007c56:	b480      	push	{r7}
 8007c58:	b083      	sub	sp, #12
 8007c5a:	af00      	add	r7, sp, #0
 8007c5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007c5e:	bf00      	nop
 8007c60:	370c      	adds	r7, #12
 8007c62:	46bd      	mov	sp, r7
 8007c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c68:	4770      	bx	lr

08007c6a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007c6a:	b480      	push	{r7}
 8007c6c:	b083      	sub	sp, #12
 8007c6e:	af00      	add	r7, sp, #0
 8007c70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007c72:	bf00      	nop
 8007c74:	370c      	adds	r7, #12
 8007c76:	46bd      	mov	sp, r7
 8007c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c7c:	4770      	bx	lr
	...

08007c80 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007c80:	b480      	push	{r7}
 8007c82:	b085      	sub	sp, #20
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	6078      	str	r0, [r7, #4]
 8007c88:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	4a40      	ldr	r2, [pc, #256]	; (8007d94 <TIM_Base_SetConfig+0x114>)
 8007c94:	4293      	cmp	r3, r2
 8007c96:	d013      	beq.n	8007cc0 <TIM_Base_SetConfig+0x40>
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c9e:	d00f      	beq.n	8007cc0 <TIM_Base_SetConfig+0x40>
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	4a3d      	ldr	r2, [pc, #244]	; (8007d98 <TIM_Base_SetConfig+0x118>)
 8007ca4:	4293      	cmp	r3, r2
 8007ca6:	d00b      	beq.n	8007cc0 <TIM_Base_SetConfig+0x40>
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	4a3c      	ldr	r2, [pc, #240]	; (8007d9c <TIM_Base_SetConfig+0x11c>)
 8007cac:	4293      	cmp	r3, r2
 8007cae:	d007      	beq.n	8007cc0 <TIM_Base_SetConfig+0x40>
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	4a3b      	ldr	r2, [pc, #236]	; (8007da0 <TIM_Base_SetConfig+0x120>)
 8007cb4:	4293      	cmp	r3, r2
 8007cb6:	d003      	beq.n	8007cc0 <TIM_Base_SetConfig+0x40>
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	4a3a      	ldr	r2, [pc, #232]	; (8007da4 <TIM_Base_SetConfig+0x124>)
 8007cbc:	4293      	cmp	r3, r2
 8007cbe:	d108      	bne.n	8007cd2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007cc6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007cc8:	683b      	ldr	r3, [r7, #0]
 8007cca:	685b      	ldr	r3, [r3, #4]
 8007ccc:	68fa      	ldr	r2, [r7, #12]
 8007cce:	4313      	orrs	r3, r2
 8007cd0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	4a2f      	ldr	r2, [pc, #188]	; (8007d94 <TIM_Base_SetConfig+0x114>)
 8007cd6:	4293      	cmp	r3, r2
 8007cd8:	d02b      	beq.n	8007d32 <TIM_Base_SetConfig+0xb2>
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007ce0:	d027      	beq.n	8007d32 <TIM_Base_SetConfig+0xb2>
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	4a2c      	ldr	r2, [pc, #176]	; (8007d98 <TIM_Base_SetConfig+0x118>)
 8007ce6:	4293      	cmp	r3, r2
 8007ce8:	d023      	beq.n	8007d32 <TIM_Base_SetConfig+0xb2>
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	4a2b      	ldr	r2, [pc, #172]	; (8007d9c <TIM_Base_SetConfig+0x11c>)
 8007cee:	4293      	cmp	r3, r2
 8007cf0:	d01f      	beq.n	8007d32 <TIM_Base_SetConfig+0xb2>
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	4a2a      	ldr	r2, [pc, #168]	; (8007da0 <TIM_Base_SetConfig+0x120>)
 8007cf6:	4293      	cmp	r3, r2
 8007cf8:	d01b      	beq.n	8007d32 <TIM_Base_SetConfig+0xb2>
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	4a29      	ldr	r2, [pc, #164]	; (8007da4 <TIM_Base_SetConfig+0x124>)
 8007cfe:	4293      	cmp	r3, r2
 8007d00:	d017      	beq.n	8007d32 <TIM_Base_SetConfig+0xb2>
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	4a28      	ldr	r2, [pc, #160]	; (8007da8 <TIM_Base_SetConfig+0x128>)
 8007d06:	4293      	cmp	r3, r2
 8007d08:	d013      	beq.n	8007d32 <TIM_Base_SetConfig+0xb2>
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	4a27      	ldr	r2, [pc, #156]	; (8007dac <TIM_Base_SetConfig+0x12c>)
 8007d0e:	4293      	cmp	r3, r2
 8007d10:	d00f      	beq.n	8007d32 <TIM_Base_SetConfig+0xb2>
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	4a26      	ldr	r2, [pc, #152]	; (8007db0 <TIM_Base_SetConfig+0x130>)
 8007d16:	4293      	cmp	r3, r2
 8007d18:	d00b      	beq.n	8007d32 <TIM_Base_SetConfig+0xb2>
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	4a25      	ldr	r2, [pc, #148]	; (8007db4 <TIM_Base_SetConfig+0x134>)
 8007d1e:	4293      	cmp	r3, r2
 8007d20:	d007      	beq.n	8007d32 <TIM_Base_SetConfig+0xb2>
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	4a24      	ldr	r2, [pc, #144]	; (8007db8 <TIM_Base_SetConfig+0x138>)
 8007d26:	4293      	cmp	r3, r2
 8007d28:	d003      	beq.n	8007d32 <TIM_Base_SetConfig+0xb2>
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	4a23      	ldr	r2, [pc, #140]	; (8007dbc <TIM_Base_SetConfig+0x13c>)
 8007d2e:	4293      	cmp	r3, r2
 8007d30:	d108      	bne.n	8007d44 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007d38:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007d3a:	683b      	ldr	r3, [r7, #0]
 8007d3c:	68db      	ldr	r3, [r3, #12]
 8007d3e:	68fa      	ldr	r2, [r7, #12]
 8007d40:	4313      	orrs	r3, r2
 8007d42:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007d4a:	683b      	ldr	r3, [r7, #0]
 8007d4c:	695b      	ldr	r3, [r3, #20]
 8007d4e:	4313      	orrs	r3, r2
 8007d50:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	68fa      	ldr	r2, [r7, #12]
 8007d56:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007d58:	683b      	ldr	r3, [r7, #0]
 8007d5a:	689a      	ldr	r2, [r3, #8]
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007d60:	683b      	ldr	r3, [r7, #0]
 8007d62:	681a      	ldr	r2, [r3, #0]
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	4a0a      	ldr	r2, [pc, #40]	; (8007d94 <TIM_Base_SetConfig+0x114>)
 8007d6c:	4293      	cmp	r3, r2
 8007d6e:	d003      	beq.n	8007d78 <TIM_Base_SetConfig+0xf8>
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	4a0c      	ldr	r2, [pc, #48]	; (8007da4 <TIM_Base_SetConfig+0x124>)
 8007d74:	4293      	cmp	r3, r2
 8007d76:	d103      	bne.n	8007d80 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007d78:	683b      	ldr	r3, [r7, #0]
 8007d7a:	691a      	ldr	r2, [r3, #16]
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	2201      	movs	r2, #1
 8007d84:	615a      	str	r2, [r3, #20]
}
 8007d86:	bf00      	nop
 8007d88:	3714      	adds	r7, #20
 8007d8a:	46bd      	mov	sp, r7
 8007d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d90:	4770      	bx	lr
 8007d92:	bf00      	nop
 8007d94:	40010000 	.word	0x40010000
 8007d98:	40000400 	.word	0x40000400
 8007d9c:	40000800 	.word	0x40000800
 8007da0:	40000c00 	.word	0x40000c00
 8007da4:	40010400 	.word	0x40010400
 8007da8:	40014000 	.word	0x40014000
 8007dac:	40014400 	.word	0x40014400
 8007db0:	40014800 	.word	0x40014800
 8007db4:	40001800 	.word	0x40001800
 8007db8:	40001c00 	.word	0x40001c00
 8007dbc:	40002000 	.word	0x40002000

08007dc0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007dc0:	b480      	push	{r7}
 8007dc2:	b087      	sub	sp, #28
 8007dc4:	af00      	add	r7, sp, #0
 8007dc6:	60f8      	str	r0, [r7, #12]
 8007dc8:	60b9      	str	r1, [r7, #8]
 8007dca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	6a1b      	ldr	r3, [r3, #32]
 8007dd0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	6a1b      	ldr	r3, [r3, #32]
 8007dd6:	f023 0201 	bic.w	r2, r3, #1
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	699b      	ldr	r3, [r3, #24]
 8007de2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007de4:	693b      	ldr	r3, [r7, #16]
 8007de6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007dea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	011b      	lsls	r3, r3, #4
 8007df0:	693a      	ldr	r2, [r7, #16]
 8007df2:	4313      	orrs	r3, r2
 8007df4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007df6:	697b      	ldr	r3, [r7, #20]
 8007df8:	f023 030a 	bic.w	r3, r3, #10
 8007dfc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007dfe:	697a      	ldr	r2, [r7, #20]
 8007e00:	68bb      	ldr	r3, [r7, #8]
 8007e02:	4313      	orrs	r3, r2
 8007e04:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	693a      	ldr	r2, [r7, #16]
 8007e0a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	697a      	ldr	r2, [r7, #20]
 8007e10:	621a      	str	r2, [r3, #32]
}
 8007e12:	bf00      	nop
 8007e14:	371c      	adds	r7, #28
 8007e16:	46bd      	mov	sp, r7
 8007e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e1c:	4770      	bx	lr

08007e1e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007e1e:	b480      	push	{r7}
 8007e20:	b087      	sub	sp, #28
 8007e22:	af00      	add	r7, sp, #0
 8007e24:	60f8      	str	r0, [r7, #12]
 8007e26:	60b9      	str	r1, [r7, #8]
 8007e28:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	6a1b      	ldr	r3, [r3, #32]
 8007e2e:	f023 0210 	bic.w	r2, r3, #16
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	699b      	ldr	r3, [r3, #24]
 8007e3a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	6a1b      	ldr	r3, [r3, #32]
 8007e40:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007e42:	697b      	ldr	r3, [r7, #20]
 8007e44:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007e48:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	031b      	lsls	r3, r3, #12
 8007e4e:	697a      	ldr	r2, [r7, #20]
 8007e50:	4313      	orrs	r3, r2
 8007e52:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007e54:	693b      	ldr	r3, [r7, #16]
 8007e56:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007e5a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007e5c:	68bb      	ldr	r3, [r7, #8]
 8007e5e:	011b      	lsls	r3, r3, #4
 8007e60:	693a      	ldr	r2, [r7, #16]
 8007e62:	4313      	orrs	r3, r2
 8007e64:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	697a      	ldr	r2, [r7, #20]
 8007e6a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	693a      	ldr	r2, [r7, #16]
 8007e70:	621a      	str	r2, [r3, #32]
}
 8007e72:	bf00      	nop
 8007e74:	371c      	adds	r7, #28
 8007e76:	46bd      	mov	sp, r7
 8007e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e7c:	4770      	bx	lr

08007e7e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007e7e:	b480      	push	{r7}
 8007e80:	b085      	sub	sp, #20
 8007e82:	af00      	add	r7, sp, #0
 8007e84:	6078      	str	r0, [r7, #4]
 8007e86:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	689b      	ldr	r3, [r3, #8]
 8007e8c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e94:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007e96:	683a      	ldr	r2, [r7, #0]
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	4313      	orrs	r3, r2
 8007e9c:	f043 0307 	orr.w	r3, r3, #7
 8007ea0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	68fa      	ldr	r2, [r7, #12]
 8007ea6:	609a      	str	r2, [r3, #8]
}
 8007ea8:	bf00      	nop
 8007eaa:	3714      	adds	r7, #20
 8007eac:	46bd      	mov	sp, r7
 8007eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb2:	4770      	bx	lr

08007eb4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007eb4:	b480      	push	{r7}
 8007eb6:	b087      	sub	sp, #28
 8007eb8:	af00      	add	r7, sp, #0
 8007eba:	60f8      	str	r0, [r7, #12]
 8007ebc:	60b9      	str	r1, [r7, #8]
 8007ebe:	607a      	str	r2, [r7, #4]
 8007ec0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	689b      	ldr	r3, [r3, #8]
 8007ec6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007ec8:	697b      	ldr	r3, [r7, #20]
 8007eca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007ece:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007ed0:	683b      	ldr	r3, [r7, #0]
 8007ed2:	021a      	lsls	r2, r3, #8
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	431a      	orrs	r2, r3
 8007ed8:	68bb      	ldr	r3, [r7, #8]
 8007eda:	4313      	orrs	r3, r2
 8007edc:	697a      	ldr	r2, [r7, #20]
 8007ede:	4313      	orrs	r3, r2
 8007ee0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	697a      	ldr	r2, [r7, #20]
 8007ee6:	609a      	str	r2, [r3, #8]
}
 8007ee8:	bf00      	nop
 8007eea:	371c      	adds	r7, #28
 8007eec:	46bd      	mov	sp, r7
 8007eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef2:	4770      	bx	lr

08007ef4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007ef4:	b480      	push	{r7}
 8007ef6:	b085      	sub	sp, #20
 8007ef8:	af00      	add	r7, sp, #0
 8007efa:	6078      	str	r0, [r7, #4]
 8007efc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007f04:	2b01      	cmp	r3, #1
 8007f06:	d101      	bne.n	8007f0c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007f08:	2302      	movs	r3, #2
 8007f0a:	e05a      	b.n	8007fc2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	2201      	movs	r2, #1
 8007f10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	2202      	movs	r2, #2
 8007f18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	685b      	ldr	r3, [r3, #4]
 8007f22:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	689b      	ldr	r3, [r3, #8]
 8007f2a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f32:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007f34:	683b      	ldr	r3, [r7, #0]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	68fa      	ldr	r2, [r7, #12]
 8007f3a:	4313      	orrs	r3, r2
 8007f3c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	68fa      	ldr	r2, [r7, #12]
 8007f44:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	4a21      	ldr	r2, [pc, #132]	; (8007fd0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007f4c:	4293      	cmp	r3, r2
 8007f4e:	d022      	beq.n	8007f96 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f58:	d01d      	beq.n	8007f96 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	4a1d      	ldr	r2, [pc, #116]	; (8007fd4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007f60:	4293      	cmp	r3, r2
 8007f62:	d018      	beq.n	8007f96 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	4a1b      	ldr	r2, [pc, #108]	; (8007fd8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007f6a:	4293      	cmp	r3, r2
 8007f6c:	d013      	beq.n	8007f96 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	4a1a      	ldr	r2, [pc, #104]	; (8007fdc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007f74:	4293      	cmp	r3, r2
 8007f76:	d00e      	beq.n	8007f96 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	4a18      	ldr	r2, [pc, #96]	; (8007fe0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007f7e:	4293      	cmp	r3, r2
 8007f80:	d009      	beq.n	8007f96 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	4a17      	ldr	r2, [pc, #92]	; (8007fe4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007f88:	4293      	cmp	r3, r2
 8007f8a:	d004      	beq.n	8007f96 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	4a15      	ldr	r2, [pc, #84]	; (8007fe8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007f92:	4293      	cmp	r3, r2
 8007f94:	d10c      	bne.n	8007fb0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007f96:	68bb      	ldr	r3, [r7, #8]
 8007f98:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007f9c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007f9e:	683b      	ldr	r3, [r7, #0]
 8007fa0:	685b      	ldr	r3, [r3, #4]
 8007fa2:	68ba      	ldr	r2, [r7, #8]
 8007fa4:	4313      	orrs	r3, r2
 8007fa6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	68ba      	ldr	r2, [r7, #8]
 8007fae:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	2201      	movs	r2, #1
 8007fb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	2200      	movs	r2, #0
 8007fbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007fc0:	2300      	movs	r3, #0
}
 8007fc2:	4618      	mov	r0, r3
 8007fc4:	3714      	adds	r7, #20
 8007fc6:	46bd      	mov	sp, r7
 8007fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fcc:	4770      	bx	lr
 8007fce:	bf00      	nop
 8007fd0:	40010000 	.word	0x40010000
 8007fd4:	40000400 	.word	0x40000400
 8007fd8:	40000800 	.word	0x40000800
 8007fdc:	40000c00 	.word	0x40000c00
 8007fe0:	40010400 	.word	0x40010400
 8007fe4:	40014000 	.word	0x40014000
 8007fe8:	40001800 	.word	0x40001800

08007fec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007fec:	b480      	push	{r7}
 8007fee:	b083      	sub	sp, #12
 8007ff0:	af00      	add	r7, sp, #0
 8007ff2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007ff4:	bf00      	nop
 8007ff6:	370c      	adds	r7, #12
 8007ff8:	46bd      	mov	sp, r7
 8007ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ffe:	4770      	bx	lr

08008000 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008000:	b480      	push	{r7}
 8008002:	b083      	sub	sp, #12
 8008004:	af00      	add	r7, sp, #0
 8008006:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008008:	bf00      	nop
 800800a:	370c      	adds	r7, #12
 800800c:	46bd      	mov	sp, r7
 800800e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008012:	4770      	bx	lr

08008014 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008014:	b580      	push	{r7, lr}
 8008016:	b082      	sub	sp, #8
 8008018:	af00      	add	r7, sp, #0
 800801a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	2b00      	cmp	r3, #0
 8008020:	d101      	bne.n	8008026 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008022:	2301      	movs	r3, #1
 8008024:	e03f      	b.n	80080a6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800802c:	b2db      	uxtb	r3, r3
 800802e:	2b00      	cmp	r3, #0
 8008030:	d106      	bne.n	8008040 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	2200      	movs	r2, #0
 8008036:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800803a:	6878      	ldr	r0, [r7, #4]
 800803c:	f7f9 fd7e 	bl	8001b3c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	2224      	movs	r2, #36	; 0x24
 8008044:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	68da      	ldr	r2, [r3, #12]
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008056:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008058:	6878      	ldr	r0, [r7, #4]
 800805a:	f000 fd7b 	bl	8008b54 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	691a      	ldr	r2, [r3, #16]
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800806c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	695a      	ldr	r2, [r3, #20]
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800807c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	68da      	ldr	r2, [r3, #12]
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800808c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	2200      	movs	r2, #0
 8008092:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	2220      	movs	r2, #32
 8008098:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	2220      	movs	r2, #32
 80080a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80080a4:	2300      	movs	r3, #0
}
 80080a6:	4618      	mov	r0, r3
 80080a8:	3708      	adds	r7, #8
 80080aa:	46bd      	mov	sp, r7
 80080ac:	bd80      	pop	{r7, pc}

080080ae <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80080ae:	b580      	push	{r7, lr}
 80080b0:	b08a      	sub	sp, #40	; 0x28
 80080b2:	af02      	add	r7, sp, #8
 80080b4:	60f8      	str	r0, [r7, #12]
 80080b6:	60b9      	str	r1, [r7, #8]
 80080b8:	603b      	str	r3, [r7, #0]
 80080ba:	4613      	mov	r3, r2
 80080bc:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80080be:	2300      	movs	r3, #0
 80080c0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80080c8:	b2db      	uxtb	r3, r3
 80080ca:	2b20      	cmp	r3, #32
 80080cc:	d17c      	bne.n	80081c8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80080ce:	68bb      	ldr	r3, [r7, #8]
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d002      	beq.n	80080da <HAL_UART_Transmit+0x2c>
 80080d4:	88fb      	ldrh	r3, [r7, #6]
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d101      	bne.n	80080de <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80080da:	2301      	movs	r3, #1
 80080dc:	e075      	b.n	80081ca <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80080e4:	2b01      	cmp	r3, #1
 80080e6:	d101      	bne.n	80080ec <HAL_UART_Transmit+0x3e>
 80080e8:	2302      	movs	r3, #2
 80080ea:	e06e      	b.n	80081ca <HAL_UART_Transmit+0x11c>
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	2201      	movs	r2, #1
 80080f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	2200      	movs	r2, #0
 80080f8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	2221      	movs	r2, #33	; 0x21
 80080fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008102:	f7f9 fe31 	bl	8001d68 <HAL_GetTick>
 8008106:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	88fa      	ldrh	r2, [r7, #6]
 800810c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	88fa      	ldrh	r2, [r7, #6]
 8008112:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	689b      	ldr	r3, [r3, #8]
 8008118:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800811c:	d108      	bne.n	8008130 <HAL_UART_Transmit+0x82>
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	691b      	ldr	r3, [r3, #16]
 8008122:	2b00      	cmp	r3, #0
 8008124:	d104      	bne.n	8008130 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8008126:	2300      	movs	r3, #0
 8008128:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800812a:	68bb      	ldr	r3, [r7, #8]
 800812c:	61bb      	str	r3, [r7, #24]
 800812e:	e003      	b.n	8008138 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8008130:	68bb      	ldr	r3, [r7, #8]
 8008132:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008134:	2300      	movs	r3, #0
 8008136:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	2200      	movs	r2, #0
 800813c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8008140:	e02a      	b.n	8008198 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008142:	683b      	ldr	r3, [r7, #0]
 8008144:	9300      	str	r3, [sp, #0]
 8008146:	697b      	ldr	r3, [r7, #20]
 8008148:	2200      	movs	r2, #0
 800814a:	2180      	movs	r1, #128	; 0x80
 800814c:	68f8      	ldr	r0, [r7, #12]
 800814e:	f000 faf9 	bl	8008744 <UART_WaitOnFlagUntilTimeout>
 8008152:	4603      	mov	r3, r0
 8008154:	2b00      	cmp	r3, #0
 8008156:	d001      	beq.n	800815c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8008158:	2303      	movs	r3, #3
 800815a:	e036      	b.n	80081ca <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800815c:	69fb      	ldr	r3, [r7, #28]
 800815e:	2b00      	cmp	r3, #0
 8008160:	d10b      	bne.n	800817a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008162:	69bb      	ldr	r3, [r7, #24]
 8008164:	881b      	ldrh	r3, [r3, #0]
 8008166:	461a      	mov	r2, r3
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008170:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8008172:	69bb      	ldr	r3, [r7, #24]
 8008174:	3302      	adds	r3, #2
 8008176:	61bb      	str	r3, [r7, #24]
 8008178:	e007      	b.n	800818a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800817a:	69fb      	ldr	r3, [r7, #28]
 800817c:	781a      	ldrb	r2, [r3, #0]
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8008184:	69fb      	ldr	r3, [r7, #28]
 8008186:	3301      	adds	r3, #1
 8008188:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800818e:	b29b      	uxth	r3, r3
 8008190:	3b01      	subs	r3, #1
 8008192:	b29a      	uxth	r2, r3
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800819c:	b29b      	uxth	r3, r3
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d1cf      	bne.n	8008142 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80081a2:	683b      	ldr	r3, [r7, #0]
 80081a4:	9300      	str	r3, [sp, #0]
 80081a6:	697b      	ldr	r3, [r7, #20]
 80081a8:	2200      	movs	r2, #0
 80081aa:	2140      	movs	r1, #64	; 0x40
 80081ac:	68f8      	ldr	r0, [r7, #12]
 80081ae:	f000 fac9 	bl	8008744 <UART_WaitOnFlagUntilTimeout>
 80081b2:	4603      	mov	r3, r0
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d001      	beq.n	80081bc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80081b8:	2303      	movs	r3, #3
 80081ba:	e006      	b.n	80081ca <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	2220      	movs	r2, #32
 80081c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80081c4:	2300      	movs	r3, #0
 80081c6:	e000      	b.n	80081ca <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80081c8:	2302      	movs	r3, #2
  }
}
 80081ca:	4618      	mov	r0, r3
 80081cc:	3720      	adds	r7, #32
 80081ce:	46bd      	mov	sp, r7
 80081d0:	bd80      	pop	{r7, pc}
	...

080081d4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80081d4:	b580      	push	{r7, lr}
 80081d6:	b0ba      	sub	sp, #232	; 0xe8
 80081d8:	af00      	add	r7, sp, #0
 80081da:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	68db      	ldr	r3, [r3, #12]
 80081ec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	695b      	ldr	r3, [r3, #20]
 80081f6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80081fa:	2300      	movs	r3, #0
 80081fc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8008200:	2300      	movs	r3, #0
 8008202:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008206:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800820a:	f003 030f 	and.w	r3, r3, #15
 800820e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8008212:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008216:	2b00      	cmp	r3, #0
 8008218:	d10f      	bne.n	800823a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800821a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800821e:	f003 0320 	and.w	r3, r3, #32
 8008222:	2b00      	cmp	r3, #0
 8008224:	d009      	beq.n	800823a <HAL_UART_IRQHandler+0x66>
 8008226:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800822a:	f003 0320 	and.w	r3, r3, #32
 800822e:	2b00      	cmp	r3, #0
 8008230:	d003      	beq.n	800823a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8008232:	6878      	ldr	r0, [r7, #4]
 8008234:	f000 fbd3 	bl	80089de <UART_Receive_IT>
      return;
 8008238:	e256      	b.n	80086e8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800823a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800823e:	2b00      	cmp	r3, #0
 8008240:	f000 80de 	beq.w	8008400 <HAL_UART_IRQHandler+0x22c>
 8008244:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008248:	f003 0301 	and.w	r3, r3, #1
 800824c:	2b00      	cmp	r3, #0
 800824e:	d106      	bne.n	800825e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008250:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008254:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8008258:	2b00      	cmp	r3, #0
 800825a:	f000 80d1 	beq.w	8008400 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800825e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008262:	f003 0301 	and.w	r3, r3, #1
 8008266:	2b00      	cmp	r3, #0
 8008268:	d00b      	beq.n	8008282 <HAL_UART_IRQHandler+0xae>
 800826a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800826e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008272:	2b00      	cmp	r3, #0
 8008274:	d005      	beq.n	8008282 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800827a:	f043 0201 	orr.w	r2, r3, #1
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008282:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008286:	f003 0304 	and.w	r3, r3, #4
 800828a:	2b00      	cmp	r3, #0
 800828c:	d00b      	beq.n	80082a6 <HAL_UART_IRQHandler+0xd2>
 800828e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008292:	f003 0301 	and.w	r3, r3, #1
 8008296:	2b00      	cmp	r3, #0
 8008298:	d005      	beq.n	80082a6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800829e:	f043 0202 	orr.w	r2, r3, #2
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80082a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80082aa:	f003 0302 	and.w	r3, r3, #2
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d00b      	beq.n	80082ca <HAL_UART_IRQHandler+0xf6>
 80082b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80082b6:	f003 0301 	and.w	r3, r3, #1
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d005      	beq.n	80082ca <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082c2:	f043 0204 	orr.w	r2, r3, #4
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80082ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80082ce:	f003 0308 	and.w	r3, r3, #8
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d011      	beq.n	80082fa <HAL_UART_IRQHandler+0x126>
 80082d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80082da:	f003 0320 	and.w	r3, r3, #32
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d105      	bne.n	80082ee <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80082e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80082e6:	f003 0301 	and.w	r3, r3, #1
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d005      	beq.n	80082fa <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082f2:	f043 0208 	orr.w	r2, r3, #8
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082fe:	2b00      	cmp	r3, #0
 8008300:	f000 81ed 	beq.w	80086de <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008304:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008308:	f003 0320 	and.w	r3, r3, #32
 800830c:	2b00      	cmp	r3, #0
 800830e:	d008      	beq.n	8008322 <HAL_UART_IRQHandler+0x14e>
 8008310:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008314:	f003 0320 	and.w	r3, r3, #32
 8008318:	2b00      	cmp	r3, #0
 800831a:	d002      	beq.n	8008322 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800831c:	6878      	ldr	r0, [r7, #4]
 800831e:	f000 fb5e 	bl	80089de <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	695b      	ldr	r3, [r3, #20]
 8008328:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800832c:	2b40      	cmp	r3, #64	; 0x40
 800832e:	bf0c      	ite	eq
 8008330:	2301      	moveq	r3, #1
 8008332:	2300      	movne	r3, #0
 8008334:	b2db      	uxtb	r3, r3
 8008336:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800833e:	f003 0308 	and.w	r3, r3, #8
 8008342:	2b00      	cmp	r3, #0
 8008344:	d103      	bne.n	800834e <HAL_UART_IRQHandler+0x17a>
 8008346:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800834a:	2b00      	cmp	r3, #0
 800834c:	d04f      	beq.n	80083ee <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800834e:	6878      	ldr	r0, [r7, #4]
 8008350:	f000 fa66 	bl	8008820 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	695b      	ldr	r3, [r3, #20]
 800835a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800835e:	2b40      	cmp	r3, #64	; 0x40
 8008360:	d141      	bne.n	80083e6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	3314      	adds	r3, #20
 8008368:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800836c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008370:	e853 3f00 	ldrex	r3, [r3]
 8008374:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008378:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800837c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008380:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	3314      	adds	r3, #20
 800838a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800838e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8008392:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008396:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800839a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800839e:	e841 2300 	strex	r3, r2, [r1]
 80083a2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80083a6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d1d9      	bne.n	8008362 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d013      	beq.n	80083de <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083ba:	4a7d      	ldr	r2, [pc, #500]	; (80085b0 <HAL_UART_IRQHandler+0x3dc>)
 80083bc:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083c2:	4618      	mov	r0, r3
 80083c4:	f7fa fe56 	bl	8003074 <HAL_DMA_Abort_IT>
 80083c8:	4603      	mov	r3, r0
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d016      	beq.n	80083fc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80083d4:	687a      	ldr	r2, [r7, #4]
 80083d6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80083d8:	4610      	mov	r0, r2
 80083da:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80083dc:	e00e      	b.n	80083fc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80083de:	6878      	ldr	r0, [r7, #4]
 80083e0:	f000 f99a 	bl	8008718 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80083e4:	e00a      	b.n	80083fc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80083e6:	6878      	ldr	r0, [r7, #4]
 80083e8:	f000 f996 	bl	8008718 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80083ec:	e006      	b.n	80083fc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80083ee:	6878      	ldr	r0, [r7, #4]
 80083f0:	f000 f992 	bl	8008718 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	2200      	movs	r2, #0
 80083f8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80083fa:	e170      	b.n	80086de <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80083fc:	bf00      	nop
    return;
 80083fe:	e16e      	b.n	80086de <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008404:	2b01      	cmp	r3, #1
 8008406:	f040 814a 	bne.w	800869e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800840a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800840e:	f003 0310 	and.w	r3, r3, #16
 8008412:	2b00      	cmp	r3, #0
 8008414:	f000 8143 	beq.w	800869e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8008418:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800841c:	f003 0310 	and.w	r3, r3, #16
 8008420:	2b00      	cmp	r3, #0
 8008422:	f000 813c 	beq.w	800869e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008426:	2300      	movs	r3, #0
 8008428:	60bb      	str	r3, [r7, #8]
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	60bb      	str	r3, [r7, #8]
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	685b      	ldr	r3, [r3, #4]
 8008438:	60bb      	str	r3, [r7, #8]
 800843a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	695b      	ldr	r3, [r3, #20]
 8008442:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008446:	2b40      	cmp	r3, #64	; 0x40
 8008448:	f040 80b4 	bne.w	80085b4 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	685b      	ldr	r3, [r3, #4]
 8008454:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008458:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800845c:	2b00      	cmp	r3, #0
 800845e:	f000 8140 	beq.w	80086e2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008466:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800846a:	429a      	cmp	r2, r3
 800846c:	f080 8139 	bcs.w	80086e2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008476:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800847c:	69db      	ldr	r3, [r3, #28]
 800847e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008482:	f000 8088 	beq.w	8008596 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	330c      	adds	r3, #12
 800848c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008490:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008494:	e853 3f00 	ldrex	r3, [r3]
 8008498:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800849c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80084a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80084a4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	330c      	adds	r3, #12
 80084ae:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80084b2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80084b6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084ba:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80084be:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80084c2:	e841 2300 	strex	r3, r2, [r1]
 80084c6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80084ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d1d9      	bne.n	8008486 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	3314      	adds	r3, #20
 80084d8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084da:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80084dc:	e853 3f00 	ldrex	r3, [r3]
 80084e0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80084e2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80084e4:	f023 0301 	bic.w	r3, r3, #1
 80084e8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	3314      	adds	r3, #20
 80084f2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80084f6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80084fa:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084fc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80084fe:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008502:	e841 2300 	strex	r3, r2, [r1]
 8008506:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008508:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800850a:	2b00      	cmp	r3, #0
 800850c:	d1e1      	bne.n	80084d2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	3314      	adds	r3, #20
 8008514:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008516:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008518:	e853 3f00 	ldrex	r3, [r3]
 800851c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800851e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008520:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008524:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	3314      	adds	r3, #20
 800852e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008532:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008534:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008536:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008538:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800853a:	e841 2300 	strex	r3, r2, [r1]
 800853e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008540:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008542:	2b00      	cmp	r3, #0
 8008544:	d1e3      	bne.n	800850e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	2220      	movs	r2, #32
 800854a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	2200      	movs	r2, #0
 8008552:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	330c      	adds	r3, #12
 800855a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800855c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800855e:	e853 3f00 	ldrex	r3, [r3]
 8008562:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008564:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008566:	f023 0310 	bic.w	r3, r3, #16
 800856a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	330c      	adds	r3, #12
 8008574:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8008578:	65ba      	str	r2, [r7, #88]	; 0x58
 800857a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800857c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800857e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008580:	e841 2300 	strex	r3, r2, [r1]
 8008584:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008586:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008588:	2b00      	cmp	r3, #0
 800858a:	d1e3      	bne.n	8008554 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008590:	4618      	mov	r0, r3
 8008592:	f7fa fcff 	bl	8002f94 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800859e:	b29b      	uxth	r3, r3
 80085a0:	1ad3      	subs	r3, r2, r3
 80085a2:	b29b      	uxth	r3, r3
 80085a4:	4619      	mov	r1, r3
 80085a6:	6878      	ldr	r0, [r7, #4]
 80085a8:	f000 f8c0 	bl	800872c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80085ac:	e099      	b.n	80086e2 <HAL_UART_IRQHandler+0x50e>
 80085ae:	bf00      	nop
 80085b0:	080088e7 	.word	0x080088e7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80085bc:	b29b      	uxth	r3, r3
 80085be:	1ad3      	subs	r3, r2, r3
 80085c0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80085c8:	b29b      	uxth	r3, r3
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	f000 808b 	beq.w	80086e6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80085d0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	f000 8086 	beq.w	80086e6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	330c      	adds	r3, #12
 80085e0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085e4:	e853 3f00 	ldrex	r3, [r3]
 80085e8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80085ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085ec:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80085f0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	330c      	adds	r3, #12
 80085fa:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80085fe:	647a      	str	r2, [r7, #68]	; 0x44
 8008600:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008602:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008604:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008606:	e841 2300 	strex	r3, r2, [r1]
 800860a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800860c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800860e:	2b00      	cmp	r3, #0
 8008610:	d1e3      	bne.n	80085da <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	3314      	adds	r3, #20
 8008618:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800861a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800861c:	e853 3f00 	ldrex	r3, [r3]
 8008620:	623b      	str	r3, [r7, #32]
   return(result);
 8008622:	6a3b      	ldr	r3, [r7, #32]
 8008624:	f023 0301 	bic.w	r3, r3, #1
 8008628:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	3314      	adds	r3, #20
 8008632:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008636:	633a      	str	r2, [r7, #48]	; 0x30
 8008638:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800863a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800863c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800863e:	e841 2300 	strex	r3, r2, [r1]
 8008642:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008644:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008646:	2b00      	cmp	r3, #0
 8008648:	d1e3      	bne.n	8008612 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	2220      	movs	r2, #32
 800864e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	2200      	movs	r2, #0
 8008656:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	330c      	adds	r3, #12
 800865e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008660:	693b      	ldr	r3, [r7, #16]
 8008662:	e853 3f00 	ldrex	r3, [r3]
 8008666:	60fb      	str	r3, [r7, #12]
   return(result);
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	f023 0310 	bic.w	r3, r3, #16
 800866e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	330c      	adds	r3, #12
 8008678:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800867c:	61fa      	str	r2, [r7, #28]
 800867e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008680:	69b9      	ldr	r1, [r7, #24]
 8008682:	69fa      	ldr	r2, [r7, #28]
 8008684:	e841 2300 	strex	r3, r2, [r1]
 8008688:	617b      	str	r3, [r7, #20]
   return(result);
 800868a:	697b      	ldr	r3, [r7, #20]
 800868c:	2b00      	cmp	r3, #0
 800868e:	d1e3      	bne.n	8008658 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008690:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008694:	4619      	mov	r1, r3
 8008696:	6878      	ldr	r0, [r7, #4]
 8008698:	f000 f848 	bl	800872c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800869c:	e023      	b.n	80086e6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800869e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80086a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d009      	beq.n	80086be <HAL_UART_IRQHandler+0x4ea>
 80086aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80086ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d003      	beq.n	80086be <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80086b6:	6878      	ldr	r0, [r7, #4]
 80086b8:	f000 f929 	bl	800890e <UART_Transmit_IT>
    return;
 80086bc:	e014      	b.n	80086e8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80086be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80086c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d00e      	beq.n	80086e8 <HAL_UART_IRQHandler+0x514>
 80086ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80086ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d008      	beq.n	80086e8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80086d6:	6878      	ldr	r0, [r7, #4]
 80086d8:	f000 f969 	bl	80089ae <UART_EndTransmit_IT>
    return;
 80086dc:	e004      	b.n	80086e8 <HAL_UART_IRQHandler+0x514>
    return;
 80086de:	bf00      	nop
 80086e0:	e002      	b.n	80086e8 <HAL_UART_IRQHandler+0x514>
      return;
 80086e2:	bf00      	nop
 80086e4:	e000      	b.n	80086e8 <HAL_UART_IRQHandler+0x514>
      return;
 80086e6:	bf00      	nop
  }
}
 80086e8:	37e8      	adds	r7, #232	; 0xe8
 80086ea:	46bd      	mov	sp, r7
 80086ec:	bd80      	pop	{r7, pc}
 80086ee:	bf00      	nop

080086f0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80086f0:	b480      	push	{r7}
 80086f2:	b083      	sub	sp, #12
 80086f4:	af00      	add	r7, sp, #0
 80086f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80086f8:	bf00      	nop
 80086fa:	370c      	adds	r7, #12
 80086fc:	46bd      	mov	sp, r7
 80086fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008702:	4770      	bx	lr

08008704 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8008704:	b480      	push	{r7}
 8008706:	b083      	sub	sp, #12
 8008708:	af00      	add	r7, sp, #0
 800870a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800870c:	bf00      	nop
 800870e:	370c      	adds	r7, #12
 8008710:	46bd      	mov	sp, r7
 8008712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008716:	4770      	bx	lr

08008718 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008718:	b480      	push	{r7}
 800871a:	b083      	sub	sp, #12
 800871c:	af00      	add	r7, sp, #0
 800871e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008720:	bf00      	nop
 8008722:	370c      	adds	r7, #12
 8008724:	46bd      	mov	sp, r7
 8008726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800872a:	4770      	bx	lr

0800872c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800872c:	b480      	push	{r7}
 800872e:	b083      	sub	sp, #12
 8008730:	af00      	add	r7, sp, #0
 8008732:	6078      	str	r0, [r7, #4]
 8008734:	460b      	mov	r3, r1
 8008736:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008738:	bf00      	nop
 800873a:	370c      	adds	r7, #12
 800873c:	46bd      	mov	sp, r7
 800873e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008742:	4770      	bx	lr

08008744 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8008744:	b580      	push	{r7, lr}
 8008746:	b090      	sub	sp, #64	; 0x40
 8008748:	af00      	add	r7, sp, #0
 800874a:	60f8      	str	r0, [r7, #12]
 800874c:	60b9      	str	r1, [r7, #8]
 800874e:	603b      	str	r3, [r7, #0]
 8008750:	4613      	mov	r3, r2
 8008752:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008754:	e050      	b.n	80087f8 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008756:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008758:	f1b3 3fff 	cmp.w	r3, #4294967295
 800875c:	d04c      	beq.n	80087f8 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800875e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008760:	2b00      	cmp	r3, #0
 8008762:	d007      	beq.n	8008774 <UART_WaitOnFlagUntilTimeout+0x30>
 8008764:	f7f9 fb00 	bl	8001d68 <HAL_GetTick>
 8008768:	4602      	mov	r2, r0
 800876a:	683b      	ldr	r3, [r7, #0]
 800876c:	1ad3      	subs	r3, r2, r3
 800876e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008770:	429a      	cmp	r2, r3
 8008772:	d241      	bcs.n	80087f8 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	330c      	adds	r3, #12
 800877a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800877c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800877e:	e853 3f00 	ldrex	r3, [r3]
 8008782:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008786:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800878a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	330c      	adds	r3, #12
 8008792:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008794:	637a      	str	r2, [r7, #52]	; 0x34
 8008796:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008798:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800879a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800879c:	e841 2300 	strex	r3, r2, [r1]
 80087a0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80087a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d1e5      	bne.n	8008774 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	3314      	adds	r3, #20
 80087ae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087b0:	697b      	ldr	r3, [r7, #20]
 80087b2:	e853 3f00 	ldrex	r3, [r3]
 80087b6:	613b      	str	r3, [r7, #16]
   return(result);
 80087b8:	693b      	ldr	r3, [r7, #16]
 80087ba:	f023 0301 	bic.w	r3, r3, #1
 80087be:	63bb      	str	r3, [r7, #56]	; 0x38
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	3314      	adds	r3, #20
 80087c6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80087c8:	623a      	str	r2, [r7, #32]
 80087ca:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087cc:	69f9      	ldr	r1, [r7, #28]
 80087ce:	6a3a      	ldr	r2, [r7, #32]
 80087d0:	e841 2300 	strex	r3, r2, [r1]
 80087d4:	61bb      	str	r3, [r7, #24]
   return(result);
 80087d6:	69bb      	ldr	r3, [r7, #24]
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d1e5      	bne.n	80087a8 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	2220      	movs	r2, #32
 80087e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	2220      	movs	r2, #32
 80087e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	2200      	movs	r2, #0
 80087f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80087f4:	2303      	movs	r3, #3
 80087f6:	e00f      	b.n	8008818 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	681a      	ldr	r2, [r3, #0]
 80087fe:	68bb      	ldr	r3, [r7, #8]
 8008800:	4013      	ands	r3, r2
 8008802:	68ba      	ldr	r2, [r7, #8]
 8008804:	429a      	cmp	r2, r3
 8008806:	bf0c      	ite	eq
 8008808:	2301      	moveq	r3, #1
 800880a:	2300      	movne	r3, #0
 800880c:	b2db      	uxtb	r3, r3
 800880e:	461a      	mov	r2, r3
 8008810:	79fb      	ldrb	r3, [r7, #7]
 8008812:	429a      	cmp	r2, r3
 8008814:	d09f      	beq.n	8008756 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008816:	2300      	movs	r3, #0
}
 8008818:	4618      	mov	r0, r3
 800881a:	3740      	adds	r7, #64	; 0x40
 800881c:	46bd      	mov	sp, r7
 800881e:	bd80      	pop	{r7, pc}

08008820 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008820:	b480      	push	{r7}
 8008822:	b095      	sub	sp, #84	; 0x54
 8008824:	af00      	add	r7, sp, #0
 8008826:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	330c      	adds	r3, #12
 800882e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008830:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008832:	e853 3f00 	ldrex	r3, [r3]
 8008836:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008838:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800883a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800883e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	330c      	adds	r3, #12
 8008846:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008848:	643a      	str	r2, [r7, #64]	; 0x40
 800884a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800884c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800884e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008850:	e841 2300 	strex	r3, r2, [r1]
 8008854:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008856:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008858:	2b00      	cmp	r3, #0
 800885a:	d1e5      	bne.n	8008828 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	3314      	adds	r3, #20
 8008862:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008864:	6a3b      	ldr	r3, [r7, #32]
 8008866:	e853 3f00 	ldrex	r3, [r3]
 800886a:	61fb      	str	r3, [r7, #28]
   return(result);
 800886c:	69fb      	ldr	r3, [r7, #28]
 800886e:	f023 0301 	bic.w	r3, r3, #1
 8008872:	64bb      	str	r3, [r7, #72]	; 0x48
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	3314      	adds	r3, #20
 800887a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800887c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800887e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008880:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008882:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008884:	e841 2300 	strex	r3, r2, [r1]
 8008888:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800888a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800888c:	2b00      	cmp	r3, #0
 800888e:	d1e5      	bne.n	800885c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008894:	2b01      	cmp	r3, #1
 8008896:	d119      	bne.n	80088cc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	330c      	adds	r3, #12
 800889e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	e853 3f00 	ldrex	r3, [r3]
 80088a6:	60bb      	str	r3, [r7, #8]
   return(result);
 80088a8:	68bb      	ldr	r3, [r7, #8]
 80088aa:	f023 0310 	bic.w	r3, r3, #16
 80088ae:	647b      	str	r3, [r7, #68]	; 0x44
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	330c      	adds	r3, #12
 80088b6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80088b8:	61ba      	str	r2, [r7, #24]
 80088ba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088bc:	6979      	ldr	r1, [r7, #20]
 80088be:	69ba      	ldr	r2, [r7, #24]
 80088c0:	e841 2300 	strex	r3, r2, [r1]
 80088c4:	613b      	str	r3, [r7, #16]
   return(result);
 80088c6:	693b      	ldr	r3, [r7, #16]
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d1e5      	bne.n	8008898 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	2220      	movs	r2, #32
 80088d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	2200      	movs	r2, #0
 80088d8:	631a      	str	r2, [r3, #48]	; 0x30
}
 80088da:	bf00      	nop
 80088dc:	3754      	adds	r7, #84	; 0x54
 80088de:	46bd      	mov	sp, r7
 80088e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088e4:	4770      	bx	lr

080088e6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80088e6:	b580      	push	{r7, lr}
 80088e8:	b084      	sub	sp, #16
 80088ea:	af00      	add	r7, sp, #0
 80088ec:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088f2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	2200      	movs	r2, #0
 80088f8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	2200      	movs	r2, #0
 80088fe:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008900:	68f8      	ldr	r0, [r7, #12]
 8008902:	f7ff ff09 	bl	8008718 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008906:	bf00      	nop
 8008908:	3710      	adds	r7, #16
 800890a:	46bd      	mov	sp, r7
 800890c:	bd80      	pop	{r7, pc}

0800890e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800890e:	b480      	push	{r7}
 8008910:	b085      	sub	sp, #20
 8008912:	af00      	add	r7, sp, #0
 8008914:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800891c:	b2db      	uxtb	r3, r3
 800891e:	2b21      	cmp	r3, #33	; 0x21
 8008920:	d13e      	bne.n	80089a0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	689b      	ldr	r3, [r3, #8]
 8008926:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800892a:	d114      	bne.n	8008956 <UART_Transmit_IT+0x48>
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	691b      	ldr	r3, [r3, #16]
 8008930:	2b00      	cmp	r3, #0
 8008932:	d110      	bne.n	8008956 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	6a1b      	ldr	r3, [r3, #32]
 8008938:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	881b      	ldrh	r3, [r3, #0]
 800893e:	461a      	mov	r2, r3
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008948:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	6a1b      	ldr	r3, [r3, #32]
 800894e:	1c9a      	adds	r2, r3, #2
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	621a      	str	r2, [r3, #32]
 8008954:	e008      	b.n	8008968 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	6a1b      	ldr	r3, [r3, #32]
 800895a:	1c59      	adds	r1, r3, #1
 800895c:	687a      	ldr	r2, [r7, #4]
 800895e:	6211      	str	r1, [r2, #32]
 8008960:	781a      	ldrb	r2, [r3, #0]
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800896c:	b29b      	uxth	r3, r3
 800896e:	3b01      	subs	r3, #1
 8008970:	b29b      	uxth	r3, r3
 8008972:	687a      	ldr	r2, [r7, #4]
 8008974:	4619      	mov	r1, r3
 8008976:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008978:	2b00      	cmp	r3, #0
 800897a:	d10f      	bne.n	800899c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	68da      	ldr	r2, [r3, #12]
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800898a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	68da      	ldr	r2, [r3, #12]
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800899a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800899c:	2300      	movs	r3, #0
 800899e:	e000      	b.n	80089a2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80089a0:	2302      	movs	r3, #2
  }
}
 80089a2:	4618      	mov	r0, r3
 80089a4:	3714      	adds	r7, #20
 80089a6:	46bd      	mov	sp, r7
 80089a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ac:	4770      	bx	lr

080089ae <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80089ae:	b580      	push	{r7, lr}
 80089b0:	b082      	sub	sp, #8
 80089b2:	af00      	add	r7, sp, #0
 80089b4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	68da      	ldr	r2, [r3, #12]
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80089c4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	2220      	movs	r2, #32
 80089ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80089ce:	6878      	ldr	r0, [r7, #4]
 80089d0:	f7ff fe8e 	bl	80086f0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80089d4:	2300      	movs	r3, #0
}
 80089d6:	4618      	mov	r0, r3
 80089d8:	3708      	adds	r7, #8
 80089da:	46bd      	mov	sp, r7
 80089dc:	bd80      	pop	{r7, pc}

080089de <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80089de:	b580      	push	{r7, lr}
 80089e0:	b08c      	sub	sp, #48	; 0x30
 80089e2:	af00      	add	r7, sp, #0
 80089e4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80089ec:	b2db      	uxtb	r3, r3
 80089ee:	2b22      	cmp	r3, #34	; 0x22
 80089f0:	f040 80ab 	bne.w	8008b4a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	689b      	ldr	r3, [r3, #8]
 80089f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80089fc:	d117      	bne.n	8008a2e <UART_Receive_IT+0x50>
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	691b      	ldr	r3, [r3, #16]
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d113      	bne.n	8008a2e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008a06:	2300      	movs	r3, #0
 8008a08:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a0e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	685b      	ldr	r3, [r3, #4]
 8008a16:	b29b      	uxth	r3, r3
 8008a18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a1c:	b29a      	uxth	r2, r3
 8008a1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a20:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a26:	1c9a      	adds	r2, r3, #2
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	629a      	str	r2, [r3, #40]	; 0x28
 8008a2c:	e026      	b.n	8008a7c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a32:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8008a34:	2300      	movs	r3, #0
 8008a36:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	689b      	ldr	r3, [r3, #8]
 8008a3c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008a40:	d007      	beq.n	8008a52 <UART_Receive_IT+0x74>
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	689b      	ldr	r3, [r3, #8]
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d10a      	bne.n	8008a60 <UART_Receive_IT+0x82>
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	691b      	ldr	r3, [r3, #16]
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d106      	bne.n	8008a60 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	685b      	ldr	r3, [r3, #4]
 8008a58:	b2da      	uxtb	r2, r3
 8008a5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a5c:	701a      	strb	r2, [r3, #0]
 8008a5e:	e008      	b.n	8008a72 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	685b      	ldr	r3, [r3, #4]
 8008a66:	b2db      	uxtb	r3, r3
 8008a68:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008a6c:	b2da      	uxtb	r2, r3
 8008a6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a70:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a76:	1c5a      	adds	r2, r3, #1
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008a80:	b29b      	uxth	r3, r3
 8008a82:	3b01      	subs	r3, #1
 8008a84:	b29b      	uxth	r3, r3
 8008a86:	687a      	ldr	r2, [r7, #4]
 8008a88:	4619      	mov	r1, r3
 8008a8a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d15a      	bne.n	8008b46 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	68da      	ldr	r2, [r3, #12]
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	f022 0220 	bic.w	r2, r2, #32
 8008a9e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	68da      	ldr	r2, [r3, #12]
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008aae:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	695a      	ldr	r2, [r3, #20]
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	f022 0201 	bic.w	r2, r2, #1
 8008abe:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	2220      	movs	r2, #32
 8008ac4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008acc:	2b01      	cmp	r3, #1
 8008ace:	d135      	bne.n	8008b3c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	2200      	movs	r2, #0
 8008ad4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	330c      	adds	r3, #12
 8008adc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ade:	697b      	ldr	r3, [r7, #20]
 8008ae0:	e853 3f00 	ldrex	r3, [r3]
 8008ae4:	613b      	str	r3, [r7, #16]
   return(result);
 8008ae6:	693b      	ldr	r3, [r7, #16]
 8008ae8:	f023 0310 	bic.w	r3, r3, #16
 8008aec:	627b      	str	r3, [r7, #36]	; 0x24
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	330c      	adds	r3, #12
 8008af4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008af6:	623a      	str	r2, [r7, #32]
 8008af8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008afa:	69f9      	ldr	r1, [r7, #28]
 8008afc:	6a3a      	ldr	r2, [r7, #32]
 8008afe:	e841 2300 	strex	r3, r2, [r1]
 8008b02:	61bb      	str	r3, [r7, #24]
   return(result);
 8008b04:	69bb      	ldr	r3, [r7, #24]
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d1e5      	bne.n	8008ad6 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	f003 0310 	and.w	r3, r3, #16
 8008b14:	2b10      	cmp	r3, #16
 8008b16:	d10a      	bne.n	8008b2e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008b18:	2300      	movs	r3, #0
 8008b1a:	60fb      	str	r3, [r7, #12]
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	60fb      	str	r3, [r7, #12]
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	685b      	ldr	r3, [r3, #4]
 8008b2a:	60fb      	str	r3, [r7, #12]
 8008b2c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008b32:	4619      	mov	r1, r3
 8008b34:	6878      	ldr	r0, [r7, #4]
 8008b36:	f7ff fdf9 	bl	800872c <HAL_UARTEx_RxEventCallback>
 8008b3a:	e002      	b.n	8008b42 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008b3c:	6878      	ldr	r0, [r7, #4]
 8008b3e:	f7ff fde1 	bl	8008704 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008b42:	2300      	movs	r3, #0
 8008b44:	e002      	b.n	8008b4c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8008b46:	2300      	movs	r3, #0
 8008b48:	e000      	b.n	8008b4c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8008b4a:	2302      	movs	r3, #2
  }
}
 8008b4c:	4618      	mov	r0, r3
 8008b4e:	3730      	adds	r7, #48	; 0x30
 8008b50:	46bd      	mov	sp, r7
 8008b52:	bd80      	pop	{r7, pc}

08008b54 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008b54:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008b58:	b0c0      	sub	sp, #256	; 0x100
 8008b5a:	af00      	add	r7, sp, #0
 8008b5c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008b60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	691b      	ldr	r3, [r3, #16]
 8008b68:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008b6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b70:	68d9      	ldr	r1, [r3, #12]
 8008b72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b76:	681a      	ldr	r2, [r3, #0]
 8008b78:	ea40 0301 	orr.w	r3, r0, r1
 8008b7c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008b7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b82:	689a      	ldr	r2, [r3, #8]
 8008b84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b88:	691b      	ldr	r3, [r3, #16]
 8008b8a:	431a      	orrs	r2, r3
 8008b8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b90:	695b      	ldr	r3, [r3, #20]
 8008b92:	431a      	orrs	r2, r3
 8008b94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b98:	69db      	ldr	r3, [r3, #28]
 8008b9a:	4313      	orrs	r3, r2
 8008b9c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008ba0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	68db      	ldr	r3, [r3, #12]
 8008ba8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008bac:	f021 010c 	bic.w	r1, r1, #12
 8008bb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008bb4:	681a      	ldr	r2, [r3, #0]
 8008bb6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008bba:	430b      	orrs	r3, r1
 8008bbc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008bbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	695b      	ldr	r3, [r3, #20]
 8008bc6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008bca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008bce:	6999      	ldr	r1, [r3, #24]
 8008bd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008bd4:	681a      	ldr	r2, [r3, #0]
 8008bd6:	ea40 0301 	orr.w	r3, r0, r1
 8008bda:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008bdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008be0:	681a      	ldr	r2, [r3, #0]
 8008be2:	4b8f      	ldr	r3, [pc, #572]	; (8008e20 <UART_SetConfig+0x2cc>)
 8008be4:	429a      	cmp	r2, r3
 8008be6:	d005      	beq.n	8008bf4 <UART_SetConfig+0xa0>
 8008be8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008bec:	681a      	ldr	r2, [r3, #0]
 8008bee:	4b8d      	ldr	r3, [pc, #564]	; (8008e24 <UART_SetConfig+0x2d0>)
 8008bf0:	429a      	cmp	r2, r3
 8008bf2:	d104      	bne.n	8008bfe <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008bf4:	f7fd f84c 	bl	8005c90 <HAL_RCC_GetPCLK2Freq>
 8008bf8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8008bfc:	e003      	b.n	8008c06 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008bfe:	f7fd f833 	bl	8005c68 <HAL_RCC_GetPCLK1Freq>
 8008c02:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008c06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c0a:	69db      	ldr	r3, [r3, #28]
 8008c0c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008c10:	f040 810c 	bne.w	8008e2c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008c14:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008c18:	2200      	movs	r2, #0
 8008c1a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008c1e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8008c22:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8008c26:	4622      	mov	r2, r4
 8008c28:	462b      	mov	r3, r5
 8008c2a:	1891      	adds	r1, r2, r2
 8008c2c:	65b9      	str	r1, [r7, #88]	; 0x58
 8008c2e:	415b      	adcs	r3, r3
 8008c30:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008c32:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8008c36:	4621      	mov	r1, r4
 8008c38:	eb12 0801 	adds.w	r8, r2, r1
 8008c3c:	4629      	mov	r1, r5
 8008c3e:	eb43 0901 	adc.w	r9, r3, r1
 8008c42:	f04f 0200 	mov.w	r2, #0
 8008c46:	f04f 0300 	mov.w	r3, #0
 8008c4a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008c4e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008c52:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008c56:	4690      	mov	r8, r2
 8008c58:	4699      	mov	r9, r3
 8008c5a:	4623      	mov	r3, r4
 8008c5c:	eb18 0303 	adds.w	r3, r8, r3
 8008c60:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008c64:	462b      	mov	r3, r5
 8008c66:	eb49 0303 	adc.w	r3, r9, r3
 8008c6a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008c6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c72:	685b      	ldr	r3, [r3, #4]
 8008c74:	2200      	movs	r2, #0
 8008c76:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008c7a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8008c7e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8008c82:	460b      	mov	r3, r1
 8008c84:	18db      	adds	r3, r3, r3
 8008c86:	653b      	str	r3, [r7, #80]	; 0x50
 8008c88:	4613      	mov	r3, r2
 8008c8a:	eb42 0303 	adc.w	r3, r2, r3
 8008c8e:	657b      	str	r3, [r7, #84]	; 0x54
 8008c90:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008c94:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8008c98:	f7f7 faf2 	bl	8000280 <__aeabi_uldivmod>
 8008c9c:	4602      	mov	r2, r0
 8008c9e:	460b      	mov	r3, r1
 8008ca0:	4b61      	ldr	r3, [pc, #388]	; (8008e28 <UART_SetConfig+0x2d4>)
 8008ca2:	fba3 2302 	umull	r2, r3, r3, r2
 8008ca6:	095b      	lsrs	r3, r3, #5
 8008ca8:	011c      	lsls	r4, r3, #4
 8008caa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008cae:	2200      	movs	r2, #0
 8008cb0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008cb4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8008cb8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8008cbc:	4642      	mov	r2, r8
 8008cbe:	464b      	mov	r3, r9
 8008cc0:	1891      	adds	r1, r2, r2
 8008cc2:	64b9      	str	r1, [r7, #72]	; 0x48
 8008cc4:	415b      	adcs	r3, r3
 8008cc6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008cc8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008ccc:	4641      	mov	r1, r8
 8008cce:	eb12 0a01 	adds.w	sl, r2, r1
 8008cd2:	4649      	mov	r1, r9
 8008cd4:	eb43 0b01 	adc.w	fp, r3, r1
 8008cd8:	f04f 0200 	mov.w	r2, #0
 8008cdc:	f04f 0300 	mov.w	r3, #0
 8008ce0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008ce4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008ce8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008cec:	4692      	mov	sl, r2
 8008cee:	469b      	mov	fp, r3
 8008cf0:	4643      	mov	r3, r8
 8008cf2:	eb1a 0303 	adds.w	r3, sl, r3
 8008cf6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008cfa:	464b      	mov	r3, r9
 8008cfc:	eb4b 0303 	adc.w	r3, fp, r3
 8008d00:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008d04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d08:	685b      	ldr	r3, [r3, #4]
 8008d0a:	2200      	movs	r2, #0
 8008d0c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008d10:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8008d14:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8008d18:	460b      	mov	r3, r1
 8008d1a:	18db      	adds	r3, r3, r3
 8008d1c:	643b      	str	r3, [r7, #64]	; 0x40
 8008d1e:	4613      	mov	r3, r2
 8008d20:	eb42 0303 	adc.w	r3, r2, r3
 8008d24:	647b      	str	r3, [r7, #68]	; 0x44
 8008d26:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008d2a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8008d2e:	f7f7 faa7 	bl	8000280 <__aeabi_uldivmod>
 8008d32:	4602      	mov	r2, r0
 8008d34:	460b      	mov	r3, r1
 8008d36:	4611      	mov	r1, r2
 8008d38:	4b3b      	ldr	r3, [pc, #236]	; (8008e28 <UART_SetConfig+0x2d4>)
 8008d3a:	fba3 2301 	umull	r2, r3, r3, r1
 8008d3e:	095b      	lsrs	r3, r3, #5
 8008d40:	2264      	movs	r2, #100	; 0x64
 8008d42:	fb02 f303 	mul.w	r3, r2, r3
 8008d46:	1acb      	subs	r3, r1, r3
 8008d48:	00db      	lsls	r3, r3, #3
 8008d4a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8008d4e:	4b36      	ldr	r3, [pc, #216]	; (8008e28 <UART_SetConfig+0x2d4>)
 8008d50:	fba3 2302 	umull	r2, r3, r3, r2
 8008d54:	095b      	lsrs	r3, r3, #5
 8008d56:	005b      	lsls	r3, r3, #1
 8008d58:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008d5c:	441c      	add	r4, r3
 8008d5e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008d62:	2200      	movs	r2, #0
 8008d64:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008d68:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8008d6c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8008d70:	4642      	mov	r2, r8
 8008d72:	464b      	mov	r3, r9
 8008d74:	1891      	adds	r1, r2, r2
 8008d76:	63b9      	str	r1, [r7, #56]	; 0x38
 8008d78:	415b      	adcs	r3, r3
 8008d7a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008d7c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008d80:	4641      	mov	r1, r8
 8008d82:	1851      	adds	r1, r2, r1
 8008d84:	6339      	str	r1, [r7, #48]	; 0x30
 8008d86:	4649      	mov	r1, r9
 8008d88:	414b      	adcs	r3, r1
 8008d8a:	637b      	str	r3, [r7, #52]	; 0x34
 8008d8c:	f04f 0200 	mov.w	r2, #0
 8008d90:	f04f 0300 	mov.w	r3, #0
 8008d94:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8008d98:	4659      	mov	r1, fp
 8008d9a:	00cb      	lsls	r3, r1, #3
 8008d9c:	4651      	mov	r1, sl
 8008d9e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008da2:	4651      	mov	r1, sl
 8008da4:	00ca      	lsls	r2, r1, #3
 8008da6:	4610      	mov	r0, r2
 8008da8:	4619      	mov	r1, r3
 8008daa:	4603      	mov	r3, r0
 8008dac:	4642      	mov	r2, r8
 8008dae:	189b      	adds	r3, r3, r2
 8008db0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008db4:	464b      	mov	r3, r9
 8008db6:	460a      	mov	r2, r1
 8008db8:	eb42 0303 	adc.w	r3, r2, r3
 8008dbc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008dc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008dc4:	685b      	ldr	r3, [r3, #4]
 8008dc6:	2200      	movs	r2, #0
 8008dc8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008dcc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8008dd0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8008dd4:	460b      	mov	r3, r1
 8008dd6:	18db      	adds	r3, r3, r3
 8008dd8:	62bb      	str	r3, [r7, #40]	; 0x28
 8008dda:	4613      	mov	r3, r2
 8008ddc:	eb42 0303 	adc.w	r3, r2, r3
 8008de0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008de2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008de6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8008dea:	f7f7 fa49 	bl	8000280 <__aeabi_uldivmod>
 8008dee:	4602      	mov	r2, r0
 8008df0:	460b      	mov	r3, r1
 8008df2:	4b0d      	ldr	r3, [pc, #52]	; (8008e28 <UART_SetConfig+0x2d4>)
 8008df4:	fba3 1302 	umull	r1, r3, r3, r2
 8008df8:	095b      	lsrs	r3, r3, #5
 8008dfa:	2164      	movs	r1, #100	; 0x64
 8008dfc:	fb01 f303 	mul.w	r3, r1, r3
 8008e00:	1ad3      	subs	r3, r2, r3
 8008e02:	00db      	lsls	r3, r3, #3
 8008e04:	3332      	adds	r3, #50	; 0x32
 8008e06:	4a08      	ldr	r2, [pc, #32]	; (8008e28 <UART_SetConfig+0x2d4>)
 8008e08:	fba2 2303 	umull	r2, r3, r2, r3
 8008e0c:	095b      	lsrs	r3, r3, #5
 8008e0e:	f003 0207 	and.w	r2, r3, #7
 8008e12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	4422      	add	r2, r4
 8008e1a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008e1c:	e105      	b.n	800902a <UART_SetConfig+0x4d6>
 8008e1e:	bf00      	nop
 8008e20:	40011000 	.word	0x40011000
 8008e24:	40011400 	.word	0x40011400
 8008e28:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008e2c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008e30:	2200      	movs	r2, #0
 8008e32:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008e36:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8008e3a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8008e3e:	4642      	mov	r2, r8
 8008e40:	464b      	mov	r3, r9
 8008e42:	1891      	adds	r1, r2, r2
 8008e44:	6239      	str	r1, [r7, #32]
 8008e46:	415b      	adcs	r3, r3
 8008e48:	627b      	str	r3, [r7, #36]	; 0x24
 8008e4a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008e4e:	4641      	mov	r1, r8
 8008e50:	1854      	adds	r4, r2, r1
 8008e52:	4649      	mov	r1, r9
 8008e54:	eb43 0501 	adc.w	r5, r3, r1
 8008e58:	f04f 0200 	mov.w	r2, #0
 8008e5c:	f04f 0300 	mov.w	r3, #0
 8008e60:	00eb      	lsls	r3, r5, #3
 8008e62:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008e66:	00e2      	lsls	r2, r4, #3
 8008e68:	4614      	mov	r4, r2
 8008e6a:	461d      	mov	r5, r3
 8008e6c:	4643      	mov	r3, r8
 8008e6e:	18e3      	adds	r3, r4, r3
 8008e70:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008e74:	464b      	mov	r3, r9
 8008e76:	eb45 0303 	adc.w	r3, r5, r3
 8008e7a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008e7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e82:	685b      	ldr	r3, [r3, #4]
 8008e84:	2200      	movs	r2, #0
 8008e86:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008e8a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008e8e:	f04f 0200 	mov.w	r2, #0
 8008e92:	f04f 0300 	mov.w	r3, #0
 8008e96:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8008e9a:	4629      	mov	r1, r5
 8008e9c:	008b      	lsls	r3, r1, #2
 8008e9e:	4621      	mov	r1, r4
 8008ea0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008ea4:	4621      	mov	r1, r4
 8008ea6:	008a      	lsls	r2, r1, #2
 8008ea8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8008eac:	f7f7 f9e8 	bl	8000280 <__aeabi_uldivmod>
 8008eb0:	4602      	mov	r2, r0
 8008eb2:	460b      	mov	r3, r1
 8008eb4:	4b60      	ldr	r3, [pc, #384]	; (8009038 <UART_SetConfig+0x4e4>)
 8008eb6:	fba3 2302 	umull	r2, r3, r3, r2
 8008eba:	095b      	lsrs	r3, r3, #5
 8008ebc:	011c      	lsls	r4, r3, #4
 8008ebe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008ec2:	2200      	movs	r2, #0
 8008ec4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008ec8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008ecc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8008ed0:	4642      	mov	r2, r8
 8008ed2:	464b      	mov	r3, r9
 8008ed4:	1891      	adds	r1, r2, r2
 8008ed6:	61b9      	str	r1, [r7, #24]
 8008ed8:	415b      	adcs	r3, r3
 8008eda:	61fb      	str	r3, [r7, #28]
 8008edc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008ee0:	4641      	mov	r1, r8
 8008ee2:	1851      	adds	r1, r2, r1
 8008ee4:	6139      	str	r1, [r7, #16]
 8008ee6:	4649      	mov	r1, r9
 8008ee8:	414b      	adcs	r3, r1
 8008eea:	617b      	str	r3, [r7, #20]
 8008eec:	f04f 0200 	mov.w	r2, #0
 8008ef0:	f04f 0300 	mov.w	r3, #0
 8008ef4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008ef8:	4659      	mov	r1, fp
 8008efa:	00cb      	lsls	r3, r1, #3
 8008efc:	4651      	mov	r1, sl
 8008efe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008f02:	4651      	mov	r1, sl
 8008f04:	00ca      	lsls	r2, r1, #3
 8008f06:	4610      	mov	r0, r2
 8008f08:	4619      	mov	r1, r3
 8008f0a:	4603      	mov	r3, r0
 8008f0c:	4642      	mov	r2, r8
 8008f0e:	189b      	adds	r3, r3, r2
 8008f10:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008f14:	464b      	mov	r3, r9
 8008f16:	460a      	mov	r2, r1
 8008f18:	eb42 0303 	adc.w	r3, r2, r3
 8008f1c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008f20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008f24:	685b      	ldr	r3, [r3, #4]
 8008f26:	2200      	movs	r2, #0
 8008f28:	67bb      	str	r3, [r7, #120]	; 0x78
 8008f2a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8008f2c:	f04f 0200 	mov.w	r2, #0
 8008f30:	f04f 0300 	mov.w	r3, #0
 8008f34:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8008f38:	4649      	mov	r1, r9
 8008f3a:	008b      	lsls	r3, r1, #2
 8008f3c:	4641      	mov	r1, r8
 8008f3e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008f42:	4641      	mov	r1, r8
 8008f44:	008a      	lsls	r2, r1, #2
 8008f46:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8008f4a:	f7f7 f999 	bl	8000280 <__aeabi_uldivmod>
 8008f4e:	4602      	mov	r2, r0
 8008f50:	460b      	mov	r3, r1
 8008f52:	4b39      	ldr	r3, [pc, #228]	; (8009038 <UART_SetConfig+0x4e4>)
 8008f54:	fba3 1302 	umull	r1, r3, r3, r2
 8008f58:	095b      	lsrs	r3, r3, #5
 8008f5a:	2164      	movs	r1, #100	; 0x64
 8008f5c:	fb01 f303 	mul.w	r3, r1, r3
 8008f60:	1ad3      	subs	r3, r2, r3
 8008f62:	011b      	lsls	r3, r3, #4
 8008f64:	3332      	adds	r3, #50	; 0x32
 8008f66:	4a34      	ldr	r2, [pc, #208]	; (8009038 <UART_SetConfig+0x4e4>)
 8008f68:	fba2 2303 	umull	r2, r3, r2, r3
 8008f6c:	095b      	lsrs	r3, r3, #5
 8008f6e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008f72:	441c      	add	r4, r3
 8008f74:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008f78:	2200      	movs	r2, #0
 8008f7a:	673b      	str	r3, [r7, #112]	; 0x70
 8008f7c:	677a      	str	r2, [r7, #116]	; 0x74
 8008f7e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8008f82:	4642      	mov	r2, r8
 8008f84:	464b      	mov	r3, r9
 8008f86:	1891      	adds	r1, r2, r2
 8008f88:	60b9      	str	r1, [r7, #8]
 8008f8a:	415b      	adcs	r3, r3
 8008f8c:	60fb      	str	r3, [r7, #12]
 8008f8e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008f92:	4641      	mov	r1, r8
 8008f94:	1851      	adds	r1, r2, r1
 8008f96:	6039      	str	r1, [r7, #0]
 8008f98:	4649      	mov	r1, r9
 8008f9a:	414b      	adcs	r3, r1
 8008f9c:	607b      	str	r3, [r7, #4]
 8008f9e:	f04f 0200 	mov.w	r2, #0
 8008fa2:	f04f 0300 	mov.w	r3, #0
 8008fa6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008faa:	4659      	mov	r1, fp
 8008fac:	00cb      	lsls	r3, r1, #3
 8008fae:	4651      	mov	r1, sl
 8008fb0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008fb4:	4651      	mov	r1, sl
 8008fb6:	00ca      	lsls	r2, r1, #3
 8008fb8:	4610      	mov	r0, r2
 8008fba:	4619      	mov	r1, r3
 8008fbc:	4603      	mov	r3, r0
 8008fbe:	4642      	mov	r2, r8
 8008fc0:	189b      	adds	r3, r3, r2
 8008fc2:	66bb      	str	r3, [r7, #104]	; 0x68
 8008fc4:	464b      	mov	r3, r9
 8008fc6:	460a      	mov	r2, r1
 8008fc8:	eb42 0303 	adc.w	r3, r2, r3
 8008fcc:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008fce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008fd2:	685b      	ldr	r3, [r3, #4]
 8008fd4:	2200      	movs	r2, #0
 8008fd6:	663b      	str	r3, [r7, #96]	; 0x60
 8008fd8:	667a      	str	r2, [r7, #100]	; 0x64
 8008fda:	f04f 0200 	mov.w	r2, #0
 8008fde:	f04f 0300 	mov.w	r3, #0
 8008fe2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8008fe6:	4649      	mov	r1, r9
 8008fe8:	008b      	lsls	r3, r1, #2
 8008fea:	4641      	mov	r1, r8
 8008fec:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008ff0:	4641      	mov	r1, r8
 8008ff2:	008a      	lsls	r2, r1, #2
 8008ff4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8008ff8:	f7f7 f942 	bl	8000280 <__aeabi_uldivmod>
 8008ffc:	4602      	mov	r2, r0
 8008ffe:	460b      	mov	r3, r1
 8009000:	4b0d      	ldr	r3, [pc, #52]	; (8009038 <UART_SetConfig+0x4e4>)
 8009002:	fba3 1302 	umull	r1, r3, r3, r2
 8009006:	095b      	lsrs	r3, r3, #5
 8009008:	2164      	movs	r1, #100	; 0x64
 800900a:	fb01 f303 	mul.w	r3, r1, r3
 800900e:	1ad3      	subs	r3, r2, r3
 8009010:	011b      	lsls	r3, r3, #4
 8009012:	3332      	adds	r3, #50	; 0x32
 8009014:	4a08      	ldr	r2, [pc, #32]	; (8009038 <UART_SetConfig+0x4e4>)
 8009016:	fba2 2303 	umull	r2, r3, r2, r3
 800901a:	095b      	lsrs	r3, r3, #5
 800901c:	f003 020f 	and.w	r2, r3, #15
 8009020:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	4422      	add	r2, r4
 8009028:	609a      	str	r2, [r3, #8]
}
 800902a:	bf00      	nop
 800902c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8009030:	46bd      	mov	sp, r7
 8009032:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009036:	bf00      	nop
 8009038:	51eb851f 	.word	0x51eb851f

0800903c <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800903c:	b084      	sub	sp, #16
 800903e:	b480      	push	{r7}
 8009040:	b085      	sub	sp, #20
 8009042:	af00      	add	r7, sp, #0
 8009044:	6078      	str	r0, [r7, #4]
 8009046:	f107 001c 	add.w	r0, r7, #28
 800904a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800904e:	2300      	movs	r3, #0
 8009050:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8009052:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8009054:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8009056:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8009058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800905a:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800905c:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800905e:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8009060:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8009062:	431a      	orrs	r2, r3
             Init.ClockDiv
 8009064:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8009066:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8009068:	68fa      	ldr	r2, [r7, #12]
 800906a:	4313      	orrs	r3, r2
 800906c:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	685b      	ldr	r3, [r3, #4]
 8009072:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8009076:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800907a:	68fa      	ldr	r2, [r7, #12]
 800907c:	431a      	orrs	r2, r3
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8009082:	2300      	movs	r3, #0
}
 8009084:	4618      	mov	r0, r3
 8009086:	3714      	adds	r7, #20
 8009088:	46bd      	mov	sp, r7
 800908a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800908e:	b004      	add	sp, #16
 8009090:	4770      	bx	lr

08009092 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8009092:	b480      	push	{r7}
 8009094:	b083      	sub	sp, #12
 8009096:	af00      	add	r7, sp, #0
 8009098:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 80090a0:	4618      	mov	r0, r3
 80090a2:	370c      	adds	r7, #12
 80090a4:	46bd      	mov	sp, r7
 80090a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090aa:	4770      	bx	lr

080090ac <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 80090ac:	b480      	push	{r7}
 80090ae:	b083      	sub	sp, #12
 80090b0:	af00      	add	r7, sp, #0
 80090b2:	6078      	str	r0, [r7, #4]
 80090b4:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 80090b6:	683b      	ldr	r3, [r7, #0]
 80090b8:	681a      	ldr	r2, [r3, #0]
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80090c0:	2300      	movs	r3, #0
}
 80090c2:	4618      	mov	r0, r3
 80090c4:	370c      	adds	r7, #12
 80090c6:	46bd      	mov	sp, r7
 80090c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090cc:	4770      	bx	lr

080090ce <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 80090ce:	b480      	push	{r7}
 80090d0:	b083      	sub	sp, #12
 80090d2:	af00      	add	r7, sp, #0
 80090d4:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	2203      	movs	r2, #3
 80090da:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80090dc:	2300      	movs	r3, #0
}
 80090de:	4618      	mov	r0, r3
 80090e0:	370c      	adds	r7, #12
 80090e2:	46bd      	mov	sp, r7
 80090e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e8:	4770      	bx	lr

080090ea <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 80090ea:	b480      	push	{r7}
 80090ec:	b083      	sub	sp, #12
 80090ee:	af00      	add	r7, sp, #0
 80090f0:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	f003 0303 	and.w	r3, r3, #3
}
 80090fa:	4618      	mov	r0, r3
 80090fc:	370c      	adds	r7, #12
 80090fe:	46bd      	mov	sp, r7
 8009100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009104:	4770      	bx	lr

08009106 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8009106:	b480      	push	{r7}
 8009108:	b085      	sub	sp, #20
 800910a:	af00      	add	r7, sp, #0
 800910c:	6078      	str	r0, [r7, #4]
 800910e:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8009110:	2300      	movs	r3, #0
 8009112:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8009114:	683b      	ldr	r3, [r7, #0]
 8009116:	681a      	ldr	r2, [r3, #0]
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800911c:	683b      	ldr	r3, [r7, #0]
 800911e:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8009120:	683b      	ldr	r3, [r7, #0]
 8009122:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8009124:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8009126:	683b      	ldr	r3, [r7, #0]
 8009128:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800912a:	431a      	orrs	r2, r3
                       Command->CPSM);
 800912c:	683b      	ldr	r3, [r7, #0]
 800912e:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8009130:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8009132:	68fa      	ldr	r2, [r7, #12]
 8009134:	4313      	orrs	r3, r2
 8009136:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	68db      	ldr	r3, [r3, #12]
 800913c:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8009140:	f023 030f 	bic.w	r3, r3, #15
 8009144:	68fa      	ldr	r2, [r7, #12]
 8009146:	431a      	orrs	r2, r3
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800914c:	2300      	movs	r3, #0
}
 800914e:	4618      	mov	r0, r3
 8009150:	3714      	adds	r7, #20
 8009152:	46bd      	mov	sp, r7
 8009154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009158:	4770      	bx	lr

0800915a <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800915a:	b480      	push	{r7}
 800915c:	b083      	sub	sp, #12
 800915e:	af00      	add	r7, sp, #0
 8009160:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	691b      	ldr	r3, [r3, #16]
 8009166:	b2db      	uxtb	r3, r3
}
 8009168:	4618      	mov	r0, r3
 800916a:	370c      	adds	r7, #12
 800916c:	46bd      	mov	sp, r7
 800916e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009172:	4770      	bx	lr

08009174 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8009174:	b480      	push	{r7}
 8009176:	b085      	sub	sp, #20
 8009178:	af00      	add	r7, sp, #0
 800917a:	6078      	str	r0, [r7, #4]
 800917c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	3314      	adds	r3, #20
 8009182:	461a      	mov	r2, r3
 8009184:	683b      	ldr	r3, [r7, #0]
 8009186:	4413      	add	r3, r2
 8009188:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	681b      	ldr	r3, [r3, #0]
}  
 800918e:	4618      	mov	r0, r3
 8009190:	3714      	adds	r7, #20
 8009192:	46bd      	mov	sp, r7
 8009194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009198:	4770      	bx	lr

0800919a <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800919a:	b480      	push	{r7}
 800919c:	b085      	sub	sp, #20
 800919e:	af00      	add	r7, sp, #0
 80091a0:	6078      	str	r0, [r7, #4]
 80091a2:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80091a4:	2300      	movs	r3, #0
 80091a6:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 80091a8:	683b      	ldr	r3, [r7, #0]
 80091aa:	681a      	ldr	r2, [r3, #0]
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 80091b0:	683b      	ldr	r3, [r7, #0]
 80091b2:	685a      	ldr	r2, [r3, #4]
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80091b8:	683b      	ldr	r3, [r7, #0]
 80091ba:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 80091bc:	683b      	ldr	r3, [r7, #0]
 80091be:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80091c0:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 80091c2:	683b      	ldr	r3, [r7, #0]
 80091c4:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 80091c6:	431a      	orrs	r2, r3
                       Data->DPSM);
 80091c8:	683b      	ldr	r3, [r7, #0]
 80091ca:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 80091cc:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80091ce:	68fa      	ldr	r2, [r7, #12]
 80091d0:	4313      	orrs	r3, r2
 80091d2:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091d8:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	431a      	orrs	r2, r3
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80091e4:	2300      	movs	r3, #0

}
 80091e6:	4618      	mov	r0, r3
 80091e8:	3714      	adds	r7, #20
 80091ea:	46bd      	mov	sp, r7
 80091ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091f0:	4770      	bx	lr

080091f2 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 80091f2:	b580      	push	{r7, lr}
 80091f4:	b088      	sub	sp, #32
 80091f6:	af00      	add	r7, sp, #0
 80091f8:	6078      	str	r0, [r7, #4]
 80091fa:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80091fc:	683b      	ldr	r3, [r7, #0]
 80091fe:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8009200:	2310      	movs	r3, #16
 8009202:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009204:	2340      	movs	r3, #64	; 0x40
 8009206:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009208:	2300      	movs	r3, #0
 800920a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800920c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009210:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009212:	f107 0308 	add.w	r3, r7, #8
 8009216:	4619      	mov	r1, r3
 8009218:	6878      	ldr	r0, [r7, #4]
 800921a:	f7ff ff74 	bl	8009106 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800921e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009222:	2110      	movs	r1, #16
 8009224:	6878      	ldr	r0, [r7, #4]
 8009226:	f000 f9d7 	bl	80095d8 <SDMMC_GetCmdResp1>
 800922a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800922c:	69fb      	ldr	r3, [r7, #28]
}
 800922e:	4618      	mov	r0, r3
 8009230:	3720      	adds	r7, #32
 8009232:	46bd      	mov	sp, r7
 8009234:	bd80      	pop	{r7, pc}

08009236 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8009236:	b580      	push	{r7, lr}
 8009238:	b088      	sub	sp, #32
 800923a:	af00      	add	r7, sp, #0
 800923c:	6078      	str	r0, [r7, #4]
 800923e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8009240:	683b      	ldr	r3, [r7, #0]
 8009242:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8009244:	2311      	movs	r3, #17
 8009246:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009248:	2340      	movs	r3, #64	; 0x40
 800924a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800924c:	2300      	movs	r3, #0
 800924e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009250:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009254:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009256:	f107 0308 	add.w	r3, r7, #8
 800925a:	4619      	mov	r1, r3
 800925c:	6878      	ldr	r0, [r7, #4]
 800925e:	f7ff ff52 	bl	8009106 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8009262:	f241 3288 	movw	r2, #5000	; 0x1388
 8009266:	2111      	movs	r1, #17
 8009268:	6878      	ldr	r0, [r7, #4]
 800926a:	f000 f9b5 	bl	80095d8 <SDMMC_GetCmdResp1>
 800926e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009270:	69fb      	ldr	r3, [r7, #28]
}
 8009272:	4618      	mov	r0, r3
 8009274:	3720      	adds	r7, #32
 8009276:	46bd      	mov	sp, r7
 8009278:	bd80      	pop	{r7, pc}

0800927a <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800927a:	b580      	push	{r7, lr}
 800927c:	b088      	sub	sp, #32
 800927e:	af00      	add	r7, sp, #0
 8009280:	6078      	str	r0, [r7, #4]
 8009282:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8009284:	683b      	ldr	r3, [r7, #0]
 8009286:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8009288:	2312      	movs	r3, #18
 800928a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800928c:	2340      	movs	r3, #64	; 0x40
 800928e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009290:	2300      	movs	r3, #0
 8009292:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009294:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009298:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800929a:	f107 0308 	add.w	r3, r7, #8
 800929e:	4619      	mov	r1, r3
 80092a0:	6878      	ldr	r0, [r7, #4]
 80092a2:	f7ff ff30 	bl	8009106 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 80092a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80092aa:	2112      	movs	r1, #18
 80092ac:	6878      	ldr	r0, [r7, #4]
 80092ae:	f000 f993 	bl	80095d8 <SDMMC_GetCmdResp1>
 80092b2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80092b4:	69fb      	ldr	r3, [r7, #28]
}
 80092b6:	4618      	mov	r0, r3
 80092b8:	3720      	adds	r7, #32
 80092ba:	46bd      	mov	sp, r7
 80092bc:	bd80      	pop	{r7, pc}

080092be <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 80092be:	b580      	push	{r7, lr}
 80092c0:	b088      	sub	sp, #32
 80092c2:	af00      	add	r7, sp, #0
 80092c4:	6078      	str	r0, [r7, #4]
 80092c6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80092c8:	683b      	ldr	r3, [r7, #0]
 80092ca:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 80092cc:	2318      	movs	r3, #24
 80092ce:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80092d0:	2340      	movs	r3, #64	; 0x40
 80092d2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80092d4:	2300      	movs	r3, #0
 80092d6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80092d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80092dc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80092de:	f107 0308 	add.w	r3, r7, #8
 80092e2:	4619      	mov	r1, r3
 80092e4:	6878      	ldr	r0, [r7, #4]
 80092e6:	f7ff ff0e 	bl	8009106 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80092ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80092ee:	2118      	movs	r1, #24
 80092f0:	6878      	ldr	r0, [r7, #4]
 80092f2:	f000 f971 	bl	80095d8 <SDMMC_GetCmdResp1>
 80092f6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80092f8:	69fb      	ldr	r3, [r7, #28]
}
 80092fa:	4618      	mov	r0, r3
 80092fc:	3720      	adds	r7, #32
 80092fe:	46bd      	mov	sp, r7
 8009300:	bd80      	pop	{r7, pc}

08009302 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8009302:	b580      	push	{r7, lr}
 8009304:	b088      	sub	sp, #32
 8009306:	af00      	add	r7, sp, #0
 8009308:	6078      	str	r0, [r7, #4]
 800930a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800930c:	683b      	ldr	r3, [r7, #0]
 800930e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8009310:	2319      	movs	r3, #25
 8009312:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009314:	2340      	movs	r3, #64	; 0x40
 8009316:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009318:	2300      	movs	r3, #0
 800931a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800931c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009320:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009322:	f107 0308 	add.w	r3, r7, #8
 8009326:	4619      	mov	r1, r3
 8009328:	6878      	ldr	r0, [r7, #4]
 800932a:	f7ff feec 	bl	8009106 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800932e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009332:	2119      	movs	r1, #25
 8009334:	6878      	ldr	r0, [r7, #4]
 8009336:	f000 f94f 	bl	80095d8 <SDMMC_GetCmdResp1>
 800933a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800933c:	69fb      	ldr	r3, [r7, #28]
}
 800933e:	4618      	mov	r0, r3
 8009340:	3720      	adds	r7, #32
 8009342:	46bd      	mov	sp, r7
 8009344:	bd80      	pop	{r7, pc}
	...

08009348 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8009348:	b580      	push	{r7, lr}
 800934a:	b088      	sub	sp, #32
 800934c:	af00      	add	r7, sp, #0
 800934e:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8009350:	2300      	movs	r3, #0
 8009352:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8009354:	230c      	movs	r3, #12
 8009356:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009358:	2340      	movs	r3, #64	; 0x40
 800935a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800935c:	2300      	movs	r3, #0
 800935e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009360:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009364:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009366:	f107 0308 	add.w	r3, r7, #8
 800936a:	4619      	mov	r1, r3
 800936c:	6878      	ldr	r0, [r7, #4]
 800936e:	f7ff feca 	bl	8009106 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8009372:	4a05      	ldr	r2, [pc, #20]	; (8009388 <SDMMC_CmdStopTransfer+0x40>)
 8009374:	210c      	movs	r1, #12
 8009376:	6878      	ldr	r0, [r7, #4]
 8009378:	f000 f92e 	bl	80095d8 <SDMMC_GetCmdResp1>
 800937c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800937e:	69fb      	ldr	r3, [r7, #28]
}
 8009380:	4618      	mov	r0, r3
 8009382:	3720      	adds	r7, #32
 8009384:	46bd      	mov	sp, r7
 8009386:	bd80      	pop	{r7, pc}
 8009388:	05f5e100 	.word	0x05f5e100

0800938c <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800938c:	b580      	push	{r7, lr}
 800938e:	b08a      	sub	sp, #40	; 0x28
 8009390:	af00      	add	r7, sp, #0
 8009392:	60f8      	str	r0, [r7, #12]
 8009394:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8009398:	683b      	ldr	r3, [r7, #0]
 800939a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800939c:	2307      	movs	r3, #7
 800939e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80093a0:	2340      	movs	r3, #64	; 0x40
 80093a2:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80093a4:	2300      	movs	r3, #0
 80093a6:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80093a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80093ac:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80093ae:	f107 0310 	add.w	r3, r7, #16
 80093b2:	4619      	mov	r1, r3
 80093b4:	68f8      	ldr	r0, [r7, #12]
 80093b6:	f7ff fea6 	bl	8009106 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 80093ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80093be:	2107      	movs	r1, #7
 80093c0:	68f8      	ldr	r0, [r7, #12]
 80093c2:	f000 f909 	bl	80095d8 <SDMMC_GetCmdResp1>
 80093c6:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 80093c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80093ca:	4618      	mov	r0, r3
 80093cc:	3728      	adds	r7, #40	; 0x28
 80093ce:	46bd      	mov	sp, r7
 80093d0:	bd80      	pop	{r7, pc}

080093d2 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 80093d2:	b580      	push	{r7, lr}
 80093d4:	b088      	sub	sp, #32
 80093d6:	af00      	add	r7, sp, #0
 80093d8:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 80093da:	2300      	movs	r3, #0
 80093dc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80093de:	2300      	movs	r3, #0
 80093e0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 80093e2:	2300      	movs	r3, #0
 80093e4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80093e6:	2300      	movs	r3, #0
 80093e8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80093ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80093ee:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80093f0:	f107 0308 	add.w	r3, r7, #8
 80093f4:	4619      	mov	r1, r3
 80093f6:	6878      	ldr	r0, [r7, #4]
 80093f8:	f7ff fe85 	bl	8009106 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 80093fc:	6878      	ldr	r0, [r7, #4]
 80093fe:	f000 fb23 	bl	8009a48 <SDMMC_GetCmdError>
 8009402:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009404:	69fb      	ldr	r3, [r7, #28]
}
 8009406:	4618      	mov	r0, r3
 8009408:	3720      	adds	r7, #32
 800940a:	46bd      	mov	sp, r7
 800940c:	bd80      	pop	{r7, pc}

0800940e <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800940e:	b580      	push	{r7, lr}
 8009410:	b088      	sub	sp, #32
 8009412:	af00      	add	r7, sp, #0
 8009414:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8009416:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800941a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800941c:	2308      	movs	r3, #8
 800941e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009420:	2340      	movs	r3, #64	; 0x40
 8009422:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009424:	2300      	movs	r3, #0
 8009426:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009428:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800942c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800942e:	f107 0308 	add.w	r3, r7, #8
 8009432:	4619      	mov	r1, r3
 8009434:	6878      	ldr	r0, [r7, #4]
 8009436:	f7ff fe66 	bl	8009106 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800943a:	6878      	ldr	r0, [r7, #4]
 800943c:	f000 fab6 	bl	80099ac <SDMMC_GetCmdResp7>
 8009440:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009442:	69fb      	ldr	r3, [r7, #28]
}
 8009444:	4618      	mov	r0, r3
 8009446:	3720      	adds	r7, #32
 8009448:	46bd      	mov	sp, r7
 800944a:	bd80      	pop	{r7, pc}

0800944c <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800944c:	b580      	push	{r7, lr}
 800944e:	b088      	sub	sp, #32
 8009450:	af00      	add	r7, sp, #0
 8009452:	6078      	str	r0, [r7, #4]
 8009454:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8009456:	683b      	ldr	r3, [r7, #0]
 8009458:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800945a:	2337      	movs	r3, #55	; 0x37
 800945c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800945e:	2340      	movs	r3, #64	; 0x40
 8009460:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009462:	2300      	movs	r3, #0
 8009464:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009466:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800946a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800946c:	f107 0308 	add.w	r3, r7, #8
 8009470:	4619      	mov	r1, r3
 8009472:	6878      	ldr	r0, [r7, #4]
 8009474:	f7ff fe47 	bl	8009106 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8009478:	f241 3288 	movw	r2, #5000	; 0x1388
 800947c:	2137      	movs	r1, #55	; 0x37
 800947e:	6878      	ldr	r0, [r7, #4]
 8009480:	f000 f8aa 	bl	80095d8 <SDMMC_GetCmdResp1>
 8009484:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009486:	69fb      	ldr	r3, [r7, #28]
}
 8009488:	4618      	mov	r0, r3
 800948a:	3720      	adds	r7, #32
 800948c:	46bd      	mov	sp, r7
 800948e:	bd80      	pop	{r7, pc}

08009490 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8009490:	b580      	push	{r7, lr}
 8009492:	b088      	sub	sp, #32
 8009494:	af00      	add	r7, sp, #0
 8009496:	6078      	str	r0, [r7, #4]
 8009498:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800949a:	683b      	ldr	r3, [r7, #0]
 800949c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80094a0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80094a4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 80094a6:	2329      	movs	r3, #41	; 0x29
 80094a8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80094aa:	2340      	movs	r3, #64	; 0x40
 80094ac:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80094ae:	2300      	movs	r3, #0
 80094b0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80094b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80094b6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80094b8:	f107 0308 	add.w	r3, r7, #8
 80094bc:	4619      	mov	r1, r3
 80094be:	6878      	ldr	r0, [r7, #4]
 80094c0:	f7ff fe21 	bl	8009106 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 80094c4:	6878      	ldr	r0, [r7, #4]
 80094c6:	f000 f9bd 	bl	8009844 <SDMMC_GetCmdResp3>
 80094ca:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80094cc:	69fb      	ldr	r3, [r7, #28]
}
 80094ce:	4618      	mov	r0, r3
 80094d0:	3720      	adds	r7, #32
 80094d2:	46bd      	mov	sp, r7
 80094d4:	bd80      	pop	{r7, pc}

080094d6 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 80094d6:	b580      	push	{r7, lr}
 80094d8:	b088      	sub	sp, #32
 80094da:	af00      	add	r7, sp, #0
 80094dc:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 80094de:	2300      	movs	r3, #0
 80094e0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80094e2:	2302      	movs	r3, #2
 80094e4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80094e6:	23c0      	movs	r3, #192	; 0xc0
 80094e8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80094ea:	2300      	movs	r3, #0
 80094ec:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80094ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80094f2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80094f4:	f107 0308 	add.w	r3, r7, #8
 80094f8:	4619      	mov	r1, r3
 80094fa:	6878      	ldr	r0, [r7, #4]
 80094fc:	f7ff fe03 	bl	8009106 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8009500:	6878      	ldr	r0, [r7, #4]
 8009502:	f000 f957 	bl	80097b4 <SDMMC_GetCmdResp2>
 8009506:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009508:	69fb      	ldr	r3, [r7, #28]
}
 800950a:	4618      	mov	r0, r3
 800950c:	3720      	adds	r7, #32
 800950e:	46bd      	mov	sp, r7
 8009510:	bd80      	pop	{r7, pc}

08009512 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8009512:	b580      	push	{r7, lr}
 8009514:	b088      	sub	sp, #32
 8009516:	af00      	add	r7, sp, #0
 8009518:	6078      	str	r0, [r7, #4]
 800951a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800951c:	683b      	ldr	r3, [r7, #0]
 800951e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8009520:	2309      	movs	r3, #9
 8009522:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8009524:	23c0      	movs	r3, #192	; 0xc0
 8009526:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009528:	2300      	movs	r3, #0
 800952a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800952c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009530:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009532:	f107 0308 	add.w	r3, r7, #8
 8009536:	4619      	mov	r1, r3
 8009538:	6878      	ldr	r0, [r7, #4]
 800953a:	f7ff fde4 	bl	8009106 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800953e:	6878      	ldr	r0, [r7, #4]
 8009540:	f000 f938 	bl	80097b4 <SDMMC_GetCmdResp2>
 8009544:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009546:	69fb      	ldr	r3, [r7, #28]
}
 8009548:	4618      	mov	r0, r3
 800954a:	3720      	adds	r7, #32
 800954c:	46bd      	mov	sp, r7
 800954e:	bd80      	pop	{r7, pc}

08009550 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8009550:	b580      	push	{r7, lr}
 8009552:	b088      	sub	sp, #32
 8009554:	af00      	add	r7, sp, #0
 8009556:	6078      	str	r0, [r7, #4]
 8009558:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800955a:	2300      	movs	r3, #0
 800955c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800955e:	2303      	movs	r3, #3
 8009560:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009562:	2340      	movs	r3, #64	; 0x40
 8009564:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009566:	2300      	movs	r3, #0
 8009568:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800956a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800956e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009570:	f107 0308 	add.w	r3, r7, #8
 8009574:	4619      	mov	r1, r3
 8009576:	6878      	ldr	r0, [r7, #4]
 8009578:	f7ff fdc5 	bl	8009106 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800957c:	683a      	ldr	r2, [r7, #0]
 800957e:	2103      	movs	r1, #3
 8009580:	6878      	ldr	r0, [r7, #4]
 8009582:	f000 f99d 	bl	80098c0 <SDMMC_GetCmdResp6>
 8009586:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009588:	69fb      	ldr	r3, [r7, #28]
}
 800958a:	4618      	mov	r0, r3
 800958c:	3720      	adds	r7, #32
 800958e:	46bd      	mov	sp, r7
 8009590:	bd80      	pop	{r7, pc}

08009592 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8009592:	b580      	push	{r7, lr}
 8009594:	b088      	sub	sp, #32
 8009596:	af00      	add	r7, sp, #0
 8009598:	6078      	str	r0, [r7, #4]
 800959a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800959c:	683b      	ldr	r3, [r7, #0]
 800959e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 80095a0:	230d      	movs	r3, #13
 80095a2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80095a4:	2340      	movs	r3, #64	; 0x40
 80095a6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80095a8:	2300      	movs	r3, #0
 80095aa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80095ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80095b0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80095b2:	f107 0308 	add.w	r3, r7, #8
 80095b6:	4619      	mov	r1, r3
 80095b8:	6878      	ldr	r0, [r7, #4]
 80095ba:	f7ff fda4 	bl	8009106 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 80095be:	f241 3288 	movw	r2, #5000	; 0x1388
 80095c2:	210d      	movs	r1, #13
 80095c4:	6878      	ldr	r0, [r7, #4]
 80095c6:	f000 f807 	bl	80095d8 <SDMMC_GetCmdResp1>
 80095ca:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80095cc:	69fb      	ldr	r3, [r7, #28]
}
 80095ce:	4618      	mov	r0, r3
 80095d0:	3720      	adds	r7, #32
 80095d2:	46bd      	mov	sp, r7
 80095d4:	bd80      	pop	{r7, pc}
	...

080095d8 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 80095d8:	b580      	push	{r7, lr}
 80095da:	b088      	sub	sp, #32
 80095dc:	af00      	add	r7, sp, #0
 80095de:	60f8      	str	r0, [r7, #12]
 80095e0:	460b      	mov	r3, r1
 80095e2:	607a      	str	r2, [r7, #4]
 80095e4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80095e6:	4b70      	ldr	r3, [pc, #448]	; (80097a8 <SDMMC_GetCmdResp1+0x1d0>)
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	4a70      	ldr	r2, [pc, #448]	; (80097ac <SDMMC_GetCmdResp1+0x1d4>)
 80095ec:	fba2 2303 	umull	r2, r3, r2, r3
 80095f0:	0a5a      	lsrs	r2, r3, #9
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	fb02 f303 	mul.w	r3, r2, r3
 80095f8:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 80095fa:	69fb      	ldr	r3, [r7, #28]
 80095fc:	1e5a      	subs	r2, r3, #1
 80095fe:	61fa      	str	r2, [r7, #28]
 8009600:	2b00      	cmp	r3, #0
 8009602:	d102      	bne.n	800960a <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009604:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009608:	e0c9      	b.n	800979e <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800960e:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009610:	69bb      	ldr	r3, [r7, #24]
 8009612:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8009616:	2b00      	cmp	r3, #0
 8009618:	d0ef      	beq.n	80095fa <SDMMC_GetCmdResp1+0x22>
 800961a:	69bb      	ldr	r3, [r7, #24]
 800961c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009620:	2b00      	cmp	r3, #0
 8009622:	d1ea      	bne.n	80095fa <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009628:	f003 0304 	and.w	r3, r3, #4
 800962c:	2b00      	cmp	r3, #0
 800962e:	d004      	beq.n	800963a <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	2204      	movs	r2, #4
 8009634:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009636:	2304      	movs	r3, #4
 8009638:	e0b1      	b.n	800979e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800963e:	f003 0301 	and.w	r3, r3, #1
 8009642:	2b00      	cmp	r3, #0
 8009644:	d004      	beq.n	8009650 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	2201      	movs	r2, #1
 800964a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800964c:	2301      	movs	r3, #1
 800964e:	e0a6      	b.n	800979e <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	22c5      	movs	r2, #197	; 0xc5
 8009654:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8009656:	68f8      	ldr	r0, [r7, #12]
 8009658:	f7ff fd7f 	bl	800915a <SDIO_GetCommandResponse>
 800965c:	4603      	mov	r3, r0
 800965e:	461a      	mov	r2, r3
 8009660:	7afb      	ldrb	r3, [r7, #11]
 8009662:	4293      	cmp	r3, r2
 8009664:	d001      	beq.n	800966a <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009666:	2301      	movs	r3, #1
 8009668:	e099      	b.n	800979e <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800966a:	2100      	movs	r1, #0
 800966c:	68f8      	ldr	r0, [r7, #12]
 800966e:	f7ff fd81 	bl	8009174 <SDIO_GetResponse>
 8009672:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8009674:	697a      	ldr	r2, [r7, #20]
 8009676:	4b4e      	ldr	r3, [pc, #312]	; (80097b0 <SDMMC_GetCmdResp1+0x1d8>)
 8009678:	4013      	ands	r3, r2
 800967a:	2b00      	cmp	r3, #0
 800967c:	d101      	bne.n	8009682 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800967e:	2300      	movs	r3, #0
 8009680:	e08d      	b.n	800979e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8009682:	697b      	ldr	r3, [r7, #20]
 8009684:	2b00      	cmp	r3, #0
 8009686:	da02      	bge.n	800968e <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8009688:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800968c:	e087      	b.n	800979e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800968e:	697b      	ldr	r3, [r7, #20]
 8009690:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009694:	2b00      	cmp	r3, #0
 8009696:	d001      	beq.n	800969c <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8009698:	2340      	movs	r3, #64	; 0x40
 800969a:	e080      	b.n	800979e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800969c:	697b      	ldr	r3, [r7, #20]
 800969e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d001      	beq.n	80096aa <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80096a6:	2380      	movs	r3, #128	; 0x80
 80096a8:	e079      	b.n	800979e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80096aa:	697b      	ldr	r3, [r7, #20]
 80096ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d002      	beq.n	80096ba <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80096b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80096b8:	e071      	b.n	800979e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80096ba:	697b      	ldr	r3, [r7, #20]
 80096bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d002      	beq.n	80096ca <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80096c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80096c8:	e069      	b.n	800979e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80096ca:	697b      	ldr	r3, [r7, #20]
 80096cc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d002      	beq.n	80096da <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80096d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80096d8:	e061      	b.n	800979e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80096da:	697b      	ldr	r3, [r7, #20]
 80096dc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d002      	beq.n	80096ea <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80096e4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80096e8:	e059      	b.n	800979e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80096ea:	697b      	ldr	r3, [r7, #20]
 80096ec:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d002      	beq.n	80096fa <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80096f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80096f8:	e051      	b.n	800979e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80096fa:	697b      	ldr	r3, [r7, #20]
 80096fc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009700:	2b00      	cmp	r3, #0
 8009702:	d002      	beq.n	800970a <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8009704:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009708:	e049      	b.n	800979e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800970a:	697b      	ldr	r3, [r7, #20]
 800970c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009710:	2b00      	cmp	r3, #0
 8009712:	d002      	beq.n	800971a <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8009714:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8009718:	e041      	b.n	800979e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800971a:	697b      	ldr	r3, [r7, #20]
 800971c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009720:	2b00      	cmp	r3, #0
 8009722:	d002      	beq.n	800972a <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8009724:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009728:	e039      	b.n	800979e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800972a:	697b      	ldr	r3, [r7, #20]
 800972c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009730:	2b00      	cmp	r3, #0
 8009732:	d002      	beq.n	800973a <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8009734:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8009738:	e031      	b.n	800979e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800973a:	697b      	ldr	r3, [r7, #20]
 800973c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009740:	2b00      	cmp	r3, #0
 8009742:	d002      	beq.n	800974a <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8009744:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8009748:	e029      	b.n	800979e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800974a:	697b      	ldr	r3, [r7, #20]
 800974c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009750:	2b00      	cmp	r3, #0
 8009752:	d002      	beq.n	800975a <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8009754:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8009758:	e021      	b.n	800979e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800975a:	697b      	ldr	r3, [r7, #20]
 800975c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009760:	2b00      	cmp	r3, #0
 8009762:	d002      	beq.n	800976a <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8009764:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8009768:	e019      	b.n	800979e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800976a:	697b      	ldr	r3, [r7, #20]
 800976c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009770:	2b00      	cmp	r3, #0
 8009772:	d002      	beq.n	800977a <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8009774:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8009778:	e011      	b.n	800979e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800977a:	697b      	ldr	r3, [r7, #20]
 800977c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009780:	2b00      	cmp	r3, #0
 8009782:	d002      	beq.n	800978a <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8009784:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8009788:	e009      	b.n	800979e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800978a:	697b      	ldr	r3, [r7, #20]
 800978c:	f003 0308 	and.w	r3, r3, #8
 8009790:	2b00      	cmp	r3, #0
 8009792:	d002      	beq.n	800979a <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8009794:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8009798:	e001      	b.n	800979e <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800979a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800979e:	4618      	mov	r0, r3
 80097a0:	3720      	adds	r7, #32
 80097a2:	46bd      	mov	sp, r7
 80097a4:	bd80      	pop	{r7, pc}
 80097a6:	bf00      	nop
 80097a8:	20000000 	.word	0x20000000
 80097ac:	10624dd3 	.word	0x10624dd3
 80097b0:	fdffe008 	.word	0xfdffe008

080097b4 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 80097b4:	b480      	push	{r7}
 80097b6:	b085      	sub	sp, #20
 80097b8:	af00      	add	r7, sp, #0
 80097ba:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80097bc:	4b1f      	ldr	r3, [pc, #124]	; (800983c <SDMMC_GetCmdResp2+0x88>)
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	4a1f      	ldr	r2, [pc, #124]	; (8009840 <SDMMC_GetCmdResp2+0x8c>)
 80097c2:	fba2 2303 	umull	r2, r3, r2, r3
 80097c6:	0a5b      	lsrs	r3, r3, #9
 80097c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80097cc:	fb02 f303 	mul.w	r3, r2, r3
 80097d0:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	1e5a      	subs	r2, r3, #1
 80097d6:	60fa      	str	r2, [r7, #12]
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d102      	bne.n	80097e2 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80097dc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80097e0:	e026      	b.n	8009830 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80097e6:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80097e8:	68bb      	ldr	r3, [r7, #8]
 80097ea:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d0ef      	beq.n	80097d2 <SDMMC_GetCmdResp2+0x1e>
 80097f2:	68bb      	ldr	r3, [r7, #8]
 80097f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d1ea      	bne.n	80097d2 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009800:	f003 0304 	and.w	r3, r3, #4
 8009804:	2b00      	cmp	r3, #0
 8009806:	d004      	beq.n	8009812 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	2204      	movs	r2, #4
 800980c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800980e:	2304      	movs	r3, #4
 8009810:	e00e      	b.n	8009830 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009816:	f003 0301 	and.w	r3, r3, #1
 800981a:	2b00      	cmp	r3, #0
 800981c:	d004      	beq.n	8009828 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	2201      	movs	r2, #1
 8009822:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009824:	2301      	movs	r3, #1
 8009826:	e003      	b.n	8009830 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	22c5      	movs	r2, #197	; 0xc5
 800982c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800982e:	2300      	movs	r3, #0
}
 8009830:	4618      	mov	r0, r3
 8009832:	3714      	adds	r7, #20
 8009834:	46bd      	mov	sp, r7
 8009836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800983a:	4770      	bx	lr
 800983c:	20000000 	.word	0x20000000
 8009840:	10624dd3 	.word	0x10624dd3

08009844 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8009844:	b480      	push	{r7}
 8009846:	b085      	sub	sp, #20
 8009848:	af00      	add	r7, sp, #0
 800984a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800984c:	4b1a      	ldr	r3, [pc, #104]	; (80098b8 <SDMMC_GetCmdResp3+0x74>)
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	4a1a      	ldr	r2, [pc, #104]	; (80098bc <SDMMC_GetCmdResp3+0x78>)
 8009852:	fba2 2303 	umull	r2, r3, r2, r3
 8009856:	0a5b      	lsrs	r3, r3, #9
 8009858:	f241 3288 	movw	r2, #5000	; 0x1388
 800985c:	fb02 f303 	mul.w	r3, r2, r3
 8009860:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	1e5a      	subs	r2, r3, #1
 8009866:	60fa      	str	r2, [r7, #12]
 8009868:	2b00      	cmp	r3, #0
 800986a:	d102      	bne.n	8009872 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800986c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009870:	e01b      	b.n	80098aa <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009876:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009878:	68bb      	ldr	r3, [r7, #8]
 800987a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800987e:	2b00      	cmp	r3, #0
 8009880:	d0ef      	beq.n	8009862 <SDMMC_GetCmdResp3+0x1e>
 8009882:	68bb      	ldr	r3, [r7, #8]
 8009884:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009888:	2b00      	cmp	r3, #0
 800988a:	d1ea      	bne.n	8009862 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009890:	f003 0304 	and.w	r3, r3, #4
 8009894:	2b00      	cmp	r3, #0
 8009896:	d004      	beq.n	80098a2 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	2204      	movs	r2, #4
 800989c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800989e:	2304      	movs	r3, #4
 80098a0:	e003      	b.n	80098aa <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	22c5      	movs	r2, #197	; 0xc5
 80098a6:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80098a8:	2300      	movs	r3, #0
}
 80098aa:	4618      	mov	r0, r3
 80098ac:	3714      	adds	r7, #20
 80098ae:	46bd      	mov	sp, r7
 80098b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098b4:	4770      	bx	lr
 80098b6:	bf00      	nop
 80098b8:	20000000 	.word	0x20000000
 80098bc:	10624dd3 	.word	0x10624dd3

080098c0 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 80098c0:	b580      	push	{r7, lr}
 80098c2:	b088      	sub	sp, #32
 80098c4:	af00      	add	r7, sp, #0
 80098c6:	60f8      	str	r0, [r7, #12]
 80098c8:	460b      	mov	r3, r1
 80098ca:	607a      	str	r2, [r7, #4]
 80098cc:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80098ce:	4b35      	ldr	r3, [pc, #212]	; (80099a4 <SDMMC_GetCmdResp6+0xe4>)
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	4a35      	ldr	r2, [pc, #212]	; (80099a8 <SDMMC_GetCmdResp6+0xe8>)
 80098d4:	fba2 2303 	umull	r2, r3, r2, r3
 80098d8:	0a5b      	lsrs	r3, r3, #9
 80098da:	f241 3288 	movw	r2, #5000	; 0x1388
 80098de:	fb02 f303 	mul.w	r3, r2, r3
 80098e2:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 80098e4:	69fb      	ldr	r3, [r7, #28]
 80098e6:	1e5a      	subs	r2, r3, #1
 80098e8:	61fa      	str	r2, [r7, #28]
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d102      	bne.n	80098f4 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 80098ee:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80098f2:	e052      	b.n	800999a <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80098f8:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80098fa:	69bb      	ldr	r3, [r7, #24]
 80098fc:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8009900:	2b00      	cmp	r3, #0
 8009902:	d0ef      	beq.n	80098e4 <SDMMC_GetCmdResp6+0x24>
 8009904:	69bb      	ldr	r3, [r7, #24]
 8009906:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800990a:	2b00      	cmp	r3, #0
 800990c:	d1ea      	bne.n	80098e4 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009912:	f003 0304 	and.w	r3, r3, #4
 8009916:	2b00      	cmp	r3, #0
 8009918:	d004      	beq.n	8009924 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	2204      	movs	r2, #4
 800991e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009920:	2304      	movs	r3, #4
 8009922:	e03a      	b.n	800999a <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009928:	f003 0301 	and.w	r3, r3, #1
 800992c:	2b00      	cmp	r3, #0
 800992e:	d004      	beq.n	800993a <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	2201      	movs	r2, #1
 8009934:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009936:	2301      	movs	r3, #1
 8009938:	e02f      	b.n	800999a <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800993a:	68f8      	ldr	r0, [r7, #12]
 800993c:	f7ff fc0d 	bl	800915a <SDIO_GetCommandResponse>
 8009940:	4603      	mov	r3, r0
 8009942:	461a      	mov	r2, r3
 8009944:	7afb      	ldrb	r3, [r7, #11]
 8009946:	4293      	cmp	r3, r2
 8009948:	d001      	beq.n	800994e <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800994a:	2301      	movs	r3, #1
 800994c:	e025      	b.n	800999a <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	22c5      	movs	r2, #197	; 0xc5
 8009952:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8009954:	2100      	movs	r1, #0
 8009956:	68f8      	ldr	r0, [r7, #12]
 8009958:	f7ff fc0c 	bl	8009174 <SDIO_GetResponse>
 800995c:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800995e:	697b      	ldr	r3, [r7, #20]
 8009960:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8009964:	2b00      	cmp	r3, #0
 8009966:	d106      	bne.n	8009976 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8009968:	697b      	ldr	r3, [r7, #20]
 800996a:	0c1b      	lsrs	r3, r3, #16
 800996c:	b29a      	uxth	r2, r3
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8009972:	2300      	movs	r3, #0
 8009974:	e011      	b.n	800999a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8009976:	697b      	ldr	r3, [r7, #20]
 8009978:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800997c:	2b00      	cmp	r3, #0
 800997e:	d002      	beq.n	8009986 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8009980:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009984:	e009      	b.n	800999a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8009986:	697b      	ldr	r3, [r7, #20]
 8009988:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800998c:	2b00      	cmp	r3, #0
 800998e:	d002      	beq.n	8009996 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8009990:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009994:	e001      	b.n	800999a <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8009996:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800999a:	4618      	mov	r0, r3
 800999c:	3720      	adds	r7, #32
 800999e:	46bd      	mov	sp, r7
 80099a0:	bd80      	pop	{r7, pc}
 80099a2:	bf00      	nop
 80099a4:	20000000 	.word	0x20000000
 80099a8:	10624dd3 	.word	0x10624dd3

080099ac <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 80099ac:	b480      	push	{r7}
 80099ae:	b085      	sub	sp, #20
 80099b0:	af00      	add	r7, sp, #0
 80099b2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80099b4:	4b22      	ldr	r3, [pc, #136]	; (8009a40 <SDMMC_GetCmdResp7+0x94>)
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	4a22      	ldr	r2, [pc, #136]	; (8009a44 <SDMMC_GetCmdResp7+0x98>)
 80099ba:	fba2 2303 	umull	r2, r3, r2, r3
 80099be:	0a5b      	lsrs	r3, r3, #9
 80099c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80099c4:	fb02 f303 	mul.w	r3, r2, r3
 80099c8:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	1e5a      	subs	r2, r3, #1
 80099ce:	60fa      	str	r2, [r7, #12]
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d102      	bne.n	80099da <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80099d4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80099d8:	e02c      	b.n	8009a34 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80099de:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80099e0:	68bb      	ldr	r3, [r7, #8]
 80099e2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d0ef      	beq.n	80099ca <SDMMC_GetCmdResp7+0x1e>
 80099ea:	68bb      	ldr	r3, [r7, #8]
 80099ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d1ea      	bne.n	80099ca <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80099f8:	f003 0304 	and.w	r3, r3, #4
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d004      	beq.n	8009a0a <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	2204      	movs	r2, #4
 8009a04:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009a06:	2304      	movs	r3, #4
 8009a08:	e014      	b.n	8009a34 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a0e:	f003 0301 	and.w	r3, r3, #1
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d004      	beq.n	8009a20 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	2201      	movs	r2, #1
 8009a1a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009a1c:	2301      	movs	r3, #1
 8009a1e:	e009      	b.n	8009a34 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d002      	beq.n	8009a32 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	2240      	movs	r2, #64	; 0x40
 8009a30:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8009a32:	2300      	movs	r3, #0
  
}
 8009a34:	4618      	mov	r0, r3
 8009a36:	3714      	adds	r7, #20
 8009a38:	46bd      	mov	sp, r7
 8009a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a3e:	4770      	bx	lr
 8009a40:	20000000 	.word	0x20000000
 8009a44:	10624dd3 	.word	0x10624dd3

08009a48 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8009a48:	b480      	push	{r7}
 8009a4a:	b085      	sub	sp, #20
 8009a4c:	af00      	add	r7, sp, #0
 8009a4e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009a50:	4b11      	ldr	r3, [pc, #68]	; (8009a98 <SDMMC_GetCmdError+0x50>)
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	4a11      	ldr	r2, [pc, #68]	; (8009a9c <SDMMC_GetCmdError+0x54>)
 8009a56:	fba2 2303 	umull	r2, r3, r2, r3
 8009a5a:	0a5b      	lsrs	r3, r3, #9
 8009a5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009a60:	fb02 f303 	mul.w	r3, r2, r3
 8009a64:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	1e5a      	subs	r2, r3, #1
 8009a6a:	60fa      	str	r2, [r7, #12]
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d102      	bne.n	8009a76 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009a70:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009a74:	e009      	b.n	8009a8a <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d0f1      	beq.n	8009a66 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	22c5      	movs	r2, #197	; 0xc5
 8009a86:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8009a88:	2300      	movs	r3, #0
}
 8009a8a:	4618      	mov	r0, r3
 8009a8c:	3714      	adds	r7, #20
 8009a8e:	46bd      	mov	sp, r7
 8009a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a94:	4770      	bx	lr
 8009a96:	bf00      	nop
 8009a98:	20000000 	.word	0x20000000
 8009a9c:	10624dd3 	.word	0x10624dd3

08009aa0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8009aa0:	b580      	push	{r7, lr}
 8009aa2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8009aa4:	4904      	ldr	r1, [pc, #16]	; (8009ab8 <MX_FATFS_Init+0x18>)
 8009aa6:	4805      	ldr	r0, [pc, #20]	; (8009abc <MX_FATFS_Init+0x1c>)
 8009aa8:	f003 f85c 	bl	800cb64 <FATFS_LinkDriver>
 8009aac:	4603      	mov	r3, r0
 8009aae:	461a      	mov	r2, r3
 8009ab0:	4b03      	ldr	r3, [pc, #12]	; (8009ac0 <MX_FATFS_Init+0x20>)
 8009ab2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8009ab4:	bf00      	nop
 8009ab6:	bd80      	pop	{r7, pc}
 8009ab8:	200014e8 	.word	0x200014e8
 8009abc:	0800e238 	.word	0x0800e238
 8009ac0:	200014e4 	.word	0x200014e4

08009ac4 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8009ac4:	b480      	push	{r7}
 8009ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8009ac8:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8009aca:	4618      	mov	r0, r3
 8009acc:	46bd      	mov	sp, r7
 8009ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ad2:	4770      	bx	lr

08009ad4 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8009ad4:	b580      	push	{r7, lr}
 8009ad6:	b082      	sub	sp, #8
 8009ad8:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8009ada:	2300      	movs	r3, #0
 8009adc:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8009ade:	f000 f888 	bl	8009bf2 <BSP_SD_IsDetected>
 8009ae2:	4603      	mov	r3, r0
 8009ae4:	2b01      	cmp	r3, #1
 8009ae6:	d001      	beq.n	8009aec <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8009ae8:	2301      	movs	r3, #1
 8009aea:	e005      	b.n	8009af8 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8009aec:	4804      	ldr	r0, [pc, #16]	; (8009b00 <BSP_SD_Init+0x2c>)
 8009aee:	f7fc fcdf 	bl	80064b0 <HAL_SD_Init>
 8009af2:	4603      	mov	r3, r0
 8009af4:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 8009af6:	79fb      	ldrb	r3, [r7, #7]
}
 8009af8:	4618      	mov	r0, r3
 8009afa:	3708      	adds	r7, #8
 8009afc:	46bd      	mov	sp, r7
 8009afe:	bd80      	pop	{r7, pc}
 8009b00:	200012c8 	.word	0x200012c8

08009b04 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8009b04:	b580      	push	{r7, lr}
 8009b06:	b086      	sub	sp, #24
 8009b08:	af00      	add	r7, sp, #0
 8009b0a:	60f8      	str	r0, [r7, #12]
 8009b0c:	60b9      	str	r1, [r7, #8]
 8009b0e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8009b10:	2300      	movs	r3, #0
 8009b12:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	68ba      	ldr	r2, [r7, #8]
 8009b18:	68f9      	ldr	r1, [r7, #12]
 8009b1a:	4806      	ldr	r0, [pc, #24]	; (8009b34 <BSP_SD_ReadBlocks_DMA+0x30>)
 8009b1c:	f7fc fd78 	bl	8006610 <HAL_SD_ReadBlocks_DMA>
 8009b20:	4603      	mov	r3, r0
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d001      	beq.n	8009b2a <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8009b26:	2301      	movs	r3, #1
 8009b28:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8009b2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8009b2c:	4618      	mov	r0, r3
 8009b2e:	3718      	adds	r7, #24
 8009b30:	46bd      	mov	sp, r7
 8009b32:	bd80      	pop	{r7, pc}
 8009b34:	200012c8 	.word	0x200012c8

08009b38 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8009b38:	b580      	push	{r7, lr}
 8009b3a:	b086      	sub	sp, #24
 8009b3c:	af00      	add	r7, sp, #0
 8009b3e:	60f8      	str	r0, [r7, #12]
 8009b40:	60b9      	str	r1, [r7, #8]
 8009b42:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8009b44:	2300      	movs	r3, #0
 8009b46:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	68ba      	ldr	r2, [r7, #8]
 8009b4c:	68f9      	ldr	r1, [r7, #12]
 8009b4e:	4806      	ldr	r0, [pc, #24]	; (8009b68 <BSP_SD_WriteBlocks_DMA+0x30>)
 8009b50:	f7fc fe40 	bl	80067d4 <HAL_SD_WriteBlocks_DMA>
 8009b54:	4603      	mov	r3, r0
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d001      	beq.n	8009b5e <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8009b5a:	2301      	movs	r3, #1
 8009b5c:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8009b5e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009b60:	4618      	mov	r0, r3
 8009b62:	3718      	adds	r7, #24
 8009b64:	46bd      	mov	sp, r7
 8009b66:	bd80      	pop	{r7, pc}
 8009b68:	200012c8 	.word	0x200012c8

08009b6c <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8009b6c:	b580      	push	{r7, lr}
 8009b6e:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8009b70:	4805      	ldr	r0, [pc, #20]	; (8009b88 <BSP_SD_GetCardState+0x1c>)
 8009b72:	f7fd fa75 	bl	8007060 <HAL_SD_GetCardState>
 8009b76:	4603      	mov	r3, r0
 8009b78:	2b04      	cmp	r3, #4
 8009b7a:	bf14      	ite	ne
 8009b7c:	2301      	movne	r3, #1
 8009b7e:	2300      	moveq	r3, #0
 8009b80:	b2db      	uxtb	r3, r3
}
 8009b82:	4618      	mov	r0, r3
 8009b84:	bd80      	pop	{r7, pc}
 8009b86:	bf00      	nop
 8009b88:	200012c8 	.word	0x200012c8

08009b8c <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8009b8c:	b580      	push	{r7, lr}
 8009b8e:	b082      	sub	sp, #8
 8009b90:	af00      	add	r7, sp, #0
 8009b92:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8009b94:	6879      	ldr	r1, [r7, #4]
 8009b96:	4803      	ldr	r0, [pc, #12]	; (8009ba4 <BSP_SD_GetCardInfo+0x18>)
 8009b98:	f7fd fa36 	bl	8007008 <HAL_SD_GetCardInfo>
}
 8009b9c:	bf00      	nop
 8009b9e:	3708      	adds	r7, #8
 8009ba0:	46bd      	mov	sp, r7
 8009ba2:	bd80      	pop	{r7, pc}
 8009ba4:	200012c8 	.word	0x200012c8

08009ba8 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8009ba8:	b580      	push	{r7, lr}
 8009baa:	b082      	sub	sp, #8
 8009bac:	af00      	add	r7, sp, #0
 8009bae:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 8009bb0:	f000 f818 	bl	8009be4 <BSP_SD_AbortCallback>
}
 8009bb4:	bf00      	nop
 8009bb6:	3708      	adds	r7, #8
 8009bb8:	46bd      	mov	sp, r7
 8009bba:	bd80      	pop	{r7, pc}

08009bbc <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8009bbc:	b580      	push	{r7, lr}
 8009bbe:	b082      	sub	sp, #8
 8009bc0:	af00      	add	r7, sp, #0
 8009bc2:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8009bc4:	f000 f9a8 	bl	8009f18 <BSP_SD_WriteCpltCallback>
}
 8009bc8:	bf00      	nop
 8009bca:	3708      	adds	r7, #8
 8009bcc:	46bd      	mov	sp, r7
 8009bce:	bd80      	pop	{r7, pc}

08009bd0 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8009bd0:	b580      	push	{r7, lr}
 8009bd2:	b082      	sub	sp, #8
 8009bd4:	af00      	add	r7, sp, #0
 8009bd6:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8009bd8:	f000 f9aa 	bl	8009f30 <BSP_SD_ReadCpltCallback>
}
 8009bdc:	bf00      	nop
 8009bde:	3708      	adds	r7, #8
 8009be0:	46bd      	mov	sp, r7
 8009be2:	bd80      	pop	{r7, pc}

08009be4 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 8009be4:	b480      	push	{r7}
 8009be6:	af00      	add	r7, sp, #0

}
 8009be8:	bf00      	nop
 8009bea:	46bd      	mov	sp, r7
 8009bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bf0:	4770      	bx	lr

08009bf2 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8009bf2:	b580      	push	{r7, lr}
 8009bf4:	b082      	sub	sp, #8
 8009bf6:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8009bf8:	2301      	movs	r3, #1
 8009bfa:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8009bfc:	f000 f80c 	bl	8009c18 <BSP_PlatformIsDetected>
 8009c00:	4603      	mov	r3, r0
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d101      	bne.n	8009c0a <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8009c06:	2300      	movs	r3, #0
 8009c08:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8009c0a:	79fb      	ldrb	r3, [r7, #7]
 8009c0c:	b2db      	uxtb	r3, r3
}
 8009c0e:	4618      	mov	r0, r3
 8009c10:	3708      	adds	r7, #8
 8009c12:	46bd      	mov	sp, r7
 8009c14:	bd80      	pop	{r7, pc}
	...

08009c18 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8009c18:	b580      	push	{r7, lr}
 8009c1a:	b082      	sub	sp, #8
 8009c1c:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8009c1e:	2301      	movs	r3, #1
 8009c20:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8009c22:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8009c26:	4806      	ldr	r0, [pc, #24]	; (8009c40 <BSP_PlatformIsDetected+0x28>)
 8009c28:	f7f9 fe66 	bl	80038f8 <HAL_GPIO_ReadPin>
 8009c2c:	4603      	mov	r3, r0
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d001      	beq.n	8009c36 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 8009c32:	2300      	movs	r3, #0
 8009c34:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 8009c36:	79fb      	ldrb	r3, [r7, #7]
}
 8009c38:	4618      	mov	r0, r3
 8009c3a:	3708      	adds	r7, #8
 8009c3c:	46bd      	mov	sp, r7
 8009c3e:	bd80      	pop	{r7, pc}
 8009c40:	40020400 	.word	0x40020400

08009c44 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8009c44:	b580      	push	{r7, lr}
 8009c46:	b084      	sub	sp, #16
 8009c48:	af00      	add	r7, sp, #0
 8009c4a:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 8009c4c:	f7f8 f88c 	bl	8001d68 <HAL_GetTick>
 8009c50:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 8009c52:	e006      	b.n	8009c62 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8009c54:	f7ff ff8a 	bl	8009b6c <BSP_SD_GetCardState>
 8009c58:	4603      	mov	r3, r0
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d101      	bne.n	8009c62 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8009c5e:	2300      	movs	r3, #0
 8009c60:	e009      	b.n	8009c76 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 8009c62:	f7f8 f881 	bl	8001d68 <HAL_GetTick>
 8009c66:	4602      	mov	r2, r0
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	1ad3      	subs	r3, r2, r3
 8009c6c:	687a      	ldr	r2, [r7, #4]
 8009c6e:	429a      	cmp	r2, r3
 8009c70:	d8f0      	bhi.n	8009c54 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8009c72:	f04f 33ff 	mov.w	r3, #4294967295
}
 8009c76:	4618      	mov	r0, r3
 8009c78:	3710      	adds	r7, #16
 8009c7a:	46bd      	mov	sp, r7
 8009c7c:	bd80      	pop	{r7, pc}
	...

08009c80 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8009c80:	b580      	push	{r7, lr}
 8009c82:	b082      	sub	sp, #8
 8009c84:	af00      	add	r7, sp, #0
 8009c86:	4603      	mov	r3, r0
 8009c88:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8009c8a:	4b0b      	ldr	r3, [pc, #44]	; (8009cb8 <SD_CheckStatus+0x38>)
 8009c8c:	2201      	movs	r2, #1
 8009c8e:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8009c90:	f7ff ff6c 	bl	8009b6c <BSP_SD_GetCardState>
 8009c94:	4603      	mov	r3, r0
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d107      	bne.n	8009caa <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8009c9a:	4b07      	ldr	r3, [pc, #28]	; (8009cb8 <SD_CheckStatus+0x38>)
 8009c9c:	781b      	ldrb	r3, [r3, #0]
 8009c9e:	b2db      	uxtb	r3, r3
 8009ca0:	f023 0301 	bic.w	r3, r3, #1
 8009ca4:	b2da      	uxtb	r2, r3
 8009ca6:	4b04      	ldr	r3, [pc, #16]	; (8009cb8 <SD_CheckStatus+0x38>)
 8009ca8:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8009caa:	4b03      	ldr	r3, [pc, #12]	; (8009cb8 <SD_CheckStatus+0x38>)
 8009cac:	781b      	ldrb	r3, [r3, #0]
 8009cae:	b2db      	uxtb	r3, r3
}
 8009cb0:	4618      	mov	r0, r3
 8009cb2:	3708      	adds	r7, #8
 8009cb4:	46bd      	mov	sp, r7
 8009cb6:	bd80      	pop	{r7, pc}
 8009cb8:	20000009 	.word	0x20000009

08009cbc <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8009cbc:	b580      	push	{r7, lr}
 8009cbe:	b082      	sub	sp, #8
 8009cc0:	af00      	add	r7, sp, #0
 8009cc2:	4603      	mov	r3, r0
 8009cc4:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8009cc6:	f7ff ff05 	bl	8009ad4 <BSP_SD_Init>
 8009cca:	4603      	mov	r3, r0
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d107      	bne.n	8009ce0 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 8009cd0:	79fb      	ldrb	r3, [r7, #7]
 8009cd2:	4618      	mov	r0, r3
 8009cd4:	f7ff ffd4 	bl	8009c80 <SD_CheckStatus>
 8009cd8:	4603      	mov	r3, r0
 8009cda:	461a      	mov	r2, r3
 8009cdc:	4b04      	ldr	r3, [pc, #16]	; (8009cf0 <SD_initialize+0x34>)
 8009cde:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8009ce0:	4b03      	ldr	r3, [pc, #12]	; (8009cf0 <SD_initialize+0x34>)
 8009ce2:	781b      	ldrb	r3, [r3, #0]
 8009ce4:	b2db      	uxtb	r3, r3
}
 8009ce6:	4618      	mov	r0, r3
 8009ce8:	3708      	adds	r7, #8
 8009cea:	46bd      	mov	sp, r7
 8009cec:	bd80      	pop	{r7, pc}
 8009cee:	bf00      	nop
 8009cf0:	20000009 	.word	0x20000009

08009cf4 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8009cf4:	b580      	push	{r7, lr}
 8009cf6:	b082      	sub	sp, #8
 8009cf8:	af00      	add	r7, sp, #0
 8009cfa:	4603      	mov	r3, r0
 8009cfc:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8009cfe:	79fb      	ldrb	r3, [r7, #7]
 8009d00:	4618      	mov	r0, r3
 8009d02:	f7ff ffbd 	bl	8009c80 <SD_CheckStatus>
 8009d06:	4603      	mov	r3, r0
}
 8009d08:	4618      	mov	r0, r3
 8009d0a:	3708      	adds	r7, #8
 8009d0c:	46bd      	mov	sp, r7
 8009d0e:	bd80      	pop	{r7, pc}

08009d10 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8009d10:	b580      	push	{r7, lr}
 8009d12:	b086      	sub	sp, #24
 8009d14:	af00      	add	r7, sp, #0
 8009d16:	60b9      	str	r1, [r7, #8]
 8009d18:	607a      	str	r2, [r7, #4]
 8009d1a:	603b      	str	r3, [r7, #0]
 8009d1c:	4603      	mov	r3, r0
 8009d1e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8009d20:	2301      	movs	r3, #1
 8009d22:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8009d24:	f247 5030 	movw	r0, #30000	; 0x7530
 8009d28:	f7ff ff8c 	bl	8009c44 <SD_CheckStatusWithTimeout>
 8009d2c:	4603      	mov	r3, r0
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	da01      	bge.n	8009d36 <SD_read+0x26>
  {
    return res;
 8009d32:	7dfb      	ldrb	r3, [r7, #23]
 8009d34:	e03b      	b.n	8009dae <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 8009d36:	683a      	ldr	r2, [r7, #0]
 8009d38:	6879      	ldr	r1, [r7, #4]
 8009d3a:	68b8      	ldr	r0, [r7, #8]
 8009d3c:	f7ff fee2 	bl	8009b04 <BSP_SD_ReadBlocks_DMA>
 8009d40:	4603      	mov	r3, r0
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d132      	bne.n	8009dac <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 8009d46:	4b1c      	ldr	r3, [pc, #112]	; (8009db8 <SD_read+0xa8>)
 8009d48:	2200      	movs	r2, #0
 8009d4a:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 8009d4c:	f7f8 f80c 	bl	8001d68 <HAL_GetTick>
 8009d50:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8009d52:	bf00      	nop
 8009d54:	4b18      	ldr	r3, [pc, #96]	; (8009db8 <SD_read+0xa8>)
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d108      	bne.n	8009d6e <SD_read+0x5e>
 8009d5c:	f7f8 f804 	bl	8001d68 <HAL_GetTick>
 8009d60:	4602      	mov	r2, r0
 8009d62:	693b      	ldr	r3, [r7, #16]
 8009d64:	1ad3      	subs	r3, r2, r3
 8009d66:	f247 522f 	movw	r2, #29999	; 0x752f
 8009d6a:	4293      	cmp	r3, r2
 8009d6c:	d9f2      	bls.n	8009d54 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 8009d6e:	4b12      	ldr	r3, [pc, #72]	; (8009db8 <SD_read+0xa8>)
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d102      	bne.n	8009d7c <SD_read+0x6c>
      {
        res = RES_ERROR;
 8009d76:	2301      	movs	r3, #1
 8009d78:	75fb      	strb	r3, [r7, #23]
 8009d7a:	e017      	b.n	8009dac <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 8009d7c:	4b0e      	ldr	r3, [pc, #56]	; (8009db8 <SD_read+0xa8>)
 8009d7e:	2200      	movs	r2, #0
 8009d80:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8009d82:	f7f7 fff1 	bl	8001d68 <HAL_GetTick>
 8009d86:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8009d88:	e007      	b.n	8009d9a <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8009d8a:	f7ff feef 	bl	8009b6c <BSP_SD_GetCardState>
 8009d8e:	4603      	mov	r3, r0
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d102      	bne.n	8009d9a <SD_read+0x8a>
          {
            res = RES_OK;
 8009d94:	2300      	movs	r3, #0
 8009d96:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 8009d98:	e008      	b.n	8009dac <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8009d9a:	f7f7 ffe5 	bl	8001d68 <HAL_GetTick>
 8009d9e:	4602      	mov	r2, r0
 8009da0:	693b      	ldr	r3, [r7, #16]
 8009da2:	1ad3      	subs	r3, r2, r3
 8009da4:	f247 522f 	movw	r2, #29999	; 0x752f
 8009da8:	4293      	cmp	r3, r2
 8009daa:	d9ee      	bls.n	8009d8a <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 8009dac:	7dfb      	ldrb	r3, [r7, #23]
}
 8009dae:	4618      	mov	r0, r3
 8009db0:	3718      	adds	r7, #24
 8009db2:	46bd      	mov	sp, r7
 8009db4:	bd80      	pop	{r7, pc}
 8009db6:	bf00      	nop
 8009db8:	200014f0 	.word	0x200014f0

08009dbc <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8009dbc:	b580      	push	{r7, lr}
 8009dbe:	b086      	sub	sp, #24
 8009dc0:	af00      	add	r7, sp, #0
 8009dc2:	60b9      	str	r1, [r7, #8]
 8009dc4:	607a      	str	r2, [r7, #4]
 8009dc6:	603b      	str	r3, [r7, #0]
 8009dc8:	4603      	mov	r3, r0
 8009dca:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8009dcc:	2301      	movs	r3, #1
 8009dce:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 8009dd0:	4b24      	ldr	r3, [pc, #144]	; (8009e64 <SD_write+0xa8>)
 8009dd2:	2200      	movs	r2, #0
 8009dd4:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8009dd6:	f247 5030 	movw	r0, #30000	; 0x7530
 8009dda:	f7ff ff33 	bl	8009c44 <SD_CheckStatusWithTimeout>
 8009dde:	4603      	mov	r3, r0
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	da01      	bge.n	8009de8 <SD_write+0x2c>
  {
    return res;
 8009de4:	7dfb      	ldrb	r3, [r7, #23]
 8009de6:	e038      	b.n	8009e5a <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8009de8:	683a      	ldr	r2, [r7, #0]
 8009dea:	6879      	ldr	r1, [r7, #4]
 8009dec:	68b8      	ldr	r0, [r7, #8]
 8009dee:	f7ff fea3 	bl	8009b38 <BSP_SD_WriteBlocks_DMA>
 8009df2:	4603      	mov	r3, r0
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d12f      	bne.n	8009e58 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 8009df8:	f7f7 ffb6 	bl	8001d68 <HAL_GetTick>
 8009dfc:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8009dfe:	bf00      	nop
 8009e00:	4b18      	ldr	r3, [pc, #96]	; (8009e64 <SD_write+0xa8>)
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d108      	bne.n	8009e1a <SD_write+0x5e>
 8009e08:	f7f7 ffae 	bl	8001d68 <HAL_GetTick>
 8009e0c:	4602      	mov	r2, r0
 8009e0e:	693b      	ldr	r3, [r7, #16]
 8009e10:	1ad3      	subs	r3, r2, r3
 8009e12:	f247 522f 	movw	r2, #29999	; 0x752f
 8009e16:	4293      	cmp	r3, r2
 8009e18:	d9f2      	bls.n	8009e00 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 8009e1a:	4b12      	ldr	r3, [pc, #72]	; (8009e64 <SD_write+0xa8>)
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d102      	bne.n	8009e28 <SD_write+0x6c>
      {
        res = RES_ERROR;
 8009e22:	2301      	movs	r3, #1
 8009e24:	75fb      	strb	r3, [r7, #23]
 8009e26:	e017      	b.n	8009e58 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 8009e28:	4b0e      	ldr	r3, [pc, #56]	; (8009e64 <SD_write+0xa8>)
 8009e2a:	2200      	movs	r2, #0
 8009e2c:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8009e2e:	f7f7 ff9b 	bl	8001d68 <HAL_GetTick>
 8009e32:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8009e34:	e007      	b.n	8009e46 <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8009e36:	f7ff fe99 	bl	8009b6c <BSP_SD_GetCardState>
 8009e3a:	4603      	mov	r3, r0
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	d102      	bne.n	8009e46 <SD_write+0x8a>
          {
            res = RES_OK;
 8009e40:	2300      	movs	r3, #0
 8009e42:	75fb      	strb	r3, [r7, #23]
            break;
 8009e44:	e008      	b.n	8009e58 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8009e46:	f7f7 ff8f 	bl	8001d68 <HAL_GetTick>
 8009e4a:	4602      	mov	r2, r0
 8009e4c:	693b      	ldr	r3, [r7, #16]
 8009e4e:	1ad3      	subs	r3, r2, r3
 8009e50:	f247 522f 	movw	r2, #29999	; 0x752f
 8009e54:	4293      	cmp	r3, r2
 8009e56:	d9ee      	bls.n	8009e36 <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 8009e58:	7dfb      	ldrb	r3, [r7, #23]
}
 8009e5a:	4618      	mov	r0, r3
 8009e5c:	3718      	adds	r7, #24
 8009e5e:	46bd      	mov	sp, r7
 8009e60:	bd80      	pop	{r7, pc}
 8009e62:	bf00      	nop
 8009e64:	200014ec 	.word	0x200014ec

08009e68 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8009e68:	b580      	push	{r7, lr}
 8009e6a:	b08c      	sub	sp, #48	; 0x30
 8009e6c:	af00      	add	r7, sp, #0
 8009e6e:	4603      	mov	r3, r0
 8009e70:	603a      	str	r2, [r7, #0]
 8009e72:	71fb      	strb	r3, [r7, #7]
 8009e74:	460b      	mov	r3, r1
 8009e76:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8009e78:	2301      	movs	r3, #1
 8009e7a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8009e7e:	4b25      	ldr	r3, [pc, #148]	; (8009f14 <SD_ioctl+0xac>)
 8009e80:	781b      	ldrb	r3, [r3, #0]
 8009e82:	b2db      	uxtb	r3, r3
 8009e84:	f003 0301 	and.w	r3, r3, #1
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d001      	beq.n	8009e90 <SD_ioctl+0x28>
 8009e8c:	2303      	movs	r3, #3
 8009e8e:	e03c      	b.n	8009f0a <SD_ioctl+0xa2>

  switch (cmd)
 8009e90:	79bb      	ldrb	r3, [r7, #6]
 8009e92:	2b03      	cmp	r3, #3
 8009e94:	d834      	bhi.n	8009f00 <SD_ioctl+0x98>
 8009e96:	a201      	add	r2, pc, #4	; (adr r2, 8009e9c <SD_ioctl+0x34>)
 8009e98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e9c:	08009ead 	.word	0x08009ead
 8009ea0:	08009eb5 	.word	0x08009eb5
 8009ea4:	08009ecd 	.word	0x08009ecd
 8009ea8:	08009ee7 	.word	0x08009ee7
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8009eac:	2300      	movs	r3, #0
 8009eae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8009eb2:	e028      	b.n	8009f06 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8009eb4:	f107 030c 	add.w	r3, r7, #12
 8009eb8:	4618      	mov	r0, r3
 8009eba:	f7ff fe67 	bl	8009b8c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8009ebe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009ec0:	683b      	ldr	r3, [r7, #0]
 8009ec2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8009ec4:	2300      	movs	r3, #0
 8009ec6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8009eca:	e01c      	b.n	8009f06 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8009ecc:	f107 030c 	add.w	r3, r7, #12
 8009ed0:	4618      	mov	r0, r3
 8009ed2:	f7ff fe5b 	bl	8009b8c <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8009ed6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ed8:	b29a      	uxth	r2, r3
 8009eda:	683b      	ldr	r3, [r7, #0]
 8009edc:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8009ede:	2300      	movs	r3, #0
 8009ee0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8009ee4:	e00f      	b.n	8009f06 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8009ee6:	f107 030c 	add.w	r3, r7, #12
 8009eea:	4618      	mov	r0, r3
 8009eec:	f7ff fe4e 	bl	8009b8c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8009ef0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ef2:	0a5a      	lsrs	r2, r3, #9
 8009ef4:	683b      	ldr	r3, [r7, #0]
 8009ef6:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8009ef8:	2300      	movs	r3, #0
 8009efa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8009efe:	e002      	b.n	8009f06 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8009f00:	2304      	movs	r3, #4
 8009f02:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8009f06:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8009f0a:	4618      	mov	r0, r3
 8009f0c:	3730      	adds	r7, #48	; 0x30
 8009f0e:	46bd      	mov	sp, r7
 8009f10:	bd80      	pop	{r7, pc}
 8009f12:	bf00      	nop
 8009f14:	20000009 	.word	0x20000009

08009f18 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8009f18:	b480      	push	{r7}
 8009f1a:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 8009f1c:	4b03      	ldr	r3, [pc, #12]	; (8009f2c <BSP_SD_WriteCpltCallback+0x14>)
 8009f1e:	2201      	movs	r2, #1
 8009f20:	601a      	str	r2, [r3, #0]
}
 8009f22:	bf00      	nop
 8009f24:	46bd      	mov	sp, r7
 8009f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f2a:	4770      	bx	lr
 8009f2c:	200014ec 	.word	0x200014ec

08009f30 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8009f30:	b480      	push	{r7}
 8009f32:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 8009f34:	4b03      	ldr	r3, [pc, #12]	; (8009f44 <BSP_SD_ReadCpltCallback+0x14>)
 8009f36:	2201      	movs	r2, #1
 8009f38:	601a      	str	r2, [r3, #0]
}
 8009f3a:	bf00      	nop
 8009f3c:	46bd      	mov	sp, r7
 8009f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f42:	4770      	bx	lr
 8009f44:	200014f0 	.word	0x200014f0

08009f48 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8009f48:	b580      	push	{r7, lr}
 8009f4a:	b084      	sub	sp, #16
 8009f4c:	af00      	add	r7, sp, #0
 8009f4e:	4603      	mov	r3, r0
 8009f50:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8009f52:	79fb      	ldrb	r3, [r7, #7]
 8009f54:	4a08      	ldr	r2, [pc, #32]	; (8009f78 <disk_status+0x30>)
 8009f56:	009b      	lsls	r3, r3, #2
 8009f58:	4413      	add	r3, r2
 8009f5a:	685b      	ldr	r3, [r3, #4]
 8009f5c:	685b      	ldr	r3, [r3, #4]
 8009f5e:	79fa      	ldrb	r2, [r7, #7]
 8009f60:	4905      	ldr	r1, [pc, #20]	; (8009f78 <disk_status+0x30>)
 8009f62:	440a      	add	r2, r1
 8009f64:	7a12      	ldrb	r2, [r2, #8]
 8009f66:	4610      	mov	r0, r2
 8009f68:	4798      	blx	r3
 8009f6a:	4603      	mov	r3, r0
 8009f6c:	73fb      	strb	r3, [r7, #15]
  return stat;
 8009f6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f70:	4618      	mov	r0, r3
 8009f72:	3710      	adds	r7, #16
 8009f74:	46bd      	mov	sp, r7
 8009f76:	bd80      	pop	{r7, pc}
 8009f78:	2000171c 	.word	0x2000171c

08009f7c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8009f7c:	b580      	push	{r7, lr}
 8009f7e:	b084      	sub	sp, #16
 8009f80:	af00      	add	r7, sp, #0
 8009f82:	4603      	mov	r3, r0
 8009f84:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8009f86:	2300      	movs	r3, #0
 8009f88:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8009f8a:	79fb      	ldrb	r3, [r7, #7]
 8009f8c:	4a0d      	ldr	r2, [pc, #52]	; (8009fc4 <disk_initialize+0x48>)
 8009f8e:	5cd3      	ldrb	r3, [r2, r3]
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d111      	bne.n	8009fb8 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8009f94:	79fb      	ldrb	r3, [r7, #7]
 8009f96:	4a0b      	ldr	r2, [pc, #44]	; (8009fc4 <disk_initialize+0x48>)
 8009f98:	2101      	movs	r1, #1
 8009f9a:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8009f9c:	79fb      	ldrb	r3, [r7, #7]
 8009f9e:	4a09      	ldr	r2, [pc, #36]	; (8009fc4 <disk_initialize+0x48>)
 8009fa0:	009b      	lsls	r3, r3, #2
 8009fa2:	4413      	add	r3, r2
 8009fa4:	685b      	ldr	r3, [r3, #4]
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	79fa      	ldrb	r2, [r7, #7]
 8009faa:	4906      	ldr	r1, [pc, #24]	; (8009fc4 <disk_initialize+0x48>)
 8009fac:	440a      	add	r2, r1
 8009fae:	7a12      	ldrb	r2, [r2, #8]
 8009fb0:	4610      	mov	r0, r2
 8009fb2:	4798      	blx	r3
 8009fb4:	4603      	mov	r3, r0
 8009fb6:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8009fb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8009fba:	4618      	mov	r0, r3
 8009fbc:	3710      	adds	r7, #16
 8009fbe:	46bd      	mov	sp, r7
 8009fc0:	bd80      	pop	{r7, pc}
 8009fc2:	bf00      	nop
 8009fc4:	2000171c 	.word	0x2000171c

08009fc8 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8009fc8:	b590      	push	{r4, r7, lr}
 8009fca:	b087      	sub	sp, #28
 8009fcc:	af00      	add	r7, sp, #0
 8009fce:	60b9      	str	r1, [r7, #8]
 8009fd0:	607a      	str	r2, [r7, #4]
 8009fd2:	603b      	str	r3, [r7, #0]
 8009fd4:	4603      	mov	r3, r0
 8009fd6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8009fd8:	7bfb      	ldrb	r3, [r7, #15]
 8009fda:	4a0a      	ldr	r2, [pc, #40]	; (800a004 <disk_read+0x3c>)
 8009fdc:	009b      	lsls	r3, r3, #2
 8009fde:	4413      	add	r3, r2
 8009fe0:	685b      	ldr	r3, [r3, #4]
 8009fe2:	689c      	ldr	r4, [r3, #8]
 8009fe4:	7bfb      	ldrb	r3, [r7, #15]
 8009fe6:	4a07      	ldr	r2, [pc, #28]	; (800a004 <disk_read+0x3c>)
 8009fe8:	4413      	add	r3, r2
 8009fea:	7a18      	ldrb	r0, [r3, #8]
 8009fec:	683b      	ldr	r3, [r7, #0]
 8009fee:	687a      	ldr	r2, [r7, #4]
 8009ff0:	68b9      	ldr	r1, [r7, #8]
 8009ff2:	47a0      	blx	r4
 8009ff4:	4603      	mov	r3, r0
 8009ff6:	75fb      	strb	r3, [r7, #23]
  return res;
 8009ff8:	7dfb      	ldrb	r3, [r7, #23]
}
 8009ffa:	4618      	mov	r0, r3
 8009ffc:	371c      	adds	r7, #28
 8009ffe:	46bd      	mov	sp, r7
 800a000:	bd90      	pop	{r4, r7, pc}
 800a002:	bf00      	nop
 800a004:	2000171c 	.word	0x2000171c

0800a008 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800a008:	b590      	push	{r4, r7, lr}
 800a00a:	b087      	sub	sp, #28
 800a00c:	af00      	add	r7, sp, #0
 800a00e:	60b9      	str	r1, [r7, #8]
 800a010:	607a      	str	r2, [r7, #4]
 800a012:	603b      	str	r3, [r7, #0]
 800a014:	4603      	mov	r3, r0
 800a016:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800a018:	7bfb      	ldrb	r3, [r7, #15]
 800a01a:	4a0a      	ldr	r2, [pc, #40]	; (800a044 <disk_write+0x3c>)
 800a01c:	009b      	lsls	r3, r3, #2
 800a01e:	4413      	add	r3, r2
 800a020:	685b      	ldr	r3, [r3, #4]
 800a022:	68dc      	ldr	r4, [r3, #12]
 800a024:	7bfb      	ldrb	r3, [r7, #15]
 800a026:	4a07      	ldr	r2, [pc, #28]	; (800a044 <disk_write+0x3c>)
 800a028:	4413      	add	r3, r2
 800a02a:	7a18      	ldrb	r0, [r3, #8]
 800a02c:	683b      	ldr	r3, [r7, #0]
 800a02e:	687a      	ldr	r2, [r7, #4]
 800a030:	68b9      	ldr	r1, [r7, #8]
 800a032:	47a0      	blx	r4
 800a034:	4603      	mov	r3, r0
 800a036:	75fb      	strb	r3, [r7, #23]
  return res;
 800a038:	7dfb      	ldrb	r3, [r7, #23]
}
 800a03a:	4618      	mov	r0, r3
 800a03c:	371c      	adds	r7, #28
 800a03e:	46bd      	mov	sp, r7
 800a040:	bd90      	pop	{r4, r7, pc}
 800a042:	bf00      	nop
 800a044:	2000171c 	.word	0x2000171c

0800a048 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800a048:	b580      	push	{r7, lr}
 800a04a:	b084      	sub	sp, #16
 800a04c:	af00      	add	r7, sp, #0
 800a04e:	4603      	mov	r3, r0
 800a050:	603a      	str	r2, [r7, #0]
 800a052:	71fb      	strb	r3, [r7, #7]
 800a054:	460b      	mov	r3, r1
 800a056:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800a058:	79fb      	ldrb	r3, [r7, #7]
 800a05a:	4a09      	ldr	r2, [pc, #36]	; (800a080 <disk_ioctl+0x38>)
 800a05c:	009b      	lsls	r3, r3, #2
 800a05e:	4413      	add	r3, r2
 800a060:	685b      	ldr	r3, [r3, #4]
 800a062:	691b      	ldr	r3, [r3, #16]
 800a064:	79fa      	ldrb	r2, [r7, #7]
 800a066:	4906      	ldr	r1, [pc, #24]	; (800a080 <disk_ioctl+0x38>)
 800a068:	440a      	add	r2, r1
 800a06a:	7a10      	ldrb	r0, [r2, #8]
 800a06c:	79b9      	ldrb	r1, [r7, #6]
 800a06e:	683a      	ldr	r2, [r7, #0]
 800a070:	4798      	blx	r3
 800a072:	4603      	mov	r3, r0
 800a074:	73fb      	strb	r3, [r7, #15]
  return res;
 800a076:	7bfb      	ldrb	r3, [r7, #15]
}
 800a078:	4618      	mov	r0, r3
 800a07a:	3710      	adds	r7, #16
 800a07c:	46bd      	mov	sp, r7
 800a07e:	bd80      	pop	{r7, pc}
 800a080:	2000171c 	.word	0x2000171c

0800a084 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800a084:	b480      	push	{r7}
 800a086:	b085      	sub	sp, #20
 800a088:	af00      	add	r7, sp, #0
 800a08a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	3301      	adds	r3, #1
 800a090:	781b      	ldrb	r3, [r3, #0]
 800a092:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800a094:	89fb      	ldrh	r3, [r7, #14]
 800a096:	021b      	lsls	r3, r3, #8
 800a098:	b21a      	sxth	r2, r3
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	781b      	ldrb	r3, [r3, #0]
 800a09e:	b21b      	sxth	r3, r3
 800a0a0:	4313      	orrs	r3, r2
 800a0a2:	b21b      	sxth	r3, r3
 800a0a4:	81fb      	strh	r3, [r7, #14]
	return rv;
 800a0a6:	89fb      	ldrh	r3, [r7, #14]
}
 800a0a8:	4618      	mov	r0, r3
 800a0aa:	3714      	adds	r7, #20
 800a0ac:	46bd      	mov	sp, r7
 800a0ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0b2:	4770      	bx	lr

0800a0b4 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800a0b4:	b480      	push	{r7}
 800a0b6:	b085      	sub	sp, #20
 800a0b8:	af00      	add	r7, sp, #0
 800a0ba:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	3303      	adds	r3, #3
 800a0c0:	781b      	ldrb	r3, [r3, #0]
 800a0c2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	021b      	lsls	r3, r3, #8
 800a0c8:	687a      	ldr	r2, [r7, #4]
 800a0ca:	3202      	adds	r2, #2
 800a0cc:	7812      	ldrb	r2, [r2, #0]
 800a0ce:	4313      	orrs	r3, r2
 800a0d0:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	021b      	lsls	r3, r3, #8
 800a0d6:	687a      	ldr	r2, [r7, #4]
 800a0d8:	3201      	adds	r2, #1
 800a0da:	7812      	ldrb	r2, [r2, #0]
 800a0dc:	4313      	orrs	r3, r2
 800a0de:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	021b      	lsls	r3, r3, #8
 800a0e4:	687a      	ldr	r2, [r7, #4]
 800a0e6:	7812      	ldrb	r2, [r2, #0]
 800a0e8:	4313      	orrs	r3, r2
 800a0ea:	60fb      	str	r3, [r7, #12]
	return rv;
 800a0ec:	68fb      	ldr	r3, [r7, #12]
}
 800a0ee:	4618      	mov	r0, r3
 800a0f0:	3714      	adds	r7, #20
 800a0f2:	46bd      	mov	sp, r7
 800a0f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0f8:	4770      	bx	lr

0800a0fa <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800a0fa:	b480      	push	{r7}
 800a0fc:	b083      	sub	sp, #12
 800a0fe:	af00      	add	r7, sp, #0
 800a100:	6078      	str	r0, [r7, #4]
 800a102:	460b      	mov	r3, r1
 800a104:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	1c5a      	adds	r2, r3, #1
 800a10a:	607a      	str	r2, [r7, #4]
 800a10c:	887a      	ldrh	r2, [r7, #2]
 800a10e:	b2d2      	uxtb	r2, r2
 800a110:	701a      	strb	r2, [r3, #0]
 800a112:	887b      	ldrh	r3, [r7, #2]
 800a114:	0a1b      	lsrs	r3, r3, #8
 800a116:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	1c5a      	adds	r2, r3, #1
 800a11c:	607a      	str	r2, [r7, #4]
 800a11e:	887a      	ldrh	r2, [r7, #2]
 800a120:	b2d2      	uxtb	r2, r2
 800a122:	701a      	strb	r2, [r3, #0]
}
 800a124:	bf00      	nop
 800a126:	370c      	adds	r7, #12
 800a128:	46bd      	mov	sp, r7
 800a12a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a12e:	4770      	bx	lr

0800a130 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800a130:	b480      	push	{r7}
 800a132:	b083      	sub	sp, #12
 800a134:	af00      	add	r7, sp, #0
 800a136:	6078      	str	r0, [r7, #4]
 800a138:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	1c5a      	adds	r2, r3, #1
 800a13e:	607a      	str	r2, [r7, #4]
 800a140:	683a      	ldr	r2, [r7, #0]
 800a142:	b2d2      	uxtb	r2, r2
 800a144:	701a      	strb	r2, [r3, #0]
 800a146:	683b      	ldr	r3, [r7, #0]
 800a148:	0a1b      	lsrs	r3, r3, #8
 800a14a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	1c5a      	adds	r2, r3, #1
 800a150:	607a      	str	r2, [r7, #4]
 800a152:	683a      	ldr	r2, [r7, #0]
 800a154:	b2d2      	uxtb	r2, r2
 800a156:	701a      	strb	r2, [r3, #0]
 800a158:	683b      	ldr	r3, [r7, #0]
 800a15a:	0a1b      	lsrs	r3, r3, #8
 800a15c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	1c5a      	adds	r2, r3, #1
 800a162:	607a      	str	r2, [r7, #4]
 800a164:	683a      	ldr	r2, [r7, #0]
 800a166:	b2d2      	uxtb	r2, r2
 800a168:	701a      	strb	r2, [r3, #0]
 800a16a:	683b      	ldr	r3, [r7, #0]
 800a16c:	0a1b      	lsrs	r3, r3, #8
 800a16e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	1c5a      	adds	r2, r3, #1
 800a174:	607a      	str	r2, [r7, #4]
 800a176:	683a      	ldr	r2, [r7, #0]
 800a178:	b2d2      	uxtb	r2, r2
 800a17a:	701a      	strb	r2, [r3, #0]
}
 800a17c:	bf00      	nop
 800a17e:	370c      	adds	r7, #12
 800a180:	46bd      	mov	sp, r7
 800a182:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a186:	4770      	bx	lr

0800a188 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800a188:	b480      	push	{r7}
 800a18a:	b087      	sub	sp, #28
 800a18c:	af00      	add	r7, sp, #0
 800a18e:	60f8      	str	r0, [r7, #12]
 800a190:	60b9      	str	r1, [r7, #8]
 800a192:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800a198:	68bb      	ldr	r3, [r7, #8]
 800a19a:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d00d      	beq.n	800a1be <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800a1a2:	693a      	ldr	r2, [r7, #16]
 800a1a4:	1c53      	adds	r3, r2, #1
 800a1a6:	613b      	str	r3, [r7, #16]
 800a1a8:	697b      	ldr	r3, [r7, #20]
 800a1aa:	1c59      	adds	r1, r3, #1
 800a1ac:	6179      	str	r1, [r7, #20]
 800a1ae:	7812      	ldrb	r2, [r2, #0]
 800a1b0:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	3b01      	subs	r3, #1
 800a1b6:	607b      	str	r3, [r7, #4]
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	d1f1      	bne.n	800a1a2 <mem_cpy+0x1a>
	}
}
 800a1be:	bf00      	nop
 800a1c0:	371c      	adds	r7, #28
 800a1c2:	46bd      	mov	sp, r7
 800a1c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1c8:	4770      	bx	lr

0800a1ca <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800a1ca:	b480      	push	{r7}
 800a1cc:	b087      	sub	sp, #28
 800a1ce:	af00      	add	r7, sp, #0
 800a1d0:	60f8      	str	r0, [r7, #12]
 800a1d2:	60b9      	str	r1, [r7, #8]
 800a1d4:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800a1da:	697b      	ldr	r3, [r7, #20]
 800a1dc:	1c5a      	adds	r2, r3, #1
 800a1de:	617a      	str	r2, [r7, #20]
 800a1e0:	68ba      	ldr	r2, [r7, #8]
 800a1e2:	b2d2      	uxtb	r2, r2
 800a1e4:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	3b01      	subs	r3, #1
 800a1ea:	607b      	str	r3, [r7, #4]
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d1f3      	bne.n	800a1da <mem_set+0x10>
}
 800a1f2:	bf00      	nop
 800a1f4:	bf00      	nop
 800a1f6:	371c      	adds	r7, #28
 800a1f8:	46bd      	mov	sp, r7
 800a1fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1fe:	4770      	bx	lr

0800a200 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800a200:	b480      	push	{r7}
 800a202:	b089      	sub	sp, #36	; 0x24
 800a204:	af00      	add	r7, sp, #0
 800a206:	60f8      	str	r0, [r7, #12]
 800a208:	60b9      	str	r1, [r7, #8]
 800a20a:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	61fb      	str	r3, [r7, #28]
 800a210:	68bb      	ldr	r3, [r7, #8]
 800a212:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800a214:	2300      	movs	r3, #0
 800a216:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800a218:	69fb      	ldr	r3, [r7, #28]
 800a21a:	1c5a      	adds	r2, r3, #1
 800a21c:	61fa      	str	r2, [r7, #28]
 800a21e:	781b      	ldrb	r3, [r3, #0]
 800a220:	4619      	mov	r1, r3
 800a222:	69bb      	ldr	r3, [r7, #24]
 800a224:	1c5a      	adds	r2, r3, #1
 800a226:	61ba      	str	r2, [r7, #24]
 800a228:	781b      	ldrb	r3, [r3, #0]
 800a22a:	1acb      	subs	r3, r1, r3
 800a22c:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	3b01      	subs	r3, #1
 800a232:	607b      	str	r3, [r7, #4]
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	2b00      	cmp	r3, #0
 800a238:	d002      	beq.n	800a240 <mem_cmp+0x40>
 800a23a:	697b      	ldr	r3, [r7, #20]
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d0eb      	beq.n	800a218 <mem_cmp+0x18>

	return r;
 800a240:	697b      	ldr	r3, [r7, #20]
}
 800a242:	4618      	mov	r0, r3
 800a244:	3724      	adds	r7, #36	; 0x24
 800a246:	46bd      	mov	sp, r7
 800a248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a24c:	4770      	bx	lr

0800a24e <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800a24e:	b480      	push	{r7}
 800a250:	b083      	sub	sp, #12
 800a252:	af00      	add	r7, sp, #0
 800a254:	6078      	str	r0, [r7, #4]
 800a256:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800a258:	e002      	b.n	800a260 <chk_chr+0x12>
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	3301      	adds	r3, #1
 800a25e:	607b      	str	r3, [r7, #4]
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	781b      	ldrb	r3, [r3, #0]
 800a264:	2b00      	cmp	r3, #0
 800a266:	d005      	beq.n	800a274 <chk_chr+0x26>
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	781b      	ldrb	r3, [r3, #0]
 800a26c:	461a      	mov	r2, r3
 800a26e:	683b      	ldr	r3, [r7, #0]
 800a270:	4293      	cmp	r3, r2
 800a272:	d1f2      	bne.n	800a25a <chk_chr+0xc>
	return *str;
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	781b      	ldrb	r3, [r3, #0]
}
 800a278:	4618      	mov	r0, r3
 800a27a:	370c      	adds	r7, #12
 800a27c:	46bd      	mov	sp, r7
 800a27e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a282:	4770      	bx	lr

0800a284 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800a284:	b480      	push	{r7}
 800a286:	b085      	sub	sp, #20
 800a288:	af00      	add	r7, sp, #0
 800a28a:	6078      	str	r0, [r7, #4]
 800a28c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800a28e:	2300      	movs	r3, #0
 800a290:	60bb      	str	r3, [r7, #8]
 800a292:	68bb      	ldr	r3, [r7, #8]
 800a294:	60fb      	str	r3, [r7, #12]
 800a296:	e029      	b.n	800a2ec <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800a298:	4a27      	ldr	r2, [pc, #156]	; (800a338 <chk_lock+0xb4>)
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	011b      	lsls	r3, r3, #4
 800a29e:	4413      	add	r3, r2
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	d01d      	beq.n	800a2e2 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800a2a6:	4a24      	ldr	r2, [pc, #144]	; (800a338 <chk_lock+0xb4>)
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	011b      	lsls	r3, r3, #4
 800a2ac:	4413      	add	r3, r2
 800a2ae:	681a      	ldr	r2, [r3, #0]
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	429a      	cmp	r2, r3
 800a2b6:	d116      	bne.n	800a2e6 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800a2b8:	4a1f      	ldr	r2, [pc, #124]	; (800a338 <chk_lock+0xb4>)
 800a2ba:	68fb      	ldr	r3, [r7, #12]
 800a2bc:	011b      	lsls	r3, r3, #4
 800a2be:	4413      	add	r3, r2
 800a2c0:	3304      	adds	r3, #4
 800a2c2:	681a      	ldr	r2, [r3, #0]
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800a2c8:	429a      	cmp	r2, r3
 800a2ca:	d10c      	bne.n	800a2e6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800a2cc:	4a1a      	ldr	r2, [pc, #104]	; (800a338 <chk_lock+0xb4>)
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	011b      	lsls	r3, r3, #4
 800a2d2:	4413      	add	r3, r2
 800a2d4:	3308      	adds	r3, #8
 800a2d6:	681a      	ldr	r2, [r3, #0]
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800a2dc:	429a      	cmp	r2, r3
 800a2de:	d102      	bne.n	800a2e6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800a2e0:	e007      	b.n	800a2f2 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800a2e2:	2301      	movs	r3, #1
 800a2e4:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	3301      	adds	r3, #1
 800a2ea:	60fb      	str	r3, [r7, #12]
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	2b01      	cmp	r3, #1
 800a2f0:	d9d2      	bls.n	800a298 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	2b02      	cmp	r3, #2
 800a2f6:	d109      	bne.n	800a30c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800a2f8:	68bb      	ldr	r3, [r7, #8]
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d102      	bne.n	800a304 <chk_lock+0x80>
 800a2fe:	683b      	ldr	r3, [r7, #0]
 800a300:	2b02      	cmp	r3, #2
 800a302:	d101      	bne.n	800a308 <chk_lock+0x84>
 800a304:	2300      	movs	r3, #0
 800a306:	e010      	b.n	800a32a <chk_lock+0xa6>
 800a308:	2312      	movs	r3, #18
 800a30a:	e00e      	b.n	800a32a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800a30c:	683b      	ldr	r3, [r7, #0]
 800a30e:	2b00      	cmp	r3, #0
 800a310:	d108      	bne.n	800a324 <chk_lock+0xa0>
 800a312:	4a09      	ldr	r2, [pc, #36]	; (800a338 <chk_lock+0xb4>)
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	011b      	lsls	r3, r3, #4
 800a318:	4413      	add	r3, r2
 800a31a:	330c      	adds	r3, #12
 800a31c:	881b      	ldrh	r3, [r3, #0]
 800a31e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a322:	d101      	bne.n	800a328 <chk_lock+0xa4>
 800a324:	2310      	movs	r3, #16
 800a326:	e000      	b.n	800a32a <chk_lock+0xa6>
 800a328:	2300      	movs	r3, #0
}
 800a32a:	4618      	mov	r0, r3
 800a32c:	3714      	adds	r7, #20
 800a32e:	46bd      	mov	sp, r7
 800a330:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a334:	4770      	bx	lr
 800a336:	bf00      	nop
 800a338:	200014fc 	.word	0x200014fc

0800a33c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800a33c:	b480      	push	{r7}
 800a33e:	b083      	sub	sp, #12
 800a340:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800a342:	2300      	movs	r3, #0
 800a344:	607b      	str	r3, [r7, #4]
 800a346:	e002      	b.n	800a34e <enq_lock+0x12>
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	3301      	adds	r3, #1
 800a34c:	607b      	str	r3, [r7, #4]
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	2b01      	cmp	r3, #1
 800a352:	d806      	bhi.n	800a362 <enq_lock+0x26>
 800a354:	4a09      	ldr	r2, [pc, #36]	; (800a37c <enq_lock+0x40>)
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	011b      	lsls	r3, r3, #4
 800a35a:	4413      	add	r3, r2
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	2b00      	cmp	r3, #0
 800a360:	d1f2      	bne.n	800a348 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	2b02      	cmp	r3, #2
 800a366:	bf14      	ite	ne
 800a368:	2301      	movne	r3, #1
 800a36a:	2300      	moveq	r3, #0
 800a36c:	b2db      	uxtb	r3, r3
}
 800a36e:	4618      	mov	r0, r3
 800a370:	370c      	adds	r7, #12
 800a372:	46bd      	mov	sp, r7
 800a374:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a378:	4770      	bx	lr
 800a37a:	bf00      	nop
 800a37c:	200014fc 	.word	0x200014fc

0800a380 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800a380:	b480      	push	{r7}
 800a382:	b085      	sub	sp, #20
 800a384:	af00      	add	r7, sp, #0
 800a386:	6078      	str	r0, [r7, #4]
 800a388:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800a38a:	2300      	movs	r3, #0
 800a38c:	60fb      	str	r3, [r7, #12]
 800a38e:	e01f      	b.n	800a3d0 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800a390:	4a41      	ldr	r2, [pc, #260]	; (800a498 <inc_lock+0x118>)
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	011b      	lsls	r3, r3, #4
 800a396:	4413      	add	r3, r2
 800a398:	681a      	ldr	r2, [r3, #0]
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	429a      	cmp	r2, r3
 800a3a0:	d113      	bne.n	800a3ca <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800a3a2:	4a3d      	ldr	r2, [pc, #244]	; (800a498 <inc_lock+0x118>)
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	011b      	lsls	r3, r3, #4
 800a3a8:	4413      	add	r3, r2
 800a3aa:	3304      	adds	r3, #4
 800a3ac:	681a      	ldr	r2, [r3, #0]
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800a3b2:	429a      	cmp	r2, r3
 800a3b4:	d109      	bne.n	800a3ca <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800a3b6:	4a38      	ldr	r2, [pc, #224]	; (800a498 <inc_lock+0x118>)
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	011b      	lsls	r3, r3, #4
 800a3bc:	4413      	add	r3, r2
 800a3be:	3308      	adds	r3, #8
 800a3c0:	681a      	ldr	r2, [r3, #0]
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800a3c6:	429a      	cmp	r2, r3
 800a3c8:	d006      	beq.n	800a3d8 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800a3ca:	68fb      	ldr	r3, [r7, #12]
 800a3cc:	3301      	adds	r3, #1
 800a3ce:	60fb      	str	r3, [r7, #12]
 800a3d0:	68fb      	ldr	r3, [r7, #12]
 800a3d2:	2b01      	cmp	r3, #1
 800a3d4:	d9dc      	bls.n	800a390 <inc_lock+0x10>
 800a3d6:	e000      	b.n	800a3da <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800a3d8:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	2b02      	cmp	r3, #2
 800a3de:	d132      	bne.n	800a446 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800a3e0:	2300      	movs	r3, #0
 800a3e2:	60fb      	str	r3, [r7, #12]
 800a3e4:	e002      	b.n	800a3ec <inc_lock+0x6c>
 800a3e6:	68fb      	ldr	r3, [r7, #12]
 800a3e8:	3301      	adds	r3, #1
 800a3ea:	60fb      	str	r3, [r7, #12]
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	2b01      	cmp	r3, #1
 800a3f0:	d806      	bhi.n	800a400 <inc_lock+0x80>
 800a3f2:	4a29      	ldr	r2, [pc, #164]	; (800a498 <inc_lock+0x118>)
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	011b      	lsls	r3, r3, #4
 800a3f8:	4413      	add	r3, r2
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	d1f2      	bne.n	800a3e6 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	2b02      	cmp	r3, #2
 800a404:	d101      	bne.n	800a40a <inc_lock+0x8a>
 800a406:	2300      	movs	r3, #0
 800a408:	e040      	b.n	800a48c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	681a      	ldr	r2, [r3, #0]
 800a40e:	4922      	ldr	r1, [pc, #136]	; (800a498 <inc_lock+0x118>)
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	011b      	lsls	r3, r3, #4
 800a414:	440b      	add	r3, r1
 800a416:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	689a      	ldr	r2, [r3, #8]
 800a41c:	491e      	ldr	r1, [pc, #120]	; (800a498 <inc_lock+0x118>)
 800a41e:	68fb      	ldr	r3, [r7, #12]
 800a420:	011b      	lsls	r3, r3, #4
 800a422:	440b      	add	r3, r1
 800a424:	3304      	adds	r3, #4
 800a426:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	695a      	ldr	r2, [r3, #20]
 800a42c:	491a      	ldr	r1, [pc, #104]	; (800a498 <inc_lock+0x118>)
 800a42e:	68fb      	ldr	r3, [r7, #12]
 800a430:	011b      	lsls	r3, r3, #4
 800a432:	440b      	add	r3, r1
 800a434:	3308      	adds	r3, #8
 800a436:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800a438:	4a17      	ldr	r2, [pc, #92]	; (800a498 <inc_lock+0x118>)
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	011b      	lsls	r3, r3, #4
 800a43e:	4413      	add	r3, r2
 800a440:	330c      	adds	r3, #12
 800a442:	2200      	movs	r2, #0
 800a444:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800a446:	683b      	ldr	r3, [r7, #0]
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d009      	beq.n	800a460 <inc_lock+0xe0>
 800a44c:	4a12      	ldr	r2, [pc, #72]	; (800a498 <inc_lock+0x118>)
 800a44e:	68fb      	ldr	r3, [r7, #12]
 800a450:	011b      	lsls	r3, r3, #4
 800a452:	4413      	add	r3, r2
 800a454:	330c      	adds	r3, #12
 800a456:	881b      	ldrh	r3, [r3, #0]
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d001      	beq.n	800a460 <inc_lock+0xe0>
 800a45c:	2300      	movs	r3, #0
 800a45e:	e015      	b.n	800a48c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800a460:	683b      	ldr	r3, [r7, #0]
 800a462:	2b00      	cmp	r3, #0
 800a464:	d108      	bne.n	800a478 <inc_lock+0xf8>
 800a466:	4a0c      	ldr	r2, [pc, #48]	; (800a498 <inc_lock+0x118>)
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	011b      	lsls	r3, r3, #4
 800a46c:	4413      	add	r3, r2
 800a46e:	330c      	adds	r3, #12
 800a470:	881b      	ldrh	r3, [r3, #0]
 800a472:	3301      	adds	r3, #1
 800a474:	b29a      	uxth	r2, r3
 800a476:	e001      	b.n	800a47c <inc_lock+0xfc>
 800a478:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a47c:	4906      	ldr	r1, [pc, #24]	; (800a498 <inc_lock+0x118>)
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	011b      	lsls	r3, r3, #4
 800a482:	440b      	add	r3, r1
 800a484:	330c      	adds	r3, #12
 800a486:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	3301      	adds	r3, #1
}
 800a48c:	4618      	mov	r0, r3
 800a48e:	3714      	adds	r7, #20
 800a490:	46bd      	mov	sp, r7
 800a492:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a496:	4770      	bx	lr
 800a498:	200014fc 	.word	0x200014fc

0800a49c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800a49c:	b480      	push	{r7}
 800a49e:	b085      	sub	sp, #20
 800a4a0:	af00      	add	r7, sp, #0
 800a4a2:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800a4a4:	2300      	movs	r3, #0
 800a4a6:	60fb      	str	r3, [r7, #12]
 800a4a8:	e010      	b.n	800a4cc <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800a4aa:	4a0d      	ldr	r2, [pc, #52]	; (800a4e0 <clear_lock+0x44>)
 800a4ac:	68fb      	ldr	r3, [r7, #12]
 800a4ae:	011b      	lsls	r3, r3, #4
 800a4b0:	4413      	add	r3, r2
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	687a      	ldr	r2, [r7, #4]
 800a4b6:	429a      	cmp	r2, r3
 800a4b8:	d105      	bne.n	800a4c6 <clear_lock+0x2a>
 800a4ba:	4a09      	ldr	r2, [pc, #36]	; (800a4e0 <clear_lock+0x44>)
 800a4bc:	68fb      	ldr	r3, [r7, #12]
 800a4be:	011b      	lsls	r3, r3, #4
 800a4c0:	4413      	add	r3, r2
 800a4c2:	2200      	movs	r2, #0
 800a4c4:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	3301      	adds	r3, #1
 800a4ca:	60fb      	str	r3, [r7, #12]
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	2b01      	cmp	r3, #1
 800a4d0:	d9eb      	bls.n	800a4aa <clear_lock+0xe>
	}
}
 800a4d2:	bf00      	nop
 800a4d4:	bf00      	nop
 800a4d6:	3714      	adds	r7, #20
 800a4d8:	46bd      	mov	sp, r7
 800a4da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4de:	4770      	bx	lr
 800a4e0:	200014fc 	.word	0x200014fc

0800a4e4 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800a4e4:	b580      	push	{r7, lr}
 800a4e6:	b086      	sub	sp, #24
 800a4e8:	af00      	add	r7, sp, #0
 800a4ea:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800a4ec:	2300      	movs	r3, #0
 800a4ee:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	78db      	ldrb	r3, [r3, #3]
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d034      	beq.n	800a562 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a4fc:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	7858      	ldrb	r0, [r3, #1]
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800a508:	2301      	movs	r3, #1
 800a50a:	697a      	ldr	r2, [r7, #20]
 800a50c:	f7ff fd7c 	bl	800a008 <disk_write>
 800a510:	4603      	mov	r3, r0
 800a512:	2b00      	cmp	r3, #0
 800a514:	d002      	beq.n	800a51c <sync_window+0x38>
			res = FR_DISK_ERR;
 800a516:	2301      	movs	r3, #1
 800a518:	73fb      	strb	r3, [r7, #15]
 800a51a:	e022      	b.n	800a562 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	2200      	movs	r2, #0
 800a520:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a526:	697a      	ldr	r2, [r7, #20]
 800a528:	1ad2      	subs	r2, r2, r3
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	6a1b      	ldr	r3, [r3, #32]
 800a52e:	429a      	cmp	r2, r3
 800a530:	d217      	bcs.n	800a562 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	789b      	ldrb	r3, [r3, #2]
 800a536:	613b      	str	r3, [r7, #16]
 800a538:	e010      	b.n	800a55c <sync_window+0x78>
					wsect += fs->fsize;
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	6a1b      	ldr	r3, [r3, #32]
 800a53e:	697a      	ldr	r2, [r7, #20]
 800a540:	4413      	add	r3, r2
 800a542:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	7858      	ldrb	r0, [r3, #1]
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800a54e:	2301      	movs	r3, #1
 800a550:	697a      	ldr	r2, [r7, #20]
 800a552:	f7ff fd59 	bl	800a008 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800a556:	693b      	ldr	r3, [r7, #16]
 800a558:	3b01      	subs	r3, #1
 800a55a:	613b      	str	r3, [r7, #16]
 800a55c:	693b      	ldr	r3, [r7, #16]
 800a55e:	2b01      	cmp	r3, #1
 800a560:	d8eb      	bhi.n	800a53a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800a562:	7bfb      	ldrb	r3, [r7, #15]
}
 800a564:	4618      	mov	r0, r3
 800a566:	3718      	adds	r7, #24
 800a568:	46bd      	mov	sp, r7
 800a56a:	bd80      	pop	{r7, pc}

0800a56c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800a56c:	b580      	push	{r7, lr}
 800a56e:	b084      	sub	sp, #16
 800a570:	af00      	add	r7, sp, #0
 800a572:	6078      	str	r0, [r7, #4]
 800a574:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800a576:	2300      	movs	r3, #0
 800a578:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a57e:	683a      	ldr	r2, [r7, #0]
 800a580:	429a      	cmp	r2, r3
 800a582:	d01b      	beq.n	800a5bc <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800a584:	6878      	ldr	r0, [r7, #4]
 800a586:	f7ff ffad 	bl	800a4e4 <sync_window>
 800a58a:	4603      	mov	r3, r0
 800a58c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800a58e:	7bfb      	ldrb	r3, [r7, #15]
 800a590:	2b00      	cmp	r3, #0
 800a592:	d113      	bne.n	800a5bc <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	7858      	ldrb	r0, [r3, #1]
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800a59e:	2301      	movs	r3, #1
 800a5a0:	683a      	ldr	r2, [r7, #0]
 800a5a2:	f7ff fd11 	bl	8009fc8 <disk_read>
 800a5a6:	4603      	mov	r3, r0
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	d004      	beq.n	800a5b6 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800a5ac:	f04f 33ff 	mov.w	r3, #4294967295
 800a5b0:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800a5b2:	2301      	movs	r3, #1
 800a5b4:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	683a      	ldr	r2, [r7, #0]
 800a5ba:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 800a5bc:	7bfb      	ldrb	r3, [r7, #15]
}
 800a5be:	4618      	mov	r0, r3
 800a5c0:	3710      	adds	r7, #16
 800a5c2:	46bd      	mov	sp, r7
 800a5c4:	bd80      	pop	{r7, pc}
	...

0800a5c8 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800a5c8:	b580      	push	{r7, lr}
 800a5ca:	b084      	sub	sp, #16
 800a5cc:	af00      	add	r7, sp, #0
 800a5ce:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800a5d0:	6878      	ldr	r0, [r7, #4]
 800a5d2:	f7ff ff87 	bl	800a4e4 <sync_window>
 800a5d6:	4603      	mov	r3, r0
 800a5d8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800a5da:	7bfb      	ldrb	r3, [r7, #15]
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	d159      	bne.n	800a694 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	781b      	ldrb	r3, [r3, #0]
 800a5e4:	2b03      	cmp	r3, #3
 800a5e6:	d149      	bne.n	800a67c <sync_fs+0xb4>
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	791b      	ldrb	r3, [r3, #4]
 800a5ec:	2b01      	cmp	r3, #1
 800a5ee:	d145      	bne.n	800a67c <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	899b      	ldrh	r3, [r3, #12]
 800a5fa:	461a      	mov	r2, r3
 800a5fc:	2100      	movs	r1, #0
 800a5fe:	f7ff fde4 	bl	800a1ca <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	3338      	adds	r3, #56	; 0x38
 800a606:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800a60a:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800a60e:	4618      	mov	r0, r3
 800a610:	f7ff fd73 	bl	800a0fa <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	3338      	adds	r3, #56	; 0x38
 800a618:	4921      	ldr	r1, [pc, #132]	; (800a6a0 <sync_fs+0xd8>)
 800a61a:	4618      	mov	r0, r3
 800a61c:	f7ff fd88 	bl	800a130 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	3338      	adds	r3, #56	; 0x38
 800a624:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800a628:	491e      	ldr	r1, [pc, #120]	; (800a6a4 <sync_fs+0xdc>)
 800a62a:	4618      	mov	r0, r3
 800a62c:	f7ff fd80 	bl	800a130 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	3338      	adds	r3, #56	; 0x38
 800a634:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	699b      	ldr	r3, [r3, #24]
 800a63c:	4619      	mov	r1, r3
 800a63e:	4610      	mov	r0, r2
 800a640:	f7ff fd76 	bl	800a130 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	3338      	adds	r3, #56	; 0x38
 800a648:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	695b      	ldr	r3, [r3, #20]
 800a650:	4619      	mov	r1, r3
 800a652:	4610      	mov	r0, r2
 800a654:	f7ff fd6c 	bl	800a130 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a65c:	1c5a      	adds	r2, r3, #1
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	7858      	ldrb	r0, [r3, #1]
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a670:	2301      	movs	r3, #1
 800a672:	f7ff fcc9 	bl	800a008 <disk_write>
			fs->fsi_flag = 0;
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	2200      	movs	r2, #0
 800a67a:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	785b      	ldrb	r3, [r3, #1]
 800a680:	2200      	movs	r2, #0
 800a682:	2100      	movs	r1, #0
 800a684:	4618      	mov	r0, r3
 800a686:	f7ff fcdf 	bl	800a048 <disk_ioctl>
 800a68a:	4603      	mov	r3, r0
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	d001      	beq.n	800a694 <sync_fs+0xcc>
 800a690:	2301      	movs	r3, #1
 800a692:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800a694:	7bfb      	ldrb	r3, [r7, #15]
}
 800a696:	4618      	mov	r0, r3
 800a698:	3710      	adds	r7, #16
 800a69a:	46bd      	mov	sp, r7
 800a69c:	bd80      	pop	{r7, pc}
 800a69e:	bf00      	nop
 800a6a0:	41615252 	.word	0x41615252
 800a6a4:	61417272 	.word	0x61417272

0800a6a8 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800a6a8:	b480      	push	{r7}
 800a6aa:	b083      	sub	sp, #12
 800a6ac:	af00      	add	r7, sp, #0
 800a6ae:	6078      	str	r0, [r7, #4]
 800a6b0:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800a6b2:	683b      	ldr	r3, [r7, #0]
 800a6b4:	3b02      	subs	r3, #2
 800a6b6:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	69db      	ldr	r3, [r3, #28]
 800a6bc:	3b02      	subs	r3, #2
 800a6be:	683a      	ldr	r2, [r7, #0]
 800a6c0:	429a      	cmp	r2, r3
 800a6c2:	d301      	bcc.n	800a6c8 <clust2sect+0x20>
 800a6c4:	2300      	movs	r3, #0
 800a6c6:	e008      	b.n	800a6da <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	895b      	ldrh	r3, [r3, #10]
 800a6cc:	461a      	mov	r2, r3
 800a6ce:	683b      	ldr	r3, [r7, #0]
 800a6d0:	fb03 f202 	mul.w	r2, r3, r2
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a6d8:	4413      	add	r3, r2
}
 800a6da:	4618      	mov	r0, r3
 800a6dc:	370c      	adds	r7, #12
 800a6de:	46bd      	mov	sp, r7
 800a6e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6e4:	4770      	bx	lr

0800a6e6 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800a6e6:	b580      	push	{r7, lr}
 800a6e8:	b086      	sub	sp, #24
 800a6ea:	af00      	add	r7, sp, #0
 800a6ec:	6078      	str	r0, [r7, #4]
 800a6ee:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800a6f6:	683b      	ldr	r3, [r7, #0]
 800a6f8:	2b01      	cmp	r3, #1
 800a6fa:	d904      	bls.n	800a706 <get_fat+0x20>
 800a6fc:	693b      	ldr	r3, [r7, #16]
 800a6fe:	69db      	ldr	r3, [r3, #28]
 800a700:	683a      	ldr	r2, [r7, #0]
 800a702:	429a      	cmp	r2, r3
 800a704:	d302      	bcc.n	800a70c <get_fat+0x26>
		val = 1;	/* Internal error */
 800a706:	2301      	movs	r3, #1
 800a708:	617b      	str	r3, [r7, #20]
 800a70a:	e0bb      	b.n	800a884 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800a70c:	f04f 33ff 	mov.w	r3, #4294967295
 800a710:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800a712:	693b      	ldr	r3, [r7, #16]
 800a714:	781b      	ldrb	r3, [r3, #0]
 800a716:	2b03      	cmp	r3, #3
 800a718:	f000 8083 	beq.w	800a822 <get_fat+0x13c>
 800a71c:	2b03      	cmp	r3, #3
 800a71e:	f300 80a7 	bgt.w	800a870 <get_fat+0x18a>
 800a722:	2b01      	cmp	r3, #1
 800a724:	d002      	beq.n	800a72c <get_fat+0x46>
 800a726:	2b02      	cmp	r3, #2
 800a728:	d056      	beq.n	800a7d8 <get_fat+0xf2>
 800a72a:	e0a1      	b.n	800a870 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800a72c:	683b      	ldr	r3, [r7, #0]
 800a72e:	60fb      	str	r3, [r7, #12]
 800a730:	68fb      	ldr	r3, [r7, #12]
 800a732:	085b      	lsrs	r3, r3, #1
 800a734:	68fa      	ldr	r2, [r7, #12]
 800a736:	4413      	add	r3, r2
 800a738:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a73a:	693b      	ldr	r3, [r7, #16]
 800a73c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a73e:	693b      	ldr	r3, [r7, #16]
 800a740:	899b      	ldrh	r3, [r3, #12]
 800a742:	4619      	mov	r1, r3
 800a744:	68fb      	ldr	r3, [r7, #12]
 800a746:	fbb3 f3f1 	udiv	r3, r3, r1
 800a74a:	4413      	add	r3, r2
 800a74c:	4619      	mov	r1, r3
 800a74e:	6938      	ldr	r0, [r7, #16]
 800a750:	f7ff ff0c 	bl	800a56c <move_window>
 800a754:	4603      	mov	r3, r0
 800a756:	2b00      	cmp	r3, #0
 800a758:	f040 808d 	bne.w	800a876 <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	1c5a      	adds	r2, r3, #1
 800a760:	60fa      	str	r2, [r7, #12]
 800a762:	693a      	ldr	r2, [r7, #16]
 800a764:	8992      	ldrh	r2, [r2, #12]
 800a766:	fbb3 f1f2 	udiv	r1, r3, r2
 800a76a:	fb01 f202 	mul.w	r2, r1, r2
 800a76e:	1a9b      	subs	r3, r3, r2
 800a770:	693a      	ldr	r2, [r7, #16]
 800a772:	4413      	add	r3, r2
 800a774:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800a778:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a77a:	693b      	ldr	r3, [r7, #16]
 800a77c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a77e:	693b      	ldr	r3, [r7, #16]
 800a780:	899b      	ldrh	r3, [r3, #12]
 800a782:	4619      	mov	r1, r3
 800a784:	68fb      	ldr	r3, [r7, #12]
 800a786:	fbb3 f3f1 	udiv	r3, r3, r1
 800a78a:	4413      	add	r3, r2
 800a78c:	4619      	mov	r1, r3
 800a78e:	6938      	ldr	r0, [r7, #16]
 800a790:	f7ff feec 	bl	800a56c <move_window>
 800a794:	4603      	mov	r3, r0
 800a796:	2b00      	cmp	r3, #0
 800a798:	d16f      	bne.n	800a87a <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 800a79a:	693b      	ldr	r3, [r7, #16]
 800a79c:	899b      	ldrh	r3, [r3, #12]
 800a79e:	461a      	mov	r2, r3
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	fbb3 f1f2 	udiv	r1, r3, r2
 800a7a6:	fb01 f202 	mul.w	r2, r1, r2
 800a7aa:	1a9b      	subs	r3, r3, r2
 800a7ac:	693a      	ldr	r2, [r7, #16]
 800a7ae:	4413      	add	r3, r2
 800a7b0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800a7b4:	021b      	lsls	r3, r3, #8
 800a7b6:	461a      	mov	r2, r3
 800a7b8:	68bb      	ldr	r3, [r7, #8]
 800a7ba:	4313      	orrs	r3, r2
 800a7bc:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800a7be:	683b      	ldr	r3, [r7, #0]
 800a7c0:	f003 0301 	and.w	r3, r3, #1
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	d002      	beq.n	800a7ce <get_fat+0xe8>
 800a7c8:	68bb      	ldr	r3, [r7, #8]
 800a7ca:	091b      	lsrs	r3, r3, #4
 800a7cc:	e002      	b.n	800a7d4 <get_fat+0xee>
 800a7ce:	68bb      	ldr	r3, [r7, #8]
 800a7d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a7d4:	617b      	str	r3, [r7, #20]
			break;
 800a7d6:	e055      	b.n	800a884 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800a7d8:	693b      	ldr	r3, [r7, #16]
 800a7da:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a7dc:	693b      	ldr	r3, [r7, #16]
 800a7de:	899b      	ldrh	r3, [r3, #12]
 800a7e0:	085b      	lsrs	r3, r3, #1
 800a7e2:	b29b      	uxth	r3, r3
 800a7e4:	4619      	mov	r1, r3
 800a7e6:	683b      	ldr	r3, [r7, #0]
 800a7e8:	fbb3 f3f1 	udiv	r3, r3, r1
 800a7ec:	4413      	add	r3, r2
 800a7ee:	4619      	mov	r1, r3
 800a7f0:	6938      	ldr	r0, [r7, #16]
 800a7f2:	f7ff febb 	bl	800a56c <move_window>
 800a7f6:	4603      	mov	r3, r0
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d140      	bne.n	800a87e <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800a7fc:	693b      	ldr	r3, [r7, #16]
 800a7fe:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800a802:	683b      	ldr	r3, [r7, #0]
 800a804:	005b      	lsls	r3, r3, #1
 800a806:	693a      	ldr	r2, [r7, #16]
 800a808:	8992      	ldrh	r2, [r2, #12]
 800a80a:	fbb3 f0f2 	udiv	r0, r3, r2
 800a80e:	fb00 f202 	mul.w	r2, r0, r2
 800a812:	1a9b      	subs	r3, r3, r2
 800a814:	440b      	add	r3, r1
 800a816:	4618      	mov	r0, r3
 800a818:	f7ff fc34 	bl	800a084 <ld_word>
 800a81c:	4603      	mov	r3, r0
 800a81e:	617b      	str	r3, [r7, #20]
			break;
 800a820:	e030      	b.n	800a884 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800a822:	693b      	ldr	r3, [r7, #16]
 800a824:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a826:	693b      	ldr	r3, [r7, #16]
 800a828:	899b      	ldrh	r3, [r3, #12]
 800a82a:	089b      	lsrs	r3, r3, #2
 800a82c:	b29b      	uxth	r3, r3
 800a82e:	4619      	mov	r1, r3
 800a830:	683b      	ldr	r3, [r7, #0]
 800a832:	fbb3 f3f1 	udiv	r3, r3, r1
 800a836:	4413      	add	r3, r2
 800a838:	4619      	mov	r1, r3
 800a83a:	6938      	ldr	r0, [r7, #16]
 800a83c:	f7ff fe96 	bl	800a56c <move_window>
 800a840:	4603      	mov	r3, r0
 800a842:	2b00      	cmp	r3, #0
 800a844:	d11d      	bne.n	800a882 <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800a846:	693b      	ldr	r3, [r7, #16]
 800a848:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800a84c:	683b      	ldr	r3, [r7, #0]
 800a84e:	009b      	lsls	r3, r3, #2
 800a850:	693a      	ldr	r2, [r7, #16]
 800a852:	8992      	ldrh	r2, [r2, #12]
 800a854:	fbb3 f0f2 	udiv	r0, r3, r2
 800a858:	fb00 f202 	mul.w	r2, r0, r2
 800a85c:	1a9b      	subs	r3, r3, r2
 800a85e:	440b      	add	r3, r1
 800a860:	4618      	mov	r0, r3
 800a862:	f7ff fc27 	bl	800a0b4 <ld_dword>
 800a866:	4603      	mov	r3, r0
 800a868:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800a86c:	617b      	str	r3, [r7, #20]
			break;
 800a86e:	e009      	b.n	800a884 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800a870:	2301      	movs	r3, #1
 800a872:	617b      	str	r3, [r7, #20]
 800a874:	e006      	b.n	800a884 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a876:	bf00      	nop
 800a878:	e004      	b.n	800a884 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a87a:	bf00      	nop
 800a87c:	e002      	b.n	800a884 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800a87e:	bf00      	nop
 800a880:	e000      	b.n	800a884 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800a882:	bf00      	nop
		}
	}

	return val;
 800a884:	697b      	ldr	r3, [r7, #20]
}
 800a886:	4618      	mov	r0, r3
 800a888:	3718      	adds	r7, #24
 800a88a:	46bd      	mov	sp, r7
 800a88c:	bd80      	pop	{r7, pc}

0800a88e <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800a88e:	b590      	push	{r4, r7, lr}
 800a890:	b089      	sub	sp, #36	; 0x24
 800a892:	af00      	add	r7, sp, #0
 800a894:	60f8      	str	r0, [r7, #12]
 800a896:	60b9      	str	r1, [r7, #8]
 800a898:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800a89a:	2302      	movs	r3, #2
 800a89c:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800a89e:	68bb      	ldr	r3, [r7, #8]
 800a8a0:	2b01      	cmp	r3, #1
 800a8a2:	f240 8102 	bls.w	800aaaa <put_fat+0x21c>
 800a8a6:	68fb      	ldr	r3, [r7, #12]
 800a8a8:	69db      	ldr	r3, [r3, #28]
 800a8aa:	68ba      	ldr	r2, [r7, #8]
 800a8ac:	429a      	cmp	r2, r3
 800a8ae:	f080 80fc 	bcs.w	800aaaa <put_fat+0x21c>
		switch (fs->fs_type) {
 800a8b2:	68fb      	ldr	r3, [r7, #12]
 800a8b4:	781b      	ldrb	r3, [r3, #0]
 800a8b6:	2b03      	cmp	r3, #3
 800a8b8:	f000 80b6 	beq.w	800aa28 <put_fat+0x19a>
 800a8bc:	2b03      	cmp	r3, #3
 800a8be:	f300 80fd 	bgt.w	800aabc <put_fat+0x22e>
 800a8c2:	2b01      	cmp	r3, #1
 800a8c4:	d003      	beq.n	800a8ce <put_fat+0x40>
 800a8c6:	2b02      	cmp	r3, #2
 800a8c8:	f000 8083 	beq.w	800a9d2 <put_fat+0x144>
 800a8cc:	e0f6      	b.n	800aabc <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800a8ce:	68bb      	ldr	r3, [r7, #8]
 800a8d0:	61bb      	str	r3, [r7, #24]
 800a8d2:	69bb      	ldr	r3, [r7, #24]
 800a8d4:	085b      	lsrs	r3, r3, #1
 800a8d6:	69ba      	ldr	r2, [r7, #24]
 800a8d8:	4413      	add	r3, r2
 800a8da:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800a8dc:	68fb      	ldr	r3, [r7, #12]
 800a8de:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	899b      	ldrh	r3, [r3, #12]
 800a8e4:	4619      	mov	r1, r3
 800a8e6:	69bb      	ldr	r3, [r7, #24]
 800a8e8:	fbb3 f3f1 	udiv	r3, r3, r1
 800a8ec:	4413      	add	r3, r2
 800a8ee:	4619      	mov	r1, r3
 800a8f0:	68f8      	ldr	r0, [r7, #12]
 800a8f2:	f7ff fe3b 	bl	800a56c <move_window>
 800a8f6:	4603      	mov	r3, r0
 800a8f8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a8fa:	7ffb      	ldrb	r3, [r7, #31]
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	f040 80d6 	bne.w	800aaae <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 800a902:	68fb      	ldr	r3, [r7, #12]
 800a904:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800a908:	69bb      	ldr	r3, [r7, #24]
 800a90a:	1c5a      	adds	r2, r3, #1
 800a90c:	61ba      	str	r2, [r7, #24]
 800a90e:	68fa      	ldr	r2, [r7, #12]
 800a910:	8992      	ldrh	r2, [r2, #12]
 800a912:	fbb3 f0f2 	udiv	r0, r3, r2
 800a916:	fb00 f202 	mul.w	r2, r0, r2
 800a91a:	1a9b      	subs	r3, r3, r2
 800a91c:	440b      	add	r3, r1
 800a91e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800a920:	68bb      	ldr	r3, [r7, #8]
 800a922:	f003 0301 	and.w	r3, r3, #1
 800a926:	2b00      	cmp	r3, #0
 800a928:	d00d      	beq.n	800a946 <put_fat+0xb8>
 800a92a:	697b      	ldr	r3, [r7, #20]
 800a92c:	781b      	ldrb	r3, [r3, #0]
 800a92e:	b25b      	sxtb	r3, r3
 800a930:	f003 030f 	and.w	r3, r3, #15
 800a934:	b25a      	sxtb	r2, r3
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	b2db      	uxtb	r3, r3
 800a93a:	011b      	lsls	r3, r3, #4
 800a93c:	b25b      	sxtb	r3, r3
 800a93e:	4313      	orrs	r3, r2
 800a940:	b25b      	sxtb	r3, r3
 800a942:	b2db      	uxtb	r3, r3
 800a944:	e001      	b.n	800a94a <put_fat+0xbc>
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	b2db      	uxtb	r3, r3
 800a94a:	697a      	ldr	r2, [r7, #20]
 800a94c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800a94e:	68fb      	ldr	r3, [r7, #12]
 800a950:	2201      	movs	r2, #1
 800a952:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800a954:	68fb      	ldr	r3, [r7, #12]
 800a956:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a958:	68fb      	ldr	r3, [r7, #12]
 800a95a:	899b      	ldrh	r3, [r3, #12]
 800a95c:	4619      	mov	r1, r3
 800a95e:	69bb      	ldr	r3, [r7, #24]
 800a960:	fbb3 f3f1 	udiv	r3, r3, r1
 800a964:	4413      	add	r3, r2
 800a966:	4619      	mov	r1, r3
 800a968:	68f8      	ldr	r0, [r7, #12]
 800a96a:	f7ff fdff 	bl	800a56c <move_window>
 800a96e:	4603      	mov	r3, r0
 800a970:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a972:	7ffb      	ldrb	r3, [r7, #31]
 800a974:	2b00      	cmp	r3, #0
 800a976:	f040 809c 	bne.w	800aab2 <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 800a97a:	68fb      	ldr	r3, [r7, #12]
 800a97c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	899b      	ldrh	r3, [r3, #12]
 800a984:	461a      	mov	r2, r3
 800a986:	69bb      	ldr	r3, [r7, #24]
 800a988:	fbb3 f0f2 	udiv	r0, r3, r2
 800a98c:	fb00 f202 	mul.w	r2, r0, r2
 800a990:	1a9b      	subs	r3, r3, r2
 800a992:	440b      	add	r3, r1
 800a994:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800a996:	68bb      	ldr	r3, [r7, #8]
 800a998:	f003 0301 	and.w	r3, r3, #1
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	d003      	beq.n	800a9a8 <put_fat+0x11a>
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	091b      	lsrs	r3, r3, #4
 800a9a4:	b2db      	uxtb	r3, r3
 800a9a6:	e00e      	b.n	800a9c6 <put_fat+0x138>
 800a9a8:	697b      	ldr	r3, [r7, #20]
 800a9aa:	781b      	ldrb	r3, [r3, #0]
 800a9ac:	b25b      	sxtb	r3, r3
 800a9ae:	f023 030f 	bic.w	r3, r3, #15
 800a9b2:	b25a      	sxtb	r2, r3
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	0a1b      	lsrs	r3, r3, #8
 800a9b8:	b25b      	sxtb	r3, r3
 800a9ba:	f003 030f 	and.w	r3, r3, #15
 800a9be:	b25b      	sxtb	r3, r3
 800a9c0:	4313      	orrs	r3, r2
 800a9c2:	b25b      	sxtb	r3, r3
 800a9c4:	b2db      	uxtb	r3, r3
 800a9c6:	697a      	ldr	r2, [r7, #20]
 800a9c8:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800a9ca:	68fb      	ldr	r3, [r7, #12]
 800a9cc:	2201      	movs	r2, #1
 800a9ce:	70da      	strb	r2, [r3, #3]
			break;
 800a9d0:	e074      	b.n	800aabc <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a9d6:	68fb      	ldr	r3, [r7, #12]
 800a9d8:	899b      	ldrh	r3, [r3, #12]
 800a9da:	085b      	lsrs	r3, r3, #1
 800a9dc:	b29b      	uxth	r3, r3
 800a9de:	4619      	mov	r1, r3
 800a9e0:	68bb      	ldr	r3, [r7, #8]
 800a9e2:	fbb3 f3f1 	udiv	r3, r3, r1
 800a9e6:	4413      	add	r3, r2
 800a9e8:	4619      	mov	r1, r3
 800a9ea:	68f8      	ldr	r0, [r7, #12]
 800a9ec:	f7ff fdbe 	bl	800a56c <move_window>
 800a9f0:	4603      	mov	r3, r0
 800a9f2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a9f4:	7ffb      	ldrb	r3, [r7, #31]
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	d15d      	bne.n	800aab6 <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800a9fa:	68fb      	ldr	r3, [r7, #12]
 800a9fc:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800aa00:	68bb      	ldr	r3, [r7, #8]
 800aa02:	005b      	lsls	r3, r3, #1
 800aa04:	68fa      	ldr	r2, [r7, #12]
 800aa06:	8992      	ldrh	r2, [r2, #12]
 800aa08:	fbb3 f0f2 	udiv	r0, r3, r2
 800aa0c:	fb00 f202 	mul.w	r2, r0, r2
 800aa10:	1a9b      	subs	r3, r3, r2
 800aa12:	440b      	add	r3, r1
 800aa14:	687a      	ldr	r2, [r7, #4]
 800aa16:	b292      	uxth	r2, r2
 800aa18:	4611      	mov	r1, r2
 800aa1a:	4618      	mov	r0, r3
 800aa1c:	f7ff fb6d 	bl	800a0fa <st_word>
			fs->wflag = 1;
 800aa20:	68fb      	ldr	r3, [r7, #12]
 800aa22:	2201      	movs	r2, #1
 800aa24:	70da      	strb	r2, [r3, #3]
			break;
 800aa26:	e049      	b.n	800aabc <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800aa28:	68fb      	ldr	r3, [r7, #12]
 800aa2a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800aa2c:	68fb      	ldr	r3, [r7, #12]
 800aa2e:	899b      	ldrh	r3, [r3, #12]
 800aa30:	089b      	lsrs	r3, r3, #2
 800aa32:	b29b      	uxth	r3, r3
 800aa34:	4619      	mov	r1, r3
 800aa36:	68bb      	ldr	r3, [r7, #8]
 800aa38:	fbb3 f3f1 	udiv	r3, r3, r1
 800aa3c:	4413      	add	r3, r2
 800aa3e:	4619      	mov	r1, r3
 800aa40:	68f8      	ldr	r0, [r7, #12]
 800aa42:	f7ff fd93 	bl	800a56c <move_window>
 800aa46:	4603      	mov	r3, r0
 800aa48:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800aa4a:	7ffb      	ldrb	r3, [r7, #31]
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	d134      	bne.n	800aaba <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800aa56:	68fb      	ldr	r3, [r7, #12]
 800aa58:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800aa5c:	68bb      	ldr	r3, [r7, #8]
 800aa5e:	009b      	lsls	r3, r3, #2
 800aa60:	68fa      	ldr	r2, [r7, #12]
 800aa62:	8992      	ldrh	r2, [r2, #12]
 800aa64:	fbb3 f0f2 	udiv	r0, r3, r2
 800aa68:	fb00 f202 	mul.w	r2, r0, r2
 800aa6c:	1a9b      	subs	r3, r3, r2
 800aa6e:	440b      	add	r3, r1
 800aa70:	4618      	mov	r0, r3
 800aa72:	f7ff fb1f 	bl	800a0b4 <ld_dword>
 800aa76:	4603      	mov	r3, r0
 800aa78:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800aa7c:	4323      	orrs	r3, r4
 800aa7e:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800aa80:	68fb      	ldr	r3, [r7, #12]
 800aa82:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800aa86:	68bb      	ldr	r3, [r7, #8]
 800aa88:	009b      	lsls	r3, r3, #2
 800aa8a:	68fa      	ldr	r2, [r7, #12]
 800aa8c:	8992      	ldrh	r2, [r2, #12]
 800aa8e:	fbb3 f0f2 	udiv	r0, r3, r2
 800aa92:	fb00 f202 	mul.w	r2, r0, r2
 800aa96:	1a9b      	subs	r3, r3, r2
 800aa98:	440b      	add	r3, r1
 800aa9a:	6879      	ldr	r1, [r7, #4]
 800aa9c:	4618      	mov	r0, r3
 800aa9e:	f7ff fb47 	bl	800a130 <st_dword>
			fs->wflag = 1;
 800aaa2:	68fb      	ldr	r3, [r7, #12]
 800aaa4:	2201      	movs	r2, #1
 800aaa6:	70da      	strb	r2, [r3, #3]
			break;
 800aaa8:	e008      	b.n	800aabc <put_fat+0x22e>
		}
	}
 800aaaa:	bf00      	nop
 800aaac:	e006      	b.n	800aabc <put_fat+0x22e>
			if (res != FR_OK) break;
 800aaae:	bf00      	nop
 800aab0:	e004      	b.n	800aabc <put_fat+0x22e>
			if (res != FR_OK) break;
 800aab2:	bf00      	nop
 800aab4:	e002      	b.n	800aabc <put_fat+0x22e>
			if (res != FR_OK) break;
 800aab6:	bf00      	nop
 800aab8:	e000      	b.n	800aabc <put_fat+0x22e>
			if (res != FR_OK) break;
 800aaba:	bf00      	nop
	return res;
 800aabc:	7ffb      	ldrb	r3, [r7, #31]
}
 800aabe:	4618      	mov	r0, r3
 800aac0:	3724      	adds	r7, #36	; 0x24
 800aac2:	46bd      	mov	sp, r7
 800aac4:	bd90      	pop	{r4, r7, pc}

0800aac6 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800aac6:	b580      	push	{r7, lr}
 800aac8:	b088      	sub	sp, #32
 800aaca:	af00      	add	r7, sp, #0
 800aacc:	60f8      	str	r0, [r7, #12]
 800aace:	60b9      	str	r1, [r7, #8]
 800aad0:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800aad2:	2300      	movs	r3, #0
 800aad4:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800aad6:	68fb      	ldr	r3, [r7, #12]
 800aad8:	681b      	ldr	r3, [r3, #0]
 800aada:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800aadc:	68bb      	ldr	r3, [r7, #8]
 800aade:	2b01      	cmp	r3, #1
 800aae0:	d904      	bls.n	800aaec <remove_chain+0x26>
 800aae2:	69bb      	ldr	r3, [r7, #24]
 800aae4:	69db      	ldr	r3, [r3, #28]
 800aae6:	68ba      	ldr	r2, [r7, #8]
 800aae8:	429a      	cmp	r2, r3
 800aaea:	d301      	bcc.n	800aaf0 <remove_chain+0x2a>
 800aaec:	2302      	movs	r3, #2
 800aaee:	e04b      	b.n	800ab88 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	d00c      	beq.n	800ab10 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800aaf6:	f04f 32ff 	mov.w	r2, #4294967295
 800aafa:	6879      	ldr	r1, [r7, #4]
 800aafc:	69b8      	ldr	r0, [r7, #24]
 800aafe:	f7ff fec6 	bl	800a88e <put_fat>
 800ab02:	4603      	mov	r3, r0
 800ab04:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800ab06:	7ffb      	ldrb	r3, [r7, #31]
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	d001      	beq.n	800ab10 <remove_chain+0x4a>
 800ab0c:	7ffb      	ldrb	r3, [r7, #31]
 800ab0e:	e03b      	b.n	800ab88 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800ab10:	68b9      	ldr	r1, [r7, #8]
 800ab12:	68f8      	ldr	r0, [r7, #12]
 800ab14:	f7ff fde7 	bl	800a6e6 <get_fat>
 800ab18:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800ab1a:	697b      	ldr	r3, [r7, #20]
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	d031      	beq.n	800ab84 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800ab20:	697b      	ldr	r3, [r7, #20]
 800ab22:	2b01      	cmp	r3, #1
 800ab24:	d101      	bne.n	800ab2a <remove_chain+0x64>
 800ab26:	2302      	movs	r3, #2
 800ab28:	e02e      	b.n	800ab88 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800ab2a:	697b      	ldr	r3, [r7, #20]
 800ab2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab30:	d101      	bne.n	800ab36 <remove_chain+0x70>
 800ab32:	2301      	movs	r3, #1
 800ab34:	e028      	b.n	800ab88 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800ab36:	2200      	movs	r2, #0
 800ab38:	68b9      	ldr	r1, [r7, #8]
 800ab3a:	69b8      	ldr	r0, [r7, #24]
 800ab3c:	f7ff fea7 	bl	800a88e <put_fat>
 800ab40:	4603      	mov	r3, r0
 800ab42:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800ab44:	7ffb      	ldrb	r3, [r7, #31]
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	d001      	beq.n	800ab4e <remove_chain+0x88>
 800ab4a:	7ffb      	ldrb	r3, [r7, #31]
 800ab4c:	e01c      	b.n	800ab88 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800ab4e:	69bb      	ldr	r3, [r7, #24]
 800ab50:	699a      	ldr	r2, [r3, #24]
 800ab52:	69bb      	ldr	r3, [r7, #24]
 800ab54:	69db      	ldr	r3, [r3, #28]
 800ab56:	3b02      	subs	r3, #2
 800ab58:	429a      	cmp	r2, r3
 800ab5a:	d20b      	bcs.n	800ab74 <remove_chain+0xae>
			fs->free_clst++;
 800ab5c:	69bb      	ldr	r3, [r7, #24]
 800ab5e:	699b      	ldr	r3, [r3, #24]
 800ab60:	1c5a      	adds	r2, r3, #1
 800ab62:	69bb      	ldr	r3, [r7, #24]
 800ab64:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 800ab66:	69bb      	ldr	r3, [r7, #24]
 800ab68:	791b      	ldrb	r3, [r3, #4]
 800ab6a:	f043 0301 	orr.w	r3, r3, #1
 800ab6e:	b2da      	uxtb	r2, r3
 800ab70:	69bb      	ldr	r3, [r7, #24]
 800ab72:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800ab74:	697b      	ldr	r3, [r7, #20]
 800ab76:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800ab78:	69bb      	ldr	r3, [r7, #24]
 800ab7a:	69db      	ldr	r3, [r3, #28]
 800ab7c:	68ba      	ldr	r2, [r7, #8]
 800ab7e:	429a      	cmp	r2, r3
 800ab80:	d3c6      	bcc.n	800ab10 <remove_chain+0x4a>
 800ab82:	e000      	b.n	800ab86 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800ab84:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800ab86:	2300      	movs	r3, #0
}
 800ab88:	4618      	mov	r0, r3
 800ab8a:	3720      	adds	r7, #32
 800ab8c:	46bd      	mov	sp, r7
 800ab8e:	bd80      	pop	{r7, pc}

0800ab90 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800ab90:	b580      	push	{r7, lr}
 800ab92:	b088      	sub	sp, #32
 800ab94:	af00      	add	r7, sp, #0
 800ab96:	6078      	str	r0, [r7, #4]
 800ab98:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	681b      	ldr	r3, [r3, #0]
 800ab9e:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800aba0:	683b      	ldr	r3, [r7, #0]
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d10d      	bne.n	800abc2 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800aba6:	693b      	ldr	r3, [r7, #16]
 800aba8:	695b      	ldr	r3, [r3, #20]
 800abaa:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800abac:	69bb      	ldr	r3, [r7, #24]
 800abae:	2b00      	cmp	r3, #0
 800abb0:	d004      	beq.n	800abbc <create_chain+0x2c>
 800abb2:	693b      	ldr	r3, [r7, #16]
 800abb4:	69db      	ldr	r3, [r3, #28]
 800abb6:	69ba      	ldr	r2, [r7, #24]
 800abb8:	429a      	cmp	r2, r3
 800abba:	d31b      	bcc.n	800abf4 <create_chain+0x64>
 800abbc:	2301      	movs	r3, #1
 800abbe:	61bb      	str	r3, [r7, #24]
 800abc0:	e018      	b.n	800abf4 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800abc2:	6839      	ldr	r1, [r7, #0]
 800abc4:	6878      	ldr	r0, [r7, #4]
 800abc6:	f7ff fd8e 	bl	800a6e6 <get_fat>
 800abca:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800abcc:	68fb      	ldr	r3, [r7, #12]
 800abce:	2b01      	cmp	r3, #1
 800abd0:	d801      	bhi.n	800abd6 <create_chain+0x46>
 800abd2:	2301      	movs	r3, #1
 800abd4:	e070      	b.n	800acb8 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800abd6:	68fb      	ldr	r3, [r7, #12]
 800abd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800abdc:	d101      	bne.n	800abe2 <create_chain+0x52>
 800abde:	68fb      	ldr	r3, [r7, #12]
 800abe0:	e06a      	b.n	800acb8 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800abe2:	693b      	ldr	r3, [r7, #16]
 800abe4:	69db      	ldr	r3, [r3, #28]
 800abe6:	68fa      	ldr	r2, [r7, #12]
 800abe8:	429a      	cmp	r2, r3
 800abea:	d201      	bcs.n	800abf0 <create_chain+0x60>
 800abec:	68fb      	ldr	r3, [r7, #12]
 800abee:	e063      	b.n	800acb8 <create_chain+0x128>
		scl = clst;
 800abf0:	683b      	ldr	r3, [r7, #0]
 800abf2:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800abf4:	69bb      	ldr	r3, [r7, #24]
 800abf6:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800abf8:	69fb      	ldr	r3, [r7, #28]
 800abfa:	3301      	adds	r3, #1
 800abfc:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800abfe:	693b      	ldr	r3, [r7, #16]
 800ac00:	69db      	ldr	r3, [r3, #28]
 800ac02:	69fa      	ldr	r2, [r7, #28]
 800ac04:	429a      	cmp	r2, r3
 800ac06:	d307      	bcc.n	800ac18 <create_chain+0x88>
				ncl = 2;
 800ac08:	2302      	movs	r3, #2
 800ac0a:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800ac0c:	69fa      	ldr	r2, [r7, #28]
 800ac0e:	69bb      	ldr	r3, [r7, #24]
 800ac10:	429a      	cmp	r2, r3
 800ac12:	d901      	bls.n	800ac18 <create_chain+0x88>
 800ac14:	2300      	movs	r3, #0
 800ac16:	e04f      	b.n	800acb8 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800ac18:	69f9      	ldr	r1, [r7, #28]
 800ac1a:	6878      	ldr	r0, [r7, #4]
 800ac1c:	f7ff fd63 	bl	800a6e6 <get_fat>
 800ac20:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800ac22:	68fb      	ldr	r3, [r7, #12]
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	d00e      	beq.n	800ac46 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800ac28:	68fb      	ldr	r3, [r7, #12]
 800ac2a:	2b01      	cmp	r3, #1
 800ac2c:	d003      	beq.n	800ac36 <create_chain+0xa6>
 800ac2e:	68fb      	ldr	r3, [r7, #12]
 800ac30:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac34:	d101      	bne.n	800ac3a <create_chain+0xaa>
 800ac36:	68fb      	ldr	r3, [r7, #12]
 800ac38:	e03e      	b.n	800acb8 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800ac3a:	69fa      	ldr	r2, [r7, #28]
 800ac3c:	69bb      	ldr	r3, [r7, #24]
 800ac3e:	429a      	cmp	r2, r3
 800ac40:	d1da      	bne.n	800abf8 <create_chain+0x68>
 800ac42:	2300      	movs	r3, #0
 800ac44:	e038      	b.n	800acb8 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800ac46:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800ac48:	f04f 32ff 	mov.w	r2, #4294967295
 800ac4c:	69f9      	ldr	r1, [r7, #28]
 800ac4e:	6938      	ldr	r0, [r7, #16]
 800ac50:	f7ff fe1d 	bl	800a88e <put_fat>
 800ac54:	4603      	mov	r3, r0
 800ac56:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800ac58:	7dfb      	ldrb	r3, [r7, #23]
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	d109      	bne.n	800ac72 <create_chain+0xe2>
 800ac5e:	683b      	ldr	r3, [r7, #0]
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	d006      	beq.n	800ac72 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800ac64:	69fa      	ldr	r2, [r7, #28]
 800ac66:	6839      	ldr	r1, [r7, #0]
 800ac68:	6938      	ldr	r0, [r7, #16]
 800ac6a:	f7ff fe10 	bl	800a88e <put_fat>
 800ac6e:	4603      	mov	r3, r0
 800ac70:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800ac72:	7dfb      	ldrb	r3, [r7, #23]
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	d116      	bne.n	800aca6 <create_chain+0x116>
		fs->last_clst = ncl;
 800ac78:	693b      	ldr	r3, [r7, #16]
 800ac7a:	69fa      	ldr	r2, [r7, #28]
 800ac7c:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800ac7e:	693b      	ldr	r3, [r7, #16]
 800ac80:	699a      	ldr	r2, [r3, #24]
 800ac82:	693b      	ldr	r3, [r7, #16]
 800ac84:	69db      	ldr	r3, [r3, #28]
 800ac86:	3b02      	subs	r3, #2
 800ac88:	429a      	cmp	r2, r3
 800ac8a:	d804      	bhi.n	800ac96 <create_chain+0x106>
 800ac8c:	693b      	ldr	r3, [r7, #16]
 800ac8e:	699b      	ldr	r3, [r3, #24]
 800ac90:	1e5a      	subs	r2, r3, #1
 800ac92:	693b      	ldr	r3, [r7, #16]
 800ac94:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 800ac96:	693b      	ldr	r3, [r7, #16]
 800ac98:	791b      	ldrb	r3, [r3, #4]
 800ac9a:	f043 0301 	orr.w	r3, r3, #1
 800ac9e:	b2da      	uxtb	r2, r3
 800aca0:	693b      	ldr	r3, [r7, #16]
 800aca2:	711a      	strb	r2, [r3, #4]
 800aca4:	e007      	b.n	800acb6 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800aca6:	7dfb      	ldrb	r3, [r7, #23]
 800aca8:	2b01      	cmp	r3, #1
 800acaa:	d102      	bne.n	800acb2 <create_chain+0x122>
 800acac:	f04f 33ff 	mov.w	r3, #4294967295
 800acb0:	e000      	b.n	800acb4 <create_chain+0x124>
 800acb2:	2301      	movs	r3, #1
 800acb4:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800acb6:	69fb      	ldr	r3, [r7, #28]
}
 800acb8:	4618      	mov	r0, r3
 800acba:	3720      	adds	r7, #32
 800acbc:	46bd      	mov	sp, r7
 800acbe:	bd80      	pop	{r7, pc}

0800acc0 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800acc0:	b480      	push	{r7}
 800acc2:	b087      	sub	sp, #28
 800acc4:	af00      	add	r7, sp, #0
 800acc6:	6078      	str	r0, [r7, #4]
 800acc8:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	681b      	ldr	r3, [r3, #0]
 800acce:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800acd4:	3304      	adds	r3, #4
 800acd6:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800acd8:	68fb      	ldr	r3, [r7, #12]
 800acda:	899b      	ldrh	r3, [r3, #12]
 800acdc:	461a      	mov	r2, r3
 800acde:	683b      	ldr	r3, [r7, #0]
 800ace0:	fbb3 f3f2 	udiv	r3, r3, r2
 800ace4:	68fa      	ldr	r2, [r7, #12]
 800ace6:	8952      	ldrh	r2, [r2, #10]
 800ace8:	fbb3 f3f2 	udiv	r3, r3, r2
 800acec:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800acee:	693b      	ldr	r3, [r7, #16]
 800acf0:	1d1a      	adds	r2, r3, #4
 800acf2:	613a      	str	r2, [r7, #16]
 800acf4:	681b      	ldr	r3, [r3, #0]
 800acf6:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800acf8:	68bb      	ldr	r3, [r7, #8]
 800acfa:	2b00      	cmp	r3, #0
 800acfc:	d101      	bne.n	800ad02 <clmt_clust+0x42>
 800acfe:	2300      	movs	r3, #0
 800ad00:	e010      	b.n	800ad24 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 800ad02:	697a      	ldr	r2, [r7, #20]
 800ad04:	68bb      	ldr	r3, [r7, #8]
 800ad06:	429a      	cmp	r2, r3
 800ad08:	d307      	bcc.n	800ad1a <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 800ad0a:	697a      	ldr	r2, [r7, #20]
 800ad0c:	68bb      	ldr	r3, [r7, #8]
 800ad0e:	1ad3      	subs	r3, r2, r3
 800ad10:	617b      	str	r3, [r7, #20]
 800ad12:	693b      	ldr	r3, [r7, #16]
 800ad14:	3304      	adds	r3, #4
 800ad16:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800ad18:	e7e9      	b.n	800acee <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 800ad1a:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800ad1c:	693b      	ldr	r3, [r7, #16]
 800ad1e:	681a      	ldr	r2, [r3, #0]
 800ad20:	697b      	ldr	r3, [r7, #20]
 800ad22:	4413      	add	r3, r2
}
 800ad24:	4618      	mov	r0, r3
 800ad26:	371c      	adds	r7, #28
 800ad28:	46bd      	mov	sp, r7
 800ad2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad2e:	4770      	bx	lr

0800ad30 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800ad30:	b580      	push	{r7, lr}
 800ad32:	b086      	sub	sp, #24
 800ad34:	af00      	add	r7, sp, #0
 800ad36:	6078      	str	r0, [r7, #4]
 800ad38:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	681b      	ldr	r3, [r3, #0]
 800ad3e:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800ad40:	683b      	ldr	r3, [r7, #0]
 800ad42:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ad46:	d204      	bcs.n	800ad52 <dir_sdi+0x22>
 800ad48:	683b      	ldr	r3, [r7, #0]
 800ad4a:	f003 031f 	and.w	r3, r3, #31
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	d001      	beq.n	800ad56 <dir_sdi+0x26>
		return FR_INT_ERR;
 800ad52:	2302      	movs	r3, #2
 800ad54:	e071      	b.n	800ae3a <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	683a      	ldr	r2, [r7, #0]
 800ad5a:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	689b      	ldr	r3, [r3, #8]
 800ad60:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800ad62:	697b      	ldr	r3, [r7, #20]
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	d106      	bne.n	800ad76 <dir_sdi+0x46>
 800ad68:	693b      	ldr	r3, [r7, #16]
 800ad6a:	781b      	ldrb	r3, [r3, #0]
 800ad6c:	2b02      	cmp	r3, #2
 800ad6e:	d902      	bls.n	800ad76 <dir_sdi+0x46>
		clst = fs->dirbase;
 800ad70:	693b      	ldr	r3, [r7, #16]
 800ad72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad74:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800ad76:	697b      	ldr	r3, [r7, #20]
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	d10c      	bne.n	800ad96 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800ad7c:	683b      	ldr	r3, [r7, #0]
 800ad7e:	095b      	lsrs	r3, r3, #5
 800ad80:	693a      	ldr	r2, [r7, #16]
 800ad82:	8912      	ldrh	r2, [r2, #8]
 800ad84:	4293      	cmp	r3, r2
 800ad86:	d301      	bcc.n	800ad8c <dir_sdi+0x5c>
 800ad88:	2302      	movs	r3, #2
 800ad8a:	e056      	b.n	800ae3a <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 800ad8c:	693b      	ldr	r3, [r7, #16]
 800ad8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	61da      	str	r2, [r3, #28]
 800ad94:	e02d      	b.n	800adf2 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800ad96:	693b      	ldr	r3, [r7, #16]
 800ad98:	895b      	ldrh	r3, [r3, #10]
 800ad9a:	461a      	mov	r2, r3
 800ad9c:	693b      	ldr	r3, [r7, #16]
 800ad9e:	899b      	ldrh	r3, [r3, #12]
 800ada0:	fb02 f303 	mul.w	r3, r2, r3
 800ada4:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800ada6:	e019      	b.n	800addc <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	6979      	ldr	r1, [r7, #20]
 800adac:	4618      	mov	r0, r3
 800adae:	f7ff fc9a 	bl	800a6e6 <get_fat>
 800adb2:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800adb4:	697b      	ldr	r3, [r7, #20]
 800adb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800adba:	d101      	bne.n	800adc0 <dir_sdi+0x90>
 800adbc:	2301      	movs	r3, #1
 800adbe:	e03c      	b.n	800ae3a <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800adc0:	697b      	ldr	r3, [r7, #20]
 800adc2:	2b01      	cmp	r3, #1
 800adc4:	d904      	bls.n	800add0 <dir_sdi+0xa0>
 800adc6:	693b      	ldr	r3, [r7, #16]
 800adc8:	69db      	ldr	r3, [r3, #28]
 800adca:	697a      	ldr	r2, [r7, #20]
 800adcc:	429a      	cmp	r2, r3
 800adce:	d301      	bcc.n	800add4 <dir_sdi+0xa4>
 800add0:	2302      	movs	r3, #2
 800add2:	e032      	b.n	800ae3a <dir_sdi+0x10a>
			ofs -= csz;
 800add4:	683a      	ldr	r2, [r7, #0]
 800add6:	68fb      	ldr	r3, [r7, #12]
 800add8:	1ad3      	subs	r3, r2, r3
 800adda:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800addc:	683a      	ldr	r2, [r7, #0]
 800adde:	68fb      	ldr	r3, [r7, #12]
 800ade0:	429a      	cmp	r2, r3
 800ade2:	d2e1      	bcs.n	800ada8 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 800ade4:	6979      	ldr	r1, [r7, #20]
 800ade6:	6938      	ldr	r0, [r7, #16]
 800ade8:	f7ff fc5e 	bl	800a6a8 <clust2sect>
 800adec:	4602      	mov	r2, r0
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	697a      	ldr	r2, [r7, #20]
 800adf6:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	69db      	ldr	r3, [r3, #28]
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	d101      	bne.n	800ae04 <dir_sdi+0xd4>
 800ae00:	2302      	movs	r3, #2
 800ae02:	e01a      	b.n	800ae3a <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	69da      	ldr	r2, [r3, #28]
 800ae08:	693b      	ldr	r3, [r7, #16]
 800ae0a:	899b      	ldrh	r3, [r3, #12]
 800ae0c:	4619      	mov	r1, r3
 800ae0e:	683b      	ldr	r3, [r7, #0]
 800ae10:	fbb3 f3f1 	udiv	r3, r3, r1
 800ae14:	441a      	add	r2, r3
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800ae1a:	693b      	ldr	r3, [r7, #16]
 800ae1c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800ae20:	693b      	ldr	r3, [r7, #16]
 800ae22:	899b      	ldrh	r3, [r3, #12]
 800ae24:	461a      	mov	r2, r3
 800ae26:	683b      	ldr	r3, [r7, #0]
 800ae28:	fbb3 f0f2 	udiv	r0, r3, r2
 800ae2c:	fb00 f202 	mul.w	r2, r0, r2
 800ae30:	1a9b      	subs	r3, r3, r2
 800ae32:	18ca      	adds	r2, r1, r3
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800ae38:	2300      	movs	r3, #0
}
 800ae3a:	4618      	mov	r0, r3
 800ae3c:	3718      	adds	r7, #24
 800ae3e:	46bd      	mov	sp, r7
 800ae40:	bd80      	pop	{r7, pc}

0800ae42 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800ae42:	b580      	push	{r7, lr}
 800ae44:	b086      	sub	sp, #24
 800ae46:	af00      	add	r7, sp, #0
 800ae48:	6078      	str	r0, [r7, #4]
 800ae4a:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	695b      	ldr	r3, [r3, #20]
 800ae56:	3320      	adds	r3, #32
 800ae58:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	69db      	ldr	r3, [r3, #28]
 800ae5e:	2b00      	cmp	r3, #0
 800ae60:	d003      	beq.n	800ae6a <dir_next+0x28>
 800ae62:	68bb      	ldr	r3, [r7, #8]
 800ae64:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ae68:	d301      	bcc.n	800ae6e <dir_next+0x2c>
 800ae6a:	2304      	movs	r3, #4
 800ae6c:	e0bb      	b.n	800afe6 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800ae6e:	68fb      	ldr	r3, [r7, #12]
 800ae70:	899b      	ldrh	r3, [r3, #12]
 800ae72:	461a      	mov	r2, r3
 800ae74:	68bb      	ldr	r3, [r7, #8]
 800ae76:	fbb3 f1f2 	udiv	r1, r3, r2
 800ae7a:	fb01 f202 	mul.w	r2, r1, r2
 800ae7e:	1a9b      	subs	r3, r3, r2
 800ae80:	2b00      	cmp	r3, #0
 800ae82:	f040 809d 	bne.w	800afc0 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	69db      	ldr	r3, [r3, #28]
 800ae8a:	1c5a      	adds	r2, r3, #1
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	699b      	ldr	r3, [r3, #24]
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	d10b      	bne.n	800aeb0 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800ae98:	68bb      	ldr	r3, [r7, #8]
 800ae9a:	095b      	lsrs	r3, r3, #5
 800ae9c:	68fa      	ldr	r2, [r7, #12]
 800ae9e:	8912      	ldrh	r2, [r2, #8]
 800aea0:	4293      	cmp	r3, r2
 800aea2:	f0c0 808d 	bcc.w	800afc0 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	2200      	movs	r2, #0
 800aeaa:	61da      	str	r2, [r3, #28]
 800aeac:	2304      	movs	r3, #4
 800aeae:	e09a      	b.n	800afe6 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800aeb0:	68fb      	ldr	r3, [r7, #12]
 800aeb2:	899b      	ldrh	r3, [r3, #12]
 800aeb4:	461a      	mov	r2, r3
 800aeb6:	68bb      	ldr	r3, [r7, #8]
 800aeb8:	fbb3 f3f2 	udiv	r3, r3, r2
 800aebc:	68fa      	ldr	r2, [r7, #12]
 800aebe:	8952      	ldrh	r2, [r2, #10]
 800aec0:	3a01      	subs	r2, #1
 800aec2:	4013      	ands	r3, r2
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	d17b      	bne.n	800afc0 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800aec8:	687a      	ldr	r2, [r7, #4]
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	699b      	ldr	r3, [r3, #24]
 800aece:	4619      	mov	r1, r3
 800aed0:	4610      	mov	r0, r2
 800aed2:	f7ff fc08 	bl	800a6e6 <get_fat>
 800aed6:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800aed8:	697b      	ldr	r3, [r7, #20]
 800aeda:	2b01      	cmp	r3, #1
 800aedc:	d801      	bhi.n	800aee2 <dir_next+0xa0>
 800aede:	2302      	movs	r3, #2
 800aee0:	e081      	b.n	800afe6 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800aee2:	697b      	ldr	r3, [r7, #20]
 800aee4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aee8:	d101      	bne.n	800aeee <dir_next+0xac>
 800aeea:	2301      	movs	r3, #1
 800aeec:	e07b      	b.n	800afe6 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800aeee:	68fb      	ldr	r3, [r7, #12]
 800aef0:	69db      	ldr	r3, [r3, #28]
 800aef2:	697a      	ldr	r2, [r7, #20]
 800aef4:	429a      	cmp	r2, r3
 800aef6:	d359      	bcc.n	800afac <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800aef8:	683b      	ldr	r3, [r7, #0]
 800aefa:	2b00      	cmp	r3, #0
 800aefc:	d104      	bne.n	800af08 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	2200      	movs	r2, #0
 800af02:	61da      	str	r2, [r3, #28]
 800af04:	2304      	movs	r3, #4
 800af06:	e06e      	b.n	800afe6 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800af08:	687a      	ldr	r2, [r7, #4]
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	699b      	ldr	r3, [r3, #24]
 800af0e:	4619      	mov	r1, r3
 800af10:	4610      	mov	r0, r2
 800af12:	f7ff fe3d 	bl	800ab90 <create_chain>
 800af16:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800af18:	697b      	ldr	r3, [r7, #20]
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	d101      	bne.n	800af22 <dir_next+0xe0>
 800af1e:	2307      	movs	r3, #7
 800af20:	e061      	b.n	800afe6 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800af22:	697b      	ldr	r3, [r7, #20]
 800af24:	2b01      	cmp	r3, #1
 800af26:	d101      	bne.n	800af2c <dir_next+0xea>
 800af28:	2302      	movs	r3, #2
 800af2a:	e05c      	b.n	800afe6 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800af2c:	697b      	ldr	r3, [r7, #20]
 800af2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af32:	d101      	bne.n	800af38 <dir_next+0xf6>
 800af34:	2301      	movs	r3, #1
 800af36:	e056      	b.n	800afe6 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800af38:	68f8      	ldr	r0, [r7, #12]
 800af3a:	f7ff fad3 	bl	800a4e4 <sync_window>
 800af3e:	4603      	mov	r3, r0
 800af40:	2b00      	cmp	r3, #0
 800af42:	d001      	beq.n	800af48 <dir_next+0x106>
 800af44:	2301      	movs	r3, #1
 800af46:	e04e      	b.n	800afe6 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800af48:	68fb      	ldr	r3, [r7, #12]
 800af4a:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800af4e:	68fb      	ldr	r3, [r7, #12]
 800af50:	899b      	ldrh	r3, [r3, #12]
 800af52:	461a      	mov	r2, r3
 800af54:	2100      	movs	r1, #0
 800af56:	f7ff f938 	bl	800a1ca <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800af5a:	2300      	movs	r3, #0
 800af5c:	613b      	str	r3, [r7, #16]
 800af5e:	6979      	ldr	r1, [r7, #20]
 800af60:	68f8      	ldr	r0, [r7, #12]
 800af62:	f7ff fba1 	bl	800a6a8 <clust2sect>
 800af66:	4602      	mov	r2, r0
 800af68:	68fb      	ldr	r3, [r7, #12]
 800af6a:	635a      	str	r2, [r3, #52]	; 0x34
 800af6c:	e012      	b.n	800af94 <dir_next+0x152>
						fs->wflag = 1;
 800af6e:	68fb      	ldr	r3, [r7, #12]
 800af70:	2201      	movs	r2, #1
 800af72:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800af74:	68f8      	ldr	r0, [r7, #12]
 800af76:	f7ff fab5 	bl	800a4e4 <sync_window>
 800af7a:	4603      	mov	r3, r0
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	d001      	beq.n	800af84 <dir_next+0x142>
 800af80:	2301      	movs	r3, #1
 800af82:	e030      	b.n	800afe6 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800af84:	693b      	ldr	r3, [r7, #16]
 800af86:	3301      	adds	r3, #1
 800af88:	613b      	str	r3, [r7, #16]
 800af8a:	68fb      	ldr	r3, [r7, #12]
 800af8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800af8e:	1c5a      	adds	r2, r3, #1
 800af90:	68fb      	ldr	r3, [r7, #12]
 800af92:	635a      	str	r2, [r3, #52]	; 0x34
 800af94:	68fb      	ldr	r3, [r7, #12]
 800af96:	895b      	ldrh	r3, [r3, #10]
 800af98:	461a      	mov	r2, r3
 800af9a:	693b      	ldr	r3, [r7, #16]
 800af9c:	4293      	cmp	r3, r2
 800af9e:	d3e6      	bcc.n	800af6e <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800afa0:	68fb      	ldr	r3, [r7, #12]
 800afa2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800afa4:	693b      	ldr	r3, [r7, #16]
 800afa6:	1ad2      	subs	r2, r2, r3
 800afa8:	68fb      	ldr	r3, [r7, #12]
 800afaa:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	697a      	ldr	r2, [r7, #20]
 800afb0:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800afb2:	6979      	ldr	r1, [r7, #20]
 800afb4:	68f8      	ldr	r0, [r7, #12]
 800afb6:	f7ff fb77 	bl	800a6a8 <clust2sect>
 800afba:	4602      	mov	r2, r0
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	68ba      	ldr	r2, [r7, #8]
 800afc4:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800afc6:	68fb      	ldr	r3, [r7, #12]
 800afc8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800afcc:	68fb      	ldr	r3, [r7, #12]
 800afce:	899b      	ldrh	r3, [r3, #12]
 800afd0:	461a      	mov	r2, r3
 800afd2:	68bb      	ldr	r3, [r7, #8]
 800afd4:	fbb3 f0f2 	udiv	r0, r3, r2
 800afd8:	fb00 f202 	mul.w	r2, r0, r2
 800afdc:	1a9b      	subs	r3, r3, r2
 800afde:	18ca      	adds	r2, r1, r3
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800afe4:	2300      	movs	r3, #0
}
 800afe6:	4618      	mov	r0, r3
 800afe8:	3718      	adds	r7, #24
 800afea:	46bd      	mov	sp, r7
 800afec:	bd80      	pop	{r7, pc}

0800afee <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800afee:	b580      	push	{r7, lr}
 800aff0:	b086      	sub	sp, #24
 800aff2:	af00      	add	r7, sp, #0
 800aff4:	6078      	str	r0, [r7, #4]
 800aff6:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	681b      	ldr	r3, [r3, #0]
 800affc:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800affe:	2100      	movs	r1, #0
 800b000:	6878      	ldr	r0, [r7, #4]
 800b002:	f7ff fe95 	bl	800ad30 <dir_sdi>
 800b006:	4603      	mov	r3, r0
 800b008:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800b00a:	7dfb      	ldrb	r3, [r7, #23]
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	d12b      	bne.n	800b068 <dir_alloc+0x7a>
		n = 0;
 800b010:	2300      	movs	r3, #0
 800b012:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	69db      	ldr	r3, [r3, #28]
 800b018:	4619      	mov	r1, r3
 800b01a:	68f8      	ldr	r0, [r7, #12]
 800b01c:	f7ff faa6 	bl	800a56c <move_window>
 800b020:	4603      	mov	r3, r0
 800b022:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800b024:	7dfb      	ldrb	r3, [r7, #23]
 800b026:	2b00      	cmp	r3, #0
 800b028:	d11d      	bne.n	800b066 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	6a1b      	ldr	r3, [r3, #32]
 800b02e:	781b      	ldrb	r3, [r3, #0]
 800b030:	2be5      	cmp	r3, #229	; 0xe5
 800b032:	d004      	beq.n	800b03e <dir_alloc+0x50>
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	6a1b      	ldr	r3, [r3, #32]
 800b038:	781b      	ldrb	r3, [r3, #0]
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	d107      	bne.n	800b04e <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800b03e:	693b      	ldr	r3, [r7, #16]
 800b040:	3301      	adds	r3, #1
 800b042:	613b      	str	r3, [r7, #16]
 800b044:	693a      	ldr	r2, [r7, #16]
 800b046:	683b      	ldr	r3, [r7, #0]
 800b048:	429a      	cmp	r2, r3
 800b04a:	d102      	bne.n	800b052 <dir_alloc+0x64>
 800b04c:	e00c      	b.n	800b068 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800b04e:	2300      	movs	r3, #0
 800b050:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800b052:	2101      	movs	r1, #1
 800b054:	6878      	ldr	r0, [r7, #4]
 800b056:	f7ff fef4 	bl	800ae42 <dir_next>
 800b05a:	4603      	mov	r3, r0
 800b05c:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800b05e:	7dfb      	ldrb	r3, [r7, #23]
 800b060:	2b00      	cmp	r3, #0
 800b062:	d0d7      	beq.n	800b014 <dir_alloc+0x26>
 800b064:	e000      	b.n	800b068 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800b066:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800b068:	7dfb      	ldrb	r3, [r7, #23]
 800b06a:	2b04      	cmp	r3, #4
 800b06c:	d101      	bne.n	800b072 <dir_alloc+0x84>
 800b06e:	2307      	movs	r3, #7
 800b070:	75fb      	strb	r3, [r7, #23]
	return res;
 800b072:	7dfb      	ldrb	r3, [r7, #23]
}
 800b074:	4618      	mov	r0, r3
 800b076:	3718      	adds	r7, #24
 800b078:	46bd      	mov	sp, r7
 800b07a:	bd80      	pop	{r7, pc}

0800b07c <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800b07c:	b580      	push	{r7, lr}
 800b07e:	b084      	sub	sp, #16
 800b080:	af00      	add	r7, sp, #0
 800b082:	6078      	str	r0, [r7, #4]
 800b084:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800b086:	683b      	ldr	r3, [r7, #0]
 800b088:	331a      	adds	r3, #26
 800b08a:	4618      	mov	r0, r3
 800b08c:	f7fe fffa 	bl	800a084 <ld_word>
 800b090:	4603      	mov	r3, r0
 800b092:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	781b      	ldrb	r3, [r3, #0]
 800b098:	2b03      	cmp	r3, #3
 800b09a:	d109      	bne.n	800b0b0 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800b09c:	683b      	ldr	r3, [r7, #0]
 800b09e:	3314      	adds	r3, #20
 800b0a0:	4618      	mov	r0, r3
 800b0a2:	f7fe ffef 	bl	800a084 <ld_word>
 800b0a6:	4603      	mov	r3, r0
 800b0a8:	041b      	lsls	r3, r3, #16
 800b0aa:	68fa      	ldr	r2, [r7, #12]
 800b0ac:	4313      	orrs	r3, r2
 800b0ae:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800b0b0:	68fb      	ldr	r3, [r7, #12]
}
 800b0b2:	4618      	mov	r0, r3
 800b0b4:	3710      	adds	r7, #16
 800b0b6:	46bd      	mov	sp, r7
 800b0b8:	bd80      	pop	{r7, pc}

0800b0ba <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800b0ba:	b580      	push	{r7, lr}
 800b0bc:	b084      	sub	sp, #16
 800b0be:	af00      	add	r7, sp, #0
 800b0c0:	60f8      	str	r0, [r7, #12]
 800b0c2:	60b9      	str	r1, [r7, #8]
 800b0c4:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800b0c6:	68bb      	ldr	r3, [r7, #8]
 800b0c8:	331a      	adds	r3, #26
 800b0ca:	687a      	ldr	r2, [r7, #4]
 800b0cc:	b292      	uxth	r2, r2
 800b0ce:	4611      	mov	r1, r2
 800b0d0:	4618      	mov	r0, r3
 800b0d2:	f7ff f812 	bl	800a0fa <st_word>
	if (fs->fs_type == FS_FAT32) {
 800b0d6:	68fb      	ldr	r3, [r7, #12]
 800b0d8:	781b      	ldrb	r3, [r3, #0]
 800b0da:	2b03      	cmp	r3, #3
 800b0dc:	d109      	bne.n	800b0f2 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800b0de:	68bb      	ldr	r3, [r7, #8]
 800b0e0:	f103 0214 	add.w	r2, r3, #20
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	0c1b      	lsrs	r3, r3, #16
 800b0e8:	b29b      	uxth	r3, r3
 800b0ea:	4619      	mov	r1, r3
 800b0ec:	4610      	mov	r0, r2
 800b0ee:	f7ff f804 	bl	800a0fa <st_word>
	}
}
 800b0f2:	bf00      	nop
 800b0f4:	3710      	adds	r7, #16
 800b0f6:	46bd      	mov	sp, r7
 800b0f8:	bd80      	pop	{r7, pc}
	...

0800b0fc <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800b0fc:	b590      	push	{r4, r7, lr}
 800b0fe:	b087      	sub	sp, #28
 800b100:	af00      	add	r7, sp, #0
 800b102:	6078      	str	r0, [r7, #4]
 800b104:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800b106:	683b      	ldr	r3, [r7, #0]
 800b108:	331a      	adds	r3, #26
 800b10a:	4618      	mov	r0, r3
 800b10c:	f7fe ffba 	bl	800a084 <ld_word>
 800b110:	4603      	mov	r3, r0
 800b112:	2b00      	cmp	r3, #0
 800b114:	d001      	beq.n	800b11a <cmp_lfn+0x1e>
 800b116:	2300      	movs	r3, #0
 800b118:	e059      	b.n	800b1ce <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800b11a:	683b      	ldr	r3, [r7, #0]
 800b11c:	781b      	ldrb	r3, [r3, #0]
 800b11e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b122:	1e5a      	subs	r2, r3, #1
 800b124:	4613      	mov	r3, r2
 800b126:	005b      	lsls	r3, r3, #1
 800b128:	4413      	add	r3, r2
 800b12a:	009b      	lsls	r3, r3, #2
 800b12c:	4413      	add	r3, r2
 800b12e:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800b130:	2301      	movs	r3, #1
 800b132:	81fb      	strh	r3, [r7, #14]
 800b134:	2300      	movs	r3, #0
 800b136:	613b      	str	r3, [r7, #16]
 800b138:	e033      	b.n	800b1a2 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800b13a:	4a27      	ldr	r2, [pc, #156]	; (800b1d8 <cmp_lfn+0xdc>)
 800b13c:	693b      	ldr	r3, [r7, #16]
 800b13e:	4413      	add	r3, r2
 800b140:	781b      	ldrb	r3, [r3, #0]
 800b142:	461a      	mov	r2, r3
 800b144:	683b      	ldr	r3, [r7, #0]
 800b146:	4413      	add	r3, r2
 800b148:	4618      	mov	r0, r3
 800b14a:	f7fe ff9b 	bl	800a084 <ld_word>
 800b14e:	4603      	mov	r3, r0
 800b150:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800b152:	89fb      	ldrh	r3, [r7, #14]
 800b154:	2b00      	cmp	r3, #0
 800b156:	d01a      	beq.n	800b18e <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800b158:	697b      	ldr	r3, [r7, #20]
 800b15a:	2bfe      	cmp	r3, #254	; 0xfe
 800b15c:	d812      	bhi.n	800b184 <cmp_lfn+0x88>
 800b15e:	89bb      	ldrh	r3, [r7, #12]
 800b160:	4618      	mov	r0, r3
 800b162:	f001 fd4b 	bl	800cbfc <ff_wtoupper>
 800b166:	4603      	mov	r3, r0
 800b168:	461c      	mov	r4, r3
 800b16a:	697b      	ldr	r3, [r7, #20]
 800b16c:	1c5a      	adds	r2, r3, #1
 800b16e:	617a      	str	r2, [r7, #20]
 800b170:	005b      	lsls	r3, r3, #1
 800b172:	687a      	ldr	r2, [r7, #4]
 800b174:	4413      	add	r3, r2
 800b176:	881b      	ldrh	r3, [r3, #0]
 800b178:	4618      	mov	r0, r3
 800b17a:	f001 fd3f 	bl	800cbfc <ff_wtoupper>
 800b17e:	4603      	mov	r3, r0
 800b180:	429c      	cmp	r4, r3
 800b182:	d001      	beq.n	800b188 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800b184:	2300      	movs	r3, #0
 800b186:	e022      	b.n	800b1ce <cmp_lfn+0xd2>
			}
			wc = uc;
 800b188:	89bb      	ldrh	r3, [r7, #12]
 800b18a:	81fb      	strh	r3, [r7, #14]
 800b18c:	e006      	b.n	800b19c <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800b18e:	89bb      	ldrh	r3, [r7, #12]
 800b190:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b194:	4293      	cmp	r3, r2
 800b196:	d001      	beq.n	800b19c <cmp_lfn+0xa0>
 800b198:	2300      	movs	r3, #0
 800b19a:	e018      	b.n	800b1ce <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800b19c:	693b      	ldr	r3, [r7, #16]
 800b19e:	3301      	adds	r3, #1
 800b1a0:	613b      	str	r3, [r7, #16]
 800b1a2:	693b      	ldr	r3, [r7, #16]
 800b1a4:	2b0c      	cmp	r3, #12
 800b1a6:	d9c8      	bls.n	800b13a <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800b1a8:	683b      	ldr	r3, [r7, #0]
 800b1aa:	781b      	ldrb	r3, [r3, #0]
 800b1ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b1b0:	2b00      	cmp	r3, #0
 800b1b2:	d00b      	beq.n	800b1cc <cmp_lfn+0xd0>
 800b1b4:	89fb      	ldrh	r3, [r7, #14]
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	d008      	beq.n	800b1cc <cmp_lfn+0xd0>
 800b1ba:	697b      	ldr	r3, [r7, #20]
 800b1bc:	005b      	lsls	r3, r3, #1
 800b1be:	687a      	ldr	r2, [r7, #4]
 800b1c0:	4413      	add	r3, r2
 800b1c2:	881b      	ldrh	r3, [r3, #0]
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	d001      	beq.n	800b1cc <cmp_lfn+0xd0>
 800b1c8:	2300      	movs	r3, #0
 800b1ca:	e000      	b.n	800b1ce <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800b1cc:	2301      	movs	r3, #1
}
 800b1ce:	4618      	mov	r0, r3
 800b1d0:	371c      	adds	r7, #28
 800b1d2:	46bd      	mov	sp, r7
 800b1d4:	bd90      	pop	{r4, r7, pc}
 800b1d6:	bf00      	nop
 800b1d8:	0800e2cc 	.word	0x0800e2cc

0800b1dc <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800b1dc:	b580      	push	{r7, lr}
 800b1de:	b088      	sub	sp, #32
 800b1e0:	af00      	add	r7, sp, #0
 800b1e2:	60f8      	str	r0, [r7, #12]
 800b1e4:	60b9      	str	r1, [r7, #8]
 800b1e6:	4611      	mov	r1, r2
 800b1e8:	461a      	mov	r2, r3
 800b1ea:	460b      	mov	r3, r1
 800b1ec:	71fb      	strb	r3, [r7, #7]
 800b1ee:	4613      	mov	r3, r2
 800b1f0:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800b1f2:	68bb      	ldr	r3, [r7, #8]
 800b1f4:	330d      	adds	r3, #13
 800b1f6:	79ba      	ldrb	r2, [r7, #6]
 800b1f8:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800b1fa:	68bb      	ldr	r3, [r7, #8]
 800b1fc:	330b      	adds	r3, #11
 800b1fe:	220f      	movs	r2, #15
 800b200:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800b202:	68bb      	ldr	r3, [r7, #8]
 800b204:	330c      	adds	r3, #12
 800b206:	2200      	movs	r2, #0
 800b208:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800b20a:	68bb      	ldr	r3, [r7, #8]
 800b20c:	331a      	adds	r3, #26
 800b20e:	2100      	movs	r1, #0
 800b210:	4618      	mov	r0, r3
 800b212:	f7fe ff72 	bl	800a0fa <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800b216:	79fb      	ldrb	r3, [r7, #7]
 800b218:	1e5a      	subs	r2, r3, #1
 800b21a:	4613      	mov	r3, r2
 800b21c:	005b      	lsls	r3, r3, #1
 800b21e:	4413      	add	r3, r2
 800b220:	009b      	lsls	r3, r3, #2
 800b222:	4413      	add	r3, r2
 800b224:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800b226:	2300      	movs	r3, #0
 800b228:	82fb      	strh	r3, [r7, #22]
 800b22a:	2300      	movs	r3, #0
 800b22c:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800b22e:	8afb      	ldrh	r3, [r7, #22]
 800b230:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b234:	4293      	cmp	r3, r2
 800b236:	d007      	beq.n	800b248 <put_lfn+0x6c>
 800b238:	69fb      	ldr	r3, [r7, #28]
 800b23a:	1c5a      	adds	r2, r3, #1
 800b23c:	61fa      	str	r2, [r7, #28]
 800b23e:	005b      	lsls	r3, r3, #1
 800b240:	68fa      	ldr	r2, [r7, #12]
 800b242:	4413      	add	r3, r2
 800b244:	881b      	ldrh	r3, [r3, #0]
 800b246:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800b248:	4a17      	ldr	r2, [pc, #92]	; (800b2a8 <put_lfn+0xcc>)
 800b24a:	69bb      	ldr	r3, [r7, #24]
 800b24c:	4413      	add	r3, r2
 800b24e:	781b      	ldrb	r3, [r3, #0]
 800b250:	461a      	mov	r2, r3
 800b252:	68bb      	ldr	r3, [r7, #8]
 800b254:	4413      	add	r3, r2
 800b256:	8afa      	ldrh	r2, [r7, #22]
 800b258:	4611      	mov	r1, r2
 800b25a:	4618      	mov	r0, r3
 800b25c:	f7fe ff4d 	bl	800a0fa <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800b260:	8afb      	ldrh	r3, [r7, #22]
 800b262:	2b00      	cmp	r3, #0
 800b264:	d102      	bne.n	800b26c <put_lfn+0x90>
 800b266:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b26a:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800b26c:	69bb      	ldr	r3, [r7, #24]
 800b26e:	3301      	adds	r3, #1
 800b270:	61bb      	str	r3, [r7, #24]
 800b272:	69bb      	ldr	r3, [r7, #24]
 800b274:	2b0c      	cmp	r3, #12
 800b276:	d9da      	bls.n	800b22e <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800b278:	8afb      	ldrh	r3, [r7, #22]
 800b27a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b27e:	4293      	cmp	r3, r2
 800b280:	d006      	beq.n	800b290 <put_lfn+0xb4>
 800b282:	69fb      	ldr	r3, [r7, #28]
 800b284:	005b      	lsls	r3, r3, #1
 800b286:	68fa      	ldr	r2, [r7, #12]
 800b288:	4413      	add	r3, r2
 800b28a:	881b      	ldrh	r3, [r3, #0]
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	d103      	bne.n	800b298 <put_lfn+0xbc>
 800b290:	79fb      	ldrb	r3, [r7, #7]
 800b292:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b296:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800b298:	68bb      	ldr	r3, [r7, #8]
 800b29a:	79fa      	ldrb	r2, [r7, #7]
 800b29c:	701a      	strb	r2, [r3, #0]
}
 800b29e:	bf00      	nop
 800b2a0:	3720      	adds	r7, #32
 800b2a2:	46bd      	mov	sp, r7
 800b2a4:	bd80      	pop	{r7, pc}
 800b2a6:	bf00      	nop
 800b2a8:	0800e2cc 	.word	0x0800e2cc

0800b2ac <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800b2ac:	b580      	push	{r7, lr}
 800b2ae:	b08c      	sub	sp, #48	; 0x30
 800b2b0:	af00      	add	r7, sp, #0
 800b2b2:	60f8      	str	r0, [r7, #12]
 800b2b4:	60b9      	str	r1, [r7, #8]
 800b2b6:	607a      	str	r2, [r7, #4]
 800b2b8:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800b2ba:	220b      	movs	r2, #11
 800b2bc:	68b9      	ldr	r1, [r7, #8]
 800b2be:	68f8      	ldr	r0, [r7, #12]
 800b2c0:	f7fe ff62 	bl	800a188 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800b2c4:	683b      	ldr	r3, [r7, #0]
 800b2c6:	2b05      	cmp	r3, #5
 800b2c8:	d92b      	bls.n	800b322 <gen_numname+0x76>
		sr = seq;
 800b2ca:	683b      	ldr	r3, [r7, #0]
 800b2cc:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800b2ce:	e022      	b.n	800b316 <gen_numname+0x6a>
			wc = *lfn++;
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	1c9a      	adds	r2, r3, #2
 800b2d4:	607a      	str	r2, [r7, #4]
 800b2d6:	881b      	ldrh	r3, [r3, #0]
 800b2d8:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800b2da:	2300      	movs	r3, #0
 800b2dc:	62bb      	str	r3, [r7, #40]	; 0x28
 800b2de:	e017      	b.n	800b310 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800b2e0:	69fb      	ldr	r3, [r7, #28]
 800b2e2:	005a      	lsls	r2, r3, #1
 800b2e4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b2e6:	f003 0301 	and.w	r3, r3, #1
 800b2ea:	4413      	add	r3, r2
 800b2ec:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800b2ee:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b2f0:	085b      	lsrs	r3, r3, #1
 800b2f2:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800b2f4:	69fb      	ldr	r3, [r7, #28]
 800b2f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	d005      	beq.n	800b30a <gen_numname+0x5e>
 800b2fe:	69fb      	ldr	r3, [r7, #28]
 800b300:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 800b304:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 800b308:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800b30a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b30c:	3301      	adds	r3, #1
 800b30e:	62bb      	str	r3, [r7, #40]	; 0x28
 800b310:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b312:	2b0f      	cmp	r3, #15
 800b314:	d9e4      	bls.n	800b2e0 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	881b      	ldrh	r3, [r3, #0]
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	d1d8      	bne.n	800b2d0 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800b31e:	69fb      	ldr	r3, [r7, #28]
 800b320:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800b322:	2307      	movs	r3, #7
 800b324:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800b326:	683b      	ldr	r3, [r7, #0]
 800b328:	b2db      	uxtb	r3, r3
 800b32a:	f003 030f 	and.w	r3, r3, #15
 800b32e:	b2db      	uxtb	r3, r3
 800b330:	3330      	adds	r3, #48	; 0x30
 800b332:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800b336:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b33a:	2b39      	cmp	r3, #57	; 0x39
 800b33c:	d904      	bls.n	800b348 <gen_numname+0x9c>
 800b33e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b342:	3307      	adds	r3, #7
 800b344:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800b348:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b34a:	1e5a      	subs	r2, r3, #1
 800b34c:	62ba      	str	r2, [r7, #40]	; 0x28
 800b34e:	3330      	adds	r3, #48	; 0x30
 800b350:	443b      	add	r3, r7
 800b352:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800b356:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800b35a:	683b      	ldr	r3, [r7, #0]
 800b35c:	091b      	lsrs	r3, r3, #4
 800b35e:	603b      	str	r3, [r7, #0]
	} while (seq);
 800b360:	683b      	ldr	r3, [r7, #0]
 800b362:	2b00      	cmp	r3, #0
 800b364:	d1df      	bne.n	800b326 <gen_numname+0x7a>
	ns[i] = '~';
 800b366:	f107 0214 	add.w	r2, r7, #20
 800b36a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b36c:	4413      	add	r3, r2
 800b36e:	227e      	movs	r2, #126	; 0x7e
 800b370:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800b372:	2300      	movs	r3, #0
 800b374:	627b      	str	r3, [r7, #36]	; 0x24
 800b376:	e002      	b.n	800b37e <gen_numname+0xd2>
 800b378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b37a:	3301      	adds	r3, #1
 800b37c:	627b      	str	r3, [r7, #36]	; 0x24
 800b37e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b380:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b382:	429a      	cmp	r2, r3
 800b384:	d205      	bcs.n	800b392 <gen_numname+0xe6>
 800b386:	68fa      	ldr	r2, [r7, #12]
 800b388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b38a:	4413      	add	r3, r2
 800b38c:	781b      	ldrb	r3, [r3, #0]
 800b38e:	2b20      	cmp	r3, #32
 800b390:	d1f2      	bne.n	800b378 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800b392:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b394:	2b07      	cmp	r3, #7
 800b396:	d807      	bhi.n	800b3a8 <gen_numname+0xfc>
 800b398:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b39a:	1c5a      	adds	r2, r3, #1
 800b39c:	62ba      	str	r2, [r7, #40]	; 0x28
 800b39e:	3330      	adds	r3, #48	; 0x30
 800b3a0:	443b      	add	r3, r7
 800b3a2:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800b3a6:	e000      	b.n	800b3aa <gen_numname+0xfe>
 800b3a8:	2120      	movs	r1, #32
 800b3aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3ac:	1c5a      	adds	r2, r3, #1
 800b3ae:	627a      	str	r2, [r7, #36]	; 0x24
 800b3b0:	68fa      	ldr	r2, [r7, #12]
 800b3b2:	4413      	add	r3, r2
 800b3b4:	460a      	mov	r2, r1
 800b3b6:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800b3b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3ba:	2b07      	cmp	r3, #7
 800b3bc:	d9e9      	bls.n	800b392 <gen_numname+0xe6>
}
 800b3be:	bf00      	nop
 800b3c0:	bf00      	nop
 800b3c2:	3730      	adds	r7, #48	; 0x30
 800b3c4:	46bd      	mov	sp, r7
 800b3c6:	bd80      	pop	{r7, pc}

0800b3c8 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800b3c8:	b480      	push	{r7}
 800b3ca:	b085      	sub	sp, #20
 800b3cc:	af00      	add	r7, sp, #0
 800b3ce:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800b3d0:	2300      	movs	r3, #0
 800b3d2:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800b3d4:	230b      	movs	r3, #11
 800b3d6:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800b3d8:	7bfb      	ldrb	r3, [r7, #15]
 800b3da:	b2da      	uxtb	r2, r3
 800b3dc:	0852      	lsrs	r2, r2, #1
 800b3de:	01db      	lsls	r3, r3, #7
 800b3e0:	4313      	orrs	r3, r2
 800b3e2:	b2da      	uxtb	r2, r3
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	1c59      	adds	r1, r3, #1
 800b3e8:	6079      	str	r1, [r7, #4]
 800b3ea:	781b      	ldrb	r3, [r3, #0]
 800b3ec:	4413      	add	r3, r2
 800b3ee:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800b3f0:	68bb      	ldr	r3, [r7, #8]
 800b3f2:	3b01      	subs	r3, #1
 800b3f4:	60bb      	str	r3, [r7, #8]
 800b3f6:	68bb      	ldr	r3, [r7, #8]
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	d1ed      	bne.n	800b3d8 <sum_sfn+0x10>
	return sum;
 800b3fc:	7bfb      	ldrb	r3, [r7, #15]
}
 800b3fe:	4618      	mov	r0, r3
 800b400:	3714      	adds	r7, #20
 800b402:	46bd      	mov	sp, r7
 800b404:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b408:	4770      	bx	lr

0800b40a <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800b40a:	b580      	push	{r7, lr}
 800b40c:	b086      	sub	sp, #24
 800b40e:	af00      	add	r7, sp, #0
 800b410:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	681b      	ldr	r3, [r3, #0]
 800b416:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800b418:	2100      	movs	r1, #0
 800b41a:	6878      	ldr	r0, [r7, #4]
 800b41c:	f7ff fc88 	bl	800ad30 <dir_sdi>
 800b420:	4603      	mov	r3, r0
 800b422:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800b424:	7dfb      	ldrb	r3, [r7, #23]
 800b426:	2b00      	cmp	r3, #0
 800b428:	d001      	beq.n	800b42e <dir_find+0x24>
 800b42a:	7dfb      	ldrb	r3, [r7, #23]
 800b42c:	e0a9      	b.n	800b582 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800b42e:	23ff      	movs	r3, #255	; 0xff
 800b430:	753b      	strb	r3, [r7, #20]
 800b432:	7d3b      	ldrb	r3, [r7, #20]
 800b434:	757b      	strb	r3, [r7, #21]
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	f04f 32ff 	mov.w	r2, #4294967295
 800b43c:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	69db      	ldr	r3, [r3, #28]
 800b442:	4619      	mov	r1, r3
 800b444:	6938      	ldr	r0, [r7, #16]
 800b446:	f7ff f891 	bl	800a56c <move_window>
 800b44a:	4603      	mov	r3, r0
 800b44c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800b44e:	7dfb      	ldrb	r3, [r7, #23]
 800b450:	2b00      	cmp	r3, #0
 800b452:	f040 8090 	bne.w	800b576 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	6a1b      	ldr	r3, [r3, #32]
 800b45a:	781b      	ldrb	r3, [r3, #0]
 800b45c:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800b45e:	7dbb      	ldrb	r3, [r7, #22]
 800b460:	2b00      	cmp	r3, #0
 800b462:	d102      	bne.n	800b46a <dir_find+0x60>
 800b464:	2304      	movs	r3, #4
 800b466:	75fb      	strb	r3, [r7, #23]
 800b468:	e08a      	b.n	800b580 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	6a1b      	ldr	r3, [r3, #32]
 800b46e:	330b      	adds	r3, #11
 800b470:	781b      	ldrb	r3, [r3, #0]
 800b472:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b476:	73fb      	strb	r3, [r7, #15]
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	7bfa      	ldrb	r2, [r7, #15]
 800b47c:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800b47e:	7dbb      	ldrb	r3, [r7, #22]
 800b480:	2be5      	cmp	r3, #229	; 0xe5
 800b482:	d007      	beq.n	800b494 <dir_find+0x8a>
 800b484:	7bfb      	ldrb	r3, [r7, #15]
 800b486:	f003 0308 	and.w	r3, r3, #8
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	d009      	beq.n	800b4a2 <dir_find+0x98>
 800b48e:	7bfb      	ldrb	r3, [r7, #15]
 800b490:	2b0f      	cmp	r3, #15
 800b492:	d006      	beq.n	800b4a2 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800b494:	23ff      	movs	r3, #255	; 0xff
 800b496:	757b      	strb	r3, [r7, #21]
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	f04f 32ff 	mov.w	r2, #4294967295
 800b49e:	631a      	str	r2, [r3, #48]	; 0x30
 800b4a0:	e05e      	b.n	800b560 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800b4a2:	7bfb      	ldrb	r3, [r7, #15]
 800b4a4:	2b0f      	cmp	r3, #15
 800b4a6:	d136      	bne.n	800b516 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800b4ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b4b2:	2b00      	cmp	r3, #0
 800b4b4:	d154      	bne.n	800b560 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800b4b6:	7dbb      	ldrb	r3, [r7, #22]
 800b4b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	d00d      	beq.n	800b4dc <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	6a1b      	ldr	r3, [r3, #32]
 800b4c4:	7b5b      	ldrb	r3, [r3, #13]
 800b4c6:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800b4c8:	7dbb      	ldrb	r3, [r7, #22]
 800b4ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b4ce:	75bb      	strb	r3, [r7, #22]
 800b4d0:	7dbb      	ldrb	r3, [r7, #22]
 800b4d2:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	695a      	ldr	r2, [r3, #20]
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800b4dc:	7dba      	ldrb	r2, [r7, #22]
 800b4de:	7d7b      	ldrb	r3, [r7, #21]
 800b4e0:	429a      	cmp	r2, r3
 800b4e2:	d115      	bne.n	800b510 <dir_find+0x106>
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	6a1b      	ldr	r3, [r3, #32]
 800b4e8:	330d      	adds	r3, #13
 800b4ea:	781b      	ldrb	r3, [r3, #0]
 800b4ec:	7d3a      	ldrb	r2, [r7, #20]
 800b4ee:	429a      	cmp	r2, r3
 800b4f0:	d10e      	bne.n	800b510 <dir_find+0x106>
 800b4f2:	693b      	ldr	r3, [r7, #16]
 800b4f4:	691a      	ldr	r2, [r3, #16]
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	6a1b      	ldr	r3, [r3, #32]
 800b4fa:	4619      	mov	r1, r3
 800b4fc:	4610      	mov	r0, r2
 800b4fe:	f7ff fdfd 	bl	800b0fc <cmp_lfn>
 800b502:	4603      	mov	r3, r0
 800b504:	2b00      	cmp	r3, #0
 800b506:	d003      	beq.n	800b510 <dir_find+0x106>
 800b508:	7d7b      	ldrb	r3, [r7, #21]
 800b50a:	3b01      	subs	r3, #1
 800b50c:	b2db      	uxtb	r3, r3
 800b50e:	e000      	b.n	800b512 <dir_find+0x108>
 800b510:	23ff      	movs	r3, #255	; 0xff
 800b512:	757b      	strb	r3, [r7, #21]
 800b514:	e024      	b.n	800b560 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800b516:	7d7b      	ldrb	r3, [r7, #21]
 800b518:	2b00      	cmp	r3, #0
 800b51a:	d109      	bne.n	800b530 <dir_find+0x126>
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	6a1b      	ldr	r3, [r3, #32]
 800b520:	4618      	mov	r0, r3
 800b522:	f7ff ff51 	bl	800b3c8 <sum_sfn>
 800b526:	4603      	mov	r3, r0
 800b528:	461a      	mov	r2, r3
 800b52a:	7d3b      	ldrb	r3, [r7, #20]
 800b52c:	4293      	cmp	r3, r2
 800b52e:	d024      	beq.n	800b57a <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800b536:	f003 0301 	and.w	r3, r3, #1
 800b53a:	2b00      	cmp	r3, #0
 800b53c:	d10a      	bne.n	800b554 <dir_find+0x14a>
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	6a18      	ldr	r0, [r3, #32]
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	3324      	adds	r3, #36	; 0x24
 800b546:	220b      	movs	r2, #11
 800b548:	4619      	mov	r1, r3
 800b54a:	f7fe fe59 	bl	800a200 <mem_cmp>
 800b54e:	4603      	mov	r3, r0
 800b550:	2b00      	cmp	r3, #0
 800b552:	d014      	beq.n	800b57e <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800b554:	23ff      	movs	r3, #255	; 0xff
 800b556:	757b      	strb	r3, [r7, #21]
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	f04f 32ff 	mov.w	r2, #4294967295
 800b55e:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800b560:	2100      	movs	r1, #0
 800b562:	6878      	ldr	r0, [r7, #4]
 800b564:	f7ff fc6d 	bl	800ae42 <dir_next>
 800b568:	4603      	mov	r3, r0
 800b56a:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800b56c:	7dfb      	ldrb	r3, [r7, #23]
 800b56e:	2b00      	cmp	r3, #0
 800b570:	f43f af65 	beq.w	800b43e <dir_find+0x34>
 800b574:	e004      	b.n	800b580 <dir_find+0x176>
		if (res != FR_OK) break;
 800b576:	bf00      	nop
 800b578:	e002      	b.n	800b580 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800b57a:	bf00      	nop
 800b57c:	e000      	b.n	800b580 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800b57e:	bf00      	nop

	return res;
 800b580:	7dfb      	ldrb	r3, [r7, #23]
}
 800b582:	4618      	mov	r0, r3
 800b584:	3718      	adds	r7, #24
 800b586:	46bd      	mov	sp, r7
 800b588:	bd80      	pop	{r7, pc}
	...

0800b58c <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800b58c:	b580      	push	{r7, lr}
 800b58e:	b08c      	sub	sp, #48	; 0x30
 800b590:	af00      	add	r7, sp, #0
 800b592:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	681b      	ldr	r3, [r3, #0]
 800b598:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800b5a0:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800b5a4:	2b00      	cmp	r3, #0
 800b5a6:	d001      	beq.n	800b5ac <dir_register+0x20>
 800b5a8:	2306      	movs	r3, #6
 800b5aa:	e0e0      	b.n	800b76e <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800b5ac:	2300      	movs	r3, #0
 800b5ae:	627b      	str	r3, [r7, #36]	; 0x24
 800b5b0:	e002      	b.n	800b5b8 <dir_register+0x2c>
 800b5b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5b4:	3301      	adds	r3, #1
 800b5b6:	627b      	str	r3, [r7, #36]	; 0x24
 800b5b8:	69fb      	ldr	r3, [r7, #28]
 800b5ba:	691a      	ldr	r2, [r3, #16]
 800b5bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5be:	005b      	lsls	r3, r3, #1
 800b5c0:	4413      	add	r3, r2
 800b5c2:	881b      	ldrh	r3, [r3, #0]
 800b5c4:	2b00      	cmp	r3, #0
 800b5c6:	d1f4      	bne.n	800b5b2 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800b5ce:	f107 030c 	add.w	r3, r7, #12
 800b5d2:	220c      	movs	r2, #12
 800b5d4:	4618      	mov	r0, r3
 800b5d6:	f7fe fdd7 	bl	800a188 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800b5da:	7dfb      	ldrb	r3, [r7, #23]
 800b5dc:	f003 0301 	and.w	r3, r3, #1
 800b5e0:	2b00      	cmp	r3, #0
 800b5e2:	d032      	beq.n	800b64a <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	2240      	movs	r2, #64	; 0x40
 800b5e8:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 800b5ec:	2301      	movs	r3, #1
 800b5ee:	62bb      	str	r3, [r7, #40]	; 0x28
 800b5f0:	e016      	b.n	800b620 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	f103 0024 	add.w	r0, r3, #36	; 0x24
 800b5f8:	69fb      	ldr	r3, [r7, #28]
 800b5fa:	691a      	ldr	r2, [r3, #16]
 800b5fc:	f107 010c 	add.w	r1, r7, #12
 800b600:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b602:	f7ff fe53 	bl	800b2ac <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800b606:	6878      	ldr	r0, [r7, #4]
 800b608:	f7ff feff 	bl	800b40a <dir_find>
 800b60c:	4603      	mov	r3, r0
 800b60e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 800b612:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b616:	2b00      	cmp	r3, #0
 800b618:	d106      	bne.n	800b628 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800b61a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b61c:	3301      	adds	r3, #1
 800b61e:	62bb      	str	r3, [r7, #40]	; 0x28
 800b620:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b622:	2b63      	cmp	r3, #99	; 0x63
 800b624:	d9e5      	bls.n	800b5f2 <dir_register+0x66>
 800b626:	e000      	b.n	800b62a <dir_register+0x9e>
			if (res != FR_OK) break;
 800b628:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800b62a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b62c:	2b64      	cmp	r3, #100	; 0x64
 800b62e:	d101      	bne.n	800b634 <dir_register+0xa8>
 800b630:	2307      	movs	r3, #7
 800b632:	e09c      	b.n	800b76e <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800b634:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b638:	2b04      	cmp	r3, #4
 800b63a:	d002      	beq.n	800b642 <dir_register+0xb6>
 800b63c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b640:	e095      	b.n	800b76e <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800b642:	7dfa      	ldrb	r2, [r7, #23]
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800b64a:	7dfb      	ldrb	r3, [r7, #23]
 800b64c:	f003 0302 	and.w	r3, r3, #2
 800b650:	2b00      	cmp	r3, #0
 800b652:	d007      	beq.n	800b664 <dir_register+0xd8>
 800b654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b656:	330c      	adds	r3, #12
 800b658:	4a47      	ldr	r2, [pc, #284]	; (800b778 <dir_register+0x1ec>)
 800b65a:	fba2 2303 	umull	r2, r3, r2, r3
 800b65e:	089b      	lsrs	r3, r3, #2
 800b660:	3301      	adds	r3, #1
 800b662:	e000      	b.n	800b666 <dir_register+0xda>
 800b664:	2301      	movs	r3, #1
 800b666:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800b668:	6a39      	ldr	r1, [r7, #32]
 800b66a:	6878      	ldr	r0, [r7, #4]
 800b66c:	f7ff fcbf 	bl	800afee <dir_alloc>
 800b670:	4603      	mov	r3, r0
 800b672:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800b676:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	d148      	bne.n	800b710 <dir_register+0x184>
 800b67e:	6a3b      	ldr	r3, [r7, #32]
 800b680:	3b01      	subs	r3, #1
 800b682:	623b      	str	r3, [r7, #32]
 800b684:	6a3b      	ldr	r3, [r7, #32]
 800b686:	2b00      	cmp	r3, #0
 800b688:	d042      	beq.n	800b710 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	695a      	ldr	r2, [r3, #20]
 800b68e:	6a3b      	ldr	r3, [r7, #32]
 800b690:	015b      	lsls	r3, r3, #5
 800b692:	1ad3      	subs	r3, r2, r3
 800b694:	4619      	mov	r1, r3
 800b696:	6878      	ldr	r0, [r7, #4]
 800b698:	f7ff fb4a 	bl	800ad30 <dir_sdi>
 800b69c:	4603      	mov	r3, r0
 800b69e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800b6a2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	d132      	bne.n	800b710 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	3324      	adds	r3, #36	; 0x24
 800b6ae:	4618      	mov	r0, r3
 800b6b0:	f7ff fe8a 	bl	800b3c8 <sum_sfn>
 800b6b4:	4603      	mov	r3, r0
 800b6b6:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	69db      	ldr	r3, [r3, #28]
 800b6bc:	4619      	mov	r1, r3
 800b6be:	69f8      	ldr	r0, [r7, #28]
 800b6c0:	f7fe ff54 	bl	800a56c <move_window>
 800b6c4:	4603      	mov	r3, r0
 800b6c6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 800b6ca:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b6ce:	2b00      	cmp	r3, #0
 800b6d0:	d11d      	bne.n	800b70e <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800b6d2:	69fb      	ldr	r3, [r7, #28]
 800b6d4:	6918      	ldr	r0, [r3, #16]
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	6a19      	ldr	r1, [r3, #32]
 800b6da:	6a3b      	ldr	r3, [r7, #32]
 800b6dc:	b2da      	uxtb	r2, r3
 800b6de:	7efb      	ldrb	r3, [r7, #27]
 800b6e0:	f7ff fd7c 	bl	800b1dc <put_lfn>
				fs->wflag = 1;
 800b6e4:	69fb      	ldr	r3, [r7, #28]
 800b6e6:	2201      	movs	r2, #1
 800b6e8:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800b6ea:	2100      	movs	r1, #0
 800b6ec:	6878      	ldr	r0, [r7, #4]
 800b6ee:	f7ff fba8 	bl	800ae42 <dir_next>
 800b6f2:	4603      	mov	r3, r0
 800b6f4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 800b6f8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b6fc:	2b00      	cmp	r3, #0
 800b6fe:	d107      	bne.n	800b710 <dir_register+0x184>
 800b700:	6a3b      	ldr	r3, [r7, #32]
 800b702:	3b01      	subs	r3, #1
 800b704:	623b      	str	r3, [r7, #32]
 800b706:	6a3b      	ldr	r3, [r7, #32]
 800b708:	2b00      	cmp	r3, #0
 800b70a:	d1d5      	bne.n	800b6b8 <dir_register+0x12c>
 800b70c:	e000      	b.n	800b710 <dir_register+0x184>
				if (res != FR_OK) break;
 800b70e:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800b710:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b714:	2b00      	cmp	r3, #0
 800b716:	d128      	bne.n	800b76a <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	69db      	ldr	r3, [r3, #28]
 800b71c:	4619      	mov	r1, r3
 800b71e:	69f8      	ldr	r0, [r7, #28]
 800b720:	f7fe ff24 	bl	800a56c <move_window>
 800b724:	4603      	mov	r3, r0
 800b726:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800b72a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b72e:	2b00      	cmp	r3, #0
 800b730:	d11b      	bne.n	800b76a <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	6a1b      	ldr	r3, [r3, #32]
 800b736:	2220      	movs	r2, #32
 800b738:	2100      	movs	r1, #0
 800b73a:	4618      	mov	r0, r3
 800b73c:	f7fe fd45 	bl	800a1ca <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	6a18      	ldr	r0, [r3, #32]
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	3324      	adds	r3, #36	; 0x24
 800b748:	220b      	movs	r2, #11
 800b74a:	4619      	mov	r1, r3
 800b74c:	f7fe fd1c 	bl	800a188 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	6a1b      	ldr	r3, [r3, #32]
 800b75a:	330c      	adds	r3, #12
 800b75c:	f002 0218 	and.w	r2, r2, #24
 800b760:	b2d2      	uxtb	r2, r2
 800b762:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800b764:	69fb      	ldr	r3, [r7, #28]
 800b766:	2201      	movs	r2, #1
 800b768:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800b76a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800b76e:	4618      	mov	r0, r3
 800b770:	3730      	adds	r7, #48	; 0x30
 800b772:	46bd      	mov	sp, r7
 800b774:	bd80      	pop	{r7, pc}
 800b776:	bf00      	nop
 800b778:	4ec4ec4f 	.word	0x4ec4ec4f

0800b77c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800b77c:	b580      	push	{r7, lr}
 800b77e:	b08a      	sub	sp, #40	; 0x28
 800b780:	af00      	add	r7, sp, #0
 800b782:	6078      	str	r0, [r7, #4]
 800b784:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800b786:	683b      	ldr	r3, [r7, #0]
 800b788:	681b      	ldr	r3, [r3, #0]
 800b78a:	613b      	str	r3, [r7, #16]
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	681b      	ldr	r3, [r3, #0]
 800b790:	691b      	ldr	r3, [r3, #16]
 800b792:	60fb      	str	r3, [r7, #12]
 800b794:	2300      	movs	r3, #0
 800b796:	617b      	str	r3, [r7, #20]
 800b798:	697b      	ldr	r3, [r7, #20]
 800b79a:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800b79c:	69bb      	ldr	r3, [r7, #24]
 800b79e:	1c5a      	adds	r2, r3, #1
 800b7a0:	61ba      	str	r2, [r7, #24]
 800b7a2:	693a      	ldr	r2, [r7, #16]
 800b7a4:	4413      	add	r3, r2
 800b7a6:	781b      	ldrb	r3, [r3, #0]
 800b7a8:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800b7aa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b7ac:	2b1f      	cmp	r3, #31
 800b7ae:	d940      	bls.n	800b832 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800b7b0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b7b2:	2b2f      	cmp	r3, #47	; 0x2f
 800b7b4:	d006      	beq.n	800b7c4 <create_name+0x48>
 800b7b6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b7b8:	2b5c      	cmp	r3, #92	; 0x5c
 800b7ba:	d110      	bne.n	800b7de <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800b7bc:	e002      	b.n	800b7c4 <create_name+0x48>
 800b7be:	69bb      	ldr	r3, [r7, #24]
 800b7c0:	3301      	adds	r3, #1
 800b7c2:	61bb      	str	r3, [r7, #24]
 800b7c4:	693a      	ldr	r2, [r7, #16]
 800b7c6:	69bb      	ldr	r3, [r7, #24]
 800b7c8:	4413      	add	r3, r2
 800b7ca:	781b      	ldrb	r3, [r3, #0]
 800b7cc:	2b2f      	cmp	r3, #47	; 0x2f
 800b7ce:	d0f6      	beq.n	800b7be <create_name+0x42>
 800b7d0:	693a      	ldr	r2, [r7, #16]
 800b7d2:	69bb      	ldr	r3, [r7, #24]
 800b7d4:	4413      	add	r3, r2
 800b7d6:	781b      	ldrb	r3, [r3, #0]
 800b7d8:	2b5c      	cmp	r3, #92	; 0x5c
 800b7da:	d0f0      	beq.n	800b7be <create_name+0x42>
			break;
 800b7dc:	e02a      	b.n	800b834 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800b7de:	697b      	ldr	r3, [r7, #20]
 800b7e0:	2bfe      	cmp	r3, #254	; 0xfe
 800b7e2:	d901      	bls.n	800b7e8 <create_name+0x6c>
 800b7e4:	2306      	movs	r3, #6
 800b7e6:	e17d      	b.n	800bae4 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 800b7e8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b7ea:	b2db      	uxtb	r3, r3
 800b7ec:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800b7ee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b7f0:	2101      	movs	r1, #1
 800b7f2:	4618      	mov	r0, r3
 800b7f4:	f001 f9c6 	bl	800cb84 <ff_convert>
 800b7f8:	4603      	mov	r3, r0
 800b7fa:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800b7fc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b7fe:	2b00      	cmp	r3, #0
 800b800:	d101      	bne.n	800b806 <create_name+0x8a>
 800b802:	2306      	movs	r3, #6
 800b804:	e16e      	b.n	800bae4 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800b806:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b808:	2b7f      	cmp	r3, #127	; 0x7f
 800b80a:	d809      	bhi.n	800b820 <create_name+0xa4>
 800b80c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b80e:	4619      	mov	r1, r3
 800b810:	488d      	ldr	r0, [pc, #564]	; (800ba48 <create_name+0x2cc>)
 800b812:	f7fe fd1c 	bl	800a24e <chk_chr>
 800b816:	4603      	mov	r3, r0
 800b818:	2b00      	cmp	r3, #0
 800b81a:	d001      	beq.n	800b820 <create_name+0xa4>
 800b81c:	2306      	movs	r3, #6
 800b81e:	e161      	b.n	800bae4 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 800b820:	697b      	ldr	r3, [r7, #20]
 800b822:	1c5a      	adds	r2, r3, #1
 800b824:	617a      	str	r2, [r7, #20]
 800b826:	005b      	lsls	r3, r3, #1
 800b828:	68fa      	ldr	r2, [r7, #12]
 800b82a:	4413      	add	r3, r2
 800b82c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800b82e:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800b830:	e7b4      	b.n	800b79c <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800b832:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800b834:	693a      	ldr	r2, [r7, #16]
 800b836:	69bb      	ldr	r3, [r7, #24]
 800b838:	441a      	add	r2, r3
 800b83a:	683b      	ldr	r3, [r7, #0]
 800b83c:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800b83e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b840:	2b1f      	cmp	r3, #31
 800b842:	d801      	bhi.n	800b848 <create_name+0xcc>
 800b844:	2304      	movs	r3, #4
 800b846:	e000      	b.n	800b84a <create_name+0xce>
 800b848:	2300      	movs	r3, #0
 800b84a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800b84e:	e011      	b.n	800b874 <create_name+0xf8>
		w = lfn[di - 1];
 800b850:	697b      	ldr	r3, [r7, #20]
 800b852:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800b856:	3b01      	subs	r3, #1
 800b858:	005b      	lsls	r3, r3, #1
 800b85a:	68fa      	ldr	r2, [r7, #12]
 800b85c:	4413      	add	r3, r2
 800b85e:	881b      	ldrh	r3, [r3, #0]
 800b860:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800b862:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b864:	2b20      	cmp	r3, #32
 800b866:	d002      	beq.n	800b86e <create_name+0xf2>
 800b868:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b86a:	2b2e      	cmp	r3, #46	; 0x2e
 800b86c:	d106      	bne.n	800b87c <create_name+0x100>
		di--;
 800b86e:	697b      	ldr	r3, [r7, #20]
 800b870:	3b01      	subs	r3, #1
 800b872:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800b874:	697b      	ldr	r3, [r7, #20]
 800b876:	2b00      	cmp	r3, #0
 800b878:	d1ea      	bne.n	800b850 <create_name+0xd4>
 800b87a:	e000      	b.n	800b87e <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800b87c:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800b87e:	697b      	ldr	r3, [r7, #20]
 800b880:	005b      	lsls	r3, r3, #1
 800b882:	68fa      	ldr	r2, [r7, #12]
 800b884:	4413      	add	r3, r2
 800b886:	2200      	movs	r2, #0
 800b888:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800b88a:	697b      	ldr	r3, [r7, #20]
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	d101      	bne.n	800b894 <create_name+0x118>
 800b890:	2306      	movs	r3, #6
 800b892:	e127      	b.n	800bae4 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	3324      	adds	r3, #36	; 0x24
 800b898:	220b      	movs	r2, #11
 800b89a:	2120      	movs	r1, #32
 800b89c:	4618      	mov	r0, r3
 800b89e:	f7fe fc94 	bl	800a1ca <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800b8a2:	2300      	movs	r3, #0
 800b8a4:	61bb      	str	r3, [r7, #24]
 800b8a6:	e002      	b.n	800b8ae <create_name+0x132>
 800b8a8:	69bb      	ldr	r3, [r7, #24]
 800b8aa:	3301      	adds	r3, #1
 800b8ac:	61bb      	str	r3, [r7, #24]
 800b8ae:	69bb      	ldr	r3, [r7, #24]
 800b8b0:	005b      	lsls	r3, r3, #1
 800b8b2:	68fa      	ldr	r2, [r7, #12]
 800b8b4:	4413      	add	r3, r2
 800b8b6:	881b      	ldrh	r3, [r3, #0]
 800b8b8:	2b20      	cmp	r3, #32
 800b8ba:	d0f5      	beq.n	800b8a8 <create_name+0x12c>
 800b8bc:	69bb      	ldr	r3, [r7, #24]
 800b8be:	005b      	lsls	r3, r3, #1
 800b8c0:	68fa      	ldr	r2, [r7, #12]
 800b8c2:	4413      	add	r3, r2
 800b8c4:	881b      	ldrh	r3, [r3, #0]
 800b8c6:	2b2e      	cmp	r3, #46	; 0x2e
 800b8c8:	d0ee      	beq.n	800b8a8 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800b8ca:	69bb      	ldr	r3, [r7, #24]
 800b8cc:	2b00      	cmp	r3, #0
 800b8ce:	d009      	beq.n	800b8e4 <create_name+0x168>
 800b8d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b8d4:	f043 0303 	orr.w	r3, r3, #3
 800b8d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800b8dc:	e002      	b.n	800b8e4 <create_name+0x168>
 800b8de:	697b      	ldr	r3, [r7, #20]
 800b8e0:	3b01      	subs	r3, #1
 800b8e2:	617b      	str	r3, [r7, #20]
 800b8e4:	697b      	ldr	r3, [r7, #20]
 800b8e6:	2b00      	cmp	r3, #0
 800b8e8:	d009      	beq.n	800b8fe <create_name+0x182>
 800b8ea:	697b      	ldr	r3, [r7, #20]
 800b8ec:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800b8f0:	3b01      	subs	r3, #1
 800b8f2:	005b      	lsls	r3, r3, #1
 800b8f4:	68fa      	ldr	r2, [r7, #12]
 800b8f6:	4413      	add	r3, r2
 800b8f8:	881b      	ldrh	r3, [r3, #0]
 800b8fa:	2b2e      	cmp	r3, #46	; 0x2e
 800b8fc:	d1ef      	bne.n	800b8de <create_name+0x162>

	i = b = 0; ni = 8;
 800b8fe:	2300      	movs	r3, #0
 800b900:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800b904:	2300      	movs	r3, #0
 800b906:	623b      	str	r3, [r7, #32]
 800b908:	2308      	movs	r3, #8
 800b90a:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800b90c:	69bb      	ldr	r3, [r7, #24]
 800b90e:	1c5a      	adds	r2, r3, #1
 800b910:	61ba      	str	r2, [r7, #24]
 800b912:	005b      	lsls	r3, r3, #1
 800b914:	68fa      	ldr	r2, [r7, #12]
 800b916:	4413      	add	r3, r2
 800b918:	881b      	ldrh	r3, [r3, #0]
 800b91a:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800b91c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b91e:	2b00      	cmp	r3, #0
 800b920:	f000 8090 	beq.w	800ba44 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800b924:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b926:	2b20      	cmp	r3, #32
 800b928:	d006      	beq.n	800b938 <create_name+0x1bc>
 800b92a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b92c:	2b2e      	cmp	r3, #46	; 0x2e
 800b92e:	d10a      	bne.n	800b946 <create_name+0x1ca>
 800b930:	69ba      	ldr	r2, [r7, #24]
 800b932:	697b      	ldr	r3, [r7, #20]
 800b934:	429a      	cmp	r2, r3
 800b936:	d006      	beq.n	800b946 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800b938:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b93c:	f043 0303 	orr.w	r3, r3, #3
 800b940:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b944:	e07d      	b.n	800ba42 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800b946:	6a3a      	ldr	r2, [r7, #32]
 800b948:	69fb      	ldr	r3, [r7, #28]
 800b94a:	429a      	cmp	r2, r3
 800b94c:	d203      	bcs.n	800b956 <create_name+0x1da>
 800b94e:	69ba      	ldr	r2, [r7, #24]
 800b950:	697b      	ldr	r3, [r7, #20]
 800b952:	429a      	cmp	r2, r3
 800b954:	d123      	bne.n	800b99e <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800b956:	69fb      	ldr	r3, [r7, #28]
 800b958:	2b0b      	cmp	r3, #11
 800b95a:	d106      	bne.n	800b96a <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800b95c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b960:	f043 0303 	orr.w	r3, r3, #3
 800b964:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b968:	e075      	b.n	800ba56 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800b96a:	69ba      	ldr	r2, [r7, #24]
 800b96c:	697b      	ldr	r3, [r7, #20]
 800b96e:	429a      	cmp	r2, r3
 800b970:	d005      	beq.n	800b97e <create_name+0x202>
 800b972:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b976:	f043 0303 	orr.w	r3, r3, #3
 800b97a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800b97e:	69ba      	ldr	r2, [r7, #24]
 800b980:	697b      	ldr	r3, [r7, #20]
 800b982:	429a      	cmp	r2, r3
 800b984:	d866      	bhi.n	800ba54 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800b986:	697b      	ldr	r3, [r7, #20]
 800b988:	61bb      	str	r3, [r7, #24]
 800b98a:	2308      	movs	r3, #8
 800b98c:	623b      	str	r3, [r7, #32]
 800b98e:	230b      	movs	r3, #11
 800b990:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800b992:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b996:	009b      	lsls	r3, r3, #2
 800b998:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800b99c:	e051      	b.n	800ba42 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800b99e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b9a0:	2b7f      	cmp	r3, #127	; 0x7f
 800b9a2:	d914      	bls.n	800b9ce <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800b9a4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b9a6:	2100      	movs	r1, #0
 800b9a8:	4618      	mov	r0, r3
 800b9aa:	f001 f8eb 	bl	800cb84 <ff_convert>
 800b9ae:	4603      	mov	r3, r0
 800b9b0:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800b9b2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	d004      	beq.n	800b9c2 <create_name+0x246>
 800b9b8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b9ba:	3b80      	subs	r3, #128	; 0x80
 800b9bc:	4a23      	ldr	r2, [pc, #140]	; (800ba4c <create_name+0x2d0>)
 800b9be:	5cd3      	ldrb	r3, [r2, r3]
 800b9c0:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800b9c2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b9c6:	f043 0302 	orr.w	r3, r3, #2
 800b9ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800b9ce:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b9d0:	2b00      	cmp	r3, #0
 800b9d2:	d007      	beq.n	800b9e4 <create_name+0x268>
 800b9d4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b9d6:	4619      	mov	r1, r3
 800b9d8:	481d      	ldr	r0, [pc, #116]	; (800ba50 <create_name+0x2d4>)
 800b9da:	f7fe fc38 	bl	800a24e <chk_chr>
 800b9de:	4603      	mov	r3, r0
 800b9e0:	2b00      	cmp	r3, #0
 800b9e2:	d008      	beq.n	800b9f6 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800b9e4:	235f      	movs	r3, #95	; 0x5f
 800b9e6:	84bb      	strh	r3, [r7, #36]	; 0x24
 800b9e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b9ec:	f043 0303 	orr.w	r3, r3, #3
 800b9f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b9f4:	e01b      	b.n	800ba2e <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800b9f6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b9f8:	2b40      	cmp	r3, #64	; 0x40
 800b9fa:	d909      	bls.n	800ba10 <create_name+0x294>
 800b9fc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b9fe:	2b5a      	cmp	r3, #90	; 0x5a
 800ba00:	d806      	bhi.n	800ba10 <create_name+0x294>
					b |= 2;
 800ba02:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ba06:	f043 0302 	orr.w	r3, r3, #2
 800ba0a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800ba0e:	e00e      	b.n	800ba2e <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800ba10:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ba12:	2b60      	cmp	r3, #96	; 0x60
 800ba14:	d90b      	bls.n	800ba2e <create_name+0x2b2>
 800ba16:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ba18:	2b7a      	cmp	r3, #122	; 0x7a
 800ba1a:	d808      	bhi.n	800ba2e <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800ba1c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ba20:	f043 0301 	orr.w	r3, r3, #1
 800ba24:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800ba28:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ba2a:	3b20      	subs	r3, #32
 800ba2c:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800ba2e:	6a3b      	ldr	r3, [r7, #32]
 800ba30:	1c5a      	adds	r2, r3, #1
 800ba32:	623a      	str	r2, [r7, #32]
 800ba34:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800ba36:	b2d1      	uxtb	r1, r2
 800ba38:	687a      	ldr	r2, [r7, #4]
 800ba3a:	4413      	add	r3, r2
 800ba3c:	460a      	mov	r2, r1
 800ba3e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 800ba42:	e763      	b.n	800b90c <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800ba44:	bf00      	nop
 800ba46:	e006      	b.n	800ba56 <create_name+0x2da>
 800ba48:	0800e1d0 	.word	0x0800e1d0
 800ba4c:	0800e24c 	.word	0x0800e24c
 800ba50:	0800e1dc 	.word	0x0800e1dc
			if (si > di) break;			/* No extension */
 800ba54:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800ba5c:	2be5      	cmp	r3, #229	; 0xe5
 800ba5e:	d103      	bne.n	800ba68 <create_name+0x2ec>
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	2205      	movs	r2, #5
 800ba64:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 800ba68:	69fb      	ldr	r3, [r7, #28]
 800ba6a:	2b08      	cmp	r3, #8
 800ba6c:	d104      	bne.n	800ba78 <create_name+0x2fc>
 800ba6e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ba72:	009b      	lsls	r3, r3, #2
 800ba74:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800ba78:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ba7c:	f003 030c 	and.w	r3, r3, #12
 800ba80:	2b0c      	cmp	r3, #12
 800ba82:	d005      	beq.n	800ba90 <create_name+0x314>
 800ba84:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ba88:	f003 0303 	and.w	r3, r3, #3
 800ba8c:	2b03      	cmp	r3, #3
 800ba8e:	d105      	bne.n	800ba9c <create_name+0x320>
 800ba90:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ba94:	f043 0302 	orr.w	r3, r3, #2
 800ba98:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800ba9c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800baa0:	f003 0302 	and.w	r3, r3, #2
 800baa4:	2b00      	cmp	r3, #0
 800baa6:	d117      	bne.n	800bad8 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800baa8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800baac:	f003 0303 	and.w	r3, r3, #3
 800bab0:	2b01      	cmp	r3, #1
 800bab2:	d105      	bne.n	800bac0 <create_name+0x344>
 800bab4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bab8:	f043 0310 	orr.w	r3, r3, #16
 800babc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800bac0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800bac4:	f003 030c 	and.w	r3, r3, #12
 800bac8:	2b04      	cmp	r3, #4
 800baca:	d105      	bne.n	800bad8 <create_name+0x35c>
 800bacc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bad0:	f043 0308 	orr.w	r3, r3, #8
 800bad4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800bade:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 800bae2:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800bae4:	4618      	mov	r0, r3
 800bae6:	3728      	adds	r7, #40	; 0x28
 800bae8:	46bd      	mov	sp, r7
 800baea:	bd80      	pop	{r7, pc}

0800baec <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800baec:	b580      	push	{r7, lr}
 800baee:	b086      	sub	sp, #24
 800baf0:	af00      	add	r7, sp, #0
 800baf2:	6078      	str	r0, [r7, #4]
 800baf4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800bafa:	693b      	ldr	r3, [r7, #16]
 800bafc:	681b      	ldr	r3, [r3, #0]
 800bafe:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800bb00:	e002      	b.n	800bb08 <follow_path+0x1c>
 800bb02:	683b      	ldr	r3, [r7, #0]
 800bb04:	3301      	adds	r3, #1
 800bb06:	603b      	str	r3, [r7, #0]
 800bb08:	683b      	ldr	r3, [r7, #0]
 800bb0a:	781b      	ldrb	r3, [r3, #0]
 800bb0c:	2b2f      	cmp	r3, #47	; 0x2f
 800bb0e:	d0f8      	beq.n	800bb02 <follow_path+0x16>
 800bb10:	683b      	ldr	r3, [r7, #0]
 800bb12:	781b      	ldrb	r3, [r3, #0]
 800bb14:	2b5c      	cmp	r3, #92	; 0x5c
 800bb16:	d0f4      	beq.n	800bb02 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800bb18:	693b      	ldr	r3, [r7, #16]
 800bb1a:	2200      	movs	r2, #0
 800bb1c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800bb1e:	683b      	ldr	r3, [r7, #0]
 800bb20:	781b      	ldrb	r3, [r3, #0]
 800bb22:	2b1f      	cmp	r3, #31
 800bb24:	d80a      	bhi.n	800bb3c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	2280      	movs	r2, #128	; 0x80
 800bb2a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800bb2e:	2100      	movs	r1, #0
 800bb30:	6878      	ldr	r0, [r7, #4]
 800bb32:	f7ff f8fd 	bl	800ad30 <dir_sdi>
 800bb36:	4603      	mov	r3, r0
 800bb38:	75fb      	strb	r3, [r7, #23]
 800bb3a:	e048      	b.n	800bbce <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800bb3c:	463b      	mov	r3, r7
 800bb3e:	4619      	mov	r1, r3
 800bb40:	6878      	ldr	r0, [r7, #4]
 800bb42:	f7ff fe1b 	bl	800b77c <create_name>
 800bb46:	4603      	mov	r3, r0
 800bb48:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800bb4a:	7dfb      	ldrb	r3, [r7, #23]
 800bb4c:	2b00      	cmp	r3, #0
 800bb4e:	d139      	bne.n	800bbc4 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 800bb50:	6878      	ldr	r0, [r7, #4]
 800bb52:	f7ff fc5a 	bl	800b40a <dir_find>
 800bb56:	4603      	mov	r3, r0
 800bb58:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800bb60:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800bb62:	7dfb      	ldrb	r3, [r7, #23]
 800bb64:	2b00      	cmp	r3, #0
 800bb66:	d00a      	beq.n	800bb7e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800bb68:	7dfb      	ldrb	r3, [r7, #23]
 800bb6a:	2b04      	cmp	r3, #4
 800bb6c:	d12c      	bne.n	800bbc8 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800bb6e:	7afb      	ldrb	r3, [r7, #11]
 800bb70:	f003 0304 	and.w	r3, r3, #4
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	d127      	bne.n	800bbc8 <follow_path+0xdc>
 800bb78:	2305      	movs	r3, #5
 800bb7a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800bb7c:	e024      	b.n	800bbc8 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800bb7e:	7afb      	ldrb	r3, [r7, #11]
 800bb80:	f003 0304 	and.w	r3, r3, #4
 800bb84:	2b00      	cmp	r3, #0
 800bb86:	d121      	bne.n	800bbcc <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800bb88:	693b      	ldr	r3, [r7, #16]
 800bb8a:	799b      	ldrb	r3, [r3, #6]
 800bb8c:	f003 0310 	and.w	r3, r3, #16
 800bb90:	2b00      	cmp	r3, #0
 800bb92:	d102      	bne.n	800bb9a <follow_path+0xae>
				res = FR_NO_PATH; break;
 800bb94:	2305      	movs	r3, #5
 800bb96:	75fb      	strb	r3, [r7, #23]
 800bb98:	e019      	b.n	800bbce <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800bb9a:	68fb      	ldr	r3, [r7, #12]
 800bb9c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	695b      	ldr	r3, [r3, #20]
 800bba4:	68fa      	ldr	r2, [r7, #12]
 800bba6:	8992      	ldrh	r2, [r2, #12]
 800bba8:	fbb3 f0f2 	udiv	r0, r3, r2
 800bbac:	fb00 f202 	mul.w	r2, r0, r2
 800bbb0:	1a9b      	subs	r3, r3, r2
 800bbb2:	440b      	add	r3, r1
 800bbb4:	4619      	mov	r1, r3
 800bbb6:	68f8      	ldr	r0, [r7, #12]
 800bbb8:	f7ff fa60 	bl	800b07c <ld_clust>
 800bbbc:	4602      	mov	r2, r0
 800bbbe:	693b      	ldr	r3, [r7, #16]
 800bbc0:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800bbc2:	e7bb      	b.n	800bb3c <follow_path+0x50>
			if (res != FR_OK) break;
 800bbc4:	bf00      	nop
 800bbc6:	e002      	b.n	800bbce <follow_path+0xe2>
				break;
 800bbc8:	bf00      	nop
 800bbca:	e000      	b.n	800bbce <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800bbcc:	bf00      	nop
			}
		}
	}

	return res;
 800bbce:	7dfb      	ldrb	r3, [r7, #23]
}
 800bbd0:	4618      	mov	r0, r3
 800bbd2:	3718      	adds	r7, #24
 800bbd4:	46bd      	mov	sp, r7
 800bbd6:	bd80      	pop	{r7, pc}

0800bbd8 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800bbd8:	b480      	push	{r7}
 800bbda:	b087      	sub	sp, #28
 800bbdc:	af00      	add	r7, sp, #0
 800bbde:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800bbe0:	f04f 33ff 	mov.w	r3, #4294967295
 800bbe4:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	681b      	ldr	r3, [r3, #0]
 800bbea:	2b00      	cmp	r3, #0
 800bbec:	d031      	beq.n	800bc52 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	681b      	ldr	r3, [r3, #0]
 800bbf2:	617b      	str	r3, [r7, #20]
 800bbf4:	e002      	b.n	800bbfc <get_ldnumber+0x24>
 800bbf6:	697b      	ldr	r3, [r7, #20]
 800bbf8:	3301      	adds	r3, #1
 800bbfa:	617b      	str	r3, [r7, #20]
 800bbfc:	697b      	ldr	r3, [r7, #20]
 800bbfe:	781b      	ldrb	r3, [r3, #0]
 800bc00:	2b1f      	cmp	r3, #31
 800bc02:	d903      	bls.n	800bc0c <get_ldnumber+0x34>
 800bc04:	697b      	ldr	r3, [r7, #20]
 800bc06:	781b      	ldrb	r3, [r3, #0]
 800bc08:	2b3a      	cmp	r3, #58	; 0x3a
 800bc0a:	d1f4      	bne.n	800bbf6 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800bc0c:	697b      	ldr	r3, [r7, #20]
 800bc0e:	781b      	ldrb	r3, [r3, #0]
 800bc10:	2b3a      	cmp	r3, #58	; 0x3a
 800bc12:	d11c      	bne.n	800bc4e <get_ldnumber+0x76>
			tp = *path;
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	681b      	ldr	r3, [r3, #0]
 800bc18:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800bc1a:	68fb      	ldr	r3, [r7, #12]
 800bc1c:	1c5a      	adds	r2, r3, #1
 800bc1e:	60fa      	str	r2, [r7, #12]
 800bc20:	781b      	ldrb	r3, [r3, #0]
 800bc22:	3b30      	subs	r3, #48	; 0x30
 800bc24:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800bc26:	68bb      	ldr	r3, [r7, #8]
 800bc28:	2b09      	cmp	r3, #9
 800bc2a:	d80e      	bhi.n	800bc4a <get_ldnumber+0x72>
 800bc2c:	68fa      	ldr	r2, [r7, #12]
 800bc2e:	697b      	ldr	r3, [r7, #20]
 800bc30:	429a      	cmp	r2, r3
 800bc32:	d10a      	bne.n	800bc4a <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800bc34:	68bb      	ldr	r3, [r7, #8]
 800bc36:	2b00      	cmp	r3, #0
 800bc38:	d107      	bne.n	800bc4a <get_ldnumber+0x72>
					vol = (int)i;
 800bc3a:	68bb      	ldr	r3, [r7, #8]
 800bc3c:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800bc3e:	697b      	ldr	r3, [r7, #20]
 800bc40:	3301      	adds	r3, #1
 800bc42:	617b      	str	r3, [r7, #20]
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	697a      	ldr	r2, [r7, #20]
 800bc48:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800bc4a:	693b      	ldr	r3, [r7, #16]
 800bc4c:	e002      	b.n	800bc54 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800bc4e:	2300      	movs	r3, #0
 800bc50:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800bc52:	693b      	ldr	r3, [r7, #16]
}
 800bc54:	4618      	mov	r0, r3
 800bc56:	371c      	adds	r7, #28
 800bc58:	46bd      	mov	sp, r7
 800bc5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc5e:	4770      	bx	lr

0800bc60 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800bc60:	b580      	push	{r7, lr}
 800bc62:	b082      	sub	sp, #8
 800bc64:	af00      	add	r7, sp, #0
 800bc66:	6078      	str	r0, [r7, #4]
 800bc68:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	2200      	movs	r2, #0
 800bc6e:	70da      	strb	r2, [r3, #3]
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	f04f 32ff 	mov.w	r2, #4294967295
 800bc76:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800bc78:	6839      	ldr	r1, [r7, #0]
 800bc7a:	6878      	ldr	r0, [r7, #4]
 800bc7c:	f7fe fc76 	bl	800a56c <move_window>
 800bc80:	4603      	mov	r3, r0
 800bc82:	2b00      	cmp	r3, #0
 800bc84:	d001      	beq.n	800bc8a <check_fs+0x2a>
 800bc86:	2304      	movs	r3, #4
 800bc88:	e038      	b.n	800bcfc <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	3338      	adds	r3, #56	; 0x38
 800bc8e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800bc92:	4618      	mov	r0, r3
 800bc94:	f7fe f9f6 	bl	800a084 <ld_word>
 800bc98:	4603      	mov	r3, r0
 800bc9a:	461a      	mov	r2, r3
 800bc9c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800bca0:	429a      	cmp	r2, r3
 800bca2:	d001      	beq.n	800bca8 <check_fs+0x48>
 800bca4:	2303      	movs	r3, #3
 800bca6:	e029      	b.n	800bcfc <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800bcae:	2be9      	cmp	r3, #233	; 0xe9
 800bcb0:	d009      	beq.n	800bcc6 <check_fs+0x66>
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800bcb8:	2beb      	cmp	r3, #235	; 0xeb
 800bcba:	d11e      	bne.n	800bcfa <check_fs+0x9a>
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800bcc2:	2b90      	cmp	r3, #144	; 0x90
 800bcc4:	d119      	bne.n	800bcfa <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	3338      	adds	r3, #56	; 0x38
 800bcca:	3336      	adds	r3, #54	; 0x36
 800bccc:	4618      	mov	r0, r3
 800bcce:	f7fe f9f1 	bl	800a0b4 <ld_dword>
 800bcd2:	4603      	mov	r3, r0
 800bcd4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800bcd8:	4a0a      	ldr	r2, [pc, #40]	; (800bd04 <check_fs+0xa4>)
 800bcda:	4293      	cmp	r3, r2
 800bcdc:	d101      	bne.n	800bce2 <check_fs+0x82>
 800bcde:	2300      	movs	r3, #0
 800bce0:	e00c      	b.n	800bcfc <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	3338      	adds	r3, #56	; 0x38
 800bce6:	3352      	adds	r3, #82	; 0x52
 800bce8:	4618      	mov	r0, r3
 800bcea:	f7fe f9e3 	bl	800a0b4 <ld_dword>
 800bcee:	4603      	mov	r3, r0
 800bcf0:	4a05      	ldr	r2, [pc, #20]	; (800bd08 <check_fs+0xa8>)
 800bcf2:	4293      	cmp	r3, r2
 800bcf4:	d101      	bne.n	800bcfa <check_fs+0x9a>
 800bcf6:	2300      	movs	r3, #0
 800bcf8:	e000      	b.n	800bcfc <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800bcfa:	2302      	movs	r3, #2
}
 800bcfc:	4618      	mov	r0, r3
 800bcfe:	3708      	adds	r7, #8
 800bd00:	46bd      	mov	sp, r7
 800bd02:	bd80      	pop	{r7, pc}
 800bd04:	00544146 	.word	0x00544146
 800bd08:	33544146 	.word	0x33544146

0800bd0c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800bd0c:	b580      	push	{r7, lr}
 800bd0e:	b096      	sub	sp, #88	; 0x58
 800bd10:	af00      	add	r7, sp, #0
 800bd12:	60f8      	str	r0, [r7, #12]
 800bd14:	60b9      	str	r1, [r7, #8]
 800bd16:	4613      	mov	r3, r2
 800bd18:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800bd1a:	68bb      	ldr	r3, [r7, #8]
 800bd1c:	2200      	movs	r2, #0
 800bd1e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800bd20:	68f8      	ldr	r0, [r7, #12]
 800bd22:	f7ff ff59 	bl	800bbd8 <get_ldnumber>
 800bd26:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800bd28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bd2a:	2b00      	cmp	r3, #0
 800bd2c:	da01      	bge.n	800bd32 <find_volume+0x26>
 800bd2e:	230b      	movs	r3, #11
 800bd30:	e265      	b.n	800c1fe <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800bd32:	4a9f      	ldr	r2, [pc, #636]	; (800bfb0 <find_volume+0x2a4>)
 800bd34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bd36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bd3a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800bd3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd3e:	2b00      	cmp	r3, #0
 800bd40:	d101      	bne.n	800bd46 <find_volume+0x3a>
 800bd42:	230c      	movs	r3, #12
 800bd44:	e25b      	b.n	800c1fe <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800bd46:	68bb      	ldr	r3, [r7, #8]
 800bd48:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bd4a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800bd4c:	79fb      	ldrb	r3, [r7, #7]
 800bd4e:	f023 0301 	bic.w	r3, r3, #1
 800bd52:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800bd54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd56:	781b      	ldrb	r3, [r3, #0]
 800bd58:	2b00      	cmp	r3, #0
 800bd5a:	d01a      	beq.n	800bd92 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800bd5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd5e:	785b      	ldrb	r3, [r3, #1]
 800bd60:	4618      	mov	r0, r3
 800bd62:	f7fe f8f1 	bl	8009f48 <disk_status>
 800bd66:	4603      	mov	r3, r0
 800bd68:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800bd6c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800bd70:	f003 0301 	and.w	r3, r3, #1
 800bd74:	2b00      	cmp	r3, #0
 800bd76:	d10c      	bne.n	800bd92 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800bd78:	79fb      	ldrb	r3, [r7, #7]
 800bd7a:	2b00      	cmp	r3, #0
 800bd7c:	d007      	beq.n	800bd8e <find_volume+0x82>
 800bd7e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800bd82:	f003 0304 	and.w	r3, r3, #4
 800bd86:	2b00      	cmp	r3, #0
 800bd88:	d001      	beq.n	800bd8e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800bd8a:	230a      	movs	r3, #10
 800bd8c:	e237      	b.n	800c1fe <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 800bd8e:	2300      	movs	r3, #0
 800bd90:	e235      	b.n	800c1fe <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800bd92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd94:	2200      	movs	r2, #0
 800bd96:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800bd98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bd9a:	b2da      	uxtb	r2, r3
 800bd9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd9e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800bda0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bda2:	785b      	ldrb	r3, [r3, #1]
 800bda4:	4618      	mov	r0, r3
 800bda6:	f7fe f8e9 	bl	8009f7c <disk_initialize>
 800bdaa:	4603      	mov	r3, r0
 800bdac:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800bdb0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800bdb4:	f003 0301 	and.w	r3, r3, #1
 800bdb8:	2b00      	cmp	r3, #0
 800bdba:	d001      	beq.n	800bdc0 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800bdbc:	2303      	movs	r3, #3
 800bdbe:	e21e      	b.n	800c1fe <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800bdc0:	79fb      	ldrb	r3, [r7, #7]
 800bdc2:	2b00      	cmp	r3, #0
 800bdc4:	d007      	beq.n	800bdd6 <find_volume+0xca>
 800bdc6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800bdca:	f003 0304 	and.w	r3, r3, #4
 800bdce:	2b00      	cmp	r3, #0
 800bdd0:	d001      	beq.n	800bdd6 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800bdd2:	230a      	movs	r3, #10
 800bdd4:	e213      	b.n	800c1fe <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800bdd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdd8:	7858      	ldrb	r0, [r3, #1]
 800bdda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bddc:	330c      	adds	r3, #12
 800bdde:	461a      	mov	r2, r3
 800bde0:	2102      	movs	r1, #2
 800bde2:	f7fe f931 	bl	800a048 <disk_ioctl>
 800bde6:	4603      	mov	r3, r0
 800bde8:	2b00      	cmp	r3, #0
 800bdea:	d001      	beq.n	800bdf0 <find_volume+0xe4>
 800bdec:	2301      	movs	r3, #1
 800bdee:	e206      	b.n	800c1fe <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800bdf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdf2:	899b      	ldrh	r3, [r3, #12]
 800bdf4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bdf8:	d80d      	bhi.n	800be16 <find_volume+0x10a>
 800bdfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdfc:	899b      	ldrh	r3, [r3, #12]
 800bdfe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800be02:	d308      	bcc.n	800be16 <find_volume+0x10a>
 800be04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be06:	899b      	ldrh	r3, [r3, #12]
 800be08:	461a      	mov	r2, r3
 800be0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be0c:	899b      	ldrh	r3, [r3, #12]
 800be0e:	3b01      	subs	r3, #1
 800be10:	4013      	ands	r3, r2
 800be12:	2b00      	cmp	r3, #0
 800be14:	d001      	beq.n	800be1a <find_volume+0x10e>
 800be16:	2301      	movs	r3, #1
 800be18:	e1f1      	b.n	800c1fe <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800be1a:	2300      	movs	r3, #0
 800be1c:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800be1e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800be20:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800be22:	f7ff ff1d 	bl	800bc60 <check_fs>
 800be26:	4603      	mov	r3, r0
 800be28:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800be2c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800be30:	2b02      	cmp	r3, #2
 800be32:	d149      	bne.n	800bec8 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800be34:	2300      	movs	r3, #0
 800be36:	643b      	str	r3, [r7, #64]	; 0x40
 800be38:	e01e      	b.n	800be78 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800be3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be3c:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800be40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800be42:	011b      	lsls	r3, r3, #4
 800be44:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800be48:	4413      	add	r3, r2
 800be4a:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800be4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be4e:	3304      	adds	r3, #4
 800be50:	781b      	ldrb	r3, [r3, #0]
 800be52:	2b00      	cmp	r3, #0
 800be54:	d006      	beq.n	800be64 <find_volume+0x158>
 800be56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be58:	3308      	adds	r3, #8
 800be5a:	4618      	mov	r0, r3
 800be5c:	f7fe f92a 	bl	800a0b4 <ld_dword>
 800be60:	4602      	mov	r2, r0
 800be62:	e000      	b.n	800be66 <find_volume+0x15a>
 800be64:	2200      	movs	r2, #0
 800be66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800be68:	009b      	lsls	r3, r3, #2
 800be6a:	3358      	adds	r3, #88	; 0x58
 800be6c:	443b      	add	r3, r7
 800be6e:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800be72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800be74:	3301      	adds	r3, #1
 800be76:	643b      	str	r3, [r7, #64]	; 0x40
 800be78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800be7a:	2b03      	cmp	r3, #3
 800be7c:	d9dd      	bls.n	800be3a <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800be7e:	2300      	movs	r3, #0
 800be80:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800be82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800be84:	2b00      	cmp	r3, #0
 800be86:	d002      	beq.n	800be8e <find_volume+0x182>
 800be88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800be8a:	3b01      	subs	r3, #1
 800be8c:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800be8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800be90:	009b      	lsls	r3, r3, #2
 800be92:	3358      	adds	r3, #88	; 0x58
 800be94:	443b      	add	r3, r7
 800be96:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800be9a:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800be9c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800be9e:	2b00      	cmp	r3, #0
 800bea0:	d005      	beq.n	800beae <find_volume+0x1a2>
 800bea2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800bea4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800bea6:	f7ff fedb 	bl	800bc60 <check_fs>
 800beaa:	4603      	mov	r3, r0
 800beac:	e000      	b.n	800beb0 <find_volume+0x1a4>
 800beae:	2303      	movs	r3, #3
 800beb0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800beb4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800beb8:	2b01      	cmp	r3, #1
 800beba:	d905      	bls.n	800bec8 <find_volume+0x1bc>
 800bebc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bebe:	3301      	adds	r3, #1
 800bec0:	643b      	str	r3, [r7, #64]	; 0x40
 800bec2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bec4:	2b03      	cmp	r3, #3
 800bec6:	d9e2      	bls.n	800be8e <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800bec8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800becc:	2b04      	cmp	r3, #4
 800bece:	d101      	bne.n	800bed4 <find_volume+0x1c8>
 800bed0:	2301      	movs	r3, #1
 800bed2:	e194      	b.n	800c1fe <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800bed4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800bed8:	2b01      	cmp	r3, #1
 800beda:	d901      	bls.n	800bee0 <find_volume+0x1d4>
 800bedc:	230d      	movs	r3, #13
 800bede:	e18e      	b.n	800c1fe <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800bee0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bee2:	3338      	adds	r3, #56	; 0x38
 800bee4:	330b      	adds	r3, #11
 800bee6:	4618      	mov	r0, r3
 800bee8:	f7fe f8cc 	bl	800a084 <ld_word>
 800beec:	4603      	mov	r3, r0
 800beee:	461a      	mov	r2, r3
 800bef0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bef2:	899b      	ldrh	r3, [r3, #12]
 800bef4:	429a      	cmp	r2, r3
 800bef6:	d001      	beq.n	800befc <find_volume+0x1f0>
 800bef8:	230d      	movs	r3, #13
 800befa:	e180      	b.n	800c1fe <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800befc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800befe:	3338      	adds	r3, #56	; 0x38
 800bf00:	3316      	adds	r3, #22
 800bf02:	4618      	mov	r0, r3
 800bf04:	f7fe f8be 	bl	800a084 <ld_word>
 800bf08:	4603      	mov	r3, r0
 800bf0a:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800bf0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bf0e:	2b00      	cmp	r3, #0
 800bf10:	d106      	bne.n	800bf20 <find_volume+0x214>
 800bf12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf14:	3338      	adds	r3, #56	; 0x38
 800bf16:	3324      	adds	r3, #36	; 0x24
 800bf18:	4618      	mov	r0, r3
 800bf1a:	f7fe f8cb 	bl	800a0b4 <ld_dword>
 800bf1e:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800bf20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf22:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800bf24:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800bf26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf28:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800bf2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf2e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800bf30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf32:	789b      	ldrb	r3, [r3, #2]
 800bf34:	2b01      	cmp	r3, #1
 800bf36:	d005      	beq.n	800bf44 <find_volume+0x238>
 800bf38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf3a:	789b      	ldrb	r3, [r3, #2]
 800bf3c:	2b02      	cmp	r3, #2
 800bf3e:	d001      	beq.n	800bf44 <find_volume+0x238>
 800bf40:	230d      	movs	r3, #13
 800bf42:	e15c      	b.n	800c1fe <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800bf44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf46:	789b      	ldrb	r3, [r3, #2]
 800bf48:	461a      	mov	r2, r3
 800bf4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bf4c:	fb02 f303 	mul.w	r3, r2, r3
 800bf50:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800bf52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf54:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bf58:	b29a      	uxth	r2, r3
 800bf5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf5c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800bf5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf60:	895b      	ldrh	r3, [r3, #10]
 800bf62:	2b00      	cmp	r3, #0
 800bf64:	d008      	beq.n	800bf78 <find_volume+0x26c>
 800bf66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf68:	895b      	ldrh	r3, [r3, #10]
 800bf6a:	461a      	mov	r2, r3
 800bf6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf6e:	895b      	ldrh	r3, [r3, #10]
 800bf70:	3b01      	subs	r3, #1
 800bf72:	4013      	ands	r3, r2
 800bf74:	2b00      	cmp	r3, #0
 800bf76:	d001      	beq.n	800bf7c <find_volume+0x270>
 800bf78:	230d      	movs	r3, #13
 800bf7a:	e140      	b.n	800c1fe <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800bf7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf7e:	3338      	adds	r3, #56	; 0x38
 800bf80:	3311      	adds	r3, #17
 800bf82:	4618      	mov	r0, r3
 800bf84:	f7fe f87e 	bl	800a084 <ld_word>
 800bf88:	4603      	mov	r3, r0
 800bf8a:	461a      	mov	r2, r3
 800bf8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf8e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800bf90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf92:	891b      	ldrh	r3, [r3, #8]
 800bf94:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bf96:	8992      	ldrh	r2, [r2, #12]
 800bf98:	0952      	lsrs	r2, r2, #5
 800bf9a:	b292      	uxth	r2, r2
 800bf9c:	fbb3 f1f2 	udiv	r1, r3, r2
 800bfa0:	fb01 f202 	mul.w	r2, r1, r2
 800bfa4:	1a9b      	subs	r3, r3, r2
 800bfa6:	b29b      	uxth	r3, r3
 800bfa8:	2b00      	cmp	r3, #0
 800bfaa:	d003      	beq.n	800bfb4 <find_volume+0x2a8>
 800bfac:	230d      	movs	r3, #13
 800bfae:	e126      	b.n	800c1fe <find_volume+0x4f2>
 800bfb0:	200014f4 	.word	0x200014f4

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800bfb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfb6:	3338      	adds	r3, #56	; 0x38
 800bfb8:	3313      	adds	r3, #19
 800bfba:	4618      	mov	r0, r3
 800bfbc:	f7fe f862 	bl	800a084 <ld_word>
 800bfc0:	4603      	mov	r3, r0
 800bfc2:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800bfc4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bfc6:	2b00      	cmp	r3, #0
 800bfc8:	d106      	bne.n	800bfd8 <find_volume+0x2cc>
 800bfca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfcc:	3338      	adds	r3, #56	; 0x38
 800bfce:	3320      	adds	r3, #32
 800bfd0:	4618      	mov	r0, r3
 800bfd2:	f7fe f86f 	bl	800a0b4 <ld_dword>
 800bfd6:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800bfd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfda:	3338      	adds	r3, #56	; 0x38
 800bfdc:	330e      	adds	r3, #14
 800bfde:	4618      	mov	r0, r3
 800bfe0:	f7fe f850 	bl	800a084 <ld_word>
 800bfe4:	4603      	mov	r3, r0
 800bfe6:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800bfe8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800bfea:	2b00      	cmp	r3, #0
 800bfec:	d101      	bne.n	800bff2 <find_volume+0x2e6>
 800bfee:	230d      	movs	r3, #13
 800bff0:	e105      	b.n	800c1fe <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800bff2:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800bff4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bff6:	4413      	add	r3, r2
 800bff8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bffa:	8911      	ldrh	r1, [r2, #8]
 800bffc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bffe:	8992      	ldrh	r2, [r2, #12]
 800c000:	0952      	lsrs	r2, r2, #5
 800c002:	b292      	uxth	r2, r2
 800c004:	fbb1 f2f2 	udiv	r2, r1, r2
 800c008:	b292      	uxth	r2, r2
 800c00a:	4413      	add	r3, r2
 800c00c:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800c00e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c010:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c012:	429a      	cmp	r2, r3
 800c014:	d201      	bcs.n	800c01a <find_volume+0x30e>
 800c016:	230d      	movs	r3, #13
 800c018:	e0f1      	b.n	800c1fe <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800c01a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c01c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c01e:	1ad3      	subs	r3, r2, r3
 800c020:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c022:	8952      	ldrh	r2, [r2, #10]
 800c024:	fbb3 f3f2 	udiv	r3, r3, r2
 800c028:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800c02a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c02c:	2b00      	cmp	r3, #0
 800c02e:	d101      	bne.n	800c034 <find_volume+0x328>
 800c030:	230d      	movs	r3, #13
 800c032:	e0e4      	b.n	800c1fe <find_volume+0x4f2>
		fmt = FS_FAT32;
 800c034:	2303      	movs	r3, #3
 800c036:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800c03a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c03c:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800c040:	4293      	cmp	r3, r2
 800c042:	d802      	bhi.n	800c04a <find_volume+0x33e>
 800c044:	2302      	movs	r3, #2
 800c046:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800c04a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c04c:	f640 72f5 	movw	r2, #4085	; 0xff5
 800c050:	4293      	cmp	r3, r2
 800c052:	d802      	bhi.n	800c05a <find_volume+0x34e>
 800c054:	2301      	movs	r3, #1
 800c056:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800c05a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c05c:	1c9a      	adds	r2, r3, #2
 800c05e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c060:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 800c062:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c064:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c066:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800c068:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800c06a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c06c:	441a      	add	r2, r3
 800c06e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c070:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 800c072:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c074:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c076:	441a      	add	r2, r3
 800c078:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c07a:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 800c07c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c080:	2b03      	cmp	r3, #3
 800c082:	d11e      	bne.n	800c0c2 <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800c084:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c086:	3338      	adds	r3, #56	; 0x38
 800c088:	332a      	adds	r3, #42	; 0x2a
 800c08a:	4618      	mov	r0, r3
 800c08c:	f7fd fffa 	bl	800a084 <ld_word>
 800c090:	4603      	mov	r3, r0
 800c092:	2b00      	cmp	r3, #0
 800c094:	d001      	beq.n	800c09a <find_volume+0x38e>
 800c096:	230d      	movs	r3, #13
 800c098:	e0b1      	b.n	800c1fe <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800c09a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c09c:	891b      	ldrh	r3, [r3, #8]
 800c09e:	2b00      	cmp	r3, #0
 800c0a0:	d001      	beq.n	800c0a6 <find_volume+0x39a>
 800c0a2:	230d      	movs	r3, #13
 800c0a4:	e0ab      	b.n	800c1fe <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800c0a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0a8:	3338      	adds	r3, #56	; 0x38
 800c0aa:	332c      	adds	r3, #44	; 0x2c
 800c0ac:	4618      	mov	r0, r3
 800c0ae:	f7fe f801 	bl	800a0b4 <ld_dword>
 800c0b2:	4602      	mov	r2, r0
 800c0b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0b6:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800c0b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0ba:	69db      	ldr	r3, [r3, #28]
 800c0bc:	009b      	lsls	r3, r3, #2
 800c0be:	647b      	str	r3, [r7, #68]	; 0x44
 800c0c0:	e01f      	b.n	800c102 <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800c0c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0c4:	891b      	ldrh	r3, [r3, #8]
 800c0c6:	2b00      	cmp	r3, #0
 800c0c8:	d101      	bne.n	800c0ce <find_volume+0x3c2>
 800c0ca:	230d      	movs	r3, #13
 800c0cc:	e097      	b.n	800c1fe <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800c0ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c0d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c0d4:	441a      	add	r2, r3
 800c0d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0d8:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800c0da:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c0de:	2b02      	cmp	r3, #2
 800c0e0:	d103      	bne.n	800c0ea <find_volume+0x3de>
 800c0e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0e4:	69db      	ldr	r3, [r3, #28]
 800c0e6:	005b      	lsls	r3, r3, #1
 800c0e8:	e00a      	b.n	800c100 <find_volume+0x3f4>
 800c0ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0ec:	69da      	ldr	r2, [r3, #28]
 800c0ee:	4613      	mov	r3, r2
 800c0f0:	005b      	lsls	r3, r3, #1
 800c0f2:	4413      	add	r3, r2
 800c0f4:	085a      	lsrs	r2, r3, #1
 800c0f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0f8:	69db      	ldr	r3, [r3, #28]
 800c0fa:	f003 0301 	and.w	r3, r3, #1
 800c0fe:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800c100:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800c102:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c104:	6a1a      	ldr	r2, [r3, #32]
 800c106:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c108:	899b      	ldrh	r3, [r3, #12]
 800c10a:	4619      	mov	r1, r3
 800c10c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c10e:	440b      	add	r3, r1
 800c110:	3b01      	subs	r3, #1
 800c112:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c114:	8989      	ldrh	r1, [r1, #12]
 800c116:	fbb3 f3f1 	udiv	r3, r3, r1
 800c11a:	429a      	cmp	r2, r3
 800c11c:	d201      	bcs.n	800c122 <find_volume+0x416>
 800c11e:	230d      	movs	r3, #13
 800c120:	e06d      	b.n	800c1fe <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800c122:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c124:	f04f 32ff 	mov.w	r2, #4294967295
 800c128:	619a      	str	r2, [r3, #24]
 800c12a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c12c:	699a      	ldr	r2, [r3, #24]
 800c12e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c130:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 800c132:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c134:	2280      	movs	r2, #128	; 0x80
 800c136:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800c138:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c13c:	2b03      	cmp	r3, #3
 800c13e:	d149      	bne.n	800c1d4 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800c140:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c142:	3338      	adds	r3, #56	; 0x38
 800c144:	3330      	adds	r3, #48	; 0x30
 800c146:	4618      	mov	r0, r3
 800c148:	f7fd ff9c 	bl	800a084 <ld_word>
 800c14c:	4603      	mov	r3, r0
 800c14e:	2b01      	cmp	r3, #1
 800c150:	d140      	bne.n	800c1d4 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 800c152:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c154:	3301      	adds	r3, #1
 800c156:	4619      	mov	r1, r3
 800c158:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c15a:	f7fe fa07 	bl	800a56c <move_window>
 800c15e:	4603      	mov	r3, r0
 800c160:	2b00      	cmp	r3, #0
 800c162:	d137      	bne.n	800c1d4 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 800c164:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c166:	2200      	movs	r2, #0
 800c168:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800c16a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c16c:	3338      	adds	r3, #56	; 0x38
 800c16e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800c172:	4618      	mov	r0, r3
 800c174:	f7fd ff86 	bl	800a084 <ld_word>
 800c178:	4603      	mov	r3, r0
 800c17a:	461a      	mov	r2, r3
 800c17c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800c180:	429a      	cmp	r2, r3
 800c182:	d127      	bne.n	800c1d4 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800c184:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c186:	3338      	adds	r3, #56	; 0x38
 800c188:	4618      	mov	r0, r3
 800c18a:	f7fd ff93 	bl	800a0b4 <ld_dword>
 800c18e:	4603      	mov	r3, r0
 800c190:	4a1d      	ldr	r2, [pc, #116]	; (800c208 <find_volume+0x4fc>)
 800c192:	4293      	cmp	r3, r2
 800c194:	d11e      	bne.n	800c1d4 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800c196:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c198:	3338      	adds	r3, #56	; 0x38
 800c19a:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800c19e:	4618      	mov	r0, r3
 800c1a0:	f7fd ff88 	bl	800a0b4 <ld_dword>
 800c1a4:	4603      	mov	r3, r0
 800c1a6:	4a19      	ldr	r2, [pc, #100]	; (800c20c <find_volume+0x500>)
 800c1a8:	4293      	cmp	r3, r2
 800c1aa:	d113      	bne.n	800c1d4 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800c1ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1ae:	3338      	adds	r3, #56	; 0x38
 800c1b0:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800c1b4:	4618      	mov	r0, r3
 800c1b6:	f7fd ff7d 	bl	800a0b4 <ld_dword>
 800c1ba:	4602      	mov	r2, r0
 800c1bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1be:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800c1c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1c2:	3338      	adds	r3, #56	; 0x38
 800c1c4:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800c1c8:	4618      	mov	r0, r3
 800c1ca:	f7fd ff73 	bl	800a0b4 <ld_dword>
 800c1ce:	4602      	mov	r2, r0
 800c1d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1d2:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800c1d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1d6:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800c1da:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800c1dc:	4b0c      	ldr	r3, [pc, #48]	; (800c210 <find_volume+0x504>)
 800c1de:	881b      	ldrh	r3, [r3, #0]
 800c1e0:	3301      	adds	r3, #1
 800c1e2:	b29a      	uxth	r2, r3
 800c1e4:	4b0a      	ldr	r3, [pc, #40]	; (800c210 <find_volume+0x504>)
 800c1e6:	801a      	strh	r2, [r3, #0]
 800c1e8:	4b09      	ldr	r3, [pc, #36]	; (800c210 <find_volume+0x504>)
 800c1ea:	881a      	ldrh	r2, [r3, #0]
 800c1ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1ee:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800c1f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1f2:	4a08      	ldr	r2, [pc, #32]	; (800c214 <find_volume+0x508>)
 800c1f4:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800c1f6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c1f8:	f7fe f950 	bl	800a49c <clear_lock>
#endif
	return FR_OK;
 800c1fc:	2300      	movs	r3, #0
}
 800c1fe:	4618      	mov	r0, r3
 800c200:	3758      	adds	r7, #88	; 0x58
 800c202:	46bd      	mov	sp, r7
 800c204:	bd80      	pop	{r7, pc}
 800c206:	bf00      	nop
 800c208:	41615252 	.word	0x41615252
 800c20c:	61417272 	.word	0x61417272
 800c210:	200014f8 	.word	0x200014f8
 800c214:	2000151c 	.word	0x2000151c

0800c218 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800c218:	b580      	push	{r7, lr}
 800c21a:	b084      	sub	sp, #16
 800c21c:	af00      	add	r7, sp, #0
 800c21e:	6078      	str	r0, [r7, #4]
 800c220:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800c222:	2309      	movs	r3, #9
 800c224:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	2b00      	cmp	r3, #0
 800c22a:	d01c      	beq.n	800c266 <validate+0x4e>
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	681b      	ldr	r3, [r3, #0]
 800c230:	2b00      	cmp	r3, #0
 800c232:	d018      	beq.n	800c266 <validate+0x4e>
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	681b      	ldr	r3, [r3, #0]
 800c238:	781b      	ldrb	r3, [r3, #0]
 800c23a:	2b00      	cmp	r3, #0
 800c23c:	d013      	beq.n	800c266 <validate+0x4e>
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	889a      	ldrh	r2, [r3, #4]
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	681b      	ldr	r3, [r3, #0]
 800c246:	88db      	ldrh	r3, [r3, #6]
 800c248:	429a      	cmp	r2, r3
 800c24a:	d10c      	bne.n	800c266 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	681b      	ldr	r3, [r3, #0]
 800c250:	785b      	ldrb	r3, [r3, #1]
 800c252:	4618      	mov	r0, r3
 800c254:	f7fd fe78 	bl	8009f48 <disk_status>
 800c258:	4603      	mov	r3, r0
 800c25a:	f003 0301 	and.w	r3, r3, #1
 800c25e:	2b00      	cmp	r3, #0
 800c260:	d101      	bne.n	800c266 <validate+0x4e>
			res = FR_OK;
 800c262:	2300      	movs	r3, #0
 800c264:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800c266:	7bfb      	ldrb	r3, [r7, #15]
 800c268:	2b00      	cmp	r3, #0
 800c26a:	d102      	bne.n	800c272 <validate+0x5a>
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	681b      	ldr	r3, [r3, #0]
 800c270:	e000      	b.n	800c274 <validate+0x5c>
 800c272:	2300      	movs	r3, #0
 800c274:	683a      	ldr	r2, [r7, #0]
 800c276:	6013      	str	r3, [r2, #0]
	return res;
 800c278:	7bfb      	ldrb	r3, [r7, #15]
}
 800c27a:	4618      	mov	r0, r3
 800c27c:	3710      	adds	r7, #16
 800c27e:	46bd      	mov	sp, r7
 800c280:	bd80      	pop	{r7, pc}
	...

0800c284 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800c284:	b580      	push	{r7, lr}
 800c286:	b088      	sub	sp, #32
 800c288:	af00      	add	r7, sp, #0
 800c28a:	60f8      	str	r0, [r7, #12]
 800c28c:	60b9      	str	r1, [r7, #8]
 800c28e:	4613      	mov	r3, r2
 800c290:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800c292:	68bb      	ldr	r3, [r7, #8]
 800c294:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800c296:	f107 0310 	add.w	r3, r7, #16
 800c29a:	4618      	mov	r0, r3
 800c29c:	f7ff fc9c 	bl	800bbd8 <get_ldnumber>
 800c2a0:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800c2a2:	69fb      	ldr	r3, [r7, #28]
 800c2a4:	2b00      	cmp	r3, #0
 800c2a6:	da01      	bge.n	800c2ac <f_mount+0x28>
 800c2a8:	230b      	movs	r3, #11
 800c2aa:	e02b      	b.n	800c304 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800c2ac:	4a17      	ldr	r2, [pc, #92]	; (800c30c <f_mount+0x88>)
 800c2ae:	69fb      	ldr	r3, [r7, #28]
 800c2b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c2b4:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800c2b6:	69bb      	ldr	r3, [r7, #24]
 800c2b8:	2b00      	cmp	r3, #0
 800c2ba:	d005      	beq.n	800c2c8 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800c2bc:	69b8      	ldr	r0, [r7, #24]
 800c2be:	f7fe f8ed 	bl	800a49c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800c2c2:	69bb      	ldr	r3, [r7, #24]
 800c2c4:	2200      	movs	r2, #0
 800c2c6:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800c2c8:	68fb      	ldr	r3, [r7, #12]
 800c2ca:	2b00      	cmp	r3, #0
 800c2cc:	d002      	beq.n	800c2d4 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800c2ce:	68fb      	ldr	r3, [r7, #12]
 800c2d0:	2200      	movs	r2, #0
 800c2d2:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800c2d4:	68fa      	ldr	r2, [r7, #12]
 800c2d6:	490d      	ldr	r1, [pc, #52]	; (800c30c <f_mount+0x88>)
 800c2d8:	69fb      	ldr	r3, [r7, #28]
 800c2da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800c2de:	68fb      	ldr	r3, [r7, #12]
 800c2e0:	2b00      	cmp	r3, #0
 800c2e2:	d002      	beq.n	800c2ea <f_mount+0x66>
 800c2e4:	79fb      	ldrb	r3, [r7, #7]
 800c2e6:	2b01      	cmp	r3, #1
 800c2e8:	d001      	beq.n	800c2ee <f_mount+0x6a>
 800c2ea:	2300      	movs	r3, #0
 800c2ec:	e00a      	b.n	800c304 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800c2ee:	f107 010c 	add.w	r1, r7, #12
 800c2f2:	f107 0308 	add.w	r3, r7, #8
 800c2f6:	2200      	movs	r2, #0
 800c2f8:	4618      	mov	r0, r3
 800c2fa:	f7ff fd07 	bl	800bd0c <find_volume>
 800c2fe:	4603      	mov	r3, r0
 800c300:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800c302:	7dfb      	ldrb	r3, [r7, #23]
}
 800c304:	4618      	mov	r0, r3
 800c306:	3720      	adds	r7, #32
 800c308:	46bd      	mov	sp, r7
 800c30a:	bd80      	pop	{r7, pc}
 800c30c:	200014f4 	.word	0x200014f4

0800c310 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800c310:	b580      	push	{r7, lr}
 800c312:	b09a      	sub	sp, #104	; 0x68
 800c314:	af00      	add	r7, sp, #0
 800c316:	60f8      	str	r0, [r7, #12]
 800c318:	60b9      	str	r1, [r7, #8]
 800c31a:	4613      	mov	r3, r2
 800c31c:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800c31e:	68fb      	ldr	r3, [r7, #12]
 800c320:	2b00      	cmp	r3, #0
 800c322:	d101      	bne.n	800c328 <f_open+0x18>
 800c324:	2309      	movs	r3, #9
 800c326:	e1bb      	b.n	800c6a0 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800c328:	79fb      	ldrb	r3, [r7, #7]
 800c32a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c32e:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800c330:	79fa      	ldrb	r2, [r7, #7]
 800c332:	f107 0114 	add.w	r1, r7, #20
 800c336:	f107 0308 	add.w	r3, r7, #8
 800c33a:	4618      	mov	r0, r3
 800c33c:	f7ff fce6 	bl	800bd0c <find_volume>
 800c340:	4603      	mov	r3, r0
 800c342:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 800c346:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800c34a:	2b00      	cmp	r3, #0
 800c34c:	f040 819f 	bne.w	800c68e <f_open+0x37e>
		dj.obj.fs = fs;
 800c350:	697b      	ldr	r3, [r7, #20]
 800c352:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800c354:	68ba      	ldr	r2, [r7, #8]
 800c356:	f107 0318 	add.w	r3, r7, #24
 800c35a:	4611      	mov	r1, r2
 800c35c:	4618      	mov	r0, r3
 800c35e:	f7ff fbc5 	bl	800baec <follow_path>
 800c362:	4603      	mov	r3, r0
 800c364:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800c368:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800c36c:	2b00      	cmp	r3, #0
 800c36e:	d11a      	bne.n	800c3a6 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800c370:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800c374:	b25b      	sxtb	r3, r3
 800c376:	2b00      	cmp	r3, #0
 800c378:	da03      	bge.n	800c382 <f_open+0x72>
				res = FR_INVALID_NAME;
 800c37a:	2306      	movs	r3, #6
 800c37c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800c380:	e011      	b.n	800c3a6 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800c382:	79fb      	ldrb	r3, [r7, #7]
 800c384:	f023 0301 	bic.w	r3, r3, #1
 800c388:	2b00      	cmp	r3, #0
 800c38a:	bf14      	ite	ne
 800c38c:	2301      	movne	r3, #1
 800c38e:	2300      	moveq	r3, #0
 800c390:	b2db      	uxtb	r3, r3
 800c392:	461a      	mov	r2, r3
 800c394:	f107 0318 	add.w	r3, r7, #24
 800c398:	4611      	mov	r1, r2
 800c39a:	4618      	mov	r0, r3
 800c39c:	f7fd ff72 	bl	800a284 <chk_lock>
 800c3a0:	4603      	mov	r3, r0
 800c3a2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800c3a6:	79fb      	ldrb	r3, [r7, #7]
 800c3a8:	f003 031c 	and.w	r3, r3, #28
 800c3ac:	2b00      	cmp	r3, #0
 800c3ae:	d07f      	beq.n	800c4b0 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800c3b0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800c3b4:	2b00      	cmp	r3, #0
 800c3b6:	d017      	beq.n	800c3e8 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800c3b8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800c3bc:	2b04      	cmp	r3, #4
 800c3be:	d10e      	bne.n	800c3de <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800c3c0:	f7fd ffbc 	bl	800a33c <enq_lock>
 800c3c4:	4603      	mov	r3, r0
 800c3c6:	2b00      	cmp	r3, #0
 800c3c8:	d006      	beq.n	800c3d8 <f_open+0xc8>
 800c3ca:	f107 0318 	add.w	r3, r7, #24
 800c3ce:	4618      	mov	r0, r3
 800c3d0:	f7ff f8dc 	bl	800b58c <dir_register>
 800c3d4:	4603      	mov	r3, r0
 800c3d6:	e000      	b.n	800c3da <f_open+0xca>
 800c3d8:	2312      	movs	r3, #18
 800c3da:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800c3de:	79fb      	ldrb	r3, [r7, #7]
 800c3e0:	f043 0308 	orr.w	r3, r3, #8
 800c3e4:	71fb      	strb	r3, [r7, #7]
 800c3e6:	e010      	b.n	800c40a <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800c3e8:	7fbb      	ldrb	r3, [r7, #30]
 800c3ea:	f003 0311 	and.w	r3, r3, #17
 800c3ee:	2b00      	cmp	r3, #0
 800c3f0:	d003      	beq.n	800c3fa <f_open+0xea>
					res = FR_DENIED;
 800c3f2:	2307      	movs	r3, #7
 800c3f4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800c3f8:	e007      	b.n	800c40a <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800c3fa:	79fb      	ldrb	r3, [r7, #7]
 800c3fc:	f003 0304 	and.w	r3, r3, #4
 800c400:	2b00      	cmp	r3, #0
 800c402:	d002      	beq.n	800c40a <f_open+0xfa>
 800c404:	2308      	movs	r3, #8
 800c406:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800c40a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800c40e:	2b00      	cmp	r3, #0
 800c410:	d168      	bne.n	800c4e4 <f_open+0x1d4>
 800c412:	79fb      	ldrb	r3, [r7, #7]
 800c414:	f003 0308 	and.w	r3, r3, #8
 800c418:	2b00      	cmp	r3, #0
 800c41a:	d063      	beq.n	800c4e4 <f_open+0x1d4>
				dw = GET_FATTIME();
 800c41c:	f7fd fb52 	bl	8009ac4 <get_fattime>
 800c420:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800c422:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c424:	330e      	adds	r3, #14
 800c426:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800c428:	4618      	mov	r0, r3
 800c42a:	f7fd fe81 	bl	800a130 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800c42e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c430:	3316      	adds	r3, #22
 800c432:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800c434:	4618      	mov	r0, r3
 800c436:	f7fd fe7b 	bl	800a130 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800c43a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c43c:	330b      	adds	r3, #11
 800c43e:	2220      	movs	r2, #32
 800c440:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800c442:	697b      	ldr	r3, [r7, #20]
 800c444:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c446:	4611      	mov	r1, r2
 800c448:	4618      	mov	r0, r3
 800c44a:	f7fe fe17 	bl	800b07c <ld_clust>
 800c44e:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800c450:	697b      	ldr	r3, [r7, #20]
 800c452:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c454:	2200      	movs	r2, #0
 800c456:	4618      	mov	r0, r3
 800c458:	f7fe fe2f 	bl	800b0ba <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800c45c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c45e:	331c      	adds	r3, #28
 800c460:	2100      	movs	r1, #0
 800c462:	4618      	mov	r0, r3
 800c464:	f7fd fe64 	bl	800a130 <st_dword>
					fs->wflag = 1;
 800c468:	697b      	ldr	r3, [r7, #20]
 800c46a:	2201      	movs	r2, #1
 800c46c:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800c46e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c470:	2b00      	cmp	r3, #0
 800c472:	d037      	beq.n	800c4e4 <f_open+0x1d4>
						dw = fs->winsect;
 800c474:	697b      	ldr	r3, [r7, #20]
 800c476:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c478:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 800c47a:	f107 0318 	add.w	r3, r7, #24
 800c47e:	2200      	movs	r2, #0
 800c480:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c482:	4618      	mov	r0, r3
 800c484:	f7fe fb1f 	bl	800aac6 <remove_chain>
 800c488:	4603      	mov	r3, r0
 800c48a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 800c48e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800c492:	2b00      	cmp	r3, #0
 800c494:	d126      	bne.n	800c4e4 <f_open+0x1d4>
							res = move_window(fs, dw);
 800c496:	697b      	ldr	r3, [r7, #20]
 800c498:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800c49a:	4618      	mov	r0, r3
 800c49c:	f7fe f866 	bl	800a56c <move_window>
 800c4a0:	4603      	mov	r3, r0
 800c4a2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800c4a6:	697b      	ldr	r3, [r7, #20]
 800c4a8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c4aa:	3a01      	subs	r2, #1
 800c4ac:	615a      	str	r2, [r3, #20]
 800c4ae:	e019      	b.n	800c4e4 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800c4b0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800c4b4:	2b00      	cmp	r3, #0
 800c4b6:	d115      	bne.n	800c4e4 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800c4b8:	7fbb      	ldrb	r3, [r7, #30]
 800c4ba:	f003 0310 	and.w	r3, r3, #16
 800c4be:	2b00      	cmp	r3, #0
 800c4c0:	d003      	beq.n	800c4ca <f_open+0x1ba>
					res = FR_NO_FILE;
 800c4c2:	2304      	movs	r3, #4
 800c4c4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800c4c8:	e00c      	b.n	800c4e4 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800c4ca:	79fb      	ldrb	r3, [r7, #7]
 800c4cc:	f003 0302 	and.w	r3, r3, #2
 800c4d0:	2b00      	cmp	r3, #0
 800c4d2:	d007      	beq.n	800c4e4 <f_open+0x1d4>
 800c4d4:	7fbb      	ldrb	r3, [r7, #30]
 800c4d6:	f003 0301 	and.w	r3, r3, #1
 800c4da:	2b00      	cmp	r3, #0
 800c4dc:	d002      	beq.n	800c4e4 <f_open+0x1d4>
						res = FR_DENIED;
 800c4de:	2307      	movs	r3, #7
 800c4e0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 800c4e4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800c4e8:	2b00      	cmp	r3, #0
 800c4ea:	d128      	bne.n	800c53e <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800c4ec:	79fb      	ldrb	r3, [r7, #7]
 800c4ee:	f003 0308 	and.w	r3, r3, #8
 800c4f2:	2b00      	cmp	r3, #0
 800c4f4:	d003      	beq.n	800c4fe <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800c4f6:	79fb      	ldrb	r3, [r7, #7]
 800c4f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c4fc:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800c4fe:	697b      	ldr	r3, [r7, #20]
 800c500:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c502:	68fb      	ldr	r3, [r7, #12]
 800c504:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800c506:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c508:	68fb      	ldr	r3, [r7, #12]
 800c50a:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800c50c:	79fb      	ldrb	r3, [r7, #7]
 800c50e:	f023 0301 	bic.w	r3, r3, #1
 800c512:	2b00      	cmp	r3, #0
 800c514:	bf14      	ite	ne
 800c516:	2301      	movne	r3, #1
 800c518:	2300      	moveq	r3, #0
 800c51a:	b2db      	uxtb	r3, r3
 800c51c:	461a      	mov	r2, r3
 800c51e:	f107 0318 	add.w	r3, r7, #24
 800c522:	4611      	mov	r1, r2
 800c524:	4618      	mov	r0, r3
 800c526:	f7fd ff2b 	bl	800a380 <inc_lock>
 800c52a:	4602      	mov	r2, r0
 800c52c:	68fb      	ldr	r3, [r7, #12]
 800c52e:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800c530:	68fb      	ldr	r3, [r7, #12]
 800c532:	691b      	ldr	r3, [r3, #16]
 800c534:	2b00      	cmp	r3, #0
 800c536:	d102      	bne.n	800c53e <f_open+0x22e>
 800c538:	2302      	movs	r3, #2
 800c53a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800c53e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800c542:	2b00      	cmp	r3, #0
 800c544:	f040 80a3 	bne.w	800c68e <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800c548:	697b      	ldr	r3, [r7, #20]
 800c54a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c54c:	4611      	mov	r1, r2
 800c54e:	4618      	mov	r0, r3
 800c550:	f7fe fd94 	bl	800b07c <ld_clust>
 800c554:	4602      	mov	r2, r0
 800c556:	68fb      	ldr	r3, [r7, #12]
 800c558:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800c55a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c55c:	331c      	adds	r3, #28
 800c55e:	4618      	mov	r0, r3
 800c560:	f7fd fda8 	bl	800a0b4 <ld_dword>
 800c564:	4602      	mov	r2, r0
 800c566:	68fb      	ldr	r3, [r7, #12]
 800c568:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800c56a:	68fb      	ldr	r3, [r7, #12]
 800c56c:	2200      	movs	r2, #0
 800c56e:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800c570:	697a      	ldr	r2, [r7, #20]
 800c572:	68fb      	ldr	r3, [r7, #12]
 800c574:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800c576:	697b      	ldr	r3, [r7, #20]
 800c578:	88da      	ldrh	r2, [r3, #6]
 800c57a:	68fb      	ldr	r3, [r7, #12]
 800c57c:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800c57e:	68fb      	ldr	r3, [r7, #12]
 800c580:	79fa      	ldrb	r2, [r7, #7]
 800c582:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800c584:	68fb      	ldr	r3, [r7, #12]
 800c586:	2200      	movs	r2, #0
 800c588:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800c58a:	68fb      	ldr	r3, [r7, #12]
 800c58c:	2200      	movs	r2, #0
 800c58e:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800c590:	68fb      	ldr	r3, [r7, #12]
 800c592:	2200      	movs	r2, #0
 800c594:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800c596:	68fb      	ldr	r3, [r7, #12]
 800c598:	3330      	adds	r3, #48	; 0x30
 800c59a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800c59e:	2100      	movs	r1, #0
 800c5a0:	4618      	mov	r0, r3
 800c5a2:	f7fd fe12 	bl	800a1ca <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800c5a6:	79fb      	ldrb	r3, [r7, #7]
 800c5a8:	f003 0320 	and.w	r3, r3, #32
 800c5ac:	2b00      	cmp	r3, #0
 800c5ae:	d06e      	beq.n	800c68e <f_open+0x37e>
 800c5b0:	68fb      	ldr	r3, [r7, #12]
 800c5b2:	68db      	ldr	r3, [r3, #12]
 800c5b4:	2b00      	cmp	r3, #0
 800c5b6:	d06a      	beq.n	800c68e <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800c5b8:	68fb      	ldr	r3, [r7, #12]
 800c5ba:	68da      	ldr	r2, [r3, #12]
 800c5bc:	68fb      	ldr	r3, [r7, #12]
 800c5be:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800c5c0:	697b      	ldr	r3, [r7, #20]
 800c5c2:	895b      	ldrh	r3, [r3, #10]
 800c5c4:	461a      	mov	r2, r3
 800c5c6:	697b      	ldr	r3, [r7, #20]
 800c5c8:	899b      	ldrh	r3, [r3, #12]
 800c5ca:	fb02 f303 	mul.w	r3, r2, r3
 800c5ce:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800c5d0:	68fb      	ldr	r3, [r7, #12]
 800c5d2:	689b      	ldr	r3, [r3, #8]
 800c5d4:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800c5d6:	68fb      	ldr	r3, [r7, #12]
 800c5d8:	68db      	ldr	r3, [r3, #12]
 800c5da:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c5dc:	e016      	b.n	800c60c <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 800c5de:	68fb      	ldr	r3, [r7, #12]
 800c5e0:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800c5e2:	4618      	mov	r0, r3
 800c5e4:	f7fe f87f 	bl	800a6e6 <get_fat>
 800c5e8:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800c5ea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c5ec:	2b01      	cmp	r3, #1
 800c5ee:	d802      	bhi.n	800c5f6 <f_open+0x2e6>
 800c5f0:	2302      	movs	r3, #2
 800c5f2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800c5f6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c5f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c5fc:	d102      	bne.n	800c604 <f_open+0x2f4>
 800c5fe:	2301      	movs	r3, #1
 800c600:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800c604:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800c606:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c608:	1ad3      	subs	r3, r2, r3
 800c60a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c60c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800c610:	2b00      	cmp	r3, #0
 800c612:	d103      	bne.n	800c61c <f_open+0x30c>
 800c614:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800c616:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c618:	429a      	cmp	r2, r3
 800c61a:	d8e0      	bhi.n	800c5de <f_open+0x2ce>
				}
				fp->clust = clst;
 800c61c:	68fb      	ldr	r3, [r7, #12]
 800c61e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c620:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800c622:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800c626:	2b00      	cmp	r3, #0
 800c628:	d131      	bne.n	800c68e <f_open+0x37e>
 800c62a:	697b      	ldr	r3, [r7, #20]
 800c62c:	899b      	ldrh	r3, [r3, #12]
 800c62e:	461a      	mov	r2, r3
 800c630:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c632:	fbb3 f1f2 	udiv	r1, r3, r2
 800c636:	fb01 f202 	mul.w	r2, r1, r2
 800c63a:	1a9b      	subs	r3, r3, r2
 800c63c:	2b00      	cmp	r3, #0
 800c63e:	d026      	beq.n	800c68e <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800c640:	697b      	ldr	r3, [r7, #20]
 800c642:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800c644:	4618      	mov	r0, r3
 800c646:	f7fe f82f 	bl	800a6a8 <clust2sect>
 800c64a:	64f8      	str	r0, [r7, #76]	; 0x4c
 800c64c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c64e:	2b00      	cmp	r3, #0
 800c650:	d103      	bne.n	800c65a <f_open+0x34a>
						res = FR_INT_ERR;
 800c652:	2302      	movs	r3, #2
 800c654:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800c658:	e019      	b.n	800c68e <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800c65a:	697b      	ldr	r3, [r7, #20]
 800c65c:	899b      	ldrh	r3, [r3, #12]
 800c65e:	461a      	mov	r2, r3
 800c660:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c662:	fbb3 f2f2 	udiv	r2, r3, r2
 800c666:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c668:	441a      	add	r2, r3
 800c66a:	68fb      	ldr	r3, [r7, #12]
 800c66c:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800c66e:	697b      	ldr	r3, [r7, #20]
 800c670:	7858      	ldrb	r0, [r3, #1]
 800c672:	68fb      	ldr	r3, [r7, #12]
 800c674:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c678:	68fb      	ldr	r3, [r7, #12]
 800c67a:	6a1a      	ldr	r2, [r3, #32]
 800c67c:	2301      	movs	r3, #1
 800c67e:	f7fd fca3 	bl	8009fc8 <disk_read>
 800c682:	4603      	mov	r3, r0
 800c684:	2b00      	cmp	r3, #0
 800c686:	d002      	beq.n	800c68e <f_open+0x37e>
 800c688:	2301      	movs	r3, #1
 800c68a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800c68e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800c692:	2b00      	cmp	r3, #0
 800c694:	d002      	beq.n	800c69c <f_open+0x38c>
 800c696:	68fb      	ldr	r3, [r7, #12]
 800c698:	2200      	movs	r2, #0
 800c69a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800c69c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800c6a0:	4618      	mov	r0, r3
 800c6a2:	3768      	adds	r7, #104	; 0x68
 800c6a4:	46bd      	mov	sp, r7
 800c6a6:	bd80      	pop	{r7, pc}

0800c6a8 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800c6a8:	b580      	push	{r7, lr}
 800c6aa:	b08c      	sub	sp, #48	; 0x30
 800c6ac:	af00      	add	r7, sp, #0
 800c6ae:	60f8      	str	r0, [r7, #12]
 800c6b0:	60b9      	str	r1, [r7, #8]
 800c6b2:	607a      	str	r2, [r7, #4]
 800c6b4:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800c6b6:	68bb      	ldr	r3, [r7, #8]
 800c6b8:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800c6ba:	683b      	ldr	r3, [r7, #0]
 800c6bc:	2200      	movs	r2, #0
 800c6be:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800c6c0:	68fb      	ldr	r3, [r7, #12]
 800c6c2:	f107 0210 	add.w	r2, r7, #16
 800c6c6:	4611      	mov	r1, r2
 800c6c8:	4618      	mov	r0, r3
 800c6ca:	f7ff fda5 	bl	800c218 <validate>
 800c6ce:	4603      	mov	r3, r0
 800c6d0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800c6d4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c6d8:	2b00      	cmp	r3, #0
 800c6da:	d107      	bne.n	800c6ec <f_write+0x44>
 800c6dc:	68fb      	ldr	r3, [r7, #12]
 800c6de:	7d5b      	ldrb	r3, [r3, #21]
 800c6e0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800c6e4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c6e8:	2b00      	cmp	r3, #0
 800c6ea:	d002      	beq.n	800c6f2 <f_write+0x4a>
 800c6ec:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c6f0:	e16a      	b.n	800c9c8 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800c6f2:	68fb      	ldr	r3, [r7, #12]
 800c6f4:	7d1b      	ldrb	r3, [r3, #20]
 800c6f6:	f003 0302 	and.w	r3, r3, #2
 800c6fa:	2b00      	cmp	r3, #0
 800c6fc:	d101      	bne.n	800c702 <f_write+0x5a>
 800c6fe:	2307      	movs	r3, #7
 800c700:	e162      	b.n	800c9c8 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800c702:	68fb      	ldr	r3, [r7, #12]
 800c704:	699a      	ldr	r2, [r3, #24]
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	441a      	add	r2, r3
 800c70a:	68fb      	ldr	r3, [r7, #12]
 800c70c:	699b      	ldr	r3, [r3, #24]
 800c70e:	429a      	cmp	r2, r3
 800c710:	f080 814c 	bcs.w	800c9ac <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800c714:	68fb      	ldr	r3, [r7, #12]
 800c716:	699b      	ldr	r3, [r3, #24]
 800c718:	43db      	mvns	r3, r3
 800c71a:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800c71c:	e146      	b.n	800c9ac <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800c71e:	68fb      	ldr	r3, [r7, #12]
 800c720:	699b      	ldr	r3, [r3, #24]
 800c722:	693a      	ldr	r2, [r7, #16]
 800c724:	8992      	ldrh	r2, [r2, #12]
 800c726:	fbb3 f1f2 	udiv	r1, r3, r2
 800c72a:	fb01 f202 	mul.w	r2, r1, r2
 800c72e:	1a9b      	subs	r3, r3, r2
 800c730:	2b00      	cmp	r3, #0
 800c732:	f040 80f1 	bne.w	800c918 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800c736:	68fb      	ldr	r3, [r7, #12]
 800c738:	699b      	ldr	r3, [r3, #24]
 800c73a:	693a      	ldr	r2, [r7, #16]
 800c73c:	8992      	ldrh	r2, [r2, #12]
 800c73e:	fbb3 f3f2 	udiv	r3, r3, r2
 800c742:	693a      	ldr	r2, [r7, #16]
 800c744:	8952      	ldrh	r2, [r2, #10]
 800c746:	3a01      	subs	r2, #1
 800c748:	4013      	ands	r3, r2
 800c74a:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800c74c:	69bb      	ldr	r3, [r7, #24]
 800c74e:	2b00      	cmp	r3, #0
 800c750:	d143      	bne.n	800c7da <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800c752:	68fb      	ldr	r3, [r7, #12]
 800c754:	699b      	ldr	r3, [r3, #24]
 800c756:	2b00      	cmp	r3, #0
 800c758:	d10c      	bne.n	800c774 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800c75a:	68fb      	ldr	r3, [r7, #12]
 800c75c:	689b      	ldr	r3, [r3, #8]
 800c75e:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800c760:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c762:	2b00      	cmp	r3, #0
 800c764:	d11a      	bne.n	800c79c <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800c766:	68fb      	ldr	r3, [r7, #12]
 800c768:	2100      	movs	r1, #0
 800c76a:	4618      	mov	r0, r3
 800c76c:	f7fe fa10 	bl	800ab90 <create_chain>
 800c770:	62b8      	str	r0, [r7, #40]	; 0x28
 800c772:	e013      	b.n	800c79c <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800c774:	68fb      	ldr	r3, [r7, #12]
 800c776:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c778:	2b00      	cmp	r3, #0
 800c77a:	d007      	beq.n	800c78c <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800c77c:	68fb      	ldr	r3, [r7, #12]
 800c77e:	699b      	ldr	r3, [r3, #24]
 800c780:	4619      	mov	r1, r3
 800c782:	68f8      	ldr	r0, [r7, #12]
 800c784:	f7fe fa9c 	bl	800acc0 <clmt_clust>
 800c788:	62b8      	str	r0, [r7, #40]	; 0x28
 800c78a:	e007      	b.n	800c79c <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800c78c:	68fa      	ldr	r2, [r7, #12]
 800c78e:	68fb      	ldr	r3, [r7, #12]
 800c790:	69db      	ldr	r3, [r3, #28]
 800c792:	4619      	mov	r1, r3
 800c794:	4610      	mov	r0, r2
 800c796:	f7fe f9fb 	bl	800ab90 <create_chain>
 800c79a:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800c79c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c79e:	2b00      	cmp	r3, #0
 800c7a0:	f000 8109 	beq.w	800c9b6 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800c7a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7a6:	2b01      	cmp	r3, #1
 800c7a8:	d104      	bne.n	800c7b4 <f_write+0x10c>
 800c7aa:	68fb      	ldr	r3, [r7, #12]
 800c7ac:	2202      	movs	r2, #2
 800c7ae:	755a      	strb	r2, [r3, #21]
 800c7b0:	2302      	movs	r3, #2
 800c7b2:	e109      	b.n	800c9c8 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800c7b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c7ba:	d104      	bne.n	800c7c6 <f_write+0x11e>
 800c7bc:	68fb      	ldr	r3, [r7, #12]
 800c7be:	2201      	movs	r2, #1
 800c7c0:	755a      	strb	r2, [r3, #21]
 800c7c2:	2301      	movs	r3, #1
 800c7c4:	e100      	b.n	800c9c8 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 800c7c6:	68fb      	ldr	r3, [r7, #12]
 800c7c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c7ca:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800c7cc:	68fb      	ldr	r3, [r7, #12]
 800c7ce:	689b      	ldr	r3, [r3, #8]
 800c7d0:	2b00      	cmp	r3, #0
 800c7d2:	d102      	bne.n	800c7da <f_write+0x132>
 800c7d4:	68fb      	ldr	r3, [r7, #12]
 800c7d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c7d8:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800c7da:	68fb      	ldr	r3, [r7, #12]
 800c7dc:	7d1b      	ldrb	r3, [r3, #20]
 800c7de:	b25b      	sxtb	r3, r3
 800c7e0:	2b00      	cmp	r3, #0
 800c7e2:	da18      	bge.n	800c816 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c7e4:	693b      	ldr	r3, [r7, #16]
 800c7e6:	7858      	ldrb	r0, [r3, #1]
 800c7e8:	68fb      	ldr	r3, [r7, #12]
 800c7ea:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c7ee:	68fb      	ldr	r3, [r7, #12]
 800c7f0:	6a1a      	ldr	r2, [r3, #32]
 800c7f2:	2301      	movs	r3, #1
 800c7f4:	f7fd fc08 	bl	800a008 <disk_write>
 800c7f8:	4603      	mov	r3, r0
 800c7fa:	2b00      	cmp	r3, #0
 800c7fc:	d004      	beq.n	800c808 <f_write+0x160>
 800c7fe:	68fb      	ldr	r3, [r7, #12]
 800c800:	2201      	movs	r2, #1
 800c802:	755a      	strb	r2, [r3, #21]
 800c804:	2301      	movs	r3, #1
 800c806:	e0df      	b.n	800c9c8 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 800c808:	68fb      	ldr	r3, [r7, #12]
 800c80a:	7d1b      	ldrb	r3, [r3, #20]
 800c80c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c810:	b2da      	uxtb	r2, r3
 800c812:	68fb      	ldr	r3, [r7, #12]
 800c814:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800c816:	693a      	ldr	r2, [r7, #16]
 800c818:	68fb      	ldr	r3, [r7, #12]
 800c81a:	69db      	ldr	r3, [r3, #28]
 800c81c:	4619      	mov	r1, r3
 800c81e:	4610      	mov	r0, r2
 800c820:	f7fd ff42 	bl	800a6a8 <clust2sect>
 800c824:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800c826:	697b      	ldr	r3, [r7, #20]
 800c828:	2b00      	cmp	r3, #0
 800c82a:	d104      	bne.n	800c836 <f_write+0x18e>
 800c82c:	68fb      	ldr	r3, [r7, #12]
 800c82e:	2202      	movs	r2, #2
 800c830:	755a      	strb	r2, [r3, #21]
 800c832:	2302      	movs	r3, #2
 800c834:	e0c8      	b.n	800c9c8 <f_write+0x320>
			sect += csect;
 800c836:	697a      	ldr	r2, [r7, #20]
 800c838:	69bb      	ldr	r3, [r7, #24]
 800c83a:	4413      	add	r3, r2
 800c83c:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800c83e:	693b      	ldr	r3, [r7, #16]
 800c840:	899b      	ldrh	r3, [r3, #12]
 800c842:	461a      	mov	r2, r3
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	fbb3 f3f2 	udiv	r3, r3, r2
 800c84a:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800c84c:	6a3b      	ldr	r3, [r7, #32]
 800c84e:	2b00      	cmp	r3, #0
 800c850:	d043      	beq.n	800c8da <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800c852:	69ba      	ldr	r2, [r7, #24]
 800c854:	6a3b      	ldr	r3, [r7, #32]
 800c856:	4413      	add	r3, r2
 800c858:	693a      	ldr	r2, [r7, #16]
 800c85a:	8952      	ldrh	r2, [r2, #10]
 800c85c:	4293      	cmp	r3, r2
 800c85e:	d905      	bls.n	800c86c <f_write+0x1c4>
					cc = fs->csize - csect;
 800c860:	693b      	ldr	r3, [r7, #16]
 800c862:	895b      	ldrh	r3, [r3, #10]
 800c864:	461a      	mov	r2, r3
 800c866:	69bb      	ldr	r3, [r7, #24]
 800c868:	1ad3      	subs	r3, r2, r3
 800c86a:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c86c:	693b      	ldr	r3, [r7, #16]
 800c86e:	7858      	ldrb	r0, [r3, #1]
 800c870:	6a3b      	ldr	r3, [r7, #32]
 800c872:	697a      	ldr	r2, [r7, #20]
 800c874:	69f9      	ldr	r1, [r7, #28]
 800c876:	f7fd fbc7 	bl	800a008 <disk_write>
 800c87a:	4603      	mov	r3, r0
 800c87c:	2b00      	cmp	r3, #0
 800c87e:	d004      	beq.n	800c88a <f_write+0x1e2>
 800c880:	68fb      	ldr	r3, [r7, #12]
 800c882:	2201      	movs	r2, #1
 800c884:	755a      	strb	r2, [r3, #21]
 800c886:	2301      	movs	r3, #1
 800c888:	e09e      	b.n	800c9c8 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800c88a:	68fb      	ldr	r3, [r7, #12]
 800c88c:	6a1a      	ldr	r2, [r3, #32]
 800c88e:	697b      	ldr	r3, [r7, #20]
 800c890:	1ad3      	subs	r3, r2, r3
 800c892:	6a3a      	ldr	r2, [r7, #32]
 800c894:	429a      	cmp	r2, r3
 800c896:	d918      	bls.n	800c8ca <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800c898:	68fb      	ldr	r3, [r7, #12]
 800c89a:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800c89e:	68fb      	ldr	r3, [r7, #12]
 800c8a0:	6a1a      	ldr	r2, [r3, #32]
 800c8a2:	697b      	ldr	r3, [r7, #20]
 800c8a4:	1ad3      	subs	r3, r2, r3
 800c8a6:	693a      	ldr	r2, [r7, #16]
 800c8a8:	8992      	ldrh	r2, [r2, #12]
 800c8aa:	fb02 f303 	mul.w	r3, r2, r3
 800c8ae:	69fa      	ldr	r2, [r7, #28]
 800c8b0:	18d1      	adds	r1, r2, r3
 800c8b2:	693b      	ldr	r3, [r7, #16]
 800c8b4:	899b      	ldrh	r3, [r3, #12]
 800c8b6:	461a      	mov	r2, r3
 800c8b8:	f7fd fc66 	bl	800a188 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800c8bc:	68fb      	ldr	r3, [r7, #12]
 800c8be:	7d1b      	ldrb	r3, [r3, #20]
 800c8c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c8c4:	b2da      	uxtb	r2, r3
 800c8c6:	68fb      	ldr	r3, [r7, #12]
 800c8c8:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800c8ca:	693b      	ldr	r3, [r7, #16]
 800c8cc:	899b      	ldrh	r3, [r3, #12]
 800c8ce:	461a      	mov	r2, r3
 800c8d0:	6a3b      	ldr	r3, [r7, #32]
 800c8d2:	fb02 f303 	mul.w	r3, r2, r3
 800c8d6:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800c8d8:	e04b      	b.n	800c972 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800c8da:	68fb      	ldr	r3, [r7, #12]
 800c8dc:	6a1b      	ldr	r3, [r3, #32]
 800c8de:	697a      	ldr	r2, [r7, #20]
 800c8e0:	429a      	cmp	r2, r3
 800c8e2:	d016      	beq.n	800c912 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 800c8e4:	68fb      	ldr	r3, [r7, #12]
 800c8e6:	699a      	ldr	r2, [r3, #24]
 800c8e8:	68fb      	ldr	r3, [r7, #12]
 800c8ea:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800c8ec:	429a      	cmp	r2, r3
 800c8ee:	d210      	bcs.n	800c912 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800c8f0:	693b      	ldr	r3, [r7, #16]
 800c8f2:	7858      	ldrb	r0, [r3, #1]
 800c8f4:	68fb      	ldr	r3, [r7, #12]
 800c8f6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c8fa:	2301      	movs	r3, #1
 800c8fc:	697a      	ldr	r2, [r7, #20]
 800c8fe:	f7fd fb63 	bl	8009fc8 <disk_read>
 800c902:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800c904:	2b00      	cmp	r3, #0
 800c906:	d004      	beq.n	800c912 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 800c908:	68fb      	ldr	r3, [r7, #12]
 800c90a:	2201      	movs	r2, #1
 800c90c:	755a      	strb	r2, [r3, #21]
 800c90e:	2301      	movs	r3, #1
 800c910:	e05a      	b.n	800c9c8 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 800c912:	68fb      	ldr	r3, [r7, #12]
 800c914:	697a      	ldr	r2, [r7, #20]
 800c916:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800c918:	693b      	ldr	r3, [r7, #16]
 800c91a:	899b      	ldrh	r3, [r3, #12]
 800c91c:	4618      	mov	r0, r3
 800c91e:	68fb      	ldr	r3, [r7, #12]
 800c920:	699b      	ldr	r3, [r3, #24]
 800c922:	693a      	ldr	r2, [r7, #16]
 800c924:	8992      	ldrh	r2, [r2, #12]
 800c926:	fbb3 f1f2 	udiv	r1, r3, r2
 800c92a:	fb01 f202 	mul.w	r2, r1, r2
 800c92e:	1a9b      	subs	r3, r3, r2
 800c930:	1ac3      	subs	r3, r0, r3
 800c932:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800c934:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	429a      	cmp	r2, r3
 800c93a:	d901      	bls.n	800c940 <f_write+0x298>
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800c940:	68fb      	ldr	r3, [r7, #12]
 800c942:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c946:	68fb      	ldr	r3, [r7, #12]
 800c948:	699b      	ldr	r3, [r3, #24]
 800c94a:	693a      	ldr	r2, [r7, #16]
 800c94c:	8992      	ldrh	r2, [r2, #12]
 800c94e:	fbb3 f0f2 	udiv	r0, r3, r2
 800c952:	fb00 f202 	mul.w	r2, r0, r2
 800c956:	1a9b      	subs	r3, r3, r2
 800c958:	440b      	add	r3, r1
 800c95a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c95c:	69f9      	ldr	r1, [r7, #28]
 800c95e:	4618      	mov	r0, r3
 800c960:	f7fd fc12 	bl	800a188 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800c964:	68fb      	ldr	r3, [r7, #12]
 800c966:	7d1b      	ldrb	r3, [r3, #20]
 800c968:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800c96c:	b2da      	uxtb	r2, r3
 800c96e:	68fb      	ldr	r3, [r7, #12]
 800c970:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800c972:	69fa      	ldr	r2, [r7, #28]
 800c974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c976:	4413      	add	r3, r2
 800c978:	61fb      	str	r3, [r7, #28]
 800c97a:	68fb      	ldr	r3, [r7, #12]
 800c97c:	699a      	ldr	r2, [r3, #24]
 800c97e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c980:	441a      	add	r2, r3
 800c982:	68fb      	ldr	r3, [r7, #12]
 800c984:	619a      	str	r2, [r3, #24]
 800c986:	68fb      	ldr	r3, [r7, #12]
 800c988:	68da      	ldr	r2, [r3, #12]
 800c98a:	68fb      	ldr	r3, [r7, #12]
 800c98c:	699b      	ldr	r3, [r3, #24]
 800c98e:	429a      	cmp	r2, r3
 800c990:	bf38      	it	cc
 800c992:	461a      	movcc	r2, r3
 800c994:	68fb      	ldr	r3, [r7, #12]
 800c996:	60da      	str	r2, [r3, #12]
 800c998:	683b      	ldr	r3, [r7, #0]
 800c99a:	681a      	ldr	r2, [r3, #0]
 800c99c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c99e:	441a      	add	r2, r3
 800c9a0:	683b      	ldr	r3, [r7, #0]
 800c9a2:	601a      	str	r2, [r3, #0]
 800c9a4:	687a      	ldr	r2, [r7, #4]
 800c9a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9a8:	1ad3      	subs	r3, r2, r3
 800c9aa:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	2b00      	cmp	r3, #0
 800c9b0:	f47f aeb5 	bne.w	800c71e <f_write+0x76>
 800c9b4:	e000      	b.n	800c9b8 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800c9b6:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800c9b8:	68fb      	ldr	r3, [r7, #12]
 800c9ba:	7d1b      	ldrb	r3, [r3, #20]
 800c9bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c9c0:	b2da      	uxtb	r2, r3
 800c9c2:	68fb      	ldr	r3, [r7, #12]
 800c9c4:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800c9c6:	2300      	movs	r3, #0
}
 800c9c8:	4618      	mov	r0, r3
 800c9ca:	3730      	adds	r7, #48	; 0x30
 800c9cc:	46bd      	mov	sp, r7
 800c9ce:	bd80      	pop	{r7, pc}

0800c9d0 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800c9d0:	b580      	push	{r7, lr}
 800c9d2:	b086      	sub	sp, #24
 800c9d4:	af00      	add	r7, sp, #0
 800c9d6:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	f107 0208 	add.w	r2, r7, #8
 800c9de:	4611      	mov	r1, r2
 800c9e0:	4618      	mov	r0, r3
 800c9e2:	f7ff fc19 	bl	800c218 <validate>
 800c9e6:	4603      	mov	r3, r0
 800c9e8:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800c9ea:	7dfb      	ldrb	r3, [r7, #23]
 800c9ec:	2b00      	cmp	r3, #0
 800c9ee:	d168      	bne.n	800cac2 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	7d1b      	ldrb	r3, [r3, #20]
 800c9f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c9f8:	2b00      	cmp	r3, #0
 800c9fa:	d062      	beq.n	800cac2 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	7d1b      	ldrb	r3, [r3, #20]
 800ca00:	b25b      	sxtb	r3, r3
 800ca02:	2b00      	cmp	r3, #0
 800ca04:	da15      	bge.n	800ca32 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800ca06:	68bb      	ldr	r3, [r7, #8]
 800ca08:	7858      	ldrb	r0, [r3, #1]
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	6a1a      	ldr	r2, [r3, #32]
 800ca14:	2301      	movs	r3, #1
 800ca16:	f7fd faf7 	bl	800a008 <disk_write>
 800ca1a:	4603      	mov	r3, r0
 800ca1c:	2b00      	cmp	r3, #0
 800ca1e:	d001      	beq.n	800ca24 <f_sync+0x54>
 800ca20:	2301      	movs	r3, #1
 800ca22:	e04f      	b.n	800cac4 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	7d1b      	ldrb	r3, [r3, #20]
 800ca28:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ca2c:	b2da      	uxtb	r2, r3
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800ca32:	f7fd f847 	bl	8009ac4 <get_fattime>
 800ca36:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800ca38:	68ba      	ldr	r2, [r7, #8]
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca3e:	4619      	mov	r1, r3
 800ca40:	4610      	mov	r0, r2
 800ca42:	f7fd fd93 	bl	800a56c <move_window>
 800ca46:	4603      	mov	r3, r0
 800ca48:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800ca4a:	7dfb      	ldrb	r3, [r7, #23]
 800ca4c:	2b00      	cmp	r3, #0
 800ca4e:	d138      	bne.n	800cac2 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca54:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800ca56:	68fb      	ldr	r3, [r7, #12]
 800ca58:	330b      	adds	r3, #11
 800ca5a:	781a      	ldrb	r2, [r3, #0]
 800ca5c:	68fb      	ldr	r3, [r7, #12]
 800ca5e:	330b      	adds	r3, #11
 800ca60:	f042 0220 	orr.w	r2, r2, #32
 800ca64:	b2d2      	uxtb	r2, r2
 800ca66:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	6818      	ldr	r0, [r3, #0]
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	689b      	ldr	r3, [r3, #8]
 800ca70:	461a      	mov	r2, r3
 800ca72:	68f9      	ldr	r1, [r7, #12]
 800ca74:	f7fe fb21 	bl	800b0ba <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800ca78:	68fb      	ldr	r3, [r7, #12]
 800ca7a:	f103 021c 	add.w	r2, r3, #28
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	68db      	ldr	r3, [r3, #12]
 800ca82:	4619      	mov	r1, r3
 800ca84:	4610      	mov	r0, r2
 800ca86:	f7fd fb53 	bl	800a130 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800ca8a:	68fb      	ldr	r3, [r7, #12]
 800ca8c:	3316      	adds	r3, #22
 800ca8e:	6939      	ldr	r1, [r7, #16]
 800ca90:	4618      	mov	r0, r3
 800ca92:	f7fd fb4d 	bl	800a130 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800ca96:	68fb      	ldr	r3, [r7, #12]
 800ca98:	3312      	adds	r3, #18
 800ca9a:	2100      	movs	r1, #0
 800ca9c:	4618      	mov	r0, r3
 800ca9e:	f7fd fb2c 	bl	800a0fa <st_word>
					fs->wflag = 1;
 800caa2:	68bb      	ldr	r3, [r7, #8]
 800caa4:	2201      	movs	r2, #1
 800caa6:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800caa8:	68bb      	ldr	r3, [r7, #8]
 800caaa:	4618      	mov	r0, r3
 800caac:	f7fd fd8c 	bl	800a5c8 <sync_fs>
 800cab0:	4603      	mov	r3, r0
 800cab2:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	7d1b      	ldrb	r3, [r3, #20]
 800cab8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cabc:	b2da      	uxtb	r2, r3
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800cac2:	7dfb      	ldrb	r3, [r7, #23]
}
 800cac4:	4618      	mov	r0, r3
 800cac6:	3718      	adds	r7, #24
 800cac8:	46bd      	mov	sp, r7
 800caca:	bd80      	pop	{r7, pc}

0800cacc <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800cacc:	b480      	push	{r7}
 800cace:	b087      	sub	sp, #28
 800cad0:	af00      	add	r7, sp, #0
 800cad2:	60f8      	str	r0, [r7, #12]
 800cad4:	60b9      	str	r1, [r7, #8]
 800cad6:	4613      	mov	r3, r2
 800cad8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800cada:	2301      	movs	r3, #1
 800cadc:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800cade:	2300      	movs	r3, #0
 800cae0:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800cae2:	4b1f      	ldr	r3, [pc, #124]	; (800cb60 <FATFS_LinkDriverEx+0x94>)
 800cae4:	7a5b      	ldrb	r3, [r3, #9]
 800cae6:	b2db      	uxtb	r3, r3
 800cae8:	2b00      	cmp	r3, #0
 800caea:	d131      	bne.n	800cb50 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800caec:	4b1c      	ldr	r3, [pc, #112]	; (800cb60 <FATFS_LinkDriverEx+0x94>)
 800caee:	7a5b      	ldrb	r3, [r3, #9]
 800caf0:	b2db      	uxtb	r3, r3
 800caf2:	461a      	mov	r2, r3
 800caf4:	4b1a      	ldr	r3, [pc, #104]	; (800cb60 <FATFS_LinkDriverEx+0x94>)
 800caf6:	2100      	movs	r1, #0
 800caf8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800cafa:	4b19      	ldr	r3, [pc, #100]	; (800cb60 <FATFS_LinkDriverEx+0x94>)
 800cafc:	7a5b      	ldrb	r3, [r3, #9]
 800cafe:	b2db      	uxtb	r3, r3
 800cb00:	4a17      	ldr	r2, [pc, #92]	; (800cb60 <FATFS_LinkDriverEx+0x94>)
 800cb02:	009b      	lsls	r3, r3, #2
 800cb04:	4413      	add	r3, r2
 800cb06:	68fa      	ldr	r2, [r7, #12]
 800cb08:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800cb0a:	4b15      	ldr	r3, [pc, #84]	; (800cb60 <FATFS_LinkDriverEx+0x94>)
 800cb0c:	7a5b      	ldrb	r3, [r3, #9]
 800cb0e:	b2db      	uxtb	r3, r3
 800cb10:	461a      	mov	r2, r3
 800cb12:	4b13      	ldr	r3, [pc, #76]	; (800cb60 <FATFS_LinkDriverEx+0x94>)
 800cb14:	4413      	add	r3, r2
 800cb16:	79fa      	ldrb	r2, [r7, #7]
 800cb18:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800cb1a:	4b11      	ldr	r3, [pc, #68]	; (800cb60 <FATFS_LinkDriverEx+0x94>)
 800cb1c:	7a5b      	ldrb	r3, [r3, #9]
 800cb1e:	b2db      	uxtb	r3, r3
 800cb20:	1c5a      	adds	r2, r3, #1
 800cb22:	b2d1      	uxtb	r1, r2
 800cb24:	4a0e      	ldr	r2, [pc, #56]	; (800cb60 <FATFS_LinkDriverEx+0x94>)
 800cb26:	7251      	strb	r1, [r2, #9]
 800cb28:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800cb2a:	7dbb      	ldrb	r3, [r7, #22]
 800cb2c:	3330      	adds	r3, #48	; 0x30
 800cb2e:	b2da      	uxtb	r2, r3
 800cb30:	68bb      	ldr	r3, [r7, #8]
 800cb32:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800cb34:	68bb      	ldr	r3, [r7, #8]
 800cb36:	3301      	adds	r3, #1
 800cb38:	223a      	movs	r2, #58	; 0x3a
 800cb3a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800cb3c:	68bb      	ldr	r3, [r7, #8]
 800cb3e:	3302      	adds	r3, #2
 800cb40:	222f      	movs	r2, #47	; 0x2f
 800cb42:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800cb44:	68bb      	ldr	r3, [r7, #8]
 800cb46:	3303      	adds	r3, #3
 800cb48:	2200      	movs	r2, #0
 800cb4a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800cb4c:	2300      	movs	r3, #0
 800cb4e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800cb50:	7dfb      	ldrb	r3, [r7, #23]
}
 800cb52:	4618      	mov	r0, r3
 800cb54:	371c      	adds	r7, #28
 800cb56:	46bd      	mov	sp, r7
 800cb58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb5c:	4770      	bx	lr
 800cb5e:	bf00      	nop
 800cb60:	2000171c 	.word	0x2000171c

0800cb64 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800cb64:	b580      	push	{r7, lr}
 800cb66:	b082      	sub	sp, #8
 800cb68:	af00      	add	r7, sp, #0
 800cb6a:	6078      	str	r0, [r7, #4]
 800cb6c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800cb6e:	2200      	movs	r2, #0
 800cb70:	6839      	ldr	r1, [r7, #0]
 800cb72:	6878      	ldr	r0, [r7, #4]
 800cb74:	f7ff ffaa 	bl	800cacc <FATFS_LinkDriverEx>
 800cb78:	4603      	mov	r3, r0
}
 800cb7a:	4618      	mov	r0, r3
 800cb7c:	3708      	adds	r7, #8
 800cb7e:	46bd      	mov	sp, r7
 800cb80:	bd80      	pop	{r7, pc}
	...

0800cb84 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800cb84:	b480      	push	{r7}
 800cb86:	b085      	sub	sp, #20
 800cb88:	af00      	add	r7, sp, #0
 800cb8a:	4603      	mov	r3, r0
 800cb8c:	6039      	str	r1, [r7, #0]
 800cb8e:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800cb90:	88fb      	ldrh	r3, [r7, #6]
 800cb92:	2b7f      	cmp	r3, #127	; 0x7f
 800cb94:	d802      	bhi.n	800cb9c <ff_convert+0x18>
		c = chr;
 800cb96:	88fb      	ldrh	r3, [r7, #6]
 800cb98:	81fb      	strh	r3, [r7, #14]
 800cb9a:	e025      	b.n	800cbe8 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800cb9c:	683b      	ldr	r3, [r7, #0]
 800cb9e:	2b00      	cmp	r3, #0
 800cba0:	d00b      	beq.n	800cbba <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800cba2:	88fb      	ldrh	r3, [r7, #6]
 800cba4:	2bff      	cmp	r3, #255	; 0xff
 800cba6:	d805      	bhi.n	800cbb4 <ff_convert+0x30>
 800cba8:	88fb      	ldrh	r3, [r7, #6]
 800cbaa:	3b80      	subs	r3, #128	; 0x80
 800cbac:	4a12      	ldr	r2, [pc, #72]	; (800cbf8 <ff_convert+0x74>)
 800cbae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cbb2:	e000      	b.n	800cbb6 <ff_convert+0x32>
 800cbb4:	2300      	movs	r3, #0
 800cbb6:	81fb      	strh	r3, [r7, #14]
 800cbb8:	e016      	b.n	800cbe8 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800cbba:	2300      	movs	r3, #0
 800cbbc:	81fb      	strh	r3, [r7, #14]
 800cbbe:	e009      	b.n	800cbd4 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800cbc0:	89fb      	ldrh	r3, [r7, #14]
 800cbc2:	4a0d      	ldr	r2, [pc, #52]	; (800cbf8 <ff_convert+0x74>)
 800cbc4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cbc8:	88fa      	ldrh	r2, [r7, #6]
 800cbca:	429a      	cmp	r2, r3
 800cbcc:	d006      	beq.n	800cbdc <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800cbce:	89fb      	ldrh	r3, [r7, #14]
 800cbd0:	3301      	adds	r3, #1
 800cbd2:	81fb      	strh	r3, [r7, #14]
 800cbd4:	89fb      	ldrh	r3, [r7, #14]
 800cbd6:	2b7f      	cmp	r3, #127	; 0x7f
 800cbd8:	d9f2      	bls.n	800cbc0 <ff_convert+0x3c>
 800cbda:	e000      	b.n	800cbde <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800cbdc:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800cbde:	89fb      	ldrh	r3, [r7, #14]
 800cbe0:	3380      	adds	r3, #128	; 0x80
 800cbe2:	b29b      	uxth	r3, r3
 800cbe4:	b2db      	uxtb	r3, r3
 800cbe6:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800cbe8:	89fb      	ldrh	r3, [r7, #14]
}
 800cbea:	4618      	mov	r0, r3
 800cbec:	3714      	adds	r7, #20
 800cbee:	46bd      	mov	sp, r7
 800cbf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbf4:	4770      	bx	lr
 800cbf6:	bf00      	nop
 800cbf8:	0800e2dc 	.word	0x0800e2dc

0800cbfc <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800cbfc:	b480      	push	{r7}
 800cbfe:	b087      	sub	sp, #28
 800cc00:	af00      	add	r7, sp, #0
 800cc02:	4603      	mov	r3, r0
 800cc04:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800cc06:	88fb      	ldrh	r3, [r7, #6]
 800cc08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cc0c:	d201      	bcs.n	800cc12 <ff_wtoupper+0x16>
 800cc0e:	4b3e      	ldr	r3, [pc, #248]	; (800cd08 <ff_wtoupper+0x10c>)
 800cc10:	e000      	b.n	800cc14 <ff_wtoupper+0x18>
 800cc12:	4b3e      	ldr	r3, [pc, #248]	; (800cd0c <ff_wtoupper+0x110>)
 800cc14:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800cc16:	697b      	ldr	r3, [r7, #20]
 800cc18:	1c9a      	adds	r2, r3, #2
 800cc1a:	617a      	str	r2, [r7, #20]
 800cc1c:	881b      	ldrh	r3, [r3, #0]
 800cc1e:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800cc20:	8a7b      	ldrh	r3, [r7, #18]
 800cc22:	2b00      	cmp	r3, #0
 800cc24:	d068      	beq.n	800ccf8 <ff_wtoupper+0xfc>
 800cc26:	88fa      	ldrh	r2, [r7, #6]
 800cc28:	8a7b      	ldrh	r3, [r7, #18]
 800cc2a:	429a      	cmp	r2, r3
 800cc2c:	d364      	bcc.n	800ccf8 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800cc2e:	697b      	ldr	r3, [r7, #20]
 800cc30:	1c9a      	adds	r2, r3, #2
 800cc32:	617a      	str	r2, [r7, #20]
 800cc34:	881b      	ldrh	r3, [r3, #0]
 800cc36:	823b      	strh	r3, [r7, #16]
 800cc38:	8a3b      	ldrh	r3, [r7, #16]
 800cc3a:	0a1b      	lsrs	r3, r3, #8
 800cc3c:	81fb      	strh	r3, [r7, #14]
 800cc3e:	8a3b      	ldrh	r3, [r7, #16]
 800cc40:	b2db      	uxtb	r3, r3
 800cc42:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800cc44:	88fa      	ldrh	r2, [r7, #6]
 800cc46:	8a79      	ldrh	r1, [r7, #18]
 800cc48:	8a3b      	ldrh	r3, [r7, #16]
 800cc4a:	440b      	add	r3, r1
 800cc4c:	429a      	cmp	r2, r3
 800cc4e:	da49      	bge.n	800cce4 <ff_wtoupper+0xe8>
			switch (cmd) {
 800cc50:	89fb      	ldrh	r3, [r7, #14]
 800cc52:	2b08      	cmp	r3, #8
 800cc54:	d84f      	bhi.n	800ccf6 <ff_wtoupper+0xfa>
 800cc56:	a201      	add	r2, pc, #4	; (adr r2, 800cc5c <ff_wtoupper+0x60>)
 800cc58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc5c:	0800cc81 	.word	0x0800cc81
 800cc60:	0800cc93 	.word	0x0800cc93
 800cc64:	0800cca9 	.word	0x0800cca9
 800cc68:	0800ccb1 	.word	0x0800ccb1
 800cc6c:	0800ccb9 	.word	0x0800ccb9
 800cc70:	0800ccc1 	.word	0x0800ccc1
 800cc74:	0800ccc9 	.word	0x0800ccc9
 800cc78:	0800ccd1 	.word	0x0800ccd1
 800cc7c:	0800ccd9 	.word	0x0800ccd9
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800cc80:	88fa      	ldrh	r2, [r7, #6]
 800cc82:	8a7b      	ldrh	r3, [r7, #18]
 800cc84:	1ad3      	subs	r3, r2, r3
 800cc86:	005b      	lsls	r3, r3, #1
 800cc88:	697a      	ldr	r2, [r7, #20]
 800cc8a:	4413      	add	r3, r2
 800cc8c:	881b      	ldrh	r3, [r3, #0]
 800cc8e:	80fb      	strh	r3, [r7, #6]
 800cc90:	e027      	b.n	800cce2 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800cc92:	88fa      	ldrh	r2, [r7, #6]
 800cc94:	8a7b      	ldrh	r3, [r7, #18]
 800cc96:	1ad3      	subs	r3, r2, r3
 800cc98:	b29b      	uxth	r3, r3
 800cc9a:	f003 0301 	and.w	r3, r3, #1
 800cc9e:	b29b      	uxth	r3, r3
 800cca0:	88fa      	ldrh	r2, [r7, #6]
 800cca2:	1ad3      	subs	r3, r2, r3
 800cca4:	80fb      	strh	r3, [r7, #6]
 800cca6:	e01c      	b.n	800cce2 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800cca8:	88fb      	ldrh	r3, [r7, #6]
 800ccaa:	3b10      	subs	r3, #16
 800ccac:	80fb      	strh	r3, [r7, #6]
 800ccae:	e018      	b.n	800cce2 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800ccb0:	88fb      	ldrh	r3, [r7, #6]
 800ccb2:	3b20      	subs	r3, #32
 800ccb4:	80fb      	strh	r3, [r7, #6]
 800ccb6:	e014      	b.n	800cce2 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800ccb8:	88fb      	ldrh	r3, [r7, #6]
 800ccba:	3b30      	subs	r3, #48	; 0x30
 800ccbc:	80fb      	strh	r3, [r7, #6]
 800ccbe:	e010      	b.n	800cce2 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800ccc0:	88fb      	ldrh	r3, [r7, #6]
 800ccc2:	3b1a      	subs	r3, #26
 800ccc4:	80fb      	strh	r3, [r7, #6]
 800ccc6:	e00c      	b.n	800cce2 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800ccc8:	88fb      	ldrh	r3, [r7, #6]
 800ccca:	3308      	adds	r3, #8
 800cccc:	80fb      	strh	r3, [r7, #6]
 800ccce:	e008      	b.n	800cce2 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800ccd0:	88fb      	ldrh	r3, [r7, #6]
 800ccd2:	3b50      	subs	r3, #80	; 0x50
 800ccd4:	80fb      	strh	r3, [r7, #6]
 800ccd6:	e004      	b.n	800cce2 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800ccd8:	88fb      	ldrh	r3, [r7, #6]
 800ccda:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 800ccde:	80fb      	strh	r3, [r7, #6]
 800cce0:	bf00      	nop
			}
			break;
 800cce2:	e008      	b.n	800ccf6 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800cce4:	89fb      	ldrh	r3, [r7, #14]
 800cce6:	2b00      	cmp	r3, #0
 800cce8:	d195      	bne.n	800cc16 <ff_wtoupper+0x1a>
 800ccea:	8a3b      	ldrh	r3, [r7, #16]
 800ccec:	005b      	lsls	r3, r3, #1
 800ccee:	697a      	ldr	r2, [r7, #20]
 800ccf0:	4413      	add	r3, r2
 800ccf2:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800ccf4:	e78f      	b.n	800cc16 <ff_wtoupper+0x1a>
			break;
 800ccf6:	bf00      	nop
	}

	return chr;
 800ccf8:	88fb      	ldrh	r3, [r7, #6]
}
 800ccfa:	4618      	mov	r0, r3
 800ccfc:	371c      	adds	r7, #28
 800ccfe:	46bd      	mov	sp, r7
 800cd00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd04:	4770      	bx	lr
 800cd06:	bf00      	nop
 800cd08:	0800e3dc 	.word	0x0800e3dc
 800cd0c:	0800e5d0 	.word	0x0800e5d0

0800cd10 <__errno>:
 800cd10:	4b01      	ldr	r3, [pc, #4]	; (800cd18 <__errno+0x8>)
 800cd12:	6818      	ldr	r0, [r3, #0]
 800cd14:	4770      	bx	lr
 800cd16:	bf00      	nop
 800cd18:	2000000c 	.word	0x2000000c

0800cd1c <__libc_init_array>:
 800cd1c:	b570      	push	{r4, r5, r6, lr}
 800cd1e:	4d0d      	ldr	r5, [pc, #52]	; (800cd54 <__libc_init_array+0x38>)
 800cd20:	4c0d      	ldr	r4, [pc, #52]	; (800cd58 <__libc_init_array+0x3c>)
 800cd22:	1b64      	subs	r4, r4, r5
 800cd24:	10a4      	asrs	r4, r4, #2
 800cd26:	2600      	movs	r6, #0
 800cd28:	42a6      	cmp	r6, r4
 800cd2a:	d109      	bne.n	800cd40 <__libc_init_array+0x24>
 800cd2c:	4d0b      	ldr	r5, [pc, #44]	; (800cd5c <__libc_init_array+0x40>)
 800cd2e:	4c0c      	ldr	r4, [pc, #48]	; (800cd60 <__libc_init_array+0x44>)
 800cd30:	f001 f98a 	bl	800e048 <_init>
 800cd34:	1b64      	subs	r4, r4, r5
 800cd36:	10a4      	asrs	r4, r4, #2
 800cd38:	2600      	movs	r6, #0
 800cd3a:	42a6      	cmp	r6, r4
 800cd3c:	d105      	bne.n	800cd4a <__libc_init_array+0x2e>
 800cd3e:	bd70      	pop	{r4, r5, r6, pc}
 800cd40:	f855 3b04 	ldr.w	r3, [r5], #4
 800cd44:	4798      	blx	r3
 800cd46:	3601      	adds	r6, #1
 800cd48:	e7ee      	b.n	800cd28 <__libc_init_array+0xc>
 800cd4a:	f855 3b04 	ldr.w	r3, [r5], #4
 800cd4e:	4798      	blx	r3
 800cd50:	3601      	adds	r6, #1
 800cd52:	e7f2      	b.n	800cd3a <__libc_init_array+0x1e>
 800cd54:	0800e72c 	.word	0x0800e72c
 800cd58:	0800e72c 	.word	0x0800e72c
 800cd5c:	0800e72c 	.word	0x0800e72c
 800cd60:	0800e730 	.word	0x0800e730

0800cd64 <memset>:
 800cd64:	4402      	add	r2, r0
 800cd66:	4603      	mov	r3, r0
 800cd68:	4293      	cmp	r3, r2
 800cd6a:	d100      	bne.n	800cd6e <memset+0xa>
 800cd6c:	4770      	bx	lr
 800cd6e:	f803 1b01 	strb.w	r1, [r3], #1
 800cd72:	e7f9      	b.n	800cd68 <memset+0x4>

0800cd74 <iprintf>:
 800cd74:	b40f      	push	{r0, r1, r2, r3}
 800cd76:	4b0a      	ldr	r3, [pc, #40]	; (800cda0 <iprintf+0x2c>)
 800cd78:	b513      	push	{r0, r1, r4, lr}
 800cd7a:	681c      	ldr	r4, [r3, #0]
 800cd7c:	b124      	cbz	r4, 800cd88 <iprintf+0x14>
 800cd7e:	69a3      	ldr	r3, [r4, #24]
 800cd80:	b913      	cbnz	r3, 800cd88 <iprintf+0x14>
 800cd82:	4620      	mov	r0, r4
 800cd84:	f000 f886 	bl	800ce94 <__sinit>
 800cd88:	ab05      	add	r3, sp, #20
 800cd8a:	9a04      	ldr	r2, [sp, #16]
 800cd8c:	68a1      	ldr	r1, [r4, #8]
 800cd8e:	9301      	str	r3, [sp, #4]
 800cd90:	4620      	mov	r0, r4
 800cd92:	f000 fb39 	bl	800d408 <_vfiprintf_r>
 800cd96:	b002      	add	sp, #8
 800cd98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cd9c:	b004      	add	sp, #16
 800cd9e:	4770      	bx	lr
 800cda0:	2000000c 	.word	0x2000000c

0800cda4 <siprintf>:
 800cda4:	b40e      	push	{r1, r2, r3}
 800cda6:	b500      	push	{lr}
 800cda8:	b09c      	sub	sp, #112	; 0x70
 800cdaa:	ab1d      	add	r3, sp, #116	; 0x74
 800cdac:	9002      	str	r0, [sp, #8]
 800cdae:	9006      	str	r0, [sp, #24]
 800cdb0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800cdb4:	4809      	ldr	r0, [pc, #36]	; (800cddc <siprintf+0x38>)
 800cdb6:	9107      	str	r1, [sp, #28]
 800cdb8:	9104      	str	r1, [sp, #16]
 800cdba:	4909      	ldr	r1, [pc, #36]	; (800cde0 <siprintf+0x3c>)
 800cdbc:	f853 2b04 	ldr.w	r2, [r3], #4
 800cdc0:	9105      	str	r1, [sp, #20]
 800cdc2:	6800      	ldr	r0, [r0, #0]
 800cdc4:	9301      	str	r3, [sp, #4]
 800cdc6:	a902      	add	r1, sp, #8
 800cdc8:	f000 f9f4 	bl	800d1b4 <_svfiprintf_r>
 800cdcc:	9b02      	ldr	r3, [sp, #8]
 800cdce:	2200      	movs	r2, #0
 800cdd0:	701a      	strb	r2, [r3, #0]
 800cdd2:	b01c      	add	sp, #112	; 0x70
 800cdd4:	f85d eb04 	ldr.w	lr, [sp], #4
 800cdd8:	b003      	add	sp, #12
 800cdda:	4770      	bx	lr
 800cddc:	2000000c 	.word	0x2000000c
 800cde0:	ffff0208 	.word	0xffff0208

0800cde4 <std>:
 800cde4:	2300      	movs	r3, #0
 800cde6:	b510      	push	{r4, lr}
 800cde8:	4604      	mov	r4, r0
 800cdea:	e9c0 3300 	strd	r3, r3, [r0]
 800cdee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800cdf2:	6083      	str	r3, [r0, #8]
 800cdf4:	8181      	strh	r1, [r0, #12]
 800cdf6:	6643      	str	r3, [r0, #100]	; 0x64
 800cdf8:	81c2      	strh	r2, [r0, #14]
 800cdfa:	6183      	str	r3, [r0, #24]
 800cdfc:	4619      	mov	r1, r3
 800cdfe:	2208      	movs	r2, #8
 800ce00:	305c      	adds	r0, #92	; 0x5c
 800ce02:	f7ff ffaf 	bl	800cd64 <memset>
 800ce06:	4b05      	ldr	r3, [pc, #20]	; (800ce1c <std+0x38>)
 800ce08:	6263      	str	r3, [r4, #36]	; 0x24
 800ce0a:	4b05      	ldr	r3, [pc, #20]	; (800ce20 <std+0x3c>)
 800ce0c:	62a3      	str	r3, [r4, #40]	; 0x28
 800ce0e:	4b05      	ldr	r3, [pc, #20]	; (800ce24 <std+0x40>)
 800ce10:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ce12:	4b05      	ldr	r3, [pc, #20]	; (800ce28 <std+0x44>)
 800ce14:	6224      	str	r4, [r4, #32]
 800ce16:	6323      	str	r3, [r4, #48]	; 0x30
 800ce18:	bd10      	pop	{r4, pc}
 800ce1a:	bf00      	nop
 800ce1c:	0800d9b1 	.word	0x0800d9b1
 800ce20:	0800d9d3 	.word	0x0800d9d3
 800ce24:	0800da0b 	.word	0x0800da0b
 800ce28:	0800da2f 	.word	0x0800da2f

0800ce2c <_cleanup_r>:
 800ce2c:	4901      	ldr	r1, [pc, #4]	; (800ce34 <_cleanup_r+0x8>)
 800ce2e:	f000 b8af 	b.w	800cf90 <_fwalk_reent>
 800ce32:	bf00      	nop
 800ce34:	0800dd09 	.word	0x0800dd09

0800ce38 <__sfmoreglue>:
 800ce38:	b570      	push	{r4, r5, r6, lr}
 800ce3a:	2268      	movs	r2, #104	; 0x68
 800ce3c:	1e4d      	subs	r5, r1, #1
 800ce3e:	4355      	muls	r5, r2
 800ce40:	460e      	mov	r6, r1
 800ce42:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ce46:	f000 f8e5 	bl	800d014 <_malloc_r>
 800ce4a:	4604      	mov	r4, r0
 800ce4c:	b140      	cbz	r0, 800ce60 <__sfmoreglue+0x28>
 800ce4e:	2100      	movs	r1, #0
 800ce50:	e9c0 1600 	strd	r1, r6, [r0]
 800ce54:	300c      	adds	r0, #12
 800ce56:	60a0      	str	r0, [r4, #8]
 800ce58:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ce5c:	f7ff ff82 	bl	800cd64 <memset>
 800ce60:	4620      	mov	r0, r4
 800ce62:	bd70      	pop	{r4, r5, r6, pc}

0800ce64 <__sfp_lock_acquire>:
 800ce64:	4801      	ldr	r0, [pc, #4]	; (800ce6c <__sfp_lock_acquire+0x8>)
 800ce66:	f000 b8b3 	b.w	800cfd0 <__retarget_lock_acquire_recursive>
 800ce6a:	bf00      	nop
 800ce6c:	20001729 	.word	0x20001729

0800ce70 <__sfp_lock_release>:
 800ce70:	4801      	ldr	r0, [pc, #4]	; (800ce78 <__sfp_lock_release+0x8>)
 800ce72:	f000 b8ae 	b.w	800cfd2 <__retarget_lock_release_recursive>
 800ce76:	bf00      	nop
 800ce78:	20001729 	.word	0x20001729

0800ce7c <__sinit_lock_acquire>:
 800ce7c:	4801      	ldr	r0, [pc, #4]	; (800ce84 <__sinit_lock_acquire+0x8>)
 800ce7e:	f000 b8a7 	b.w	800cfd0 <__retarget_lock_acquire_recursive>
 800ce82:	bf00      	nop
 800ce84:	2000172a 	.word	0x2000172a

0800ce88 <__sinit_lock_release>:
 800ce88:	4801      	ldr	r0, [pc, #4]	; (800ce90 <__sinit_lock_release+0x8>)
 800ce8a:	f000 b8a2 	b.w	800cfd2 <__retarget_lock_release_recursive>
 800ce8e:	bf00      	nop
 800ce90:	2000172a 	.word	0x2000172a

0800ce94 <__sinit>:
 800ce94:	b510      	push	{r4, lr}
 800ce96:	4604      	mov	r4, r0
 800ce98:	f7ff fff0 	bl	800ce7c <__sinit_lock_acquire>
 800ce9c:	69a3      	ldr	r3, [r4, #24]
 800ce9e:	b11b      	cbz	r3, 800cea8 <__sinit+0x14>
 800cea0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cea4:	f7ff bff0 	b.w	800ce88 <__sinit_lock_release>
 800cea8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ceac:	6523      	str	r3, [r4, #80]	; 0x50
 800ceae:	4b13      	ldr	r3, [pc, #76]	; (800cefc <__sinit+0x68>)
 800ceb0:	4a13      	ldr	r2, [pc, #76]	; (800cf00 <__sinit+0x6c>)
 800ceb2:	681b      	ldr	r3, [r3, #0]
 800ceb4:	62a2      	str	r2, [r4, #40]	; 0x28
 800ceb6:	42a3      	cmp	r3, r4
 800ceb8:	bf04      	itt	eq
 800ceba:	2301      	moveq	r3, #1
 800cebc:	61a3      	streq	r3, [r4, #24]
 800cebe:	4620      	mov	r0, r4
 800cec0:	f000 f820 	bl	800cf04 <__sfp>
 800cec4:	6060      	str	r0, [r4, #4]
 800cec6:	4620      	mov	r0, r4
 800cec8:	f000 f81c 	bl	800cf04 <__sfp>
 800cecc:	60a0      	str	r0, [r4, #8]
 800cece:	4620      	mov	r0, r4
 800ced0:	f000 f818 	bl	800cf04 <__sfp>
 800ced4:	2200      	movs	r2, #0
 800ced6:	60e0      	str	r0, [r4, #12]
 800ced8:	2104      	movs	r1, #4
 800ceda:	6860      	ldr	r0, [r4, #4]
 800cedc:	f7ff ff82 	bl	800cde4 <std>
 800cee0:	68a0      	ldr	r0, [r4, #8]
 800cee2:	2201      	movs	r2, #1
 800cee4:	2109      	movs	r1, #9
 800cee6:	f7ff ff7d 	bl	800cde4 <std>
 800ceea:	68e0      	ldr	r0, [r4, #12]
 800ceec:	2202      	movs	r2, #2
 800ceee:	2112      	movs	r1, #18
 800cef0:	f7ff ff78 	bl	800cde4 <std>
 800cef4:	2301      	movs	r3, #1
 800cef6:	61a3      	str	r3, [r4, #24]
 800cef8:	e7d2      	b.n	800cea0 <__sinit+0xc>
 800cefa:	bf00      	nop
 800cefc:	0800e68c 	.word	0x0800e68c
 800cf00:	0800ce2d 	.word	0x0800ce2d

0800cf04 <__sfp>:
 800cf04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf06:	4607      	mov	r7, r0
 800cf08:	f7ff ffac 	bl	800ce64 <__sfp_lock_acquire>
 800cf0c:	4b1e      	ldr	r3, [pc, #120]	; (800cf88 <__sfp+0x84>)
 800cf0e:	681e      	ldr	r6, [r3, #0]
 800cf10:	69b3      	ldr	r3, [r6, #24]
 800cf12:	b913      	cbnz	r3, 800cf1a <__sfp+0x16>
 800cf14:	4630      	mov	r0, r6
 800cf16:	f7ff ffbd 	bl	800ce94 <__sinit>
 800cf1a:	3648      	adds	r6, #72	; 0x48
 800cf1c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800cf20:	3b01      	subs	r3, #1
 800cf22:	d503      	bpl.n	800cf2c <__sfp+0x28>
 800cf24:	6833      	ldr	r3, [r6, #0]
 800cf26:	b30b      	cbz	r3, 800cf6c <__sfp+0x68>
 800cf28:	6836      	ldr	r6, [r6, #0]
 800cf2a:	e7f7      	b.n	800cf1c <__sfp+0x18>
 800cf2c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800cf30:	b9d5      	cbnz	r5, 800cf68 <__sfp+0x64>
 800cf32:	4b16      	ldr	r3, [pc, #88]	; (800cf8c <__sfp+0x88>)
 800cf34:	60e3      	str	r3, [r4, #12]
 800cf36:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800cf3a:	6665      	str	r5, [r4, #100]	; 0x64
 800cf3c:	f000 f847 	bl	800cfce <__retarget_lock_init_recursive>
 800cf40:	f7ff ff96 	bl	800ce70 <__sfp_lock_release>
 800cf44:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800cf48:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800cf4c:	6025      	str	r5, [r4, #0]
 800cf4e:	61a5      	str	r5, [r4, #24]
 800cf50:	2208      	movs	r2, #8
 800cf52:	4629      	mov	r1, r5
 800cf54:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800cf58:	f7ff ff04 	bl	800cd64 <memset>
 800cf5c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800cf60:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800cf64:	4620      	mov	r0, r4
 800cf66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cf68:	3468      	adds	r4, #104	; 0x68
 800cf6a:	e7d9      	b.n	800cf20 <__sfp+0x1c>
 800cf6c:	2104      	movs	r1, #4
 800cf6e:	4638      	mov	r0, r7
 800cf70:	f7ff ff62 	bl	800ce38 <__sfmoreglue>
 800cf74:	4604      	mov	r4, r0
 800cf76:	6030      	str	r0, [r6, #0]
 800cf78:	2800      	cmp	r0, #0
 800cf7a:	d1d5      	bne.n	800cf28 <__sfp+0x24>
 800cf7c:	f7ff ff78 	bl	800ce70 <__sfp_lock_release>
 800cf80:	230c      	movs	r3, #12
 800cf82:	603b      	str	r3, [r7, #0]
 800cf84:	e7ee      	b.n	800cf64 <__sfp+0x60>
 800cf86:	bf00      	nop
 800cf88:	0800e68c 	.word	0x0800e68c
 800cf8c:	ffff0001 	.word	0xffff0001

0800cf90 <_fwalk_reent>:
 800cf90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cf94:	4606      	mov	r6, r0
 800cf96:	4688      	mov	r8, r1
 800cf98:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800cf9c:	2700      	movs	r7, #0
 800cf9e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800cfa2:	f1b9 0901 	subs.w	r9, r9, #1
 800cfa6:	d505      	bpl.n	800cfb4 <_fwalk_reent+0x24>
 800cfa8:	6824      	ldr	r4, [r4, #0]
 800cfaa:	2c00      	cmp	r4, #0
 800cfac:	d1f7      	bne.n	800cf9e <_fwalk_reent+0xe>
 800cfae:	4638      	mov	r0, r7
 800cfb0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cfb4:	89ab      	ldrh	r3, [r5, #12]
 800cfb6:	2b01      	cmp	r3, #1
 800cfb8:	d907      	bls.n	800cfca <_fwalk_reent+0x3a>
 800cfba:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800cfbe:	3301      	adds	r3, #1
 800cfc0:	d003      	beq.n	800cfca <_fwalk_reent+0x3a>
 800cfc2:	4629      	mov	r1, r5
 800cfc4:	4630      	mov	r0, r6
 800cfc6:	47c0      	blx	r8
 800cfc8:	4307      	orrs	r7, r0
 800cfca:	3568      	adds	r5, #104	; 0x68
 800cfcc:	e7e9      	b.n	800cfa2 <_fwalk_reent+0x12>

0800cfce <__retarget_lock_init_recursive>:
 800cfce:	4770      	bx	lr

0800cfd0 <__retarget_lock_acquire_recursive>:
 800cfd0:	4770      	bx	lr

0800cfd2 <__retarget_lock_release_recursive>:
 800cfd2:	4770      	bx	lr

0800cfd4 <sbrk_aligned>:
 800cfd4:	b570      	push	{r4, r5, r6, lr}
 800cfd6:	4e0e      	ldr	r6, [pc, #56]	; (800d010 <sbrk_aligned+0x3c>)
 800cfd8:	460c      	mov	r4, r1
 800cfda:	6831      	ldr	r1, [r6, #0]
 800cfdc:	4605      	mov	r5, r0
 800cfde:	b911      	cbnz	r1, 800cfe6 <sbrk_aligned+0x12>
 800cfe0:	f000 fcd6 	bl	800d990 <_sbrk_r>
 800cfe4:	6030      	str	r0, [r6, #0]
 800cfe6:	4621      	mov	r1, r4
 800cfe8:	4628      	mov	r0, r5
 800cfea:	f000 fcd1 	bl	800d990 <_sbrk_r>
 800cfee:	1c43      	adds	r3, r0, #1
 800cff0:	d00a      	beq.n	800d008 <sbrk_aligned+0x34>
 800cff2:	1cc4      	adds	r4, r0, #3
 800cff4:	f024 0403 	bic.w	r4, r4, #3
 800cff8:	42a0      	cmp	r0, r4
 800cffa:	d007      	beq.n	800d00c <sbrk_aligned+0x38>
 800cffc:	1a21      	subs	r1, r4, r0
 800cffe:	4628      	mov	r0, r5
 800d000:	f000 fcc6 	bl	800d990 <_sbrk_r>
 800d004:	3001      	adds	r0, #1
 800d006:	d101      	bne.n	800d00c <sbrk_aligned+0x38>
 800d008:	f04f 34ff 	mov.w	r4, #4294967295
 800d00c:	4620      	mov	r0, r4
 800d00e:	bd70      	pop	{r4, r5, r6, pc}
 800d010:	20001730 	.word	0x20001730

0800d014 <_malloc_r>:
 800d014:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d018:	1ccd      	adds	r5, r1, #3
 800d01a:	f025 0503 	bic.w	r5, r5, #3
 800d01e:	3508      	adds	r5, #8
 800d020:	2d0c      	cmp	r5, #12
 800d022:	bf38      	it	cc
 800d024:	250c      	movcc	r5, #12
 800d026:	2d00      	cmp	r5, #0
 800d028:	4607      	mov	r7, r0
 800d02a:	db01      	blt.n	800d030 <_malloc_r+0x1c>
 800d02c:	42a9      	cmp	r1, r5
 800d02e:	d905      	bls.n	800d03c <_malloc_r+0x28>
 800d030:	230c      	movs	r3, #12
 800d032:	603b      	str	r3, [r7, #0]
 800d034:	2600      	movs	r6, #0
 800d036:	4630      	mov	r0, r6
 800d038:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d03c:	4e2e      	ldr	r6, [pc, #184]	; (800d0f8 <_malloc_r+0xe4>)
 800d03e:	f000 ff3f 	bl	800dec0 <__malloc_lock>
 800d042:	6833      	ldr	r3, [r6, #0]
 800d044:	461c      	mov	r4, r3
 800d046:	bb34      	cbnz	r4, 800d096 <_malloc_r+0x82>
 800d048:	4629      	mov	r1, r5
 800d04a:	4638      	mov	r0, r7
 800d04c:	f7ff ffc2 	bl	800cfd4 <sbrk_aligned>
 800d050:	1c43      	adds	r3, r0, #1
 800d052:	4604      	mov	r4, r0
 800d054:	d14d      	bne.n	800d0f2 <_malloc_r+0xde>
 800d056:	6834      	ldr	r4, [r6, #0]
 800d058:	4626      	mov	r6, r4
 800d05a:	2e00      	cmp	r6, #0
 800d05c:	d140      	bne.n	800d0e0 <_malloc_r+0xcc>
 800d05e:	6823      	ldr	r3, [r4, #0]
 800d060:	4631      	mov	r1, r6
 800d062:	4638      	mov	r0, r7
 800d064:	eb04 0803 	add.w	r8, r4, r3
 800d068:	f000 fc92 	bl	800d990 <_sbrk_r>
 800d06c:	4580      	cmp	r8, r0
 800d06e:	d13a      	bne.n	800d0e6 <_malloc_r+0xd2>
 800d070:	6821      	ldr	r1, [r4, #0]
 800d072:	3503      	adds	r5, #3
 800d074:	1a6d      	subs	r5, r5, r1
 800d076:	f025 0503 	bic.w	r5, r5, #3
 800d07a:	3508      	adds	r5, #8
 800d07c:	2d0c      	cmp	r5, #12
 800d07e:	bf38      	it	cc
 800d080:	250c      	movcc	r5, #12
 800d082:	4629      	mov	r1, r5
 800d084:	4638      	mov	r0, r7
 800d086:	f7ff ffa5 	bl	800cfd4 <sbrk_aligned>
 800d08a:	3001      	adds	r0, #1
 800d08c:	d02b      	beq.n	800d0e6 <_malloc_r+0xd2>
 800d08e:	6823      	ldr	r3, [r4, #0]
 800d090:	442b      	add	r3, r5
 800d092:	6023      	str	r3, [r4, #0]
 800d094:	e00e      	b.n	800d0b4 <_malloc_r+0xa0>
 800d096:	6822      	ldr	r2, [r4, #0]
 800d098:	1b52      	subs	r2, r2, r5
 800d09a:	d41e      	bmi.n	800d0da <_malloc_r+0xc6>
 800d09c:	2a0b      	cmp	r2, #11
 800d09e:	d916      	bls.n	800d0ce <_malloc_r+0xba>
 800d0a0:	1961      	adds	r1, r4, r5
 800d0a2:	42a3      	cmp	r3, r4
 800d0a4:	6025      	str	r5, [r4, #0]
 800d0a6:	bf18      	it	ne
 800d0a8:	6059      	strne	r1, [r3, #4]
 800d0aa:	6863      	ldr	r3, [r4, #4]
 800d0ac:	bf08      	it	eq
 800d0ae:	6031      	streq	r1, [r6, #0]
 800d0b0:	5162      	str	r2, [r4, r5]
 800d0b2:	604b      	str	r3, [r1, #4]
 800d0b4:	4638      	mov	r0, r7
 800d0b6:	f104 060b 	add.w	r6, r4, #11
 800d0ba:	f000 ff07 	bl	800decc <__malloc_unlock>
 800d0be:	f026 0607 	bic.w	r6, r6, #7
 800d0c2:	1d23      	adds	r3, r4, #4
 800d0c4:	1af2      	subs	r2, r6, r3
 800d0c6:	d0b6      	beq.n	800d036 <_malloc_r+0x22>
 800d0c8:	1b9b      	subs	r3, r3, r6
 800d0ca:	50a3      	str	r3, [r4, r2]
 800d0cc:	e7b3      	b.n	800d036 <_malloc_r+0x22>
 800d0ce:	6862      	ldr	r2, [r4, #4]
 800d0d0:	42a3      	cmp	r3, r4
 800d0d2:	bf0c      	ite	eq
 800d0d4:	6032      	streq	r2, [r6, #0]
 800d0d6:	605a      	strne	r2, [r3, #4]
 800d0d8:	e7ec      	b.n	800d0b4 <_malloc_r+0xa0>
 800d0da:	4623      	mov	r3, r4
 800d0dc:	6864      	ldr	r4, [r4, #4]
 800d0de:	e7b2      	b.n	800d046 <_malloc_r+0x32>
 800d0e0:	4634      	mov	r4, r6
 800d0e2:	6876      	ldr	r6, [r6, #4]
 800d0e4:	e7b9      	b.n	800d05a <_malloc_r+0x46>
 800d0e6:	230c      	movs	r3, #12
 800d0e8:	603b      	str	r3, [r7, #0]
 800d0ea:	4638      	mov	r0, r7
 800d0ec:	f000 feee 	bl	800decc <__malloc_unlock>
 800d0f0:	e7a1      	b.n	800d036 <_malloc_r+0x22>
 800d0f2:	6025      	str	r5, [r4, #0]
 800d0f4:	e7de      	b.n	800d0b4 <_malloc_r+0xa0>
 800d0f6:	bf00      	nop
 800d0f8:	2000172c 	.word	0x2000172c

0800d0fc <__ssputs_r>:
 800d0fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d100:	688e      	ldr	r6, [r1, #8]
 800d102:	429e      	cmp	r6, r3
 800d104:	4682      	mov	sl, r0
 800d106:	460c      	mov	r4, r1
 800d108:	4690      	mov	r8, r2
 800d10a:	461f      	mov	r7, r3
 800d10c:	d838      	bhi.n	800d180 <__ssputs_r+0x84>
 800d10e:	898a      	ldrh	r2, [r1, #12]
 800d110:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d114:	d032      	beq.n	800d17c <__ssputs_r+0x80>
 800d116:	6825      	ldr	r5, [r4, #0]
 800d118:	6909      	ldr	r1, [r1, #16]
 800d11a:	eba5 0901 	sub.w	r9, r5, r1
 800d11e:	6965      	ldr	r5, [r4, #20]
 800d120:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d124:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d128:	3301      	adds	r3, #1
 800d12a:	444b      	add	r3, r9
 800d12c:	106d      	asrs	r5, r5, #1
 800d12e:	429d      	cmp	r5, r3
 800d130:	bf38      	it	cc
 800d132:	461d      	movcc	r5, r3
 800d134:	0553      	lsls	r3, r2, #21
 800d136:	d531      	bpl.n	800d19c <__ssputs_r+0xa0>
 800d138:	4629      	mov	r1, r5
 800d13a:	f7ff ff6b 	bl	800d014 <_malloc_r>
 800d13e:	4606      	mov	r6, r0
 800d140:	b950      	cbnz	r0, 800d158 <__ssputs_r+0x5c>
 800d142:	230c      	movs	r3, #12
 800d144:	f8ca 3000 	str.w	r3, [sl]
 800d148:	89a3      	ldrh	r3, [r4, #12]
 800d14a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d14e:	81a3      	strh	r3, [r4, #12]
 800d150:	f04f 30ff 	mov.w	r0, #4294967295
 800d154:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d158:	6921      	ldr	r1, [r4, #16]
 800d15a:	464a      	mov	r2, r9
 800d15c:	f000 fe88 	bl	800de70 <memcpy>
 800d160:	89a3      	ldrh	r3, [r4, #12]
 800d162:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d166:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d16a:	81a3      	strh	r3, [r4, #12]
 800d16c:	6126      	str	r6, [r4, #16]
 800d16e:	6165      	str	r5, [r4, #20]
 800d170:	444e      	add	r6, r9
 800d172:	eba5 0509 	sub.w	r5, r5, r9
 800d176:	6026      	str	r6, [r4, #0]
 800d178:	60a5      	str	r5, [r4, #8]
 800d17a:	463e      	mov	r6, r7
 800d17c:	42be      	cmp	r6, r7
 800d17e:	d900      	bls.n	800d182 <__ssputs_r+0x86>
 800d180:	463e      	mov	r6, r7
 800d182:	6820      	ldr	r0, [r4, #0]
 800d184:	4632      	mov	r2, r6
 800d186:	4641      	mov	r1, r8
 800d188:	f000 fe80 	bl	800de8c <memmove>
 800d18c:	68a3      	ldr	r3, [r4, #8]
 800d18e:	1b9b      	subs	r3, r3, r6
 800d190:	60a3      	str	r3, [r4, #8]
 800d192:	6823      	ldr	r3, [r4, #0]
 800d194:	4433      	add	r3, r6
 800d196:	6023      	str	r3, [r4, #0]
 800d198:	2000      	movs	r0, #0
 800d19a:	e7db      	b.n	800d154 <__ssputs_r+0x58>
 800d19c:	462a      	mov	r2, r5
 800d19e:	f000 fee7 	bl	800df70 <_realloc_r>
 800d1a2:	4606      	mov	r6, r0
 800d1a4:	2800      	cmp	r0, #0
 800d1a6:	d1e1      	bne.n	800d16c <__ssputs_r+0x70>
 800d1a8:	6921      	ldr	r1, [r4, #16]
 800d1aa:	4650      	mov	r0, sl
 800d1ac:	f000 fe94 	bl	800ded8 <_free_r>
 800d1b0:	e7c7      	b.n	800d142 <__ssputs_r+0x46>
	...

0800d1b4 <_svfiprintf_r>:
 800d1b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d1b8:	4698      	mov	r8, r3
 800d1ba:	898b      	ldrh	r3, [r1, #12]
 800d1bc:	061b      	lsls	r3, r3, #24
 800d1be:	b09d      	sub	sp, #116	; 0x74
 800d1c0:	4607      	mov	r7, r0
 800d1c2:	460d      	mov	r5, r1
 800d1c4:	4614      	mov	r4, r2
 800d1c6:	d50e      	bpl.n	800d1e6 <_svfiprintf_r+0x32>
 800d1c8:	690b      	ldr	r3, [r1, #16]
 800d1ca:	b963      	cbnz	r3, 800d1e6 <_svfiprintf_r+0x32>
 800d1cc:	2140      	movs	r1, #64	; 0x40
 800d1ce:	f7ff ff21 	bl	800d014 <_malloc_r>
 800d1d2:	6028      	str	r0, [r5, #0]
 800d1d4:	6128      	str	r0, [r5, #16]
 800d1d6:	b920      	cbnz	r0, 800d1e2 <_svfiprintf_r+0x2e>
 800d1d8:	230c      	movs	r3, #12
 800d1da:	603b      	str	r3, [r7, #0]
 800d1dc:	f04f 30ff 	mov.w	r0, #4294967295
 800d1e0:	e0d1      	b.n	800d386 <_svfiprintf_r+0x1d2>
 800d1e2:	2340      	movs	r3, #64	; 0x40
 800d1e4:	616b      	str	r3, [r5, #20]
 800d1e6:	2300      	movs	r3, #0
 800d1e8:	9309      	str	r3, [sp, #36]	; 0x24
 800d1ea:	2320      	movs	r3, #32
 800d1ec:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d1f0:	f8cd 800c 	str.w	r8, [sp, #12]
 800d1f4:	2330      	movs	r3, #48	; 0x30
 800d1f6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800d3a0 <_svfiprintf_r+0x1ec>
 800d1fa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d1fe:	f04f 0901 	mov.w	r9, #1
 800d202:	4623      	mov	r3, r4
 800d204:	469a      	mov	sl, r3
 800d206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d20a:	b10a      	cbz	r2, 800d210 <_svfiprintf_r+0x5c>
 800d20c:	2a25      	cmp	r2, #37	; 0x25
 800d20e:	d1f9      	bne.n	800d204 <_svfiprintf_r+0x50>
 800d210:	ebba 0b04 	subs.w	fp, sl, r4
 800d214:	d00b      	beq.n	800d22e <_svfiprintf_r+0x7a>
 800d216:	465b      	mov	r3, fp
 800d218:	4622      	mov	r2, r4
 800d21a:	4629      	mov	r1, r5
 800d21c:	4638      	mov	r0, r7
 800d21e:	f7ff ff6d 	bl	800d0fc <__ssputs_r>
 800d222:	3001      	adds	r0, #1
 800d224:	f000 80aa 	beq.w	800d37c <_svfiprintf_r+0x1c8>
 800d228:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d22a:	445a      	add	r2, fp
 800d22c:	9209      	str	r2, [sp, #36]	; 0x24
 800d22e:	f89a 3000 	ldrb.w	r3, [sl]
 800d232:	2b00      	cmp	r3, #0
 800d234:	f000 80a2 	beq.w	800d37c <_svfiprintf_r+0x1c8>
 800d238:	2300      	movs	r3, #0
 800d23a:	f04f 32ff 	mov.w	r2, #4294967295
 800d23e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d242:	f10a 0a01 	add.w	sl, sl, #1
 800d246:	9304      	str	r3, [sp, #16]
 800d248:	9307      	str	r3, [sp, #28]
 800d24a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d24e:	931a      	str	r3, [sp, #104]	; 0x68
 800d250:	4654      	mov	r4, sl
 800d252:	2205      	movs	r2, #5
 800d254:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d258:	4851      	ldr	r0, [pc, #324]	; (800d3a0 <_svfiprintf_r+0x1ec>)
 800d25a:	f7f2 ffc1 	bl	80001e0 <memchr>
 800d25e:	9a04      	ldr	r2, [sp, #16]
 800d260:	b9d8      	cbnz	r0, 800d29a <_svfiprintf_r+0xe6>
 800d262:	06d0      	lsls	r0, r2, #27
 800d264:	bf44      	itt	mi
 800d266:	2320      	movmi	r3, #32
 800d268:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d26c:	0711      	lsls	r1, r2, #28
 800d26e:	bf44      	itt	mi
 800d270:	232b      	movmi	r3, #43	; 0x2b
 800d272:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d276:	f89a 3000 	ldrb.w	r3, [sl]
 800d27a:	2b2a      	cmp	r3, #42	; 0x2a
 800d27c:	d015      	beq.n	800d2aa <_svfiprintf_r+0xf6>
 800d27e:	9a07      	ldr	r2, [sp, #28]
 800d280:	4654      	mov	r4, sl
 800d282:	2000      	movs	r0, #0
 800d284:	f04f 0c0a 	mov.w	ip, #10
 800d288:	4621      	mov	r1, r4
 800d28a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d28e:	3b30      	subs	r3, #48	; 0x30
 800d290:	2b09      	cmp	r3, #9
 800d292:	d94e      	bls.n	800d332 <_svfiprintf_r+0x17e>
 800d294:	b1b0      	cbz	r0, 800d2c4 <_svfiprintf_r+0x110>
 800d296:	9207      	str	r2, [sp, #28]
 800d298:	e014      	b.n	800d2c4 <_svfiprintf_r+0x110>
 800d29a:	eba0 0308 	sub.w	r3, r0, r8
 800d29e:	fa09 f303 	lsl.w	r3, r9, r3
 800d2a2:	4313      	orrs	r3, r2
 800d2a4:	9304      	str	r3, [sp, #16]
 800d2a6:	46a2      	mov	sl, r4
 800d2a8:	e7d2      	b.n	800d250 <_svfiprintf_r+0x9c>
 800d2aa:	9b03      	ldr	r3, [sp, #12]
 800d2ac:	1d19      	adds	r1, r3, #4
 800d2ae:	681b      	ldr	r3, [r3, #0]
 800d2b0:	9103      	str	r1, [sp, #12]
 800d2b2:	2b00      	cmp	r3, #0
 800d2b4:	bfbb      	ittet	lt
 800d2b6:	425b      	neglt	r3, r3
 800d2b8:	f042 0202 	orrlt.w	r2, r2, #2
 800d2bc:	9307      	strge	r3, [sp, #28]
 800d2be:	9307      	strlt	r3, [sp, #28]
 800d2c0:	bfb8      	it	lt
 800d2c2:	9204      	strlt	r2, [sp, #16]
 800d2c4:	7823      	ldrb	r3, [r4, #0]
 800d2c6:	2b2e      	cmp	r3, #46	; 0x2e
 800d2c8:	d10c      	bne.n	800d2e4 <_svfiprintf_r+0x130>
 800d2ca:	7863      	ldrb	r3, [r4, #1]
 800d2cc:	2b2a      	cmp	r3, #42	; 0x2a
 800d2ce:	d135      	bne.n	800d33c <_svfiprintf_r+0x188>
 800d2d0:	9b03      	ldr	r3, [sp, #12]
 800d2d2:	1d1a      	adds	r2, r3, #4
 800d2d4:	681b      	ldr	r3, [r3, #0]
 800d2d6:	9203      	str	r2, [sp, #12]
 800d2d8:	2b00      	cmp	r3, #0
 800d2da:	bfb8      	it	lt
 800d2dc:	f04f 33ff 	movlt.w	r3, #4294967295
 800d2e0:	3402      	adds	r4, #2
 800d2e2:	9305      	str	r3, [sp, #20]
 800d2e4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800d3b0 <_svfiprintf_r+0x1fc>
 800d2e8:	7821      	ldrb	r1, [r4, #0]
 800d2ea:	2203      	movs	r2, #3
 800d2ec:	4650      	mov	r0, sl
 800d2ee:	f7f2 ff77 	bl	80001e0 <memchr>
 800d2f2:	b140      	cbz	r0, 800d306 <_svfiprintf_r+0x152>
 800d2f4:	2340      	movs	r3, #64	; 0x40
 800d2f6:	eba0 000a 	sub.w	r0, r0, sl
 800d2fa:	fa03 f000 	lsl.w	r0, r3, r0
 800d2fe:	9b04      	ldr	r3, [sp, #16]
 800d300:	4303      	orrs	r3, r0
 800d302:	3401      	adds	r4, #1
 800d304:	9304      	str	r3, [sp, #16]
 800d306:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d30a:	4826      	ldr	r0, [pc, #152]	; (800d3a4 <_svfiprintf_r+0x1f0>)
 800d30c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d310:	2206      	movs	r2, #6
 800d312:	f7f2 ff65 	bl	80001e0 <memchr>
 800d316:	2800      	cmp	r0, #0
 800d318:	d038      	beq.n	800d38c <_svfiprintf_r+0x1d8>
 800d31a:	4b23      	ldr	r3, [pc, #140]	; (800d3a8 <_svfiprintf_r+0x1f4>)
 800d31c:	bb1b      	cbnz	r3, 800d366 <_svfiprintf_r+0x1b2>
 800d31e:	9b03      	ldr	r3, [sp, #12]
 800d320:	3307      	adds	r3, #7
 800d322:	f023 0307 	bic.w	r3, r3, #7
 800d326:	3308      	adds	r3, #8
 800d328:	9303      	str	r3, [sp, #12]
 800d32a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d32c:	4433      	add	r3, r6
 800d32e:	9309      	str	r3, [sp, #36]	; 0x24
 800d330:	e767      	b.n	800d202 <_svfiprintf_r+0x4e>
 800d332:	fb0c 3202 	mla	r2, ip, r2, r3
 800d336:	460c      	mov	r4, r1
 800d338:	2001      	movs	r0, #1
 800d33a:	e7a5      	b.n	800d288 <_svfiprintf_r+0xd4>
 800d33c:	2300      	movs	r3, #0
 800d33e:	3401      	adds	r4, #1
 800d340:	9305      	str	r3, [sp, #20]
 800d342:	4619      	mov	r1, r3
 800d344:	f04f 0c0a 	mov.w	ip, #10
 800d348:	4620      	mov	r0, r4
 800d34a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d34e:	3a30      	subs	r2, #48	; 0x30
 800d350:	2a09      	cmp	r2, #9
 800d352:	d903      	bls.n	800d35c <_svfiprintf_r+0x1a8>
 800d354:	2b00      	cmp	r3, #0
 800d356:	d0c5      	beq.n	800d2e4 <_svfiprintf_r+0x130>
 800d358:	9105      	str	r1, [sp, #20]
 800d35a:	e7c3      	b.n	800d2e4 <_svfiprintf_r+0x130>
 800d35c:	fb0c 2101 	mla	r1, ip, r1, r2
 800d360:	4604      	mov	r4, r0
 800d362:	2301      	movs	r3, #1
 800d364:	e7f0      	b.n	800d348 <_svfiprintf_r+0x194>
 800d366:	ab03      	add	r3, sp, #12
 800d368:	9300      	str	r3, [sp, #0]
 800d36a:	462a      	mov	r2, r5
 800d36c:	4b0f      	ldr	r3, [pc, #60]	; (800d3ac <_svfiprintf_r+0x1f8>)
 800d36e:	a904      	add	r1, sp, #16
 800d370:	4638      	mov	r0, r7
 800d372:	f3af 8000 	nop.w
 800d376:	1c42      	adds	r2, r0, #1
 800d378:	4606      	mov	r6, r0
 800d37a:	d1d6      	bne.n	800d32a <_svfiprintf_r+0x176>
 800d37c:	89ab      	ldrh	r3, [r5, #12]
 800d37e:	065b      	lsls	r3, r3, #25
 800d380:	f53f af2c 	bmi.w	800d1dc <_svfiprintf_r+0x28>
 800d384:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d386:	b01d      	add	sp, #116	; 0x74
 800d388:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d38c:	ab03      	add	r3, sp, #12
 800d38e:	9300      	str	r3, [sp, #0]
 800d390:	462a      	mov	r2, r5
 800d392:	4b06      	ldr	r3, [pc, #24]	; (800d3ac <_svfiprintf_r+0x1f8>)
 800d394:	a904      	add	r1, sp, #16
 800d396:	4638      	mov	r0, r7
 800d398:	f000 f9d4 	bl	800d744 <_printf_i>
 800d39c:	e7eb      	b.n	800d376 <_svfiprintf_r+0x1c2>
 800d39e:	bf00      	nop
 800d3a0:	0800e6f0 	.word	0x0800e6f0
 800d3a4:	0800e6fa 	.word	0x0800e6fa
 800d3a8:	00000000 	.word	0x00000000
 800d3ac:	0800d0fd 	.word	0x0800d0fd
 800d3b0:	0800e6f6 	.word	0x0800e6f6

0800d3b4 <__sfputc_r>:
 800d3b4:	6893      	ldr	r3, [r2, #8]
 800d3b6:	3b01      	subs	r3, #1
 800d3b8:	2b00      	cmp	r3, #0
 800d3ba:	b410      	push	{r4}
 800d3bc:	6093      	str	r3, [r2, #8]
 800d3be:	da08      	bge.n	800d3d2 <__sfputc_r+0x1e>
 800d3c0:	6994      	ldr	r4, [r2, #24]
 800d3c2:	42a3      	cmp	r3, r4
 800d3c4:	db01      	blt.n	800d3ca <__sfputc_r+0x16>
 800d3c6:	290a      	cmp	r1, #10
 800d3c8:	d103      	bne.n	800d3d2 <__sfputc_r+0x1e>
 800d3ca:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d3ce:	f000 bb33 	b.w	800da38 <__swbuf_r>
 800d3d2:	6813      	ldr	r3, [r2, #0]
 800d3d4:	1c58      	adds	r0, r3, #1
 800d3d6:	6010      	str	r0, [r2, #0]
 800d3d8:	7019      	strb	r1, [r3, #0]
 800d3da:	4608      	mov	r0, r1
 800d3dc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d3e0:	4770      	bx	lr

0800d3e2 <__sfputs_r>:
 800d3e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d3e4:	4606      	mov	r6, r0
 800d3e6:	460f      	mov	r7, r1
 800d3e8:	4614      	mov	r4, r2
 800d3ea:	18d5      	adds	r5, r2, r3
 800d3ec:	42ac      	cmp	r4, r5
 800d3ee:	d101      	bne.n	800d3f4 <__sfputs_r+0x12>
 800d3f0:	2000      	movs	r0, #0
 800d3f2:	e007      	b.n	800d404 <__sfputs_r+0x22>
 800d3f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d3f8:	463a      	mov	r2, r7
 800d3fa:	4630      	mov	r0, r6
 800d3fc:	f7ff ffda 	bl	800d3b4 <__sfputc_r>
 800d400:	1c43      	adds	r3, r0, #1
 800d402:	d1f3      	bne.n	800d3ec <__sfputs_r+0xa>
 800d404:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d408 <_vfiprintf_r>:
 800d408:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d40c:	460d      	mov	r5, r1
 800d40e:	b09d      	sub	sp, #116	; 0x74
 800d410:	4614      	mov	r4, r2
 800d412:	4698      	mov	r8, r3
 800d414:	4606      	mov	r6, r0
 800d416:	b118      	cbz	r0, 800d420 <_vfiprintf_r+0x18>
 800d418:	6983      	ldr	r3, [r0, #24]
 800d41a:	b90b      	cbnz	r3, 800d420 <_vfiprintf_r+0x18>
 800d41c:	f7ff fd3a 	bl	800ce94 <__sinit>
 800d420:	4b89      	ldr	r3, [pc, #548]	; (800d648 <_vfiprintf_r+0x240>)
 800d422:	429d      	cmp	r5, r3
 800d424:	d11b      	bne.n	800d45e <_vfiprintf_r+0x56>
 800d426:	6875      	ldr	r5, [r6, #4]
 800d428:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d42a:	07d9      	lsls	r1, r3, #31
 800d42c:	d405      	bmi.n	800d43a <_vfiprintf_r+0x32>
 800d42e:	89ab      	ldrh	r3, [r5, #12]
 800d430:	059a      	lsls	r2, r3, #22
 800d432:	d402      	bmi.n	800d43a <_vfiprintf_r+0x32>
 800d434:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d436:	f7ff fdcb 	bl	800cfd0 <__retarget_lock_acquire_recursive>
 800d43a:	89ab      	ldrh	r3, [r5, #12]
 800d43c:	071b      	lsls	r3, r3, #28
 800d43e:	d501      	bpl.n	800d444 <_vfiprintf_r+0x3c>
 800d440:	692b      	ldr	r3, [r5, #16]
 800d442:	b9eb      	cbnz	r3, 800d480 <_vfiprintf_r+0x78>
 800d444:	4629      	mov	r1, r5
 800d446:	4630      	mov	r0, r6
 800d448:	f000 fb5a 	bl	800db00 <__swsetup_r>
 800d44c:	b1c0      	cbz	r0, 800d480 <_vfiprintf_r+0x78>
 800d44e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d450:	07dc      	lsls	r4, r3, #31
 800d452:	d50e      	bpl.n	800d472 <_vfiprintf_r+0x6a>
 800d454:	f04f 30ff 	mov.w	r0, #4294967295
 800d458:	b01d      	add	sp, #116	; 0x74
 800d45a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d45e:	4b7b      	ldr	r3, [pc, #492]	; (800d64c <_vfiprintf_r+0x244>)
 800d460:	429d      	cmp	r5, r3
 800d462:	d101      	bne.n	800d468 <_vfiprintf_r+0x60>
 800d464:	68b5      	ldr	r5, [r6, #8]
 800d466:	e7df      	b.n	800d428 <_vfiprintf_r+0x20>
 800d468:	4b79      	ldr	r3, [pc, #484]	; (800d650 <_vfiprintf_r+0x248>)
 800d46a:	429d      	cmp	r5, r3
 800d46c:	bf08      	it	eq
 800d46e:	68f5      	ldreq	r5, [r6, #12]
 800d470:	e7da      	b.n	800d428 <_vfiprintf_r+0x20>
 800d472:	89ab      	ldrh	r3, [r5, #12]
 800d474:	0598      	lsls	r0, r3, #22
 800d476:	d4ed      	bmi.n	800d454 <_vfiprintf_r+0x4c>
 800d478:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d47a:	f7ff fdaa 	bl	800cfd2 <__retarget_lock_release_recursive>
 800d47e:	e7e9      	b.n	800d454 <_vfiprintf_r+0x4c>
 800d480:	2300      	movs	r3, #0
 800d482:	9309      	str	r3, [sp, #36]	; 0x24
 800d484:	2320      	movs	r3, #32
 800d486:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d48a:	f8cd 800c 	str.w	r8, [sp, #12]
 800d48e:	2330      	movs	r3, #48	; 0x30
 800d490:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800d654 <_vfiprintf_r+0x24c>
 800d494:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d498:	f04f 0901 	mov.w	r9, #1
 800d49c:	4623      	mov	r3, r4
 800d49e:	469a      	mov	sl, r3
 800d4a0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d4a4:	b10a      	cbz	r2, 800d4aa <_vfiprintf_r+0xa2>
 800d4a6:	2a25      	cmp	r2, #37	; 0x25
 800d4a8:	d1f9      	bne.n	800d49e <_vfiprintf_r+0x96>
 800d4aa:	ebba 0b04 	subs.w	fp, sl, r4
 800d4ae:	d00b      	beq.n	800d4c8 <_vfiprintf_r+0xc0>
 800d4b0:	465b      	mov	r3, fp
 800d4b2:	4622      	mov	r2, r4
 800d4b4:	4629      	mov	r1, r5
 800d4b6:	4630      	mov	r0, r6
 800d4b8:	f7ff ff93 	bl	800d3e2 <__sfputs_r>
 800d4bc:	3001      	adds	r0, #1
 800d4be:	f000 80aa 	beq.w	800d616 <_vfiprintf_r+0x20e>
 800d4c2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d4c4:	445a      	add	r2, fp
 800d4c6:	9209      	str	r2, [sp, #36]	; 0x24
 800d4c8:	f89a 3000 	ldrb.w	r3, [sl]
 800d4cc:	2b00      	cmp	r3, #0
 800d4ce:	f000 80a2 	beq.w	800d616 <_vfiprintf_r+0x20e>
 800d4d2:	2300      	movs	r3, #0
 800d4d4:	f04f 32ff 	mov.w	r2, #4294967295
 800d4d8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d4dc:	f10a 0a01 	add.w	sl, sl, #1
 800d4e0:	9304      	str	r3, [sp, #16]
 800d4e2:	9307      	str	r3, [sp, #28]
 800d4e4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d4e8:	931a      	str	r3, [sp, #104]	; 0x68
 800d4ea:	4654      	mov	r4, sl
 800d4ec:	2205      	movs	r2, #5
 800d4ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d4f2:	4858      	ldr	r0, [pc, #352]	; (800d654 <_vfiprintf_r+0x24c>)
 800d4f4:	f7f2 fe74 	bl	80001e0 <memchr>
 800d4f8:	9a04      	ldr	r2, [sp, #16]
 800d4fa:	b9d8      	cbnz	r0, 800d534 <_vfiprintf_r+0x12c>
 800d4fc:	06d1      	lsls	r1, r2, #27
 800d4fe:	bf44      	itt	mi
 800d500:	2320      	movmi	r3, #32
 800d502:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d506:	0713      	lsls	r3, r2, #28
 800d508:	bf44      	itt	mi
 800d50a:	232b      	movmi	r3, #43	; 0x2b
 800d50c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d510:	f89a 3000 	ldrb.w	r3, [sl]
 800d514:	2b2a      	cmp	r3, #42	; 0x2a
 800d516:	d015      	beq.n	800d544 <_vfiprintf_r+0x13c>
 800d518:	9a07      	ldr	r2, [sp, #28]
 800d51a:	4654      	mov	r4, sl
 800d51c:	2000      	movs	r0, #0
 800d51e:	f04f 0c0a 	mov.w	ip, #10
 800d522:	4621      	mov	r1, r4
 800d524:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d528:	3b30      	subs	r3, #48	; 0x30
 800d52a:	2b09      	cmp	r3, #9
 800d52c:	d94e      	bls.n	800d5cc <_vfiprintf_r+0x1c4>
 800d52e:	b1b0      	cbz	r0, 800d55e <_vfiprintf_r+0x156>
 800d530:	9207      	str	r2, [sp, #28]
 800d532:	e014      	b.n	800d55e <_vfiprintf_r+0x156>
 800d534:	eba0 0308 	sub.w	r3, r0, r8
 800d538:	fa09 f303 	lsl.w	r3, r9, r3
 800d53c:	4313      	orrs	r3, r2
 800d53e:	9304      	str	r3, [sp, #16]
 800d540:	46a2      	mov	sl, r4
 800d542:	e7d2      	b.n	800d4ea <_vfiprintf_r+0xe2>
 800d544:	9b03      	ldr	r3, [sp, #12]
 800d546:	1d19      	adds	r1, r3, #4
 800d548:	681b      	ldr	r3, [r3, #0]
 800d54a:	9103      	str	r1, [sp, #12]
 800d54c:	2b00      	cmp	r3, #0
 800d54e:	bfbb      	ittet	lt
 800d550:	425b      	neglt	r3, r3
 800d552:	f042 0202 	orrlt.w	r2, r2, #2
 800d556:	9307      	strge	r3, [sp, #28]
 800d558:	9307      	strlt	r3, [sp, #28]
 800d55a:	bfb8      	it	lt
 800d55c:	9204      	strlt	r2, [sp, #16]
 800d55e:	7823      	ldrb	r3, [r4, #0]
 800d560:	2b2e      	cmp	r3, #46	; 0x2e
 800d562:	d10c      	bne.n	800d57e <_vfiprintf_r+0x176>
 800d564:	7863      	ldrb	r3, [r4, #1]
 800d566:	2b2a      	cmp	r3, #42	; 0x2a
 800d568:	d135      	bne.n	800d5d6 <_vfiprintf_r+0x1ce>
 800d56a:	9b03      	ldr	r3, [sp, #12]
 800d56c:	1d1a      	adds	r2, r3, #4
 800d56e:	681b      	ldr	r3, [r3, #0]
 800d570:	9203      	str	r2, [sp, #12]
 800d572:	2b00      	cmp	r3, #0
 800d574:	bfb8      	it	lt
 800d576:	f04f 33ff 	movlt.w	r3, #4294967295
 800d57a:	3402      	adds	r4, #2
 800d57c:	9305      	str	r3, [sp, #20]
 800d57e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800d664 <_vfiprintf_r+0x25c>
 800d582:	7821      	ldrb	r1, [r4, #0]
 800d584:	2203      	movs	r2, #3
 800d586:	4650      	mov	r0, sl
 800d588:	f7f2 fe2a 	bl	80001e0 <memchr>
 800d58c:	b140      	cbz	r0, 800d5a0 <_vfiprintf_r+0x198>
 800d58e:	2340      	movs	r3, #64	; 0x40
 800d590:	eba0 000a 	sub.w	r0, r0, sl
 800d594:	fa03 f000 	lsl.w	r0, r3, r0
 800d598:	9b04      	ldr	r3, [sp, #16]
 800d59a:	4303      	orrs	r3, r0
 800d59c:	3401      	adds	r4, #1
 800d59e:	9304      	str	r3, [sp, #16]
 800d5a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d5a4:	482c      	ldr	r0, [pc, #176]	; (800d658 <_vfiprintf_r+0x250>)
 800d5a6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d5aa:	2206      	movs	r2, #6
 800d5ac:	f7f2 fe18 	bl	80001e0 <memchr>
 800d5b0:	2800      	cmp	r0, #0
 800d5b2:	d03f      	beq.n	800d634 <_vfiprintf_r+0x22c>
 800d5b4:	4b29      	ldr	r3, [pc, #164]	; (800d65c <_vfiprintf_r+0x254>)
 800d5b6:	bb1b      	cbnz	r3, 800d600 <_vfiprintf_r+0x1f8>
 800d5b8:	9b03      	ldr	r3, [sp, #12]
 800d5ba:	3307      	adds	r3, #7
 800d5bc:	f023 0307 	bic.w	r3, r3, #7
 800d5c0:	3308      	adds	r3, #8
 800d5c2:	9303      	str	r3, [sp, #12]
 800d5c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d5c6:	443b      	add	r3, r7
 800d5c8:	9309      	str	r3, [sp, #36]	; 0x24
 800d5ca:	e767      	b.n	800d49c <_vfiprintf_r+0x94>
 800d5cc:	fb0c 3202 	mla	r2, ip, r2, r3
 800d5d0:	460c      	mov	r4, r1
 800d5d2:	2001      	movs	r0, #1
 800d5d4:	e7a5      	b.n	800d522 <_vfiprintf_r+0x11a>
 800d5d6:	2300      	movs	r3, #0
 800d5d8:	3401      	adds	r4, #1
 800d5da:	9305      	str	r3, [sp, #20]
 800d5dc:	4619      	mov	r1, r3
 800d5de:	f04f 0c0a 	mov.w	ip, #10
 800d5e2:	4620      	mov	r0, r4
 800d5e4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d5e8:	3a30      	subs	r2, #48	; 0x30
 800d5ea:	2a09      	cmp	r2, #9
 800d5ec:	d903      	bls.n	800d5f6 <_vfiprintf_r+0x1ee>
 800d5ee:	2b00      	cmp	r3, #0
 800d5f0:	d0c5      	beq.n	800d57e <_vfiprintf_r+0x176>
 800d5f2:	9105      	str	r1, [sp, #20]
 800d5f4:	e7c3      	b.n	800d57e <_vfiprintf_r+0x176>
 800d5f6:	fb0c 2101 	mla	r1, ip, r1, r2
 800d5fa:	4604      	mov	r4, r0
 800d5fc:	2301      	movs	r3, #1
 800d5fe:	e7f0      	b.n	800d5e2 <_vfiprintf_r+0x1da>
 800d600:	ab03      	add	r3, sp, #12
 800d602:	9300      	str	r3, [sp, #0]
 800d604:	462a      	mov	r2, r5
 800d606:	4b16      	ldr	r3, [pc, #88]	; (800d660 <_vfiprintf_r+0x258>)
 800d608:	a904      	add	r1, sp, #16
 800d60a:	4630      	mov	r0, r6
 800d60c:	f3af 8000 	nop.w
 800d610:	4607      	mov	r7, r0
 800d612:	1c78      	adds	r0, r7, #1
 800d614:	d1d6      	bne.n	800d5c4 <_vfiprintf_r+0x1bc>
 800d616:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d618:	07d9      	lsls	r1, r3, #31
 800d61a:	d405      	bmi.n	800d628 <_vfiprintf_r+0x220>
 800d61c:	89ab      	ldrh	r3, [r5, #12]
 800d61e:	059a      	lsls	r2, r3, #22
 800d620:	d402      	bmi.n	800d628 <_vfiprintf_r+0x220>
 800d622:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d624:	f7ff fcd5 	bl	800cfd2 <__retarget_lock_release_recursive>
 800d628:	89ab      	ldrh	r3, [r5, #12]
 800d62a:	065b      	lsls	r3, r3, #25
 800d62c:	f53f af12 	bmi.w	800d454 <_vfiprintf_r+0x4c>
 800d630:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d632:	e711      	b.n	800d458 <_vfiprintf_r+0x50>
 800d634:	ab03      	add	r3, sp, #12
 800d636:	9300      	str	r3, [sp, #0]
 800d638:	462a      	mov	r2, r5
 800d63a:	4b09      	ldr	r3, [pc, #36]	; (800d660 <_vfiprintf_r+0x258>)
 800d63c:	a904      	add	r1, sp, #16
 800d63e:	4630      	mov	r0, r6
 800d640:	f000 f880 	bl	800d744 <_printf_i>
 800d644:	e7e4      	b.n	800d610 <_vfiprintf_r+0x208>
 800d646:	bf00      	nop
 800d648:	0800e6b0 	.word	0x0800e6b0
 800d64c:	0800e6d0 	.word	0x0800e6d0
 800d650:	0800e690 	.word	0x0800e690
 800d654:	0800e6f0 	.word	0x0800e6f0
 800d658:	0800e6fa 	.word	0x0800e6fa
 800d65c:	00000000 	.word	0x00000000
 800d660:	0800d3e3 	.word	0x0800d3e3
 800d664:	0800e6f6 	.word	0x0800e6f6

0800d668 <_printf_common>:
 800d668:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d66c:	4616      	mov	r6, r2
 800d66e:	4699      	mov	r9, r3
 800d670:	688a      	ldr	r2, [r1, #8]
 800d672:	690b      	ldr	r3, [r1, #16]
 800d674:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d678:	4293      	cmp	r3, r2
 800d67a:	bfb8      	it	lt
 800d67c:	4613      	movlt	r3, r2
 800d67e:	6033      	str	r3, [r6, #0]
 800d680:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d684:	4607      	mov	r7, r0
 800d686:	460c      	mov	r4, r1
 800d688:	b10a      	cbz	r2, 800d68e <_printf_common+0x26>
 800d68a:	3301      	adds	r3, #1
 800d68c:	6033      	str	r3, [r6, #0]
 800d68e:	6823      	ldr	r3, [r4, #0]
 800d690:	0699      	lsls	r1, r3, #26
 800d692:	bf42      	ittt	mi
 800d694:	6833      	ldrmi	r3, [r6, #0]
 800d696:	3302      	addmi	r3, #2
 800d698:	6033      	strmi	r3, [r6, #0]
 800d69a:	6825      	ldr	r5, [r4, #0]
 800d69c:	f015 0506 	ands.w	r5, r5, #6
 800d6a0:	d106      	bne.n	800d6b0 <_printf_common+0x48>
 800d6a2:	f104 0a19 	add.w	sl, r4, #25
 800d6a6:	68e3      	ldr	r3, [r4, #12]
 800d6a8:	6832      	ldr	r2, [r6, #0]
 800d6aa:	1a9b      	subs	r3, r3, r2
 800d6ac:	42ab      	cmp	r3, r5
 800d6ae:	dc26      	bgt.n	800d6fe <_printf_common+0x96>
 800d6b0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d6b4:	1e13      	subs	r3, r2, #0
 800d6b6:	6822      	ldr	r2, [r4, #0]
 800d6b8:	bf18      	it	ne
 800d6ba:	2301      	movne	r3, #1
 800d6bc:	0692      	lsls	r2, r2, #26
 800d6be:	d42b      	bmi.n	800d718 <_printf_common+0xb0>
 800d6c0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d6c4:	4649      	mov	r1, r9
 800d6c6:	4638      	mov	r0, r7
 800d6c8:	47c0      	blx	r8
 800d6ca:	3001      	adds	r0, #1
 800d6cc:	d01e      	beq.n	800d70c <_printf_common+0xa4>
 800d6ce:	6823      	ldr	r3, [r4, #0]
 800d6d0:	68e5      	ldr	r5, [r4, #12]
 800d6d2:	6832      	ldr	r2, [r6, #0]
 800d6d4:	f003 0306 	and.w	r3, r3, #6
 800d6d8:	2b04      	cmp	r3, #4
 800d6da:	bf08      	it	eq
 800d6dc:	1aad      	subeq	r5, r5, r2
 800d6de:	68a3      	ldr	r3, [r4, #8]
 800d6e0:	6922      	ldr	r2, [r4, #16]
 800d6e2:	bf0c      	ite	eq
 800d6e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d6e8:	2500      	movne	r5, #0
 800d6ea:	4293      	cmp	r3, r2
 800d6ec:	bfc4      	itt	gt
 800d6ee:	1a9b      	subgt	r3, r3, r2
 800d6f0:	18ed      	addgt	r5, r5, r3
 800d6f2:	2600      	movs	r6, #0
 800d6f4:	341a      	adds	r4, #26
 800d6f6:	42b5      	cmp	r5, r6
 800d6f8:	d11a      	bne.n	800d730 <_printf_common+0xc8>
 800d6fa:	2000      	movs	r0, #0
 800d6fc:	e008      	b.n	800d710 <_printf_common+0xa8>
 800d6fe:	2301      	movs	r3, #1
 800d700:	4652      	mov	r2, sl
 800d702:	4649      	mov	r1, r9
 800d704:	4638      	mov	r0, r7
 800d706:	47c0      	blx	r8
 800d708:	3001      	adds	r0, #1
 800d70a:	d103      	bne.n	800d714 <_printf_common+0xac>
 800d70c:	f04f 30ff 	mov.w	r0, #4294967295
 800d710:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d714:	3501      	adds	r5, #1
 800d716:	e7c6      	b.n	800d6a6 <_printf_common+0x3e>
 800d718:	18e1      	adds	r1, r4, r3
 800d71a:	1c5a      	adds	r2, r3, #1
 800d71c:	2030      	movs	r0, #48	; 0x30
 800d71e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d722:	4422      	add	r2, r4
 800d724:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d728:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d72c:	3302      	adds	r3, #2
 800d72e:	e7c7      	b.n	800d6c0 <_printf_common+0x58>
 800d730:	2301      	movs	r3, #1
 800d732:	4622      	mov	r2, r4
 800d734:	4649      	mov	r1, r9
 800d736:	4638      	mov	r0, r7
 800d738:	47c0      	blx	r8
 800d73a:	3001      	adds	r0, #1
 800d73c:	d0e6      	beq.n	800d70c <_printf_common+0xa4>
 800d73e:	3601      	adds	r6, #1
 800d740:	e7d9      	b.n	800d6f6 <_printf_common+0x8e>
	...

0800d744 <_printf_i>:
 800d744:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d748:	7e0f      	ldrb	r7, [r1, #24]
 800d74a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d74c:	2f78      	cmp	r7, #120	; 0x78
 800d74e:	4691      	mov	r9, r2
 800d750:	4680      	mov	r8, r0
 800d752:	460c      	mov	r4, r1
 800d754:	469a      	mov	sl, r3
 800d756:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800d75a:	d807      	bhi.n	800d76c <_printf_i+0x28>
 800d75c:	2f62      	cmp	r7, #98	; 0x62
 800d75e:	d80a      	bhi.n	800d776 <_printf_i+0x32>
 800d760:	2f00      	cmp	r7, #0
 800d762:	f000 80d8 	beq.w	800d916 <_printf_i+0x1d2>
 800d766:	2f58      	cmp	r7, #88	; 0x58
 800d768:	f000 80a3 	beq.w	800d8b2 <_printf_i+0x16e>
 800d76c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d770:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d774:	e03a      	b.n	800d7ec <_printf_i+0xa8>
 800d776:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d77a:	2b15      	cmp	r3, #21
 800d77c:	d8f6      	bhi.n	800d76c <_printf_i+0x28>
 800d77e:	a101      	add	r1, pc, #4	; (adr r1, 800d784 <_printf_i+0x40>)
 800d780:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d784:	0800d7dd 	.word	0x0800d7dd
 800d788:	0800d7f1 	.word	0x0800d7f1
 800d78c:	0800d76d 	.word	0x0800d76d
 800d790:	0800d76d 	.word	0x0800d76d
 800d794:	0800d76d 	.word	0x0800d76d
 800d798:	0800d76d 	.word	0x0800d76d
 800d79c:	0800d7f1 	.word	0x0800d7f1
 800d7a0:	0800d76d 	.word	0x0800d76d
 800d7a4:	0800d76d 	.word	0x0800d76d
 800d7a8:	0800d76d 	.word	0x0800d76d
 800d7ac:	0800d76d 	.word	0x0800d76d
 800d7b0:	0800d8fd 	.word	0x0800d8fd
 800d7b4:	0800d821 	.word	0x0800d821
 800d7b8:	0800d8df 	.word	0x0800d8df
 800d7bc:	0800d76d 	.word	0x0800d76d
 800d7c0:	0800d76d 	.word	0x0800d76d
 800d7c4:	0800d91f 	.word	0x0800d91f
 800d7c8:	0800d76d 	.word	0x0800d76d
 800d7cc:	0800d821 	.word	0x0800d821
 800d7d0:	0800d76d 	.word	0x0800d76d
 800d7d4:	0800d76d 	.word	0x0800d76d
 800d7d8:	0800d8e7 	.word	0x0800d8e7
 800d7dc:	682b      	ldr	r3, [r5, #0]
 800d7de:	1d1a      	adds	r2, r3, #4
 800d7e0:	681b      	ldr	r3, [r3, #0]
 800d7e2:	602a      	str	r2, [r5, #0]
 800d7e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d7e8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d7ec:	2301      	movs	r3, #1
 800d7ee:	e0a3      	b.n	800d938 <_printf_i+0x1f4>
 800d7f0:	6820      	ldr	r0, [r4, #0]
 800d7f2:	6829      	ldr	r1, [r5, #0]
 800d7f4:	0606      	lsls	r6, r0, #24
 800d7f6:	f101 0304 	add.w	r3, r1, #4
 800d7fa:	d50a      	bpl.n	800d812 <_printf_i+0xce>
 800d7fc:	680e      	ldr	r6, [r1, #0]
 800d7fe:	602b      	str	r3, [r5, #0]
 800d800:	2e00      	cmp	r6, #0
 800d802:	da03      	bge.n	800d80c <_printf_i+0xc8>
 800d804:	232d      	movs	r3, #45	; 0x2d
 800d806:	4276      	negs	r6, r6
 800d808:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d80c:	485e      	ldr	r0, [pc, #376]	; (800d988 <_printf_i+0x244>)
 800d80e:	230a      	movs	r3, #10
 800d810:	e019      	b.n	800d846 <_printf_i+0x102>
 800d812:	680e      	ldr	r6, [r1, #0]
 800d814:	602b      	str	r3, [r5, #0]
 800d816:	f010 0f40 	tst.w	r0, #64	; 0x40
 800d81a:	bf18      	it	ne
 800d81c:	b236      	sxthne	r6, r6
 800d81e:	e7ef      	b.n	800d800 <_printf_i+0xbc>
 800d820:	682b      	ldr	r3, [r5, #0]
 800d822:	6820      	ldr	r0, [r4, #0]
 800d824:	1d19      	adds	r1, r3, #4
 800d826:	6029      	str	r1, [r5, #0]
 800d828:	0601      	lsls	r1, r0, #24
 800d82a:	d501      	bpl.n	800d830 <_printf_i+0xec>
 800d82c:	681e      	ldr	r6, [r3, #0]
 800d82e:	e002      	b.n	800d836 <_printf_i+0xf2>
 800d830:	0646      	lsls	r6, r0, #25
 800d832:	d5fb      	bpl.n	800d82c <_printf_i+0xe8>
 800d834:	881e      	ldrh	r6, [r3, #0]
 800d836:	4854      	ldr	r0, [pc, #336]	; (800d988 <_printf_i+0x244>)
 800d838:	2f6f      	cmp	r7, #111	; 0x6f
 800d83a:	bf0c      	ite	eq
 800d83c:	2308      	moveq	r3, #8
 800d83e:	230a      	movne	r3, #10
 800d840:	2100      	movs	r1, #0
 800d842:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d846:	6865      	ldr	r5, [r4, #4]
 800d848:	60a5      	str	r5, [r4, #8]
 800d84a:	2d00      	cmp	r5, #0
 800d84c:	bfa2      	ittt	ge
 800d84e:	6821      	ldrge	r1, [r4, #0]
 800d850:	f021 0104 	bicge.w	r1, r1, #4
 800d854:	6021      	strge	r1, [r4, #0]
 800d856:	b90e      	cbnz	r6, 800d85c <_printf_i+0x118>
 800d858:	2d00      	cmp	r5, #0
 800d85a:	d04d      	beq.n	800d8f8 <_printf_i+0x1b4>
 800d85c:	4615      	mov	r5, r2
 800d85e:	fbb6 f1f3 	udiv	r1, r6, r3
 800d862:	fb03 6711 	mls	r7, r3, r1, r6
 800d866:	5dc7      	ldrb	r7, [r0, r7]
 800d868:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800d86c:	4637      	mov	r7, r6
 800d86e:	42bb      	cmp	r3, r7
 800d870:	460e      	mov	r6, r1
 800d872:	d9f4      	bls.n	800d85e <_printf_i+0x11a>
 800d874:	2b08      	cmp	r3, #8
 800d876:	d10b      	bne.n	800d890 <_printf_i+0x14c>
 800d878:	6823      	ldr	r3, [r4, #0]
 800d87a:	07de      	lsls	r6, r3, #31
 800d87c:	d508      	bpl.n	800d890 <_printf_i+0x14c>
 800d87e:	6923      	ldr	r3, [r4, #16]
 800d880:	6861      	ldr	r1, [r4, #4]
 800d882:	4299      	cmp	r1, r3
 800d884:	bfde      	ittt	le
 800d886:	2330      	movle	r3, #48	; 0x30
 800d888:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d88c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800d890:	1b52      	subs	r2, r2, r5
 800d892:	6122      	str	r2, [r4, #16]
 800d894:	f8cd a000 	str.w	sl, [sp]
 800d898:	464b      	mov	r3, r9
 800d89a:	aa03      	add	r2, sp, #12
 800d89c:	4621      	mov	r1, r4
 800d89e:	4640      	mov	r0, r8
 800d8a0:	f7ff fee2 	bl	800d668 <_printf_common>
 800d8a4:	3001      	adds	r0, #1
 800d8a6:	d14c      	bne.n	800d942 <_printf_i+0x1fe>
 800d8a8:	f04f 30ff 	mov.w	r0, #4294967295
 800d8ac:	b004      	add	sp, #16
 800d8ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d8b2:	4835      	ldr	r0, [pc, #212]	; (800d988 <_printf_i+0x244>)
 800d8b4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800d8b8:	6829      	ldr	r1, [r5, #0]
 800d8ba:	6823      	ldr	r3, [r4, #0]
 800d8bc:	f851 6b04 	ldr.w	r6, [r1], #4
 800d8c0:	6029      	str	r1, [r5, #0]
 800d8c2:	061d      	lsls	r5, r3, #24
 800d8c4:	d514      	bpl.n	800d8f0 <_printf_i+0x1ac>
 800d8c6:	07df      	lsls	r7, r3, #31
 800d8c8:	bf44      	itt	mi
 800d8ca:	f043 0320 	orrmi.w	r3, r3, #32
 800d8ce:	6023      	strmi	r3, [r4, #0]
 800d8d0:	b91e      	cbnz	r6, 800d8da <_printf_i+0x196>
 800d8d2:	6823      	ldr	r3, [r4, #0]
 800d8d4:	f023 0320 	bic.w	r3, r3, #32
 800d8d8:	6023      	str	r3, [r4, #0]
 800d8da:	2310      	movs	r3, #16
 800d8dc:	e7b0      	b.n	800d840 <_printf_i+0xfc>
 800d8de:	6823      	ldr	r3, [r4, #0]
 800d8e0:	f043 0320 	orr.w	r3, r3, #32
 800d8e4:	6023      	str	r3, [r4, #0]
 800d8e6:	2378      	movs	r3, #120	; 0x78
 800d8e8:	4828      	ldr	r0, [pc, #160]	; (800d98c <_printf_i+0x248>)
 800d8ea:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d8ee:	e7e3      	b.n	800d8b8 <_printf_i+0x174>
 800d8f0:	0659      	lsls	r1, r3, #25
 800d8f2:	bf48      	it	mi
 800d8f4:	b2b6      	uxthmi	r6, r6
 800d8f6:	e7e6      	b.n	800d8c6 <_printf_i+0x182>
 800d8f8:	4615      	mov	r5, r2
 800d8fa:	e7bb      	b.n	800d874 <_printf_i+0x130>
 800d8fc:	682b      	ldr	r3, [r5, #0]
 800d8fe:	6826      	ldr	r6, [r4, #0]
 800d900:	6961      	ldr	r1, [r4, #20]
 800d902:	1d18      	adds	r0, r3, #4
 800d904:	6028      	str	r0, [r5, #0]
 800d906:	0635      	lsls	r5, r6, #24
 800d908:	681b      	ldr	r3, [r3, #0]
 800d90a:	d501      	bpl.n	800d910 <_printf_i+0x1cc>
 800d90c:	6019      	str	r1, [r3, #0]
 800d90e:	e002      	b.n	800d916 <_printf_i+0x1d2>
 800d910:	0670      	lsls	r0, r6, #25
 800d912:	d5fb      	bpl.n	800d90c <_printf_i+0x1c8>
 800d914:	8019      	strh	r1, [r3, #0]
 800d916:	2300      	movs	r3, #0
 800d918:	6123      	str	r3, [r4, #16]
 800d91a:	4615      	mov	r5, r2
 800d91c:	e7ba      	b.n	800d894 <_printf_i+0x150>
 800d91e:	682b      	ldr	r3, [r5, #0]
 800d920:	1d1a      	adds	r2, r3, #4
 800d922:	602a      	str	r2, [r5, #0]
 800d924:	681d      	ldr	r5, [r3, #0]
 800d926:	6862      	ldr	r2, [r4, #4]
 800d928:	2100      	movs	r1, #0
 800d92a:	4628      	mov	r0, r5
 800d92c:	f7f2 fc58 	bl	80001e0 <memchr>
 800d930:	b108      	cbz	r0, 800d936 <_printf_i+0x1f2>
 800d932:	1b40      	subs	r0, r0, r5
 800d934:	6060      	str	r0, [r4, #4]
 800d936:	6863      	ldr	r3, [r4, #4]
 800d938:	6123      	str	r3, [r4, #16]
 800d93a:	2300      	movs	r3, #0
 800d93c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d940:	e7a8      	b.n	800d894 <_printf_i+0x150>
 800d942:	6923      	ldr	r3, [r4, #16]
 800d944:	462a      	mov	r2, r5
 800d946:	4649      	mov	r1, r9
 800d948:	4640      	mov	r0, r8
 800d94a:	47d0      	blx	sl
 800d94c:	3001      	adds	r0, #1
 800d94e:	d0ab      	beq.n	800d8a8 <_printf_i+0x164>
 800d950:	6823      	ldr	r3, [r4, #0]
 800d952:	079b      	lsls	r3, r3, #30
 800d954:	d413      	bmi.n	800d97e <_printf_i+0x23a>
 800d956:	68e0      	ldr	r0, [r4, #12]
 800d958:	9b03      	ldr	r3, [sp, #12]
 800d95a:	4298      	cmp	r0, r3
 800d95c:	bfb8      	it	lt
 800d95e:	4618      	movlt	r0, r3
 800d960:	e7a4      	b.n	800d8ac <_printf_i+0x168>
 800d962:	2301      	movs	r3, #1
 800d964:	4632      	mov	r2, r6
 800d966:	4649      	mov	r1, r9
 800d968:	4640      	mov	r0, r8
 800d96a:	47d0      	blx	sl
 800d96c:	3001      	adds	r0, #1
 800d96e:	d09b      	beq.n	800d8a8 <_printf_i+0x164>
 800d970:	3501      	adds	r5, #1
 800d972:	68e3      	ldr	r3, [r4, #12]
 800d974:	9903      	ldr	r1, [sp, #12]
 800d976:	1a5b      	subs	r3, r3, r1
 800d978:	42ab      	cmp	r3, r5
 800d97a:	dcf2      	bgt.n	800d962 <_printf_i+0x21e>
 800d97c:	e7eb      	b.n	800d956 <_printf_i+0x212>
 800d97e:	2500      	movs	r5, #0
 800d980:	f104 0619 	add.w	r6, r4, #25
 800d984:	e7f5      	b.n	800d972 <_printf_i+0x22e>
 800d986:	bf00      	nop
 800d988:	0800e701 	.word	0x0800e701
 800d98c:	0800e712 	.word	0x0800e712

0800d990 <_sbrk_r>:
 800d990:	b538      	push	{r3, r4, r5, lr}
 800d992:	4d06      	ldr	r5, [pc, #24]	; (800d9ac <_sbrk_r+0x1c>)
 800d994:	2300      	movs	r3, #0
 800d996:	4604      	mov	r4, r0
 800d998:	4608      	mov	r0, r1
 800d99a:	602b      	str	r3, [r5, #0]
 800d99c:	f7f3 ff9a 	bl	80018d4 <_sbrk>
 800d9a0:	1c43      	adds	r3, r0, #1
 800d9a2:	d102      	bne.n	800d9aa <_sbrk_r+0x1a>
 800d9a4:	682b      	ldr	r3, [r5, #0]
 800d9a6:	b103      	cbz	r3, 800d9aa <_sbrk_r+0x1a>
 800d9a8:	6023      	str	r3, [r4, #0]
 800d9aa:	bd38      	pop	{r3, r4, r5, pc}
 800d9ac:	20001734 	.word	0x20001734

0800d9b0 <__sread>:
 800d9b0:	b510      	push	{r4, lr}
 800d9b2:	460c      	mov	r4, r1
 800d9b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d9b8:	f000 fb0a 	bl	800dfd0 <_read_r>
 800d9bc:	2800      	cmp	r0, #0
 800d9be:	bfab      	itete	ge
 800d9c0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d9c2:	89a3      	ldrhlt	r3, [r4, #12]
 800d9c4:	181b      	addge	r3, r3, r0
 800d9c6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d9ca:	bfac      	ite	ge
 800d9cc:	6563      	strge	r3, [r4, #84]	; 0x54
 800d9ce:	81a3      	strhlt	r3, [r4, #12]
 800d9d0:	bd10      	pop	{r4, pc}

0800d9d2 <__swrite>:
 800d9d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d9d6:	461f      	mov	r7, r3
 800d9d8:	898b      	ldrh	r3, [r1, #12]
 800d9da:	05db      	lsls	r3, r3, #23
 800d9dc:	4605      	mov	r5, r0
 800d9de:	460c      	mov	r4, r1
 800d9e0:	4616      	mov	r6, r2
 800d9e2:	d505      	bpl.n	800d9f0 <__swrite+0x1e>
 800d9e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d9e8:	2302      	movs	r3, #2
 800d9ea:	2200      	movs	r2, #0
 800d9ec:	f000 f9c8 	bl	800dd80 <_lseek_r>
 800d9f0:	89a3      	ldrh	r3, [r4, #12]
 800d9f2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d9f6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d9fa:	81a3      	strh	r3, [r4, #12]
 800d9fc:	4632      	mov	r2, r6
 800d9fe:	463b      	mov	r3, r7
 800da00:	4628      	mov	r0, r5
 800da02:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800da06:	f000 b869 	b.w	800dadc <_write_r>

0800da0a <__sseek>:
 800da0a:	b510      	push	{r4, lr}
 800da0c:	460c      	mov	r4, r1
 800da0e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800da12:	f000 f9b5 	bl	800dd80 <_lseek_r>
 800da16:	1c43      	adds	r3, r0, #1
 800da18:	89a3      	ldrh	r3, [r4, #12]
 800da1a:	bf15      	itete	ne
 800da1c:	6560      	strne	r0, [r4, #84]	; 0x54
 800da1e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800da22:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800da26:	81a3      	strheq	r3, [r4, #12]
 800da28:	bf18      	it	ne
 800da2a:	81a3      	strhne	r3, [r4, #12]
 800da2c:	bd10      	pop	{r4, pc}

0800da2e <__sclose>:
 800da2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800da32:	f000 b8d3 	b.w	800dbdc <_close_r>
	...

0800da38 <__swbuf_r>:
 800da38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da3a:	460e      	mov	r6, r1
 800da3c:	4614      	mov	r4, r2
 800da3e:	4605      	mov	r5, r0
 800da40:	b118      	cbz	r0, 800da4a <__swbuf_r+0x12>
 800da42:	6983      	ldr	r3, [r0, #24]
 800da44:	b90b      	cbnz	r3, 800da4a <__swbuf_r+0x12>
 800da46:	f7ff fa25 	bl	800ce94 <__sinit>
 800da4a:	4b21      	ldr	r3, [pc, #132]	; (800dad0 <__swbuf_r+0x98>)
 800da4c:	429c      	cmp	r4, r3
 800da4e:	d12b      	bne.n	800daa8 <__swbuf_r+0x70>
 800da50:	686c      	ldr	r4, [r5, #4]
 800da52:	69a3      	ldr	r3, [r4, #24]
 800da54:	60a3      	str	r3, [r4, #8]
 800da56:	89a3      	ldrh	r3, [r4, #12]
 800da58:	071a      	lsls	r2, r3, #28
 800da5a:	d52f      	bpl.n	800dabc <__swbuf_r+0x84>
 800da5c:	6923      	ldr	r3, [r4, #16]
 800da5e:	b36b      	cbz	r3, 800dabc <__swbuf_r+0x84>
 800da60:	6923      	ldr	r3, [r4, #16]
 800da62:	6820      	ldr	r0, [r4, #0]
 800da64:	1ac0      	subs	r0, r0, r3
 800da66:	6963      	ldr	r3, [r4, #20]
 800da68:	b2f6      	uxtb	r6, r6
 800da6a:	4283      	cmp	r3, r0
 800da6c:	4637      	mov	r7, r6
 800da6e:	dc04      	bgt.n	800da7a <__swbuf_r+0x42>
 800da70:	4621      	mov	r1, r4
 800da72:	4628      	mov	r0, r5
 800da74:	f000 f948 	bl	800dd08 <_fflush_r>
 800da78:	bb30      	cbnz	r0, 800dac8 <__swbuf_r+0x90>
 800da7a:	68a3      	ldr	r3, [r4, #8]
 800da7c:	3b01      	subs	r3, #1
 800da7e:	60a3      	str	r3, [r4, #8]
 800da80:	6823      	ldr	r3, [r4, #0]
 800da82:	1c5a      	adds	r2, r3, #1
 800da84:	6022      	str	r2, [r4, #0]
 800da86:	701e      	strb	r6, [r3, #0]
 800da88:	6963      	ldr	r3, [r4, #20]
 800da8a:	3001      	adds	r0, #1
 800da8c:	4283      	cmp	r3, r0
 800da8e:	d004      	beq.n	800da9a <__swbuf_r+0x62>
 800da90:	89a3      	ldrh	r3, [r4, #12]
 800da92:	07db      	lsls	r3, r3, #31
 800da94:	d506      	bpl.n	800daa4 <__swbuf_r+0x6c>
 800da96:	2e0a      	cmp	r6, #10
 800da98:	d104      	bne.n	800daa4 <__swbuf_r+0x6c>
 800da9a:	4621      	mov	r1, r4
 800da9c:	4628      	mov	r0, r5
 800da9e:	f000 f933 	bl	800dd08 <_fflush_r>
 800daa2:	b988      	cbnz	r0, 800dac8 <__swbuf_r+0x90>
 800daa4:	4638      	mov	r0, r7
 800daa6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800daa8:	4b0a      	ldr	r3, [pc, #40]	; (800dad4 <__swbuf_r+0x9c>)
 800daaa:	429c      	cmp	r4, r3
 800daac:	d101      	bne.n	800dab2 <__swbuf_r+0x7a>
 800daae:	68ac      	ldr	r4, [r5, #8]
 800dab0:	e7cf      	b.n	800da52 <__swbuf_r+0x1a>
 800dab2:	4b09      	ldr	r3, [pc, #36]	; (800dad8 <__swbuf_r+0xa0>)
 800dab4:	429c      	cmp	r4, r3
 800dab6:	bf08      	it	eq
 800dab8:	68ec      	ldreq	r4, [r5, #12]
 800daba:	e7ca      	b.n	800da52 <__swbuf_r+0x1a>
 800dabc:	4621      	mov	r1, r4
 800dabe:	4628      	mov	r0, r5
 800dac0:	f000 f81e 	bl	800db00 <__swsetup_r>
 800dac4:	2800      	cmp	r0, #0
 800dac6:	d0cb      	beq.n	800da60 <__swbuf_r+0x28>
 800dac8:	f04f 37ff 	mov.w	r7, #4294967295
 800dacc:	e7ea      	b.n	800daa4 <__swbuf_r+0x6c>
 800dace:	bf00      	nop
 800dad0:	0800e6b0 	.word	0x0800e6b0
 800dad4:	0800e6d0 	.word	0x0800e6d0
 800dad8:	0800e690 	.word	0x0800e690

0800dadc <_write_r>:
 800dadc:	b538      	push	{r3, r4, r5, lr}
 800dade:	4d07      	ldr	r5, [pc, #28]	; (800dafc <_write_r+0x20>)
 800dae0:	4604      	mov	r4, r0
 800dae2:	4608      	mov	r0, r1
 800dae4:	4611      	mov	r1, r2
 800dae6:	2200      	movs	r2, #0
 800dae8:	602a      	str	r2, [r5, #0]
 800daea:	461a      	mov	r2, r3
 800daec:	f7f3 f90e 	bl	8000d0c <_write>
 800daf0:	1c43      	adds	r3, r0, #1
 800daf2:	d102      	bne.n	800dafa <_write_r+0x1e>
 800daf4:	682b      	ldr	r3, [r5, #0]
 800daf6:	b103      	cbz	r3, 800dafa <_write_r+0x1e>
 800daf8:	6023      	str	r3, [r4, #0]
 800dafa:	bd38      	pop	{r3, r4, r5, pc}
 800dafc:	20001734 	.word	0x20001734

0800db00 <__swsetup_r>:
 800db00:	4b32      	ldr	r3, [pc, #200]	; (800dbcc <__swsetup_r+0xcc>)
 800db02:	b570      	push	{r4, r5, r6, lr}
 800db04:	681d      	ldr	r5, [r3, #0]
 800db06:	4606      	mov	r6, r0
 800db08:	460c      	mov	r4, r1
 800db0a:	b125      	cbz	r5, 800db16 <__swsetup_r+0x16>
 800db0c:	69ab      	ldr	r3, [r5, #24]
 800db0e:	b913      	cbnz	r3, 800db16 <__swsetup_r+0x16>
 800db10:	4628      	mov	r0, r5
 800db12:	f7ff f9bf 	bl	800ce94 <__sinit>
 800db16:	4b2e      	ldr	r3, [pc, #184]	; (800dbd0 <__swsetup_r+0xd0>)
 800db18:	429c      	cmp	r4, r3
 800db1a:	d10f      	bne.n	800db3c <__swsetup_r+0x3c>
 800db1c:	686c      	ldr	r4, [r5, #4]
 800db1e:	89a3      	ldrh	r3, [r4, #12]
 800db20:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800db24:	0719      	lsls	r1, r3, #28
 800db26:	d42c      	bmi.n	800db82 <__swsetup_r+0x82>
 800db28:	06dd      	lsls	r5, r3, #27
 800db2a:	d411      	bmi.n	800db50 <__swsetup_r+0x50>
 800db2c:	2309      	movs	r3, #9
 800db2e:	6033      	str	r3, [r6, #0]
 800db30:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800db34:	81a3      	strh	r3, [r4, #12]
 800db36:	f04f 30ff 	mov.w	r0, #4294967295
 800db3a:	e03e      	b.n	800dbba <__swsetup_r+0xba>
 800db3c:	4b25      	ldr	r3, [pc, #148]	; (800dbd4 <__swsetup_r+0xd4>)
 800db3e:	429c      	cmp	r4, r3
 800db40:	d101      	bne.n	800db46 <__swsetup_r+0x46>
 800db42:	68ac      	ldr	r4, [r5, #8]
 800db44:	e7eb      	b.n	800db1e <__swsetup_r+0x1e>
 800db46:	4b24      	ldr	r3, [pc, #144]	; (800dbd8 <__swsetup_r+0xd8>)
 800db48:	429c      	cmp	r4, r3
 800db4a:	bf08      	it	eq
 800db4c:	68ec      	ldreq	r4, [r5, #12]
 800db4e:	e7e6      	b.n	800db1e <__swsetup_r+0x1e>
 800db50:	0758      	lsls	r0, r3, #29
 800db52:	d512      	bpl.n	800db7a <__swsetup_r+0x7a>
 800db54:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800db56:	b141      	cbz	r1, 800db6a <__swsetup_r+0x6a>
 800db58:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800db5c:	4299      	cmp	r1, r3
 800db5e:	d002      	beq.n	800db66 <__swsetup_r+0x66>
 800db60:	4630      	mov	r0, r6
 800db62:	f000 f9b9 	bl	800ded8 <_free_r>
 800db66:	2300      	movs	r3, #0
 800db68:	6363      	str	r3, [r4, #52]	; 0x34
 800db6a:	89a3      	ldrh	r3, [r4, #12]
 800db6c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800db70:	81a3      	strh	r3, [r4, #12]
 800db72:	2300      	movs	r3, #0
 800db74:	6063      	str	r3, [r4, #4]
 800db76:	6923      	ldr	r3, [r4, #16]
 800db78:	6023      	str	r3, [r4, #0]
 800db7a:	89a3      	ldrh	r3, [r4, #12]
 800db7c:	f043 0308 	orr.w	r3, r3, #8
 800db80:	81a3      	strh	r3, [r4, #12]
 800db82:	6923      	ldr	r3, [r4, #16]
 800db84:	b94b      	cbnz	r3, 800db9a <__swsetup_r+0x9a>
 800db86:	89a3      	ldrh	r3, [r4, #12]
 800db88:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800db8c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800db90:	d003      	beq.n	800db9a <__swsetup_r+0x9a>
 800db92:	4621      	mov	r1, r4
 800db94:	4630      	mov	r0, r6
 800db96:	f000 f92b 	bl	800ddf0 <__smakebuf_r>
 800db9a:	89a0      	ldrh	r0, [r4, #12]
 800db9c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800dba0:	f010 0301 	ands.w	r3, r0, #1
 800dba4:	d00a      	beq.n	800dbbc <__swsetup_r+0xbc>
 800dba6:	2300      	movs	r3, #0
 800dba8:	60a3      	str	r3, [r4, #8]
 800dbaa:	6963      	ldr	r3, [r4, #20]
 800dbac:	425b      	negs	r3, r3
 800dbae:	61a3      	str	r3, [r4, #24]
 800dbb0:	6923      	ldr	r3, [r4, #16]
 800dbb2:	b943      	cbnz	r3, 800dbc6 <__swsetup_r+0xc6>
 800dbb4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800dbb8:	d1ba      	bne.n	800db30 <__swsetup_r+0x30>
 800dbba:	bd70      	pop	{r4, r5, r6, pc}
 800dbbc:	0781      	lsls	r1, r0, #30
 800dbbe:	bf58      	it	pl
 800dbc0:	6963      	ldrpl	r3, [r4, #20]
 800dbc2:	60a3      	str	r3, [r4, #8]
 800dbc4:	e7f4      	b.n	800dbb0 <__swsetup_r+0xb0>
 800dbc6:	2000      	movs	r0, #0
 800dbc8:	e7f7      	b.n	800dbba <__swsetup_r+0xba>
 800dbca:	bf00      	nop
 800dbcc:	2000000c 	.word	0x2000000c
 800dbd0:	0800e6b0 	.word	0x0800e6b0
 800dbd4:	0800e6d0 	.word	0x0800e6d0
 800dbd8:	0800e690 	.word	0x0800e690

0800dbdc <_close_r>:
 800dbdc:	b538      	push	{r3, r4, r5, lr}
 800dbde:	4d06      	ldr	r5, [pc, #24]	; (800dbf8 <_close_r+0x1c>)
 800dbe0:	2300      	movs	r3, #0
 800dbe2:	4604      	mov	r4, r0
 800dbe4:	4608      	mov	r0, r1
 800dbe6:	602b      	str	r3, [r5, #0]
 800dbe8:	f7f3 fe3f 	bl	800186a <_close>
 800dbec:	1c43      	adds	r3, r0, #1
 800dbee:	d102      	bne.n	800dbf6 <_close_r+0x1a>
 800dbf0:	682b      	ldr	r3, [r5, #0]
 800dbf2:	b103      	cbz	r3, 800dbf6 <_close_r+0x1a>
 800dbf4:	6023      	str	r3, [r4, #0]
 800dbf6:	bd38      	pop	{r3, r4, r5, pc}
 800dbf8:	20001734 	.word	0x20001734

0800dbfc <__sflush_r>:
 800dbfc:	898a      	ldrh	r2, [r1, #12]
 800dbfe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dc02:	4605      	mov	r5, r0
 800dc04:	0710      	lsls	r0, r2, #28
 800dc06:	460c      	mov	r4, r1
 800dc08:	d458      	bmi.n	800dcbc <__sflush_r+0xc0>
 800dc0a:	684b      	ldr	r3, [r1, #4]
 800dc0c:	2b00      	cmp	r3, #0
 800dc0e:	dc05      	bgt.n	800dc1c <__sflush_r+0x20>
 800dc10:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800dc12:	2b00      	cmp	r3, #0
 800dc14:	dc02      	bgt.n	800dc1c <__sflush_r+0x20>
 800dc16:	2000      	movs	r0, #0
 800dc18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dc1c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800dc1e:	2e00      	cmp	r6, #0
 800dc20:	d0f9      	beq.n	800dc16 <__sflush_r+0x1a>
 800dc22:	2300      	movs	r3, #0
 800dc24:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800dc28:	682f      	ldr	r7, [r5, #0]
 800dc2a:	602b      	str	r3, [r5, #0]
 800dc2c:	d032      	beq.n	800dc94 <__sflush_r+0x98>
 800dc2e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800dc30:	89a3      	ldrh	r3, [r4, #12]
 800dc32:	075a      	lsls	r2, r3, #29
 800dc34:	d505      	bpl.n	800dc42 <__sflush_r+0x46>
 800dc36:	6863      	ldr	r3, [r4, #4]
 800dc38:	1ac0      	subs	r0, r0, r3
 800dc3a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800dc3c:	b10b      	cbz	r3, 800dc42 <__sflush_r+0x46>
 800dc3e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800dc40:	1ac0      	subs	r0, r0, r3
 800dc42:	2300      	movs	r3, #0
 800dc44:	4602      	mov	r2, r0
 800dc46:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800dc48:	6a21      	ldr	r1, [r4, #32]
 800dc4a:	4628      	mov	r0, r5
 800dc4c:	47b0      	blx	r6
 800dc4e:	1c43      	adds	r3, r0, #1
 800dc50:	89a3      	ldrh	r3, [r4, #12]
 800dc52:	d106      	bne.n	800dc62 <__sflush_r+0x66>
 800dc54:	6829      	ldr	r1, [r5, #0]
 800dc56:	291d      	cmp	r1, #29
 800dc58:	d82c      	bhi.n	800dcb4 <__sflush_r+0xb8>
 800dc5a:	4a2a      	ldr	r2, [pc, #168]	; (800dd04 <__sflush_r+0x108>)
 800dc5c:	40ca      	lsrs	r2, r1
 800dc5e:	07d6      	lsls	r6, r2, #31
 800dc60:	d528      	bpl.n	800dcb4 <__sflush_r+0xb8>
 800dc62:	2200      	movs	r2, #0
 800dc64:	6062      	str	r2, [r4, #4]
 800dc66:	04d9      	lsls	r1, r3, #19
 800dc68:	6922      	ldr	r2, [r4, #16]
 800dc6a:	6022      	str	r2, [r4, #0]
 800dc6c:	d504      	bpl.n	800dc78 <__sflush_r+0x7c>
 800dc6e:	1c42      	adds	r2, r0, #1
 800dc70:	d101      	bne.n	800dc76 <__sflush_r+0x7a>
 800dc72:	682b      	ldr	r3, [r5, #0]
 800dc74:	b903      	cbnz	r3, 800dc78 <__sflush_r+0x7c>
 800dc76:	6560      	str	r0, [r4, #84]	; 0x54
 800dc78:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800dc7a:	602f      	str	r7, [r5, #0]
 800dc7c:	2900      	cmp	r1, #0
 800dc7e:	d0ca      	beq.n	800dc16 <__sflush_r+0x1a>
 800dc80:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800dc84:	4299      	cmp	r1, r3
 800dc86:	d002      	beq.n	800dc8e <__sflush_r+0x92>
 800dc88:	4628      	mov	r0, r5
 800dc8a:	f000 f925 	bl	800ded8 <_free_r>
 800dc8e:	2000      	movs	r0, #0
 800dc90:	6360      	str	r0, [r4, #52]	; 0x34
 800dc92:	e7c1      	b.n	800dc18 <__sflush_r+0x1c>
 800dc94:	6a21      	ldr	r1, [r4, #32]
 800dc96:	2301      	movs	r3, #1
 800dc98:	4628      	mov	r0, r5
 800dc9a:	47b0      	blx	r6
 800dc9c:	1c41      	adds	r1, r0, #1
 800dc9e:	d1c7      	bne.n	800dc30 <__sflush_r+0x34>
 800dca0:	682b      	ldr	r3, [r5, #0]
 800dca2:	2b00      	cmp	r3, #0
 800dca4:	d0c4      	beq.n	800dc30 <__sflush_r+0x34>
 800dca6:	2b1d      	cmp	r3, #29
 800dca8:	d001      	beq.n	800dcae <__sflush_r+0xb2>
 800dcaa:	2b16      	cmp	r3, #22
 800dcac:	d101      	bne.n	800dcb2 <__sflush_r+0xb6>
 800dcae:	602f      	str	r7, [r5, #0]
 800dcb0:	e7b1      	b.n	800dc16 <__sflush_r+0x1a>
 800dcb2:	89a3      	ldrh	r3, [r4, #12]
 800dcb4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dcb8:	81a3      	strh	r3, [r4, #12]
 800dcba:	e7ad      	b.n	800dc18 <__sflush_r+0x1c>
 800dcbc:	690f      	ldr	r7, [r1, #16]
 800dcbe:	2f00      	cmp	r7, #0
 800dcc0:	d0a9      	beq.n	800dc16 <__sflush_r+0x1a>
 800dcc2:	0793      	lsls	r3, r2, #30
 800dcc4:	680e      	ldr	r6, [r1, #0]
 800dcc6:	bf08      	it	eq
 800dcc8:	694b      	ldreq	r3, [r1, #20]
 800dcca:	600f      	str	r7, [r1, #0]
 800dccc:	bf18      	it	ne
 800dcce:	2300      	movne	r3, #0
 800dcd0:	eba6 0807 	sub.w	r8, r6, r7
 800dcd4:	608b      	str	r3, [r1, #8]
 800dcd6:	f1b8 0f00 	cmp.w	r8, #0
 800dcda:	dd9c      	ble.n	800dc16 <__sflush_r+0x1a>
 800dcdc:	6a21      	ldr	r1, [r4, #32]
 800dcde:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800dce0:	4643      	mov	r3, r8
 800dce2:	463a      	mov	r2, r7
 800dce4:	4628      	mov	r0, r5
 800dce6:	47b0      	blx	r6
 800dce8:	2800      	cmp	r0, #0
 800dcea:	dc06      	bgt.n	800dcfa <__sflush_r+0xfe>
 800dcec:	89a3      	ldrh	r3, [r4, #12]
 800dcee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dcf2:	81a3      	strh	r3, [r4, #12]
 800dcf4:	f04f 30ff 	mov.w	r0, #4294967295
 800dcf8:	e78e      	b.n	800dc18 <__sflush_r+0x1c>
 800dcfa:	4407      	add	r7, r0
 800dcfc:	eba8 0800 	sub.w	r8, r8, r0
 800dd00:	e7e9      	b.n	800dcd6 <__sflush_r+0xda>
 800dd02:	bf00      	nop
 800dd04:	20400001 	.word	0x20400001

0800dd08 <_fflush_r>:
 800dd08:	b538      	push	{r3, r4, r5, lr}
 800dd0a:	690b      	ldr	r3, [r1, #16]
 800dd0c:	4605      	mov	r5, r0
 800dd0e:	460c      	mov	r4, r1
 800dd10:	b913      	cbnz	r3, 800dd18 <_fflush_r+0x10>
 800dd12:	2500      	movs	r5, #0
 800dd14:	4628      	mov	r0, r5
 800dd16:	bd38      	pop	{r3, r4, r5, pc}
 800dd18:	b118      	cbz	r0, 800dd22 <_fflush_r+0x1a>
 800dd1a:	6983      	ldr	r3, [r0, #24]
 800dd1c:	b90b      	cbnz	r3, 800dd22 <_fflush_r+0x1a>
 800dd1e:	f7ff f8b9 	bl	800ce94 <__sinit>
 800dd22:	4b14      	ldr	r3, [pc, #80]	; (800dd74 <_fflush_r+0x6c>)
 800dd24:	429c      	cmp	r4, r3
 800dd26:	d11b      	bne.n	800dd60 <_fflush_r+0x58>
 800dd28:	686c      	ldr	r4, [r5, #4]
 800dd2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dd2e:	2b00      	cmp	r3, #0
 800dd30:	d0ef      	beq.n	800dd12 <_fflush_r+0xa>
 800dd32:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800dd34:	07d0      	lsls	r0, r2, #31
 800dd36:	d404      	bmi.n	800dd42 <_fflush_r+0x3a>
 800dd38:	0599      	lsls	r1, r3, #22
 800dd3a:	d402      	bmi.n	800dd42 <_fflush_r+0x3a>
 800dd3c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800dd3e:	f7ff f947 	bl	800cfd0 <__retarget_lock_acquire_recursive>
 800dd42:	4628      	mov	r0, r5
 800dd44:	4621      	mov	r1, r4
 800dd46:	f7ff ff59 	bl	800dbfc <__sflush_r>
 800dd4a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800dd4c:	07da      	lsls	r2, r3, #31
 800dd4e:	4605      	mov	r5, r0
 800dd50:	d4e0      	bmi.n	800dd14 <_fflush_r+0xc>
 800dd52:	89a3      	ldrh	r3, [r4, #12]
 800dd54:	059b      	lsls	r3, r3, #22
 800dd56:	d4dd      	bmi.n	800dd14 <_fflush_r+0xc>
 800dd58:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800dd5a:	f7ff f93a 	bl	800cfd2 <__retarget_lock_release_recursive>
 800dd5e:	e7d9      	b.n	800dd14 <_fflush_r+0xc>
 800dd60:	4b05      	ldr	r3, [pc, #20]	; (800dd78 <_fflush_r+0x70>)
 800dd62:	429c      	cmp	r4, r3
 800dd64:	d101      	bne.n	800dd6a <_fflush_r+0x62>
 800dd66:	68ac      	ldr	r4, [r5, #8]
 800dd68:	e7df      	b.n	800dd2a <_fflush_r+0x22>
 800dd6a:	4b04      	ldr	r3, [pc, #16]	; (800dd7c <_fflush_r+0x74>)
 800dd6c:	429c      	cmp	r4, r3
 800dd6e:	bf08      	it	eq
 800dd70:	68ec      	ldreq	r4, [r5, #12]
 800dd72:	e7da      	b.n	800dd2a <_fflush_r+0x22>
 800dd74:	0800e6b0 	.word	0x0800e6b0
 800dd78:	0800e6d0 	.word	0x0800e6d0
 800dd7c:	0800e690 	.word	0x0800e690

0800dd80 <_lseek_r>:
 800dd80:	b538      	push	{r3, r4, r5, lr}
 800dd82:	4d07      	ldr	r5, [pc, #28]	; (800dda0 <_lseek_r+0x20>)
 800dd84:	4604      	mov	r4, r0
 800dd86:	4608      	mov	r0, r1
 800dd88:	4611      	mov	r1, r2
 800dd8a:	2200      	movs	r2, #0
 800dd8c:	602a      	str	r2, [r5, #0]
 800dd8e:	461a      	mov	r2, r3
 800dd90:	f7f3 fd92 	bl	80018b8 <_lseek>
 800dd94:	1c43      	adds	r3, r0, #1
 800dd96:	d102      	bne.n	800dd9e <_lseek_r+0x1e>
 800dd98:	682b      	ldr	r3, [r5, #0]
 800dd9a:	b103      	cbz	r3, 800dd9e <_lseek_r+0x1e>
 800dd9c:	6023      	str	r3, [r4, #0]
 800dd9e:	bd38      	pop	{r3, r4, r5, pc}
 800dda0:	20001734 	.word	0x20001734

0800dda4 <__swhatbuf_r>:
 800dda4:	b570      	push	{r4, r5, r6, lr}
 800dda6:	460e      	mov	r6, r1
 800dda8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ddac:	2900      	cmp	r1, #0
 800ddae:	b096      	sub	sp, #88	; 0x58
 800ddb0:	4614      	mov	r4, r2
 800ddb2:	461d      	mov	r5, r3
 800ddb4:	da08      	bge.n	800ddc8 <__swhatbuf_r+0x24>
 800ddb6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800ddba:	2200      	movs	r2, #0
 800ddbc:	602a      	str	r2, [r5, #0]
 800ddbe:	061a      	lsls	r2, r3, #24
 800ddc0:	d410      	bmi.n	800dde4 <__swhatbuf_r+0x40>
 800ddc2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ddc6:	e00e      	b.n	800dde6 <__swhatbuf_r+0x42>
 800ddc8:	466a      	mov	r2, sp
 800ddca:	f000 f913 	bl	800dff4 <_fstat_r>
 800ddce:	2800      	cmp	r0, #0
 800ddd0:	dbf1      	blt.n	800ddb6 <__swhatbuf_r+0x12>
 800ddd2:	9a01      	ldr	r2, [sp, #4]
 800ddd4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ddd8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800dddc:	425a      	negs	r2, r3
 800ddde:	415a      	adcs	r2, r3
 800dde0:	602a      	str	r2, [r5, #0]
 800dde2:	e7ee      	b.n	800ddc2 <__swhatbuf_r+0x1e>
 800dde4:	2340      	movs	r3, #64	; 0x40
 800dde6:	2000      	movs	r0, #0
 800dde8:	6023      	str	r3, [r4, #0]
 800ddea:	b016      	add	sp, #88	; 0x58
 800ddec:	bd70      	pop	{r4, r5, r6, pc}
	...

0800ddf0 <__smakebuf_r>:
 800ddf0:	898b      	ldrh	r3, [r1, #12]
 800ddf2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ddf4:	079d      	lsls	r5, r3, #30
 800ddf6:	4606      	mov	r6, r0
 800ddf8:	460c      	mov	r4, r1
 800ddfa:	d507      	bpl.n	800de0c <__smakebuf_r+0x1c>
 800ddfc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800de00:	6023      	str	r3, [r4, #0]
 800de02:	6123      	str	r3, [r4, #16]
 800de04:	2301      	movs	r3, #1
 800de06:	6163      	str	r3, [r4, #20]
 800de08:	b002      	add	sp, #8
 800de0a:	bd70      	pop	{r4, r5, r6, pc}
 800de0c:	ab01      	add	r3, sp, #4
 800de0e:	466a      	mov	r2, sp
 800de10:	f7ff ffc8 	bl	800dda4 <__swhatbuf_r>
 800de14:	9900      	ldr	r1, [sp, #0]
 800de16:	4605      	mov	r5, r0
 800de18:	4630      	mov	r0, r6
 800de1a:	f7ff f8fb 	bl	800d014 <_malloc_r>
 800de1e:	b948      	cbnz	r0, 800de34 <__smakebuf_r+0x44>
 800de20:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800de24:	059a      	lsls	r2, r3, #22
 800de26:	d4ef      	bmi.n	800de08 <__smakebuf_r+0x18>
 800de28:	f023 0303 	bic.w	r3, r3, #3
 800de2c:	f043 0302 	orr.w	r3, r3, #2
 800de30:	81a3      	strh	r3, [r4, #12]
 800de32:	e7e3      	b.n	800ddfc <__smakebuf_r+0xc>
 800de34:	4b0d      	ldr	r3, [pc, #52]	; (800de6c <__smakebuf_r+0x7c>)
 800de36:	62b3      	str	r3, [r6, #40]	; 0x28
 800de38:	89a3      	ldrh	r3, [r4, #12]
 800de3a:	6020      	str	r0, [r4, #0]
 800de3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800de40:	81a3      	strh	r3, [r4, #12]
 800de42:	9b00      	ldr	r3, [sp, #0]
 800de44:	6163      	str	r3, [r4, #20]
 800de46:	9b01      	ldr	r3, [sp, #4]
 800de48:	6120      	str	r0, [r4, #16]
 800de4a:	b15b      	cbz	r3, 800de64 <__smakebuf_r+0x74>
 800de4c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800de50:	4630      	mov	r0, r6
 800de52:	f000 f8e1 	bl	800e018 <_isatty_r>
 800de56:	b128      	cbz	r0, 800de64 <__smakebuf_r+0x74>
 800de58:	89a3      	ldrh	r3, [r4, #12]
 800de5a:	f023 0303 	bic.w	r3, r3, #3
 800de5e:	f043 0301 	orr.w	r3, r3, #1
 800de62:	81a3      	strh	r3, [r4, #12]
 800de64:	89a0      	ldrh	r0, [r4, #12]
 800de66:	4305      	orrs	r5, r0
 800de68:	81a5      	strh	r5, [r4, #12]
 800de6a:	e7cd      	b.n	800de08 <__smakebuf_r+0x18>
 800de6c:	0800ce2d 	.word	0x0800ce2d

0800de70 <memcpy>:
 800de70:	440a      	add	r2, r1
 800de72:	4291      	cmp	r1, r2
 800de74:	f100 33ff 	add.w	r3, r0, #4294967295
 800de78:	d100      	bne.n	800de7c <memcpy+0xc>
 800de7a:	4770      	bx	lr
 800de7c:	b510      	push	{r4, lr}
 800de7e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800de82:	f803 4f01 	strb.w	r4, [r3, #1]!
 800de86:	4291      	cmp	r1, r2
 800de88:	d1f9      	bne.n	800de7e <memcpy+0xe>
 800de8a:	bd10      	pop	{r4, pc}

0800de8c <memmove>:
 800de8c:	4288      	cmp	r0, r1
 800de8e:	b510      	push	{r4, lr}
 800de90:	eb01 0402 	add.w	r4, r1, r2
 800de94:	d902      	bls.n	800de9c <memmove+0x10>
 800de96:	4284      	cmp	r4, r0
 800de98:	4623      	mov	r3, r4
 800de9a:	d807      	bhi.n	800deac <memmove+0x20>
 800de9c:	1e43      	subs	r3, r0, #1
 800de9e:	42a1      	cmp	r1, r4
 800dea0:	d008      	beq.n	800deb4 <memmove+0x28>
 800dea2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800dea6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800deaa:	e7f8      	b.n	800de9e <memmove+0x12>
 800deac:	4402      	add	r2, r0
 800deae:	4601      	mov	r1, r0
 800deb0:	428a      	cmp	r2, r1
 800deb2:	d100      	bne.n	800deb6 <memmove+0x2a>
 800deb4:	bd10      	pop	{r4, pc}
 800deb6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800deba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800debe:	e7f7      	b.n	800deb0 <memmove+0x24>

0800dec0 <__malloc_lock>:
 800dec0:	4801      	ldr	r0, [pc, #4]	; (800dec8 <__malloc_lock+0x8>)
 800dec2:	f7ff b885 	b.w	800cfd0 <__retarget_lock_acquire_recursive>
 800dec6:	bf00      	nop
 800dec8:	20001728 	.word	0x20001728

0800decc <__malloc_unlock>:
 800decc:	4801      	ldr	r0, [pc, #4]	; (800ded4 <__malloc_unlock+0x8>)
 800dece:	f7ff b880 	b.w	800cfd2 <__retarget_lock_release_recursive>
 800ded2:	bf00      	nop
 800ded4:	20001728 	.word	0x20001728

0800ded8 <_free_r>:
 800ded8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800deda:	2900      	cmp	r1, #0
 800dedc:	d044      	beq.n	800df68 <_free_r+0x90>
 800dede:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dee2:	9001      	str	r0, [sp, #4]
 800dee4:	2b00      	cmp	r3, #0
 800dee6:	f1a1 0404 	sub.w	r4, r1, #4
 800deea:	bfb8      	it	lt
 800deec:	18e4      	addlt	r4, r4, r3
 800deee:	f7ff ffe7 	bl	800dec0 <__malloc_lock>
 800def2:	4a1e      	ldr	r2, [pc, #120]	; (800df6c <_free_r+0x94>)
 800def4:	9801      	ldr	r0, [sp, #4]
 800def6:	6813      	ldr	r3, [r2, #0]
 800def8:	b933      	cbnz	r3, 800df08 <_free_r+0x30>
 800defa:	6063      	str	r3, [r4, #4]
 800defc:	6014      	str	r4, [r2, #0]
 800defe:	b003      	add	sp, #12
 800df00:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800df04:	f7ff bfe2 	b.w	800decc <__malloc_unlock>
 800df08:	42a3      	cmp	r3, r4
 800df0a:	d908      	bls.n	800df1e <_free_r+0x46>
 800df0c:	6825      	ldr	r5, [r4, #0]
 800df0e:	1961      	adds	r1, r4, r5
 800df10:	428b      	cmp	r3, r1
 800df12:	bf01      	itttt	eq
 800df14:	6819      	ldreq	r1, [r3, #0]
 800df16:	685b      	ldreq	r3, [r3, #4]
 800df18:	1949      	addeq	r1, r1, r5
 800df1a:	6021      	streq	r1, [r4, #0]
 800df1c:	e7ed      	b.n	800defa <_free_r+0x22>
 800df1e:	461a      	mov	r2, r3
 800df20:	685b      	ldr	r3, [r3, #4]
 800df22:	b10b      	cbz	r3, 800df28 <_free_r+0x50>
 800df24:	42a3      	cmp	r3, r4
 800df26:	d9fa      	bls.n	800df1e <_free_r+0x46>
 800df28:	6811      	ldr	r1, [r2, #0]
 800df2a:	1855      	adds	r5, r2, r1
 800df2c:	42a5      	cmp	r5, r4
 800df2e:	d10b      	bne.n	800df48 <_free_r+0x70>
 800df30:	6824      	ldr	r4, [r4, #0]
 800df32:	4421      	add	r1, r4
 800df34:	1854      	adds	r4, r2, r1
 800df36:	42a3      	cmp	r3, r4
 800df38:	6011      	str	r1, [r2, #0]
 800df3a:	d1e0      	bne.n	800defe <_free_r+0x26>
 800df3c:	681c      	ldr	r4, [r3, #0]
 800df3e:	685b      	ldr	r3, [r3, #4]
 800df40:	6053      	str	r3, [r2, #4]
 800df42:	4421      	add	r1, r4
 800df44:	6011      	str	r1, [r2, #0]
 800df46:	e7da      	b.n	800defe <_free_r+0x26>
 800df48:	d902      	bls.n	800df50 <_free_r+0x78>
 800df4a:	230c      	movs	r3, #12
 800df4c:	6003      	str	r3, [r0, #0]
 800df4e:	e7d6      	b.n	800defe <_free_r+0x26>
 800df50:	6825      	ldr	r5, [r4, #0]
 800df52:	1961      	adds	r1, r4, r5
 800df54:	428b      	cmp	r3, r1
 800df56:	bf04      	itt	eq
 800df58:	6819      	ldreq	r1, [r3, #0]
 800df5a:	685b      	ldreq	r3, [r3, #4]
 800df5c:	6063      	str	r3, [r4, #4]
 800df5e:	bf04      	itt	eq
 800df60:	1949      	addeq	r1, r1, r5
 800df62:	6021      	streq	r1, [r4, #0]
 800df64:	6054      	str	r4, [r2, #4]
 800df66:	e7ca      	b.n	800defe <_free_r+0x26>
 800df68:	b003      	add	sp, #12
 800df6a:	bd30      	pop	{r4, r5, pc}
 800df6c:	2000172c 	.word	0x2000172c

0800df70 <_realloc_r>:
 800df70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800df74:	4680      	mov	r8, r0
 800df76:	4614      	mov	r4, r2
 800df78:	460e      	mov	r6, r1
 800df7a:	b921      	cbnz	r1, 800df86 <_realloc_r+0x16>
 800df7c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800df80:	4611      	mov	r1, r2
 800df82:	f7ff b847 	b.w	800d014 <_malloc_r>
 800df86:	b92a      	cbnz	r2, 800df94 <_realloc_r+0x24>
 800df88:	f7ff ffa6 	bl	800ded8 <_free_r>
 800df8c:	4625      	mov	r5, r4
 800df8e:	4628      	mov	r0, r5
 800df90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800df94:	f000 f850 	bl	800e038 <_malloc_usable_size_r>
 800df98:	4284      	cmp	r4, r0
 800df9a:	4607      	mov	r7, r0
 800df9c:	d802      	bhi.n	800dfa4 <_realloc_r+0x34>
 800df9e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800dfa2:	d812      	bhi.n	800dfca <_realloc_r+0x5a>
 800dfa4:	4621      	mov	r1, r4
 800dfa6:	4640      	mov	r0, r8
 800dfa8:	f7ff f834 	bl	800d014 <_malloc_r>
 800dfac:	4605      	mov	r5, r0
 800dfae:	2800      	cmp	r0, #0
 800dfb0:	d0ed      	beq.n	800df8e <_realloc_r+0x1e>
 800dfb2:	42bc      	cmp	r4, r7
 800dfb4:	4622      	mov	r2, r4
 800dfb6:	4631      	mov	r1, r6
 800dfb8:	bf28      	it	cs
 800dfba:	463a      	movcs	r2, r7
 800dfbc:	f7ff ff58 	bl	800de70 <memcpy>
 800dfc0:	4631      	mov	r1, r6
 800dfc2:	4640      	mov	r0, r8
 800dfc4:	f7ff ff88 	bl	800ded8 <_free_r>
 800dfc8:	e7e1      	b.n	800df8e <_realloc_r+0x1e>
 800dfca:	4635      	mov	r5, r6
 800dfcc:	e7df      	b.n	800df8e <_realloc_r+0x1e>
	...

0800dfd0 <_read_r>:
 800dfd0:	b538      	push	{r3, r4, r5, lr}
 800dfd2:	4d07      	ldr	r5, [pc, #28]	; (800dff0 <_read_r+0x20>)
 800dfd4:	4604      	mov	r4, r0
 800dfd6:	4608      	mov	r0, r1
 800dfd8:	4611      	mov	r1, r2
 800dfda:	2200      	movs	r2, #0
 800dfdc:	602a      	str	r2, [r5, #0]
 800dfde:	461a      	mov	r2, r3
 800dfe0:	f7f3 fc26 	bl	8001830 <_read>
 800dfe4:	1c43      	adds	r3, r0, #1
 800dfe6:	d102      	bne.n	800dfee <_read_r+0x1e>
 800dfe8:	682b      	ldr	r3, [r5, #0]
 800dfea:	b103      	cbz	r3, 800dfee <_read_r+0x1e>
 800dfec:	6023      	str	r3, [r4, #0]
 800dfee:	bd38      	pop	{r3, r4, r5, pc}
 800dff0:	20001734 	.word	0x20001734

0800dff4 <_fstat_r>:
 800dff4:	b538      	push	{r3, r4, r5, lr}
 800dff6:	4d07      	ldr	r5, [pc, #28]	; (800e014 <_fstat_r+0x20>)
 800dff8:	2300      	movs	r3, #0
 800dffa:	4604      	mov	r4, r0
 800dffc:	4608      	mov	r0, r1
 800dffe:	4611      	mov	r1, r2
 800e000:	602b      	str	r3, [r5, #0]
 800e002:	f7f3 fc3e 	bl	8001882 <_fstat>
 800e006:	1c43      	adds	r3, r0, #1
 800e008:	d102      	bne.n	800e010 <_fstat_r+0x1c>
 800e00a:	682b      	ldr	r3, [r5, #0]
 800e00c:	b103      	cbz	r3, 800e010 <_fstat_r+0x1c>
 800e00e:	6023      	str	r3, [r4, #0]
 800e010:	bd38      	pop	{r3, r4, r5, pc}
 800e012:	bf00      	nop
 800e014:	20001734 	.word	0x20001734

0800e018 <_isatty_r>:
 800e018:	b538      	push	{r3, r4, r5, lr}
 800e01a:	4d06      	ldr	r5, [pc, #24]	; (800e034 <_isatty_r+0x1c>)
 800e01c:	2300      	movs	r3, #0
 800e01e:	4604      	mov	r4, r0
 800e020:	4608      	mov	r0, r1
 800e022:	602b      	str	r3, [r5, #0]
 800e024:	f7f3 fc3d 	bl	80018a2 <_isatty>
 800e028:	1c43      	adds	r3, r0, #1
 800e02a:	d102      	bne.n	800e032 <_isatty_r+0x1a>
 800e02c:	682b      	ldr	r3, [r5, #0]
 800e02e:	b103      	cbz	r3, 800e032 <_isatty_r+0x1a>
 800e030:	6023      	str	r3, [r4, #0]
 800e032:	bd38      	pop	{r3, r4, r5, pc}
 800e034:	20001734 	.word	0x20001734

0800e038 <_malloc_usable_size_r>:
 800e038:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e03c:	1f18      	subs	r0, r3, #4
 800e03e:	2b00      	cmp	r3, #0
 800e040:	bfbc      	itt	lt
 800e042:	580b      	ldrlt	r3, [r1, r0]
 800e044:	18c0      	addlt	r0, r0, r3
 800e046:	4770      	bx	lr

0800e048 <_init>:
 800e048:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e04a:	bf00      	nop
 800e04c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e04e:	bc08      	pop	{r3}
 800e050:	469e      	mov	lr, r3
 800e052:	4770      	bx	lr

0800e054 <_fini>:
 800e054:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e056:	bf00      	nop
 800e058:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e05a:	bc08      	pop	{r3}
 800e05c:	469e      	mov	lr, r3
 800e05e:	4770      	bx	lr
